
STSYS-NS101 Jan2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010298  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000151c  08010350  08010350  00020350  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801186c  0801186c  00030208  2**0
                  CONTENTS
  4 .ARM          00000000  0801186c  0801186c  00030208  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801186c  0801186c  00030208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801186c  0801186c  0002186c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011870  08011870  00021870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  08011874  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ae0  20000208  08011a7c  00030208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ce8  08011a7c  00030ce8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026e48  00000000  00000000  00030273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000049b9  00000000  00000000  000570bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ff0  00000000  00000000  0005ba78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001928  00000000  00000000  0005da68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d0f5  00000000  00000000  0005f390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026828  00000000  00000000  0007c485  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aa273  00000000  00000000  000a2cad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000088b8  00000000  00000000  0014cf20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  001557d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000208 	.word	0x20000208
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08010338 	.word	0x08010338

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	2000020c 	.word	0x2000020c
 80000fc:	08010338 	.word	0x08010338

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_uqi>:
 8000110:	b402      	push	{r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	5c09      	ldrb	r1, [r1, r0]
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	448e      	add	lr, r1
 800011e:	bc02      	pop	{r1}
 8000120:	4770      	bx	lr
 8000122:	46c0      	nop			; (mov r8, r8)

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__udivsi3>:
 8000138:	2200      	movs	r2, #0
 800013a:	0843      	lsrs	r3, r0, #1
 800013c:	428b      	cmp	r3, r1
 800013e:	d374      	bcc.n	800022a <__udivsi3+0xf2>
 8000140:	0903      	lsrs	r3, r0, #4
 8000142:	428b      	cmp	r3, r1
 8000144:	d35f      	bcc.n	8000206 <__udivsi3+0xce>
 8000146:	0a03      	lsrs	r3, r0, #8
 8000148:	428b      	cmp	r3, r1
 800014a:	d344      	bcc.n	80001d6 <__udivsi3+0x9e>
 800014c:	0b03      	lsrs	r3, r0, #12
 800014e:	428b      	cmp	r3, r1
 8000150:	d328      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d30d      	bcc.n	8000174 <__udivsi3+0x3c>
 8000158:	22ff      	movs	r2, #255	; 0xff
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	ba12      	rev	r2, r2
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d302      	bcc.n	800016a <__udivsi3+0x32>
 8000164:	1212      	asrs	r2, r2, #8
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	d065      	beq.n	8000236 <__udivsi3+0xfe>
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d319      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000170:	e000      	b.n	8000174 <__udivsi3+0x3c>
 8000172:	0a09      	lsrs	r1, r1, #8
 8000174:	0bc3      	lsrs	r3, r0, #15
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x46>
 800017a:	03cb      	lsls	r3, r1, #15
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b83      	lsrs	r3, r0, #14
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x52>
 8000186:	038b      	lsls	r3, r1, #14
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b43      	lsrs	r3, r0, #13
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x5e>
 8000192:	034b      	lsls	r3, r1, #13
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b03      	lsrs	r3, r0, #12
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x6a>
 800019e:	030b      	lsls	r3, r1, #12
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0ac3      	lsrs	r3, r0, #11
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x76>
 80001aa:	02cb      	lsls	r3, r1, #11
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a83      	lsrs	r3, r0, #10
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x82>
 80001b6:	028b      	lsls	r3, r1, #10
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a43      	lsrs	r3, r0, #9
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x8e>
 80001c2:	024b      	lsls	r3, r1, #9
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a03      	lsrs	r3, r0, #8
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x9a>
 80001ce:	020b      	lsls	r3, r1, #8
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	d2cd      	bcs.n	8000172 <__udivsi3+0x3a>
 80001d6:	09c3      	lsrs	r3, r0, #7
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xa8>
 80001dc:	01cb      	lsls	r3, r1, #7
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0983      	lsrs	r3, r0, #6
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xb4>
 80001e8:	018b      	lsls	r3, r1, #6
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0943      	lsrs	r3, r0, #5
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xc0>
 80001f4:	014b      	lsls	r3, r1, #5
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0903      	lsrs	r3, r0, #4
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xcc>
 8000200:	010b      	lsls	r3, r1, #4
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	08c3      	lsrs	r3, r0, #3
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xd8>
 800020c:	00cb      	lsls	r3, r1, #3
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0883      	lsrs	r3, r0, #2
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xe4>
 8000218:	008b      	lsls	r3, r1, #2
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0843      	lsrs	r3, r0, #1
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xf0>
 8000224:	004b      	lsls	r3, r1, #1
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	1a41      	subs	r1, r0, r1
 800022c:	d200      	bcs.n	8000230 <__udivsi3+0xf8>
 800022e:	4601      	mov	r1, r0
 8000230:	4152      	adcs	r2, r2
 8000232:	4610      	mov	r0, r2
 8000234:	4770      	bx	lr
 8000236:	e7ff      	b.n	8000238 <__udivsi3+0x100>
 8000238:	b501      	push	{r0, lr}
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f8f0 	bl	8000420 <__aeabi_idiv0>
 8000240:	bd02      	pop	{r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uidivmod>:
 8000244:	2900      	cmp	r1, #0
 8000246:	d0f7      	beq.n	8000238 <__udivsi3+0x100>
 8000248:	e776      	b.n	8000138 <__udivsi3>
 800024a:	4770      	bx	lr

0800024c <__divsi3>:
 800024c:	4603      	mov	r3, r0
 800024e:	430b      	orrs	r3, r1
 8000250:	d47f      	bmi.n	8000352 <__divsi3+0x106>
 8000252:	2200      	movs	r2, #0
 8000254:	0843      	lsrs	r3, r0, #1
 8000256:	428b      	cmp	r3, r1
 8000258:	d374      	bcc.n	8000344 <__divsi3+0xf8>
 800025a:	0903      	lsrs	r3, r0, #4
 800025c:	428b      	cmp	r3, r1
 800025e:	d35f      	bcc.n	8000320 <__divsi3+0xd4>
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d344      	bcc.n	80002f0 <__divsi3+0xa4>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d328      	bcc.n	80002be <__divsi3+0x72>
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d30d      	bcc.n	800028e <__divsi3+0x42>
 8000272:	22ff      	movs	r2, #255	; 0xff
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	ba12      	rev	r2, r2
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__divsi3+0x38>
 800027e:	1212      	asrs	r2, r2, #8
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	d065      	beq.n	8000350 <__divsi3+0x104>
 8000284:	0b03      	lsrs	r3, r0, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d319      	bcc.n	80002be <__divsi3+0x72>
 800028a:	e000      	b.n	800028e <__divsi3+0x42>
 800028c:	0a09      	lsrs	r1, r1, #8
 800028e:	0bc3      	lsrs	r3, r0, #15
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x4c>
 8000294:	03cb      	lsls	r3, r1, #15
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b83      	lsrs	r3, r0, #14
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x58>
 80002a0:	038b      	lsls	r3, r1, #14
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b43      	lsrs	r3, r0, #13
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x64>
 80002ac:	034b      	lsls	r3, r1, #13
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b03      	lsrs	r3, r0, #12
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x70>
 80002b8:	030b      	lsls	r3, r1, #12
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0ac3      	lsrs	r3, r0, #11
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x7c>
 80002c4:	02cb      	lsls	r3, r1, #11
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a83      	lsrs	r3, r0, #10
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x88>
 80002d0:	028b      	lsls	r3, r1, #10
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a43      	lsrs	r3, r0, #9
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x94>
 80002dc:	024b      	lsls	r3, r1, #9
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a03      	lsrs	r3, r0, #8
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0xa0>
 80002e8:	020b      	lsls	r3, r1, #8
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	d2cd      	bcs.n	800028c <__divsi3+0x40>
 80002f0:	09c3      	lsrs	r3, r0, #7
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xae>
 80002f6:	01cb      	lsls	r3, r1, #7
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0983      	lsrs	r3, r0, #6
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xba>
 8000302:	018b      	lsls	r3, r1, #6
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0943      	lsrs	r3, r0, #5
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xc6>
 800030e:	014b      	lsls	r3, r1, #5
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xd2>
 800031a:	010b      	lsls	r3, r1, #4
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	08c3      	lsrs	r3, r0, #3
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xde>
 8000326:	00cb      	lsls	r3, r1, #3
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0883      	lsrs	r3, r0, #2
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xea>
 8000332:	008b      	lsls	r3, r1, #2
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0843      	lsrs	r3, r0, #1
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xf6>
 800033e:	004b      	lsls	r3, r1, #1
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	1a41      	subs	r1, r0, r1
 8000346:	d200      	bcs.n	800034a <__divsi3+0xfe>
 8000348:	4601      	mov	r1, r0
 800034a:	4152      	adcs	r2, r2
 800034c:	4610      	mov	r0, r2
 800034e:	4770      	bx	lr
 8000350:	e05d      	b.n	800040e <__divsi3+0x1c2>
 8000352:	0fca      	lsrs	r2, r1, #31
 8000354:	d000      	beq.n	8000358 <__divsi3+0x10c>
 8000356:	4249      	negs	r1, r1
 8000358:	1003      	asrs	r3, r0, #32
 800035a:	d300      	bcc.n	800035e <__divsi3+0x112>
 800035c:	4240      	negs	r0, r0
 800035e:	4053      	eors	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	469c      	mov	ip, r3
 8000364:	0903      	lsrs	r3, r0, #4
 8000366:	428b      	cmp	r3, r1
 8000368:	d32d      	bcc.n	80003c6 <__divsi3+0x17a>
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d312      	bcc.n	8000396 <__divsi3+0x14a>
 8000370:	22fc      	movs	r2, #252	; 0xfc
 8000372:	0189      	lsls	r1, r1, #6
 8000374:	ba12      	rev	r2, r2
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d30c      	bcc.n	8000396 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d308      	bcc.n	8000396 <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d304      	bcc.n	8000396 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	d03a      	beq.n	8000406 <__divsi3+0x1ba>
 8000390:	1192      	asrs	r2, r2, #6
 8000392:	e000      	b.n	8000396 <__divsi3+0x14a>
 8000394:	0989      	lsrs	r1, r1, #6
 8000396:	09c3      	lsrs	r3, r0, #7
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x154>
 800039c:	01cb      	lsls	r3, r1, #7
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0983      	lsrs	r3, r0, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x160>
 80003a8:	018b      	lsls	r3, r1, #6
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0943      	lsrs	r3, r0, #5
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x16c>
 80003b4:	014b      	lsls	r3, r1, #5
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0903      	lsrs	r3, r0, #4
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x178>
 80003c0:	010b      	lsls	r3, r1, #4
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	08c3      	lsrs	r3, r0, #3
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x184>
 80003cc:	00cb      	lsls	r3, r1, #3
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0883      	lsrs	r3, r0, #2
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x190>
 80003d8:	008b      	lsls	r3, r1, #2
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	d2d9      	bcs.n	8000394 <__divsi3+0x148>
 80003e0:	0843      	lsrs	r3, r0, #1
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d301      	bcc.n	80003ea <__divsi3+0x19e>
 80003e6:	004b      	lsls	r3, r1, #1
 80003e8:	1ac0      	subs	r0, r0, r3
 80003ea:	4152      	adcs	r2, r2
 80003ec:	1a41      	subs	r1, r0, r1
 80003ee:	d200      	bcs.n	80003f2 <__divsi3+0x1a6>
 80003f0:	4601      	mov	r1, r0
 80003f2:	4663      	mov	r3, ip
 80003f4:	4152      	adcs	r2, r2
 80003f6:	105b      	asrs	r3, r3, #1
 80003f8:	4610      	mov	r0, r2
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x1b4>
 80003fc:	4240      	negs	r0, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d500      	bpl.n	8000404 <__divsi3+0x1b8>
 8000402:	4249      	negs	r1, r1
 8000404:	4770      	bx	lr
 8000406:	4663      	mov	r3, ip
 8000408:	105b      	asrs	r3, r3, #1
 800040a:	d300      	bcc.n	800040e <__divsi3+0x1c2>
 800040c:	4240      	negs	r0, r0
 800040e:	b501      	push	{r0, lr}
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f805 	bl	8000420 <__aeabi_idiv0>
 8000416:	bd02      	pop	{r1, pc}

08000418 <__aeabi_idivmod>:
 8000418:	2900      	cmp	r1, #0
 800041a:	d0f8      	beq.n	800040e <__divsi3+0x1c2>
 800041c:	e716      	b.n	800024c <__divsi3>
 800041e:	4770      	bx	lr

08000420 <__aeabi_idiv0>:
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			; (mov r8, r8)

08000424 <__aeabi_cdrcmple>:
 8000424:	4684      	mov	ip, r0
 8000426:	0010      	movs	r0, r2
 8000428:	4662      	mov	r2, ip
 800042a:	468c      	mov	ip, r1
 800042c:	0019      	movs	r1, r3
 800042e:	4663      	mov	r3, ip
 8000430:	e000      	b.n	8000434 <__aeabi_cdcmpeq>
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_cdcmpeq>:
 8000434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000436:	f000 ff29 	bl	800128c <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	d401      	bmi.n	8000442 <__aeabi_cdcmpeq+0xe>
 800043e:	2100      	movs	r1, #0
 8000440:	42c8      	cmn	r0, r1
 8000442:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000444 <__aeabi_dcmpeq>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 fe79 	bl	800113c <__eqdf2>
 800044a:	4240      	negs	r0, r0
 800044c:	3001      	adds	r0, #1
 800044e:	bd10      	pop	{r4, pc}

08000450 <__aeabi_dcmplt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 ff1b 	bl	800128c <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	db01      	blt.n	800045e <__aeabi_dcmplt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_dcmple>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f000 ff11 	bl	800128c <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dd01      	ble.n	8000472 <__aeabi_dcmple+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_dcmpgt>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f000 fea1 	bl	80011c0 <__gedf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dc01      	bgt.n	8000486 <__aeabi_dcmpgt+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__aeabi_dcmpge>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f000 fe97 	bl	80011c0 <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	da01      	bge.n	800049a <__aeabi_dcmpge+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__aeabi_dadd>:
 80004a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a2:	464f      	mov	r7, r9
 80004a4:	4646      	mov	r6, r8
 80004a6:	46d6      	mov	lr, sl
 80004a8:	0004      	movs	r4, r0
 80004aa:	b5c0      	push	{r6, r7, lr}
 80004ac:	001f      	movs	r7, r3
 80004ae:	030b      	lsls	r3, r1, #12
 80004b0:	0010      	movs	r0, r2
 80004b2:	004e      	lsls	r6, r1, #1
 80004b4:	0a5b      	lsrs	r3, r3, #9
 80004b6:	0fcd      	lsrs	r5, r1, #31
 80004b8:	0f61      	lsrs	r1, r4, #29
 80004ba:	007a      	lsls	r2, r7, #1
 80004bc:	4319      	orrs	r1, r3
 80004be:	00e3      	lsls	r3, r4, #3
 80004c0:	033c      	lsls	r4, r7, #12
 80004c2:	0fff      	lsrs	r7, r7, #31
 80004c4:	46bc      	mov	ip, r7
 80004c6:	0a64      	lsrs	r4, r4, #9
 80004c8:	0f47      	lsrs	r7, r0, #29
 80004ca:	4327      	orrs	r7, r4
 80004cc:	0d76      	lsrs	r6, r6, #21
 80004ce:	0d52      	lsrs	r2, r2, #21
 80004d0:	00c0      	lsls	r0, r0, #3
 80004d2:	46b9      	mov	r9, r7
 80004d4:	4680      	mov	r8, r0
 80004d6:	1ab7      	subs	r7, r6, r2
 80004d8:	4565      	cmp	r5, ip
 80004da:	d100      	bne.n	80004de <__aeabi_dadd+0x3e>
 80004dc:	e09b      	b.n	8000616 <__aeabi_dadd+0x176>
 80004de:	2f00      	cmp	r7, #0
 80004e0:	dc00      	bgt.n	80004e4 <__aeabi_dadd+0x44>
 80004e2:	e084      	b.n	80005ee <__aeabi_dadd+0x14e>
 80004e4:	2a00      	cmp	r2, #0
 80004e6:	d100      	bne.n	80004ea <__aeabi_dadd+0x4a>
 80004e8:	e0be      	b.n	8000668 <__aeabi_dadd+0x1c8>
 80004ea:	4ac8      	ldr	r2, [pc, #800]	; (800080c <__aeabi_dadd+0x36c>)
 80004ec:	4296      	cmp	r6, r2
 80004ee:	d100      	bne.n	80004f2 <__aeabi_dadd+0x52>
 80004f0:	e124      	b.n	800073c <__aeabi_dadd+0x29c>
 80004f2:	2280      	movs	r2, #128	; 0x80
 80004f4:	464c      	mov	r4, r9
 80004f6:	0412      	lsls	r2, r2, #16
 80004f8:	4314      	orrs	r4, r2
 80004fa:	46a1      	mov	r9, r4
 80004fc:	2f38      	cmp	r7, #56	; 0x38
 80004fe:	dd00      	ble.n	8000502 <__aeabi_dadd+0x62>
 8000500:	e167      	b.n	80007d2 <__aeabi_dadd+0x332>
 8000502:	2f1f      	cmp	r7, #31
 8000504:	dd00      	ble.n	8000508 <__aeabi_dadd+0x68>
 8000506:	e1d6      	b.n	80008b6 <__aeabi_dadd+0x416>
 8000508:	2220      	movs	r2, #32
 800050a:	464c      	mov	r4, r9
 800050c:	1bd2      	subs	r2, r2, r7
 800050e:	4094      	lsls	r4, r2
 8000510:	46a2      	mov	sl, r4
 8000512:	4644      	mov	r4, r8
 8000514:	40fc      	lsrs	r4, r7
 8000516:	0020      	movs	r0, r4
 8000518:	4654      	mov	r4, sl
 800051a:	4304      	orrs	r4, r0
 800051c:	4640      	mov	r0, r8
 800051e:	4090      	lsls	r0, r2
 8000520:	1e42      	subs	r2, r0, #1
 8000522:	4190      	sbcs	r0, r2
 8000524:	464a      	mov	r2, r9
 8000526:	40fa      	lsrs	r2, r7
 8000528:	4304      	orrs	r4, r0
 800052a:	1a89      	subs	r1, r1, r2
 800052c:	1b1c      	subs	r4, r3, r4
 800052e:	42a3      	cmp	r3, r4
 8000530:	4192      	sbcs	r2, r2
 8000532:	4252      	negs	r2, r2
 8000534:	1a8b      	subs	r3, r1, r2
 8000536:	469a      	mov	sl, r3
 8000538:	4653      	mov	r3, sl
 800053a:	021b      	lsls	r3, r3, #8
 800053c:	d400      	bmi.n	8000540 <__aeabi_dadd+0xa0>
 800053e:	e0d4      	b.n	80006ea <__aeabi_dadd+0x24a>
 8000540:	4653      	mov	r3, sl
 8000542:	025a      	lsls	r2, r3, #9
 8000544:	0a53      	lsrs	r3, r2, #9
 8000546:	469a      	mov	sl, r3
 8000548:	4653      	mov	r3, sl
 800054a:	2b00      	cmp	r3, #0
 800054c:	d100      	bne.n	8000550 <__aeabi_dadd+0xb0>
 800054e:	e104      	b.n	800075a <__aeabi_dadd+0x2ba>
 8000550:	4650      	mov	r0, sl
 8000552:	f001 fded 	bl	8002130 <__clzsi2>
 8000556:	0003      	movs	r3, r0
 8000558:	3b08      	subs	r3, #8
 800055a:	2220      	movs	r2, #32
 800055c:	0020      	movs	r0, r4
 800055e:	1ad2      	subs	r2, r2, r3
 8000560:	4651      	mov	r1, sl
 8000562:	40d0      	lsrs	r0, r2
 8000564:	4099      	lsls	r1, r3
 8000566:	0002      	movs	r2, r0
 8000568:	409c      	lsls	r4, r3
 800056a:	430a      	orrs	r2, r1
 800056c:	42b3      	cmp	r3, r6
 800056e:	da00      	bge.n	8000572 <__aeabi_dadd+0xd2>
 8000570:	e102      	b.n	8000778 <__aeabi_dadd+0x2d8>
 8000572:	1b9b      	subs	r3, r3, r6
 8000574:	1c59      	adds	r1, r3, #1
 8000576:	291f      	cmp	r1, #31
 8000578:	dd00      	ble.n	800057c <__aeabi_dadd+0xdc>
 800057a:	e0a7      	b.n	80006cc <__aeabi_dadd+0x22c>
 800057c:	2320      	movs	r3, #32
 800057e:	0010      	movs	r0, r2
 8000580:	0026      	movs	r6, r4
 8000582:	1a5b      	subs	r3, r3, r1
 8000584:	409c      	lsls	r4, r3
 8000586:	4098      	lsls	r0, r3
 8000588:	40ce      	lsrs	r6, r1
 800058a:	40ca      	lsrs	r2, r1
 800058c:	1e63      	subs	r3, r4, #1
 800058e:	419c      	sbcs	r4, r3
 8000590:	4330      	orrs	r0, r6
 8000592:	4692      	mov	sl, r2
 8000594:	2600      	movs	r6, #0
 8000596:	4304      	orrs	r4, r0
 8000598:	0763      	lsls	r3, r4, #29
 800059a:	d009      	beq.n	80005b0 <__aeabi_dadd+0x110>
 800059c:	230f      	movs	r3, #15
 800059e:	4023      	ands	r3, r4
 80005a0:	2b04      	cmp	r3, #4
 80005a2:	d005      	beq.n	80005b0 <__aeabi_dadd+0x110>
 80005a4:	1d23      	adds	r3, r4, #4
 80005a6:	42a3      	cmp	r3, r4
 80005a8:	41a4      	sbcs	r4, r4
 80005aa:	4264      	negs	r4, r4
 80005ac:	44a2      	add	sl, r4
 80005ae:	001c      	movs	r4, r3
 80005b0:	4653      	mov	r3, sl
 80005b2:	021b      	lsls	r3, r3, #8
 80005b4:	d400      	bmi.n	80005b8 <__aeabi_dadd+0x118>
 80005b6:	e09b      	b.n	80006f0 <__aeabi_dadd+0x250>
 80005b8:	4b94      	ldr	r3, [pc, #592]	; (800080c <__aeabi_dadd+0x36c>)
 80005ba:	3601      	adds	r6, #1
 80005bc:	429e      	cmp	r6, r3
 80005be:	d100      	bne.n	80005c2 <__aeabi_dadd+0x122>
 80005c0:	e0b8      	b.n	8000734 <__aeabi_dadd+0x294>
 80005c2:	4653      	mov	r3, sl
 80005c4:	4992      	ldr	r1, [pc, #584]	; (8000810 <__aeabi_dadd+0x370>)
 80005c6:	08e4      	lsrs	r4, r4, #3
 80005c8:	400b      	ands	r3, r1
 80005ca:	0019      	movs	r1, r3
 80005cc:	075b      	lsls	r3, r3, #29
 80005ce:	4323      	orrs	r3, r4
 80005d0:	0572      	lsls	r2, r6, #21
 80005d2:	024c      	lsls	r4, r1, #9
 80005d4:	0b24      	lsrs	r4, r4, #12
 80005d6:	0d52      	lsrs	r2, r2, #21
 80005d8:	0512      	lsls	r2, r2, #20
 80005da:	07ed      	lsls	r5, r5, #31
 80005dc:	4322      	orrs	r2, r4
 80005de:	432a      	orrs	r2, r5
 80005e0:	0018      	movs	r0, r3
 80005e2:	0011      	movs	r1, r2
 80005e4:	bce0      	pop	{r5, r6, r7}
 80005e6:	46ba      	mov	sl, r7
 80005e8:	46b1      	mov	r9, r6
 80005ea:	46a8      	mov	r8, r5
 80005ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005ee:	2f00      	cmp	r7, #0
 80005f0:	d048      	beq.n	8000684 <__aeabi_dadd+0x1e4>
 80005f2:	1b97      	subs	r7, r2, r6
 80005f4:	2e00      	cmp	r6, #0
 80005f6:	d000      	beq.n	80005fa <__aeabi_dadd+0x15a>
 80005f8:	e10e      	b.n	8000818 <__aeabi_dadd+0x378>
 80005fa:	000c      	movs	r4, r1
 80005fc:	431c      	orrs	r4, r3
 80005fe:	d100      	bne.n	8000602 <__aeabi_dadd+0x162>
 8000600:	e1b7      	b.n	8000972 <__aeabi_dadd+0x4d2>
 8000602:	1e7c      	subs	r4, r7, #1
 8000604:	2f01      	cmp	r7, #1
 8000606:	d100      	bne.n	800060a <__aeabi_dadd+0x16a>
 8000608:	e226      	b.n	8000a58 <__aeabi_dadd+0x5b8>
 800060a:	4d80      	ldr	r5, [pc, #512]	; (800080c <__aeabi_dadd+0x36c>)
 800060c:	42af      	cmp	r7, r5
 800060e:	d100      	bne.n	8000612 <__aeabi_dadd+0x172>
 8000610:	e1d5      	b.n	80009be <__aeabi_dadd+0x51e>
 8000612:	0027      	movs	r7, r4
 8000614:	e107      	b.n	8000826 <__aeabi_dadd+0x386>
 8000616:	2f00      	cmp	r7, #0
 8000618:	dc00      	bgt.n	800061c <__aeabi_dadd+0x17c>
 800061a:	e0b2      	b.n	8000782 <__aeabi_dadd+0x2e2>
 800061c:	2a00      	cmp	r2, #0
 800061e:	d047      	beq.n	80006b0 <__aeabi_dadd+0x210>
 8000620:	4a7a      	ldr	r2, [pc, #488]	; (800080c <__aeabi_dadd+0x36c>)
 8000622:	4296      	cmp	r6, r2
 8000624:	d100      	bne.n	8000628 <__aeabi_dadd+0x188>
 8000626:	e089      	b.n	800073c <__aeabi_dadd+0x29c>
 8000628:	2280      	movs	r2, #128	; 0x80
 800062a:	464c      	mov	r4, r9
 800062c:	0412      	lsls	r2, r2, #16
 800062e:	4314      	orrs	r4, r2
 8000630:	46a1      	mov	r9, r4
 8000632:	2f38      	cmp	r7, #56	; 0x38
 8000634:	dc6b      	bgt.n	800070e <__aeabi_dadd+0x26e>
 8000636:	2f1f      	cmp	r7, #31
 8000638:	dc00      	bgt.n	800063c <__aeabi_dadd+0x19c>
 800063a:	e16e      	b.n	800091a <__aeabi_dadd+0x47a>
 800063c:	003a      	movs	r2, r7
 800063e:	4648      	mov	r0, r9
 8000640:	3a20      	subs	r2, #32
 8000642:	40d0      	lsrs	r0, r2
 8000644:	4684      	mov	ip, r0
 8000646:	2f20      	cmp	r7, #32
 8000648:	d007      	beq.n	800065a <__aeabi_dadd+0x1ba>
 800064a:	2240      	movs	r2, #64	; 0x40
 800064c:	4648      	mov	r0, r9
 800064e:	1bd2      	subs	r2, r2, r7
 8000650:	4090      	lsls	r0, r2
 8000652:	0002      	movs	r2, r0
 8000654:	4640      	mov	r0, r8
 8000656:	4310      	orrs	r0, r2
 8000658:	4680      	mov	r8, r0
 800065a:	4640      	mov	r0, r8
 800065c:	1e42      	subs	r2, r0, #1
 800065e:	4190      	sbcs	r0, r2
 8000660:	4662      	mov	r2, ip
 8000662:	0004      	movs	r4, r0
 8000664:	4314      	orrs	r4, r2
 8000666:	e057      	b.n	8000718 <__aeabi_dadd+0x278>
 8000668:	464a      	mov	r2, r9
 800066a:	4302      	orrs	r2, r0
 800066c:	d100      	bne.n	8000670 <__aeabi_dadd+0x1d0>
 800066e:	e103      	b.n	8000878 <__aeabi_dadd+0x3d8>
 8000670:	1e7a      	subs	r2, r7, #1
 8000672:	2f01      	cmp	r7, #1
 8000674:	d100      	bne.n	8000678 <__aeabi_dadd+0x1d8>
 8000676:	e193      	b.n	80009a0 <__aeabi_dadd+0x500>
 8000678:	4c64      	ldr	r4, [pc, #400]	; (800080c <__aeabi_dadd+0x36c>)
 800067a:	42a7      	cmp	r7, r4
 800067c:	d100      	bne.n	8000680 <__aeabi_dadd+0x1e0>
 800067e:	e18a      	b.n	8000996 <__aeabi_dadd+0x4f6>
 8000680:	0017      	movs	r7, r2
 8000682:	e73b      	b.n	80004fc <__aeabi_dadd+0x5c>
 8000684:	4c63      	ldr	r4, [pc, #396]	; (8000814 <__aeabi_dadd+0x374>)
 8000686:	1c72      	adds	r2, r6, #1
 8000688:	4222      	tst	r2, r4
 800068a:	d000      	beq.n	800068e <__aeabi_dadd+0x1ee>
 800068c:	e0e0      	b.n	8000850 <__aeabi_dadd+0x3b0>
 800068e:	000a      	movs	r2, r1
 8000690:	431a      	orrs	r2, r3
 8000692:	2e00      	cmp	r6, #0
 8000694:	d000      	beq.n	8000698 <__aeabi_dadd+0x1f8>
 8000696:	e174      	b.n	8000982 <__aeabi_dadd+0x4e2>
 8000698:	2a00      	cmp	r2, #0
 800069a:	d100      	bne.n	800069e <__aeabi_dadd+0x1fe>
 800069c:	e1d0      	b.n	8000a40 <__aeabi_dadd+0x5a0>
 800069e:	464a      	mov	r2, r9
 80006a0:	4302      	orrs	r2, r0
 80006a2:	d000      	beq.n	80006a6 <__aeabi_dadd+0x206>
 80006a4:	e1e3      	b.n	8000a6e <__aeabi_dadd+0x5ce>
 80006a6:	074a      	lsls	r2, r1, #29
 80006a8:	08db      	lsrs	r3, r3, #3
 80006aa:	4313      	orrs	r3, r2
 80006ac:	08c9      	lsrs	r1, r1, #3
 80006ae:	e029      	b.n	8000704 <__aeabi_dadd+0x264>
 80006b0:	464a      	mov	r2, r9
 80006b2:	4302      	orrs	r2, r0
 80006b4:	d100      	bne.n	80006b8 <__aeabi_dadd+0x218>
 80006b6:	e17d      	b.n	80009b4 <__aeabi_dadd+0x514>
 80006b8:	1e7a      	subs	r2, r7, #1
 80006ba:	2f01      	cmp	r7, #1
 80006bc:	d100      	bne.n	80006c0 <__aeabi_dadd+0x220>
 80006be:	e0e0      	b.n	8000882 <__aeabi_dadd+0x3e2>
 80006c0:	4c52      	ldr	r4, [pc, #328]	; (800080c <__aeabi_dadd+0x36c>)
 80006c2:	42a7      	cmp	r7, r4
 80006c4:	d100      	bne.n	80006c8 <__aeabi_dadd+0x228>
 80006c6:	e166      	b.n	8000996 <__aeabi_dadd+0x4f6>
 80006c8:	0017      	movs	r7, r2
 80006ca:	e7b2      	b.n	8000632 <__aeabi_dadd+0x192>
 80006cc:	0010      	movs	r0, r2
 80006ce:	3b1f      	subs	r3, #31
 80006d0:	40d8      	lsrs	r0, r3
 80006d2:	2920      	cmp	r1, #32
 80006d4:	d003      	beq.n	80006de <__aeabi_dadd+0x23e>
 80006d6:	2340      	movs	r3, #64	; 0x40
 80006d8:	1a5b      	subs	r3, r3, r1
 80006da:	409a      	lsls	r2, r3
 80006dc:	4314      	orrs	r4, r2
 80006de:	1e63      	subs	r3, r4, #1
 80006e0:	419c      	sbcs	r4, r3
 80006e2:	2300      	movs	r3, #0
 80006e4:	2600      	movs	r6, #0
 80006e6:	469a      	mov	sl, r3
 80006e8:	4304      	orrs	r4, r0
 80006ea:	0763      	lsls	r3, r4, #29
 80006ec:	d000      	beq.n	80006f0 <__aeabi_dadd+0x250>
 80006ee:	e755      	b.n	800059c <__aeabi_dadd+0xfc>
 80006f0:	4652      	mov	r2, sl
 80006f2:	08e3      	lsrs	r3, r4, #3
 80006f4:	0752      	lsls	r2, r2, #29
 80006f6:	4313      	orrs	r3, r2
 80006f8:	4652      	mov	r2, sl
 80006fa:	0037      	movs	r7, r6
 80006fc:	08d1      	lsrs	r1, r2, #3
 80006fe:	4a43      	ldr	r2, [pc, #268]	; (800080c <__aeabi_dadd+0x36c>)
 8000700:	4297      	cmp	r7, r2
 8000702:	d01f      	beq.n	8000744 <__aeabi_dadd+0x2a4>
 8000704:	0309      	lsls	r1, r1, #12
 8000706:	057a      	lsls	r2, r7, #21
 8000708:	0b0c      	lsrs	r4, r1, #12
 800070a:	0d52      	lsrs	r2, r2, #21
 800070c:	e764      	b.n	80005d8 <__aeabi_dadd+0x138>
 800070e:	4642      	mov	r2, r8
 8000710:	464c      	mov	r4, r9
 8000712:	4314      	orrs	r4, r2
 8000714:	1e62      	subs	r2, r4, #1
 8000716:	4194      	sbcs	r4, r2
 8000718:	18e4      	adds	r4, r4, r3
 800071a:	429c      	cmp	r4, r3
 800071c:	4192      	sbcs	r2, r2
 800071e:	4252      	negs	r2, r2
 8000720:	4692      	mov	sl, r2
 8000722:	448a      	add	sl, r1
 8000724:	4653      	mov	r3, sl
 8000726:	021b      	lsls	r3, r3, #8
 8000728:	d5df      	bpl.n	80006ea <__aeabi_dadd+0x24a>
 800072a:	4b38      	ldr	r3, [pc, #224]	; (800080c <__aeabi_dadd+0x36c>)
 800072c:	3601      	adds	r6, #1
 800072e:	429e      	cmp	r6, r3
 8000730:	d000      	beq.n	8000734 <__aeabi_dadd+0x294>
 8000732:	e0b3      	b.n	800089c <__aeabi_dadd+0x3fc>
 8000734:	0032      	movs	r2, r6
 8000736:	2400      	movs	r4, #0
 8000738:	2300      	movs	r3, #0
 800073a:	e74d      	b.n	80005d8 <__aeabi_dadd+0x138>
 800073c:	074a      	lsls	r2, r1, #29
 800073e:	08db      	lsrs	r3, r3, #3
 8000740:	4313      	orrs	r3, r2
 8000742:	08c9      	lsrs	r1, r1, #3
 8000744:	001a      	movs	r2, r3
 8000746:	430a      	orrs	r2, r1
 8000748:	d100      	bne.n	800074c <__aeabi_dadd+0x2ac>
 800074a:	e200      	b.n	8000b4e <__aeabi_dadd+0x6ae>
 800074c:	2480      	movs	r4, #128	; 0x80
 800074e:	0324      	lsls	r4, r4, #12
 8000750:	430c      	orrs	r4, r1
 8000752:	0324      	lsls	r4, r4, #12
 8000754:	4a2d      	ldr	r2, [pc, #180]	; (800080c <__aeabi_dadd+0x36c>)
 8000756:	0b24      	lsrs	r4, r4, #12
 8000758:	e73e      	b.n	80005d8 <__aeabi_dadd+0x138>
 800075a:	0020      	movs	r0, r4
 800075c:	f001 fce8 	bl	8002130 <__clzsi2>
 8000760:	0003      	movs	r3, r0
 8000762:	3318      	adds	r3, #24
 8000764:	2b1f      	cmp	r3, #31
 8000766:	dc00      	bgt.n	800076a <__aeabi_dadd+0x2ca>
 8000768:	e6f7      	b.n	800055a <__aeabi_dadd+0xba>
 800076a:	0022      	movs	r2, r4
 800076c:	3808      	subs	r0, #8
 800076e:	4082      	lsls	r2, r0
 8000770:	2400      	movs	r4, #0
 8000772:	42b3      	cmp	r3, r6
 8000774:	db00      	blt.n	8000778 <__aeabi_dadd+0x2d8>
 8000776:	e6fc      	b.n	8000572 <__aeabi_dadd+0xd2>
 8000778:	1af6      	subs	r6, r6, r3
 800077a:	4b25      	ldr	r3, [pc, #148]	; (8000810 <__aeabi_dadd+0x370>)
 800077c:	401a      	ands	r2, r3
 800077e:	4692      	mov	sl, r2
 8000780:	e70a      	b.n	8000598 <__aeabi_dadd+0xf8>
 8000782:	2f00      	cmp	r7, #0
 8000784:	d02b      	beq.n	80007de <__aeabi_dadd+0x33e>
 8000786:	1b97      	subs	r7, r2, r6
 8000788:	2e00      	cmp	r6, #0
 800078a:	d100      	bne.n	800078e <__aeabi_dadd+0x2ee>
 800078c:	e0b8      	b.n	8000900 <__aeabi_dadd+0x460>
 800078e:	4c1f      	ldr	r4, [pc, #124]	; (800080c <__aeabi_dadd+0x36c>)
 8000790:	42a2      	cmp	r2, r4
 8000792:	d100      	bne.n	8000796 <__aeabi_dadd+0x2f6>
 8000794:	e11c      	b.n	80009d0 <__aeabi_dadd+0x530>
 8000796:	2480      	movs	r4, #128	; 0x80
 8000798:	0424      	lsls	r4, r4, #16
 800079a:	4321      	orrs	r1, r4
 800079c:	2f38      	cmp	r7, #56	; 0x38
 800079e:	dd00      	ble.n	80007a2 <__aeabi_dadd+0x302>
 80007a0:	e11e      	b.n	80009e0 <__aeabi_dadd+0x540>
 80007a2:	2f1f      	cmp	r7, #31
 80007a4:	dd00      	ble.n	80007a8 <__aeabi_dadd+0x308>
 80007a6:	e19e      	b.n	8000ae6 <__aeabi_dadd+0x646>
 80007a8:	2620      	movs	r6, #32
 80007aa:	000c      	movs	r4, r1
 80007ac:	1bf6      	subs	r6, r6, r7
 80007ae:	0018      	movs	r0, r3
 80007b0:	40b3      	lsls	r3, r6
 80007b2:	40b4      	lsls	r4, r6
 80007b4:	40f8      	lsrs	r0, r7
 80007b6:	1e5e      	subs	r6, r3, #1
 80007b8:	41b3      	sbcs	r3, r6
 80007ba:	40f9      	lsrs	r1, r7
 80007bc:	4304      	orrs	r4, r0
 80007be:	431c      	orrs	r4, r3
 80007c0:	4489      	add	r9, r1
 80007c2:	4444      	add	r4, r8
 80007c4:	4544      	cmp	r4, r8
 80007c6:	419b      	sbcs	r3, r3
 80007c8:	425b      	negs	r3, r3
 80007ca:	444b      	add	r3, r9
 80007cc:	469a      	mov	sl, r3
 80007ce:	0016      	movs	r6, r2
 80007d0:	e7a8      	b.n	8000724 <__aeabi_dadd+0x284>
 80007d2:	4642      	mov	r2, r8
 80007d4:	464c      	mov	r4, r9
 80007d6:	4314      	orrs	r4, r2
 80007d8:	1e62      	subs	r2, r4, #1
 80007da:	4194      	sbcs	r4, r2
 80007dc:	e6a6      	b.n	800052c <__aeabi_dadd+0x8c>
 80007de:	4c0d      	ldr	r4, [pc, #52]	; (8000814 <__aeabi_dadd+0x374>)
 80007e0:	1c72      	adds	r2, r6, #1
 80007e2:	4222      	tst	r2, r4
 80007e4:	d000      	beq.n	80007e8 <__aeabi_dadd+0x348>
 80007e6:	e0a8      	b.n	800093a <__aeabi_dadd+0x49a>
 80007e8:	000a      	movs	r2, r1
 80007ea:	431a      	orrs	r2, r3
 80007ec:	2e00      	cmp	r6, #0
 80007ee:	d000      	beq.n	80007f2 <__aeabi_dadd+0x352>
 80007f0:	e10a      	b.n	8000a08 <__aeabi_dadd+0x568>
 80007f2:	2a00      	cmp	r2, #0
 80007f4:	d100      	bne.n	80007f8 <__aeabi_dadd+0x358>
 80007f6:	e15e      	b.n	8000ab6 <__aeabi_dadd+0x616>
 80007f8:	464a      	mov	r2, r9
 80007fa:	4302      	orrs	r2, r0
 80007fc:	d000      	beq.n	8000800 <__aeabi_dadd+0x360>
 80007fe:	e161      	b.n	8000ac4 <__aeabi_dadd+0x624>
 8000800:	074a      	lsls	r2, r1, #29
 8000802:	08db      	lsrs	r3, r3, #3
 8000804:	4313      	orrs	r3, r2
 8000806:	08c9      	lsrs	r1, r1, #3
 8000808:	e77c      	b.n	8000704 <__aeabi_dadd+0x264>
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	000007ff 	.word	0x000007ff
 8000810:	ff7fffff 	.word	0xff7fffff
 8000814:	000007fe 	.word	0x000007fe
 8000818:	4ccf      	ldr	r4, [pc, #828]	; (8000b58 <__aeabi_dadd+0x6b8>)
 800081a:	42a2      	cmp	r2, r4
 800081c:	d100      	bne.n	8000820 <__aeabi_dadd+0x380>
 800081e:	e0ce      	b.n	80009be <__aeabi_dadd+0x51e>
 8000820:	2480      	movs	r4, #128	; 0x80
 8000822:	0424      	lsls	r4, r4, #16
 8000824:	4321      	orrs	r1, r4
 8000826:	2f38      	cmp	r7, #56	; 0x38
 8000828:	dc5b      	bgt.n	80008e2 <__aeabi_dadd+0x442>
 800082a:	2f1f      	cmp	r7, #31
 800082c:	dd00      	ble.n	8000830 <__aeabi_dadd+0x390>
 800082e:	e0dc      	b.n	80009ea <__aeabi_dadd+0x54a>
 8000830:	2520      	movs	r5, #32
 8000832:	000c      	movs	r4, r1
 8000834:	1bed      	subs	r5, r5, r7
 8000836:	001e      	movs	r6, r3
 8000838:	40ab      	lsls	r3, r5
 800083a:	40ac      	lsls	r4, r5
 800083c:	40fe      	lsrs	r6, r7
 800083e:	1e5d      	subs	r5, r3, #1
 8000840:	41ab      	sbcs	r3, r5
 8000842:	4334      	orrs	r4, r6
 8000844:	40f9      	lsrs	r1, r7
 8000846:	431c      	orrs	r4, r3
 8000848:	464b      	mov	r3, r9
 800084a:	1a5b      	subs	r3, r3, r1
 800084c:	4699      	mov	r9, r3
 800084e:	e04c      	b.n	80008ea <__aeabi_dadd+0x44a>
 8000850:	464a      	mov	r2, r9
 8000852:	1a1c      	subs	r4, r3, r0
 8000854:	1a88      	subs	r0, r1, r2
 8000856:	42a3      	cmp	r3, r4
 8000858:	4192      	sbcs	r2, r2
 800085a:	4252      	negs	r2, r2
 800085c:	4692      	mov	sl, r2
 800085e:	0002      	movs	r2, r0
 8000860:	4650      	mov	r0, sl
 8000862:	1a12      	subs	r2, r2, r0
 8000864:	4692      	mov	sl, r2
 8000866:	0212      	lsls	r2, r2, #8
 8000868:	d478      	bmi.n	800095c <__aeabi_dadd+0x4bc>
 800086a:	4653      	mov	r3, sl
 800086c:	4323      	orrs	r3, r4
 800086e:	d000      	beq.n	8000872 <__aeabi_dadd+0x3d2>
 8000870:	e66a      	b.n	8000548 <__aeabi_dadd+0xa8>
 8000872:	2100      	movs	r1, #0
 8000874:	2500      	movs	r5, #0
 8000876:	e745      	b.n	8000704 <__aeabi_dadd+0x264>
 8000878:	074a      	lsls	r2, r1, #29
 800087a:	08db      	lsrs	r3, r3, #3
 800087c:	4313      	orrs	r3, r2
 800087e:	08c9      	lsrs	r1, r1, #3
 8000880:	e73d      	b.n	80006fe <__aeabi_dadd+0x25e>
 8000882:	181c      	adds	r4, r3, r0
 8000884:	429c      	cmp	r4, r3
 8000886:	419b      	sbcs	r3, r3
 8000888:	4449      	add	r1, r9
 800088a:	468a      	mov	sl, r1
 800088c:	425b      	negs	r3, r3
 800088e:	449a      	add	sl, r3
 8000890:	4653      	mov	r3, sl
 8000892:	2601      	movs	r6, #1
 8000894:	021b      	lsls	r3, r3, #8
 8000896:	d400      	bmi.n	800089a <__aeabi_dadd+0x3fa>
 8000898:	e727      	b.n	80006ea <__aeabi_dadd+0x24a>
 800089a:	2602      	movs	r6, #2
 800089c:	4652      	mov	r2, sl
 800089e:	4baf      	ldr	r3, [pc, #700]	; (8000b5c <__aeabi_dadd+0x6bc>)
 80008a0:	2101      	movs	r1, #1
 80008a2:	401a      	ands	r2, r3
 80008a4:	0013      	movs	r3, r2
 80008a6:	4021      	ands	r1, r4
 80008a8:	0862      	lsrs	r2, r4, #1
 80008aa:	430a      	orrs	r2, r1
 80008ac:	07dc      	lsls	r4, r3, #31
 80008ae:	085b      	lsrs	r3, r3, #1
 80008b0:	469a      	mov	sl, r3
 80008b2:	4314      	orrs	r4, r2
 80008b4:	e670      	b.n	8000598 <__aeabi_dadd+0xf8>
 80008b6:	003a      	movs	r2, r7
 80008b8:	464c      	mov	r4, r9
 80008ba:	3a20      	subs	r2, #32
 80008bc:	40d4      	lsrs	r4, r2
 80008be:	46a4      	mov	ip, r4
 80008c0:	2f20      	cmp	r7, #32
 80008c2:	d007      	beq.n	80008d4 <__aeabi_dadd+0x434>
 80008c4:	2240      	movs	r2, #64	; 0x40
 80008c6:	4648      	mov	r0, r9
 80008c8:	1bd2      	subs	r2, r2, r7
 80008ca:	4090      	lsls	r0, r2
 80008cc:	0002      	movs	r2, r0
 80008ce:	4640      	mov	r0, r8
 80008d0:	4310      	orrs	r0, r2
 80008d2:	4680      	mov	r8, r0
 80008d4:	4640      	mov	r0, r8
 80008d6:	1e42      	subs	r2, r0, #1
 80008d8:	4190      	sbcs	r0, r2
 80008da:	4662      	mov	r2, ip
 80008dc:	0004      	movs	r4, r0
 80008de:	4314      	orrs	r4, r2
 80008e0:	e624      	b.n	800052c <__aeabi_dadd+0x8c>
 80008e2:	4319      	orrs	r1, r3
 80008e4:	000c      	movs	r4, r1
 80008e6:	1e63      	subs	r3, r4, #1
 80008e8:	419c      	sbcs	r4, r3
 80008ea:	4643      	mov	r3, r8
 80008ec:	1b1c      	subs	r4, r3, r4
 80008ee:	45a0      	cmp	r8, r4
 80008f0:	419b      	sbcs	r3, r3
 80008f2:	4649      	mov	r1, r9
 80008f4:	425b      	negs	r3, r3
 80008f6:	1acb      	subs	r3, r1, r3
 80008f8:	469a      	mov	sl, r3
 80008fa:	4665      	mov	r5, ip
 80008fc:	0016      	movs	r6, r2
 80008fe:	e61b      	b.n	8000538 <__aeabi_dadd+0x98>
 8000900:	000c      	movs	r4, r1
 8000902:	431c      	orrs	r4, r3
 8000904:	d100      	bne.n	8000908 <__aeabi_dadd+0x468>
 8000906:	e0c7      	b.n	8000a98 <__aeabi_dadd+0x5f8>
 8000908:	1e7c      	subs	r4, r7, #1
 800090a:	2f01      	cmp	r7, #1
 800090c:	d100      	bne.n	8000910 <__aeabi_dadd+0x470>
 800090e:	e0f9      	b.n	8000b04 <__aeabi_dadd+0x664>
 8000910:	4e91      	ldr	r6, [pc, #580]	; (8000b58 <__aeabi_dadd+0x6b8>)
 8000912:	42b7      	cmp	r7, r6
 8000914:	d05c      	beq.n	80009d0 <__aeabi_dadd+0x530>
 8000916:	0027      	movs	r7, r4
 8000918:	e740      	b.n	800079c <__aeabi_dadd+0x2fc>
 800091a:	2220      	movs	r2, #32
 800091c:	464c      	mov	r4, r9
 800091e:	4640      	mov	r0, r8
 8000920:	1bd2      	subs	r2, r2, r7
 8000922:	4094      	lsls	r4, r2
 8000924:	40f8      	lsrs	r0, r7
 8000926:	4304      	orrs	r4, r0
 8000928:	4640      	mov	r0, r8
 800092a:	4090      	lsls	r0, r2
 800092c:	1e42      	subs	r2, r0, #1
 800092e:	4190      	sbcs	r0, r2
 8000930:	464a      	mov	r2, r9
 8000932:	40fa      	lsrs	r2, r7
 8000934:	4304      	orrs	r4, r0
 8000936:	1889      	adds	r1, r1, r2
 8000938:	e6ee      	b.n	8000718 <__aeabi_dadd+0x278>
 800093a:	4c87      	ldr	r4, [pc, #540]	; (8000b58 <__aeabi_dadd+0x6b8>)
 800093c:	42a2      	cmp	r2, r4
 800093e:	d100      	bne.n	8000942 <__aeabi_dadd+0x4a2>
 8000940:	e6f9      	b.n	8000736 <__aeabi_dadd+0x296>
 8000942:	1818      	adds	r0, r3, r0
 8000944:	4298      	cmp	r0, r3
 8000946:	419b      	sbcs	r3, r3
 8000948:	4449      	add	r1, r9
 800094a:	425b      	negs	r3, r3
 800094c:	18cb      	adds	r3, r1, r3
 800094e:	07dc      	lsls	r4, r3, #31
 8000950:	0840      	lsrs	r0, r0, #1
 8000952:	085b      	lsrs	r3, r3, #1
 8000954:	469a      	mov	sl, r3
 8000956:	0016      	movs	r6, r2
 8000958:	4304      	orrs	r4, r0
 800095a:	e6c6      	b.n	80006ea <__aeabi_dadd+0x24a>
 800095c:	4642      	mov	r2, r8
 800095e:	1ad4      	subs	r4, r2, r3
 8000960:	45a0      	cmp	r8, r4
 8000962:	4180      	sbcs	r0, r0
 8000964:	464b      	mov	r3, r9
 8000966:	4240      	negs	r0, r0
 8000968:	1a59      	subs	r1, r3, r1
 800096a:	1a0b      	subs	r3, r1, r0
 800096c:	469a      	mov	sl, r3
 800096e:	4665      	mov	r5, ip
 8000970:	e5ea      	b.n	8000548 <__aeabi_dadd+0xa8>
 8000972:	464b      	mov	r3, r9
 8000974:	464a      	mov	r2, r9
 8000976:	08c0      	lsrs	r0, r0, #3
 8000978:	075b      	lsls	r3, r3, #29
 800097a:	4665      	mov	r5, ip
 800097c:	4303      	orrs	r3, r0
 800097e:	08d1      	lsrs	r1, r2, #3
 8000980:	e6bd      	b.n	80006fe <__aeabi_dadd+0x25e>
 8000982:	2a00      	cmp	r2, #0
 8000984:	d000      	beq.n	8000988 <__aeabi_dadd+0x4e8>
 8000986:	e08e      	b.n	8000aa6 <__aeabi_dadd+0x606>
 8000988:	464b      	mov	r3, r9
 800098a:	4303      	orrs	r3, r0
 800098c:	d117      	bne.n	80009be <__aeabi_dadd+0x51e>
 800098e:	2180      	movs	r1, #128	; 0x80
 8000990:	2500      	movs	r5, #0
 8000992:	0309      	lsls	r1, r1, #12
 8000994:	e6da      	b.n	800074c <__aeabi_dadd+0x2ac>
 8000996:	074a      	lsls	r2, r1, #29
 8000998:	08db      	lsrs	r3, r3, #3
 800099a:	4313      	orrs	r3, r2
 800099c:	08c9      	lsrs	r1, r1, #3
 800099e:	e6d1      	b.n	8000744 <__aeabi_dadd+0x2a4>
 80009a0:	1a1c      	subs	r4, r3, r0
 80009a2:	464a      	mov	r2, r9
 80009a4:	42a3      	cmp	r3, r4
 80009a6:	419b      	sbcs	r3, r3
 80009a8:	1a89      	subs	r1, r1, r2
 80009aa:	425b      	negs	r3, r3
 80009ac:	1acb      	subs	r3, r1, r3
 80009ae:	469a      	mov	sl, r3
 80009b0:	2601      	movs	r6, #1
 80009b2:	e5c1      	b.n	8000538 <__aeabi_dadd+0x98>
 80009b4:	074a      	lsls	r2, r1, #29
 80009b6:	08db      	lsrs	r3, r3, #3
 80009b8:	4313      	orrs	r3, r2
 80009ba:	08c9      	lsrs	r1, r1, #3
 80009bc:	e69f      	b.n	80006fe <__aeabi_dadd+0x25e>
 80009be:	4643      	mov	r3, r8
 80009c0:	08d8      	lsrs	r0, r3, #3
 80009c2:	464b      	mov	r3, r9
 80009c4:	464a      	mov	r2, r9
 80009c6:	075b      	lsls	r3, r3, #29
 80009c8:	4665      	mov	r5, ip
 80009ca:	4303      	orrs	r3, r0
 80009cc:	08d1      	lsrs	r1, r2, #3
 80009ce:	e6b9      	b.n	8000744 <__aeabi_dadd+0x2a4>
 80009d0:	4643      	mov	r3, r8
 80009d2:	08d8      	lsrs	r0, r3, #3
 80009d4:	464b      	mov	r3, r9
 80009d6:	464a      	mov	r2, r9
 80009d8:	075b      	lsls	r3, r3, #29
 80009da:	4303      	orrs	r3, r0
 80009dc:	08d1      	lsrs	r1, r2, #3
 80009de:	e6b1      	b.n	8000744 <__aeabi_dadd+0x2a4>
 80009e0:	4319      	orrs	r1, r3
 80009e2:	000c      	movs	r4, r1
 80009e4:	1e63      	subs	r3, r4, #1
 80009e6:	419c      	sbcs	r4, r3
 80009e8:	e6eb      	b.n	80007c2 <__aeabi_dadd+0x322>
 80009ea:	003c      	movs	r4, r7
 80009ec:	000d      	movs	r5, r1
 80009ee:	3c20      	subs	r4, #32
 80009f0:	40e5      	lsrs	r5, r4
 80009f2:	2f20      	cmp	r7, #32
 80009f4:	d003      	beq.n	80009fe <__aeabi_dadd+0x55e>
 80009f6:	2440      	movs	r4, #64	; 0x40
 80009f8:	1be4      	subs	r4, r4, r7
 80009fa:	40a1      	lsls	r1, r4
 80009fc:	430b      	orrs	r3, r1
 80009fe:	001c      	movs	r4, r3
 8000a00:	1e63      	subs	r3, r4, #1
 8000a02:	419c      	sbcs	r4, r3
 8000a04:	432c      	orrs	r4, r5
 8000a06:	e770      	b.n	80008ea <__aeabi_dadd+0x44a>
 8000a08:	2a00      	cmp	r2, #0
 8000a0a:	d0e1      	beq.n	80009d0 <__aeabi_dadd+0x530>
 8000a0c:	464a      	mov	r2, r9
 8000a0e:	4302      	orrs	r2, r0
 8000a10:	d0c1      	beq.n	8000996 <__aeabi_dadd+0x4f6>
 8000a12:	074a      	lsls	r2, r1, #29
 8000a14:	08db      	lsrs	r3, r3, #3
 8000a16:	4313      	orrs	r3, r2
 8000a18:	2280      	movs	r2, #128	; 0x80
 8000a1a:	08c9      	lsrs	r1, r1, #3
 8000a1c:	0312      	lsls	r2, r2, #12
 8000a1e:	4211      	tst	r1, r2
 8000a20:	d008      	beq.n	8000a34 <__aeabi_dadd+0x594>
 8000a22:	4648      	mov	r0, r9
 8000a24:	08c4      	lsrs	r4, r0, #3
 8000a26:	4214      	tst	r4, r2
 8000a28:	d104      	bne.n	8000a34 <__aeabi_dadd+0x594>
 8000a2a:	4643      	mov	r3, r8
 8000a2c:	0021      	movs	r1, r4
 8000a2e:	08db      	lsrs	r3, r3, #3
 8000a30:	0742      	lsls	r2, r0, #29
 8000a32:	4313      	orrs	r3, r2
 8000a34:	0f5a      	lsrs	r2, r3, #29
 8000a36:	00db      	lsls	r3, r3, #3
 8000a38:	0752      	lsls	r2, r2, #29
 8000a3a:	08db      	lsrs	r3, r3, #3
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	e681      	b.n	8000744 <__aeabi_dadd+0x2a4>
 8000a40:	464b      	mov	r3, r9
 8000a42:	4303      	orrs	r3, r0
 8000a44:	d100      	bne.n	8000a48 <__aeabi_dadd+0x5a8>
 8000a46:	e714      	b.n	8000872 <__aeabi_dadd+0x3d2>
 8000a48:	464b      	mov	r3, r9
 8000a4a:	464a      	mov	r2, r9
 8000a4c:	08c0      	lsrs	r0, r0, #3
 8000a4e:	075b      	lsls	r3, r3, #29
 8000a50:	4665      	mov	r5, ip
 8000a52:	4303      	orrs	r3, r0
 8000a54:	08d1      	lsrs	r1, r2, #3
 8000a56:	e655      	b.n	8000704 <__aeabi_dadd+0x264>
 8000a58:	1ac4      	subs	r4, r0, r3
 8000a5a:	45a0      	cmp	r8, r4
 8000a5c:	4180      	sbcs	r0, r0
 8000a5e:	464b      	mov	r3, r9
 8000a60:	4240      	negs	r0, r0
 8000a62:	1a59      	subs	r1, r3, r1
 8000a64:	1a0b      	subs	r3, r1, r0
 8000a66:	469a      	mov	sl, r3
 8000a68:	4665      	mov	r5, ip
 8000a6a:	2601      	movs	r6, #1
 8000a6c:	e564      	b.n	8000538 <__aeabi_dadd+0x98>
 8000a6e:	1a1c      	subs	r4, r3, r0
 8000a70:	464a      	mov	r2, r9
 8000a72:	42a3      	cmp	r3, r4
 8000a74:	4180      	sbcs	r0, r0
 8000a76:	1a8a      	subs	r2, r1, r2
 8000a78:	4240      	negs	r0, r0
 8000a7a:	1a12      	subs	r2, r2, r0
 8000a7c:	4692      	mov	sl, r2
 8000a7e:	0212      	lsls	r2, r2, #8
 8000a80:	d549      	bpl.n	8000b16 <__aeabi_dadd+0x676>
 8000a82:	4642      	mov	r2, r8
 8000a84:	1ad4      	subs	r4, r2, r3
 8000a86:	45a0      	cmp	r8, r4
 8000a88:	4180      	sbcs	r0, r0
 8000a8a:	464b      	mov	r3, r9
 8000a8c:	4240      	negs	r0, r0
 8000a8e:	1a59      	subs	r1, r3, r1
 8000a90:	1a0b      	subs	r3, r1, r0
 8000a92:	469a      	mov	sl, r3
 8000a94:	4665      	mov	r5, ip
 8000a96:	e57f      	b.n	8000598 <__aeabi_dadd+0xf8>
 8000a98:	464b      	mov	r3, r9
 8000a9a:	464a      	mov	r2, r9
 8000a9c:	08c0      	lsrs	r0, r0, #3
 8000a9e:	075b      	lsls	r3, r3, #29
 8000aa0:	4303      	orrs	r3, r0
 8000aa2:	08d1      	lsrs	r1, r2, #3
 8000aa4:	e62b      	b.n	80006fe <__aeabi_dadd+0x25e>
 8000aa6:	464a      	mov	r2, r9
 8000aa8:	08db      	lsrs	r3, r3, #3
 8000aaa:	4302      	orrs	r2, r0
 8000aac:	d138      	bne.n	8000b20 <__aeabi_dadd+0x680>
 8000aae:	074a      	lsls	r2, r1, #29
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	08c9      	lsrs	r1, r1, #3
 8000ab4:	e646      	b.n	8000744 <__aeabi_dadd+0x2a4>
 8000ab6:	464b      	mov	r3, r9
 8000ab8:	464a      	mov	r2, r9
 8000aba:	08c0      	lsrs	r0, r0, #3
 8000abc:	075b      	lsls	r3, r3, #29
 8000abe:	4303      	orrs	r3, r0
 8000ac0:	08d1      	lsrs	r1, r2, #3
 8000ac2:	e61f      	b.n	8000704 <__aeabi_dadd+0x264>
 8000ac4:	181c      	adds	r4, r3, r0
 8000ac6:	429c      	cmp	r4, r3
 8000ac8:	419b      	sbcs	r3, r3
 8000aca:	4449      	add	r1, r9
 8000acc:	468a      	mov	sl, r1
 8000ace:	425b      	negs	r3, r3
 8000ad0:	449a      	add	sl, r3
 8000ad2:	4653      	mov	r3, sl
 8000ad4:	021b      	lsls	r3, r3, #8
 8000ad6:	d400      	bmi.n	8000ada <__aeabi_dadd+0x63a>
 8000ad8:	e607      	b.n	80006ea <__aeabi_dadd+0x24a>
 8000ada:	4652      	mov	r2, sl
 8000adc:	4b1f      	ldr	r3, [pc, #124]	; (8000b5c <__aeabi_dadd+0x6bc>)
 8000ade:	2601      	movs	r6, #1
 8000ae0:	401a      	ands	r2, r3
 8000ae2:	4692      	mov	sl, r2
 8000ae4:	e601      	b.n	80006ea <__aeabi_dadd+0x24a>
 8000ae6:	003c      	movs	r4, r7
 8000ae8:	000e      	movs	r6, r1
 8000aea:	3c20      	subs	r4, #32
 8000aec:	40e6      	lsrs	r6, r4
 8000aee:	2f20      	cmp	r7, #32
 8000af0:	d003      	beq.n	8000afa <__aeabi_dadd+0x65a>
 8000af2:	2440      	movs	r4, #64	; 0x40
 8000af4:	1be4      	subs	r4, r4, r7
 8000af6:	40a1      	lsls	r1, r4
 8000af8:	430b      	orrs	r3, r1
 8000afa:	001c      	movs	r4, r3
 8000afc:	1e63      	subs	r3, r4, #1
 8000afe:	419c      	sbcs	r4, r3
 8000b00:	4334      	orrs	r4, r6
 8000b02:	e65e      	b.n	80007c2 <__aeabi_dadd+0x322>
 8000b04:	4443      	add	r3, r8
 8000b06:	4283      	cmp	r3, r0
 8000b08:	4180      	sbcs	r0, r0
 8000b0a:	4449      	add	r1, r9
 8000b0c:	468a      	mov	sl, r1
 8000b0e:	4240      	negs	r0, r0
 8000b10:	001c      	movs	r4, r3
 8000b12:	4482      	add	sl, r0
 8000b14:	e6bc      	b.n	8000890 <__aeabi_dadd+0x3f0>
 8000b16:	4653      	mov	r3, sl
 8000b18:	4323      	orrs	r3, r4
 8000b1a:	d100      	bne.n	8000b1e <__aeabi_dadd+0x67e>
 8000b1c:	e6a9      	b.n	8000872 <__aeabi_dadd+0x3d2>
 8000b1e:	e5e4      	b.n	80006ea <__aeabi_dadd+0x24a>
 8000b20:	074a      	lsls	r2, r1, #29
 8000b22:	4313      	orrs	r3, r2
 8000b24:	2280      	movs	r2, #128	; 0x80
 8000b26:	08c9      	lsrs	r1, r1, #3
 8000b28:	0312      	lsls	r2, r2, #12
 8000b2a:	4211      	tst	r1, r2
 8000b2c:	d009      	beq.n	8000b42 <__aeabi_dadd+0x6a2>
 8000b2e:	4648      	mov	r0, r9
 8000b30:	08c4      	lsrs	r4, r0, #3
 8000b32:	4214      	tst	r4, r2
 8000b34:	d105      	bne.n	8000b42 <__aeabi_dadd+0x6a2>
 8000b36:	4643      	mov	r3, r8
 8000b38:	4665      	mov	r5, ip
 8000b3a:	0021      	movs	r1, r4
 8000b3c:	08db      	lsrs	r3, r3, #3
 8000b3e:	0742      	lsls	r2, r0, #29
 8000b40:	4313      	orrs	r3, r2
 8000b42:	0f5a      	lsrs	r2, r3, #29
 8000b44:	00db      	lsls	r3, r3, #3
 8000b46:	08db      	lsrs	r3, r3, #3
 8000b48:	0752      	lsls	r2, r2, #29
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	e5fa      	b.n	8000744 <__aeabi_dadd+0x2a4>
 8000b4e:	2300      	movs	r3, #0
 8000b50:	4a01      	ldr	r2, [pc, #4]	; (8000b58 <__aeabi_dadd+0x6b8>)
 8000b52:	001c      	movs	r4, r3
 8000b54:	e540      	b.n	80005d8 <__aeabi_dadd+0x138>
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	000007ff 	.word	0x000007ff
 8000b5c:	ff7fffff 	.word	0xff7fffff

08000b60 <__aeabi_ddiv>:
 8000b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b62:	4657      	mov	r7, sl
 8000b64:	464e      	mov	r6, r9
 8000b66:	4645      	mov	r5, r8
 8000b68:	46de      	mov	lr, fp
 8000b6a:	b5e0      	push	{r5, r6, r7, lr}
 8000b6c:	030c      	lsls	r4, r1, #12
 8000b6e:	001f      	movs	r7, r3
 8000b70:	004b      	lsls	r3, r1, #1
 8000b72:	4681      	mov	r9, r0
 8000b74:	4692      	mov	sl, r2
 8000b76:	0005      	movs	r5, r0
 8000b78:	b085      	sub	sp, #20
 8000b7a:	0b24      	lsrs	r4, r4, #12
 8000b7c:	0d5b      	lsrs	r3, r3, #21
 8000b7e:	0fce      	lsrs	r6, r1, #31
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d100      	bne.n	8000b86 <__aeabi_ddiv+0x26>
 8000b84:	e152      	b.n	8000e2c <__aeabi_ddiv+0x2cc>
 8000b86:	4ad2      	ldr	r2, [pc, #840]	; (8000ed0 <__aeabi_ddiv+0x370>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_ddiv+0x2e>
 8000b8c:	e16e      	b.n	8000e6c <__aeabi_ddiv+0x30c>
 8000b8e:	0f42      	lsrs	r2, r0, #29
 8000b90:	00e4      	lsls	r4, r4, #3
 8000b92:	4314      	orrs	r4, r2
 8000b94:	2280      	movs	r2, #128	; 0x80
 8000b96:	0412      	lsls	r2, r2, #16
 8000b98:	4322      	orrs	r2, r4
 8000b9a:	4690      	mov	r8, r2
 8000b9c:	4acd      	ldr	r2, [pc, #820]	; (8000ed4 <__aeabi_ddiv+0x374>)
 8000b9e:	00c5      	lsls	r5, r0, #3
 8000ba0:	4693      	mov	fp, r2
 8000ba2:	449b      	add	fp, r3
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	4699      	mov	r9, r3
 8000ba8:	9300      	str	r3, [sp, #0]
 8000baa:	033c      	lsls	r4, r7, #12
 8000bac:	007b      	lsls	r3, r7, #1
 8000bae:	4650      	mov	r0, sl
 8000bb0:	0b24      	lsrs	r4, r4, #12
 8000bb2:	0d5b      	lsrs	r3, r3, #21
 8000bb4:	0fff      	lsrs	r7, r7, #31
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d100      	bne.n	8000bbc <__aeabi_ddiv+0x5c>
 8000bba:	e11a      	b.n	8000df2 <__aeabi_ddiv+0x292>
 8000bbc:	4ac4      	ldr	r2, [pc, #784]	; (8000ed0 <__aeabi_ddiv+0x370>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d100      	bne.n	8000bc4 <__aeabi_ddiv+0x64>
 8000bc2:	e15e      	b.n	8000e82 <__aeabi_ddiv+0x322>
 8000bc4:	0f42      	lsrs	r2, r0, #29
 8000bc6:	00e4      	lsls	r4, r4, #3
 8000bc8:	4322      	orrs	r2, r4
 8000bca:	2480      	movs	r4, #128	; 0x80
 8000bcc:	0424      	lsls	r4, r4, #16
 8000bce:	4314      	orrs	r4, r2
 8000bd0:	4ac0      	ldr	r2, [pc, #768]	; (8000ed4 <__aeabi_ddiv+0x374>)
 8000bd2:	00c1      	lsls	r1, r0, #3
 8000bd4:	4694      	mov	ip, r2
 8000bd6:	465a      	mov	r2, fp
 8000bd8:	4463      	add	r3, ip
 8000bda:	1ad3      	subs	r3, r2, r3
 8000bdc:	469b      	mov	fp, r3
 8000bde:	2000      	movs	r0, #0
 8000be0:	0033      	movs	r3, r6
 8000be2:	407b      	eors	r3, r7
 8000be4:	469a      	mov	sl, r3
 8000be6:	464b      	mov	r3, r9
 8000be8:	2b0f      	cmp	r3, #15
 8000bea:	d827      	bhi.n	8000c3c <__aeabi_ddiv+0xdc>
 8000bec:	4aba      	ldr	r2, [pc, #744]	; (8000ed8 <__aeabi_ddiv+0x378>)
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	58d3      	ldr	r3, [r2, r3]
 8000bf2:	469f      	mov	pc, r3
 8000bf4:	46b2      	mov	sl, r6
 8000bf6:	9b00      	ldr	r3, [sp, #0]
 8000bf8:	2b02      	cmp	r3, #2
 8000bfa:	d016      	beq.n	8000c2a <__aeabi_ddiv+0xca>
 8000bfc:	2b03      	cmp	r3, #3
 8000bfe:	d100      	bne.n	8000c02 <__aeabi_ddiv+0xa2>
 8000c00:	e287      	b.n	8001112 <__aeabi_ddiv+0x5b2>
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d000      	beq.n	8000c08 <__aeabi_ddiv+0xa8>
 8000c06:	e0d5      	b.n	8000db4 <__aeabi_ddiv+0x254>
 8000c08:	2300      	movs	r3, #0
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2500      	movs	r5, #0
 8000c0e:	051b      	lsls	r3, r3, #20
 8000c10:	4313      	orrs	r3, r2
 8000c12:	4652      	mov	r2, sl
 8000c14:	07d2      	lsls	r2, r2, #31
 8000c16:	4313      	orrs	r3, r2
 8000c18:	0028      	movs	r0, r5
 8000c1a:	0019      	movs	r1, r3
 8000c1c:	b005      	add	sp, #20
 8000c1e:	bcf0      	pop	{r4, r5, r6, r7}
 8000c20:	46bb      	mov	fp, r7
 8000c22:	46b2      	mov	sl, r6
 8000c24:	46a9      	mov	r9, r5
 8000c26:	46a0      	mov	r8, r4
 8000c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2500      	movs	r5, #0
 8000c2e:	4ba8      	ldr	r3, [pc, #672]	; (8000ed0 <__aeabi_ddiv+0x370>)
 8000c30:	e7ed      	b.n	8000c0e <__aeabi_ddiv+0xae>
 8000c32:	46ba      	mov	sl, r7
 8000c34:	46a0      	mov	r8, r4
 8000c36:	000d      	movs	r5, r1
 8000c38:	9000      	str	r0, [sp, #0]
 8000c3a:	e7dc      	b.n	8000bf6 <__aeabi_ddiv+0x96>
 8000c3c:	4544      	cmp	r4, r8
 8000c3e:	d200      	bcs.n	8000c42 <__aeabi_ddiv+0xe2>
 8000c40:	e1c4      	b.n	8000fcc <__aeabi_ddiv+0x46c>
 8000c42:	d100      	bne.n	8000c46 <__aeabi_ddiv+0xe6>
 8000c44:	e1bf      	b.n	8000fc6 <__aeabi_ddiv+0x466>
 8000c46:	2301      	movs	r3, #1
 8000c48:	425b      	negs	r3, r3
 8000c4a:	469c      	mov	ip, r3
 8000c4c:	002e      	movs	r6, r5
 8000c4e:	4640      	mov	r0, r8
 8000c50:	2500      	movs	r5, #0
 8000c52:	44e3      	add	fp, ip
 8000c54:	0223      	lsls	r3, r4, #8
 8000c56:	0e0c      	lsrs	r4, r1, #24
 8000c58:	431c      	orrs	r4, r3
 8000c5a:	0c1b      	lsrs	r3, r3, #16
 8000c5c:	4699      	mov	r9, r3
 8000c5e:	0423      	lsls	r3, r4, #16
 8000c60:	020a      	lsls	r2, r1, #8
 8000c62:	0c1f      	lsrs	r7, r3, #16
 8000c64:	4649      	mov	r1, r9
 8000c66:	9200      	str	r2, [sp, #0]
 8000c68:	9701      	str	r7, [sp, #4]
 8000c6a:	f7ff faeb 	bl	8000244 <__aeabi_uidivmod>
 8000c6e:	0002      	movs	r2, r0
 8000c70:	437a      	muls	r2, r7
 8000c72:	040b      	lsls	r3, r1, #16
 8000c74:	0c31      	lsrs	r1, r6, #16
 8000c76:	4680      	mov	r8, r0
 8000c78:	4319      	orrs	r1, r3
 8000c7a:	428a      	cmp	r2, r1
 8000c7c:	d907      	bls.n	8000c8e <__aeabi_ddiv+0x12e>
 8000c7e:	2301      	movs	r3, #1
 8000c80:	425b      	negs	r3, r3
 8000c82:	469c      	mov	ip, r3
 8000c84:	1909      	adds	r1, r1, r4
 8000c86:	44e0      	add	r8, ip
 8000c88:	428c      	cmp	r4, r1
 8000c8a:	d800      	bhi.n	8000c8e <__aeabi_ddiv+0x12e>
 8000c8c:	e201      	b.n	8001092 <__aeabi_ddiv+0x532>
 8000c8e:	1a88      	subs	r0, r1, r2
 8000c90:	4649      	mov	r1, r9
 8000c92:	f7ff fad7 	bl	8000244 <__aeabi_uidivmod>
 8000c96:	9a01      	ldr	r2, [sp, #4]
 8000c98:	0436      	lsls	r6, r6, #16
 8000c9a:	4342      	muls	r2, r0
 8000c9c:	0409      	lsls	r1, r1, #16
 8000c9e:	0c36      	lsrs	r6, r6, #16
 8000ca0:	0003      	movs	r3, r0
 8000ca2:	430e      	orrs	r6, r1
 8000ca4:	42b2      	cmp	r2, r6
 8000ca6:	d904      	bls.n	8000cb2 <__aeabi_ddiv+0x152>
 8000ca8:	1936      	adds	r6, r6, r4
 8000caa:	3b01      	subs	r3, #1
 8000cac:	42b4      	cmp	r4, r6
 8000cae:	d800      	bhi.n	8000cb2 <__aeabi_ddiv+0x152>
 8000cb0:	e1e9      	b.n	8001086 <__aeabi_ddiv+0x526>
 8000cb2:	1ab0      	subs	r0, r6, r2
 8000cb4:	4642      	mov	r2, r8
 8000cb6:	9e00      	ldr	r6, [sp, #0]
 8000cb8:	0412      	lsls	r2, r2, #16
 8000cba:	431a      	orrs	r2, r3
 8000cbc:	0c33      	lsrs	r3, r6, #16
 8000cbe:	001f      	movs	r7, r3
 8000cc0:	0c11      	lsrs	r1, r2, #16
 8000cc2:	4690      	mov	r8, r2
 8000cc4:	9302      	str	r3, [sp, #8]
 8000cc6:	0413      	lsls	r3, r2, #16
 8000cc8:	0432      	lsls	r2, r6, #16
 8000cca:	0c16      	lsrs	r6, r2, #16
 8000ccc:	0032      	movs	r2, r6
 8000cce:	0c1b      	lsrs	r3, r3, #16
 8000cd0:	435a      	muls	r2, r3
 8000cd2:	9603      	str	r6, [sp, #12]
 8000cd4:	437b      	muls	r3, r7
 8000cd6:	434e      	muls	r6, r1
 8000cd8:	4379      	muls	r1, r7
 8000cda:	0c17      	lsrs	r7, r2, #16
 8000cdc:	46bc      	mov	ip, r7
 8000cde:	199b      	adds	r3, r3, r6
 8000ce0:	4463      	add	r3, ip
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	d903      	bls.n	8000cee <__aeabi_ddiv+0x18e>
 8000ce6:	2680      	movs	r6, #128	; 0x80
 8000ce8:	0276      	lsls	r6, r6, #9
 8000cea:	46b4      	mov	ip, r6
 8000cec:	4461      	add	r1, ip
 8000cee:	0c1e      	lsrs	r6, r3, #16
 8000cf0:	1871      	adds	r1, r6, r1
 8000cf2:	0416      	lsls	r6, r2, #16
 8000cf4:	041b      	lsls	r3, r3, #16
 8000cf6:	0c36      	lsrs	r6, r6, #16
 8000cf8:	199e      	adds	r6, r3, r6
 8000cfa:	4288      	cmp	r0, r1
 8000cfc:	d302      	bcc.n	8000d04 <__aeabi_ddiv+0x1a4>
 8000cfe:	d112      	bne.n	8000d26 <__aeabi_ddiv+0x1c6>
 8000d00:	42b5      	cmp	r5, r6
 8000d02:	d210      	bcs.n	8000d26 <__aeabi_ddiv+0x1c6>
 8000d04:	4643      	mov	r3, r8
 8000d06:	1e5a      	subs	r2, r3, #1
 8000d08:	9b00      	ldr	r3, [sp, #0]
 8000d0a:	469c      	mov	ip, r3
 8000d0c:	4465      	add	r5, ip
 8000d0e:	001f      	movs	r7, r3
 8000d10:	429d      	cmp	r5, r3
 8000d12:	419b      	sbcs	r3, r3
 8000d14:	425b      	negs	r3, r3
 8000d16:	191b      	adds	r3, r3, r4
 8000d18:	18c0      	adds	r0, r0, r3
 8000d1a:	4284      	cmp	r4, r0
 8000d1c:	d200      	bcs.n	8000d20 <__aeabi_ddiv+0x1c0>
 8000d1e:	e19e      	b.n	800105e <__aeabi_ddiv+0x4fe>
 8000d20:	d100      	bne.n	8000d24 <__aeabi_ddiv+0x1c4>
 8000d22:	e199      	b.n	8001058 <__aeabi_ddiv+0x4f8>
 8000d24:	4690      	mov	r8, r2
 8000d26:	1bae      	subs	r6, r5, r6
 8000d28:	42b5      	cmp	r5, r6
 8000d2a:	41ad      	sbcs	r5, r5
 8000d2c:	1a40      	subs	r0, r0, r1
 8000d2e:	426d      	negs	r5, r5
 8000d30:	1b40      	subs	r0, r0, r5
 8000d32:	4284      	cmp	r4, r0
 8000d34:	d100      	bne.n	8000d38 <__aeabi_ddiv+0x1d8>
 8000d36:	e1d2      	b.n	80010de <__aeabi_ddiv+0x57e>
 8000d38:	4649      	mov	r1, r9
 8000d3a:	f7ff fa83 	bl	8000244 <__aeabi_uidivmod>
 8000d3e:	9a01      	ldr	r2, [sp, #4]
 8000d40:	040b      	lsls	r3, r1, #16
 8000d42:	4342      	muls	r2, r0
 8000d44:	0c31      	lsrs	r1, r6, #16
 8000d46:	0005      	movs	r5, r0
 8000d48:	4319      	orrs	r1, r3
 8000d4a:	428a      	cmp	r2, r1
 8000d4c:	d900      	bls.n	8000d50 <__aeabi_ddiv+0x1f0>
 8000d4e:	e16c      	b.n	800102a <__aeabi_ddiv+0x4ca>
 8000d50:	1a88      	subs	r0, r1, r2
 8000d52:	4649      	mov	r1, r9
 8000d54:	f7ff fa76 	bl	8000244 <__aeabi_uidivmod>
 8000d58:	9a01      	ldr	r2, [sp, #4]
 8000d5a:	0436      	lsls	r6, r6, #16
 8000d5c:	4342      	muls	r2, r0
 8000d5e:	0409      	lsls	r1, r1, #16
 8000d60:	0c36      	lsrs	r6, r6, #16
 8000d62:	0003      	movs	r3, r0
 8000d64:	430e      	orrs	r6, r1
 8000d66:	42b2      	cmp	r2, r6
 8000d68:	d900      	bls.n	8000d6c <__aeabi_ddiv+0x20c>
 8000d6a:	e153      	b.n	8001014 <__aeabi_ddiv+0x4b4>
 8000d6c:	9803      	ldr	r0, [sp, #12]
 8000d6e:	1ab6      	subs	r6, r6, r2
 8000d70:	0002      	movs	r2, r0
 8000d72:	042d      	lsls	r5, r5, #16
 8000d74:	431d      	orrs	r5, r3
 8000d76:	9f02      	ldr	r7, [sp, #8]
 8000d78:	042b      	lsls	r3, r5, #16
 8000d7a:	0c1b      	lsrs	r3, r3, #16
 8000d7c:	435a      	muls	r2, r3
 8000d7e:	437b      	muls	r3, r7
 8000d80:	469c      	mov	ip, r3
 8000d82:	0c29      	lsrs	r1, r5, #16
 8000d84:	4348      	muls	r0, r1
 8000d86:	0c13      	lsrs	r3, r2, #16
 8000d88:	4484      	add	ip, r0
 8000d8a:	4463      	add	r3, ip
 8000d8c:	4379      	muls	r1, r7
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d903      	bls.n	8000d9a <__aeabi_ddiv+0x23a>
 8000d92:	2080      	movs	r0, #128	; 0x80
 8000d94:	0240      	lsls	r0, r0, #9
 8000d96:	4684      	mov	ip, r0
 8000d98:	4461      	add	r1, ip
 8000d9a:	0c18      	lsrs	r0, r3, #16
 8000d9c:	0412      	lsls	r2, r2, #16
 8000d9e:	041b      	lsls	r3, r3, #16
 8000da0:	0c12      	lsrs	r2, r2, #16
 8000da2:	1840      	adds	r0, r0, r1
 8000da4:	189b      	adds	r3, r3, r2
 8000da6:	4286      	cmp	r6, r0
 8000da8:	d200      	bcs.n	8000dac <__aeabi_ddiv+0x24c>
 8000daa:	e100      	b.n	8000fae <__aeabi_ddiv+0x44e>
 8000dac:	d100      	bne.n	8000db0 <__aeabi_ddiv+0x250>
 8000dae:	e0fb      	b.n	8000fa8 <__aeabi_ddiv+0x448>
 8000db0:	2301      	movs	r3, #1
 8000db2:	431d      	orrs	r5, r3
 8000db4:	4b49      	ldr	r3, [pc, #292]	; (8000edc <__aeabi_ddiv+0x37c>)
 8000db6:	445b      	add	r3, fp
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	dc00      	bgt.n	8000dbe <__aeabi_ddiv+0x25e>
 8000dbc:	e0aa      	b.n	8000f14 <__aeabi_ddiv+0x3b4>
 8000dbe:	076a      	lsls	r2, r5, #29
 8000dc0:	d000      	beq.n	8000dc4 <__aeabi_ddiv+0x264>
 8000dc2:	e13d      	b.n	8001040 <__aeabi_ddiv+0x4e0>
 8000dc4:	08e9      	lsrs	r1, r5, #3
 8000dc6:	4642      	mov	r2, r8
 8000dc8:	01d2      	lsls	r2, r2, #7
 8000dca:	d506      	bpl.n	8000dda <__aeabi_ddiv+0x27a>
 8000dcc:	4642      	mov	r2, r8
 8000dce:	4b44      	ldr	r3, [pc, #272]	; (8000ee0 <__aeabi_ddiv+0x380>)
 8000dd0:	401a      	ands	r2, r3
 8000dd2:	2380      	movs	r3, #128	; 0x80
 8000dd4:	4690      	mov	r8, r2
 8000dd6:	00db      	lsls	r3, r3, #3
 8000dd8:	445b      	add	r3, fp
 8000dda:	4a42      	ldr	r2, [pc, #264]	; (8000ee4 <__aeabi_ddiv+0x384>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	dd00      	ble.n	8000de2 <__aeabi_ddiv+0x282>
 8000de0:	e723      	b.n	8000c2a <__aeabi_ddiv+0xca>
 8000de2:	4642      	mov	r2, r8
 8000de4:	055b      	lsls	r3, r3, #21
 8000de6:	0755      	lsls	r5, r2, #29
 8000de8:	0252      	lsls	r2, r2, #9
 8000dea:	430d      	orrs	r5, r1
 8000dec:	0b12      	lsrs	r2, r2, #12
 8000dee:	0d5b      	lsrs	r3, r3, #21
 8000df0:	e70d      	b.n	8000c0e <__aeabi_ddiv+0xae>
 8000df2:	4651      	mov	r1, sl
 8000df4:	4321      	orrs	r1, r4
 8000df6:	d100      	bne.n	8000dfa <__aeabi_ddiv+0x29a>
 8000df8:	e07c      	b.n	8000ef4 <__aeabi_ddiv+0x394>
 8000dfa:	2c00      	cmp	r4, #0
 8000dfc:	d100      	bne.n	8000e00 <__aeabi_ddiv+0x2a0>
 8000dfe:	e0fb      	b.n	8000ff8 <__aeabi_ddiv+0x498>
 8000e00:	0020      	movs	r0, r4
 8000e02:	f001 f995 	bl	8002130 <__clzsi2>
 8000e06:	0002      	movs	r2, r0
 8000e08:	3a0b      	subs	r2, #11
 8000e0a:	231d      	movs	r3, #29
 8000e0c:	1a9b      	subs	r3, r3, r2
 8000e0e:	4652      	mov	r2, sl
 8000e10:	0001      	movs	r1, r0
 8000e12:	40da      	lsrs	r2, r3
 8000e14:	4653      	mov	r3, sl
 8000e16:	3908      	subs	r1, #8
 8000e18:	408b      	lsls	r3, r1
 8000e1a:	408c      	lsls	r4, r1
 8000e1c:	0019      	movs	r1, r3
 8000e1e:	4314      	orrs	r4, r2
 8000e20:	4b31      	ldr	r3, [pc, #196]	; (8000ee8 <__aeabi_ddiv+0x388>)
 8000e22:	4458      	add	r0, fp
 8000e24:	469b      	mov	fp, r3
 8000e26:	4483      	add	fp, r0
 8000e28:	2000      	movs	r0, #0
 8000e2a:	e6d9      	b.n	8000be0 <__aeabi_ddiv+0x80>
 8000e2c:	0003      	movs	r3, r0
 8000e2e:	4323      	orrs	r3, r4
 8000e30:	4698      	mov	r8, r3
 8000e32:	d044      	beq.n	8000ebe <__aeabi_ddiv+0x35e>
 8000e34:	2c00      	cmp	r4, #0
 8000e36:	d100      	bne.n	8000e3a <__aeabi_ddiv+0x2da>
 8000e38:	e0cf      	b.n	8000fda <__aeabi_ddiv+0x47a>
 8000e3a:	0020      	movs	r0, r4
 8000e3c:	f001 f978 	bl	8002130 <__clzsi2>
 8000e40:	0001      	movs	r1, r0
 8000e42:	0002      	movs	r2, r0
 8000e44:	390b      	subs	r1, #11
 8000e46:	231d      	movs	r3, #29
 8000e48:	1a5b      	subs	r3, r3, r1
 8000e4a:	4649      	mov	r1, r9
 8000e4c:	0010      	movs	r0, r2
 8000e4e:	40d9      	lsrs	r1, r3
 8000e50:	3808      	subs	r0, #8
 8000e52:	4084      	lsls	r4, r0
 8000e54:	000b      	movs	r3, r1
 8000e56:	464d      	mov	r5, r9
 8000e58:	4323      	orrs	r3, r4
 8000e5a:	4698      	mov	r8, r3
 8000e5c:	4085      	lsls	r5, r0
 8000e5e:	4b23      	ldr	r3, [pc, #140]	; (8000eec <__aeabi_ddiv+0x38c>)
 8000e60:	1a9b      	subs	r3, r3, r2
 8000e62:	469b      	mov	fp, r3
 8000e64:	2300      	movs	r3, #0
 8000e66:	4699      	mov	r9, r3
 8000e68:	9300      	str	r3, [sp, #0]
 8000e6a:	e69e      	b.n	8000baa <__aeabi_ddiv+0x4a>
 8000e6c:	0002      	movs	r2, r0
 8000e6e:	4322      	orrs	r2, r4
 8000e70:	4690      	mov	r8, r2
 8000e72:	d11d      	bne.n	8000eb0 <__aeabi_ddiv+0x350>
 8000e74:	2208      	movs	r2, #8
 8000e76:	469b      	mov	fp, r3
 8000e78:	2302      	movs	r3, #2
 8000e7a:	2500      	movs	r5, #0
 8000e7c:	4691      	mov	r9, r2
 8000e7e:	9300      	str	r3, [sp, #0]
 8000e80:	e693      	b.n	8000baa <__aeabi_ddiv+0x4a>
 8000e82:	4651      	mov	r1, sl
 8000e84:	4321      	orrs	r1, r4
 8000e86:	d109      	bne.n	8000e9c <__aeabi_ddiv+0x33c>
 8000e88:	2302      	movs	r3, #2
 8000e8a:	464a      	mov	r2, r9
 8000e8c:	431a      	orrs	r2, r3
 8000e8e:	4b18      	ldr	r3, [pc, #96]	; (8000ef0 <__aeabi_ddiv+0x390>)
 8000e90:	4691      	mov	r9, r2
 8000e92:	469c      	mov	ip, r3
 8000e94:	2400      	movs	r4, #0
 8000e96:	2002      	movs	r0, #2
 8000e98:	44e3      	add	fp, ip
 8000e9a:	e6a1      	b.n	8000be0 <__aeabi_ddiv+0x80>
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	464a      	mov	r2, r9
 8000ea0:	431a      	orrs	r2, r3
 8000ea2:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <__aeabi_ddiv+0x390>)
 8000ea4:	4691      	mov	r9, r2
 8000ea6:	469c      	mov	ip, r3
 8000ea8:	4651      	mov	r1, sl
 8000eaa:	2003      	movs	r0, #3
 8000eac:	44e3      	add	fp, ip
 8000eae:	e697      	b.n	8000be0 <__aeabi_ddiv+0x80>
 8000eb0:	220c      	movs	r2, #12
 8000eb2:	469b      	mov	fp, r3
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	46a0      	mov	r8, r4
 8000eb8:	4691      	mov	r9, r2
 8000eba:	9300      	str	r3, [sp, #0]
 8000ebc:	e675      	b.n	8000baa <__aeabi_ddiv+0x4a>
 8000ebe:	2304      	movs	r3, #4
 8000ec0:	4699      	mov	r9, r3
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	469b      	mov	fp, r3
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	2500      	movs	r5, #0
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	e66d      	b.n	8000baa <__aeabi_ddiv+0x4a>
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	000007ff 	.word	0x000007ff
 8000ed4:	fffffc01 	.word	0xfffffc01
 8000ed8:	08011164 	.word	0x08011164
 8000edc:	000003ff 	.word	0x000003ff
 8000ee0:	feffffff 	.word	0xfeffffff
 8000ee4:	000007fe 	.word	0x000007fe
 8000ee8:	000003f3 	.word	0x000003f3
 8000eec:	fffffc0d 	.word	0xfffffc0d
 8000ef0:	fffff801 	.word	0xfffff801
 8000ef4:	464a      	mov	r2, r9
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	431a      	orrs	r2, r3
 8000efa:	4691      	mov	r9, r2
 8000efc:	2400      	movs	r4, #0
 8000efe:	2001      	movs	r0, #1
 8000f00:	e66e      	b.n	8000be0 <__aeabi_ddiv+0x80>
 8000f02:	2300      	movs	r3, #0
 8000f04:	2280      	movs	r2, #128	; 0x80
 8000f06:	469a      	mov	sl, r3
 8000f08:	2500      	movs	r5, #0
 8000f0a:	4b88      	ldr	r3, [pc, #544]	; (800112c <__aeabi_ddiv+0x5cc>)
 8000f0c:	0312      	lsls	r2, r2, #12
 8000f0e:	e67e      	b.n	8000c0e <__aeabi_ddiv+0xae>
 8000f10:	2501      	movs	r5, #1
 8000f12:	426d      	negs	r5, r5
 8000f14:	2201      	movs	r2, #1
 8000f16:	1ad2      	subs	r2, r2, r3
 8000f18:	2a38      	cmp	r2, #56	; 0x38
 8000f1a:	dd00      	ble.n	8000f1e <__aeabi_ddiv+0x3be>
 8000f1c:	e674      	b.n	8000c08 <__aeabi_ddiv+0xa8>
 8000f1e:	2a1f      	cmp	r2, #31
 8000f20:	dc00      	bgt.n	8000f24 <__aeabi_ddiv+0x3c4>
 8000f22:	e0bd      	b.n	80010a0 <__aeabi_ddiv+0x540>
 8000f24:	211f      	movs	r1, #31
 8000f26:	4249      	negs	r1, r1
 8000f28:	1acb      	subs	r3, r1, r3
 8000f2a:	4641      	mov	r1, r8
 8000f2c:	40d9      	lsrs	r1, r3
 8000f2e:	000b      	movs	r3, r1
 8000f30:	2a20      	cmp	r2, #32
 8000f32:	d004      	beq.n	8000f3e <__aeabi_ddiv+0x3de>
 8000f34:	4641      	mov	r1, r8
 8000f36:	4a7e      	ldr	r2, [pc, #504]	; (8001130 <__aeabi_ddiv+0x5d0>)
 8000f38:	445a      	add	r2, fp
 8000f3a:	4091      	lsls	r1, r2
 8000f3c:	430d      	orrs	r5, r1
 8000f3e:	0029      	movs	r1, r5
 8000f40:	1e4a      	subs	r2, r1, #1
 8000f42:	4191      	sbcs	r1, r2
 8000f44:	4319      	orrs	r1, r3
 8000f46:	2307      	movs	r3, #7
 8000f48:	001d      	movs	r5, r3
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	400d      	ands	r5, r1
 8000f4e:	420b      	tst	r3, r1
 8000f50:	d100      	bne.n	8000f54 <__aeabi_ddiv+0x3f4>
 8000f52:	e0d0      	b.n	80010f6 <__aeabi_ddiv+0x596>
 8000f54:	220f      	movs	r2, #15
 8000f56:	2300      	movs	r3, #0
 8000f58:	400a      	ands	r2, r1
 8000f5a:	2a04      	cmp	r2, #4
 8000f5c:	d100      	bne.n	8000f60 <__aeabi_ddiv+0x400>
 8000f5e:	e0c7      	b.n	80010f0 <__aeabi_ddiv+0x590>
 8000f60:	1d0a      	adds	r2, r1, #4
 8000f62:	428a      	cmp	r2, r1
 8000f64:	4189      	sbcs	r1, r1
 8000f66:	4249      	negs	r1, r1
 8000f68:	185b      	adds	r3, r3, r1
 8000f6a:	0011      	movs	r1, r2
 8000f6c:	021a      	lsls	r2, r3, #8
 8000f6e:	d400      	bmi.n	8000f72 <__aeabi_ddiv+0x412>
 8000f70:	e0be      	b.n	80010f0 <__aeabi_ddiv+0x590>
 8000f72:	2301      	movs	r3, #1
 8000f74:	2200      	movs	r2, #0
 8000f76:	2500      	movs	r5, #0
 8000f78:	e649      	b.n	8000c0e <__aeabi_ddiv+0xae>
 8000f7a:	2280      	movs	r2, #128	; 0x80
 8000f7c:	4643      	mov	r3, r8
 8000f7e:	0312      	lsls	r2, r2, #12
 8000f80:	4213      	tst	r3, r2
 8000f82:	d008      	beq.n	8000f96 <__aeabi_ddiv+0x436>
 8000f84:	4214      	tst	r4, r2
 8000f86:	d106      	bne.n	8000f96 <__aeabi_ddiv+0x436>
 8000f88:	4322      	orrs	r2, r4
 8000f8a:	0312      	lsls	r2, r2, #12
 8000f8c:	46ba      	mov	sl, r7
 8000f8e:	000d      	movs	r5, r1
 8000f90:	4b66      	ldr	r3, [pc, #408]	; (800112c <__aeabi_ddiv+0x5cc>)
 8000f92:	0b12      	lsrs	r2, r2, #12
 8000f94:	e63b      	b.n	8000c0e <__aeabi_ddiv+0xae>
 8000f96:	2280      	movs	r2, #128	; 0x80
 8000f98:	4643      	mov	r3, r8
 8000f9a:	0312      	lsls	r2, r2, #12
 8000f9c:	431a      	orrs	r2, r3
 8000f9e:	0312      	lsls	r2, r2, #12
 8000fa0:	46b2      	mov	sl, r6
 8000fa2:	4b62      	ldr	r3, [pc, #392]	; (800112c <__aeabi_ddiv+0x5cc>)
 8000fa4:	0b12      	lsrs	r2, r2, #12
 8000fa6:	e632      	b.n	8000c0e <__aeabi_ddiv+0xae>
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d100      	bne.n	8000fae <__aeabi_ddiv+0x44e>
 8000fac:	e702      	b.n	8000db4 <__aeabi_ddiv+0x254>
 8000fae:	19a6      	adds	r6, r4, r6
 8000fb0:	1e6a      	subs	r2, r5, #1
 8000fb2:	42a6      	cmp	r6, r4
 8000fb4:	d200      	bcs.n	8000fb8 <__aeabi_ddiv+0x458>
 8000fb6:	e089      	b.n	80010cc <__aeabi_ddiv+0x56c>
 8000fb8:	4286      	cmp	r6, r0
 8000fba:	d200      	bcs.n	8000fbe <__aeabi_ddiv+0x45e>
 8000fbc:	e09f      	b.n	80010fe <__aeabi_ddiv+0x59e>
 8000fbe:	d100      	bne.n	8000fc2 <__aeabi_ddiv+0x462>
 8000fc0:	e0af      	b.n	8001122 <__aeabi_ddiv+0x5c2>
 8000fc2:	0015      	movs	r5, r2
 8000fc4:	e6f4      	b.n	8000db0 <__aeabi_ddiv+0x250>
 8000fc6:	42a9      	cmp	r1, r5
 8000fc8:	d900      	bls.n	8000fcc <__aeabi_ddiv+0x46c>
 8000fca:	e63c      	b.n	8000c46 <__aeabi_ddiv+0xe6>
 8000fcc:	4643      	mov	r3, r8
 8000fce:	07de      	lsls	r6, r3, #31
 8000fd0:	0858      	lsrs	r0, r3, #1
 8000fd2:	086b      	lsrs	r3, r5, #1
 8000fd4:	431e      	orrs	r6, r3
 8000fd6:	07ed      	lsls	r5, r5, #31
 8000fd8:	e63c      	b.n	8000c54 <__aeabi_ddiv+0xf4>
 8000fda:	f001 f8a9 	bl	8002130 <__clzsi2>
 8000fde:	0001      	movs	r1, r0
 8000fe0:	0002      	movs	r2, r0
 8000fe2:	3115      	adds	r1, #21
 8000fe4:	3220      	adds	r2, #32
 8000fe6:	291c      	cmp	r1, #28
 8000fe8:	dc00      	bgt.n	8000fec <__aeabi_ddiv+0x48c>
 8000fea:	e72c      	b.n	8000e46 <__aeabi_ddiv+0x2e6>
 8000fec:	464b      	mov	r3, r9
 8000fee:	3808      	subs	r0, #8
 8000ff0:	4083      	lsls	r3, r0
 8000ff2:	2500      	movs	r5, #0
 8000ff4:	4698      	mov	r8, r3
 8000ff6:	e732      	b.n	8000e5e <__aeabi_ddiv+0x2fe>
 8000ff8:	f001 f89a 	bl	8002130 <__clzsi2>
 8000ffc:	0003      	movs	r3, r0
 8000ffe:	001a      	movs	r2, r3
 8001000:	3215      	adds	r2, #21
 8001002:	3020      	adds	r0, #32
 8001004:	2a1c      	cmp	r2, #28
 8001006:	dc00      	bgt.n	800100a <__aeabi_ddiv+0x4aa>
 8001008:	e6ff      	b.n	8000e0a <__aeabi_ddiv+0x2aa>
 800100a:	4654      	mov	r4, sl
 800100c:	3b08      	subs	r3, #8
 800100e:	2100      	movs	r1, #0
 8001010:	409c      	lsls	r4, r3
 8001012:	e705      	b.n	8000e20 <__aeabi_ddiv+0x2c0>
 8001014:	1936      	adds	r6, r6, r4
 8001016:	3b01      	subs	r3, #1
 8001018:	42b4      	cmp	r4, r6
 800101a:	d900      	bls.n	800101e <__aeabi_ddiv+0x4be>
 800101c:	e6a6      	b.n	8000d6c <__aeabi_ddiv+0x20c>
 800101e:	42b2      	cmp	r2, r6
 8001020:	d800      	bhi.n	8001024 <__aeabi_ddiv+0x4c4>
 8001022:	e6a3      	b.n	8000d6c <__aeabi_ddiv+0x20c>
 8001024:	1e83      	subs	r3, r0, #2
 8001026:	1936      	adds	r6, r6, r4
 8001028:	e6a0      	b.n	8000d6c <__aeabi_ddiv+0x20c>
 800102a:	1909      	adds	r1, r1, r4
 800102c:	3d01      	subs	r5, #1
 800102e:	428c      	cmp	r4, r1
 8001030:	d900      	bls.n	8001034 <__aeabi_ddiv+0x4d4>
 8001032:	e68d      	b.n	8000d50 <__aeabi_ddiv+0x1f0>
 8001034:	428a      	cmp	r2, r1
 8001036:	d800      	bhi.n	800103a <__aeabi_ddiv+0x4da>
 8001038:	e68a      	b.n	8000d50 <__aeabi_ddiv+0x1f0>
 800103a:	1e85      	subs	r5, r0, #2
 800103c:	1909      	adds	r1, r1, r4
 800103e:	e687      	b.n	8000d50 <__aeabi_ddiv+0x1f0>
 8001040:	220f      	movs	r2, #15
 8001042:	402a      	ands	r2, r5
 8001044:	2a04      	cmp	r2, #4
 8001046:	d100      	bne.n	800104a <__aeabi_ddiv+0x4ea>
 8001048:	e6bc      	b.n	8000dc4 <__aeabi_ddiv+0x264>
 800104a:	1d29      	adds	r1, r5, #4
 800104c:	42a9      	cmp	r1, r5
 800104e:	41ad      	sbcs	r5, r5
 8001050:	426d      	negs	r5, r5
 8001052:	08c9      	lsrs	r1, r1, #3
 8001054:	44a8      	add	r8, r5
 8001056:	e6b6      	b.n	8000dc6 <__aeabi_ddiv+0x266>
 8001058:	42af      	cmp	r7, r5
 800105a:	d900      	bls.n	800105e <__aeabi_ddiv+0x4fe>
 800105c:	e662      	b.n	8000d24 <__aeabi_ddiv+0x1c4>
 800105e:	4281      	cmp	r1, r0
 8001060:	d804      	bhi.n	800106c <__aeabi_ddiv+0x50c>
 8001062:	d000      	beq.n	8001066 <__aeabi_ddiv+0x506>
 8001064:	e65e      	b.n	8000d24 <__aeabi_ddiv+0x1c4>
 8001066:	42ae      	cmp	r6, r5
 8001068:	d800      	bhi.n	800106c <__aeabi_ddiv+0x50c>
 800106a:	e65b      	b.n	8000d24 <__aeabi_ddiv+0x1c4>
 800106c:	2302      	movs	r3, #2
 800106e:	425b      	negs	r3, r3
 8001070:	469c      	mov	ip, r3
 8001072:	9b00      	ldr	r3, [sp, #0]
 8001074:	44e0      	add	r8, ip
 8001076:	469c      	mov	ip, r3
 8001078:	4465      	add	r5, ip
 800107a:	429d      	cmp	r5, r3
 800107c:	419b      	sbcs	r3, r3
 800107e:	425b      	negs	r3, r3
 8001080:	191b      	adds	r3, r3, r4
 8001082:	18c0      	adds	r0, r0, r3
 8001084:	e64f      	b.n	8000d26 <__aeabi_ddiv+0x1c6>
 8001086:	42b2      	cmp	r2, r6
 8001088:	d800      	bhi.n	800108c <__aeabi_ddiv+0x52c>
 800108a:	e612      	b.n	8000cb2 <__aeabi_ddiv+0x152>
 800108c:	1e83      	subs	r3, r0, #2
 800108e:	1936      	adds	r6, r6, r4
 8001090:	e60f      	b.n	8000cb2 <__aeabi_ddiv+0x152>
 8001092:	428a      	cmp	r2, r1
 8001094:	d800      	bhi.n	8001098 <__aeabi_ddiv+0x538>
 8001096:	e5fa      	b.n	8000c8e <__aeabi_ddiv+0x12e>
 8001098:	1e83      	subs	r3, r0, #2
 800109a:	4698      	mov	r8, r3
 800109c:	1909      	adds	r1, r1, r4
 800109e:	e5f6      	b.n	8000c8e <__aeabi_ddiv+0x12e>
 80010a0:	4b24      	ldr	r3, [pc, #144]	; (8001134 <__aeabi_ddiv+0x5d4>)
 80010a2:	0028      	movs	r0, r5
 80010a4:	445b      	add	r3, fp
 80010a6:	4641      	mov	r1, r8
 80010a8:	409d      	lsls	r5, r3
 80010aa:	4099      	lsls	r1, r3
 80010ac:	40d0      	lsrs	r0, r2
 80010ae:	1e6b      	subs	r3, r5, #1
 80010b0:	419d      	sbcs	r5, r3
 80010b2:	4643      	mov	r3, r8
 80010b4:	4301      	orrs	r1, r0
 80010b6:	4329      	orrs	r1, r5
 80010b8:	40d3      	lsrs	r3, r2
 80010ba:	074a      	lsls	r2, r1, #29
 80010bc:	d100      	bne.n	80010c0 <__aeabi_ddiv+0x560>
 80010be:	e755      	b.n	8000f6c <__aeabi_ddiv+0x40c>
 80010c0:	220f      	movs	r2, #15
 80010c2:	400a      	ands	r2, r1
 80010c4:	2a04      	cmp	r2, #4
 80010c6:	d000      	beq.n	80010ca <__aeabi_ddiv+0x56a>
 80010c8:	e74a      	b.n	8000f60 <__aeabi_ddiv+0x400>
 80010ca:	e74f      	b.n	8000f6c <__aeabi_ddiv+0x40c>
 80010cc:	0015      	movs	r5, r2
 80010ce:	4286      	cmp	r6, r0
 80010d0:	d000      	beq.n	80010d4 <__aeabi_ddiv+0x574>
 80010d2:	e66d      	b.n	8000db0 <__aeabi_ddiv+0x250>
 80010d4:	9a00      	ldr	r2, [sp, #0]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d000      	beq.n	80010dc <__aeabi_ddiv+0x57c>
 80010da:	e669      	b.n	8000db0 <__aeabi_ddiv+0x250>
 80010dc:	e66a      	b.n	8000db4 <__aeabi_ddiv+0x254>
 80010de:	4b16      	ldr	r3, [pc, #88]	; (8001138 <__aeabi_ddiv+0x5d8>)
 80010e0:	445b      	add	r3, fp
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	dc00      	bgt.n	80010e8 <__aeabi_ddiv+0x588>
 80010e6:	e713      	b.n	8000f10 <__aeabi_ddiv+0x3b0>
 80010e8:	2501      	movs	r5, #1
 80010ea:	2100      	movs	r1, #0
 80010ec:	44a8      	add	r8, r5
 80010ee:	e66a      	b.n	8000dc6 <__aeabi_ddiv+0x266>
 80010f0:	075d      	lsls	r5, r3, #29
 80010f2:	025b      	lsls	r3, r3, #9
 80010f4:	0b1a      	lsrs	r2, r3, #12
 80010f6:	08c9      	lsrs	r1, r1, #3
 80010f8:	2300      	movs	r3, #0
 80010fa:	430d      	orrs	r5, r1
 80010fc:	e587      	b.n	8000c0e <__aeabi_ddiv+0xae>
 80010fe:	9900      	ldr	r1, [sp, #0]
 8001100:	3d02      	subs	r5, #2
 8001102:	004a      	lsls	r2, r1, #1
 8001104:	428a      	cmp	r2, r1
 8001106:	41bf      	sbcs	r7, r7
 8001108:	427f      	negs	r7, r7
 800110a:	193f      	adds	r7, r7, r4
 800110c:	19f6      	adds	r6, r6, r7
 800110e:	9200      	str	r2, [sp, #0]
 8001110:	e7dd      	b.n	80010ce <__aeabi_ddiv+0x56e>
 8001112:	2280      	movs	r2, #128	; 0x80
 8001114:	4643      	mov	r3, r8
 8001116:	0312      	lsls	r2, r2, #12
 8001118:	431a      	orrs	r2, r3
 800111a:	0312      	lsls	r2, r2, #12
 800111c:	4b03      	ldr	r3, [pc, #12]	; (800112c <__aeabi_ddiv+0x5cc>)
 800111e:	0b12      	lsrs	r2, r2, #12
 8001120:	e575      	b.n	8000c0e <__aeabi_ddiv+0xae>
 8001122:	9900      	ldr	r1, [sp, #0]
 8001124:	4299      	cmp	r1, r3
 8001126:	d3ea      	bcc.n	80010fe <__aeabi_ddiv+0x59e>
 8001128:	0015      	movs	r5, r2
 800112a:	e7d3      	b.n	80010d4 <__aeabi_ddiv+0x574>
 800112c:	000007ff 	.word	0x000007ff
 8001130:	0000043e 	.word	0x0000043e
 8001134:	0000041e 	.word	0x0000041e
 8001138:	000003ff 	.word	0x000003ff

0800113c <__eqdf2>:
 800113c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800113e:	464e      	mov	r6, r9
 8001140:	4645      	mov	r5, r8
 8001142:	46de      	mov	lr, fp
 8001144:	4657      	mov	r7, sl
 8001146:	4690      	mov	r8, r2
 8001148:	b5e0      	push	{r5, r6, r7, lr}
 800114a:	0017      	movs	r7, r2
 800114c:	031a      	lsls	r2, r3, #12
 800114e:	0b12      	lsrs	r2, r2, #12
 8001150:	0005      	movs	r5, r0
 8001152:	4684      	mov	ip, r0
 8001154:	4819      	ldr	r0, [pc, #100]	; (80011bc <__eqdf2+0x80>)
 8001156:	030e      	lsls	r6, r1, #12
 8001158:	004c      	lsls	r4, r1, #1
 800115a:	4691      	mov	r9, r2
 800115c:	005a      	lsls	r2, r3, #1
 800115e:	0fdb      	lsrs	r3, r3, #31
 8001160:	469b      	mov	fp, r3
 8001162:	0b36      	lsrs	r6, r6, #12
 8001164:	0d64      	lsrs	r4, r4, #21
 8001166:	0fc9      	lsrs	r1, r1, #31
 8001168:	0d52      	lsrs	r2, r2, #21
 800116a:	4284      	cmp	r4, r0
 800116c:	d019      	beq.n	80011a2 <__eqdf2+0x66>
 800116e:	4282      	cmp	r2, r0
 8001170:	d010      	beq.n	8001194 <__eqdf2+0x58>
 8001172:	2001      	movs	r0, #1
 8001174:	4294      	cmp	r4, r2
 8001176:	d10e      	bne.n	8001196 <__eqdf2+0x5a>
 8001178:	454e      	cmp	r6, r9
 800117a:	d10c      	bne.n	8001196 <__eqdf2+0x5a>
 800117c:	2001      	movs	r0, #1
 800117e:	45c4      	cmp	ip, r8
 8001180:	d109      	bne.n	8001196 <__eqdf2+0x5a>
 8001182:	4559      	cmp	r1, fp
 8001184:	d017      	beq.n	80011b6 <__eqdf2+0x7a>
 8001186:	2c00      	cmp	r4, #0
 8001188:	d105      	bne.n	8001196 <__eqdf2+0x5a>
 800118a:	0030      	movs	r0, r6
 800118c:	4328      	orrs	r0, r5
 800118e:	1e43      	subs	r3, r0, #1
 8001190:	4198      	sbcs	r0, r3
 8001192:	e000      	b.n	8001196 <__eqdf2+0x5a>
 8001194:	2001      	movs	r0, #1
 8001196:	bcf0      	pop	{r4, r5, r6, r7}
 8001198:	46bb      	mov	fp, r7
 800119a:	46b2      	mov	sl, r6
 800119c:	46a9      	mov	r9, r5
 800119e:	46a0      	mov	r8, r4
 80011a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011a2:	0033      	movs	r3, r6
 80011a4:	2001      	movs	r0, #1
 80011a6:	432b      	orrs	r3, r5
 80011a8:	d1f5      	bne.n	8001196 <__eqdf2+0x5a>
 80011aa:	42a2      	cmp	r2, r4
 80011ac:	d1f3      	bne.n	8001196 <__eqdf2+0x5a>
 80011ae:	464b      	mov	r3, r9
 80011b0:	433b      	orrs	r3, r7
 80011b2:	d1f0      	bne.n	8001196 <__eqdf2+0x5a>
 80011b4:	e7e2      	b.n	800117c <__eqdf2+0x40>
 80011b6:	2000      	movs	r0, #0
 80011b8:	e7ed      	b.n	8001196 <__eqdf2+0x5a>
 80011ba:	46c0      	nop			; (mov r8, r8)
 80011bc:	000007ff 	.word	0x000007ff

080011c0 <__gedf2>:
 80011c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011c2:	4647      	mov	r7, r8
 80011c4:	46ce      	mov	lr, r9
 80011c6:	0004      	movs	r4, r0
 80011c8:	0018      	movs	r0, r3
 80011ca:	0016      	movs	r6, r2
 80011cc:	031b      	lsls	r3, r3, #12
 80011ce:	0b1b      	lsrs	r3, r3, #12
 80011d0:	4d2d      	ldr	r5, [pc, #180]	; (8001288 <__gedf2+0xc8>)
 80011d2:	004a      	lsls	r2, r1, #1
 80011d4:	4699      	mov	r9, r3
 80011d6:	b580      	push	{r7, lr}
 80011d8:	0043      	lsls	r3, r0, #1
 80011da:	030f      	lsls	r7, r1, #12
 80011dc:	46a4      	mov	ip, r4
 80011de:	46b0      	mov	r8, r6
 80011e0:	0b3f      	lsrs	r7, r7, #12
 80011e2:	0d52      	lsrs	r2, r2, #21
 80011e4:	0fc9      	lsrs	r1, r1, #31
 80011e6:	0d5b      	lsrs	r3, r3, #21
 80011e8:	0fc0      	lsrs	r0, r0, #31
 80011ea:	42aa      	cmp	r2, r5
 80011ec:	d021      	beq.n	8001232 <__gedf2+0x72>
 80011ee:	42ab      	cmp	r3, r5
 80011f0:	d013      	beq.n	800121a <__gedf2+0x5a>
 80011f2:	2a00      	cmp	r2, #0
 80011f4:	d122      	bne.n	800123c <__gedf2+0x7c>
 80011f6:	433c      	orrs	r4, r7
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d102      	bne.n	8001202 <__gedf2+0x42>
 80011fc:	464d      	mov	r5, r9
 80011fe:	432e      	orrs	r6, r5
 8001200:	d022      	beq.n	8001248 <__gedf2+0x88>
 8001202:	2c00      	cmp	r4, #0
 8001204:	d010      	beq.n	8001228 <__gedf2+0x68>
 8001206:	4281      	cmp	r1, r0
 8001208:	d022      	beq.n	8001250 <__gedf2+0x90>
 800120a:	2002      	movs	r0, #2
 800120c:	3901      	subs	r1, #1
 800120e:	4008      	ands	r0, r1
 8001210:	3801      	subs	r0, #1
 8001212:	bcc0      	pop	{r6, r7}
 8001214:	46b9      	mov	r9, r7
 8001216:	46b0      	mov	r8, r6
 8001218:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800121a:	464d      	mov	r5, r9
 800121c:	432e      	orrs	r6, r5
 800121e:	d129      	bne.n	8001274 <__gedf2+0xb4>
 8001220:	2a00      	cmp	r2, #0
 8001222:	d1f0      	bne.n	8001206 <__gedf2+0x46>
 8001224:	433c      	orrs	r4, r7
 8001226:	d1ee      	bne.n	8001206 <__gedf2+0x46>
 8001228:	2800      	cmp	r0, #0
 800122a:	d1f2      	bne.n	8001212 <__gedf2+0x52>
 800122c:	2001      	movs	r0, #1
 800122e:	4240      	negs	r0, r0
 8001230:	e7ef      	b.n	8001212 <__gedf2+0x52>
 8001232:	003d      	movs	r5, r7
 8001234:	4325      	orrs	r5, r4
 8001236:	d11d      	bne.n	8001274 <__gedf2+0xb4>
 8001238:	4293      	cmp	r3, r2
 800123a:	d0ee      	beq.n	800121a <__gedf2+0x5a>
 800123c:	2b00      	cmp	r3, #0
 800123e:	d1e2      	bne.n	8001206 <__gedf2+0x46>
 8001240:	464c      	mov	r4, r9
 8001242:	4326      	orrs	r6, r4
 8001244:	d1df      	bne.n	8001206 <__gedf2+0x46>
 8001246:	e7e0      	b.n	800120a <__gedf2+0x4a>
 8001248:	2000      	movs	r0, #0
 800124a:	2c00      	cmp	r4, #0
 800124c:	d0e1      	beq.n	8001212 <__gedf2+0x52>
 800124e:	e7dc      	b.n	800120a <__gedf2+0x4a>
 8001250:	429a      	cmp	r2, r3
 8001252:	dc0a      	bgt.n	800126a <__gedf2+0xaa>
 8001254:	dbe8      	blt.n	8001228 <__gedf2+0x68>
 8001256:	454f      	cmp	r7, r9
 8001258:	d8d7      	bhi.n	800120a <__gedf2+0x4a>
 800125a:	d00e      	beq.n	800127a <__gedf2+0xba>
 800125c:	2000      	movs	r0, #0
 800125e:	454f      	cmp	r7, r9
 8001260:	d2d7      	bcs.n	8001212 <__gedf2+0x52>
 8001262:	2900      	cmp	r1, #0
 8001264:	d0e2      	beq.n	800122c <__gedf2+0x6c>
 8001266:	0008      	movs	r0, r1
 8001268:	e7d3      	b.n	8001212 <__gedf2+0x52>
 800126a:	4243      	negs	r3, r0
 800126c:	4158      	adcs	r0, r3
 800126e:	0040      	lsls	r0, r0, #1
 8001270:	3801      	subs	r0, #1
 8001272:	e7ce      	b.n	8001212 <__gedf2+0x52>
 8001274:	2002      	movs	r0, #2
 8001276:	4240      	negs	r0, r0
 8001278:	e7cb      	b.n	8001212 <__gedf2+0x52>
 800127a:	45c4      	cmp	ip, r8
 800127c:	d8c5      	bhi.n	800120a <__gedf2+0x4a>
 800127e:	2000      	movs	r0, #0
 8001280:	45c4      	cmp	ip, r8
 8001282:	d2c6      	bcs.n	8001212 <__gedf2+0x52>
 8001284:	e7ed      	b.n	8001262 <__gedf2+0xa2>
 8001286:	46c0      	nop			; (mov r8, r8)
 8001288:	000007ff 	.word	0x000007ff

0800128c <__ledf2>:
 800128c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800128e:	4647      	mov	r7, r8
 8001290:	46ce      	mov	lr, r9
 8001292:	0004      	movs	r4, r0
 8001294:	0018      	movs	r0, r3
 8001296:	0016      	movs	r6, r2
 8001298:	031b      	lsls	r3, r3, #12
 800129a:	0b1b      	lsrs	r3, r3, #12
 800129c:	4d2c      	ldr	r5, [pc, #176]	; (8001350 <__ledf2+0xc4>)
 800129e:	004a      	lsls	r2, r1, #1
 80012a0:	4699      	mov	r9, r3
 80012a2:	b580      	push	{r7, lr}
 80012a4:	0043      	lsls	r3, r0, #1
 80012a6:	030f      	lsls	r7, r1, #12
 80012a8:	46a4      	mov	ip, r4
 80012aa:	46b0      	mov	r8, r6
 80012ac:	0b3f      	lsrs	r7, r7, #12
 80012ae:	0d52      	lsrs	r2, r2, #21
 80012b0:	0fc9      	lsrs	r1, r1, #31
 80012b2:	0d5b      	lsrs	r3, r3, #21
 80012b4:	0fc0      	lsrs	r0, r0, #31
 80012b6:	42aa      	cmp	r2, r5
 80012b8:	d00d      	beq.n	80012d6 <__ledf2+0x4a>
 80012ba:	42ab      	cmp	r3, r5
 80012bc:	d010      	beq.n	80012e0 <__ledf2+0x54>
 80012be:	2a00      	cmp	r2, #0
 80012c0:	d127      	bne.n	8001312 <__ledf2+0x86>
 80012c2:	433c      	orrs	r4, r7
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d111      	bne.n	80012ec <__ledf2+0x60>
 80012c8:	464d      	mov	r5, r9
 80012ca:	432e      	orrs	r6, r5
 80012cc:	d10e      	bne.n	80012ec <__ledf2+0x60>
 80012ce:	2000      	movs	r0, #0
 80012d0:	2c00      	cmp	r4, #0
 80012d2:	d015      	beq.n	8001300 <__ledf2+0x74>
 80012d4:	e00e      	b.n	80012f4 <__ledf2+0x68>
 80012d6:	003d      	movs	r5, r7
 80012d8:	4325      	orrs	r5, r4
 80012da:	d110      	bne.n	80012fe <__ledf2+0x72>
 80012dc:	4293      	cmp	r3, r2
 80012de:	d118      	bne.n	8001312 <__ledf2+0x86>
 80012e0:	464d      	mov	r5, r9
 80012e2:	432e      	orrs	r6, r5
 80012e4:	d10b      	bne.n	80012fe <__ledf2+0x72>
 80012e6:	2a00      	cmp	r2, #0
 80012e8:	d102      	bne.n	80012f0 <__ledf2+0x64>
 80012ea:	433c      	orrs	r4, r7
 80012ec:	2c00      	cmp	r4, #0
 80012ee:	d00b      	beq.n	8001308 <__ledf2+0x7c>
 80012f0:	4281      	cmp	r1, r0
 80012f2:	d014      	beq.n	800131e <__ledf2+0x92>
 80012f4:	2002      	movs	r0, #2
 80012f6:	3901      	subs	r1, #1
 80012f8:	4008      	ands	r0, r1
 80012fa:	3801      	subs	r0, #1
 80012fc:	e000      	b.n	8001300 <__ledf2+0x74>
 80012fe:	2002      	movs	r0, #2
 8001300:	bcc0      	pop	{r6, r7}
 8001302:	46b9      	mov	r9, r7
 8001304:	46b0      	mov	r8, r6
 8001306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001308:	2800      	cmp	r0, #0
 800130a:	d1f9      	bne.n	8001300 <__ledf2+0x74>
 800130c:	2001      	movs	r0, #1
 800130e:	4240      	negs	r0, r0
 8001310:	e7f6      	b.n	8001300 <__ledf2+0x74>
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1ec      	bne.n	80012f0 <__ledf2+0x64>
 8001316:	464c      	mov	r4, r9
 8001318:	4326      	orrs	r6, r4
 800131a:	d1e9      	bne.n	80012f0 <__ledf2+0x64>
 800131c:	e7ea      	b.n	80012f4 <__ledf2+0x68>
 800131e:	429a      	cmp	r2, r3
 8001320:	dd04      	ble.n	800132c <__ledf2+0xa0>
 8001322:	4243      	negs	r3, r0
 8001324:	4158      	adcs	r0, r3
 8001326:	0040      	lsls	r0, r0, #1
 8001328:	3801      	subs	r0, #1
 800132a:	e7e9      	b.n	8001300 <__ledf2+0x74>
 800132c:	429a      	cmp	r2, r3
 800132e:	dbeb      	blt.n	8001308 <__ledf2+0x7c>
 8001330:	454f      	cmp	r7, r9
 8001332:	d8df      	bhi.n	80012f4 <__ledf2+0x68>
 8001334:	d006      	beq.n	8001344 <__ledf2+0xb8>
 8001336:	2000      	movs	r0, #0
 8001338:	454f      	cmp	r7, r9
 800133a:	d2e1      	bcs.n	8001300 <__ledf2+0x74>
 800133c:	2900      	cmp	r1, #0
 800133e:	d0e5      	beq.n	800130c <__ledf2+0x80>
 8001340:	0008      	movs	r0, r1
 8001342:	e7dd      	b.n	8001300 <__ledf2+0x74>
 8001344:	45c4      	cmp	ip, r8
 8001346:	d8d5      	bhi.n	80012f4 <__ledf2+0x68>
 8001348:	2000      	movs	r0, #0
 800134a:	45c4      	cmp	ip, r8
 800134c:	d2d8      	bcs.n	8001300 <__ledf2+0x74>
 800134e:	e7f5      	b.n	800133c <__ledf2+0xb0>
 8001350:	000007ff 	.word	0x000007ff

08001354 <__aeabi_dmul>:
 8001354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001356:	4645      	mov	r5, r8
 8001358:	46de      	mov	lr, fp
 800135a:	4657      	mov	r7, sl
 800135c:	464e      	mov	r6, r9
 800135e:	b5e0      	push	{r5, r6, r7, lr}
 8001360:	001f      	movs	r7, r3
 8001362:	030b      	lsls	r3, r1, #12
 8001364:	0b1b      	lsrs	r3, r3, #12
 8001366:	469b      	mov	fp, r3
 8001368:	004d      	lsls	r5, r1, #1
 800136a:	0fcb      	lsrs	r3, r1, #31
 800136c:	0004      	movs	r4, r0
 800136e:	4691      	mov	r9, r2
 8001370:	4698      	mov	r8, r3
 8001372:	b087      	sub	sp, #28
 8001374:	0d6d      	lsrs	r5, r5, #21
 8001376:	d100      	bne.n	800137a <__aeabi_dmul+0x26>
 8001378:	e1cd      	b.n	8001716 <__aeabi_dmul+0x3c2>
 800137a:	4bce      	ldr	r3, [pc, #824]	; (80016b4 <__aeabi_dmul+0x360>)
 800137c:	429d      	cmp	r5, r3
 800137e:	d100      	bne.n	8001382 <__aeabi_dmul+0x2e>
 8001380:	e1e9      	b.n	8001756 <__aeabi_dmul+0x402>
 8001382:	465a      	mov	r2, fp
 8001384:	0f43      	lsrs	r3, r0, #29
 8001386:	00d2      	lsls	r2, r2, #3
 8001388:	4313      	orrs	r3, r2
 800138a:	2280      	movs	r2, #128	; 0x80
 800138c:	0412      	lsls	r2, r2, #16
 800138e:	431a      	orrs	r2, r3
 8001390:	00c3      	lsls	r3, r0, #3
 8001392:	469a      	mov	sl, r3
 8001394:	4bc8      	ldr	r3, [pc, #800]	; (80016b8 <__aeabi_dmul+0x364>)
 8001396:	4693      	mov	fp, r2
 8001398:	469c      	mov	ip, r3
 800139a:	2300      	movs	r3, #0
 800139c:	2600      	movs	r6, #0
 800139e:	4465      	add	r5, ip
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	033c      	lsls	r4, r7, #12
 80013a4:	007b      	lsls	r3, r7, #1
 80013a6:	4648      	mov	r0, r9
 80013a8:	0b24      	lsrs	r4, r4, #12
 80013aa:	0d5b      	lsrs	r3, r3, #21
 80013ac:	0fff      	lsrs	r7, r7, #31
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d100      	bne.n	80013b4 <__aeabi_dmul+0x60>
 80013b2:	e189      	b.n	80016c8 <__aeabi_dmul+0x374>
 80013b4:	4abf      	ldr	r2, [pc, #764]	; (80016b4 <__aeabi_dmul+0x360>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d019      	beq.n	80013ee <__aeabi_dmul+0x9a>
 80013ba:	0f42      	lsrs	r2, r0, #29
 80013bc:	00e4      	lsls	r4, r4, #3
 80013be:	4322      	orrs	r2, r4
 80013c0:	2480      	movs	r4, #128	; 0x80
 80013c2:	0424      	lsls	r4, r4, #16
 80013c4:	4314      	orrs	r4, r2
 80013c6:	4abc      	ldr	r2, [pc, #752]	; (80016b8 <__aeabi_dmul+0x364>)
 80013c8:	2100      	movs	r1, #0
 80013ca:	4694      	mov	ip, r2
 80013cc:	4642      	mov	r2, r8
 80013ce:	4463      	add	r3, ip
 80013d0:	195b      	adds	r3, r3, r5
 80013d2:	9301      	str	r3, [sp, #4]
 80013d4:	9b01      	ldr	r3, [sp, #4]
 80013d6:	407a      	eors	r2, r7
 80013d8:	3301      	adds	r3, #1
 80013da:	00c0      	lsls	r0, r0, #3
 80013dc:	b2d2      	uxtb	r2, r2
 80013de:	9302      	str	r3, [sp, #8]
 80013e0:	2e0a      	cmp	r6, #10
 80013e2:	dd1c      	ble.n	800141e <__aeabi_dmul+0xca>
 80013e4:	003a      	movs	r2, r7
 80013e6:	2e0b      	cmp	r6, #11
 80013e8:	d05e      	beq.n	80014a8 <__aeabi_dmul+0x154>
 80013ea:	4647      	mov	r7, r8
 80013ec:	e056      	b.n	800149c <__aeabi_dmul+0x148>
 80013ee:	4649      	mov	r1, r9
 80013f0:	4bb0      	ldr	r3, [pc, #704]	; (80016b4 <__aeabi_dmul+0x360>)
 80013f2:	4321      	orrs	r1, r4
 80013f4:	18eb      	adds	r3, r5, r3
 80013f6:	9301      	str	r3, [sp, #4]
 80013f8:	2900      	cmp	r1, #0
 80013fa:	d12a      	bne.n	8001452 <__aeabi_dmul+0xfe>
 80013fc:	2080      	movs	r0, #128	; 0x80
 80013fe:	2202      	movs	r2, #2
 8001400:	0100      	lsls	r0, r0, #4
 8001402:	002b      	movs	r3, r5
 8001404:	4684      	mov	ip, r0
 8001406:	4316      	orrs	r6, r2
 8001408:	4642      	mov	r2, r8
 800140a:	4463      	add	r3, ip
 800140c:	407a      	eors	r2, r7
 800140e:	b2d2      	uxtb	r2, r2
 8001410:	9302      	str	r3, [sp, #8]
 8001412:	2e0a      	cmp	r6, #10
 8001414:	dd00      	ble.n	8001418 <__aeabi_dmul+0xc4>
 8001416:	e231      	b.n	800187c <__aeabi_dmul+0x528>
 8001418:	2000      	movs	r0, #0
 800141a:	2400      	movs	r4, #0
 800141c:	2102      	movs	r1, #2
 800141e:	2e02      	cmp	r6, #2
 8001420:	dc26      	bgt.n	8001470 <__aeabi_dmul+0x11c>
 8001422:	3e01      	subs	r6, #1
 8001424:	2e01      	cmp	r6, #1
 8001426:	d852      	bhi.n	80014ce <__aeabi_dmul+0x17a>
 8001428:	2902      	cmp	r1, #2
 800142a:	d04c      	beq.n	80014c6 <__aeabi_dmul+0x172>
 800142c:	2901      	cmp	r1, #1
 800142e:	d000      	beq.n	8001432 <__aeabi_dmul+0xde>
 8001430:	e118      	b.n	8001664 <__aeabi_dmul+0x310>
 8001432:	2300      	movs	r3, #0
 8001434:	2400      	movs	r4, #0
 8001436:	2500      	movs	r5, #0
 8001438:	051b      	lsls	r3, r3, #20
 800143a:	4323      	orrs	r3, r4
 800143c:	07d2      	lsls	r2, r2, #31
 800143e:	4313      	orrs	r3, r2
 8001440:	0028      	movs	r0, r5
 8001442:	0019      	movs	r1, r3
 8001444:	b007      	add	sp, #28
 8001446:	bcf0      	pop	{r4, r5, r6, r7}
 8001448:	46bb      	mov	fp, r7
 800144a:	46b2      	mov	sl, r6
 800144c:	46a9      	mov	r9, r5
 800144e:	46a0      	mov	r8, r4
 8001450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001452:	2180      	movs	r1, #128	; 0x80
 8001454:	2203      	movs	r2, #3
 8001456:	0109      	lsls	r1, r1, #4
 8001458:	002b      	movs	r3, r5
 800145a:	468c      	mov	ip, r1
 800145c:	4316      	orrs	r6, r2
 800145e:	4642      	mov	r2, r8
 8001460:	4463      	add	r3, ip
 8001462:	407a      	eors	r2, r7
 8001464:	b2d2      	uxtb	r2, r2
 8001466:	9302      	str	r3, [sp, #8]
 8001468:	2e0a      	cmp	r6, #10
 800146a:	dd00      	ble.n	800146e <__aeabi_dmul+0x11a>
 800146c:	e228      	b.n	80018c0 <__aeabi_dmul+0x56c>
 800146e:	2103      	movs	r1, #3
 8001470:	2501      	movs	r5, #1
 8001472:	40b5      	lsls	r5, r6
 8001474:	46ac      	mov	ip, r5
 8001476:	26a6      	movs	r6, #166	; 0xa6
 8001478:	4663      	mov	r3, ip
 800147a:	00f6      	lsls	r6, r6, #3
 800147c:	4035      	ands	r5, r6
 800147e:	4233      	tst	r3, r6
 8001480:	d10b      	bne.n	800149a <__aeabi_dmul+0x146>
 8001482:	2690      	movs	r6, #144	; 0x90
 8001484:	00b6      	lsls	r6, r6, #2
 8001486:	4233      	tst	r3, r6
 8001488:	d118      	bne.n	80014bc <__aeabi_dmul+0x168>
 800148a:	3eb9      	subs	r6, #185	; 0xb9
 800148c:	3eff      	subs	r6, #255	; 0xff
 800148e:	421e      	tst	r6, r3
 8001490:	d01d      	beq.n	80014ce <__aeabi_dmul+0x17a>
 8001492:	46a3      	mov	fp, r4
 8001494:	4682      	mov	sl, r0
 8001496:	9100      	str	r1, [sp, #0]
 8001498:	e000      	b.n	800149c <__aeabi_dmul+0x148>
 800149a:	0017      	movs	r7, r2
 800149c:	9900      	ldr	r1, [sp, #0]
 800149e:	003a      	movs	r2, r7
 80014a0:	2902      	cmp	r1, #2
 80014a2:	d010      	beq.n	80014c6 <__aeabi_dmul+0x172>
 80014a4:	465c      	mov	r4, fp
 80014a6:	4650      	mov	r0, sl
 80014a8:	2903      	cmp	r1, #3
 80014aa:	d1bf      	bne.n	800142c <__aeabi_dmul+0xd8>
 80014ac:	2380      	movs	r3, #128	; 0x80
 80014ae:	031b      	lsls	r3, r3, #12
 80014b0:	431c      	orrs	r4, r3
 80014b2:	0324      	lsls	r4, r4, #12
 80014b4:	0005      	movs	r5, r0
 80014b6:	4b7f      	ldr	r3, [pc, #508]	; (80016b4 <__aeabi_dmul+0x360>)
 80014b8:	0b24      	lsrs	r4, r4, #12
 80014ba:	e7bd      	b.n	8001438 <__aeabi_dmul+0xe4>
 80014bc:	2480      	movs	r4, #128	; 0x80
 80014be:	2200      	movs	r2, #0
 80014c0:	4b7c      	ldr	r3, [pc, #496]	; (80016b4 <__aeabi_dmul+0x360>)
 80014c2:	0324      	lsls	r4, r4, #12
 80014c4:	e7b8      	b.n	8001438 <__aeabi_dmul+0xe4>
 80014c6:	2400      	movs	r4, #0
 80014c8:	2500      	movs	r5, #0
 80014ca:	4b7a      	ldr	r3, [pc, #488]	; (80016b4 <__aeabi_dmul+0x360>)
 80014cc:	e7b4      	b.n	8001438 <__aeabi_dmul+0xe4>
 80014ce:	4653      	mov	r3, sl
 80014d0:	041e      	lsls	r6, r3, #16
 80014d2:	0c36      	lsrs	r6, r6, #16
 80014d4:	0c1f      	lsrs	r7, r3, #16
 80014d6:	0033      	movs	r3, r6
 80014d8:	0c01      	lsrs	r1, r0, #16
 80014da:	0400      	lsls	r0, r0, #16
 80014dc:	0c00      	lsrs	r0, r0, #16
 80014de:	4343      	muls	r3, r0
 80014e0:	4698      	mov	r8, r3
 80014e2:	0003      	movs	r3, r0
 80014e4:	437b      	muls	r3, r7
 80014e6:	4699      	mov	r9, r3
 80014e8:	0033      	movs	r3, r6
 80014ea:	434b      	muls	r3, r1
 80014ec:	469c      	mov	ip, r3
 80014ee:	4643      	mov	r3, r8
 80014f0:	000d      	movs	r5, r1
 80014f2:	0c1b      	lsrs	r3, r3, #16
 80014f4:	469a      	mov	sl, r3
 80014f6:	437d      	muls	r5, r7
 80014f8:	44cc      	add	ip, r9
 80014fa:	44d4      	add	ip, sl
 80014fc:	9500      	str	r5, [sp, #0]
 80014fe:	45e1      	cmp	r9, ip
 8001500:	d904      	bls.n	800150c <__aeabi_dmul+0x1b8>
 8001502:	2380      	movs	r3, #128	; 0x80
 8001504:	025b      	lsls	r3, r3, #9
 8001506:	4699      	mov	r9, r3
 8001508:	444d      	add	r5, r9
 800150a:	9500      	str	r5, [sp, #0]
 800150c:	4663      	mov	r3, ip
 800150e:	0c1b      	lsrs	r3, r3, #16
 8001510:	001d      	movs	r5, r3
 8001512:	4663      	mov	r3, ip
 8001514:	041b      	lsls	r3, r3, #16
 8001516:	469c      	mov	ip, r3
 8001518:	4643      	mov	r3, r8
 800151a:	041b      	lsls	r3, r3, #16
 800151c:	0c1b      	lsrs	r3, r3, #16
 800151e:	4698      	mov	r8, r3
 8001520:	4663      	mov	r3, ip
 8001522:	4443      	add	r3, r8
 8001524:	9303      	str	r3, [sp, #12]
 8001526:	0c23      	lsrs	r3, r4, #16
 8001528:	4698      	mov	r8, r3
 800152a:	0033      	movs	r3, r6
 800152c:	0424      	lsls	r4, r4, #16
 800152e:	0c24      	lsrs	r4, r4, #16
 8001530:	4363      	muls	r3, r4
 8001532:	469c      	mov	ip, r3
 8001534:	0023      	movs	r3, r4
 8001536:	437b      	muls	r3, r7
 8001538:	4699      	mov	r9, r3
 800153a:	4643      	mov	r3, r8
 800153c:	435e      	muls	r6, r3
 800153e:	435f      	muls	r7, r3
 8001540:	444e      	add	r6, r9
 8001542:	4663      	mov	r3, ip
 8001544:	46b2      	mov	sl, r6
 8001546:	0c1e      	lsrs	r6, r3, #16
 8001548:	4456      	add	r6, sl
 800154a:	45b1      	cmp	r9, r6
 800154c:	d903      	bls.n	8001556 <__aeabi_dmul+0x202>
 800154e:	2380      	movs	r3, #128	; 0x80
 8001550:	025b      	lsls	r3, r3, #9
 8001552:	4699      	mov	r9, r3
 8001554:	444f      	add	r7, r9
 8001556:	0c33      	lsrs	r3, r6, #16
 8001558:	4699      	mov	r9, r3
 800155a:	003b      	movs	r3, r7
 800155c:	444b      	add	r3, r9
 800155e:	9305      	str	r3, [sp, #20]
 8001560:	4663      	mov	r3, ip
 8001562:	46ac      	mov	ip, r5
 8001564:	041f      	lsls	r7, r3, #16
 8001566:	0c3f      	lsrs	r7, r7, #16
 8001568:	0436      	lsls	r6, r6, #16
 800156a:	19f6      	adds	r6, r6, r7
 800156c:	44b4      	add	ip, r6
 800156e:	4663      	mov	r3, ip
 8001570:	9304      	str	r3, [sp, #16]
 8001572:	465b      	mov	r3, fp
 8001574:	0c1b      	lsrs	r3, r3, #16
 8001576:	469c      	mov	ip, r3
 8001578:	465b      	mov	r3, fp
 800157a:	041f      	lsls	r7, r3, #16
 800157c:	0c3f      	lsrs	r7, r7, #16
 800157e:	003b      	movs	r3, r7
 8001580:	4343      	muls	r3, r0
 8001582:	4699      	mov	r9, r3
 8001584:	4663      	mov	r3, ip
 8001586:	4343      	muls	r3, r0
 8001588:	469a      	mov	sl, r3
 800158a:	464b      	mov	r3, r9
 800158c:	4660      	mov	r0, ip
 800158e:	0c1b      	lsrs	r3, r3, #16
 8001590:	469b      	mov	fp, r3
 8001592:	4348      	muls	r0, r1
 8001594:	4379      	muls	r1, r7
 8001596:	4451      	add	r1, sl
 8001598:	4459      	add	r1, fp
 800159a:	458a      	cmp	sl, r1
 800159c:	d903      	bls.n	80015a6 <__aeabi_dmul+0x252>
 800159e:	2380      	movs	r3, #128	; 0x80
 80015a0:	025b      	lsls	r3, r3, #9
 80015a2:	469a      	mov	sl, r3
 80015a4:	4450      	add	r0, sl
 80015a6:	0c0b      	lsrs	r3, r1, #16
 80015a8:	469a      	mov	sl, r3
 80015aa:	464b      	mov	r3, r9
 80015ac:	041b      	lsls	r3, r3, #16
 80015ae:	0c1b      	lsrs	r3, r3, #16
 80015b0:	4699      	mov	r9, r3
 80015b2:	003b      	movs	r3, r7
 80015b4:	4363      	muls	r3, r4
 80015b6:	0409      	lsls	r1, r1, #16
 80015b8:	4645      	mov	r5, r8
 80015ba:	4449      	add	r1, r9
 80015bc:	4699      	mov	r9, r3
 80015be:	4663      	mov	r3, ip
 80015c0:	435c      	muls	r4, r3
 80015c2:	436b      	muls	r3, r5
 80015c4:	469c      	mov	ip, r3
 80015c6:	464b      	mov	r3, r9
 80015c8:	0c1b      	lsrs	r3, r3, #16
 80015ca:	4698      	mov	r8, r3
 80015cc:	436f      	muls	r7, r5
 80015ce:	193f      	adds	r7, r7, r4
 80015d0:	4447      	add	r7, r8
 80015d2:	4450      	add	r0, sl
 80015d4:	42bc      	cmp	r4, r7
 80015d6:	d903      	bls.n	80015e0 <__aeabi_dmul+0x28c>
 80015d8:	2380      	movs	r3, #128	; 0x80
 80015da:	025b      	lsls	r3, r3, #9
 80015dc:	4698      	mov	r8, r3
 80015de:	44c4      	add	ip, r8
 80015e0:	9b04      	ldr	r3, [sp, #16]
 80015e2:	9d00      	ldr	r5, [sp, #0]
 80015e4:	4698      	mov	r8, r3
 80015e6:	4445      	add	r5, r8
 80015e8:	42b5      	cmp	r5, r6
 80015ea:	41b6      	sbcs	r6, r6
 80015ec:	4273      	negs	r3, r6
 80015ee:	4698      	mov	r8, r3
 80015f0:	464b      	mov	r3, r9
 80015f2:	041e      	lsls	r6, r3, #16
 80015f4:	9b05      	ldr	r3, [sp, #20]
 80015f6:	043c      	lsls	r4, r7, #16
 80015f8:	4699      	mov	r9, r3
 80015fa:	0c36      	lsrs	r6, r6, #16
 80015fc:	19a4      	adds	r4, r4, r6
 80015fe:	444c      	add	r4, r9
 8001600:	46a1      	mov	r9, r4
 8001602:	4683      	mov	fp, r0
 8001604:	186e      	adds	r6, r5, r1
 8001606:	44c1      	add	r9, r8
 8001608:	428e      	cmp	r6, r1
 800160a:	4189      	sbcs	r1, r1
 800160c:	44cb      	add	fp, r9
 800160e:	465d      	mov	r5, fp
 8001610:	4249      	negs	r1, r1
 8001612:	186d      	adds	r5, r5, r1
 8001614:	429c      	cmp	r4, r3
 8001616:	41a4      	sbcs	r4, r4
 8001618:	45c1      	cmp	r9, r8
 800161a:	419b      	sbcs	r3, r3
 800161c:	4583      	cmp	fp, r0
 800161e:	4180      	sbcs	r0, r0
 8001620:	428d      	cmp	r5, r1
 8001622:	4189      	sbcs	r1, r1
 8001624:	425b      	negs	r3, r3
 8001626:	4264      	negs	r4, r4
 8001628:	431c      	orrs	r4, r3
 800162a:	4240      	negs	r0, r0
 800162c:	9b03      	ldr	r3, [sp, #12]
 800162e:	4249      	negs	r1, r1
 8001630:	4301      	orrs	r1, r0
 8001632:	0270      	lsls	r0, r6, #9
 8001634:	0c3f      	lsrs	r7, r7, #16
 8001636:	4318      	orrs	r0, r3
 8001638:	19e4      	adds	r4, r4, r7
 800163a:	1e47      	subs	r7, r0, #1
 800163c:	41b8      	sbcs	r0, r7
 800163e:	1864      	adds	r4, r4, r1
 8001640:	4464      	add	r4, ip
 8001642:	0df6      	lsrs	r6, r6, #23
 8001644:	0261      	lsls	r1, r4, #9
 8001646:	4330      	orrs	r0, r6
 8001648:	0dec      	lsrs	r4, r5, #23
 800164a:	026e      	lsls	r6, r5, #9
 800164c:	430c      	orrs	r4, r1
 800164e:	4330      	orrs	r0, r6
 8001650:	01c9      	lsls	r1, r1, #7
 8001652:	d400      	bmi.n	8001656 <__aeabi_dmul+0x302>
 8001654:	e0f1      	b.n	800183a <__aeabi_dmul+0x4e6>
 8001656:	2101      	movs	r1, #1
 8001658:	0843      	lsrs	r3, r0, #1
 800165a:	4001      	ands	r1, r0
 800165c:	430b      	orrs	r3, r1
 800165e:	07e0      	lsls	r0, r4, #31
 8001660:	4318      	orrs	r0, r3
 8001662:	0864      	lsrs	r4, r4, #1
 8001664:	4915      	ldr	r1, [pc, #84]	; (80016bc <__aeabi_dmul+0x368>)
 8001666:	9b02      	ldr	r3, [sp, #8]
 8001668:	468c      	mov	ip, r1
 800166a:	4463      	add	r3, ip
 800166c:	2b00      	cmp	r3, #0
 800166e:	dc00      	bgt.n	8001672 <__aeabi_dmul+0x31e>
 8001670:	e097      	b.n	80017a2 <__aeabi_dmul+0x44e>
 8001672:	0741      	lsls	r1, r0, #29
 8001674:	d009      	beq.n	800168a <__aeabi_dmul+0x336>
 8001676:	210f      	movs	r1, #15
 8001678:	4001      	ands	r1, r0
 800167a:	2904      	cmp	r1, #4
 800167c:	d005      	beq.n	800168a <__aeabi_dmul+0x336>
 800167e:	1d01      	adds	r1, r0, #4
 8001680:	4281      	cmp	r1, r0
 8001682:	4180      	sbcs	r0, r0
 8001684:	4240      	negs	r0, r0
 8001686:	1824      	adds	r4, r4, r0
 8001688:	0008      	movs	r0, r1
 800168a:	01e1      	lsls	r1, r4, #7
 800168c:	d506      	bpl.n	800169c <__aeabi_dmul+0x348>
 800168e:	2180      	movs	r1, #128	; 0x80
 8001690:	00c9      	lsls	r1, r1, #3
 8001692:	468c      	mov	ip, r1
 8001694:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <__aeabi_dmul+0x36c>)
 8001696:	401c      	ands	r4, r3
 8001698:	9b02      	ldr	r3, [sp, #8]
 800169a:	4463      	add	r3, ip
 800169c:	4909      	ldr	r1, [pc, #36]	; (80016c4 <__aeabi_dmul+0x370>)
 800169e:	428b      	cmp	r3, r1
 80016a0:	dd00      	ble.n	80016a4 <__aeabi_dmul+0x350>
 80016a2:	e710      	b.n	80014c6 <__aeabi_dmul+0x172>
 80016a4:	0761      	lsls	r1, r4, #29
 80016a6:	08c5      	lsrs	r5, r0, #3
 80016a8:	0264      	lsls	r4, r4, #9
 80016aa:	055b      	lsls	r3, r3, #21
 80016ac:	430d      	orrs	r5, r1
 80016ae:	0b24      	lsrs	r4, r4, #12
 80016b0:	0d5b      	lsrs	r3, r3, #21
 80016b2:	e6c1      	b.n	8001438 <__aeabi_dmul+0xe4>
 80016b4:	000007ff 	.word	0x000007ff
 80016b8:	fffffc01 	.word	0xfffffc01
 80016bc:	000003ff 	.word	0x000003ff
 80016c0:	feffffff 	.word	0xfeffffff
 80016c4:	000007fe 	.word	0x000007fe
 80016c8:	464b      	mov	r3, r9
 80016ca:	4323      	orrs	r3, r4
 80016cc:	d059      	beq.n	8001782 <__aeabi_dmul+0x42e>
 80016ce:	2c00      	cmp	r4, #0
 80016d0:	d100      	bne.n	80016d4 <__aeabi_dmul+0x380>
 80016d2:	e0a3      	b.n	800181c <__aeabi_dmul+0x4c8>
 80016d4:	0020      	movs	r0, r4
 80016d6:	f000 fd2b 	bl	8002130 <__clzsi2>
 80016da:	0001      	movs	r1, r0
 80016dc:	0003      	movs	r3, r0
 80016de:	390b      	subs	r1, #11
 80016e0:	221d      	movs	r2, #29
 80016e2:	1a52      	subs	r2, r2, r1
 80016e4:	4649      	mov	r1, r9
 80016e6:	0018      	movs	r0, r3
 80016e8:	40d1      	lsrs	r1, r2
 80016ea:	464a      	mov	r2, r9
 80016ec:	3808      	subs	r0, #8
 80016ee:	4082      	lsls	r2, r0
 80016f0:	4084      	lsls	r4, r0
 80016f2:	0010      	movs	r0, r2
 80016f4:	430c      	orrs	r4, r1
 80016f6:	4a74      	ldr	r2, [pc, #464]	; (80018c8 <__aeabi_dmul+0x574>)
 80016f8:	1aeb      	subs	r3, r5, r3
 80016fa:	4694      	mov	ip, r2
 80016fc:	4642      	mov	r2, r8
 80016fe:	4463      	add	r3, ip
 8001700:	9301      	str	r3, [sp, #4]
 8001702:	9b01      	ldr	r3, [sp, #4]
 8001704:	407a      	eors	r2, r7
 8001706:	3301      	adds	r3, #1
 8001708:	2100      	movs	r1, #0
 800170a:	b2d2      	uxtb	r2, r2
 800170c:	9302      	str	r3, [sp, #8]
 800170e:	2e0a      	cmp	r6, #10
 8001710:	dd00      	ble.n	8001714 <__aeabi_dmul+0x3c0>
 8001712:	e667      	b.n	80013e4 <__aeabi_dmul+0x90>
 8001714:	e683      	b.n	800141e <__aeabi_dmul+0xca>
 8001716:	465b      	mov	r3, fp
 8001718:	4303      	orrs	r3, r0
 800171a:	469a      	mov	sl, r3
 800171c:	d02a      	beq.n	8001774 <__aeabi_dmul+0x420>
 800171e:	465b      	mov	r3, fp
 8001720:	2b00      	cmp	r3, #0
 8001722:	d06d      	beq.n	8001800 <__aeabi_dmul+0x4ac>
 8001724:	4658      	mov	r0, fp
 8001726:	f000 fd03 	bl	8002130 <__clzsi2>
 800172a:	0001      	movs	r1, r0
 800172c:	0003      	movs	r3, r0
 800172e:	390b      	subs	r1, #11
 8001730:	221d      	movs	r2, #29
 8001732:	1a52      	subs	r2, r2, r1
 8001734:	0021      	movs	r1, r4
 8001736:	0018      	movs	r0, r3
 8001738:	465d      	mov	r5, fp
 800173a:	40d1      	lsrs	r1, r2
 800173c:	3808      	subs	r0, #8
 800173e:	4085      	lsls	r5, r0
 8001740:	000a      	movs	r2, r1
 8001742:	4084      	lsls	r4, r0
 8001744:	432a      	orrs	r2, r5
 8001746:	4693      	mov	fp, r2
 8001748:	46a2      	mov	sl, r4
 800174a:	4d5f      	ldr	r5, [pc, #380]	; (80018c8 <__aeabi_dmul+0x574>)
 800174c:	2600      	movs	r6, #0
 800174e:	1aed      	subs	r5, r5, r3
 8001750:	2300      	movs	r3, #0
 8001752:	9300      	str	r3, [sp, #0]
 8001754:	e625      	b.n	80013a2 <__aeabi_dmul+0x4e>
 8001756:	465b      	mov	r3, fp
 8001758:	4303      	orrs	r3, r0
 800175a:	469a      	mov	sl, r3
 800175c:	d105      	bne.n	800176a <__aeabi_dmul+0x416>
 800175e:	2300      	movs	r3, #0
 8001760:	469b      	mov	fp, r3
 8001762:	3302      	adds	r3, #2
 8001764:	2608      	movs	r6, #8
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	e61b      	b.n	80013a2 <__aeabi_dmul+0x4e>
 800176a:	2303      	movs	r3, #3
 800176c:	4682      	mov	sl, r0
 800176e:	260c      	movs	r6, #12
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	e616      	b.n	80013a2 <__aeabi_dmul+0x4e>
 8001774:	2300      	movs	r3, #0
 8001776:	469b      	mov	fp, r3
 8001778:	3301      	adds	r3, #1
 800177a:	2604      	movs	r6, #4
 800177c:	2500      	movs	r5, #0
 800177e:	9300      	str	r3, [sp, #0]
 8001780:	e60f      	b.n	80013a2 <__aeabi_dmul+0x4e>
 8001782:	4642      	mov	r2, r8
 8001784:	3301      	adds	r3, #1
 8001786:	9501      	str	r5, [sp, #4]
 8001788:	431e      	orrs	r6, r3
 800178a:	9b01      	ldr	r3, [sp, #4]
 800178c:	407a      	eors	r2, r7
 800178e:	3301      	adds	r3, #1
 8001790:	2400      	movs	r4, #0
 8001792:	2000      	movs	r0, #0
 8001794:	2101      	movs	r1, #1
 8001796:	b2d2      	uxtb	r2, r2
 8001798:	9302      	str	r3, [sp, #8]
 800179a:	2e0a      	cmp	r6, #10
 800179c:	dd00      	ble.n	80017a0 <__aeabi_dmul+0x44c>
 800179e:	e621      	b.n	80013e4 <__aeabi_dmul+0x90>
 80017a0:	e63d      	b.n	800141e <__aeabi_dmul+0xca>
 80017a2:	2101      	movs	r1, #1
 80017a4:	1ac9      	subs	r1, r1, r3
 80017a6:	2938      	cmp	r1, #56	; 0x38
 80017a8:	dd00      	ble.n	80017ac <__aeabi_dmul+0x458>
 80017aa:	e642      	b.n	8001432 <__aeabi_dmul+0xde>
 80017ac:	291f      	cmp	r1, #31
 80017ae:	dd47      	ble.n	8001840 <__aeabi_dmul+0x4ec>
 80017b0:	261f      	movs	r6, #31
 80017b2:	0025      	movs	r5, r4
 80017b4:	4276      	negs	r6, r6
 80017b6:	1af3      	subs	r3, r6, r3
 80017b8:	40dd      	lsrs	r5, r3
 80017ba:	002b      	movs	r3, r5
 80017bc:	2920      	cmp	r1, #32
 80017be:	d005      	beq.n	80017cc <__aeabi_dmul+0x478>
 80017c0:	4942      	ldr	r1, [pc, #264]	; (80018cc <__aeabi_dmul+0x578>)
 80017c2:	9d02      	ldr	r5, [sp, #8]
 80017c4:	468c      	mov	ip, r1
 80017c6:	4465      	add	r5, ip
 80017c8:	40ac      	lsls	r4, r5
 80017ca:	4320      	orrs	r0, r4
 80017cc:	1e41      	subs	r1, r0, #1
 80017ce:	4188      	sbcs	r0, r1
 80017d0:	4318      	orrs	r0, r3
 80017d2:	2307      	movs	r3, #7
 80017d4:	001d      	movs	r5, r3
 80017d6:	2400      	movs	r4, #0
 80017d8:	4005      	ands	r5, r0
 80017da:	4203      	tst	r3, r0
 80017dc:	d04a      	beq.n	8001874 <__aeabi_dmul+0x520>
 80017de:	230f      	movs	r3, #15
 80017e0:	2400      	movs	r4, #0
 80017e2:	4003      	ands	r3, r0
 80017e4:	2b04      	cmp	r3, #4
 80017e6:	d042      	beq.n	800186e <__aeabi_dmul+0x51a>
 80017e8:	1d03      	adds	r3, r0, #4
 80017ea:	4283      	cmp	r3, r0
 80017ec:	4180      	sbcs	r0, r0
 80017ee:	4240      	negs	r0, r0
 80017f0:	1824      	adds	r4, r4, r0
 80017f2:	0018      	movs	r0, r3
 80017f4:	0223      	lsls	r3, r4, #8
 80017f6:	d53a      	bpl.n	800186e <__aeabi_dmul+0x51a>
 80017f8:	2301      	movs	r3, #1
 80017fa:	2400      	movs	r4, #0
 80017fc:	2500      	movs	r5, #0
 80017fe:	e61b      	b.n	8001438 <__aeabi_dmul+0xe4>
 8001800:	f000 fc96 	bl	8002130 <__clzsi2>
 8001804:	0001      	movs	r1, r0
 8001806:	0003      	movs	r3, r0
 8001808:	3115      	adds	r1, #21
 800180a:	3320      	adds	r3, #32
 800180c:	291c      	cmp	r1, #28
 800180e:	dd8f      	ble.n	8001730 <__aeabi_dmul+0x3dc>
 8001810:	3808      	subs	r0, #8
 8001812:	2200      	movs	r2, #0
 8001814:	4084      	lsls	r4, r0
 8001816:	4692      	mov	sl, r2
 8001818:	46a3      	mov	fp, r4
 800181a:	e796      	b.n	800174a <__aeabi_dmul+0x3f6>
 800181c:	f000 fc88 	bl	8002130 <__clzsi2>
 8001820:	0001      	movs	r1, r0
 8001822:	0003      	movs	r3, r0
 8001824:	3115      	adds	r1, #21
 8001826:	3320      	adds	r3, #32
 8001828:	291c      	cmp	r1, #28
 800182a:	dc00      	bgt.n	800182e <__aeabi_dmul+0x4da>
 800182c:	e758      	b.n	80016e0 <__aeabi_dmul+0x38c>
 800182e:	0002      	movs	r2, r0
 8001830:	464c      	mov	r4, r9
 8001832:	3a08      	subs	r2, #8
 8001834:	2000      	movs	r0, #0
 8001836:	4094      	lsls	r4, r2
 8001838:	e75d      	b.n	80016f6 <__aeabi_dmul+0x3a2>
 800183a:	9b01      	ldr	r3, [sp, #4]
 800183c:	9302      	str	r3, [sp, #8]
 800183e:	e711      	b.n	8001664 <__aeabi_dmul+0x310>
 8001840:	4b23      	ldr	r3, [pc, #140]	; (80018d0 <__aeabi_dmul+0x57c>)
 8001842:	0026      	movs	r6, r4
 8001844:	469c      	mov	ip, r3
 8001846:	0003      	movs	r3, r0
 8001848:	9d02      	ldr	r5, [sp, #8]
 800184a:	40cb      	lsrs	r3, r1
 800184c:	4465      	add	r5, ip
 800184e:	40ae      	lsls	r6, r5
 8001850:	431e      	orrs	r6, r3
 8001852:	0003      	movs	r3, r0
 8001854:	40ab      	lsls	r3, r5
 8001856:	1e58      	subs	r0, r3, #1
 8001858:	4183      	sbcs	r3, r0
 800185a:	0030      	movs	r0, r6
 800185c:	4318      	orrs	r0, r3
 800185e:	40cc      	lsrs	r4, r1
 8001860:	0743      	lsls	r3, r0, #29
 8001862:	d0c7      	beq.n	80017f4 <__aeabi_dmul+0x4a0>
 8001864:	230f      	movs	r3, #15
 8001866:	4003      	ands	r3, r0
 8001868:	2b04      	cmp	r3, #4
 800186a:	d1bd      	bne.n	80017e8 <__aeabi_dmul+0x494>
 800186c:	e7c2      	b.n	80017f4 <__aeabi_dmul+0x4a0>
 800186e:	0765      	lsls	r5, r4, #29
 8001870:	0264      	lsls	r4, r4, #9
 8001872:	0b24      	lsrs	r4, r4, #12
 8001874:	08c0      	lsrs	r0, r0, #3
 8001876:	2300      	movs	r3, #0
 8001878:	4305      	orrs	r5, r0
 800187a:	e5dd      	b.n	8001438 <__aeabi_dmul+0xe4>
 800187c:	2500      	movs	r5, #0
 800187e:	2302      	movs	r3, #2
 8001880:	2e0f      	cmp	r6, #15
 8001882:	d10c      	bne.n	800189e <__aeabi_dmul+0x54a>
 8001884:	2480      	movs	r4, #128	; 0x80
 8001886:	465b      	mov	r3, fp
 8001888:	0324      	lsls	r4, r4, #12
 800188a:	4223      	tst	r3, r4
 800188c:	d00e      	beq.n	80018ac <__aeabi_dmul+0x558>
 800188e:	4221      	tst	r1, r4
 8001890:	d10c      	bne.n	80018ac <__aeabi_dmul+0x558>
 8001892:	430c      	orrs	r4, r1
 8001894:	0324      	lsls	r4, r4, #12
 8001896:	003a      	movs	r2, r7
 8001898:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <__aeabi_dmul+0x580>)
 800189a:	0b24      	lsrs	r4, r4, #12
 800189c:	e5cc      	b.n	8001438 <__aeabi_dmul+0xe4>
 800189e:	2e0b      	cmp	r6, #11
 80018a0:	d000      	beq.n	80018a4 <__aeabi_dmul+0x550>
 80018a2:	e5a2      	b.n	80013ea <__aeabi_dmul+0x96>
 80018a4:	468b      	mov	fp, r1
 80018a6:	46aa      	mov	sl, r5
 80018a8:	9300      	str	r3, [sp, #0]
 80018aa:	e5f7      	b.n	800149c <__aeabi_dmul+0x148>
 80018ac:	2480      	movs	r4, #128	; 0x80
 80018ae:	465b      	mov	r3, fp
 80018b0:	0324      	lsls	r4, r4, #12
 80018b2:	431c      	orrs	r4, r3
 80018b4:	0324      	lsls	r4, r4, #12
 80018b6:	4642      	mov	r2, r8
 80018b8:	4655      	mov	r5, sl
 80018ba:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <__aeabi_dmul+0x580>)
 80018bc:	0b24      	lsrs	r4, r4, #12
 80018be:	e5bb      	b.n	8001438 <__aeabi_dmul+0xe4>
 80018c0:	464d      	mov	r5, r9
 80018c2:	0021      	movs	r1, r4
 80018c4:	2303      	movs	r3, #3
 80018c6:	e7db      	b.n	8001880 <__aeabi_dmul+0x52c>
 80018c8:	fffffc0d 	.word	0xfffffc0d
 80018cc:	0000043e 	.word	0x0000043e
 80018d0:	0000041e 	.word	0x0000041e
 80018d4:	000007ff 	.word	0x000007ff

080018d8 <__aeabi_dsub>:
 80018d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018da:	4657      	mov	r7, sl
 80018dc:	464e      	mov	r6, r9
 80018de:	4645      	mov	r5, r8
 80018e0:	46de      	mov	lr, fp
 80018e2:	b5e0      	push	{r5, r6, r7, lr}
 80018e4:	000d      	movs	r5, r1
 80018e6:	0004      	movs	r4, r0
 80018e8:	0019      	movs	r1, r3
 80018ea:	0010      	movs	r0, r2
 80018ec:	032b      	lsls	r3, r5, #12
 80018ee:	0a5b      	lsrs	r3, r3, #9
 80018f0:	0f62      	lsrs	r2, r4, #29
 80018f2:	431a      	orrs	r2, r3
 80018f4:	00e3      	lsls	r3, r4, #3
 80018f6:	030c      	lsls	r4, r1, #12
 80018f8:	0a64      	lsrs	r4, r4, #9
 80018fa:	0f47      	lsrs	r7, r0, #29
 80018fc:	4327      	orrs	r7, r4
 80018fe:	4cd0      	ldr	r4, [pc, #832]	; (8001c40 <__aeabi_dsub+0x368>)
 8001900:	006e      	lsls	r6, r5, #1
 8001902:	4691      	mov	r9, r2
 8001904:	b083      	sub	sp, #12
 8001906:	004a      	lsls	r2, r1, #1
 8001908:	00c0      	lsls	r0, r0, #3
 800190a:	4698      	mov	r8, r3
 800190c:	46a2      	mov	sl, r4
 800190e:	0d76      	lsrs	r6, r6, #21
 8001910:	0fed      	lsrs	r5, r5, #31
 8001912:	0d52      	lsrs	r2, r2, #21
 8001914:	0fc9      	lsrs	r1, r1, #31
 8001916:	9001      	str	r0, [sp, #4]
 8001918:	42a2      	cmp	r2, r4
 800191a:	d100      	bne.n	800191e <__aeabi_dsub+0x46>
 800191c:	e0b9      	b.n	8001a92 <__aeabi_dsub+0x1ba>
 800191e:	2401      	movs	r4, #1
 8001920:	4061      	eors	r1, r4
 8001922:	468b      	mov	fp, r1
 8001924:	428d      	cmp	r5, r1
 8001926:	d100      	bne.n	800192a <__aeabi_dsub+0x52>
 8001928:	e08d      	b.n	8001a46 <__aeabi_dsub+0x16e>
 800192a:	1ab4      	subs	r4, r6, r2
 800192c:	46a4      	mov	ip, r4
 800192e:	2c00      	cmp	r4, #0
 8001930:	dc00      	bgt.n	8001934 <__aeabi_dsub+0x5c>
 8001932:	e0b7      	b.n	8001aa4 <__aeabi_dsub+0x1cc>
 8001934:	2a00      	cmp	r2, #0
 8001936:	d100      	bne.n	800193a <__aeabi_dsub+0x62>
 8001938:	e0cb      	b.n	8001ad2 <__aeabi_dsub+0x1fa>
 800193a:	4ac1      	ldr	r2, [pc, #772]	; (8001c40 <__aeabi_dsub+0x368>)
 800193c:	4296      	cmp	r6, r2
 800193e:	d100      	bne.n	8001942 <__aeabi_dsub+0x6a>
 8001940:	e186      	b.n	8001c50 <__aeabi_dsub+0x378>
 8001942:	2280      	movs	r2, #128	; 0x80
 8001944:	0412      	lsls	r2, r2, #16
 8001946:	4317      	orrs	r7, r2
 8001948:	4662      	mov	r2, ip
 800194a:	2a38      	cmp	r2, #56	; 0x38
 800194c:	dd00      	ble.n	8001950 <__aeabi_dsub+0x78>
 800194e:	e1a4      	b.n	8001c9a <__aeabi_dsub+0x3c2>
 8001950:	2a1f      	cmp	r2, #31
 8001952:	dd00      	ble.n	8001956 <__aeabi_dsub+0x7e>
 8001954:	e21d      	b.n	8001d92 <__aeabi_dsub+0x4ba>
 8001956:	4661      	mov	r1, ip
 8001958:	2220      	movs	r2, #32
 800195a:	003c      	movs	r4, r7
 800195c:	1a52      	subs	r2, r2, r1
 800195e:	0001      	movs	r1, r0
 8001960:	4090      	lsls	r0, r2
 8001962:	4094      	lsls	r4, r2
 8001964:	1e42      	subs	r2, r0, #1
 8001966:	4190      	sbcs	r0, r2
 8001968:	4662      	mov	r2, ip
 800196a:	46a0      	mov	r8, r4
 800196c:	4664      	mov	r4, ip
 800196e:	40d7      	lsrs	r7, r2
 8001970:	464a      	mov	r2, r9
 8001972:	40e1      	lsrs	r1, r4
 8001974:	4644      	mov	r4, r8
 8001976:	1bd2      	subs	r2, r2, r7
 8001978:	4691      	mov	r9, r2
 800197a:	430c      	orrs	r4, r1
 800197c:	4304      	orrs	r4, r0
 800197e:	1b1c      	subs	r4, r3, r4
 8001980:	42a3      	cmp	r3, r4
 8001982:	4192      	sbcs	r2, r2
 8001984:	464b      	mov	r3, r9
 8001986:	4252      	negs	r2, r2
 8001988:	1a9b      	subs	r3, r3, r2
 800198a:	469a      	mov	sl, r3
 800198c:	4653      	mov	r3, sl
 800198e:	021b      	lsls	r3, r3, #8
 8001990:	d400      	bmi.n	8001994 <__aeabi_dsub+0xbc>
 8001992:	e12b      	b.n	8001bec <__aeabi_dsub+0x314>
 8001994:	4653      	mov	r3, sl
 8001996:	025a      	lsls	r2, r3, #9
 8001998:	0a53      	lsrs	r3, r2, #9
 800199a:	469a      	mov	sl, r3
 800199c:	4653      	mov	r3, sl
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d100      	bne.n	80019a4 <__aeabi_dsub+0xcc>
 80019a2:	e166      	b.n	8001c72 <__aeabi_dsub+0x39a>
 80019a4:	4650      	mov	r0, sl
 80019a6:	f000 fbc3 	bl	8002130 <__clzsi2>
 80019aa:	0003      	movs	r3, r0
 80019ac:	3b08      	subs	r3, #8
 80019ae:	2220      	movs	r2, #32
 80019b0:	0020      	movs	r0, r4
 80019b2:	1ad2      	subs	r2, r2, r3
 80019b4:	4651      	mov	r1, sl
 80019b6:	40d0      	lsrs	r0, r2
 80019b8:	4099      	lsls	r1, r3
 80019ba:	0002      	movs	r2, r0
 80019bc:	409c      	lsls	r4, r3
 80019be:	430a      	orrs	r2, r1
 80019c0:	429e      	cmp	r6, r3
 80019c2:	dd00      	ble.n	80019c6 <__aeabi_dsub+0xee>
 80019c4:	e164      	b.n	8001c90 <__aeabi_dsub+0x3b8>
 80019c6:	1b9b      	subs	r3, r3, r6
 80019c8:	1c59      	adds	r1, r3, #1
 80019ca:	291f      	cmp	r1, #31
 80019cc:	dd00      	ble.n	80019d0 <__aeabi_dsub+0xf8>
 80019ce:	e0fe      	b.n	8001bce <__aeabi_dsub+0x2f6>
 80019d0:	2320      	movs	r3, #32
 80019d2:	0010      	movs	r0, r2
 80019d4:	0026      	movs	r6, r4
 80019d6:	1a5b      	subs	r3, r3, r1
 80019d8:	409c      	lsls	r4, r3
 80019da:	4098      	lsls	r0, r3
 80019dc:	40ce      	lsrs	r6, r1
 80019de:	40ca      	lsrs	r2, r1
 80019e0:	1e63      	subs	r3, r4, #1
 80019e2:	419c      	sbcs	r4, r3
 80019e4:	4330      	orrs	r0, r6
 80019e6:	4692      	mov	sl, r2
 80019e8:	2600      	movs	r6, #0
 80019ea:	4304      	orrs	r4, r0
 80019ec:	0763      	lsls	r3, r4, #29
 80019ee:	d009      	beq.n	8001a04 <__aeabi_dsub+0x12c>
 80019f0:	230f      	movs	r3, #15
 80019f2:	4023      	ands	r3, r4
 80019f4:	2b04      	cmp	r3, #4
 80019f6:	d005      	beq.n	8001a04 <__aeabi_dsub+0x12c>
 80019f8:	1d23      	adds	r3, r4, #4
 80019fa:	42a3      	cmp	r3, r4
 80019fc:	41a4      	sbcs	r4, r4
 80019fe:	4264      	negs	r4, r4
 8001a00:	44a2      	add	sl, r4
 8001a02:	001c      	movs	r4, r3
 8001a04:	4653      	mov	r3, sl
 8001a06:	021b      	lsls	r3, r3, #8
 8001a08:	d400      	bmi.n	8001a0c <__aeabi_dsub+0x134>
 8001a0a:	e0f2      	b.n	8001bf2 <__aeabi_dsub+0x31a>
 8001a0c:	4b8c      	ldr	r3, [pc, #560]	; (8001c40 <__aeabi_dsub+0x368>)
 8001a0e:	3601      	adds	r6, #1
 8001a10:	429e      	cmp	r6, r3
 8001a12:	d100      	bne.n	8001a16 <__aeabi_dsub+0x13e>
 8001a14:	e10f      	b.n	8001c36 <__aeabi_dsub+0x35e>
 8001a16:	4653      	mov	r3, sl
 8001a18:	498a      	ldr	r1, [pc, #552]	; (8001c44 <__aeabi_dsub+0x36c>)
 8001a1a:	08e4      	lsrs	r4, r4, #3
 8001a1c:	400b      	ands	r3, r1
 8001a1e:	0019      	movs	r1, r3
 8001a20:	075b      	lsls	r3, r3, #29
 8001a22:	4323      	orrs	r3, r4
 8001a24:	0572      	lsls	r2, r6, #21
 8001a26:	024c      	lsls	r4, r1, #9
 8001a28:	0b24      	lsrs	r4, r4, #12
 8001a2a:	0d52      	lsrs	r2, r2, #21
 8001a2c:	0512      	lsls	r2, r2, #20
 8001a2e:	4322      	orrs	r2, r4
 8001a30:	07ed      	lsls	r5, r5, #31
 8001a32:	432a      	orrs	r2, r5
 8001a34:	0018      	movs	r0, r3
 8001a36:	0011      	movs	r1, r2
 8001a38:	b003      	add	sp, #12
 8001a3a:	bcf0      	pop	{r4, r5, r6, r7}
 8001a3c:	46bb      	mov	fp, r7
 8001a3e:	46b2      	mov	sl, r6
 8001a40:	46a9      	mov	r9, r5
 8001a42:	46a0      	mov	r8, r4
 8001a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a46:	1ab4      	subs	r4, r6, r2
 8001a48:	46a4      	mov	ip, r4
 8001a4a:	2c00      	cmp	r4, #0
 8001a4c:	dd59      	ble.n	8001b02 <__aeabi_dsub+0x22a>
 8001a4e:	2a00      	cmp	r2, #0
 8001a50:	d100      	bne.n	8001a54 <__aeabi_dsub+0x17c>
 8001a52:	e0b0      	b.n	8001bb6 <__aeabi_dsub+0x2de>
 8001a54:	4556      	cmp	r6, sl
 8001a56:	d100      	bne.n	8001a5a <__aeabi_dsub+0x182>
 8001a58:	e0fa      	b.n	8001c50 <__aeabi_dsub+0x378>
 8001a5a:	2280      	movs	r2, #128	; 0x80
 8001a5c:	0412      	lsls	r2, r2, #16
 8001a5e:	4317      	orrs	r7, r2
 8001a60:	4662      	mov	r2, ip
 8001a62:	2a38      	cmp	r2, #56	; 0x38
 8001a64:	dd00      	ble.n	8001a68 <__aeabi_dsub+0x190>
 8001a66:	e0d4      	b.n	8001c12 <__aeabi_dsub+0x33a>
 8001a68:	2a1f      	cmp	r2, #31
 8001a6a:	dc00      	bgt.n	8001a6e <__aeabi_dsub+0x196>
 8001a6c:	e1c0      	b.n	8001df0 <__aeabi_dsub+0x518>
 8001a6e:	0039      	movs	r1, r7
 8001a70:	3a20      	subs	r2, #32
 8001a72:	40d1      	lsrs	r1, r2
 8001a74:	4662      	mov	r2, ip
 8001a76:	2a20      	cmp	r2, #32
 8001a78:	d006      	beq.n	8001a88 <__aeabi_dsub+0x1b0>
 8001a7a:	4664      	mov	r4, ip
 8001a7c:	2240      	movs	r2, #64	; 0x40
 8001a7e:	1b12      	subs	r2, r2, r4
 8001a80:	003c      	movs	r4, r7
 8001a82:	4094      	lsls	r4, r2
 8001a84:	4304      	orrs	r4, r0
 8001a86:	9401      	str	r4, [sp, #4]
 8001a88:	9c01      	ldr	r4, [sp, #4]
 8001a8a:	1e62      	subs	r2, r4, #1
 8001a8c:	4194      	sbcs	r4, r2
 8001a8e:	430c      	orrs	r4, r1
 8001a90:	e0c3      	b.n	8001c1a <__aeabi_dsub+0x342>
 8001a92:	003c      	movs	r4, r7
 8001a94:	4304      	orrs	r4, r0
 8001a96:	d02b      	beq.n	8001af0 <__aeabi_dsub+0x218>
 8001a98:	468b      	mov	fp, r1
 8001a9a:	428d      	cmp	r5, r1
 8001a9c:	d02e      	beq.n	8001afc <__aeabi_dsub+0x224>
 8001a9e:	4c6a      	ldr	r4, [pc, #424]	; (8001c48 <__aeabi_dsub+0x370>)
 8001aa0:	46a4      	mov	ip, r4
 8001aa2:	44b4      	add	ip, r6
 8001aa4:	4664      	mov	r4, ip
 8001aa6:	2c00      	cmp	r4, #0
 8001aa8:	d05f      	beq.n	8001b6a <__aeabi_dsub+0x292>
 8001aaa:	1b94      	subs	r4, r2, r6
 8001aac:	46a4      	mov	ip, r4
 8001aae:	2e00      	cmp	r6, #0
 8001ab0:	d000      	beq.n	8001ab4 <__aeabi_dsub+0x1dc>
 8001ab2:	e120      	b.n	8001cf6 <__aeabi_dsub+0x41e>
 8001ab4:	464c      	mov	r4, r9
 8001ab6:	431c      	orrs	r4, r3
 8001ab8:	d100      	bne.n	8001abc <__aeabi_dsub+0x1e4>
 8001aba:	e1c7      	b.n	8001e4c <__aeabi_dsub+0x574>
 8001abc:	4661      	mov	r1, ip
 8001abe:	1e4c      	subs	r4, r1, #1
 8001ac0:	2901      	cmp	r1, #1
 8001ac2:	d100      	bne.n	8001ac6 <__aeabi_dsub+0x1ee>
 8001ac4:	e223      	b.n	8001f0e <__aeabi_dsub+0x636>
 8001ac6:	4d5e      	ldr	r5, [pc, #376]	; (8001c40 <__aeabi_dsub+0x368>)
 8001ac8:	45ac      	cmp	ip, r5
 8001aca:	d100      	bne.n	8001ace <__aeabi_dsub+0x1f6>
 8001acc:	e1d8      	b.n	8001e80 <__aeabi_dsub+0x5a8>
 8001ace:	46a4      	mov	ip, r4
 8001ad0:	e11a      	b.n	8001d08 <__aeabi_dsub+0x430>
 8001ad2:	003a      	movs	r2, r7
 8001ad4:	4302      	orrs	r2, r0
 8001ad6:	d100      	bne.n	8001ada <__aeabi_dsub+0x202>
 8001ad8:	e0e4      	b.n	8001ca4 <__aeabi_dsub+0x3cc>
 8001ada:	0022      	movs	r2, r4
 8001adc:	3a01      	subs	r2, #1
 8001ade:	2c01      	cmp	r4, #1
 8001ae0:	d100      	bne.n	8001ae4 <__aeabi_dsub+0x20c>
 8001ae2:	e1c3      	b.n	8001e6c <__aeabi_dsub+0x594>
 8001ae4:	4956      	ldr	r1, [pc, #344]	; (8001c40 <__aeabi_dsub+0x368>)
 8001ae6:	428c      	cmp	r4, r1
 8001ae8:	d100      	bne.n	8001aec <__aeabi_dsub+0x214>
 8001aea:	e0b1      	b.n	8001c50 <__aeabi_dsub+0x378>
 8001aec:	4694      	mov	ip, r2
 8001aee:	e72b      	b.n	8001948 <__aeabi_dsub+0x70>
 8001af0:	2401      	movs	r4, #1
 8001af2:	4061      	eors	r1, r4
 8001af4:	468b      	mov	fp, r1
 8001af6:	428d      	cmp	r5, r1
 8001af8:	d000      	beq.n	8001afc <__aeabi_dsub+0x224>
 8001afa:	e716      	b.n	800192a <__aeabi_dsub+0x52>
 8001afc:	4952      	ldr	r1, [pc, #328]	; (8001c48 <__aeabi_dsub+0x370>)
 8001afe:	468c      	mov	ip, r1
 8001b00:	44b4      	add	ip, r6
 8001b02:	4664      	mov	r4, ip
 8001b04:	2c00      	cmp	r4, #0
 8001b06:	d100      	bne.n	8001b0a <__aeabi_dsub+0x232>
 8001b08:	e0d3      	b.n	8001cb2 <__aeabi_dsub+0x3da>
 8001b0a:	1b91      	subs	r1, r2, r6
 8001b0c:	468c      	mov	ip, r1
 8001b0e:	2e00      	cmp	r6, #0
 8001b10:	d100      	bne.n	8001b14 <__aeabi_dsub+0x23c>
 8001b12:	e15e      	b.n	8001dd2 <__aeabi_dsub+0x4fa>
 8001b14:	494a      	ldr	r1, [pc, #296]	; (8001c40 <__aeabi_dsub+0x368>)
 8001b16:	428a      	cmp	r2, r1
 8001b18:	d100      	bne.n	8001b1c <__aeabi_dsub+0x244>
 8001b1a:	e1be      	b.n	8001e9a <__aeabi_dsub+0x5c2>
 8001b1c:	2180      	movs	r1, #128	; 0x80
 8001b1e:	464c      	mov	r4, r9
 8001b20:	0409      	lsls	r1, r1, #16
 8001b22:	430c      	orrs	r4, r1
 8001b24:	46a1      	mov	r9, r4
 8001b26:	4661      	mov	r1, ip
 8001b28:	2938      	cmp	r1, #56	; 0x38
 8001b2a:	dd00      	ble.n	8001b2e <__aeabi_dsub+0x256>
 8001b2c:	e1ba      	b.n	8001ea4 <__aeabi_dsub+0x5cc>
 8001b2e:	291f      	cmp	r1, #31
 8001b30:	dd00      	ble.n	8001b34 <__aeabi_dsub+0x25c>
 8001b32:	e227      	b.n	8001f84 <__aeabi_dsub+0x6ac>
 8001b34:	2420      	movs	r4, #32
 8001b36:	1a64      	subs	r4, r4, r1
 8001b38:	4649      	mov	r1, r9
 8001b3a:	40a1      	lsls	r1, r4
 8001b3c:	001e      	movs	r6, r3
 8001b3e:	4688      	mov	r8, r1
 8001b40:	4661      	mov	r1, ip
 8001b42:	40a3      	lsls	r3, r4
 8001b44:	40ce      	lsrs	r6, r1
 8001b46:	4641      	mov	r1, r8
 8001b48:	1e5c      	subs	r4, r3, #1
 8001b4a:	41a3      	sbcs	r3, r4
 8001b4c:	4331      	orrs	r1, r6
 8001b4e:	4319      	orrs	r1, r3
 8001b50:	000c      	movs	r4, r1
 8001b52:	4663      	mov	r3, ip
 8001b54:	4649      	mov	r1, r9
 8001b56:	40d9      	lsrs	r1, r3
 8001b58:	187f      	adds	r7, r7, r1
 8001b5a:	1824      	adds	r4, r4, r0
 8001b5c:	4284      	cmp	r4, r0
 8001b5e:	419b      	sbcs	r3, r3
 8001b60:	425b      	negs	r3, r3
 8001b62:	469a      	mov	sl, r3
 8001b64:	0016      	movs	r6, r2
 8001b66:	44ba      	add	sl, r7
 8001b68:	e05d      	b.n	8001c26 <__aeabi_dsub+0x34e>
 8001b6a:	4c38      	ldr	r4, [pc, #224]	; (8001c4c <__aeabi_dsub+0x374>)
 8001b6c:	1c72      	adds	r2, r6, #1
 8001b6e:	4222      	tst	r2, r4
 8001b70:	d000      	beq.n	8001b74 <__aeabi_dsub+0x29c>
 8001b72:	e0df      	b.n	8001d34 <__aeabi_dsub+0x45c>
 8001b74:	464a      	mov	r2, r9
 8001b76:	431a      	orrs	r2, r3
 8001b78:	2e00      	cmp	r6, #0
 8001b7a:	d000      	beq.n	8001b7e <__aeabi_dsub+0x2a6>
 8001b7c:	e15c      	b.n	8001e38 <__aeabi_dsub+0x560>
 8001b7e:	2a00      	cmp	r2, #0
 8001b80:	d100      	bne.n	8001b84 <__aeabi_dsub+0x2ac>
 8001b82:	e1cf      	b.n	8001f24 <__aeabi_dsub+0x64c>
 8001b84:	003a      	movs	r2, r7
 8001b86:	4302      	orrs	r2, r0
 8001b88:	d100      	bne.n	8001b8c <__aeabi_dsub+0x2b4>
 8001b8a:	e17f      	b.n	8001e8c <__aeabi_dsub+0x5b4>
 8001b8c:	1a1c      	subs	r4, r3, r0
 8001b8e:	464a      	mov	r2, r9
 8001b90:	42a3      	cmp	r3, r4
 8001b92:	4189      	sbcs	r1, r1
 8001b94:	1bd2      	subs	r2, r2, r7
 8001b96:	4249      	negs	r1, r1
 8001b98:	1a52      	subs	r2, r2, r1
 8001b9a:	4692      	mov	sl, r2
 8001b9c:	0212      	lsls	r2, r2, #8
 8001b9e:	d400      	bmi.n	8001ba2 <__aeabi_dsub+0x2ca>
 8001ba0:	e20a      	b.n	8001fb8 <__aeabi_dsub+0x6e0>
 8001ba2:	1ac4      	subs	r4, r0, r3
 8001ba4:	42a0      	cmp	r0, r4
 8001ba6:	4180      	sbcs	r0, r0
 8001ba8:	464b      	mov	r3, r9
 8001baa:	4240      	negs	r0, r0
 8001bac:	1aff      	subs	r7, r7, r3
 8001bae:	1a3b      	subs	r3, r7, r0
 8001bb0:	469a      	mov	sl, r3
 8001bb2:	465d      	mov	r5, fp
 8001bb4:	e71a      	b.n	80019ec <__aeabi_dsub+0x114>
 8001bb6:	003a      	movs	r2, r7
 8001bb8:	4302      	orrs	r2, r0
 8001bba:	d073      	beq.n	8001ca4 <__aeabi_dsub+0x3cc>
 8001bbc:	0022      	movs	r2, r4
 8001bbe:	3a01      	subs	r2, #1
 8001bc0:	2c01      	cmp	r4, #1
 8001bc2:	d100      	bne.n	8001bc6 <__aeabi_dsub+0x2ee>
 8001bc4:	e0cb      	b.n	8001d5e <__aeabi_dsub+0x486>
 8001bc6:	4554      	cmp	r4, sl
 8001bc8:	d042      	beq.n	8001c50 <__aeabi_dsub+0x378>
 8001bca:	4694      	mov	ip, r2
 8001bcc:	e748      	b.n	8001a60 <__aeabi_dsub+0x188>
 8001bce:	0010      	movs	r0, r2
 8001bd0:	3b1f      	subs	r3, #31
 8001bd2:	40d8      	lsrs	r0, r3
 8001bd4:	2920      	cmp	r1, #32
 8001bd6:	d003      	beq.n	8001be0 <__aeabi_dsub+0x308>
 8001bd8:	2340      	movs	r3, #64	; 0x40
 8001bda:	1a5b      	subs	r3, r3, r1
 8001bdc:	409a      	lsls	r2, r3
 8001bde:	4314      	orrs	r4, r2
 8001be0:	1e63      	subs	r3, r4, #1
 8001be2:	419c      	sbcs	r4, r3
 8001be4:	2300      	movs	r3, #0
 8001be6:	2600      	movs	r6, #0
 8001be8:	469a      	mov	sl, r3
 8001bea:	4304      	orrs	r4, r0
 8001bec:	0763      	lsls	r3, r4, #29
 8001bee:	d000      	beq.n	8001bf2 <__aeabi_dsub+0x31a>
 8001bf0:	e6fe      	b.n	80019f0 <__aeabi_dsub+0x118>
 8001bf2:	4652      	mov	r2, sl
 8001bf4:	08e3      	lsrs	r3, r4, #3
 8001bf6:	0752      	lsls	r2, r2, #29
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	4652      	mov	r2, sl
 8001bfc:	46b4      	mov	ip, r6
 8001bfe:	08d2      	lsrs	r2, r2, #3
 8001c00:	490f      	ldr	r1, [pc, #60]	; (8001c40 <__aeabi_dsub+0x368>)
 8001c02:	458c      	cmp	ip, r1
 8001c04:	d02a      	beq.n	8001c5c <__aeabi_dsub+0x384>
 8001c06:	0312      	lsls	r2, r2, #12
 8001c08:	0b14      	lsrs	r4, r2, #12
 8001c0a:	4662      	mov	r2, ip
 8001c0c:	0552      	lsls	r2, r2, #21
 8001c0e:	0d52      	lsrs	r2, r2, #21
 8001c10:	e70c      	b.n	8001a2c <__aeabi_dsub+0x154>
 8001c12:	003c      	movs	r4, r7
 8001c14:	4304      	orrs	r4, r0
 8001c16:	1e62      	subs	r2, r4, #1
 8001c18:	4194      	sbcs	r4, r2
 8001c1a:	18e4      	adds	r4, r4, r3
 8001c1c:	429c      	cmp	r4, r3
 8001c1e:	4192      	sbcs	r2, r2
 8001c20:	4252      	negs	r2, r2
 8001c22:	444a      	add	r2, r9
 8001c24:	4692      	mov	sl, r2
 8001c26:	4653      	mov	r3, sl
 8001c28:	021b      	lsls	r3, r3, #8
 8001c2a:	d5df      	bpl.n	8001bec <__aeabi_dsub+0x314>
 8001c2c:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <__aeabi_dsub+0x368>)
 8001c2e:	3601      	adds	r6, #1
 8001c30:	429e      	cmp	r6, r3
 8001c32:	d000      	beq.n	8001c36 <__aeabi_dsub+0x35e>
 8001c34:	e0a0      	b.n	8001d78 <__aeabi_dsub+0x4a0>
 8001c36:	0032      	movs	r2, r6
 8001c38:	2400      	movs	r4, #0
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	e6f6      	b.n	8001a2c <__aeabi_dsub+0x154>
 8001c3e:	46c0      	nop			; (mov r8, r8)
 8001c40:	000007ff 	.word	0x000007ff
 8001c44:	ff7fffff 	.word	0xff7fffff
 8001c48:	fffff801 	.word	0xfffff801
 8001c4c:	000007fe 	.word	0x000007fe
 8001c50:	08db      	lsrs	r3, r3, #3
 8001c52:	464a      	mov	r2, r9
 8001c54:	0752      	lsls	r2, r2, #29
 8001c56:	4313      	orrs	r3, r2
 8001c58:	464a      	mov	r2, r9
 8001c5a:	08d2      	lsrs	r2, r2, #3
 8001c5c:	0019      	movs	r1, r3
 8001c5e:	4311      	orrs	r1, r2
 8001c60:	d100      	bne.n	8001c64 <__aeabi_dsub+0x38c>
 8001c62:	e1b5      	b.n	8001fd0 <__aeabi_dsub+0x6f8>
 8001c64:	2480      	movs	r4, #128	; 0x80
 8001c66:	0324      	lsls	r4, r4, #12
 8001c68:	4314      	orrs	r4, r2
 8001c6a:	0324      	lsls	r4, r4, #12
 8001c6c:	4ad5      	ldr	r2, [pc, #852]	; (8001fc4 <__aeabi_dsub+0x6ec>)
 8001c6e:	0b24      	lsrs	r4, r4, #12
 8001c70:	e6dc      	b.n	8001a2c <__aeabi_dsub+0x154>
 8001c72:	0020      	movs	r0, r4
 8001c74:	f000 fa5c 	bl	8002130 <__clzsi2>
 8001c78:	0003      	movs	r3, r0
 8001c7a:	3318      	adds	r3, #24
 8001c7c:	2b1f      	cmp	r3, #31
 8001c7e:	dc00      	bgt.n	8001c82 <__aeabi_dsub+0x3aa>
 8001c80:	e695      	b.n	80019ae <__aeabi_dsub+0xd6>
 8001c82:	0022      	movs	r2, r4
 8001c84:	3808      	subs	r0, #8
 8001c86:	4082      	lsls	r2, r0
 8001c88:	2400      	movs	r4, #0
 8001c8a:	429e      	cmp	r6, r3
 8001c8c:	dc00      	bgt.n	8001c90 <__aeabi_dsub+0x3b8>
 8001c8e:	e69a      	b.n	80019c6 <__aeabi_dsub+0xee>
 8001c90:	1af6      	subs	r6, r6, r3
 8001c92:	4bcd      	ldr	r3, [pc, #820]	; (8001fc8 <__aeabi_dsub+0x6f0>)
 8001c94:	401a      	ands	r2, r3
 8001c96:	4692      	mov	sl, r2
 8001c98:	e6a8      	b.n	80019ec <__aeabi_dsub+0x114>
 8001c9a:	003c      	movs	r4, r7
 8001c9c:	4304      	orrs	r4, r0
 8001c9e:	1e62      	subs	r2, r4, #1
 8001ca0:	4194      	sbcs	r4, r2
 8001ca2:	e66c      	b.n	800197e <__aeabi_dsub+0xa6>
 8001ca4:	464a      	mov	r2, r9
 8001ca6:	08db      	lsrs	r3, r3, #3
 8001ca8:	0752      	lsls	r2, r2, #29
 8001caa:	4313      	orrs	r3, r2
 8001cac:	464a      	mov	r2, r9
 8001cae:	08d2      	lsrs	r2, r2, #3
 8001cb0:	e7a6      	b.n	8001c00 <__aeabi_dsub+0x328>
 8001cb2:	4cc6      	ldr	r4, [pc, #792]	; (8001fcc <__aeabi_dsub+0x6f4>)
 8001cb4:	1c72      	adds	r2, r6, #1
 8001cb6:	4222      	tst	r2, r4
 8001cb8:	d000      	beq.n	8001cbc <__aeabi_dsub+0x3e4>
 8001cba:	e0ac      	b.n	8001e16 <__aeabi_dsub+0x53e>
 8001cbc:	464a      	mov	r2, r9
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	2e00      	cmp	r6, #0
 8001cc2:	d000      	beq.n	8001cc6 <__aeabi_dsub+0x3ee>
 8001cc4:	e105      	b.n	8001ed2 <__aeabi_dsub+0x5fa>
 8001cc6:	2a00      	cmp	r2, #0
 8001cc8:	d100      	bne.n	8001ccc <__aeabi_dsub+0x3f4>
 8001cca:	e156      	b.n	8001f7a <__aeabi_dsub+0x6a2>
 8001ccc:	003a      	movs	r2, r7
 8001cce:	4302      	orrs	r2, r0
 8001cd0:	d100      	bne.n	8001cd4 <__aeabi_dsub+0x3fc>
 8001cd2:	e0db      	b.n	8001e8c <__aeabi_dsub+0x5b4>
 8001cd4:	181c      	adds	r4, r3, r0
 8001cd6:	429c      	cmp	r4, r3
 8001cd8:	419b      	sbcs	r3, r3
 8001cda:	444f      	add	r7, r9
 8001cdc:	46ba      	mov	sl, r7
 8001cde:	425b      	negs	r3, r3
 8001ce0:	449a      	add	sl, r3
 8001ce2:	4653      	mov	r3, sl
 8001ce4:	021b      	lsls	r3, r3, #8
 8001ce6:	d400      	bmi.n	8001cea <__aeabi_dsub+0x412>
 8001ce8:	e780      	b.n	8001bec <__aeabi_dsub+0x314>
 8001cea:	4652      	mov	r2, sl
 8001cec:	4bb6      	ldr	r3, [pc, #728]	; (8001fc8 <__aeabi_dsub+0x6f0>)
 8001cee:	2601      	movs	r6, #1
 8001cf0:	401a      	ands	r2, r3
 8001cf2:	4692      	mov	sl, r2
 8001cf4:	e77a      	b.n	8001bec <__aeabi_dsub+0x314>
 8001cf6:	4cb3      	ldr	r4, [pc, #716]	; (8001fc4 <__aeabi_dsub+0x6ec>)
 8001cf8:	42a2      	cmp	r2, r4
 8001cfa:	d100      	bne.n	8001cfe <__aeabi_dsub+0x426>
 8001cfc:	e0c0      	b.n	8001e80 <__aeabi_dsub+0x5a8>
 8001cfe:	2480      	movs	r4, #128	; 0x80
 8001d00:	464d      	mov	r5, r9
 8001d02:	0424      	lsls	r4, r4, #16
 8001d04:	4325      	orrs	r5, r4
 8001d06:	46a9      	mov	r9, r5
 8001d08:	4664      	mov	r4, ip
 8001d0a:	2c38      	cmp	r4, #56	; 0x38
 8001d0c:	dc53      	bgt.n	8001db6 <__aeabi_dsub+0x4de>
 8001d0e:	4661      	mov	r1, ip
 8001d10:	2c1f      	cmp	r4, #31
 8001d12:	dd00      	ble.n	8001d16 <__aeabi_dsub+0x43e>
 8001d14:	e0cd      	b.n	8001eb2 <__aeabi_dsub+0x5da>
 8001d16:	2520      	movs	r5, #32
 8001d18:	001e      	movs	r6, r3
 8001d1a:	1b2d      	subs	r5, r5, r4
 8001d1c:	464c      	mov	r4, r9
 8001d1e:	40ab      	lsls	r3, r5
 8001d20:	40ac      	lsls	r4, r5
 8001d22:	40ce      	lsrs	r6, r1
 8001d24:	1e5d      	subs	r5, r3, #1
 8001d26:	41ab      	sbcs	r3, r5
 8001d28:	4334      	orrs	r4, r6
 8001d2a:	4323      	orrs	r3, r4
 8001d2c:	464c      	mov	r4, r9
 8001d2e:	40cc      	lsrs	r4, r1
 8001d30:	1b3f      	subs	r7, r7, r4
 8001d32:	e045      	b.n	8001dc0 <__aeabi_dsub+0x4e8>
 8001d34:	464a      	mov	r2, r9
 8001d36:	1a1c      	subs	r4, r3, r0
 8001d38:	1bd1      	subs	r1, r2, r7
 8001d3a:	42a3      	cmp	r3, r4
 8001d3c:	4192      	sbcs	r2, r2
 8001d3e:	4252      	negs	r2, r2
 8001d40:	4692      	mov	sl, r2
 8001d42:	000a      	movs	r2, r1
 8001d44:	4651      	mov	r1, sl
 8001d46:	1a52      	subs	r2, r2, r1
 8001d48:	4692      	mov	sl, r2
 8001d4a:	0212      	lsls	r2, r2, #8
 8001d4c:	d500      	bpl.n	8001d50 <__aeabi_dsub+0x478>
 8001d4e:	e083      	b.n	8001e58 <__aeabi_dsub+0x580>
 8001d50:	4653      	mov	r3, sl
 8001d52:	4323      	orrs	r3, r4
 8001d54:	d000      	beq.n	8001d58 <__aeabi_dsub+0x480>
 8001d56:	e621      	b.n	800199c <__aeabi_dsub+0xc4>
 8001d58:	2200      	movs	r2, #0
 8001d5a:	2500      	movs	r5, #0
 8001d5c:	e753      	b.n	8001c06 <__aeabi_dsub+0x32e>
 8001d5e:	181c      	adds	r4, r3, r0
 8001d60:	429c      	cmp	r4, r3
 8001d62:	419b      	sbcs	r3, r3
 8001d64:	444f      	add	r7, r9
 8001d66:	46ba      	mov	sl, r7
 8001d68:	425b      	negs	r3, r3
 8001d6a:	449a      	add	sl, r3
 8001d6c:	4653      	mov	r3, sl
 8001d6e:	2601      	movs	r6, #1
 8001d70:	021b      	lsls	r3, r3, #8
 8001d72:	d400      	bmi.n	8001d76 <__aeabi_dsub+0x49e>
 8001d74:	e73a      	b.n	8001bec <__aeabi_dsub+0x314>
 8001d76:	2602      	movs	r6, #2
 8001d78:	4652      	mov	r2, sl
 8001d7a:	4b93      	ldr	r3, [pc, #588]	; (8001fc8 <__aeabi_dsub+0x6f0>)
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	401a      	ands	r2, r3
 8001d80:	0013      	movs	r3, r2
 8001d82:	4021      	ands	r1, r4
 8001d84:	0862      	lsrs	r2, r4, #1
 8001d86:	430a      	orrs	r2, r1
 8001d88:	07dc      	lsls	r4, r3, #31
 8001d8a:	085b      	lsrs	r3, r3, #1
 8001d8c:	469a      	mov	sl, r3
 8001d8e:	4314      	orrs	r4, r2
 8001d90:	e62c      	b.n	80019ec <__aeabi_dsub+0x114>
 8001d92:	0039      	movs	r1, r7
 8001d94:	3a20      	subs	r2, #32
 8001d96:	40d1      	lsrs	r1, r2
 8001d98:	4662      	mov	r2, ip
 8001d9a:	2a20      	cmp	r2, #32
 8001d9c:	d006      	beq.n	8001dac <__aeabi_dsub+0x4d4>
 8001d9e:	4664      	mov	r4, ip
 8001da0:	2240      	movs	r2, #64	; 0x40
 8001da2:	1b12      	subs	r2, r2, r4
 8001da4:	003c      	movs	r4, r7
 8001da6:	4094      	lsls	r4, r2
 8001da8:	4304      	orrs	r4, r0
 8001daa:	9401      	str	r4, [sp, #4]
 8001dac:	9c01      	ldr	r4, [sp, #4]
 8001dae:	1e62      	subs	r2, r4, #1
 8001db0:	4194      	sbcs	r4, r2
 8001db2:	430c      	orrs	r4, r1
 8001db4:	e5e3      	b.n	800197e <__aeabi_dsub+0xa6>
 8001db6:	4649      	mov	r1, r9
 8001db8:	4319      	orrs	r1, r3
 8001dba:	000b      	movs	r3, r1
 8001dbc:	1e5c      	subs	r4, r3, #1
 8001dbe:	41a3      	sbcs	r3, r4
 8001dc0:	1ac4      	subs	r4, r0, r3
 8001dc2:	42a0      	cmp	r0, r4
 8001dc4:	419b      	sbcs	r3, r3
 8001dc6:	425b      	negs	r3, r3
 8001dc8:	1afb      	subs	r3, r7, r3
 8001dca:	469a      	mov	sl, r3
 8001dcc:	465d      	mov	r5, fp
 8001dce:	0016      	movs	r6, r2
 8001dd0:	e5dc      	b.n	800198c <__aeabi_dsub+0xb4>
 8001dd2:	4649      	mov	r1, r9
 8001dd4:	4319      	orrs	r1, r3
 8001dd6:	d100      	bne.n	8001dda <__aeabi_dsub+0x502>
 8001dd8:	e0ae      	b.n	8001f38 <__aeabi_dsub+0x660>
 8001dda:	4661      	mov	r1, ip
 8001ddc:	4664      	mov	r4, ip
 8001dde:	3901      	subs	r1, #1
 8001de0:	2c01      	cmp	r4, #1
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x50e>
 8001de4:	e0e0      	b.n	8001fa8 <__aeabi_dsub+0x6d0>
 8001de6:	4c77      	ldr	r4, [pc, #476]	; (8001fc4 <__aeabi_dsub+0x6ec>)
 8001de8:	45a4      	cmp	ip, r4
 8001dea:	d056      	beq.n	8001e9a <__aeabi_dsub+0x5c2>
 8001dec:	468c      	mov	ip, r1
 8001dee:	e69a      	b.n	8001b26 <__aeabi_dsub+0x24e>
 8001df0:	4661      	mov	r1, ip
 8001df2:	2220      	movs	r2, #32
 8001df4:	003c      	movs	r4, r7
 8001df6:	1a52      	subs	r2, r2, r1
 8001df8:	4094      	lsls	r4, r2
 8001dfa:	0001      	movs	r1, r0
 8001dfc:	4090      	lsls	r0, r2
 8001dfe:	46a0      	mov	r8, r4
 8001e00:	4664      	mov	r4, ip
 8001e02:	1e42      	subs	r2, r0, #1
 8001e04:	4190      	sbcs	r0, r2
 8001e06:	4662      	mov	r2, ip
 8001e08:	40e1      	lsrs	r1, r4
 8001e0a:	4644      	mov	r4, r8
 8001e0c:	40d7      	lsrs	r7, r2
 8001e0e:	430c      	orrs	r4, r1
 8001e10:	4304      	orrs	r4, r0
 8001e12:	44b9      	add	r9, r7
 8001e14:	e701      	b.n	8001c1a <__aeabi_dsub+0x342>
 8001e16:	496b      	ldr	r1, [pc, #428]	; (8001fc4 <__aeabi_dsub+0x6ec>)
 8001e18:	428a      	cmp	r2, r1
 8001e1a:	d100      	bne.n	8001e1e <__aeabi_dsub+0x546>
 8001e1c:	e70c      	b.n	8001c38 <__aeabi_dsub+0x360>
 8001e1e:	1818      	adds	r0, r3, r0
 8001e20:	4298      	cmp	r0, r3
 8001e22:	419b      	sbcs	r3, r3
 8001e24:	444f      	add	r7, r9
 8001e26:	425b      	negs	r3, r3
 8001e28:	18fb      	adds	r3, r7, r3
 8001e2a:	07dc      	lsls	r4, r3, #31
 8001e2c:	0840      	lsrs	r0, r0, #1
 8001e2e:	085b      	lsrs	r3, r3, #1
 8001e30:	469a      	mov	sl, r3
 8001e32:	0016      	movs	r6, r2
 8001e34:	4304      	orrs	r4, r0
 8001e36:	e6d9      	b.n	8001bec <__aeabi_dsub+0x314>
 8001e38:	2a00      	cmp	r2, #0
 8001e3a:	d000      	beq.n	8001e3e <__aeabi_dsub+0x566>
 8001e3c:	e081      	b.n	8001f42 <__aeabi_dsub+0x66a>
 8001e3e:	003b      	movs	r3, r7
 8001e40:	4303      	orrs	r3, r0
 8001e42:	d11d      	bne.n	8001e80 <__aeabi_dsub+0x5a8>
 8001e44:	2280      	movs	r2, #128	; 0x80
 8001e46:	2500      	movs	r5, #0
 8001e48:	0312      	lsls	r2, r2, #12
 8001e4a:	e70b      	b.n	8001c64 <__aeabi_dsub+0x38c>
 8001e4c:	08c0      	lsrs	r0, r0, #3
 8001e4e:	077b      	lsls	r3, r7, #29
 8001e50:	465d      	mov	r5, fp
 8001e52:	4303      	orrs	r3, r0
 8001e54:	08fa      	lsrs	r2, r7, #3
 8001e56:	e6d3      	b.n	8001c00 <__aeabi_dsub+0x328>
 8001e58:	1ac4      	subs	r4, r0, r3
 8001e5a:	42a0      	cmp	r0, r4
 8001e5c:	4180      	sbcs	r0, r0
 8001e5e:	464b      	mov	r3, r9
 8001e60:	4240      	negs	r0, r0
 8001e62:	1aff      	subs	r7, r7, r3
 8001e64:	1a3b      	subs	r3, r7, r0
 8001e66:	469a      	mov	sl, r3
 8001e68:	465d      	mov	r5, fp
 8001e6a:	e597      	b.n	800199c <__aeabi_dsub+0xc4>
 8001e6c:	1a1c      	subs	r4, r3, r0
 8001e6e:	464a      	mov	r2, r9
 8001e70:	42a3      	cmp	r3, r4
 8001e72:	419b      	sbcs	r3, r3
 8001e74:	1bd7      	subs	r7, r2, r7
 8001e76:	425b      	negs	r3, r3
 8001e78:	1afb      	subs	r3, r7, r3
 8001e7a:	469a      	mov	sl, r3
 8001e7c:	2601      	movs	r6, #1
 8001e7e:	e585      	b.n	800198c <__aeabi_dsub+0xb4>
 8001e80:	08c0      	lsrs	r0, r0, #3
 8001e82:	077b      	lsls	r3, r7, #29
 8001e84:	465d      	mov	r5, fp
 8001e86:	4303      	orrs	r3, r0
 8001e88:	08fa      	lsrs	r2, r7, #3
 8001e8a:	e6e7      	b.n	8001c5c <__aeabi_dsub+0x384>
 8001e8c:	464a      	mov	r2, r9
 8001e8e:	08db      	lsrs	r3, r3, #3
 8001e90:	0752      	lsls	r2, r2, #29
 8001e92:	4313      	orrs	r3, r2
 8001e94:	464a      	mov	r2, r9
 8001e96:	08d2      	lsrs	r2, r2, #3
 8001e98:	e6b5      	b.n	8001c06 <__aeabi_dsub+0x32e>
 8001e9a:	08c0      	lsrs	r0, r0, #3
 8001e9c:	077b      	lsls	r3, r7, #29
 8001e9e:	4303      	orrs	r3, r0
 8001ea0:	08fa      	lsrs	r2, r7, #3
 8001ea2:	e6db      	b.n	8001c5c <__aeabi_dsub+0x384>
 8001ea4:	4649      	mov	r1, r9
 8001ea6:	4319      	orrs	r1, r3
 8001ea8:	000b      	movs	r3, r1
 8001eaa:	1e59      	subs	r1, r3, #1
 8001eac:	418b      	sbcs	r3, r1
 8001eae:	001c      	movs	r4, r3
 8001eb0:	e653      	b.n	8001b5a <__aeabi_dsub+0x282>
 8001eb2:	464d      	mov	r5, r9
 8001eb4:	3c20      	subs	r4, #32
 8001eb6:	40e5      	lsrs	r5, r4
 8001eb8:	2920      	cmp	r1, #32
 8001eba:	d005      	beq.n	8001ec8 <__aeabi_dsub+0x5f0>
 8001ebc:	2440      	movs	r4, #64	; 0x40
 8001ebe:	1a64      	subs	r4, r4, r1
 8001ec0:	4649      	mov	r1, r9
 8001ec2:	40a1      	lsls	r1, r4
 8001ec4:	430b      	orrs	r3, r1
 8001ec6:	4698      	mov	r8, r3
 8001ec8:	4643      	mov	r3, r8
 8001eca:	1e5c      	subs	r4, r3, #1
 8001ecc:	41a3      	sbcs	r3, r4
 8001ece:	432b      	orrs	r3, r5
 8001ed0:	e776      	b.n	8001dc0 <__aeabi_dsub+0x4e8>
 8001ed2:	2a00      	cmp	r2, #0
 8001ed4:	d0e1      	beq.n	8001e9a <__aeabi_dsub+0x5c2>
 8001ed6:	003a      	movs	r2, r7
 8001ed8:	08db      	lsrs	r3, r3, #3
 8001eda:	4302      	orrs	r2, r0
 8001edc:	d100      	bne.n	8001ee0 <__aeabi_dsub+0x608>
 8001ede:	e6b8      	b.n	8001c52 <__aeabi_dsub+0x37a>
 8001ee0:	464a      	mov	r2, r9
 8001ee2:	0752      	lsls	r2, r2, #29
 8001ee4:	2480      	movs	r4, #128	; 0x80
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	464a      	mov	r2, r9
 8001eea:	0324      	lsls	r4, r4, #12
 8001eec:	08d2      	lsrs	r2, r2, #3
 8001eee:	4222      	tst	r2, r4
 8001ef0:	d007      	beq.n	8001f02 <__aeabi_dsub+0x62a>
 8001ef2:	08fe      	lsrs	r6, r7, #3
 8001ef4:	4226      	tst	r6, r4
 8001ef6:	d104      	bne.n	8001f02 <__aeabi_dsub+0x62a>
 8001ef8:	465d      	mov	r5, fp
 8001efa:	0032      	movs	r2, r6
 8001efc:	08c3      	lsrs	r3, r0, #3
 8001efe:	077f      	lsls	r7, r7, #29
 8001f00:	433b      	orrs	r3, r7
 8001f02:	0f59      	lsrs	r1, r3, #29
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	0749      	lsls	r1, r1, #29
 8001f08:	08db      	lsrs	r3, r3, #3
 8001f0a:	430b      	orrs	r3, r1
 8001f0c:	e6a6      	b.n	8001c5c <__aeabi_dsub+0x384>
 8001f0e:	1ac4      	subs	r4, r0, r3
 8001f10:	42a0      	cmp	r0, r4
 8001f12:	4180      	sbcs	r0, r0
 8001f14:	464b      	mov	r3, r9
 8001f16:	4240      	negs	r0, r0
 8001f18:	1aff      	subs	r7, r7, r3
 8001f1a:	1a3b      	subs	r3, r7, r0
 8001f1c:	469a      	mov	sl, r3
 8001f1e:	465d      	mov	r5, fp
 8001f20:	2601      	movs	r6, #1
 8001f22:	e533      	b.n	800198c <__aeabi_dsub+0xb4>
 8001f24:	003b      	movs	r3, r7
 8001f26:	4303      	orrs	r3, r0
 8001f28:	d100      	bne.n	8001f2c <__aeabi_dsub+0x654>
 8001f2a:	e715      	b.n	8001d58 <__aeabi_dsub+0x480>
 8001f2c:	08c0      	lsrs	r0, r0, #3
 8001f2e:	077b      	lsls	r3, r7, #29
 8001f30:	465d      	mov	r5, fp
 8001f32:	4303      	orrs	r3, r0
 8001f34:	08fa      	lsrs	r2, r7, #3
 8001f36:	e666      	b.n	8001c06 <__aeabi_dsub+0x32e>
 8001f38:	08c0      	lsrs	r0, r0, #3
 8001f3a:	077b      	lsls	r3, r7, #29
 8001f3c:	4303      	orrs	r3, r0
 8001f3e:	08fa      	lsrs	r2, r7, #3
 8001f40:	e65e      	b.n	8001c00 <__aeabi_dsub+0x328>
 8001f42:	003a      	movs	r2, r7
 8001f44:	08db      	lsrs	r3, r3, #3
 8001f46:	4302      	orrs	r2, r0
 8001f48:	d100      	bne.n	8001f4c <__aeabi_dsub+0x674>
 8001f4a:	e682      	b.n	8001c52 <__aeabi_dsub+0x37a>
 8001f4c:	464a      	mov	r2, r9
 8001f4e:	0752      	lsls	r2, r2, #29
 8001f50:	2480      	movs	r4, #128	; 0x80
 8001f52:	4313      	orrs	r3, r2
 8001f54:	464a      	mov	r2, r9
 8001f56:	0324      	lsls	r4, r4, #12
 8001f58:	08d2      	lsrs	r2, r2, #3
 8001f5a:	4222      	tst	r2, r4
 8001f5c:	d007      	beq.n	8001f6e <__aeabi_dsub+0x696>
 8001f5e:	08fe      	lsrs	r6, r7, #3
 8001f60:	4226      	tst	r6, r4
 8001f62:	d104      	bne.n	8001f6e <__aeabi_dsub+0x696>
 8001f64:	465d      	mov	r5, fp
 8001f66:	0032      	movs	r2, r6
 8001f68:	08c3      	lsrs	r3, r0, #3
 8001f6a:	077f      	lsls	r7, r7, #29
 8001f6c:	433b      	orrs	r3, r7
 8001f6e:	0f59      	lsrs	r1, r3, #29
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	08db      	lsrs	r3, r3, #3
 8001f74:	0749      	lsls	r1, r1, #29
 8001f76:	430b      	orrs	r3, r1
 8001f78:	e670      	b.n	8001c5c <__aeabi_dsub+0x384>
 8001f7a:	08c0      	lsrs	r0, r0, #3
 8001f7c:	077b      	lsls	r3, r7, #29
 8001f7e:	4303      	orrs	r3, r0
 8001f80:	08fa      	lsrs	r2, r7, #3
 8001f82:	e640      	b.n	8001c06 <__aeabi_dsub+0x32e>
 8001f84:	464c      	mov	r4, r9
 8001f86:	3920      	subs	r1, #32
 8001f88:	40cc      	lsrs	r4, r1
 8001f8a:	4661      	mov	r1, ip
 8001f8c:	2920      	cmp	r1, #32
 8001f8e:	d006      	beq.n	8001f9e <__aeabi_dsub+0x6c6>
 8001f90:	4666      	mov	r6, ip
 8001f92:	2140      	movs	r1, #64	; 0x40
 8001f94:	1b89      	subs	r1, r1, r6
 8001f96:	464e      	mov	r6, r9
 8001f98:	408e      	lsls	r6, r1
 8001f9a:	4333      	orrs	r3, r6
 8001f9c:	4698      	mov	r8, r3
 8001f9e:	4643      	mov	r3, r8
 8001fa0:	1e59      	subs	r1, r3, #1
 8001fa2:	418b      	sbcs	r3, r1
 8001fa4:	431c      	orrs	r4, r3
 8001fa6:	e5d8      	b.n	8001b5a <__aeabi_dsub+0x282>
 8001fa8:	181c      	adds	r4, r3, r0
 8001faa:	4284      	cmp	r4, r0
 8001fac:	4180      	sbcs	r0, r0
 8001fae:	444f      	add	r7, r9
 8001fb0:	46ba      	mov	sl, r7
 8001fb2:	4240      	negs	r0, r0
 8001fb4:	4482      	add	sl, r0
 8001fb6:	e6d9      	b.n	8001d6c <__aeabi_dsub+0x494>
 8001fb8:	4653      	mov	r3, sl
 8001fba:	4323      	orrs	r3, r4
 8001fbc:	d100      	bne.n	8001fc0 <__aeabi_dsub+0x6e8>
 8001fbe:	e6cb      	b.n	8001d58 <__aeabi_dsub+0x480>
 8001fc0:	e614      	b.n	8001bec <__aeabi_dsub+0x314>
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	000007ff 	.word	0x000007ff
 8001fc8:	ff7fffff 	.word	0xff7fffff
 8001fcc:	000007fe 	.word	0x000007fe
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	4a01      	ldr	r2, [pc, #4]	; (8001fd8 <__aeabi_dsub+0x700>)
 8001fd4:	001c      	movs	r4, r3
 8001fd6:	e529      	b.n	8001a2c <__aeabi_dsub+0x154>
 8001fd8:	000007ff 	.word	0x000007ff

08001fdc <__aeabi_dcmpun>:
 8001fdc:	b570      	push	{r4, r5, r6, lr}
 8001fde:	0005      	movs	r5, r0
 8001fe0:	480c      	ldr	r0, [pc, #48]	; (8002014 <__aeabi_dcmpun+0x38>)
 8001fe2:	031c      	lsls	r4, r3, #12
 8001fe4:	0016      	movs	r6, r2
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	030a      	lsls	r2, r1, #12
 8001fea:	0049      	lsls	r1, r1, #1
 8001fec:	0b12      	lsrs	r2, r2, #12
 8001fee:	0d49      	lsrs	r1, r1, #21
 8001ff0:	0b24      	lsrs	r4, r4, #12
 8001ff2:	0d5b      	lsrs	r3, r3, #21
 8001ff4:	4281      	cmp	r1, r0
 8001ff6:	d008      	beq.n	800200a <__aeabi_dcmpun+0x2e>
 8001ff8:	4a06      	ldr	r2, [pc, #24]	; (8002014 <__aeabi_dcmpun+0x38>)
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d103      	bne.n	8002008 <__aeabi_dcmpun+0x2c>
 8002000:	0020      	movs	r0, r4
 8002002:	4330      	orrs	r0, r6
 8002004:	1e43      	subs	r3, r0, #1
 8002006:	4198      	sbcs	r0, r3
 8002008:	bd70      	pop	{r4, r5, r6, pc}
 800200a:	2001      	movs	r0, #1
 800200c:	432a      	orrs	r2, r5
 800200e:	d1fb      	bne.n	8002008 <__aeabi_dcmpun+0x2c>
 8002010:	e7f2      	b.n	8001ff8 <__aeabi_dcmpun+0x1c>
 8002012:	46c0      	nop			; (mov r8, r8)
 8002014:	000007ff 	.word	0x000007ff

08002018 <__aeabi_d2iz>:
 8002018:	000a      	movs	r2, r1
 800201a:	b530      	push	{r4, r5, lr}
 800201c:	4c13      	ldr	r4, [pc, #76]	; (800206c <__aeabi_d2iz+0x54>)
 800201e:	0053      	lsls	r3, r2, #1
 8002020:	0309      	lsls	r1, r1, #12
 8002022:	0005      	movs	r5, r0
 8002024:	0b09      	lsrs	r1, r1, #12
 8002026:	2000      	movs	r0, #0
 8002028:	0d5b      	lsrs	r3, r3, #21
 800202a:	0fd2      	lsrs	r2, r2, #31
 800202c:	42a3      	cmp	r3, r4
 800202e:	dd04      	ble.n	800203a <__aeabi_d2iz+0x22>
 8002030:	480f      	ldr	r0, [pc, #60]	; (8002070 <__aeabi_d2iz+0x58>)
 8002032:	4283      	cmp	r3, r0
 8002034:	dd02      	ble.n	800203c <__aeabi_d2iz+0x24>
 8002036:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <__aeabi_d2iz+0x5c>)
 8002038:	18d0      	adds	r0, r2, r3
 800203a:	bd30      	pop	{r4, r5, pc}
 800203c:	2080      	movs	r0, #128	; 0x80
 800203e:	0340      	lsls	r0, r0, #13
 8002040:	4301      	orrs	r1, r0
 8002042:	480d      	ldr	r0, [pc, #52]	; (8002078 <__aeabi_d2iz+0x60>)
 8002044:	1ac0      	subs	r0, r0, r3
 8002046:	281f      	cmp	r0, #31
 8002048:	dd08      	ble.n	800205c <__aeabi_d2iz+0x44>
 800204a:	480c      	ldr	r0, [pc, #48]	; (800207c <__aeabi_d2iz+0x64>)
 800204c:	1ac3      	subs	r3, r0, r3
 800204e:	40d9      	lsrs	r1, r3
 8002050:	000b      	movs	r3, r1
 8002052:	4258      	negs	r0, r3
 8002054:	2a00      	cmp	r2, #0
 8002056:	d1f0      	bne.n	800203a <__aeabi_d2iz+0x22>
 8002058:	0018      	movs	r0, r3
 800205a:	e7ee      	b.n	800203a <__aeabi_d2iz+0x22>
 800205c:	4c08      	ldr	r4, [pc, #32]	; (8002080 <__aeabi_d2iz+0x68>)
 800205e:	40c5      	lsrs	r5, r0
 8002060:	46a4      	mov	ip, r4
 8002062:	4463      	add	r3, ip
 8002064:	4099      	lsls	r1, r3
 8002066:	000b      	movs	r3, r1
 8002068:	432b      	orrs	r3, r5
 800206a:	e7f2      	b.n	8002052 <__aeabi_d2iz+0x3a>
 800206c:	000003fe 	.word	0x000003fe
 8002070:	0000041d 	.word	0x0000041d
 8002074:	7fffffff 	.word	0x7fffffff
 8002078:	00000433 	.word	0x00000433
 800207c:	00000413 	.word	0x00000413
 8002080:	fffffbed 	.word	0xfffffbed

08002084 <__aeabi_i2d>:
 8002084:	b570      	push	{r4, r5, r6, lr}
 8002086:	2800      	cmp	r0, #0
 8002088:	d016      	beq.n	80020b8 <__aeabi_i2d+0x34>
 800208a:	17c3      	asrs	r3, r0, #31
 800208c:	18c5      	adds	r5, r0, r3
 800208e:	405d      	eors	r5, r3
 8002090:	0fc4      	lsrs	r4, r0, #31
 8002092:	0028      	movs	r0, r5
 8002094:	f000 f84c 	bl	8002130 <__clzsi2>
 8002098:	4b11      	ldr	r3, [pc, #68]	; (80020e0 <__aeabi_i2d+0x5c>)
 800209a:	1a1b      	subs	r3, r3, r0
 800209c:	280a      	cmp	r0, #10
 800209e:	dc16      	bgt.n	80020ce <__aeabi_i2d+0x4a>
 80020a0:	0002      	movs	r2, r0
 80020a2:	002e      	movs	r6, r5
 80020a4:	3215      	adds	r2, #21
 80020a6:	4096      	lsls	r6, r2
 80020a8:	220b      	movs	r2, #11
 80020aa:	1a12      	subs	r2, r2, r0
 80020ac:	40d5      	lsrs	r5, r2
 80020ae:	055b      	lsls	r3, r3, #21
 80020b0:	032d      	lsls	r5, r5, #12
 80020b2:	0b2d      	lsrs	r5, r5, #12
 80020b4:	0d5b      	lsrs	r3, r3, #21
 80020b6:	e003      	b.n	80020c0 <__aeabi_i2d+0x3c>
 80020b8:	2400      	movs	r4, #0
 80020ba:	2300      	movs	r3, #0
 80020bc:	2500      	movs	r5, #0
 80020be:	2600      	movs	r6, #0
 80020c0:	051b      	lsls	r3, r3, #20
 80020c2:	432b      	orrs	r3, r5
 80020c4:	07e4      	lsls	r4, r4, #31
 80020c6:	4323      	orrs	r3, r4
 80020c8:	0030      	movs	r0, r6
 80020ca:	0019      	movs	r1, r3
 80020cc:	bd70      	pop	{r4, r5, r6, pc}
 80020ce:	380b      	subs	r0, #11
 80020d0:	4085      	lsls	r5, r0
 80020d2:	055b      	lsls	r3, r3, #21
 80020d4:	032d      	lsls	r5, r5, #12
 80020d6:	2600      	movs	r6, #0
 80020d8:	0b2d      	lsrs	r5, r5, #12
 80020da:	0d5b      	lsrs	r3, r3, #21
 80020dc:	e7f0      	b.n	80020c0 <__aeabi_i2d+0x3c>
 80020de:	46c0      	nop			; (mov r8, r8)
 80020e0:	0000041e 	.word	0x0000041e

080020e4 <__aeabi_ui2d>:
 80020e4:	b510      	push	{r4, lr}
 80020e6:	1e04      	subs	r4, r0, #0
 80020e8:	d010      	beq.n	800210c <__aeabi_ui2d+0x28>
 80020ea:	f000 f821 	bl	8002130 <__clzsi2>
 80020ee:	4b0f      	ldr	r3, [pc, #60]	; (800212c <__aeabi_ui2d+0x48>)
 80020f0:	1a1b      	subs	r3, r3, r0
 80020f2:	280a      	cmp	r0, #10
 80020f4:	dc11      	bgt.n	800211a <__aeabi_ui2d+0x36>
 80020f6:	220b      	movs	r2, #11
 80020f8:	0021      	movs	r1, r4
 80020fa:	1a12      	subs	r2, r2, r0
 80020fc:	40d1      	lsrs	r1, r2
 80020fe:	3015      	adds	r0, #21
 8002100:	030a      	lsls	r2, r1, #12
 8002102:	055b      	lsls	r3, r3, #21
 8002104:	4084      	lsls	r4, r0
 8002106:	0b12      	lsrs	r2, r2, #12
 8002108:	0d5b      	lsrs	r3, r3, #21
 800210a:	e001      	b.n	8002110 <__aeabi_ui2d+0x2c>
 800210c:	2300      	movs	r3, #0
 800210e:	2200      	movs	r2, #0
 8002110:	051b      	lsls	r3, r3, #20
 8002112:	4313      	orrs	r3, r2
 8002114:	0020      	movs	r0, r4
 8002116:	0019      	movs	r1, r3
 8002118:	bd10      	pop	{r4, pc}
 800211a:	0022      	movs	r2, r4
 800211c:	380b      	subs	r0, #11
 800211e:	4082      	lsls	r2, r0
 8002120:	055b      	lsls	r3, r3, #21
 8002122:	0312      	lsls	r2, r2, #12
 8002124:	2400      	movs	r4, #0
 8002126:	0b12      	lsrs	r2, r2, #12
 8002128:	0d5b      	lsrs	r3, r3, #21
 800212a:	e7f1      	b.n	8002110 <__aeabi_ui2d+0x2c>
 800212c:	0000041e 	.word	0x0000041e

08002130 <__clzsi2>:
 8002130:	211c      	movs	r1, #28
 8002132:	2301      	movs	r3, #1
 8002134:	041b      	lsls	r3, r3, #16
 8002136:	4298      	cmp	r0, r3
 8002138:	d301      	bcc.n	800213e <__clzsi2+0xe>
 800213a:	0c00      	lsrs	r0, r0, #16
 800213c:	3910      	subs	r1, #16
 800213e:	0a1b      	lsrs	r3, r3, #8
 8002140:	4298      	cmp	r0, r3
 8002142:	d301      	bcc.n	8002148 <__clzsi2+0x18>
 8002144:	0a00      	lsrs	r0, r0, #8
 8002146:	3908      	subs	r1, #8
 8002148:	091b      	lsrs	r3, r3, #4
 800214a:	4298      	cmp	r0, r3
 800214c:	d301      	bcc.n	8002152 <__clzsi2+0x22>
 800214e:	0900      	lsrs	r0, r0, #4
 8002150:	3904      	subs	r1, #4
 8002152:	a202      	add	r2, pc, #8	; (adr r2, 800215c <__clzsi2+0x2c>)
 8002154:	5c10      	ldrb	r0, [r2, r0]
 8002156:	1840      	adds	r0, r0, r1
 8002158:	4770      	bx	lr
 800215a:	46c0      	nop			; (mov r8, r8)
 800215c:	02020304 	.word	0x02020304
 8002160:	01010101 	.word	0x01010101
	...

0800216c <MX_BlueNRG_2_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_2_Init(void)
{
 800216c:	b590      	push	{r4, r7, lr}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
  /* USER CODE END BlueNRG_2_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  uint8_t ret;

  User_Init();
 8002172:	f000 faa5 	bl	80026c0 <User_Init>

  hci_init(APP_UserEvtRx, NULL);
 8002176:	4b11      	ldr	r3, [pc, #68]	; (80021bc <MX_BlueNRG_2_Init+0x50>)
 8002178:	2100      	movs	r1, #0
 800217a:	0018      	movs	r0, r3
 800217c:	f00a ff6a 	bl	800d054 <hci_init>

  PRINT_DBG("BlueNRG-2 BLE Sample Application\r\n");
 8002180:	4b0f      	ldr	r3, [pc, #60]	; (80021c0 <MX_BlueNRG_2_Init+0x54>)
 8002182:	0018      	movs	r0, r3
 8002184:	f00c f912 	bl	800e3ac <puts>

  /* Init Sample App Device */
  ret = SampleAppInit();
 8002188:	1dfc      	adds	r4, r7, #7
 800218a:	f000 fa39 	bl	8002600 <SampleAppInit>
 800218e:	0003      	movs	r3, r0
 8002190:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
 8002192:	1dfb      	adds	r3, r7, #7
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d007      	beq.n	80021aa <MX_BlueNRG_2_Init+0x3e>
  {
    PRINT_DBG("SampleAppInit()--> Failed 0x%02x\r\n", ret);
 800219a:	1dfb      	adds	r3, r7, #7
 800219c:	781a      	ldrb	r2, [r3, #0]
 800219e:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <MX_BlueNRG_2_Init+0x58>)
 80021a0:	0011      	movs	r1, r2
 80021a2:	0018      	movs	r0, r3
 80021a4:	f00c f892 	bl	800e2cc <iprintf>
    while(1);
 80021a8:	e7fe      	b.n	80021a8 <MX_BlueNRG_2_Init+0x3c>
  }

  PRINT_DBG("BLE Stack Initialized & Device Configured\r\n");
 80021aa:	4b07      	ldr	r3, [pc, #28]	; (80021c8 <MX_BlueNRG_2_Init+0x5c>)
 80021ac:	0018      	movs	r0, r3
 80021ae:	f00c f8fd 	bl	800e3ac <puts>

  /* USER CODE BEGIN BlueNRG_2_Init_PostTreatment */

  /* USER CODE END BlueNRG_2_Init_PostTreatment */
}
 80021b2:	46c0      	nop			; (mov r8, r8)
 80021b4:	46bd      	mov	sp, r7
 80021b6:	b003      	add	sp, #12
 80021b8:	bd90      	pop	{r4, r7, pc}
 80021ba:	46c0      	nop			; (mov r8, r8)
 80021bc:	08003399 	.word	0x08003399
 80021c0:	08010368 	.word	0x08010368
 80021c4:	0801038c 	.word	0x0801038c
 80021c8:	080103b0 	.word	0x080103b0

080021cc <MX_BlueNRG_2_Process>:

/*
 * BlueNRG-2 background task
 */
void MX_BlueNRG_2_Process(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_2_Process_PreTreatment */

  /* USER CODE END BlueNRG_2_Process_PreTreatment */

  hci_user_evt_proc();
 80021d0:	f00b f8d8 	bl	800d384 <hci_user_evt_proc>
  User_Process();
 80021d4:	f000 fc0c 	bl	80029f0 <User_Process>

  /* USER CODE BEGIN BlueNRG_2_Process_PostTreatment */

  /* USER CODE END BlueNRG_2_Process_PostTreatment */
}
 80021d8:	46c0      	nop			; (mov r8, r8)
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
	...

080021e0 <sendData>:
 * @param  data_buffer : pointer to data to be sent
 * @param  Nb_bytes : number of bytes to send
 * @retval None
 */
static void sendData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 80021e0:	b590      	push	{r4, r7, lr}
 80021e2:	b089      	sub	sp, #36	; 0x24
 80021e4:	af04      	add	r7, sp, #16
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	000a      	movs	r2, r1
 80021ea:	1cfb      	adds	r3, r7, #3
 80021ec:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80021ee:	f002 fcd5 	bl	8004b9c <HAL_GetTick>
 80021f2:	0003      	movs	r3, r0
 80021f4:	60fb      	str	r3, [r7, #12]

  if(device_role == SLAVE_ROLE)
 80021f6:	4b2c      	ldr	r3, [pc, #176]	; (80022a8 <sendData+0xc8>)
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d13d      	bne.n	800227a <sendData+0x9a>
  {
    while(aci_gatt_update_char_value_ext(connection_handle,
 80021fe:	e018      	b.n	8002232 <sendData+0x52>
                                         sampleServHandle,
                                         TXCharHandle,
                                         1, Nb_bytes, 0 ,Nb_bytes, data_buffer) == BLE_STATUS_INSUFFICIENT_RESOURCES)
    {
      APP_FLAG_SET(TX_BUFFER_FULL);
 8002200:	4b2a      	ldr	r3, [pc, #168]	; (80022ac <sendData+0xcc>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2280      	movs	r2, #128	; 0x80
 8002206:	0212      	lsls	r2, r2, #8
 8002208:	431a      	orrs	r2, r3
 800220a:	4b28      	ldr	r3, [pc, #160]	; (80022ac <sendData+0xcc>)
 800220c:	601a      	str	r2, [r3, #0]
      while(APP_FLAG(TX_BUFFER_FULL)) {
 800220e:	e00a      	b.n	8002226 <sendData+0x46>
        hci_user_evt_proc();
 8002210:	f00b f8b8 	bl	800d384 <hci_user_evt_proc>
        // Radio is busy (buffer full).
        if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 8002214:	f002 fcc2 	bl	8004b9c <HAL_GetTick>
 8002218:	0002      	movs	r2, r0
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	4a24      	ldr	r2, [pc, #144]	; (80022b0 <sendData+0xd0>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d900      	bls.n	8002226 <sendData+0x46>
 8002224:	e005      	b.n	8002232 <sendData+0x52>
      while(APP_FLAG(TX_BUFFER_FULL)) {
 8002226:	4b21      	ldr	r3, [pc, #132]	; (80022ac <sendData+0xcc>)
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	2380      	movs	r3, #128	; 0x80
 800222c:	021b      	lsls	r3, r3, #8
 800222e:	4013      	ands	r3, r2
 8002230:	d1ee      	bne.n	8002210 <sendData+0x30>
    while(aci_gatt_update_char_value_ext(connection_handle,
 8002232:	4b20      	ldr	r3, [pc, #128]	; (80022b4 <sendData+0xd4>)
 8002234:	881b      	ldrh	r3, [r3, #0]
 8002236:	b298      	uxth	r0, r3
 8002238:	4b1f      	ldr	r3, [pc, #124]	; (80022b8 <sendData+0xd8>)
 800223a:	8819      	ldrh	r1, [r3, #0]
 800223c:	4b1f      	ldr	r3, [pc, #124]	; (80022bc <sendData+0xdc>)
 800223e:	881c      	ldrh	r4, [r3, #0]
 8002240:	1cfb      	adds	r3, r7, #3
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	b29b      	uxth	r3, r3
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	9203      	str	r2, [sp, #12]
 800224a:	1cfa      	adds	r2, r7, #3
 800224c:	7812      	ldrb	r2, [r2, #0]
 800224e:	9202      	str	r2, [sp, #8]
 8002250:	2200      	movs	r2, #0
 8002252:	9201      	str	r2, [sp, #4]
 8002254:	9300      	str	r3, [sp, #0]
 8002256:	2301      	movs	r3, #1
 8002258:	0022      	movs	r2, r4
 800225a:	f00a fc13 	bl	800ca84 <aci_gatt_update_char_value_ext>
 800225e:	0003      	movs	r3, r0
                                         1, Nb_bytes, 0 ,Nb_bytes, data_buffer) == BLE_STATUS_INSUFFICIENT_RESOURCES)
 8002260:	2b64      	cmp	r3, #100	; 0x64
 8002262:	d0cd      	beq.n	8002200 <sendData+0x20>
      hci_user_evt_proc();
      // Radio is busy (buffer full).
      if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
    }
  }
}
 8002264:	e01b      	b.n	800229e <sendData+0xbe>
      hci_user_evt_proc();
 8002266:	f00b f88d 	bl	800d384 <hci_user_evt_proc>
      if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 800226a:	f002 fc97 	bl	8004b9c <HAL_GetTick>
 800226e:	0002      	movs	r2, r0
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	4a0e      	ldr	r2, [pc, #56]	; (80022b0 <sendData+0xd0>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d810      	bhi.n	800229c <sendData+0xbc>
    while(aci_gatt_write_without_resp(connection_handle, rx_handle+1, Nb_bytes, data_buffer)==BLE_STATUS_NOT_ALLOWED)
 800227a:	4b0e      	ldr	r3, [pc, #56]	; (80022b4 <sendData+0xd4>)
 800227c:	881b      	ldrh	r3, [r3, #0]
 800227e:	b298      	uxth	r0, r3
 8002280:	4b0f      	ldr	r3, [pc, #60]	; (80022c0 <sendData+0xe0>)
 8002282:	881b      	ldrh	r3, [r3, #0]
 8002284:	3301      	adds	r3, #1
 8002286:	b299      	uxth	r1, r3
 8002288:	687c      	ldr	r4, [r7, #4]
 800228a:	1cfb      	adds	r3, r7, #3
 800228c:	781a      	ldrb	r2, [r3, #0]
 800228e:	0023      	movs	r3, r4
 8002290:	f00a fb34 	bl	800c8fc <aci_gatt_write_without_resp>
 8002294:	0003      	movs	r3, r0
 8002296:	2b46      	cmp	r3, #70	; 0x46
 8002298:	d0e5      	beq.n	8002266 <sendData+0x86>
}
 800229a:	e000      	b.n	800229e <sendData+0xbe>
      if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 800229c:	46c0      	nop			; (mov r8, r8)
}
 800229e:	46c0      	nop			; (mov r8, r8)
 80022a0:	46bd      	mov	sp, r7
 80022a2:	b005      	add	sp, #20
 80022a4:	bd90      	pop	{r4, r7, pc}
 80022a6:	46c0      	nop			; (mov r8, r8)
 80022a8:	20000004 	.word	0x20000004
 80022ac:	20000000 	.word	0x20000000
 80022b0:	00002710 	.word	0x00002710
 80022b4:	2000023c 	.word	0x2000023c
 80022b8:	200002a4 	.word	0x200002a4
 80022bc:	200002a6 	.word	0x200002a6
 80022c0:	20000262 	.word	0x20000262

080022c4 <receiveData>:
 * @param  data_buffer : pointer to store in received data
 * @param  Nb_bytes : number of bytes to be received
 * @retval None
 */
static void receiveData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	000a      	movs	r2, r1
 80022ce:	1cfb      	adds	r3, r7, #3
 80022d0:	701a      	strb	r2, [r3, #0]
  BSP_LED_Toggle(LED2);
 80022d2:	2000      	movs	r0, #0
 80022d4:	f002 f9aa 	bl	800462c <BSP_LED_Toggle>

  for(int i = 0; i < Nb_bytes; i++)
 80022d8:	2300      	movs	r3, #0
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	e009      	b.n	80022f2 <receiveData+0x2e>
  {
    PRINT_DBG("%c", data_buffer[i]);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	18d3      	adds	r3, r2, r3
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	0018      	movs	r0, r3
 80022e8:	f00c f800 	bl	800e2ec <putchar>
  for(int i = 0; i < Nb_bytes; i++)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	3301      	adds	r3, #1
 80022f0:	60fb      	str	r3, [r7, #12]
 80022f2:	1cfb      	adds	r3, r7, #3
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	dbf0      	blt.n	80022de <receiveData+0x1a>
  }
  fflush(stdout);
 80022fc:	4b04      	ldr	r3, [pc, #16]	; (8002310 <receiveData+0x4c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	0018      	movs	r0, r3
 8002304:	f00b ff06 	bl	800e114 <fflush>
}
 8002308:	46c0      	nop			; (mov r8, r8)
 800230a:	46bd      	mov	sp, r7
 800230c:	b004      	add	sp, #16
 800230e:	bd80      	pop	{r7, pc}
 8002310:	20000098 	.word	0x20000098

08002314 <Reset_DiscoveryContext>:
* Description    : Reset the discovery context.
* Input          : None.
* Return         : None.
*******************************************************************************/
static void Reset_DiscoveryContext(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
  discovery.check_disc_proc_timer = FALSE;
 800231a:	4b29      	ldr	r3, [pc, #164]	; (80023c0 <Reset_DiscoveryContext+0xac>)
 800231c:	2200      	movs	r2, #0
 800231e:	701a      	strb	r2, [r3, #0]
  discovery.check_disc_mode_timer = FALSE;
 8002320:	4b27      	ldr	r3, [pc, #156]	; (80023c0 <Reset_DiscoveryContext+0xac>)
 8002322:	2200      	movs	r2, #0
 8002324:	705a      	strb	r2, [r3, #1]
  discovery.is_device_found = FALSE;
 8002326:	4b26      	ldr	r3, [pc, #152]	; (80023c0 <Reset_DiscoveryContext+0xac>)
 8002328:	2200      	movs	r2, #0
 800232a:	709a      	strb	r2, [r3, #2]
  discovery.do_connect = FALSE;
 800232c:	4b24      	ldr	r3, [pc, #144]	; (80023c0 <Reset_DiscoveryContext+0xac>)
 800232e:	2200      	movs	r2, #0
 8002330:	70da      	strb	r2, [r3, #3]
  discovery.startTime = 0;
 8002332:	4b23      	ldr	r3, [pc, #140]	; (80023c0 <Reset_DiscoveryContext+0xac>)
 8002334:	2200      	movs	r2, #0
 8002336:	605a      	str	r2, [r3, #4]
  discovery.device_state = INIT_STATE;
 8002338:	4b21      	ldr	r3, [pc, #132]	; (80023c0 <Reset_DiscoveryContext+0xac>)
 800233a:	2200      	movs	r2, #0
 800233c:	821a      	strh	r2, [r3, #16]
  BLUENRG_memset(&discovery.device_found_address[0], 0, 6);
 800233e:	4b21      	ldr	r3, [pc, #132]	; (80023c4 <Reset_DiscoveryContext+0xb0>)
 8002340:	2206      	movs	r2, #6
 8002342:	2100      	movs	r1, #0
 8002344:	0018      	movs	r0, r3
 8002346:	f00c f93b 	bl	800e5c0 <memset>
  device_role = 0xFF;
 800234a:	4b1f      	ldr	r3, [pc, #124]	; (80023c8 <Reset_DiscoveryContext+0xb4>)
 800234c:	22ff      	movs	r2, #255	; 0xff
 800234e:	701a      	strb	r2, [r3, #0]
  mtu_exchanged = 0;
 8002350:	4b1e      	ldr	r3, [pc, #120]	; (80023cc <Reset_DiscoveryContext+0xb8>)
 8002352:	2200      	movs	r2, #0
 8002354:	701a      	strb	r2, [r3, #0]
  mtu_exchanged_wait = 0;
 8002356:	4b1e      	ldr	r3, [pc, #120]	; (80023d0 <Reset_DiscoveryContext+0xbc>)
 8002358:	2200      	movs	r2, #0
 800235a:	701a      	strb	r2, [r3, #0]
  write_char_len = CHAR_VALUE_LENGTH-3;
 800235c:	4b1d      	ldr	r3, [pc, #116]	; (80023d4 <Reset_DiscoveryContext+0xc0>)
 800235e:	223c      	movs	r2, #60	; 0x3c
 8002360:	801a      	strh	r2, [r3, #0]

  for (uint16_t i=0; i<(CHAR_VALUE_LENGTH-3); i++) {
 8002362:	1dbb      	adds	r3, r7, #6
 8002364:	2200      	movs	r2, #0
 8002366:	801a      	strh	r2, [r3, #0]
 8002368:	e021      	b.n	80023ae <Reset_DiscoveryContext+0x9a>
    data[i] = 0x31 + (i%10);
 800236a:	1dbb      	adds	r3, r7, #6
 800236c:	881b      	ldrh	r3, [r3, #0]
 800236e:	210a      	movs	r1, #10
 8002370:	0018      	movs	r0, r3
 8002372:	f7fd ff67 	bl	8000244 <__aeabi_uidivmod>
 8002376:	000b      	movs	r3, r1
 8002378:	b29b      	uxth	r3, r3
 800237a:	b2da      	uxtb	r2, r3
 800237c:	1dbb      	adds	r3, r7, #6
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	3231      	adds	r2, #49	; 0x31
 8002382:	b2d1      	uxtb	r1, r2
 8002384:	4a14      	ldr	r2, [pc, #80]	; (80023d8 <Reset_DiscoveryContext+0xc4>)
 8002386:	54d1      	strb	r1, [r2, r3]
    if ((i+1)%10==0) {
 8002388:	1dbb      	adds	r3, r7, #6
 800238a:	881b      	ldrh	r3, [r3, #0]
 800238c:	3301      	adds	r3, #1
 800238e:	210a      	movs	r1, #10
 8002390:	0018      	movs	r0, r3
 8002392:	f7fe f841 	bl	8000418 <__aeabi_idivmod>
 8002396:	1e0b      	subs	r3, r1, #0
 8002398:	d104      	bne.n	80023a4 <Reset_DiscoveryContext+0x90>
      data[i]='x';
 800239a:	1dbb      	adds	r3, r7, #6
 800239c:	881b      	ldrh	r3, [r3, #0]
 800239e:	4a0e      	ldr	r2, [pc, #56]	; (80023d8 <Reset_DiscoveryContext+0xc4>)
 80023a0:	2178      	movs	r1, #120	; 0x78
 80023a2:	54d1      	strb	r1, [r2, r3]
  for (uint16_t i=0; i<(CHAR_VALUE_LENGTH-3); i++) {
 80023a4:	1dbb      	adds	r3, r7, #6
 80023a6:	881a      	ldrh	r2, [r3, #0]
 80023a8:	1dbb      	adds	r3, r7, #6
 80023aa:	3201      	adds	r2, #1
 80023ac:	801a      	strh	r2, [r3, #0]
 80023ae:	1dbb      	adds	r3, r7, #6
 80023b0:	881b      	ldrh	r3, [r3, #0]
 80023b2:	2b3b      	cmp	r3, #59	; 0x3b
 80023b4:	d9d9      	bls.n	800236a <Reset_DiscoveryContext+0x56>
    }
  }
}
 80023b6:	46c0      	nop			; (mov r8, r8)
 80023b8:	46c0      	nop			; (mov r8, r8)
 80023ba:	46bd      	mov	sp, r7
 80023bc:	b002      	add	sp, #8
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	20000228 	.word	0x20000228
 80023c4:	20000231 	.word	0x20000231
 80023c8:	20000004 	.word	0x20000004
 80023cc:	20000266 	.word	0x20000266
 80023d0:	20000267 	.word	0x20000267
 80023d4:	20000006 	.word	0x20000006
 80023d8:	20000268 	.word	0x20000268

080023dc <Setup_DeviceAddress>:
* Description    : Setup the device address.
* Input          : None.
* Return         : None.
*******************************************************************************/
static void Setup_DeviceAddress(void)
{
 80023dc:	b5b0      	push	{r4, r5, r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
  tBleStatus ret;
  uint8_t bdaddr[] = {0x00, 0x00, 0x00, 0xE1, 0x80, 0x02};
 80023e2:	230c      	movs	r3, #12
 80023e4:	18fb      	adds	r3, r7, r3
 80023e6:	4a43      	ldr	r2, [pc, #268]	; (80024f4 <Setup_DeviceAddress+0x118>)
 80023e8:	6811      	ldr	r1, [r2, #0]
 80023ea:	6019      	str	r1, [r3, #0]
 80023ec:	8892      	ldrh	r2, [r2, #4]
 80023ee:	809a      	strh	r2, [r3, #4]
  uint8_t random_number[8];

  /* get a random number from BlueNRG */
  ret = hci_le_rand(random_number);
 80023f0:	2515      	movs	r5, #21
 80023f2:	197c      	adds	r4, r7, r5
 80023f4:	1d3b      	adds	r3, r7, #4
 80023f6:	0018      	movs	r0, r3
 80023f8:	f009 f892 	bl	800b520 <hci_le_rand>
 80023fc:	0003      	movs	r3, r0
 80023fe:	7023      	strb	r3, [r4, #0]
  if(ret != BLE_STATUS_SUCCESS)
 8002400:	197b      	adds	r3, r7, r5
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d006      	beq.n	8002416 <Setup_DeviceAddress+0x3a>
  {
    PRINT_DBG("hci_le_rand() call failed: 0x%02x\r\n", ret);
 8002408:	197b      	adds	r3, r7, r5
 800240a:	781a      	ldrb	r2, [r3, #0]
 800240c:	4b3a      	ldr	r3, [pc, #232]	; (80024f8 <Setup_DeviceAddress+0x11c>)
 800240e:	0011      	movs	r1, r2
 8002410:	0018      	movs	r0, r3
 8002412:	f00b ff5b 	bl	800e2cc <iprintf>
  }

  discovery_time = 3000; /* at least 3 seconds */
 8002416:	4b39      	ldr	r3, [pc, #228]	; (80024fc <Setup_DeviceAddress+0x120>)
 8002418:	4a39      	ldr	r2, [pc, #228]	; (8002500 <Setup_DeviceAddress+0x124>)
 800241a:	801a      	strh	r2, [r3, #0]
  /* setup discovery time with random number */
  for (uint8_t i=0; i<8; i++)
 800241c:	2317      	movs	r3, #23
 800241e:	18fb      	adds	r3, r7, r3
 8002420:	2200      	movs	r2, #0
 8002422:	701a      	strb	r2, [r3, #0]
 8002424:	e012      	b.n	800244c <Setup_DeviceAddress+0x70>
  {
    discovery_time += (2*random_number[i]);
 8002426:	2117      	movs	r1, #23
 8002428:	187b      	adds	r3, r7, r1
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	1d3a      	adds	r2, r7, #4
 800242e:	5cd3      	ldrb	r3, [r2, r3]
 8002430:	b29b      	uxth	r3, r3
 8002432:	18db      	adds	r3, r3, r3
 8002434:	b29a      	uxth	r2, r3
 8002436:	4b31      	ldr	r3, [pc, #196]	; (80024fc <Setup_DeviceAddress+0x120>)
 8002438:	881b      	ldrh	r3, [r3, #0]
 800243a:	18d3      	adds	r3, r2, r3
 800243c:	b29a      	uxth	r2, r3
 800243e:	4b2f      	ldr	r3, [pc, #188]	; (80024fc <Setup_DeviceAddress+0x120>)
 8002440:	801a      	strh	r2, [r3, #0]
  for (uint8_t i=0; i<8; i++)
 8002442:	187b      	adds	r3, r7, r1
 8002444:	781a      	ldrb	r2, [r3, #0]
 8002446:	187b      	adds	r3, r7, r1
 8002448:	3201      	adds	r2, #1
 800244a:	701a      	strb	r2, [r3, #0]
 800244c:	2317      	movs	r3, #23
 800244e:	18fb      	adds	r3, r7, r3
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b07      	cmp	r3, #7
 8002454:	d9e7      	bls.n	8002426 <Setup_DeviceAddress+0x4a>
  }

  /* Setup last 3 bytes of public address with random number */
  bdaddr[0] = (uint8_t) (random_number[0]);
 8002456:	1d3b      	adds	r3, r7, #4
 8002458:	781a      	ldrb	r2, [r3, #0]
 800245a:	210c      	movs	r1, #12
 800245c:	187b      	adds	r3, r7, r1
 800245e:	701a      	strb	r2, [r3, #0]
  bdaddr[1] = (uint8_t) (random_number[3]);
 8002460:	1d3b      	adds	r3, r7, #4
 8002462:	78da      	ldrb	r2, [r3, #3]
 8002464:	187b      	adds	r3, r7, r1
 8002466:	705a      	strb	r2, [r3, #1]
  bdaddr[2] = (uint8_t) (random_number[6]);
 8002468:	1d3b      	adds	r3, r7, #4
 800246a:	799a      	ldrb	r2, [r3, #6]
 800246c:	187b      	adds	r3, r7, r1
 800246e:	709a      	strb	r2, [r3, #2]

  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, bdaddr);
 8002470:	2515      	movs	r5, #21
 8002472:	197c      	adds	r4, r7, r5
 8002474:	187b      	adds	r3, r7, r1
 8002476:	001a      	movs	r2, r3
 8002478:	2106      	movs	r1, #6
 800247a:	2000      	movs	r0, #0
 800247c:	f00a fc36 	bl	800ccec <aci_hal_write_config_data>
 8002480:	0003      	movs	r3, r0
 8002482:	7023      	strb	r3, [r4, #0]
  if(ret != BLE_STATUS_SUCCESS)
 8002484:	197b      	adds	r3, r7, r5
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d007      	beq.n	800249c <Setup_DeviceAddress+0xc0>
  {
      PRINT_DBG("Setting BD_ADDR failed 0x%02x\r\n", ret);
 800248c:	197b      	adds	r3, r7, r5
 800248e:	781a      	ldrb	r2, [r3, #0]
 8002490:	4b1c      	ldr	r3, [pc, #112]	; (8002504 <Setup_DeviceAddress+0x128>)
 8002492:	0011      	movs	r1, r2
 8002494:	0018      	movs	r0, r3
 8002496:	f00b ff19 	bl	800e2cc <iprintf>
      PRINT_DBG("%02X-", bdaddr[i]);
    }
    PRINT_DBG("%02X\r\n", bdaddr[0]);
  }

}
 800249a:	e027      	b.n	80024ec <Setup_DeviceAddress+0x110>
    PRINT_DBG("Public address: ");
 800249c:	4b1a      	ldr	r3, [pc, #104]	; (8002508 <Setup_DeviceAddress+0x12c>)
 800249e:	0018      	movs	r0, r3
 80024a0:	f00b ff14 	bl	800e2cc <iprintf>
    for (uint8_t i=5; i>0; i--)
 80024a4:	2316      	movs	r3, #22
 80024a6:	18fb      	adds	r3, r7, r3
 80024a8:	2205      	movs	r2, #5
 80024aa:	701a      	strb	r2, [r3, #0]
 80024ac:	e010      	b.n	80024d0 <Setup_DeviceAddress+0xf4>
      PRINT_DBG("%02X-", bdaddr[i]);
 80024ae:	2416      	movs	r4, #22
 80024b0:	193b      	adds	r3, r7, r4
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	220c      	movs	r2, #12
 80024b6:	18ba      	adds	r2, r7, r2
 80024b8:	5cd3      	ldrb	r3, [r2, r3]
 80024ba:	001a      	movs	r2, r3
 80024bc:	4b13      	ldr	r3, [pc, #76]	; (800250c <Setup_DeviceAddress+0x130>)
 80024be:	0011      	movs	r1, r2
 80024c0:	0018      	movs	r0, r3
 80024c2:	f00b ff03 	bl	800e2cc <iprintf>
    for (uint8_t i=5; i>0; i--)
 80024c6:	193b      	adds	r3, r7, r4
 80024c8:	781a      	ldrb	r2, [r3, #0]
 80024ca:	193b      	adds	r3, r7, r4
 80024cc:	3a01      	subs	r2, #1
 80024ce:	701a      	strb	r2, [r3, #0]
 80024d0:	2316      	movs	r3, #22
 80024d2:	18fb      	adds	r3, r7, r3
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1e9      	bne.n	80024ae <Setup_DeviceAddress+0xd2>
    PRINT_DBG("%02X\r\n", bdaddr[0]);
 80024da:	230c      	movs	r3, #12
 80024dc:	18fb      	adds	r3, r7, r3
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	001a      	movs	r2, r3
 80024e2:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <Setup_DeviceAddress+0x134>)
 80024e4:	0011      	movs	r1, r2
 80024e6:	0018      	movs	r0, r3
 80024e8:	f00b fef0 	bl	800e2cc <iprintf>
}
 80024ec:	46c0      	nop			; (mov r8, r8)
 80024ee:	46bd      	mov	sp, r7
 80024f0:	b006      	add	sp, #24
 80024f2:	bdb0      	pop	{r4, r5, r7, pc}
 80024f4:	08010444 	.word	0x08010444
 80024f8:	080103dc 	.word	0x080103dc
 80024fc:	20000264 	.word	0x20000264
 8002500:	00000bb8 	.word	0x00000bb8
 8002504:	08010400 	.word	0x08010400
 8002508:	08010420 	.word	0x08010420
 800250c:	08010434 	.word	0x08010434
 8002510:	0801043c 	.word	0x0801043c

08002514 <Find_DeviceName>:
* Input          : Data length.
*                  Data value
* Return         : TRUE if the local name found is the expected one, FALSE otherwise.
*******************************************************************************/
static uint8_t Find_DeviceName(uint8_t data_length, uint8_t *data_value)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	0002      	movs	r2, r0
 800251c:	6039      	str	r1, [r7, #0]
 800251e:	1dfb      	adds	r3, r7, #7
 8002520:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0;
 8002522:	230f      	movs	r3, #15
 8002524:	18fb      	adds	r3, r7, r3
 8002526:	2200      	movs	r2, #0
 8002528:	701a      	strb	r2, [r3, #0]

  while (index < data_length)
 800252a:	e025      	b.n	8002578 <Find_DeviceName+0x64>
  {
    /* Advertising data fields: len, type, values */
    /* Check if field is complete local name and the length is the expected one for BLE SampleApp  */
    if (data_value[index+1] == AD_TYPE_COMPLETE_LOCAL_NAME)
 800252c:	210f      	movs	r1, #15
 800252e:	187b      	adds	r3, r7, r1
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	3301      	adds	r3, #1
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	18d3      	adds	r3, r2, r3
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	2b09      	cmp	r3, #9
 800253c:	d10f      	bne.n	800255e <Find_DeviceName+0x4a>
    {
      /* check if found device name is the expected one: local_name */
      if (BLUENRG_memcmp(&data_value[index+1], &local_name[0], BLE_SAMPLE_APP_COMPLETE_LOCAL_NAME_SIZE) == 0)
 800253e:	187b      	adds	r3, r7, r1
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	3301      	adds	r3, #1
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	18d3      	adds	r3, r2, r3
 8002548:	4911      	ldr	r1, [pc, #68]	; (8002590 <Find_DeviceName+0x7c>)
 800254a:	2212      	movs	r2, #18
 800254c:	0018      	movs	r0, r3
 800254e:	f00c f829 	bl	800e5a4 <memcmp>
 8002552:	1e03      	subs	r3, r0, #0
 8002554:	d101      	bne.n	800255a <Find_DeviceName+0x46>
      {
        return TRUE;
 8002556:	2301      	movs	r3, #1
 8002558:	e016      	b.n	8002588 <Find_DeviceName+0x74>
      }
      else
      {
        return FALSE;
 800255a:	2300      	movs	r3, #0
 800255c:	e014      	b.n	8002588 <Find_DeviceName+0x74>
      }
    }
    else
    {
      /* move to next advertising field */
      index += (data_value[index] +1);
 800255e:	210f      	movs	r1, #15
 8002560:	187b      	adds	r3, r7, r1
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	18d3      	adds	r3, r2, r3
 8002568:	781a      	ldrb	r2, [r3, #0]
 800256a:	187b      	adds	r3, r7, r1
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	18d3      	adds	r3, r2, r3
 8002570:	b2da      	uxtb	r2, r3
 8002572:	187b      	adds	r3, r7, r1
 8002574:	3201      	adds	r2, #1
 8002576:	701a      	strb	r2, [r3, #0]
  while (index < data_length)
 8002578:	230f      	movs	r3, #15
 800257a:	18fa      	adds	r2, r7, r3
 800257c:	1dfb      	adds	r3, r7, #7
 800257e:	7812      	ldrb	r2, [r2, #0]
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	429a      	cmp	r2, r3
 8002584:	d3d2      	bcc.n	800252c <Find_DeviceName+0x18>
    }
  }

  return FALSE;
 8002586:	2300      	movs	r3, #0
}
 8002588:	0018      	movs	r0, r3
 800258a:	46bd      	mov	sp, r7
 800258c:	b004      	add	sp, #16
 800258e:	bd80      	pop	{r7, pc}
 8002590:	20000008 	.word	0x20000008

08002594 <Attribute_Modified_CB>:
*                  Length of the data.
*                  Attribute data.
* Return         : None.
*******************************************************************************/
static void Attribute_Modified_CB(uint16_t handle, uint8_t data_length, uint8_t *att_data)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	603a      	str	r2, [r7, #0]
 800259c:	1dbb      	adds	r3, r7, #6
 800259e:	1c02      	adds	r2, r0, #0
 80025a0:	801a      	strh	r2, [r3, #0]
 80025a2:	1d7b      	adds	r3, r7, #5
 80025a4:	1c0a      	adds	r2, r1, #0
 80025a6:	701a      	strb	r2, [r3, #0]
  if(handle == RXCharHandle + 1)
 80025a8:	1dbb      	adds	r3, r7, #6
 80025aa:	881a      	ldrh	r2, [r3, #0]
 80025ac:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <Attribute_Modified_CB+0x60>)
 80025ae:	881b      	ldrh	r3, [r3, #0]
 80025b0:	3301      	adds	r3, #1
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d107      	bne.n	80025c6 <Attribute_Modified_CB+0x32>
  {
    receiveData(att_data, data_length);
 80025b6:	1d7b      	adds	r3, r7, #5
 80025b8:	781a      	ldrb	r2, [r3, #0]
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	0011      	movs	r1, r2
 80025be:	0018      	movs	r0, r3
 80025c0:	f7ff fe80 	bl	80022c4 <receiveData>
    if(att_data[0] == 0x01)
    {
      APP_FLAG_SET(NOTIFICATIONS_ENABLED);
    }
  }
}
 80025c4:	e011      	b.n	80025ea <Attribute_Modified_CB+0x56>
  else if(handle == TXCharHandle + 2)
 80025c6:	1dbb      	adds	r3, r7, #6
 80025c8:	881a      	ldrh	r2, [r3, #0]
 80025ca:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <Attribute_Modified_CB+0x64>)
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	3302      	adds	r3, #2
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d10a      	bne.n	80025ea <Attribute_Modified_CB+0x56>
    if(att_data[0] == 0x01)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d106      	bne.n	80025ea <Attribute_Modified_CB+0x56>
      APP_FLAG_SET(NOTIFICATIONS_ENABLED);
 80025dc:	4b07      	ldr	r3, [pc, #28]	; (80025fc <Attribute_Modified_CB+0x68>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2280      	movs	r2, #128	; 0x80
 80025e2:	00d2      	lsls	r2, r2, #3
 80025e4:	431a      	orrs	r2, r3
 80025e6:	4b05      	ldr	r3, [pc, #20]	; (80025fc <Attribute_Modified_CB+0x68>)
 80025e8:	601a      	str	r2, [r3, #0]
}
 80025ea:	46c0      	nop			; (mov r8, r8)
 80025ec:	46bd      	mov	sp, r7
 80025ee:	b002      	add	sp, #8
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	46c0      	nop			; (mov r8, r8)
 80025f4:	200002a8 	.word	0x200002a8
 80025f8:	200002a6 	.word	0x200002a6
 80025fc:	20000000 	.word	0x20000000

08002600 <SampleAppInit>:
* Description    : Init SampleApp.
* Input          : None.
* Return         : Status.
*******************************************************************************/
static uint8_t SampleAppInit(void)
{
 8002600:	b590      	push	{r4, r7, lr}
 8002602:	b085      	sub	sp, #20
 8002604:	af02      	add	r7, sp, #8
  uint8_t ret;
  uint16_t service_handle, dev_name_char_handle, appearance_char_handle;

  /* Sw reset of the device */
  hci_reset();
 8002606:	f008 fee5 	bl	800b3d4 <hci_reset>
  /**
   *  To support both the BlueNRG-2 and the BlueNRG-2N a minimum delay of 2000ms is required at device boot
   */
  HAL_Delay(2000);
 800260a:	23fa      	movs	r3, #250	; 0xfa
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	0018      	movs	r0, r3
 8002610:	f002 face 	bl	8004bb0 <HAL_Delay>

  /* Setup the device address */
  Setup_DeviceAddress();
 8002614:	f7ff fee2 	bl	80023dc <Setup_DeviceAddress>

  /* Set the TX power to -2 dBm */
  aci_hal_set_tx_power_level(1, 4);
 8002618:	2104      	movs	r1, #4
 800261a:	2001      	movs	r0, #1
 800261c:	f00a fbf4 	bl	800ce08 <aci_hal_set_tx_power_level>

  /* GATT Init */
  ret = aci_gatt_init();
 8002620:	1dfc      	adds	r4, r7, #7
 8002622:	f009 fcb9 	bl	800bf98 <aci_gatt_init>
 8002626:	0003      	movs	r3, r0
 8002628:	7023      	strb	r3, [r4, #0]
  if(ret != BLE_STATUS_SUCCESS)
 800262a:	1dfb      	adds	r3, r7, #7
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d009      	beq.n	8002646 <SampleAppInit+0x46>
  {
    PRINT_DBG("GATT_Init failed: 0x%02x\r\n", ret);
 8002632:	1dfb      	adds	r3, r7, #7
 8002634:	781a      	ldrb	r2, [r3, #0]
 8002636:	4b1f      	ldr	r3, [pc, #124]	; (80026b4 <SampleAppInit+0xb4>)
 8002638:	0011      	movs	r1, r2
 800263a:	0018      	movs	r0, r3
 800263c:	f00b fe46 	bl	800e2cc <iprintf>
    return ret;
 8002640:	1dfb      	adds	r3, r7, #7
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	e031      	b.n	80026aa <SampleAppInit+0xaa>
  }

  /* GAP Init */
  ret = aci_gap_init(GAP_CENTRAL_ROLE|GAP_PERIPHERAL_ROLE,0x0,0x07, &service_handle,
 8002646:	1dfc      	adds	r4, r7, #7
 8002648:	1d3a      	adds	r2, r7, #4
 800264a:	003b      	movs	r3, r7
 800264c:	9301      	str	r3, [sp, #4]
 800264e:	1cbb      	adds	r3, r7, #2
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	0013      	movs	r3, r2
 8002654:	2207      	movs	r2, #7
 8002656:	2100      	movs	r1, #0
 8002658:	2005      	movs	r0, #5
 800265a:	f009 f949 	bl	800b8f0 <aci_gap_init>
 800265e:	0003      	movs	r3, r0
 8002660:	7023      	strb	r3, [r4, #0]
                     &dev_name_char_handle, &appearance_char_handle);
  if(ret != BLE_STATUS_SUCCESS)
 8002662:	1dfb      	adds	r3, r7, #7
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d009      	beq.n	800267e <SampleAppInit+0x7e>
  {
    PRINT_DBG("GAP_Init failed: 0x%02x\r\n", ret);
 800266a:	1dfb      	adds	r3, r7, #7
 800266c:	781a      	ldrb	r2, [r3, #0]
 800266e:	4b12      	ldr	r3, [pc, #72]	; (80026b8 <SampleAppInit+0xb8>)
 8002670:	0011      	movs	r1, r2
 8002672:	0018      	movs	r0, r3
 8002674:	f00b fe2a 	bl	800e2cc <iprintf>
    return ret;
 8002678:	1dfb      	adds	r3, r7, #7
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	e015      	b.n	80026aa <SampleAppInit+0xaa>
  }

  /* Add Device Service & Characteristics */
  ret = Add_Sample_Service();
 800267e:	1dfc      	adds	r4, r7, #7
 8002680:	f000 fde8 	bl	8003254 <Add_Sample_Service>
 8002684:	0003      	movs	r3, r0
 8002686:	7023      	strb	r3, [r4, #0]
  if(ret != BLE_STATUS_SUCCESS)
 8002688:	1dfb      	adds	r3, r7, #7
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d009      	beq.n	80026a4 <SampleAppInit+0xa4>
  {
    PRINT_DBG("Error while adding service: 0x%02x\r\n", ret);
 8002690:	1dfb      	adds	r3, r7, #7
 8002692:	781a      	ldrb	r2, [r3, #0]
 8002694:	4b09      	ldr	r3, [pc, #36]	; (80026bc <SampleAppInit+0xbc>)
 8002696:	0011      	movs	r1, r2
 8002698:	0018      	movs	r0, r3
 800269a:	f00b fe17 	bl	800e2cc <iprintf>
    return ret;
 800269e:	1dfb      	adds	r3, r7, #7
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	e002      	b.n	80026aa <SampleAppInit+0xaa>
  }

  /* Reset the discovery context */
  Reset_DiscoveryContext();
 80026a4:	f7ff fe36 	bl	8002314 <Reset_DiscoveryContext>

  return BLE_STATUS_SUCCESS;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	0018      	movs	r0, r3
 80026ac:	46bd      	mov	sp, r7
 80026ae:	b003      	add	sp, #12
 80026b0:	bd90      	pop	{r4, r7, pc}
 80026b2:	46c0      	nop			; (mov r8, r8)
 80026b4:	0801044c 	.word	0x0801044c
 80026b8:	08010468 	.word	0x08010468
 80026bc:	08010484 	.word	0x08010484

080026c0 <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_GPIO);
 80026c4:	2100      	movs	r1, #0
 80026c6:	2000      	movs	r0, #0
 80026c8:	f002 f80c 	bl	80046e4 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 80026cc:	2000      	movs	r0, #0
 80026ce:	f001 ff69 	bl	80045a4 <BSP_LED_Init>

  BSP_COM_Init(COM1);
 80026d2:	2000      	movs	r0, #0
 80026d4:	f002 f8d0 	bl	8004878 <BSP_COM_Init>
}
 80026d8:	46c0      	nop			; (mov r8, r8)
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
	...

080026e0 <Connection_StateMachine>:
* Description    : Connection state machine.
* Input          : None.
* Return         : None.
*******************************************************************************/
static void Connection_StateMachine(void)
{
 80026e0:	b5b0      	push	{r4, r5, r7, lr}
 80026e2:	b08a      	sub	sp, #40	; 0x28
 80026e4:	af08      	add	r7, sp, #32
  uint8_t ret;

  switch (discovery.device_state)
 80026e6:	4bb0      	ldr	r3, [pc, #704]	; (80029a8 <Connection_StateMachine+0x2c8>)
 80026e8:	8a1b      	ldrh	r3, [r3, #16]
 80026ea:	2b80      	cmp	r3, #128	; 0x80
 80026ec:	d100      	bne.n	80026f0 <Connection_StateMachine+0x10>
 80026ee:	e151      	b.n	8002994 <Connection_StateMachine+0x2b4>
 80026f0:	dd00      	ble.n	80026f4 <Connection_StateMachine+0x14>
 80026f2:	e152      	b.n	800299a <Connection_StateMachine+0x2ba>
 80026f4:	2b20      	cmp	r3, #32
 80026f6:	dc0a      	bgt.n	800270e <Connection_StateMachine+0x2e>
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	da00      	bge.n	80026fe <Connection_StateMachine+0x1e>
 80026fc:	e14d      	b.n	800299a <Connection_StateMachine+0x2ba>
 80026fe:	2b20      	cmp	r3, #32
 8002700:	d900      	bls.n	8002704 <Connection_StateMachine+0x24>
 8002702:	e14a      	b.n	800299a <Connection_StateMachine+0x2ba>
 8002704:	009a      	lsls	r2, r3, #2
 8002706:	4ba9      	ldr	r3, [pc, #676]	; (80029ac <Connection_StateMachine+0x2cc>)
 8002708:	18d3      	adds	r3, r2, r3
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	469f      	mov	pc, r3
 800270e:	2b40      	cmp	r3, #64	; 0x40
 8002710:	d069      	beq.n	80027e6 <Connection_StateMachine+0x106>
    {
      Reset_DiscoveryContext();
    }
    break; /* end case (DISCOVERY_ERROR) */
  default:
    break;
 8002712:	e142      	b.n	800299a <Connection_StateMachine+0x2ba>
      Reset_DiscoveryContext();
 8002714:	f7ff fdfe 	bl	8002314 <Reset_DiscoveryContext>
      discovery.device_state = START_DISCOVERY_PROC;
 8002718:	4ba3      	ldr	r3, [pc, #652]	; (80029a8 <Connection_StateMachine+0x2c8>)
 800271a:	2201      	movs	r2, #1
 800271c:	821a      	strh	r2, [r3, #16]
    break; /* end case (INIT_STATE) */
 800271e:	e13f      	b.n	80029a0 <Connection_StateMachine+0x2c0>
      BSP_LED_On(LED2);
 8002720:	2000      	movs	r0, #0
 8002722:	f001 ff53 	bl	80045cc <BSP_LED_On>
      ret = aci_gap_start_general_discovery_proc(SCAN_P, SCAN_L, PUBLIC_ADDR, 0x00);
 8002726:	1dbc      	adds	r4, r7, #6
 8002728:	2380      	movs	r3, #128	; 0x80
 800272a:	01d9      	lsls	r1, r3, #7
 800272c:	2380      	movs	r3, #128	; 0x80
 800272e:	01d8      	lsls	r0, r3, #7
 8002730:	2300      	movs	r3, #0
 8002732:	2200      	movs	r2, #0
 8002734:	f009 f994 	bl	800ba60 <aci_gap_start_general_discovery_proc>
 8002738:	0003      	movs	r3, r0
 800273a:	7023      	strb	r3, [r4, #0]
      if (ret != BLE_STATUS_SUCCESS)
 800273c:	1dbb      	adds	r3, r7, #6
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00a      	beq.n	800275a <Connection_StateMachine+0x7a>
        PRINT_DBG("aci_gap_start_general_discovery_proc() failed: %02X\r\n",ret);
 8002744:	1dbb      	adds	r3, r7, #6
 8002746:	781a      	ldrb	r2, [r3, #0]
 8002748:	4b99      	ldr	r3, [pc, #612]	; (80029b0 <Connection_StateMachine+0x2d0>)
 800274a:	0011      	movs	r1, r2
 800274c:	0018      	movs	r0, r3
 800274e:	f00b fdbd 	bl	800e2cc <iprintf>
        discovery.device_state = DISCOVERY_ERROR;
 8002752:	4b95      	ldr	r3, [pc, #596]	; (80029a8 <Connection_StateMachine+0x2c8>)
 8002754:	2280      	movs	r2, #128	; 0x80
 8002756:	821a      	strh	r2, [r3, #16]
    break;/* end case (START_DISCOVERY_PROC) */
 8002758:	e122      	b.n	80029a0 <Connection_StateMachine+0x2c0>
        PRINT_DBG("aci_gap_start_general_discovery_proc OK\r\n");
 800275a:	4b96      	ldr	r3, [pc, #600]	; (80029b4 <Connection_StateMachine+0x2d4>)
 800275c:	0018      	movs	r0, r3
 800275e:	f00b fe25 	bl	800e3ac <puts>
        discovery.startTime = HAL_GetTick();
 8002762:	f002 fa1b 	bl	8004b9c <HAL_GetTick>
 8002766:	0002      	movs	r2, r0
 8002768:	4b8f      	ldr	r3, [pc, #572]	; (80029a8 <Connection_StateMachine+0x2c8>)
 800276a:	605a      	str	r2, [r3, #4]
        discovery.check_disc_proc_timer = TRUE;
 800276c:	4b8e      	ldr	r3, [pc, #568]	; (80029a8 <Connection_StateMachine+0x2c8>)
 800276e:	2201      	movs	r2, #1
 8002770:	701a      	strb	r2, [r3, #0]
        discovery.check_disc_mode_timer = FALSE;
 8002772:	4b8d      	ldr	r3, [pc, #564]	; (80029a8 <Connection_StateMachine+0x2c8>)
 8002774:	2200      	movs	r2, #0
 8002776:	705a      	strb	r2, [r3, #1]
        discovery.device_state = WAIT_TIMER_EXPIRED;
 8002778:	4b8b      	ldr	r3, [pc, #556]	; (80029a8 <Connection_StateMachine+0x2c8>)
 800277a:	2204      	movs	r2, #4
 800277c:	821a      	strh	r2, [r3, #16]
    break;/* end case (START_DISCOVERY_PROC) */
 800277e:	e10f      	b.n	80029a0 <Connection_StateMachine+0x2c0>
      if (discovery.check_disc_proc_timer == TRUE)
 8002780:	4b89      	ldr	r3, [pc, #548]	; (80029a8 <Connection_StateMachine+0x2c8>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d114      	bne.n	80027b2 <Connection_StateMachine+0xd2>
        if (HAL_GetTick() - discovery.startTime > discovery_time)
 8002788:	f002 fa08 	bl	8004b9c <HAL_GetTick>
 800278c:	0002      	movs	r2, r0
 800278e:	4b86      	ldr	r3, [pc, #536]	; (80029a8 <Connection_StateMachine+0x2c8>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	4a88      	ldr	r2, [pc, #544]	; (80029b8 <Connection_StateMachine+0x2d8>)
 8002796:	8812      	ldrh	r2, [r2, #0]
 8002798:	4293      	cmp	r3, r2
 800279a:	d800      	bhi.n	800279e <Connection_StateMachine+0xbe>
 800279c:	e0ff      	b.n	800299e <Connection_StateMachine+0x2be>
          discovery.check_disc_proc_timer = FALSE;
 800279e:	4b82      	ldr	r3, [pc, #520]	; (80029a8 <Connection_StateMachine+0x2c8>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	701a      	strb	r2, [r3, #0]
          discovery.startTime = 0;
 80027a4:	4b80      	ldr	r3, [pc, #512]	; (80029a8 <Connection_StateMachine+0x2c8>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	605a      	str	r2, [r3, #4]
          discovery.device_state = DO_TERMINATE_GAP_PROC;
 80027aa:	4b7f      	ldr	r3, [pc, #508]	; (80029a8 <Connection_StateMachine+0x2c8>)
 80027ac:	2220      	movs	r2, #32
 80027ae:	821a      	strh	r2, [r3, #16]
    break; /* end case (WAIT_TIMER_EXPIRED) */
 80027b0:	e0f5      	b.n	800299e <Connection_StateMachine+0x2be>
      else if (discovery.check_disc_mode_timer == TRUE)
 80027b2:	4b7d      	ldr	r3, [pc, #500]	; (80029a8 <Connection_StateMachine+0x2c8>)
 80027b4:	785b      	ldrb	r3, [r3, #1]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d000      	beq.n	80027bc <Connection_StateMachine+0xdc>
 80027ba:	e0f0      	b.n	800299e <Connection_StateMachine+0x2be>
        if (HAL_GetTick() - discovery.startTime > discovery_time)
 80027bc:	f002 f9ee 	bl	8004b9c <HAL_GetTick>
 80027c0:	0002      	movs	r2, r0
 80027c2:	4b79      	ldr	r3, [pc, #484]	; (80029a8 <Connection_StateMachine+0x2c8>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	4a7b      	ldr	r2, [pc, #492]	; (80029b8 <Connection_StateMachine+0x2d8>)
 80027ca:	8812      	ldrh	r2, [r2, #0]
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d800      	bhi.n	80027d2 <Connection_StateMachine+0xf2>
 80027d0:	e0e5      	b.n	800299e <Connection_StateMachine+0x2be>
          discovery.check_disc_mode_timer = FALSE;
 80027d2:	4b75      	ldr	r3, [pc, #468]	; (80029a8 <Connection_StateMachine+0x2c8>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	705a      	strb	r2, [r3, #1]
          discovery.startTime = 0;
 80027d8:	4b73      	ldr	r3, [pc, #460]	; (80029a8 <Connection_StateMachine+0x2c8>)
 80027da:	2200      	movs	r2, #0
 80027dc:	605a      	str	r2, [r3, #4]
          discovery.device_state = DO_NON_DISCOVERABLE_MODE;
 80027de:	4b72      	ldr	r3, [pc, #456]	; (80029a8 <Connection_StateMachine+0x2c8>)
 80027e0:	2240      	movs	r2, #64	; 0x40
 80027e2:	821a      	strh	r2, [r3, #16]
    break; /* end case (WAIT_TIMER_EXPIRED) */
 80027e4:	e0db      	b.n	800299e <Connection_StateMachine+0x2be>
      ret = aci_gap_set_non_discoverable();
 80027e6:	1dbc      	adds	r4, r7, #6
 80027e8:	f008 fed9 	bl	800b59e <aci_gap_set_non_discoverable>
 80027ec:	0003      	movs	r3, r0
 80027ee:	7023      	strb	r3, [r4, #0]
      if (ret != BLE_STATUS_SUCCESS)
 80027f0:	1dbb      	adds	r3, r7, #6
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00a      	beq.n	800280e <Connection_StateMachine+0x12e>
        PRINT_DBG("aci_gap_set_non_discoverable() failed: 0x%02x\r\n", ret);
 80027f8:	1dbb      	adds	r3, r7, #6
 80027fa:	781a      	ldrb	r2, [r3, #0]
 80027fc:	4b6f      	ldr	r3, [pc, #444]	; (80029bc <Connection_StateMachine+0x2dc>)
 80027fe:	0011      	movs	r1, r2
 8002800:	0018      	movs	r0, r3
 8002802:	f00b fd63 	bl	800e2cc <iprintf>
        discovery.device_state = DISCOVERY_ERROR;
 8002806:	4b68      	ldr	r3, [pc, #416]	; (80029a8 <Connection_StateMachine+0x2c8>)
 8002808:	2280      	movs	r2, #128	; 0x80
 800280a:	821a      	strh	r2, [r3, #16]
    break; /* end case (DO_NON_DISCOVERABLE_MODE) */
 800280c:	e0c8      	b.n	80029a0 <Connection_StateMachine+0x2c0>
        PRINT_DBG("aci_gap_set_non_discoverable() OK\r\n");
 800280e:	4b6c      	ldr	r3, [pc, #432]	; (80029c0 <Connection_StateMachine+0x2e0>)
 8002810:	0018      	movs	r0, r3
 8002812:	f00b fdcb 	bl	800e3ac <puts>
        discovery.device_state = INIT_STATE;
 8002816:	4b64      	ldr	r3, [pc, #400]	; (80029a8 <Connection_StateMachine+0x2c8>)
 8002818:	2200      	movs	r2, #0
 800281a:	821a      	strh	r2, [r3, #16]
    break; /* end case (DO_NON_DISCOVERABLE_MODE) */
 800281c:	e0c0      	b.n	80029a0 <Connection_StateMachine+0x2c0>
      ret = aci_gap_terminate_gap_proc(0x02); // GENERAL_DISCOVERY_PROCEDURE
 800281e:	1dbc      	adds	r4, r7, #6
 8002820:	2002      	movs	r0, #2
 8002822:	f009 fb57 	bl	800bed4 <aci_gap_terminate_gap_proc>
 8002826:	0003      	movs	r3, r0
 8002828:	7023      	strb	r3, [r4, #0]
      if (ret != BLE_STATUS_SUCCESS)
 800282a:	1dbb      	adds	r3, r7, #6
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00a      	beq.n	8002848 <Connection_StateMachine+0x168>
        PRINT_DBG("aci_gap_terminate_gap_procedure() failed: 0x%02x\r\n", ret);
 8002832:	1dbb      	adds	r3, r7, #6
 8002834:	781a      	ldrb	r2, [r3, #0]
 8002836:	4b63      	ldr	r3, [pc, #396]	; (80029c4 <Connection_StateMachine+0x2e4>)
 8002838:	0011      	movs	r1, r2
 800283a:	0018      	movs	r0, r3
 800283c:	f00b fd46 	bl	800e2cc <iprintf>
        discovery.device_state = DISCOVERY_ERROR;
 8002840:	4b59      	ldr	r3, [pc, #356]	; (80029a8 <Connection_StateMachine+0x2c8>)
 8002842:	2280      	movs	r2, #128	; 0x80
 8002844:	821a      	strh	r2, [r3, #16]
        break;
 8002846:	e0ab      	b.n	80029a0 <Connection_StateMachine+0x2c0>
        PRINT_DBG("aci_gap_terminate_gap_procedure() OK\r\n");
 8002848:	4b5f      	ldr	r3, [pc, #380]	; (80029c8 <Connection_StateMachine+0x2e8>)
 800284a:	0018      	movs	r0, r3
 800284c:	f00b fdae 	bl	800e3ac <puts>
        discovery.device_state = WAIT_EVENT; /* wait for GAP procedure complete */
 8002850:	4b55      	ldr	r3, [pc, #340]	; (80029a8 <Connection_StateMachine+0x2c8>)
 8002852:	2202      	movs	r2, #2
 8002854:	821a      	strh	r2, [r3, #16]
    break; /* end case (DO_TERMINATE_GAP_PROC) */
 8002856:	e0a3      	b.n	80029a0 <Connection_StateMachine+0x2c0>
      PRINT_DBG("Device Found with address: ");
 8002858:	4b5c      	ldr	r3, [pc, #368]	; (80029cc <Connection_StateMachine+0x2ec>)
 800285a:	0018      	movs	r0, r3
 800285c:	f00b fd36 	bl	800e2cc <iprintf>
      for (uint8_t i=5; i>0; i--)
 8002860:	1dfb      	adds	r3, r7, #7
 8002862:	2205      	movs	r2, #5
 8002864:	701a      	strb	r2, [r3, #0]
 8002866:	e00f      	b.n	8002888 <Connection_StateMachine+0x1a8>
        PRINT_DBG("%02X-", discovery.device_found_address[i]);
 8002868:	1dfb      	adds	r3, r7, #7
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	4a4e      	ldr	r2, [pc, #312]	; (80029a8 <Connection_StateMachine+0x2c8>)
 800286e:	18d3      	adds	r3, r2, r3
 8002870:	7a5b      	ldrb	r3, [r3, #9]
 8002872:	001a      	movs	r2, r3
 8002874:	4b56      	ldr	r3, [pc, #344]	; (80029d0 <Connection_StateMachine+0x2f0>)
 8002876:	0011      	movs	r1, r2
 8002878:	0018      	movs	r0, r3
 800287a:	f00b fd27 	bl	800e2cc <iprintf>
      for (uint8_t i=5; i>0; i--)
 800287e:	1dfb      	adds	r3, r7, #7
 8002880:	781a      	ldrb	r2, [r3, #0]
 8002882:	1dfb      	adds	r3, r7, #7
 8002884:	3a01      	subs	r2, #1
 8002886:	701a      	strb	r2, [r3, #0]
 8002888:	1dfb      	adds	r3, r7, #7
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1eb      	bne.n	8002868 <Connection_StateMachine+0x188>
      PRINT_DBG("%02X\r\n", discovery.device_found_address[0]);
 8002890:	4b45      	ldr	r3, [pc, #276]	; (80029a8 <Connection_StateMachine+0x2c8>)
 8002892:	7a5b      	ldrb	r3, [r3, #9]
 8002894:	001a      	movs	r2, r3
 8002896:	4b4f      	ldr	r3, [pc, #316]	; (80029d4 <Connection_StateMachine+0x2f4>)
 8002898:	0011      	movs	r1, r2
 800289a:	0018      	movs	r0, r3
 800289c:	f00b fd16 	bl	800e2cc <iprintf>
      ret = aci_gap_create_connection(SCAN_P, SCAN_L,
 80028a0:	4b41      	ldr	r3, [pc, #260]	; (80029a8 <Connection_StateMachine+0x2c8>)
 80028a2:	7a1a      	ldrb	r2, [r3, #8]
 80028a4:	1dbc      	adds	r4, r7, #6
 80028a6:	4d4c      	ldr	r5, [pc, #304]	; (80029d8 <Connection_StateMachine+0x2f8>)
 80028a8:	2380      	movs	r3, #128	; 0x80
 80028aa:	01d9      	lsls	r1, r3, #7
 80028ac:	2380      	movs	r3, #128	; 0x80
 80028ae:	01d8      	lsls	r0, r3, #7
 80028b0:	23fa      	movs	r3, #250	; 0xfa
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	9306      	str	r3, [sp, #24]
 80028b6:	23fa      	movs	r3, #250	; 0xfa
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	9305      	str	r3, [sp, #20]
 80028bc:	233c      	movs	r3, #60	; 0x3c
 80028be:	9304      	str	r3, [sp, #16]
 80028c0:	2300      	movs	r3, #0
 80028c2:	9303      	str	r3, [sp, #12]
 80028c4:	2328      	movs	r3, #40	; 0x28
 80028c6:	9302      	str	r3, [sp, #8]
 80028c8:	2328      	movs	r3, #40	; 0x28
 80028ca:	9301      	str	r3, [sp, #4]
 80028cc:	2300      	movs	r3, #0
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	002b      	movs	r3, r5
 80028d2:	f009 f989 	bl	800bbe8 <aci_gap_create_connection>
 80028d6:	0003      	movs	r3, r0
 80028d8:	7023      	strb	r3, [r4, #0]
      if (ret != BLE_STATUS_SUCCESS)
 80028da:	1dbb      	adds	r3, r7, #6
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00a      	beq.n	80028f8 <Connection_StateMachine+0x218>
        PRINT_DBG("aci_gap_create_connection() failed: 0x%02x\r\n", ret);
 80028e2:	1dbb      	adds	r3, r7, #6
 80028e4:	781a      	ldrb	r2, [r3, #0]
 80028e6:	4b3d      	ldr	r3, [pc, #244]	; (80029dc <Connection_StateMachine+0x2fc>)
 80028e8:	0011      	movs	r1, r2
 80028ea:	0018      	movs	r0, r3
 80028ec:	f00b fcee 	bl	800e2cc <iprintf>
        discovery.device_state = DISCOVERY_ERROR;
 80028f0:	4b2d      	ldr	r3, [pc, #180]	; (80029a8 <Connection_StateMachine+0x2c8>)
 80028f2:	2280      	movs	r2, #128	; 0x80
 80028f4:	821a      	strh	r2, [r3, #16]
    break; /* end case (DO_DIRECT_CONNECTION_PROC) */
 80028f6:	e053      	b.n	80029a0 <Connection_StateMachine+0x2c0>
        PRINT_DBG("aci_gap_create_connection() OK\r\n");
 80028f8:	4b39      	ldr	r3, [pc, #228]	; (80029e0 <Connection_StateMachine+0x300>)
 80028fa:	0018      	movs	r0, r3
 80028fc:	f00b fd56 	bl	800e3ac <puts>
        discovery.device_state = WAIT_EVENT;
 8002900:	4b29      	ldr	r3, [pc, #164]	; (80029a8 <Connection_StateMachine+0x2c8>)
 8002902:	2202      	movs	r2, #2
 8002904:	821a      	strh	r2, [r3, #16]
    break; /* end case (DO_DIRECT_CONNECTION_PROC) */
 8002906:	e04b      	b.n	80029a0 <Connection_StateMachine+0x2c0>
      discovery.device_state = WAIT_EVENT;
 8002908:	4b27      	ldr	r3, [pc, #156]	; (80029a8 <Connection_StateMachine+0x2c8>)
 800290a:	2202      	movs	r2, #2
 800290c:	821a      	strh	r2, [r3, #16]
    break; /* end case (WAIT_EVENT) */
 800290e:	e047      	b.n	80029a0 <Connection_StateMachine+0x2c0>
      BSP_LED_Off(LED2);
 8002910:	2000      	movs	r0, #0
 8002912:	f001 fe73 	bl	80045fc <BSP_LED_Off>
      hci_le_set_scan_response_data(0,NULL);
 8002916:	2100      	movs	r1, #0
 8002918:	2000      	movs	r0, #0
 800291a:	f008 fd8b 	bl	800b434 <hci_le_set_scan_response_data>
      ret = aci_gap_set_discoverable(ADV_DATA_TYPE, ADV_INTERV_MIN, ADV_INTERV_MAX, PUBLIC_ADDR,
 800291e:	1dbc      	adds	r4, r7, #6
 8002920:	2380      	movs	r3, #128	; 0x80
 8002922:	015a      	lsls	r2, r3, #5
 8002924:	2380      	movs	r3, #128	; 0x80
 8002926:	0119      	lsls	r1, r3, #4
 8002928:	2300      	movs	r3, #0
 800292a:	9306      	str	r3, [sp, #24]
 800292c:	2300      	movs	r3, #0
 800292e:	9305      	str	r3, [sp, #20]
 8002930:	2300      	movs	r3, #0
 8002932:	9304      	str	r3, [sp, #16]
 8002934:	2300      	movs	r3, #0
 8002936:	9303      	str	r3, [sp, #12]
 8002938:	4b2a      	ldr	r3, [pc, #168]	; (80029e4 <Connection_StateMachine+0x304>)
 800293a:	9302      	str	r3, [sp, #8]
 800293c:	2312      	movs	r3, #18
 800293e:	9301      	str	r3, [sp, #4]
 8002940:	2300      	movs	r3, #0
 8002942:	9300      	str	r3, [sp, #0]
 8002944:	2300      	movs	r3, #0
 8002946:	2000      	movs	r0, #0
 8002948:	f008 fe58 	bl	800b5fc <aci_gap_set_discoverable>
 800294c:	0003      	movs	r3, r0
 800294e:	7023      	strb	r3, [r4, #0]
      if (ret != BLE_STATUS_SUCCESS)
 8002950:	1dbb      	adds	r3, r7, #6
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00a      	beq.n	800296e <Connection_StateMachine+0x28e>
        PRINT_DBG("aci_gap_set_discoverable() failed: 0x%02x\r\n", ret);
 8002958:	1dbb      	adds	r3, r7, #6
 800295a:	781a      	ldrb	r2, [r3, #0]
 800295c:	4b22      	ldr	r3, [pc, #136]	; (80029e8 <Connection_StateMachine+0x308>)
 800295e:	0011      	movs	r1, r2
 8002960:	0018      	movs	r0, r3
 8002962:	f00b fcb3 	bl	800e2cc <iprintf>
        discovery.device_state = DISCOVERY_ERROR;
 8002966:	4b10      	ldr	r3, [pc, #64]	; (80029a8 <Connection_StateMachine+0x2c8>)
 8002968:	2280      	movs	r2, #128	; 0x80
 800296a:	821a      	strh	r2, [r3, #16]
    break; /* end case (ENTER_DISCOVERY_MODE) */
 800296c:	e018      	b.n	80029a0 <Connection_StateMachine+0x2c0>
        PRINT_DBG("aci_gap_set_discoverable() OK\r\n");
 800296e:	4b1f      	ldr	r3, [pc, #124]	; (80029ec <Connection_StateMachine+0x30c>)
 8002970:	0018      	movs	r0, r3
 8002972:	f00b fd1b 	bl	800e3ac <puts>
        discovery.startTime = HAL_GetTick();
 8002976:	f002 f911 	bl	8004b9c <HAL_GetTick>
 800297a:	0002      	movs	r2, r0
 800297c:	4b0a      	ldr	r3, [pc, #40]	; (80029a8 <Connection_StateMachine+0x2c8>)
 800297e:	605a      	str	r2, [r3, #4]
        discovery.check_disc_mode_timer = TRUE;
 8002980:	4b09      	ldr	r3, [pc, #36]	; (80029a8 <Connection_StateMachine+0x2c8>)
 8002982:	2201      	movs	r2, #1
 8002984:	705a      	strb	r2, [r3, #1]
        discovery.check_disc_proc_timer = FALSE;
 8002986:	4b08      	ldr	r3, [pc, #32]	; (80029a8 <Connection_StateMachine+0x2c8>)
 8002988:	2200      	movs	r2, #0
 800298a:	701a      	strb	r2, [r3, #0]
        discovery.device_state = WAIT_TIMER_EXPIRED;
 800298c:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <Connection_StateMachine+0x2c8>)
 800298e:	2204      	movs	r2, #4
 8002990:	821a      	strh	r2, [r3, #16]
    break; /* end case (ENTER_DISCOVERY_MODE) */
 8002992:	e005      	b.n	80029a0 <Connection_StateMachine+0x2c0>
      Reset_DiscoveryContext();
 8002994:	f7ff fcbe 	bl	8002314 <Reset_DiscoveryContext>
    break; /* end case (DISCOVERY_ERROR) */
 8002998:	e002      	b.n	80029a0 <Connection_StateMachine+0x2c0>
    break;
 800299a:	46c0      	nop			; (mov r8, r8)
 800299c:	e000      	b.n	80029a0 <Connection_StateMachine+0x2c0>
    break; /* end case (WAIT_TIMER_EXPIRED) */
 800299e:	46c0      	nop			; (mov r8, r8)
  }/* end switch */

}/* end Connection_StateMachine() */
 80029a0:	46c0      	nop			; (mov r8, r8)
 80029a2:	46bd      	mov	sp, r7
 80029a4:	b002      	add	sp, #8
 80029a6:	bdb0      	pop	{r4, r5, r7, pc}
 80029a8:	20000228 	.word	0x20000228
 80029ac:	080111a4 	.word	0x080111a4
 80029b0:	080104ac 	.word	0x080104ac
 80029b4:	080104e4 	.word	0x080104e4
 80029b8:	20000264 	.word	0x20000264
 80029bc:	08010510 	.word	0x08010510
 80029c0:	08010540 	.word	0x08010540
 80029c4:	08010564 	.word	0x08010564
 80029c8:	08010598 	.word	0x08010598
 80029cc:	080105c0 	.word	0x080105c0
 80029d0:	08010434 	.word	0x08010434
 80029d4:	0801043c 	.word	0x0801043c
 80029d8:	20000231 	.word	0x20000231
 80029dc:	080105dc 	.word	0x080105dc
 80029e0:	0801060c 	.word	0x0801060c
 80029e4:	20000008 	.word	0x20000008
 80029e8:	0801062c 	.word	0x0801062c
 80029ec:	08010658 	.word	0x08010658

080029f0 <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 80029f0:	b5b0      	push	{r4, r5, r7, lr}
 80029f2:	b090      	sub	sp, #64	; 0x40
 80029f4:	af02      	add	r7, sp, #8
  if(APP_FLAG(SET_CONNECTABLE))
 80029f6:	4bb3      	ldr	r3, [pc, #716]	; (8002cc4 <User_Process+0x2d4>)
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	2380      	movs	r3, #128	; 0x80
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	4013      	ands	r3, r2
 8002a00:	d008      	beq.n	8002a14 <User_Process+0x24>
  {
    Connection_StateMachine();
 8002a02:	f7ff fe6d 	bl	80026e0 <Connection_StateMachine>
    user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8002a06:	2000      	movs	r0, #0
 8002a08:	f001 fecc 	bl	80047a4 <BSP_PB_GetState>
 8002a0c:	0003      	movs	r3, r0
 8002a0e:	b2da      	uxtb	r2, r3
 8002a10:	4bad      	ldr	r3, [pc, #692]	; (8002cc8 <User_Process+0x2d8>)
 8002a12:	701a      	strb	r2, [r3, #0]
  }

  if (device_role == MASTER_ROLE)
 8002a14:	4bad      	ldr	r3, [pc, #692]	; (8002ccc <User_Process+0x2dc>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d000      	beq.n	8002a1e <User_Process+0x2e>
 8002a1c:	e0d3      	b.n	8002bc6 <User_Process+0x1d6>
  {
    /* Start TX handle Characteristic discovery if not yet done */
    if (APP_FLAG(CONNECTED) && !APP_FLAG(END_READ_TX_CHAR_HANDLE))
 8002a1e:	4ba9      	ldr	r3, [pc, #676]	; (8002cc4 <User_Process+0x2d4>)
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	2380      	movs	r3, #128	; 0x80
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4013      	ands	r3, r2
 8002a28:	d02a      	beq.n	8002a80 <User_Process+0x90>
 8002a2a:	4ba6      	ldr	r3, [pc, #664]	; (8002cc4 <User_Process+0x2d4>)
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	2380      	movs	r3, #128	; 0x80
 8002a30:	015b      	lsls	r3, r3, #5
 8002a32:	4013      	ands	r3, r2
 8002a34:	d124      	bne.n	8002a80 <User_Process+0x90>
    {
      if (!APP_FLAG(START_READ_TX_CHAR_HANDLE))
 8002a36:	4ba3      	ldr	r3, [pc, #652]	; (8002cc4 <User_Process+0x2d4>)
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	2380      	movs	r3, #128	; 0x80
 8002a3c:	011b      	lsls	r3, r3, #4
 8002a3e:	4013      	ands	r3, r2
 8002a40:	d14e      	bne.n	8002ae0 <User_Process+0xf0>
      {
        /* Discovery TX characteristic handle by UUID 128 bits */
        const uint8_t charUuid128_TX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 8002a42:	2518      	movs	r5, #24
 8002a44:	197b      	adds	r3, r7, r5
 8002a46:	4aa2      	ldr	r2, [pc, #648]	; (8002cd0 <User_Process+0x2e0>)
 8002a48:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002a4a:	c313      	stmia	r3!, {r0, r1, r4}
 8002a4c:	6812      	ldr	r2, [r2, #0]
 8002a4e:	601a      	str	r2, [r3, #0]

        BLUENRG_memcpy(&UUID_Tx.UUID_16, charUuid128_TX, 16);
 8002a50:	4ba0      	ldr	r3, [pc, #640]	; (8002cd4 <User_Process+0x2e4>)
 8002a52:	197a      	adds	r2, r7, r5
 8002a54:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002a56:	c313      	stmia	r3!, {r0, r1, r4}
 8002a58:	6812      	ldr	r2, [r2, #0]
 8002a5a:	601a      	str	r2, [r3, #0]
        aci_gatt_disc_char_by_uuid(connection_handle, 0x0001, 0xFFFF,UUID_TYPE_128,&UUID_Tx);
 8002a5c:	4b9e      	ldr	r3, [pc, #632]	; (8002cd8 <User_Process+0x2e8>)
 8002a5e:	881b      	ldrh	r3, [r3, #0]
 8002a60:	b298      	uxth	r0, r3
 8002a62:	4a9e      	ldr	r2, [pc, #632]	; (8002cdc <User_Process+0x2ec>)
 8002a64:	4b9b      	ldr	r3, [pc, #620]	; (8002cd4 <User_Process+0x2e4>)
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	2302      	movs	r3, #2
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	f009 fd78 	bl	800c560 <aci_gatt_disc_char_by_uuid>
        APP_FLAG_SET(START_READ_TX_CHAR_HANDLE);
 8002a70:	4b94      	ldr	r3, [pc, #592]	; (8002cc4 <User_Process+0x2d4>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2280      	movs	r2, #128	; 0x80
 8002a76:	0112      	lsls	r2, r2, #4
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	4b92      	ldr	r3, [pc, #584]	; (8002cc4 <User_Process+0x2d4>)
 8002a7c:	601a      	str	r2, [r3, #0]
      if (!APP_FLAG(START_READ_TX_CHAR_HANDLE))
 8002a7e:	e02f      	b.n	8002ae0 <User_Process+0xf0>
      }
    }
    /* Start RX handle Characteristic discovery if not yet done */
    else if (APP_FLAG(CONNECTED) && !APP_FLAG(END_READ_RX_CHAR_HANDLE))
 8002a80:	4b90      	ldr	r3, [pc, #576]	; (8002cc4 <User_Process+0x2d4>)
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	2380      	movs	r3, #128	; 0x80
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4013      	ands	r3, r2
 8002a8a:	d029      	beq.n	8002ae0 <User_Process+0xf0>
 8002a8c:	4b8d      	ldr	r3, [pc, #564]	; (8002cc4 <User_Process+0x2d4>)
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	2380      	movs	r3, #128	; 0x80
 8002a92:	01db      	lsls	r3, r3, #7
 8002a94:	4013      	ands	r3, r2
 8002a96:	d123      	bne.n	8002ae0 <User_Process+0xf0>
    {
      /* Discovery RX characteristic handle by UUID 128 bits */
      if (!APP_FLAG(START_READ_RX_CHAR_HANDLE))
 8002a98:	4b8a      	ldr	r3, [pc, #552]	; (8002cc4 <User_Process+0x2d4>)
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	2380      	movs	r3, #128	; 0x80
 8002a9e:	019b      	lsls	r3, r3, #6
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	d11d      	bne.n	8002ae0 <User_Process+0xf0>
      {
        /* Discovery RX characteristic handle by UUID 128 bits */
        const uint8_t charUuid128_RX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 8002aa4:	2508      	movs	r5, #8
 8002aa6:	197b      	adds	r3, r7, r5
 8002aa8:	4a8d      	ldr	r2, [pc, #564]	; (8002ce0 <User_Process+0x2f0>)
 8002aaa:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002aac:	c313      	stmia	r3!, {r0, r1, r4}
 8002aae:	6812      	ldr	r2, [r2, #0]
 8002ab0:	601a      	str	r2, [r3, #0]

        BLUENRG_memcpy(&UUID_Rx.UUID_16, charUuid128_RX, 16);
 8002ab2:	4b8c      	ldr	r3, [pc, #560]	; (8002ce4 <User_Process+0x2f4>)
 8002ab4:	197a      	adds	r2, r7, r5
 8002ab6:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002ab8:	c313      	stmia	r3!, {r0, r1, r4}
 8002aba:	6812      	ldr	r2, [r2, #0]
 8002abc:	601a      	str	r2, [r3, #0]
        aci_gatt_disc_char_by_uuid(connection_handle, 0x0001, 0xFFFF,UUID_TYPE_128,&UUID_Rx);
 8002abe:	4b86      	ldr	r3, [pc, #536]	; (8002cd8 <User_Process+0x2e8>)
 8002ac0:	881b      	ldrh	r3, [r3, #0]
 8002ac2:	b298      	uxth	r0, r3
 8002ac4:	4a85      	ldr	r2, [pc, #532]	; (8002cdc <User_Process+0x2ec>)
 8002ac6:	4b87      	ldr	r3, [pc, #540]	; (8002ce4 <User_Process+0x2f4>)
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	2302      	movs	r3, #2
 8002acc:	2101      	movs	r1, #1
 8002ace:	f009 fd47 	bl	800c560 <aci_gatt_disc_char_by_uuid>
        APP_FLAG_SET(START_READ_RX_CHAR_HANDLE);
 8002ad2:	4b7c      	ldr	r3, [pc, #496]	; (8002cc4 <User_Process+0x2d4>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2280      	movs	r2, #128	; 0x80
 8002ad8:	0192      	lsls	r2, r2, #6
 8002ada:	431a      	orrs	r2, r3
 8002adc:	4b79      	ldr	r3, [pc, #484]	; (8002cc4 <User_Process+0x2d4>)
 8002ade:	601a      	str	r2, [r3, #0]
      }
    }

    if(APP_FLAG(CONNECTED) && APP_FLAG(END_READ_TX_CHAR_HANDLE) && APP_FLAG(END_READ_RX_CHAR_HANDLE) && !APP_FLAG(NOTIFICATIONS_ENABLED))
 8002ae0:	4b78      	ldr	r3, [pc, #480]	; (8002cc4 <User_Process+0x2d4>)
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	2380      	movs	r3, #128	; 0x80
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4013      	ands	r3, r2
 8002aea:	d100      	bne.n	8002aee <User_Process+0xfe>
 8002aec:	e06b      	b.n	8002bc6 <User_Process+0x1d6>
 8002aee:	4b75      	ldr	r3, [pc, #468]	; (8002cc4 <User_Process+0x2d4>)
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	2380      	movs	r3, #128	; 0x80
 8002af4:	015b      	lsls	r3, r3, #5
 8002af6:	4013      	ands	r3, r2
 8002af8:	d065      	beq.n	8002bc6 <User_Process+0x1d6>
 8002afa:	4b72      	ldr	r3, [pc, #456]	; (8002cc4 <User_Process+0x2d4>)
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	2380      	movs	r3, #128	; 0x80
 8002b00:	01db      	lsls	r3, r3, #7
 8002b02:	4013      	ands	r3, r2
 8002b04:	d05f      	beq.n	8002bc6 <User_Process+0x1d6>
 8002b06:	4b6f      	ldr	r3, [pc, #444]	; (8002cc4 <User_Process+0x2d4>)
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	2380      	movs	r3, #128	; 0x80
 8002b0c:	00db      	lsls	r3, r3, #3
 8002b0e:	4013      	ands	r3, r2
 8002b10:	d159      	bne.n	8002bc6 <User_Process+0x1d6>
    {
      /* Before enabling notifications perform an ATT MTU exchange procedure */
      if ((mtu_exchanged == 0) && (mtu_exchanged_wait == 0))
 8002b12:	4b75      	ldr	r3, [pc, #468]	; (8002ce8 <User_Process+0x2f8>)
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d126      	bne.n	8002b68 <User_Process+0x178>
 8002b1a:	4b74      	ldr	r3, [pc, #464]	; (8002cec <User_Process+0x2fc>)
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d122      	bne.n	8002b68 <User_Process+0x178>
      {
        PRINT_DBG("ROLE MASTER (mtu_exchanged %d, mtu_exchanged_wait %d)\r\n",
 8002b22:	4b71      	ldr	r3, [pc, #452]	; (8002ce8 <User_Process+0x2f8>)
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	0019      	movs	r1, r3
 8002b28:	4b70      	ldr	r3, [pc, #448]	; (8002cec <User_Process+0x2fc>)
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	001a      	movs	r2, r3
 8002b2e:	4b70      	ldr	r3, [pc, #448]	; (8002cf0 <User_Process+0x300>)
 8002b30:	0018      	movs	r0, r3
 8002b32:	f00b fbcb 	bl	800e2cc <iprintf>
                  mtu_exchanged, mtu_exchanged_wait);

        uint8_t ret = aci_gatt_exchange_config(connection_handle);
 8002b36:	4b68      	ldr	r3, [pc, #416]	; (8002cd8 <User_Process+0x2e8>)
 8002b38:	881b      	ldrh	r3, [r3, #0]
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	2533      	movs	r5, #51	; 0x33
 8002b3e:	197c      	adds	r4, r7, r5
 8002b40:	0018      	movs	r0, r3
 8002b42:	f009 fc99 	bl	800c478 <aci_gatt_exchange_config>
 8002b46:	0003      	movs	r3, r0
 8002b48:	7023      	strb	r3, [r4, #0]
        if (ret != BLE_STATUS_SUCCESS) {
 8002b4a:	197b      	adds	r3, r7, r5
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d006      	beq.n	8002b60 <User_Process+0x170>
          PRINT_DBG("aci_gatt_exchange_configuration error 0x%02x\r\n", ret);
 8002b52:	197b      	adds	r3, r7, r5
 8002b54:	781a      	ldrb	r2, [r3, #0]
 8002b56:	4b67      	ldr	r3, [pc, #412]	; (8002cf4 <User_Process+0x304>)
 8002b58:	0011      	movs	r1, r2
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f00b fbb6 	bl	800e2cc <iprintf>
        }
        mtu_exchanged_wait = 1;
 8002b60:	4b62      	ldr	r3, [pc, #392]	; (8002cec <User_Process+0x2fc>)
 8002b62:	2201      	movs	r2, #1
 8002b64:	701a      	strb	r2, [r3, #0]
      {
 8002b66:	e02e      	b.n	8002bc6 <User_Process+0x1d6>
      }
      else if ((mtu_exchanged == 1) && (mtu_exchanged_wait == 2))
 8002b68:	4b5f      	ldr	r3, [pc, #380]	; (8002ce8 <User_Process+0x2f8>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d12a      	bne.n	8002bc6 <User_Process+0x1d6>
 8002b70:	4b5e      	ldr	r3, [pc, #376]	; (8002cec <User_Process+0x2fc>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d126      	bne.n	8002bc6 <User_Process+0x1d6>
      {
        uint8_t client_char_conf_data[] = {0x01, 0x00}; // Enable notifications
 8002b78:	1d3b      	adds	r3, r7, #4
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	801a      	strh	r2, [r3, #0]
        uint32_t tickstart = HAL_GetTick();
 8002b7e:	f002 f80d 	bl	8004b9c <HAL_GetTick>
 8002b82:	0003      	movs	r3, r0
 8002b84:	62fb      	str	r3, [r7, #44]	; 0x2c

        while(aci_gatt_write_char_desc(connection_handle, tx_handle+2, 2, client_char_conf_data)==BLE_STATUS_NOT_ALLOWED)
 8002b86:	e007      	b.n	8002b98 <User_Process+0x1a8>
        {
          // Radio is busy.
          if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 8002b88:	f002 f808 	bl	8004b9c <HAL_GetTick>
 8002b8c:	0002      	movs	r2, r0
 8002b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	4a59      	ldr	r2, [pc, #356]	; (8002cf8 <User_Process+0x308>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d80e      	bhi.n	8002bb6 <User_Process+0x1c6>
        while(aci_gatt_write_char_desc(connection_handle, tx_handle+2, 2, client_char_conf_data)==BLE_STATUS_NOT_ALLOWED)
 8002b98:	4b4f      	ldr	r3, [pc, #316]	; (8002cd8 <User_Process+0x2e8>)
 8002b9a:	881b      	ldrh	r3, [r3, #0]
 8002b9c:	b298      	uxth	r0, r3
 8002b9e:	4b57      	ldr	r3, [pc, #348]	; (8002cfc <User_Process+0x30c>)
 8002ba0:	881b      	ldrh	r3, [r3, #0]
 8002ba2:	3302      	adds	r3, #2
 8002ba4:	b299      	uxth	r1, r3
 8002ba6:	1d3b      	adds	r3, r7, #4
 8002ba8:	2202      	movs	r2, #2
 8002baa:	f009 fde1 	bl	800c770 <aci_gatt_write_char_desc>
 8002bae:	0003      	movs	r3, r0
 8002bb0:	2b46      	cmp	r3, #70	; 0x46
 8002bb2:	d0e9      	beq.n	8002b88 <User_Process+0x198>
 8002bb4:	e000      	b.n	8002bb8 <User_Process+0x1c8>
          if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 8002bb6:	46c0      	nop			; (mov r8, r8)
        }
        APP_FLAG_SET(NOTIFICATIONS_ENABLED);
 8002bb8:	4b42      	ldr	r3, [pc, #264]	; (8002cc4 <User_Process+0x2d4>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2280      	movs	r2, #128	; 0x80
 8002bbe:	00d2      	lsls	r2, r2, #3
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	4b40      	ldr	r3, [pc, #256]	; (8002cc4 <User_Process+0x2d4>)
 8002bc4:	601a      	str	r2, [r3, #0]
	  }
    }
  } /* if (device_role == MASTER_ROLE) */

  if (device_role == SLAVE_ROLE) {
 8002bc6:	4b41      	ldr	r3, [pc, #260]	; (8002ccc <User_Process+0x2dc>)
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d12f      	bne.n	8002c2e <User_Process+0x23e>
    if (APP_FLAG(CONNECTED)) {
 8002bce:	4b3d      	ldr	r3, [pc, #244]	; (8002cc4 <User_Process+0x2d4>)
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	2380      	movs	r3, #128	; 0x80
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	d029      	beq.n	8002c2e <User_Process+0x23e>
      if ((mtu_exchanged == 0) && (mtu_exchanged_wait == 0))
 8002bda:	4b43      	ldr	r3, [pc, #268]	; (8002ce8 <User_Process+0x2f8>)
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d125      	bne.n	8002c2e <User_Process+0x23e>
 8002be2:	4b42      	ldr	r3, [pc, #264]	; (8002cec <User_Process+0x2fc>)
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d121      	bne.n	8002c2e <User_Process+0x23e>
      {
        PRINT_DBG("ROLE SLAVE (mtu_exchanged %d, mtu_exchanged_wait %d)\r\n",
 8002bea:	4b3f      	ldr	r3, [pc, #252]	; (8002ce8 <User_Process+0x2f8>)
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	0019      	movs	r1, r3
 8002bf0:	4b3e      	ldr	r3, [pc, #248]	; (8002cec <User_Process+0x2fc>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	001a      	movs	r2, r3
 8002bf6:	4b42      	ldr	r3, [pc, #264]	; (8002d00 <User_Process+0x310>)
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	f00b fb67 	bl	800e2cc <iprintf>
                  mtu_exchanged, mtu_exchanged_wait);

        mtu_exchanged_wait = 1;
 8002bfe:	4b3b      	ldr	r3, [pc, #236]	; (8002cec <User_Process+0x2fc>)
 8002c00:	2201      	movs	r2, #1
 8002c02:	701a      	strb	r2, [r3, #0]
        uint8_t ret = aci_gatt_exchange_config(connection_handle);
 8002c04:	4b34      	ldr	r3, [pc, #208]	; (8002cd8 <User_Process+0x2e8>)
 8002c06:	881b      	ldrh	r3, [r3, #0]
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	252b      	movs	r5, #43	; 0x2b
 8002c0c:	197c      	adds	r4, r7, r5
 8002c0e:	0018      	movs	r0, r3
 8002c10:	f009 fc32 	bl	800c478 <aci_gatt_exchange_config>
 8002c14:	0003      	movs	r3, r0
 8002c16:	7023      	strb	r3, [r4, #0]
        if (ret != BLE_STATUS_SUCCESS) {
 8002c18:	197b      	adds	r3, r7, r5
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d006      	beq.n	8002c2e <User_Process+0x23e>
          PRINT_DBG("aci_gatt_exchange_configuration error 0x%02x\r\n", ret);
 8002c20:	197b      	adds	r3, r7, r5
 8002c22:	781a      	ldrb	r2, [r3, #0]
 8002c24:	4b33      	ldr	r3, [pc, #204]	; (8002cf4 <User_Process+0x304>)
 8002c26:	0011      	movs	r1, r2
 8002c28:	0018      	movs	r0, r3
 8002c2a:	f00b fb4f 	bl	800e2cc <iprintf>
      }
    }
  }

  /* Check if the user has pushed the button */
  if (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state)
 8002c2e:	2000      	movs	r0, #0
 8002c30:	f001 fdb8 	bl	80047a4 <BSP_PB_GetState>
 8002c34:	0002      	movs	r2, r0
 8002c36:	4b24      	ldr	r3, [pc, #144]	; (8002cc8 <User_Process+0x2d8>)
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	4259      	negs	r1, r3
 8002c3c:	414b      	adcs	r3, r1
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d13b      	bne.n	8002cbc <User_Process+0x2cc>
  {
    while (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state);
 8002c44:	46c0      	nop			; (mov r8, r8)
 8002c46:	2000      	movs	r0, #0
 8002c48:	f001 fdac 	bl	80047a4 <BSP_PB_GetState>
 8002c4c:	0002      	movs	r2, r0
 8002c4e:	4b1e      	ldr	r3, [pc, #120]	; (8002cc8 <User_Process+0x2d8>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	4259      	negs	r1, r3
 8002c54:	414b      	adcs	r3, r1
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d0f4      	beq.n	8002c46 <User_Process+0x256>

    if(APP_FLAG(CONNECTED) && APP_FLAG(NOTIFICATIONS_ENABLED)){
 8002c5c:	4b19      	ldr	r3, [pc, #100]	; (8002cc4 <User_Process+0x2d4>)
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	2380      	movs	r3, #128	; 0x80
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4013      	ands	r3, r2
 8002c66:	d029      	beq.n	8002cbc <User_Process+0x2cc>
 8002c68:	4b16      	ldr	r3, [pc, #88]	; (8002cc4 <User_Process+0x2d4>)
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	2380      	movs	r3, #128	; 0x80
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	4013      	ands	r3, r2
 8002c72:	d023      	beq.n	8002cbc <User_Process+0x2cc>
      /* Send a toggle command to the remote device */
      uint8_t* data_ptr = data;
 8002c74:	4b23      	ldr	r3, [pc, #140]	; (8002d04 <User_Process+0x314>)
 8002c76:	637b      	str	r3, [r7, #52]	; 0x34
      uint8_t  curr_len = 0;
 8002c78:	232a      	movs	r3, #42	; 0x2a
 8002c7a:	18fb      	adds	r3, r7, r3
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	701a      	strb	r2, [r3, #0]

      while (data_ptr < (data + sizeof(data)))
 8002c80:	e018      	b.n	8002cb4 <User_Process+0x2c4>
      {
        /* if data to send are greater than the max char value length, send them in chunks */
        curr_len = ((data + sizeof(data) - data_ptr) > write_char_len) ? (write_char_len) : (data + sizeof(data) - data_ptr);
 8002c82:	4a21      	ldr	r2, [pc, #132]	; (8002d08 <User_Process+0x318>)
 8002c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c86:	1ad1      	subs	r1, r2, r3
 8002c88:	4b20      	ldr	r3, [pc, #128]	; (8002d0c <User_Process+0x31c>)
 8002c8a:	881b      	ldrh	r3, [r3, #0]
 8002c8c:	001a      	movs	r2, r3
 8002c8e:	000b      	movs	r3, r1
 8002c90:	4293      	cmp	r3, r2
 8002c92:	dd00      	ble.n	8002c96 <User_Process+0x2a6>
 8002c94:	0013      	movs	r3, r2
 8002c96:	242a      	movs	r4, #42	; 0x2a
 8002c98:	193a      	adds	r2, r7, r4
 8002c9a:	7013      	strb	r3, [r2, #0]
        sendData(data_ptr, curr_len);
 8002c9c:	193b      	adds	r3, r7, r4
 8002c9e:	781a      	ldrb	r2, [r3, #0]
 8002ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ca2:	0011      	movs	r1, r2
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	f7ff fa9b 	bl	80021e0 <sendData>
        data_ptr += curr_len;
 8002caa:	193b      	adds	r3, r7, r4
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cb0:	18d3      	adds	r3, r2, r3
 8002cb2:	637b      	str	r3, [r7, #52]	; 0x34
      while (data_ptr < (data + sizeof(data)))
 8002cb4:	4b14      	ldr	r3, [pc, #80]	; (8002d08 <User_Process+0x318>)
 8002cb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d3e2      	bcc.n	8002c82 <User_Process+0x292>
                               // called in main().
                               // E.g. it can be enabled for debugging.
    }
  }

}
 8002cbc:	46c0      	nop			; (mov r8, r8)
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	b00e      	add	sp, #56	; 0x38
 8002cc2:	bdb0      	pop	{r4, r5, r7, pc}
 8002cc4:	20000000 	.word	0x20000000
 8002cc8:	20000224 	.word	0x20000224
 8002ccc:	20000004 	.word	0x20000004
 8002cd0:	08010718 	.word	0x08010718
 8002cd4:	20000240 	.word	0x20000240
 8002cd8:	2000023c 	.word	0x2000023c
 8002cdc:	0000ffff 	.word	0x0000ffff
 8002ce0:	08010728 	.word	0x08010728
 8002ce4:	20000250 	.word	0x20000250
 8002ce8:	20000266 	.word	0x20000266
 8002cec:	20000267 	.word	0x20000267
 8002cf0:	08010678 	.word	0x08010678
 8002cf4:	080106b0 	.word	0x080106b0
 8002cf8:	00002710 	.word	0x00002710
 8002cfc:	20000260 	.word	0x20000260
 8002d00:	080106e0 	.word	0x080106e0
 8002d04:	20000268 	.word	0x20000268
 8002d08:	200002a4 	.word	0x200002a4
 8002d0c:	20000006 	.word	0x20000006

08002d10 <aci_gap_proc_complete_event>:
 *******************************************************************************/
void aci_gap_proc_complete_event(uint8_t Procedure_Code,
                                 uint8_t Status,
                                 uint8_t Data_Length,
                                 uint8_t Data[])
{
 8002d10:	b590      	push	{r4, r7, lr}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	0004      	movs	r4, r0
 8002d18:	0008      	movs	r0, r1
 8002d1a:	0011      	movs	r1, r2
 8002d1c:	603b      	str	r3, [r7, #0]
 8002d1e:	1dfb      	adds	r3, r7, #7
 8002d20:	1c22      	adds	r2, r4, #0
 8002d22:	701a      	strb	r2, [r3, #0]
 8002d24:	1dbb      	adds	r3, r7, #6
 8002d26:	1c02      	adds	r2, r0, #0
 8002d28:	701a      	strb	r2, [r3, #0]
 8002d2a:	1d7b      	adds	r3, r7, #5
 8002d2c:	1c0a      	adds	r2, r1, #0
 8002d2e:	701a      	strb	r2, [r3, #0]
  if (Procedure_Code == GAP_GENERAL_DISCOVERY_PROC)
 8002d30:	1dfb      	adds	r3, r7, #7
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d119      	bne.n	8002d6c <aci_gap_proc_complete_event+0x5c>
  {
    /* gap procedure complete has been raised as consequence of a GAP
       terminate procedure done after a device found event during the discovery procedure */
    if (discovery.do_connect == TRUE)
 8002d38:	4b0e      	ldr	r3, [pc, #56]	; (8002d74 <aci_gap_proc_complete_event+0x64>)
 8002d3a:	78db      	ldrb	r3, [r3, #3]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d10c      	bne.n	8002d5a <aci_gap_proc_complete_event+0x4a>
    {
      discovery.do_connect = FALSE;
 8002d40:	4b0c      	ldr	r3, [pc, #48]	; (8002d74 <aci_gap_proc_complete_event+0x64>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	70da      	strb	r2, [r3, #3]
      discovery.check_disc_proc_timer = FALSE;
 8002d46:	4b0b      	ldr	r3, [pc, #44]	; (8002d74 <aci_gap_proc_complete_event+0x64>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	701a      	strb	r2, [r3, #0]
      discovery.startTime = 0;
 8002d4c:	4b09      	ldr	r3, [pc, #36]	; (8002d74 <aci_gap_proc_complete_event+0x64>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	605a      	str	r2, [r3, #4]
      /* discovery procedure has been completed and no device found:
         go to discovery mode */
      discovery.device_state = DO_DIRECT_CONNECTION_PROC;
 8002d52:	4b08      	ldr	r3, [pc, #32]	; (8002d74 <aci_gap_proc_complete_event+0x64>)
 8002d54:	2208      	movs	r2, #8
 8002d56:	821a      	strh	r2, [r3, #16]
      discovery.check_disc_proc_timer = FALSE;
      discovery.startTime = 0;
      discovery.device_state = ENTER_DISCOVERY_MODE;
    }
  }
}
 8002d58:	e008      	b.n	8002d6c <aci_gap_proc_complete_event+0x5c>
      discovery.check_disc_proc_timer = FALSE;
 8002d5a:	4b06      	ldr	r3, [pc, #24]	; (8002d74 <aci_gap_proc_complete_event+0x64>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	701a      	strb	r2, [r3, #0]
      discovery.startTime = 0;
 8002d60:	4b04      	ldr	r3, [pc, #16]	; (8002d74 <aci_gap_proc_complete_event+0x64>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	605a      	str	r2, [r3, #4]
      discovery.device_state = ENTER_DISCOVERY_MODE;
 8002d66:	4b03      	ldr	r3, [pc, #12]	; (8002d74 <aci_gap_proc_complete_event+0x64>)
 8002d68:	2210      	movs	r2, #16
 8002d6a:	821a      	strh	r2, [r3, #16]
}
 8002d6c:	46c0      	nop			; (mov r8, r8)
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	b003      	add	sp, #12
 8002d72:	bd90      	pop	{r4, r7, pc}
 8002d74:	20000228 	.word	0x20000228

08002d78 <hci_le_connection_complete_event>:
                                      uint16_t Conn_Interval,
                                      uint16_t Conn_Latency,
                                      uint16_t Supervision_Timeout,
                                      uint8_t Master_Clock_Accuracy)

{
 8002d78:	b5b0      	push	{r4, r5, r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	0005      	movs	r5, r0
 8002d80:	000c      	movs	r4, r1
 8002d82:	0010      	movs	r0, r2
 8002d84:	0019      	movs	r1, r3
 8002d86:	1dfb      	adds	r3, r7, #7
 8002d88:	1c2a      	adds	r2, r5, #0
 8002d8a:	701a      	strb	r2, [r3, #0]
 8002d8c:	1d3b      	adds	r3, r7, #4
 8002d8e:	1c22      	adds	r2, r4, #0
 8002d90:	801a      	strh	r2, [r3, #0]
 8002d92:	1dbb      	adds	r3, r7, #6
 8002d94:	1c02      	adds	r2, r0, #0
 8002d96:	701a      	strb	r2, [r3, #0]
 8002d98:	1cfb      	adds	r3, r7, #3
 8002d9a:	1c0a      	adds	r2, r1, #0
 8002d9c:	701a      	strb	r2, [r3, #0]
  /* Set the exit state for the Connection state machine: APP_FLAG_CLEAR(SET_CONNECTABLE); */
  APP_FLAG_CLEAR(SET_CONNECTABLE);
 8002d9e:	4b26      	ldr	r3, [pc, #152]	; (8002e38 <hci_le_connection_complete_event+0xc0>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a26      	ldr	r2, [pc, #152]	; (8002e3c <hci_le_connection_complete_event+0xc4>)
 8002da4:	401a      	ands	r2, r3
 8002da6:	4b24      	ldr	r3, [pc, #144]	; (8002e38 <hci_le_connection_complete_event+0xc0>)
 8002da8:	601a      	str	r2, [r3, #0]
  discovery.check_disc_proc_timer = FALSE;
 8002daa:	4b25      	ldr	r3, [pc, #148]	; (8002e40 <hci_le_connection_complete_event+0xc8>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	701a      	strb	r2, [r3, #0]
  discovery.check_disc_mode_timer = FALSE;
 8002db0:	4b23      	ldr	r3, [pc, #140]	; (8002e40 <hci_le_connection_complete_event+0xc8>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	705a      	strb	r2, [r3, #1]
  discovery.startTime = 0;
 8002db6:	4b22      	ldr	r3, [pc, #136]	; (8002e40 <hci_le_connection_complete_event+0xc8>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	605a      	str	r2, [r3, #4]

  connection_handle = Connection_Handle;
 8002dbc:	4b21      	ldr	r3, [pc, #132]	; (8002e44 <hci_le_connection_complete_event+0xcc>)
 8002dbe:	1d3a      	adds	r2, r7, #4
 8002dc0:	8812      	ldrh	r2, [r2, #0]
 8002dc2:	801a      	strh	r2, [r3, #0]

  APP_FLAG_SET(CONNECTED);
 8002dc4:	4b1c      	ldr	r3, [pc, #112]	; (8002e38 <hci_le_connection_complete_event+0xc0>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2280      	movs	r2, #128	; 0x80
 8002dca:	0092      	lsls	r2, r2, #2
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	4b1a      	ldr	r3, [pc, #104]	; (8002e38 <hci_le_connection_complete_event+0xc0>)
 8002dd0:	601a      	str	r2, [r3, #0]
  discovery.device_state = INIT_STATE;
 8002dd2:	4b1b      	ldr	r3, [pc, #108]	; (8002e40 <hci_le_connection_complete_event+0xc8>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	821a      	strh	r2, [r3, #16]

  /* store device role */
  device_role = Role;
 8002dd8:	4b1b      	ldr	r3, [pc, #108]	; (8002e48 <hci_le_connection_complete_event+0xd0>)
 8002dda:	1dba      	adds	r2, r7, #6
 8002ddc:	7812      	ldrb	r2, [r2, #0]
 8002dde:	701a      	strb	r2, [r3, #0]

  PRINT_DBG("Connection Complete with peer address: ");
 8002de0:	4b1a      	ldr	r3, [pc, #104]	; (8002e4c <hci_le_connection_complete_event+0xd4>)
 8002de2:	0018      	movs	r0, r3
 8002de4:	f00b fa72 	bl	800e2cc <iprintf>
  for (uint8_t i=5; i>0; i--)
 8002de8:	230f      	movs	r3, #15
 8002dea:	18fb      	adds	r3, r7, r3
 8002dec:	2205      	movs	r2, #5
 8002dee:	701a      	strb	r2, [r3, #0]
 8002df0:	e010      	b.n	8002e14 <hci_le_connection_complete_event+0x9c>
  {
    PRINT_DBG("%02X-", Peer_Address[i]);
 8002df2:	240f      	movs	r4, #15
 8002df4:	193b      	adds	r3, r7, r4
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	6a3a      	ldr	r2, [r7, #32]
 8002dfa:	18d3      	adds	r3, r2, r3
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	001a      	movs	r2, r3
 8002e00:	4b13      	ldr	r3, [pc, #76]	; (8002e50 <hci_le_connection_complete_event+0xd8>)
 8002e02:	0011      	movs	r1, r2
 8002e04:	0018      	movs	r0, r3
 8002e06:	f00b fa61 	bl	800e2cc <iprintf>
  for (uint8_t i=5; i>0; i--)
 8002e0a:	193b      	adds	r3, r7, r4
 8002e0c:	781a      	ldrb	r2, [r3, #0]
 8002e0e:	193b      	adds	r3, r7, r4
 8002e10:	3a01      	subs	r2, #1
 8002e12:	701a      	strb	r2, [r3, #0]
 8002e14:	230f      	movs	r3, #15
 8002e16:	18fb      	adds	r3, r7, r3
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1e9      	bne.n	8002df2 <hci_le_connection_complete_event+0x7a>
  }
  PRINT_DBG("%02X\r\n", Peer_Address[0]);
 8002e1e:	6a3b      	ldr	r3, [r7, #32]
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	001a      	movs	r2, r3
 8002e24:	4b0b      	ldr	r3, [pc, #44]	; (8002e54 <hci_le_connection_complete_event+0xdc>)
 8002e26:	0011      	movs	r1, r2
 8002e28:	0018      	movs	r0, r3
 8002e2a:	f00b fa4f 	bl	800e2cc <iprintf>

}/* end hci_le_connection_complete_event() */
 8002e2e:	46c0      	nop			; (mov r8, r8)
 8002e30:	46bd      	mov	sp, r7
 8002e32:	b004      	add	sp, #16
 8002e34:	bdb0      	pop	{r4, r5, r7, pc}
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	20000000 	.word	0x20000000
 8002e3c:	fffffeff 	.word	0xfffffeff
 8002e40:	20000228 	.word	0x20000228
 8002e44:	2000023c 	.word	0x2000023c
 8002e48:	20000004 	.word	0x20000004
 8002e4c:	08010738 	.word	0x08010738
 8002e50:	08010434 	.word	0x08010434
 8002e54:	0801043c 	.word	0x0801043c

08002e58 <hci_disconnection_complete_event>:
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void hci_disconnection_complete_event(uint8_t Status,
                                      uint16_t Connection_Handle,
                                      uint8_t Reason)
{
 8002e58:	b590      	push	{r4, r7, lr}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	0004      	movs	r4, r0
 8002e60:	0008      	movs	r0, r1
 8002e62:	0011      	movs	r1, r2
 8002e64:	1dfb      	adds	r3, r7, #7
 8002e66:	1c22      	adds	r2, r4, #0
 8002e68:	701a      	strb	r2, [r3, #0]
 8002e6a:	1d3b      	adds	r3, r7, #4
 8002e6c:	1c02      	adds	r2, r0, #0
 8002e6e:	801a      	strh	r2, [r3, #0]
 8002e70:	1dbb      	adds	r3, r7, #6
 8002e72:	1c0a      	adds	r2, r1, #0
 8002e74:	701a      	strb	r2, [r3, #0]
  APP_FLAG_CLEAR(CONNECTED);
 8002e76:	4b1f      	ldr	r3, [pc, #124]	; (8002ef4 <hci_disconnection_complete_event+0x9c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a1f      	ldr	r2, [pc, #124]	; (8002ef8 <hci_disconnection_complete_event+0xa0>)
 8002e7c:	401a      	ands	r2, r3
 8002e7e:	4b1d      	ldr	r3, [pc, #116]	; (8002ef4 <hci_disconnection_complete_event+0x9c>)
 8002e80:	601a      	str	r2, [r3, #0]
  /* Make the device connectable again. */
  APP_FLAG_SET(SET_CONNECTABLE);
 8002e82:	4b1c      	ldr	r3, [pc, #112]	; (8002ef4 <hci_disconnection_complete_event+0x9c>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2280      	movs	r2, #128	; 0x80
 8002e88:	0052      	lsls	r2, r2, #1
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	4b19      	ldr	r3, [pc, #100]	; (8002ef4 <hci_disconnection_complete_event+0x9c>)
 8002e8e:	601a      	str	r2, [r3, #0]
  APP_FLAG_CLEAR(NOTIFICATIONS_ENABLED);
 8002e90:	4b18      	ldr	r3, [pc, #96]	; (8002ef4 <hci_disconnection_complete_event+0x9c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a19      	ldr	r2, [pc, #100]	; (8002efc <hci_disconnection_complete_event+0xa4>)
 8002e96:	401a      	ands	r2, r3
 8002e98:	4b16      	ldr	r3, [pc, #88]	; (8002ef4 <hci_disconnection_complete_event+0x9c>)
 8002e9a:	601a      	str	r2, [r3, #0]

  APP_FLAG_CLEAR(START_READ_TX_CHAR_HANDLE);
 8002e9c:	4b15      	ldr	r3, [pc, #84]	; (8002ef4 <hci_disconnection_complete_event+0x9c>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a17      	ldr	r2, [pc, #92]	; (8002f00 <hci_disconnection_complete_event+0xa8>)
 8002ea2:	401a      	ands	r2, r3
 8002ea4:	4b13      	ldr	r3, [pc, #76]	; (8002ef4 <hci_disconnection_complete_event+0x9c>)
 8002ea6:	601a      	str	r2, [r3, #0]
  APP_FLAG_CLEAR(END_READ_TX_CHAR_HANDLE);
 8002ea8:	4b12      	ldr	r3, [pc, #72]	; (8002ef4 <hci_disconnection_complete_event+0x9c>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a15      	ldr	r2, [pc, #84]	; (8002f04 <hci_disconnection_complete_event+0xac>)
 8002eae:	401a      	ands	r2, r3
 8002eb0:	4b10      	ldr	r3, [pc, #64]	; (8002ef4 <hci_disconnection_complete_event+0x9c>)
 8002eb2:	601a      	str	r2, [r3, #0]
  APP_FLAG_CLEAR(START_READ_RX_CHAR_HANDLE);
 8002eb4:	4b0f      	ldr	r3, [pc, #60]	; (8002ef4 <hci_disconnection_complete_event+0x9c>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a13      	ldr	r2, [pc, #76]	; (8002f08 <hci_disconnection_complete_event+0xb0>)
 8002eba:	401a      	ands	r2, r3
 8002ebc:	4b0d      	ldr	r3, [pc, #52]	; (8002ef4 <hci_disconnection_complete_event+0x9c>)
 8002ebe:	601a      	str	r2, [r3, #0]
  APP_FLAG_CLEAR(END_READ_RX_CHAR_HANDLE);
 8002ec0:	4b0c      	ldr	r3, [pc, #48]	; (8002ef4 <hci_disconnection_complete_event+0x9c>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a11      	ldr	r2, [pc, #68]	; (8002f0c <hci_disconnection_complete_event+0xb4>)
 8002ec6:	401a      	ands	r2, r3
 8002ec8:	4b0a      	ldr	r3, [pc, #40]	; (8002ef4 <hci_disconnection_complete_event+0x9c>)
 8002eca:	601a      	str	r2, [r3, #0]
  APP_FLAG_CLEAR(TX_BUFFER_FULL);
 8002ecc:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <hci_disconnection_complete_event+0x9c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a0f      	ldr	r2, [pc, #60]	; (8002f10 <hci_disconnection_complete_event+0xb8>)
 8002ed2:	401a      	ands	r2, r3
 8002ed4:	4b07      	ldr	r3, [pc, #28]	; (8002ef4 <hci_disconnection_complete_event+0x9c>)
 8002ed6:	601a      	str	r2, [r3, #0]

  PRINT_DBG("Disconnection with reason: 0x%02X\r\n", Reason);
 8002ed8:	1dbb      	adds	r3, r7, #6
 8002eda:	781a      	ldrb	r2, [r3, #0]
 8002edc:	4b0d      	ldr	r3, [pc, #52]	; (8002f14 <hci_disconnection_complete_event+0xbc>)
 8002ede:	0011      	movs	r1, r2
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	f00b f9f3 	bl	800e2cc <iprintf>
  Reset_DiscoveryContext();
 8002ee6:	f7ff fa15 	bl	8002314 <Reset_DiscoveryContext>

}/* end hci_disconnection_complete_event() */
 8002eea:	46c0      	nop			; (mov r8, r8)
 8002eec:	46bd      	mov	sp, r7
 8002eee:	b003      	add	sp, #12
 8002ef0:	bd90      	pop	{r4, r7, pc}
 8002ef2:	46c0      	nop			; (mov r8, r8)
 8002ef4:	20000000 	.word	0x20000000
 8002ef8:	fffffdff 	.word	0xfffffdff
 8002efc:	fffffbff 	.word	0xfffffbff
 8002f00:	fffff7ff 	.word	0xfffff7ff
 8002f04:	ffffefff 	.word	0xffffefff
 8002f08:	ffffdfff 	.word	0xffffdfff
 8002f0c:	ffffbfff 	.word	0xffffbfff
 8002f10:	ffff7fff 	.word	0xffff7fff
 8002f14:	08010760 	.word	0x08010760

08002f18 <hci_le_advertising_report_event>:
 * Output         : See file bluenrg1_events.h
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void hci_le_advertising_report_event(uint8_t Num_Reports,
                                     Advertising_Report_t Advertising_Report[])
{
 8002f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f1a:	b087      	sub	sp, #28
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	0002      	movs	r2, r0
 8002f20:	6039      	str	r1, [r7, #0]
 8002f22:	1dfb      	adds	r3, r7, #7
 8002f24:	701a      	strb	r2, [r3, #0]
  /* Advertising_Report contains all the expected parameters */
  uint8_t evt_type = Advertising_Report[0].Event_Type ;
 8002f26:	2417      	movs	r4, #23
 8002f28:	193b      	adds	r3, r7, r4
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	7812      	ldrb	r2, [r2, #0]
 8002f2e:	701a      	strb	r2, [r3, #0]
  uint8_t data_length = Advertising_Report[0].Length_Data;
 8002f30:	2516      	movs	r5, #22
 8002f32:	197b      	adds	r3, r7, r5
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	7a12      	ldrb	r2, [r2, #8]
 8002f38:	701a      	strb	r2, [r3, #0]
  uint8_t bdaddr_type = Advertising_Report[0].Address_Type;
 8002f3a:	2615      	movs	r6, #21
 8002f3c:	19bb      	adds	r3, r7, r6
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	7852      	ldrb	r2, [r2, #1]
 8002f42:	701a      	strb	r2, [r3, #0]
  uint8_t bdaddr[6];

  BLUENRG_memcpy(bdaddr, Advertising_Report[0].Address,6);
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	3302      	adds	r3, #2
 8002f48:	220c      	movs	r2, #12
 8002f4a:	18ba      	adds	r2, r7, r2
 8002f4c:	0010      	movs	r0, r2
 8002f4e:	0019      	movs	r1, r3
 8002f50:	2306      	movs	r3, #6
 8002f52:	001a      	movs	r2, r3
 8002f54:	f00b fbc6 	bl	800e6e4 <memcpy>

  /* BLE SampleApp device not yet found: check current device found */
  if (!(discovery.is_device_found))
 8002f58:	4b1a      	ldr	r3, [pc, #104]	; (8002fc4 <hci_le_advertising_report_event+0xac>)
 8002f5a:	789b      	ldrb	r3, [r3, #2]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d12d      	bne.n	8002fbc <hci_le_advertising_report_event+0xa4>
  {
    /* BLE SampleApp device not yet found: check current device found */
    if ((evt_type == ADV_IND) && Find_DeviceName(data_length, Advertising_Report[0].Data))
 8002f60:	193b      	adds	r3, r7, r4
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d129      	bne.n	8002fbc <hci_le_advertising_report_event+0xa4>
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	68da      	ldr	r2, [r3, #12]
 8002f6c:	197b      	adds	r3, r7, r5
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	0011      	movs	r1, r2
 8002f72:	0018      	movs	r0, r3
 8002f74:	f7ff face 	bl	8002514 <Find_DeviceName>
 8002f78:	1e03      	subs	r3, r0, #0
 8002f7a:	d01f      	beq.n	8002fbc <hci_le_advertising_report_event+0xa4>
    {
      discovery.is_device_found = TRUE;
 8002f7c:	4b11      	ldr	r3, [pc, #68]	; (8002fc4 <hci_le_advertising_report_event+0xac>)
 8002f7e:	2201      	movs	r2, #1
 8002f80:	709a      	strb	r2, [r3, #2]
      discovery.do_connect = TRUE;
 8002f82:	4b10      	ldr	r3, [pc, #64]	; (8002fc4 <hci_le_advertising_report_event+0xac>)
 8002f84:	2201      	movs	r2, #1
 8002f86:	70da      	strb	r2, [r3, #3]
      discovery.check_disc_proc_timer = FALSE;
 8002f88:	4b0e      	ldr	r3, [pc, #56]	; (8002fc4 <hci_le_advertising_report_event+0xac>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	701a      	strb	r2, [r3, #0]
      discovery.check_disc_mode_timer = FALSE;
 8002f8e:	4b0d      	ldr	r3, [pc, #52]	; (8002fc4 <hci_le_advertising_report_event+0xac>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	705a      	strb	r2, [r3, #1]
      /* store first device found:  address type and address value */
      discovery.device_found_address_type = bdaddr_type;
 8002f94:	4b0b      	ldr	r3, [pc, #44]	; (8002fc4 <hci_le_advertising_report_event+0xac>)
 8002f96:	19ba      	adds	r2, r7, r6
 8002f98:	7812      	ldrb	r2, [r2, #0]
 8002f9a:	721a      	strb	r2, [r3, #8]
      BLUENRG_memcpy(discovery.device_found_address, bdaddr, 6);
 8002f9c:	4b09      	ldr	r3, [pc, #36]	; (8002fc4 <hci_le_advertising_report_event+0xac>)
 8002f9e:	2209      	movs	r2, #9
 8002fa0:	210c      	movs	r1, #12
 8002fa2:	1879      	adds	r1, r7, r1
 8002fa4:	189b      	adds	r3, r3, r2
 8002fa6:	2206      	movs	r2, #6
 8002fa8:	0018      	movs	r0, r3
 8002faa:	f00b fb9b 	bl	800e6e4 <memcpy>
      /* device is found: terminate discovery procedure */
      discovery.device_state = DO_TERMINATE_GAP_PROC;
 8002fae:	4b05      	ldr	r3, [pc, #20]	; (8002fc4 <hci_le_advertising_report_event+0xac>)
 8002fb0:	2220      	movs	r2, #32
 8002fb2:	821a      	strh	r2, [r3, #16]
      PRINT_DBG("Device found\r\n");
 8002fb4:	4b04      	ldr	r3, [pc, #16]	; (8002fc8 <hci_le_advertising_report_event+0xb0>)
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	f00b f9f8 	bl	800e3ac <puts>
    }
  }
} /* hci_le_advertising_report_event() */
 8002fbc:	46c0      	nop			; (mov r8, r8)
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	b007      	add	sp, #28
 8002fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fc4:	20000228 	.word	0x20000228
 8002fc8:	08010784 	.word	0x08010784

08002fcc <aci_gatt_attribute_modified_event>:
void aci_gatt_attribute_modified_event(uint16_t Connection_Handle,
                                       uint16_t Attr_Handle,
                                       uint16_t Offset,
                                       uint16_t Attr_Data_Length,
                                       uint8_t Attr_Data[])
{
 8002fcc:	b5b0      	push	{r4, r5, r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	0005      	movs	r5, r0
 8002fd4:	000c      	movs	r4, r1
 8002fd6:	0010      	movs	r0, r2
 8002fd8:	0019      	movs	r1, r3
 8002fda:	1dbb      	adds	r3, r7, #6
 8002fdc:	1c2a      	adds	r2, r5, #0
 8002fde:	801a      	strh	r2, [r3, #0]
 8002fe0:	1d3b      	adds	r3, r7, #4
 8002fe2:	1c22      	adds	r2, r4, #0
 8002fe4:	801a      	strh	r2, [r3, #0]
 8002fe6:	1cbb      	adds	r3, r7, #2
 8002fe8:	1c02      	adds	r2, r0, #0
 8002fea:	801a      	strh	r2, [r3, #0]
 8002fec:	003b      	movs	r3, r7
 8002fee:	1c0a      	adds	r2, r1, #0
 8002ff0:	801a      	strh	r2, [r3, #0]
  Attribute_Modified_CB(Attr_Handle, Attr_Data_Length, Attr_Data);
 8002ff2:	003b      	movs	r3, r7
 8002ff4:	881b      	ldrh	r3, [r3, #0]
 8002ff6:	b2d9      	uxtb	r1, r3
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	1d3b      	adds	r3, r7, #4
 8002ffc:	881b      	ldrh	r3, [r3, #0]
 8002ffe:	0018      	movs	r0, r3
 8003000:	f7ff fac8 	bl	8002594 <Attribute_Modified_CB>
} /* end aci_gatt_attribute_modified_event() */
 8003004:	46c0      	nop			; (mov r8, r8)
 8003006:	46bd      	mov	sp, r7
 8003008:	b002      	add	sp, #8
 800300a:	bdb0      	pop	{r4, r5, r7, pc}

0800300c <aci_gatt_notification_event>:
 *******************************************************************************/
void aci_gatt_notification_event(uint16_t Connection_Handle,
                                 uint16_t Attribute_Handle,
                                 uint8_t Attribute_Value_Length,
                                 uint8_t Attribute_Value[])
{
 800300c:	b590      	push	{r4, r7, lr}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	0004      	movs	r4, r0
 8003014:	0008      	movs	r0, r1
 8003016:	0011      	movs	r1, r2
 8003018:	607b      	str	r3, [r7, #4]
 800301a:	230e      	movs	r3, #14
 800301c:	18fb      	adds	r3, r7, r3
 800301e:	1c22      	adds	r2, r4, #0
 8003020:	801a      	strh	r2, [r3, #0]
 8003022:	240c      	movs	r4, #12
 8003024:	193b      	adds	r3, r7, r4
 8003026:	1c02      	adds	r2, r0, #0
 8003028:	801a      	strh	r2, [r3, #0]
 800302a:	200b      	movs	r0, #11
 800302c:	183b      	adds	r3, r7, r0
 800302e:	1c0a      	adds	r2, r1, #0
 8003030:	701a      	strb	r2, [r3, #0]
  if(Attribute_Handle == tx_handle+1)
 8003032:	193b      	adds	r3, r7, r4
 8003034:	881a      	ldrh	r2, [r3, #0]
 8003036:	4b08      	ldr	r3, [pc, #32]	; (8003058 <aci_gatt_notification_event+0x4c>)
 8003038:	881b      	ldrh	r3, [r3, #0]
 800303a:	3301      	adds	r3, #1
 800303c:	429a      	cmp	r2, r3
 800303e:	d106      	bne.n	800304e <aci_gatt_notification_event+0x42>
  {
    receiveData(Attribute_Value, Attribute_Value_Length);
 8003040:	183b      	adds	r3, r7, r0
 8003042:	781a      	ldrb	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	0011      	movs	r1, r2
 8003048:	0018      	movs	r0, r3
 800304a:	f7ff f93b 	bl	80022c4 <receiveData>
  }
} /* end aci_gatt_notification_event() */
 800304e:	46c0      	nop			; (mov r8, r8)
 8003050:	46bd      	mov	sp, r7
 8003052:	b005      	add	sp, #20
 8003054:	bd90      	pop	{r4, r7, pc}
 8003056:	46c0      	nop			; (mov r8, r8)
 8003058:	20000260 	.word	0x20000260

0800305c <aci_gatt_disc_read_char_by_uuid_resp_event>:
 *******************************************************************************/
void aci_gatt_disc_read_char_by_uuid_resp_event(uint16_t Connection_Handle,
                                                uint16_t Attribute_Handle,
                                                uint8_t Attribute_Value_Length,
                                                uint8_t Attribute_Value[])
{
 800305c:	b5b0      	push	{r4, r5, r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	0004      	movs	r4, r0
 8003064:	0008      	movs	r0, r1
 8003066:	0011      	movs	r1, r2
 8003068:	607b      	str	r3, [r7, #4]
 800306a:	250e      	movs	r5, #14
 800306c:	197b      	adds	r3, r7, r5
 800306e:	1c22      	adds	r2, r4, #0
 8003070:	801a      	strh	r2, [r3, #0]
 8003072:	240c      	movs	r4, #12
 8003074:	193b      	adds	r3, r7, r4
 8003076:	1c02      	adds	r2, r0, #0
 8003078:	801a      	strh	r2, [r3, #0]
 800307a:	230b      	movs	r3, #11
 800307c:	18fb      	adds	r3, r7, r3
 800307e:	1c0a      	adds	r2, r1, #0
 8003080:	701a      	strb	r2, [r3, #0]
  PRINT_DBG("aci_gatt_disc_read_char_by_uuid_resp_event, Connection Handle: 0x%04X\r\n", Connection_Handle);
 8003082:	197b      	adds	r3, r7, r5
 8003084:	881a      	ldrh	r2, [r3, #0]
 8003086:	4b28      	ldr	r3, [pc, #160]	; (8003128 <aci_gatt_disc_read_char_by_uuid_resp_event+0xcc>)
 8003088:	0011      	movs	r1, r2
 800308a:	0018      	movs	r0, r3
 800308c:	f00b f91e 	bl	800e2cc <iprintf>
  if (APP_FLAG(START_READ_TX_CHAR_HANDLE) && !APP_FLAG(END_READ_TX_CHAR_HANDLE))
 8003090:	4b26      	ldr	r3, [pc, #152]	; (800312c <aci_gatt_disc_read_char_by_uuid_resp_event+0xd0>)
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	2380      	movs	r3, #128	; 0x80
 8003096:	011b      	lsls	r3, r3, #4
 8003098:	4013      	ands	r3, r2
 800309a:	d012      	beq.n	80030c2 <aci_gatt_disc_read_char_by_uuid_resp_event+0x66>
 800309c:	4b23      	ldr	r3, [pc, #140]	; (800312c <aci_gatt_disc_read_char_by_uuid_resp_event+0xd0>)
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	2380      	movs	r3, #128	; 0x80
 80030a2:	015b      	lsls	r3, r3, #5
 80030a4:	4013      	ands	r3, r2
 80030a6:	d10c      	bne.n	80030c2 <aci_gatt_disc_read_char_by_uuid_resp_event+0x66>
  {
    tx_handle = Attribute_Handle;
 80030a8:	4b21      	ldr	r3, [pc, #132]	; (8003130 <aci_gatt_disc_read_char_by_uuid_resp_event+0xd4>)
 80030aa:	193a      	adds	r2, r7, r4
 80030ac:	8812      	ldrh	r2, [r2, #0]
 80030ae:	801a      	strh	r2, [r3, #0]
    PRINT_DBG("TX Char Handle 0x%04X\r\n", tx_handle);
 80030b0:	4b1f      	ldr	r3, [pc, #124]	; (8003130 <aci_gatt_disc_read_char_by_uuid_resp_event+0xd4>)
 80030b2:	881b      	ldrh	r3, [r3, #0]
 80030b4:	001a      	movs	r2, r3
 80030b6:	4b1f      	ldr	r3, [pc, #124]	; (8003134 <aci_gatt_disc_read_char_by_uuid_resp_event+0xd8>)
 80030b8:	0011      	movs	r1, r2
 80030ba:	0018      	movs	r0, r3
 80030bc:	f00b f906 	bl	800e2cc <iprintf>
        BSP_LED_Toggle(LED2);
        HAL_Delay(250);
      }
    }
  }
} /* end aci_gatt_disc_read_char_by_uuid_resp_event() */
 80030c0:	e02e      	b.n	8003120 <aci_gatt_disc_read_char_by_uuid_resp_event+0xc4>
    if(APP_FLAG(START_READ_RX_CHAR_HANDLE) && !APP_FLAG(END_READ_RX_CHAR_HANDLE))
 80030c2:	4b1a      	ldr	r3, [pc, #104]	; (800312c <aci_gatt_disc_read_char_by_uuid_resp_event+0xd0>)
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	2380      	movs	r3, #128	; 0x80
 80030c8:	019b      	lsls	r3, r3, #6
 80030ca:	4013      	ands	r3, r2
 80030cc:	d028      	beq.n	8003120 <aci_gatt_disc_read_char_by_uuid_resp_event+0xc4>
 80030ce:	4b17      	ldr	r3, [pc, #92]	; (800312c <aci_gatt_disc_read_char_by_uuid_resp_event+0xd0>)
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	2380      	movs	r3, #128	; 0x80
 80030d4:	01db      	lsls	r3, r3, #7
 80030d6:	4013      	ands	r3, r2
 80030d8:	d122      	bne.n	8003120 <aci_gatt_disc_read_char_by_uuid_resp_event+0xc4>
      rx_handle = Attribute_Handle;
 80030da:	4b17      	ldr	r3, [pc, #92]	; (8003138 <aci_gatt_disc_read_char_by_uuid_resp_event+0xdc>)
 80030dc:	220c      	movs	r2, #12
 80030de:	18ba      	adds	r2, r7, r2
 80030e0:	8812      	ldrh	r2, [r2, #0]
 80030e2:	801a      	strh	r2, [r3, #0]
      PRINT_DBG("RX Char Handle 0x%04X\r\n", rx_handle);
 80030e4:	4b14      	ldr	r3, [pc, #80]	; (8003138 <aci_gatt_disc_read_char_by_uuid_resp_event+0xdc>)
 80030e6:	881b      	ldrh	r3, [r3, #0]
 80030e8:	001a      	movs	r2, r3
 80030ea:	4b14      	ldr	r3, [pc, #80]	; (800313c <aci_gatt_disc_read_char_by_uuid_resp_event+0xe0>)
 80030ec:	0011      	movs	r1, r2
 80030ee:	0018      	movs	r0, r3
 80030f0:	f00b f8ec 	bl	800e2cc <iprintf>
      for (uint8_t i=0; i<9; i++) {
 80030f4:	2317      	movs	r3, #23
 80030f6:	18fb      	adds	r3, r7, r3
 80030f8:	2200      	movs	r2, #0
 80030fa:	701a      	strb	r2, [r3, #0]
 80030fc:	e00b      	b.n	8003116 <aci_gatt_disc_read_char_by_uuid_resp_event+0xba>
        BSP_LED_Toggle(LED2);
 80030fe:	2000      	movs	r0, #0
 8003100:	f001 fa94 	bl	800462c <BSP_LED_Toggle>
        HAL_Delay(250);
 8003104:	20fa      	movs	r0, #250	; 0xfa
 8003106:	f001 fd53 	bl	8004bb0 <HAL_Delay>
      for (uint8_t i=0; i<9; i++) {
 800310a:	2117      	movs	r1, #23
 800310c:	187b      	adds	r3, r7, r1
 800310e:	781a      	ldrb	r2, [r3, #0]
 8003110:	187b      	adds	r3, r7, r1
 8003112:	3201      	adds	r2, #1
 8003114:	701a      	strb	r2, [r3, #0]
 8003116:	2317      	movs	r3, #23
 8003118:	18fb      	adds	r3, r7, r3
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b08      	cmp	r3, #8
 800311e:	d9ee      	bls.n	80030fe <aci_gatt_disc_read_char_by_uuid_resp_event+0xa2>
} /* end aci_gatt_disc_read_char_by_uuid_resp_event() */
 8003120:	46c0      	nop			; (mov r8, r8)
 8003122:	46bd      	mov	sp, r7
 8003124:	b006      	add	sp, #24
 8003126:	bdb0      	pop	{r4, r5, r7, pc}
 8003128:	08010794 	.word	0x08010794
 800312c:	20000000 	.word	0x20000000
 8003130:	20000260 	.word	0x20000260
 8003134:	080107dc 	.word	0x080107dc
 8003138:	20000262 	.word	0x20000262
 800313c:	080107f4 	.word	0x080107f4

08003140 <aci_gatt_proc_complete_event>:
 * Output         : See file bluenrg1_events.h
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void aci_gatt_proc_complete_event(uint16_t Connection_Handle,
                                  uint8_t Error_Code)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	0002      	movs	r2, r0
 8003148:	1dbb      	adds	r3, r7, #6
 800314a:	801a      	strh	r2, [r3, #0]
 800314c:	1d7b      	adds	r3, r7, #5
 800314e:	1c0a      	adds	r2, r1, #0
 8003150:	701a      	strb	r2, [r3, #0]
  if (APP_FLAG(START_READ_TX_CHAR_HANDLE) && !APP_FLAG(END_READ_TX_CHAR_HANDLE))
 8003152:	4b15      	ldr	r3, [pc, #84]	; (80031a8 <aci_gatt_proc_complete_event+0x68>)
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	2380      	movs	r3, #128	; 0x80
 8003158:	011b      	lsls	r3, r3, #4
 800315a:	4013      	ands	r3, r2
 800315c:	d00d      	beq.n	800317a <aci_gatt_proc_complete_event+0x3a>
 800315e:	4b12      	ldr	r3, [pc, #72]	; (80031a8 <aci_gatt_proc_complete_event+0x68>)
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	2380      	movs	r3, #128	; 0x80
 8003164:	015b      	lsls	r3, r3, #5
 8003166:	4013      	ands	r3, r2
 8003168:	d107      	bne.n	800317a <aci_gatt_proc_complete_event+0x3a>
  {
    APP_FLAG_SET(END_READ_TX_CHAR_HANDLE);
 800316a:	4b0f      	ldr	r3, [pc, #60]	; (80031a8 <aci_gatt_proc_complete_event+0x68>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2280      	movs	r2, #128	; 0x80
 8003170:	0152      	lsls	r2, r2, #5
 8003172:	431a      	orrs	r2, r3
 8003174:	4b0c      	ldr	r3, [pc, #48]	; (80031a8 <aci_gatt_proc_complete_event+0x68>)
 8003176:	601a      	str	r2, [r3, #0]
    if (APP_FLAG(START_READ_RX_CHAR_HANDLE) && !APP_FLAG(END_READ_RX_CHAR_HANDLE))
    {
      APP_FLAG_SET(END_READ_RX_CHAR_HANDLE);
    }
  }
} /* end aci_gatt_proc_complete_event() */
 8003178:	e012      	b.n	80031a0 <aci_gatt_proc_complete_event+0x60>
    if (APP_FLAG(START_READ_RX_CHAR_HANDLE) && !APP_FLAG(END_READ_RX_CHAR_HANDLE))
 800317a:	4b0b      	ldr	r3, [pc, #44]	; (80031a8 <aci_gatt_proc_complete_event+0x68>)
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	2380      	movs	r3, #128	; 0x80
 8003180:	019b      	lsls	r3, r3, #6
 8003182:	4013      	ands	r3, r2
 8003184:	d00c      	beq.n	80031a0 <aci_gatt_proc_complete_event+0x60>
 8003186:	4b08      	ldr	r3, [pc, #32]	; (80031a8 <aci_gatt_proc_complete_event+0x68>)
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	2380      	movs	r3, #128	; 0x80
 800318c:	01db      	lsls	r3, r3, #7
 800318e:	4013      	ands	r3, r2
 8003190:	d106      	bne.n	80031a0 <aci_gatt_proc_complete_event+0x60>
      APP_FLAG_SET(END_READ_RX_CHAR_HANDLE);
 8003192:	4b05      	ldr	r3, [pc, #20]	; (80031a8 <aci_gatt_proc_complete_event+0x68>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2280      	movs	r2, #128	; 0x80
 8003198:	01d2      	lsls	r2, r2, #7
 800319a:	431a      	orrs	r2, r3
 800319c:	4b02      	ldr	r3, [pc, #8]	; (80031a8 <aci_gatt_proc_complete_event+0x68>)
 800319e:	601a      	str	r2, [r3, #0]
} /* end aci_gatt_proc_complete_event() */
 80031a0:	46c0      	nop			; (mov r8, r8)
 80031a2:	46bd      	mov	sp, r7
 80031a4:	b002      	add	sp, #8
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	20000000 	.word	0x20000000

080031ac <aci_gatt_tx_pool_available_event>:
 * Output         : See file bluenrg1_events.h
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void aci_gatt_tx_pool_available_event(uint16_t Connection_Handle,
                                      uint16_t Available_Buffers)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	0002      	movs	r2, r0
 80031b4:	1dbb      	adds	r3, r7, #6
 80031b6:	801a      	strh	r2, [r3, #0]
 80031b8:	1d3b      	adds	r3, r7, #4
 80031ba:	1c0a      	adds	r2, r1, #0
 80031bc:	801a      	strh	r2, [r3, #0]
  APP_FLAG_CLEAR(TX_BUFFER_FULL);
 80031be:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <aci_gatt_tx_pool_available_event+0x28>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a05      	ldr	r2, [pc, #20]	; (80031d8 <aci_gatt_tx_pool_available_event+0x2c>)
 80031c4:	401a      	ands	r2, r3
 80031c6:	4b03      	ldr	r3, [pc, #12]	; (80031d4 <aci_gatt_tx_pool_available_event+0x28>)
 80031c8:	601a      	str	r2, [r3, #0]
} /* end aci_gatt_tx_pool_available_event() */
 80031ca:	46c0      	nop			; (mov r8, r8)
 80031cc:	46bd      	mov	sp, r7
 80031ce:	b002      	add	sp, #8
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	46c0      	nop			; (mov r8, r8)
 80031d4:	20000000 	.word	0x20000000
 80031d8:	ffff7fff 	.word	0xffff7fff

080031dc <aci_att_exchange_mtu_resp_event>:
 * Output         : See file bluenrg1_events.h
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void aci_att_exchange_mtu_resp_event(uint16_t Connection_Handle,
                                     uint16_t Server_RX_MTU)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	0002      	movs	r2, r0
 80031e4:	1dbb      	adds	r3, r7, #6
 80031e6:	801a      	strh	r2, [r3, #0]
 80031e8:	1d3b      	adds	r3, r7, #4
 80031ea:	1c0a      	adds	r2, r1, #0
 80031ec:	801a      	strh	r2, [r3, #0]
  PRINT_DBG("aci_att_exchange_mtu_resp_event: Server_RX_MTU=%d\r\n", Server_RX_MTU);
 80031ee:	1d3b      	adds	r3, r7, #4
 80031f0:	881a      	ldrh	r2, [r3, #0]
 80031f2:	4b14      	ldr	r3, [pc, #80]	; (8003244 <aci_att_exchange_mtu_resp_event+0x68>)
 80031f4:	0011      	movs	r1, r2
 80031f6:	0018      	movs	r0, r3
 80031f8:	f00b f868 	bl	800e2cc <iprintf>

  if (Server_RX_MTU <= CLIENT_MAX_MTU_SIZE) {
 80031fc:	1d3b      	adds	r3, r7, #4
 80031fe:	881b      	ldrh	r3, [r3, #0]
 8003200:	2b9e      	cmp	r3, #158	; 0x9e
 8003202:	d806      	bhi.n	8003212 <aci_att_exchange_mtu_resp_event+0x36>
    write_char_len = Server_RX_MTU - 3;
 8003204:	1d3b      	adds	r3, r7, #4
 8003206:	881b      	ldrh	r3, [r3, #0]
 8003208:	3b03      	subs	r3, #3
 800320a:	b29a      	uxth	r2, r3
 800320c:	4b0e      	ldr	r3, [pc, #56]	; (8003248 <aci_att_exchange_mtu_resp_event+0x6c>)
 800320e:	801a      	strh	r2, [r3, #0]
 8003210:	e002      	b.n	8003218 <aci_att_exchange_mtu_resp_event+0x3c>
  }
  else {
    write_char_len = CLIENT_MAX_MTU_SIZE - 3;
 8003212:	4b0d      	ldr	r3, [pc, #52]	; (8003248 <aci_att_exchange_mtu_resp_event+0x6c>)
 8003214:	229b      	movs	r2, #155	; 0x9b
 8003216:	801a      	strh	r2, [r3, #0]
  }

  if ((mtu_exchanged_wait == 0) || ((mtu_exchanged_wait == 1))) {
 8003218:	4b0c      	ldr	r3, [pc, #48]	; (800324c <aci_att_exchange_mtu_resp_event+0x70>)
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <aci_att_exchange_mtu_resp_event+0x4c>
 8003220:	4b0a      	ldr	r3, [pc, #40]	; (800324c <aci_att_exchange_mtu_resp_event+0x70>)
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d109      	bne.n	800323c <aci_att_exchange_mtu_resp_event+0x60>
    /**
     * The aci_att_exchange_mtu_resp_event is received also if the
     * aci_gatt_exchange_config is called by the other peer.
     * Here we manage this case.
     */
    if (mtu_exchanged_wait == 0) {
 8003228:	4b08      	ldr	r3, [pc, #32]	; (800324c <aci_att_exchange_mtu_resp_event+0x70>)
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d102      	bne.n	8003236 <aci_att_exchange_mtu_resp_event+0x5a>
      mtu_exchanged_wait = 2;
 8003230:	4b06      	ldr	r3, [pc, #24]	; (800324c <aci_att_exchange_mtu_resp_event+0x70>)
 8003232:	2202      	movs	r2, #2
 8003234:	701a      	strb	r2, [r3, #0]
    }
    mtu_exchanged = 1;
 8003236:	4b06      	ldr	r3, [pc, #24]	; (8003250 <aci_att_exchange_mtu_resp_event+0x74>)
 8003238:	2201      	movs	r2, #1
 800323a:	701a      	strb	r2, [r3, #0]
  }
}
 800323c:	46c0      	nop			; (mov r8, r8)
 800323e:	46bd      	mov	sp, r7
 8003240:	b002      	add	sp, #8
 8003242:	bd80      	pop	{r7, pc}
 8003244:	0801080c 	.word	0x0801080c
 8003248:	20000006 	.word	0x20000006
 800324c:	20000267 	.word	0x20000267
 8003250:	20000266 	.word	0x20000266

08003254 <Add_Sample_Service>:
* Description    : Add the 'Accelerometer' service.
* Input          : None
* Return         : Status.
*******************************************************************************/
uint8_t Add_Sample_Service(void)
{
 8003254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003256:	b095      	sub	sp, #84	; 0x54
 8003258:	af06      	add	r7, sp, #24
  /**
   * Number of attribute records that can be added to this service
   * For this service it is given by:
   * 1 (fixed value) + 3 (for characteristic with CHAR_PROP_NOTIFY) + 2 (for characteristic with CHAR_PROP_WRITE)
   */
  uint8_t max_attribute_records = 1+3+2;
 800325a:	2637      	movs	r6, #55	; 0x37
 800325c:	19bb      	adds	r3, r7, r6
 800325e:	2206      	movs	r2, #6
 8003260:	701a      	strb	r2, [r3, #0]
  D973F2E0-B19E-11E2-9E96-0800200C9A66
  D973F2E1-B19E-11E2-9E96-0800200C9A66
  D973F2E2-B19E-11E2-9E96-0800200C9A66
  */

  const uint8_t uuid[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe0,0xf2,0x73,0xd9};
 8003262:	2524      	movs	r5, #36	; 0x24
 8003264:	197b      	adds	r3, r7, r5
 8003266:	4a42      	ldr	r2, [pc, #264]	; (8003370 <Add_Sample_Service+0x11c>)
 8003268:	ca13      	ldmia	r2!, {r0, r1, r4}
 800326a:	c313      	stmia	r3!, {r0, r1, r4}
 800326c:	6812      	ldr	r2, [r2, #0]
 800326e:	601a      	str	r2, [r3, #0]
  const uint8_t charUuidTX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 8003270:	2314      	movs	r3, #20
 8003272:	18fb      	adds	r3, r7, r3
 8003274:	4a3f      	ldr	r2, [pc, #252]	; (8003374 <Add_Sample_Service+0x120>)
 8003276:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003278:	c313      	stmia	r3!, {r0, r1, r4}
 800327a:	6812      	ldr	r2, [r2, #0]
 800327c:	601a      	str	r2, [r3, #0]
  const uint8_t charUuidRX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 800327e:	1d3b      	adds	r3, r7, #4
 8003280:	4a3d      	ldr	r2, [pc, #244]	; (8003378 <Add_Sample_Service+0x124>)
 8003282:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003284:	c313      	stmia	r3!, {r0, r1, r4}
 8003286:	6812      	ldr	r2, [r2, #0]
 8003288:	601a      	str	r2, [r3, #0]

  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 800328a:	4b3c      	ldr	r3, [pc, #240]	; (800337c <Add_Sample_Service+0x128>)
 800328c:	197a      	adds	r2, r7, r5
 800328e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003290:	c313      	stmia	r3!, {r0, r1, r4}
 8003292:	6812      	ldr	r2, [r2, #0]
 8003294:	601a      	str	r2, [r3, #0]

  ret = aci_gatt_add_service(UUID_TYPE_128, &service_uuid, PRIMARY_SERVICE, max_attribute_records, &sampleServHandle);
 8003296:	2536      	movs	r5, #54	; 0x36
 8003298:	197c      	adds	r4, r7, r5
 800329a:	19bb      	adds	r3, r7, r6
 800329c:	781a      	ldrb	r2, [r3, #0]
 800329e:	4937      	ldr	r1, [pc, #220]	; (800337c <Add_Sample_Service+0x128>)
 80032a0:	4b37      	ldr	r3, [pc, #220]	; (8003380 <Add_Sample_Service+0x12c>)
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	0013      	movs	r3, r2
 80032a6:	2201      	movs	r2, #1
 80032a8:	2002      	movs	r0, #2
 80032aa:	f008 fea5 	bl	800bff8 <aci_gatt_add_service>
 80032ae:	0003      	movs	r3, r0
 80032b0:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80032b2:	197b      	adds	r3, r7, r5
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d14c      	bne.n	8003354 <Add_Sample_Service+0x100>

  BLUENRG_memcpy(&char_uuid.Char_UUID_128, charUuidTX, 16);
 80032ba:	4b32      	ldr	r3, [pc, #200]	; (8003384 <Add_Sample_Service+0x130>)
 80032bc:	2214      	movs	r2, #20
 80032be:	18ba      	adds	r2, r7, r2
 80032c0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80032c2:	c313      	stmia	r3!, {r0, r1, r4}
 80032c4:	6812      	ldr	r2, [r2, #0]
 80032c6:	601a      	str	r2, [r3, #0]
  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, &char_uuid, CHAR_VALUE_LENGTH, CHAR_PROP_NOTIFY, ATTR_PERMISSION_NONE, 0,
 80032c8:	4b2d      	ldr	r3, [pc, #180]	; (8003380 <Add_Sample_Service+0x12c>)
 80032ca:	8818      	ldrh	r0, [r3, #0]
 80032cc:	197c      	adds	r4, r7, r5
 80032ce:	4a2d      	ldr	r2, [pc, #180]	; (8003384 <Add_Sample_Service+0x130>)
 80032d0:	4b2d      	ldr	r3, [pc, #180]	; (8003388 <Add_Sample_Service+0x134>)
 80032d2:	9305      	str	r3, [sp, #20]
 80032d4:	2301      	movs	r3, #1
 80032d6:	9304      	str	r3, [sp, #16]
 80032d8:	2310      	movs	r3, #16
 80032da:	9303      	str	r3, [sp, #12]
 80032dc:	2300      	movs	r3, #0
 80032de:	9302      	str	r3, [sp, #8]
 80032e0:	2300      	movs	r3, #0
 80032e2:	9301      	str	r3, [sp, #4]
 80032e4:	2310      	movs	r3, #16
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	233f      	movs	r3, #63	; 0x3f
 80032ea:	2102      	movs	r1, #2
 80032ec:	f008 ff72 	bl	800c1d4 <aci_gatt_add_char>
 80032f0:	0003      	movs	r3, r0
 80032f2:	7023      	strb	r3, [r4, #0]
                16, 1, &TXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80032f4:	197b      	adds	r3, r7, r5
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d12d      	bne.n	8003358 <Add_Sample_Service+0x104>

  BLUENRG_memcpy(&char_uuid.Char_UUID_128, charUuidRX, 16);
 80032fc:	4b21      	ldr	r3, [pc, #132]	; (8003384 <Add_Sample_Service+0x130>)
 80032fe:	1d3a      	adds	r2, r7, #4
 8003300:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003302:	c313      	stmia	r3!, {r0, r1, r4}
 8003304:	6812      	ldr	r2, [r2, #0]
 8003306:	601a      	str	r2, [r3, #0]
  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, &char_uuid, CHAR_VALUE_LENGTH, CHAR_PROP_WRITE|CHAR_PROP_WRITE_WITHOUT_RESP, ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE,
 8003308:	4b1d      	ldr	r3, [pc, #116]	; (8003380 <Add_Sample_Service+0x12c>)
 800330a:	8818      	ldrh	r0, [r3, #0]
 800330c:	197c      	adds	r4, r7, r5
 800330e:	4a1d      	ldr	r2, [pc, #116]	; (8003384 <Add_Sample_Service+0x130>)
 8003310:	4b1e      	ldr	r3, [pc, #120]	; (800338c <Add_Sample_Service+0x138>)
 8003312:	9305      	str	r3, [sp, #20]
 8003314:	2301      	movs	r3, #1
 8003316:	9304      	str	r3, [sp, #16]
 8003318:	2310      	movs	r3, #16
 800331a:	9303      	str	r3, [sp, #12]
 800331c:	2301      	movs	r3, #1
 800331e:	9302      	str	r3, [sp, #8]
 8003320:	2300      	movs	r3, #0
 8003322:	9301      	str	r3, [sp, #4]
 8003324:	230c      	movs	r3, #12
 8003326:	9300      	str	r3, [sp, #0]
 8003328:	233f      	movs	r3, #63	; 0x3f
 800332a:	2102      	movs	r1, #2
 800332c:	f008 ff52 	bl	800c1d4 <aci_gatt_add_char>
 8003330:	0003      	movs	r3, r0
 8003332:	7023      	strb	r3, [r4, #0]
                16, 1, &RXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8003334:	197b      	adds	r3, r7, r5
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10f      	bne.n	800335c <Add_Sample_Service+0x108>

  PRINT_DBG("Sample Service added.\r\nTX Char Handle %04X, RX Char Handle %04X\r\n", TXCharHandle, RXCharHandle);
 800333c:	4b12      	ldr	r3, [pc, #72]	; (8003388 <Add_Sample_Service+0x134>)
 800333e:	881b      	ldrh	r3, [r3, #0]
 8003340:	0019      	movs	r1, r3
 8003342:	4b12      	ldr	r3, [pc, #72]	; (800338c <Add_Sample_Service+0x138>)
 8003344:	881b      	ldrh	r3, [r3, #0]
 8003346:	001a      	movs	r2, r3
 8003348:	4b11      	ldr	r3, [pc, #68]	; (8003390 <Add_Sample_Service+0x13c>)
 800334a:	0018      	movs	r0, r3
 800334c:	f00a ffbe 	bl	800e2cc <iprintf>
  return BLE_STATUS_SUCCESS;
 8003350:	2300      	movs	r3, #0
 8003352:	e009      	b.n	8003368 <Add_Sample_Service+0x114>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8003354:	46c0      	nop			; (mov r8, r8)
 8003356:	e002      	b.n	800335e <Add_Sample_Service+0x10a>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8003358:	46c0      	nop			; (mov r8, r8)
 800335a:	e000      	b.n	800335e <Add_Sample_Service+0x10a>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 800335c:	46c0      	nop			; (mov r8, r8)

fail:
  PRINT_DBG("Error while adding Sample service.\r\n");
 800335e:	4b0d      	ldr	r3, [pc, #52]	; (8003394 <Add_Sample_Service+0x140>)
 8003360:	0018      	movs	r0, r3
 8003362:	f00b f823 	bl	800e3ac <puts>
  return BLE_STATUS_ERROR ;
 8003366:	2347      	movs	r3, #71	; 0x47
}
 8003368:	0018      	movs	r0, r3
 800336a:	46bd      	mov	sp, r7
 800336c:	b00f      	add	sp, #60	; 0x3c
 800336e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003370:	080108a8 	.word	0x080108a8
 8003374:	080108b8 	.word	0x080108b8
 8003378:	080108c8 	.word	0x080108c8
 800337c:	200002ac 	.word	0x200002ac
 8003380:	200002a4 	.word	0x200002a4
 8003384:	200002bc 	.word	0x200002bc
 8003388:	200002a6 	.word	0x200002a6
 800338c:	200002a8 	.word	0x200002a8
 8003390:	08010840 	.word	0x08010840
 8003394:	08010884 	.word	0x08010884

08003398 <APP_UserEvtRx>:

void APP_UserEvtRx(void *pData)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b088      	sub	sp, #32
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t i;

  hci_spi_pckt *hci_pckt = (hci_spi_pckt *)pData;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	61bb      	str	r3, [r7, #24]

  if(hci_pckt->type == HCI_EVENT_PKT)
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	2b04      	cmp	r3, #4
 80033aa:	d000      	beq.n	80033ae <APP_UserEvtRx+0x16>
 80033ac:	e069      	b.n	8003482 <APP_UserEvtRx+0xea>
  {
    hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	3301      	adds	r3, #1
 80033b2:	617b      	str	r3, [r7, #20]

    if(event_pckt->evt == EVT_LE_META_EVENT)
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	2b3e      	cmp	r3, #62	; 0x3e
 80033ba:	d11f      	bne.n	80033fc <APP_UserEvtRx+0x64>
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	3302      	adds	r3, #2
 80033c0:	60fb      	str	r3, [r7, #12]

      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++)
 80033c2:	2300      	movs	r3, #0
 80033c4:	61fb      	str	r3, [r7, #28]
 80033c6:	e015      	b.n	80033f4 <APP_UserEvtRx+0x5c>
      {
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	4b2f      	ldr	r3, [pc, #188]	; (800348c <APP_UserEvtRx+0xf4>)
 80033d0:	69f9      	ldr	r1, [r7, #28]
 80033d2:	00c9      	lsls	r1, r1, #3
 80033d4:	5acb      	ldrh	r3, [r1, r3]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d109      	bne.n	80033ee <APP_UserEvtRx+0x56>
        {
          hci_le_meta_events_table[i].process((void *)evt->data);
 80033da:	4a2c      	ldr	r2, [pc, #176]	; (800348c <APP_UserEvtRx+0xf4>)
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	18d3      	adds	r3, r2, r3
 80033e2:	3304      	adds	r3, #4
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	3201      	adds	r2, #1
 80033ea:	0010      	movs	r0, r2
 80033ec:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++)
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	3301      	adds	r3, #1
 80033f2:	61fb      	str	r3, [r7, #28]
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	2b09      	cmp	r3, #9
 80033f8:	d9e6      	bls.n	80033c8 <APP_UserEvtRx+0x30>
          hci_events_table[i].process((void *)event_pckt->data);
        }
      }
    }
  }
}
 80033fa:	e042      	b.n	8003482 <APP_UserEvtRx+0xea>
    else if(event_pckt->evt == EVT_VENDOR)
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2bff      	cmp	r3, #255	; 0xff
 8003402:	d122      	bne.n	800344a <APP_UserEvtRx+0xb2>
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	3302      	adds	r3, #2
 8003408:	613b      	str	r3, [r7, #16]
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 800340a:	2300      	movs	r3, #0
 800340c:	61fb      	str	r3, [r7, #28]
 800340e:	e018      	b.n	8003442 <APP_UserEvtRx+0xaa>
        if (blue_evt->ecode == hci_vendor_specific_events_table[i].evt_code)
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	781a      	ldrb	r2, [r3, #0]
 8003414:	785b      	ldrb	r3, [r3, #1]
 8003416:	021b      	lsls	r3, r3, #8
 8003418:	4313      	orrs	r3, r2
 800341a:	b29a      	uxth	r2, r3
 800341c:	4b1c      	ldr	r3, [pc, #112]	; (8003490 <APP_UserEvtRx+0xf8>)
 800341e:	69f9      	ldr	r1, [r7, #28]
 8003420:	00c9      	lsls	r1, r1, #3
 8003422:	5acb      	ldrh	r3, [r1, r3]
 8003424:	429a      	cmp	r2, r3
 8003426:	d109      	bne.n	800343c <APP_UserEvtRx+0xa4>
          hci_vendor_specific_events_table[i].process((void *)blue_evt->data);
 8003428:	4a19      	ldr	r2, [pc, #100]	; (8003490 <APP_UserEvtRx+0xf8>)
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	00db      	lsls	r3, r3, #3
 800342e:	18d3      	adds	r3, r2, r3
 8003430:	3304      	adds	r3, #4
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	3202      	adds	r2, #2
 8003438:	0010      	movs	r0, r2
 800343a:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	3301      	adds	r3, #1
 8003440:	61fb      	str	r3, [r7, #28]
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	2b2a      	cmp	r3, #42	; 0x2a
 8003446:	d9e3      	bls.n	8003410 <APP_UserEvtRx+0x78>
}
 8003448:	e01b      	b.n	8003482 <APP_UserEvtRx+0xea>
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
 800344a:	2300      	movs	r3, #0
 800344c:	61fb      	str	r3, [r7, #28]
 800344e:	e015      	b.n	800347c <APP_UserEvtRx+0xe4>
        if (event_pckt->evt == hci_events_table[i].evt_code)
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	b29a      	uxth	r2, r3
 8003456:	4b0f      	ldr	r3, [pc, #60]	; (8003494 <APP_UserEvtRx+0xfc>)
 8003458:	69f9      	ldr	r1, [r7, #28]
 800345a:	00c9      	lsls	r1, r1, #3
 800345c:	5acb      	ldrh	r3, [r1, r3]
 800345e:	429a      	cmp	r2, r3
 8003460:	d109      	bne.n	8003476 <APP_UserEvtRx+0xde>
          hci_events_table[i].process((void *)event_pckt->data);
 8003462:	4a0c      	ldr	r2, [pc, #48]	; (8003494 <APP_UserEvtRx+0xfc>)
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	18d3      	adds	r3, r2, r3
 800346a:	3304      	adds	r3, #4
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	3202      	adds	r2, #2
 8003472:	0010      	movs	r0, r2
 8003474:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	3301      	adds	r3, #1
 800347a:	61fb      	str	r3, [r7, #28]
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	2b06      	cmp	r3, #6
 8003480:	d9e6      	bls.n	8003450 <APP_UserEvtRx+0xb8>
}
 8003482:	46c0      	nop			; (mov r8, r8)
 8003484:	46bd      	mov	sp, r7
 8003486:	b008      	add	sp, #32
 8003488:	bd80      	pop	{r7, pc}
 800348a:	46c0      	nop			; (mov r8, r8)
 800348c:	08011350 	.word	0x08011350
 8003490:	080113a0 	.word	0x080113a0
 8003494:	08011318 	.word	0x08011318

08003498 <HCI_TL_SPI_Enable_IRQ>:
 * @brief  Enable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Enable_IRQ(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);
 800349c:	2005      	movs	r0, #5
 800349e:	f002 fb1e 	bl	8005ade <HAL_NVIC_EnableIRQ>
}
 80034a2:	46c0      	nop			; (mov r8, r8)
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <HCI_TL_SPI_Disable_IRQ>:
 * @brief  Disable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Disable_IRQ(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 80034ac:	2005      	movs	r0, #5
 80034ae:	f002 fb26 	bl	8005afe <HAL_NVIC_DisableIRQ>
}
 80034b2:	46c0      	nop			; (mov r8, r8)
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 80034b8:	b590      	push	{r4, r7, lr}
 80034ba:	b089      	sub	sp, #36	; 0x24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034c0:	4b28      	ldr	r3, [pc, #160]	; (8003564 <HCI_TL_SPI_Init+0xac>)
 80034c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034c4:	4b27      	ldr	r3, [pc, #156]	; (8003564 <HCI_TL_SPI_Init+0xac>)
 80034c6:	2101      	movs	r1, #1
 80034c8:	430a      	orrs	r2, r1
 80034ca:	635a      	str	r2, [r3, #52]	; 0x34
 80034cc:	4b25      	ldr	r3, [pc, #148]	; (8003564 <HCI_TL_SPI_Init+0xac>)
 80034ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d0:	2201      	movs	r2, #1
 80034d2:	4013      	ands	r3, r2
 80034d4:	60bb      	str	r3, [r7, #8]
 80034d6:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 80034d8:	240c      	movs	r4, #12
 80034da:	193b      	adds	r3, r7, r4
 80034dc:	2201      	movs	r2, #1
 80034de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80034e0:	193b      	adds	r3, r7, r4
 80034e2:	2288      	movs	r2, #136	; 0x88
 80034e4:	0352      	lsls	r2, r2, #13
 80034e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e8:	193b      	adds	r3, r7, r4
 80034ea:	2200      	movs	r2, #0
 80034ec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80034ee:	193a      	adds	r2, r7, r4
 80034f0:	23a0      	movs	r3, #160	; 0xa0
 80034f2:	05db      	lsls	r3, r3, #23
 80034f4:	0011      	movs	r1, r2
 80034f6:	0018      	movs	r0, r3
 80034f8:	f002 fdfe 	bl	80060f8 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80034fc:	193b      	adds	r3, r7, r4
 80034fe:	2210      	movs	r2, #16
 8003500:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003502:	193b      	adds	r3, r7, r4
 8003504:	2201      	movs	r2, #1
 8003506:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003508:	193b      	adds	r3, r7, r4
 800350a:	2200      	movs	r2, #0
 800350c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800350e:	193b      	adds	r3, r7, r4
 8003510:	2200      	movs	r2, #0
 8003512:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8003514:	193b      	adds	r3, r7, r4
 8003516:	4a14      	ldr	r2, [pc, #80]	; (8003568 <HCI_TL_SPI_Init+0xb0>)
 8003518:	0019      	movs	r1, r3
 800351a:	0010      	movs	r0, r2
 800351c:	f002 fdec 	bl	80060f8 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8003520:	0021      	movs	r1, r4
 8003522:	187b      	adds	r3, r7, r1
 8003524:	2202      	movs	r2, #2
 8003526:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003528:	187b      	adds	r3, r7, r1
 800352a:	2201      	movs	r2, #1
 800352c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352e:	187b      	adds	r3, r7, r1
 8003530:	2200      	movs	r2, #0
 8003532:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003534:	187b      	adds	r3, r7, r1
 8003536:	2200      	movs	r2, #0
 8003538:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 800353a:	187a      	adds	r2, r7, r1
 800353c:	23a0      	movs	r3, #160	; 0xa0
 800353e:	05db      	lsls	r3, r3, #23
 8003540:	0011      	movs	r1, r2
 8003542:	0018      	movs	r0, r3
 8003544:	f002 fdd8 	bl	80060f8 <HAL_GPIO_Init>
  /* Deselect CS PIN for BlueNRG at startup to avoid spurious commands */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8003548:	23a0      	movs	r3, #160	; 0xa0
 800354a:	05db      	lsls	r3, r3, #23
 800354c:	2201      	movs	r2, #1
 800354e:	2102      	movs	r1, #2
 8003550:	0018      	movs	r0, r3
 8003552:	f003 f822 	bl	800659a <HAL_GPIO_WritePin>

  return BSP_SPI1_Init();
 8003556:	f000 fe2f 	bl	80041b8 <BSP_SPI1_Init>
 800355a:	0003      	movs	r3, r0
}
 800355c:	0018      	movs	r0, r3
 800355e:	46bd      	mov	sp, r7
 8003560:	b009      	add	sp, #36	; 0x24
 8003562:	bd90      	pop	{r4, r7, pc}
 8003564:	40021000 	.word	0x40021000
 8003568:	50000800 	.word	0x50000800

0800356c <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8003570:	23a0      	movs	r3, #160	; 0xa0
 8003572:	05db      	lsls	r3, r3, #23
 8003574:	2101      	movs	r1, #1
 8003576:	0018      	movs	r0, r3
 8003578:	f002 ff22 	bl	80063c0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 800357c:	23a0      	movs	r3, #160	; 0xa0
 800357e:	05db      	lsls	r3, r3, #23
 8003580:	2102      	movs	r1, #2
 8003582:	0018      	movs	r0, r3
 8003584:	f002 ff1c 	bl	80063c0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8003588:	4b04      	ldr	r3, [pc, #16]	; (800359c <HCI_TL_SPI_DeInit+0x30>)
 800358a:	2110      	movs	r1, #16
 800358c:	0018      	movs	r0, r3
 800358e:	f002 ff17 	bl	80063c0 <HAL_GPIO_DeInit>
  return 0;
 8003592:	2300      	movs	r3, #0
}
 8003594:	0018      	movs	r0, r3
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	46c0      	nop			; (mov r8, r8)
 800359c:	50000800 	.word	0x50000800

080035a0 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80035a4:	23a0      	movs	r3, #160	; 0xa0
 80035a6:	05db      	lsls	r3, r3, #23
 80035a8:	2201      	movs	r2, #1
 80035aa:	2102      	movs	r1, #2
 80035ac:	0018      	movs	r0, r3
 80035ae:	f002 fff4 	bl	800659a <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 80035b2:	4b0b      	ldr	r3, [pc, #44]	; (80035e0 <HCI_TL_SPI_Reset+0x40>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	2110      	movs	r1, #16
 80035b8:	0018      	movs	r0, r3
 80035ba:	f002 ffee 	bl	800659a <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80035be:	2005      	movs	r0, #5
 80035c0:	f001 faf6 	bl	8004bb0 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 80035c4:	4b06      	ldr	r3, [pc, #24]	; (80035e0 <HCI_TL_SPI_Reset+0x40>)
 80035c6:	2201      	movs	r2, #1
 80035c8:	2110      	movs	r1, #16
 80035ca:	0018      	movs	r0, r3
 80035cc:	f002 ffe5 	bl	800659a <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80035d0:	2005      	movs	r0, #5
 80035d2:	f001 faed 	bl	8004bb0 <HAL_Delay>
  return 0;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	0018      	movs	r0, r3
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	46c0      	nop			; (mov r8, r8)
 80035e0:	50000800 	.word	0x50000800

080035e4 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80035e4:	b5b0      	push	{r4, r5, r7, lr}
 80035e6:	b088      	sub	sp, #32
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	000a      	movs	r2, r1
 80035ee:	1cbb      	adds	r3, r7, #2
 80035f0:	801a      	strh	r2, [r3, #0]
  uint16_t byte_count;
  uint8_t len = 0;
 80035f2:	231d      	movs	r3, #29
 80035f4:	18fb      	adds	r3, r7, r3
 80035f6:	2200      	movs	r2, #0
 80035f8:	701a      	strb	r2, [r3, #0]
  uint8_t char_00 = 0x00;
 80035fa:	2317      	movs	r3, #23
 80035fc:	18fb      	adds	r3, r7, r3
 80035fe:	2200      	movs	r2, #0
 8003600:	701a      	strb	r2, [r3, #0]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8003602:	2510      	movs	r5, #16
 8003604:	197b      	adds	r3, r7, r5
 8003606:	4a3e      	ldr	r2, [pc, #248]	; (8003700 <HCI_TL_SPI_Receive+0x11c>)
 8003608:	6811      	ldr	r1, [r2, #0]
 800360a:	6019      	str	r1, [r3, #0]
 800360c:	7912      	ldrb	r2, [r2, #4]
 800360e:	711a      	strb	r2, [r3, #4]
  uint8_t header_slave[HEADER_SIZE];

  HCI_TL_SPI_Disable_IRQ();
 8003610:	f7ff ff4a 	bl	80034a8 <HCI_TL_SPI_Disable_IRQ>

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8003614:	23a0      	movs	r3, #160	; 0xa0
 8003616:	05db      	lsls	r3, r3, #23
 8003618:	2200      	movs	r2, #0
 800361a:	2102      	movs	r1, #2
 800361c:	0018      	movs	r0, r3
 800361e:	f002 ffbc 	bl	800659a <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8003622:	2408      	movs	r4, #8
 8003624:	1939      	adds	r1, r7, r4
 8003626:	197b      	adds	r3, r7, r5
 8003628:	2205      	movs	r2, #5
 800362a:	0018      	movs	r0, r3
 800362c:	f000 fdf4 	bl	8004218 <BSP_SPI1_SendRecv>

  /* device is ready */
  byte_count = (header_slave[4] << 8)| header_slave[3];
 8003630:	0021      	movs	r1, r4
 8003632:	187b      	adds	r3, r7, r1
 8003634:	791b      	ldrb	r3, [r3, #4]
 8003636:	021b      	lsls	r3, r3, #8
 8003638:	b21a      	sxth	r2, r3
 800363a:	187b      	adds	r3, r7, r1
 800363c:	78db      	ldrb	r3, [r3, #3]
 800363e:	b21b      	sxth	r3, r3
 8003640:	4313      	orrs	r3, r2
 8003642:	b21a      	sxth	r2, r3
 8003644:	211e      	movs	r1, #30
 8003646:	187b      	adds	r3, r7, r1
 8003648:	801a      	strh	r2, [r3, #0]

  if(byte_count > 0)
 800364a:	187b      	adds	r3, r7, r1
 800364c:	881b      	ldrh	r3, [r3, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d02d      	beq.n	80036ae <HCI_TL_SPI_Receive+0xca>
  {

    /* avoid to read more data than the size of the buffer */
    if (byte_count > size)
 8003652:	187a      	adds	r2, r7, r1
 8003654:	1cbb      	adds	r3, r7, #2
 8003656:	8812      	ldrh	r2, [r2, #0]
 8003658:	881b      	ldrh	r3, [r3, #0]
 800365a:	429a      	cmp	r2, r3
 800365c:	d903      	bls.n	8003666 <HCI_TL_SPI_Receive+0x82>
    {
      byte_count = size;
 800365e:	187b      	adds	r3, r7, r1
 8003660:	1cba      	adds	r2, r7, #2
 8003662:	8812      	ldrh	r2, [r2, #0]
 8003664:	801a      	strh	r2, [r3, #0]
    }

    for(len = 0; len < byte_count; len++)
 8003666:	231d      	movs	r3, #29
 8003668:	18fb      	adds	r3, r7, r3
 800366a:	2200      	movs	r2, #0
 800366c:	701a      	strb	r2, [r3, #0]
 800366e:	e015      	b.n	800369c <HCI_TL_SPI_Receive+0xb8>
    {
      BSP_SPI1_SendRecv(&char_00, (uint8_t*)&read_char, 1);
 8003670:	2416      	movs	r4, #22
 8003672:	1939      	adds	r1, r7, r4
 8003674:	2317      	movs	r3, #23
 8003676:	18fb      	adds	r3, r7, r3
 8003678:	2201      	movs	r2, #1
 800367a:	0018      	movs	r0, r3
 800367c:	f000 fdcc 	bl	8004218 <BSP_SPI1_SendRecv>
      buffer[len] = read_char;
 8003680:	211d      	movs	r1, #29
 8003682:	187b      	adds	r3, r7, r1
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	18d3      	adds	r3, r2, r3
 800368a:	193a      	adds	r2, r7, r4
 800368c:	7812      	ldrb	r2, [r2, #0]
 800368e:	b2d2      	uxtb	r2, r2
 8003690:	701a      	strb	r2, [r3, #0]
    for(len = 0; len < byte_count; len++)
 8003692:	187b      	adds	r3, r7, r1
 8003694:	781a      	ldrb	r2, [r3, #0]
 8003696:	187b      	adds	r3, r7, r1
 8003698:	3201      	adds	r2, #1
 800369a:	701a      	strb	r2, [r3, #0]
 800369c:	231d      	movs	r3, #29
 800369e:	18fb      	adds	r3, r7, r3
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	221e      	movs	r2, #30
 80036a6:	18ba      	adds	r2, r7, r2
 80036a8:	8812      	ldrh	r2, [r2, #0]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d8e0      	bhi.n	8003670 <HCI_TL_SPI_Receive+0x8c>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  uint32_t tickstart = HAL_GetTick();
 80036ae:	f001 fa75 	bl	8004b9c <HAL_GetTick>
 80036b2:	0003      	movs	r3, r0
 80036b4:	61bb      	str	r3, [r7, #24]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 80036b6:	e007      	b.n	80036c8 <HCI_TL_SPI_Receive+0xe4>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 80036b8:	23a0      	movs	r3, #160	; 0xa0
 80036ba:	05db      	lsls	r3, r3, #23
 80036bc:	2101      	movs	r1, #1
 80036be:	0018      	movs	r0, r3
 80036c0:	f002 ff4e 	bl	8006560 <HAL_GPIO_ReadPin>
 80036c4:	1e03      	subs	r3, r0, #0
 80036c6:	d009      	beq.n	80036dc <HCI_TL_SPI_Receive+0xf8>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 80036c8:	f001 fa68 	bl	8004b9c <HAL_GetTick>
 80036cc:	0002      	movs	r2, r0
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	1ad2      	subs	r2, r2, r3
 80036d2:	23fa      	movs	r3, #250	; 0xfa
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d3ee      	bcc.n	80036b8 <HCI_TL_SPI_Receive+0xd4>
 80036da:	e000      	b.n	80036de <HCI_TL_SPI_Receive+0xfa>
      break;
 80036dc:	46c0      	nop			; (mov r8, r8)
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 80036de:	f7ff fedb 	bl	8003498 <HCI_TL_SPI_Enable_IRQ>

  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80036e2:	23a0      	movs	r3, #160	; 0xa0
 80036e4:	05db      	lsls	r3, r3, #23
 80036e6:	2201      	movs	r2, #1
 80036e8:	2102      	movs	r1, #2
 80036ea:	0018      	movs	r0, r3
 80036ec:	f002 ff55 	bl	800659a <HAL_GPIO_WritePin>

  return len;
 80036f0:	231d      	movs	r3, #29
 80036f2:	18fb      	adds	r3, r7, r3
 80036f4:	781b      	ldrb	r3, [r3, #0]
}
 80036f6:	0018      	movs	r0, r3
 80036f8:	46bd      	mov	sp, r7
 80036fa:	b008      	add	sp, #32
 80036fc:	bdb0      	pop	{r4, r5, r7, pc}
 80036fe:	46c0      	nop			; (mov r8, r8)
 8003700:	080108d8 	.word	0x080108d8

08003704 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8003704:	b590      	push	{r4, r7, lr}
 8003706:	b08b      	sub	sp, #44	; 0x2c
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	000a      	movs	r2, r1
 800370e:	1cbb      	adds	r3, r7, #2
 8003710:	801a      	strh	r2, [r3, #0]
  int32_t result;
  uint16_t rx_bytes;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8003712:	2314      	movs	r3, #20
 8003714:	18fb      	adds	r3, r7, r3
 8003716:	4a46      	ldr	r2, [pc, #280]	; (8003830 <HCI_TL_SPI_Send+0x12c>)
 8003718:	6811      	ldr	r1, [r2, #0]
 800371a:	6019      	str	r1, [r3, #0]
 800371c:	7912      	ldrb	r2, [r2, #4]
 800371e:	711a      	strb	r2, [r3, #4]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8003720:	f001 fa3c 	bl	8004b9c <HAL_GetTick>
 8003724:	0003      	movs	r3, r0
 8003726:	623b      	str	r3, [r7, #32]

  HCI_TL_SPI_Disable_IRQ();
 8003728:	f7ff febe 	bl	80034a8 <HCI_TL_SPI_Disable_IRQ>

  do
  {
    uint32_t tickstart_data_available = HAL_GetTick();
 800372c:	f001 fa36 	bl	8004b9c <HAL_GetTick>
 8003730:	0003      	movs	r3, r0
 8003732:	61fb      	str	r3, [r7, #28]

    result = 0;
 8003734:	2300      	movs	r3, #0
 8003736:	627b      	str	r3, [r7, #36]	; 0x24

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8003738:	23a0      	movs	r3, #160	; 0xa0
 800373a:	05db      	lsls	r3, r3, #23
 800373c:	2200      	movs	r2, #0
 800373e:	2102      	movs	r1, #2
 8003740:	0018      	movs	r0, r3
 8003742:	f002 ff2a 	bl	800659a <HAL_GPIO_WritePin>

    /*
     * Wait until BlueNRG-2 is ready.
     * When ready it will raise the IRQ pin.
     */
    while(!IsDataAvailable())
 8003746:	e00a      	b.n	800375e <HCI_TL_SPI_Send+0x5a>
    {
      if((HAL_GetTick() - tickstart_data_available) > TIMEOUT_DURATION)
 8003748:	f001 fa28 	bl	8004b9c <HAL_GetTick>
 800374c:	0002      	movs	r2, r0
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b64      	cmp	r3, #100	; 0x64
 8003754:	d903      	bls.n	800375e <HCI_TL_SPI_Send+0x5a>
      {
        result = -3;
 8003756:	2303      	movs	r3, #3
 8003758:	425b      	negs	r3, r3
 800375a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800375c:	e003      	b.n	8003766 <HCI_TL_SPI_Send+0x62>
    while(!IsDataAvailable())
 800375e:	f000 f86b 	bl	8003838 <IsDataAvailable>
 8003762:	1e03      	subs	r3, r0, #0
 8003764:	d0f0      	beq.n	8003748 <HCI_TL_SPI_Send+0x44>
      }
    }
    if(result == -3)
 8003766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003768:	3303      	adds	r3, #3
 800376a:	d107      	bne.n	800377c <HCI_TL_SPI_Send+0x78>
    {
      /* The break causes the exiting from the "while", so the CS line must be released */
      HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800376c:	23a0      	movs	r3, #160	; 0xa0
 800376e:	05db      	lsls	r3, r3, #23
 8003770:	2201      	movs	r2, #1
 8003772:	2102      	movs	r1, #2
 8003774:	0018      	movs	r0, r3
 8003776:	f002 ff10 	bl	800659a <HAL_GPIO_WritePin>
      break;
 800377a:	e03a      	b.n	80037f2 <HCI_TL_SPI_Send+0xee>
    }

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 800377c:	240c      	movs	r4, #12
 800377e:	1939      	adds	r1, r7, r4
 8003780:	2314      	movs	r3, #20
 8003782:	18fb      	adds	r3, r7, r3
 8003784:	2205      	movs	r2, #5
 8003786:	0018      	movs	r0, r3
 8003788:	f000 fd46 	bl	8004218 <BSP_SPI1_SendRecv>

    rx_bytes = (((uint16_t)header_slave[2])<<8) | ((uint16_t)header_slave[1]);
 800378c:	0021      	movs	r1, r4
 800378e:	187b      	adds	r3, r7, r1
 8003790:	789b      	ldrb	r3, [r3, #2]
 8003792:	021b      	lsls	r3, r3, #8
 8003794:	b21a      	sxth	r2, r3
 8003796:	187b      	adds	r3, r7, r1
 8003798:	785b      	ldrb	r3, [r3, #1]
 800379a:	b21b      	sxth	r3, r3
 800379c:	4313      	orrs	r3, r2
 800379e:	b21a      	sxth	r2, r3
 80037a0:	211a      	movs	r1, #26
 80037a2:	187b      	adds	r3, r7, r1
 80037a4:	801a      	strh	r2, [r3, #0]

    if(rx_bytes >= size)
 80037a6:	187a      	adds	r2, r7, r1
 80037a8:	1cbb      	adds	r3, r7, #2
 80037aa:	8812      	ldrh	r2, [r2, #0]
 80037ac:	881b      	ldrh	r3, [r3, #0]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d307      	bcc.n	80037c2 <HCI_TL_SPI_Send+0xbe>
    {
      /* Buffer is big enough */
      BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 80037b2:	1cbb      	adds	r3, r7, #2
 80037b4:	881a      	ldrh	r2, [r3, #0]
 80037b6:	491f      	ldr	r1, [pc, #124]	; (8003834 <HCI_TL_SPI_Send+0x130>)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	0018      	movs	r0, r3
 80037bc:	f000 fd2c 	bl	8004218 <BSP_SPI1_SendRecv>
 80037c0:	e002      	b.n	80037c8 <HCI_TL_SPI_Send+0xc4>
    }
    else
    {
      /* Buffer is too small */
      result = -2;
 80037c2:	2302      	movs	r3, #2
 80037c4:	425b      	negs	r3, r3
 80037c6:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80037c8:	23a0      	movs	r3, #160	; 0xa0
 80037ca:	05db      	lsls	r3, r3, #23
 80037cc:	2201      	movs	r2, #1
 80037ce:	2102      	movs	r1, #2
 80037d0:	0018      	movs	r0, r3
 80037d2:	f002 fee2 	bl	800659a <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 80037d6:	f001 f9e1 	bl	8004b9c <HAL_GetTick>
 80037da:	0002      	movs	r2, r0
 80037dc:	6a3b      	ldr	r3, [r7, #32]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	2b64      	cmp	r3, #100	; 0x64
 80037e2:	d903      	bls.n	80037ec <HCI_TL_SPI_Send+0xe8>
    {
      result = -3;
 80037e4:	2303      	movs	r3, #3
 80037e6:	425b      	negs	r3, r3
 80037e8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80037ea:	e002      	b.n	80037f2 <HCI_TL_SPI_Send+0xee>
    }
  } while(result < 0);
 80037ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	db9c      	blt.n	800372c <HCI_TL_SPI_Send+0x28>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  tickstart = HAL_GetTick();
 80037f2:	f001 f9d3 	bl	8004b9c <HAL_GetTick>
 80037f6:	0003      	movs	r3, r0
 80037f8:	623b      	str	r3, [r7, #32]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 80037fa:	e007      	b.n	800380c <HCI_TL_SPI_Send+0x108>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 80037fc:	23a0      	movs	r3, #160	; 0xa0
 80037fe:	05db      	lsls	r3, r3, #23
 8003800:	2101      	movs	r1, #1
 8003802:	0018      	movs	r0, r3
 8003804:	f002 feac 	bl	8006560 <HAL_GPIO_ReadPin>
 8003808:	1e03      	subs	r3, r0, #0
 800380a:	d009      	beq.n	8003820 <HCI_TL_SPI_Send+0x11c>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 800380c:	f001 f9c6 	bl	8004b9c <HAL_GetTick>
 8003810:	0002      	movs	r2, r0
 8003812:	6a3b      	ldr	r3, [r7, #32]
 8003814:	1ad2      	subs	r2, r2, r3
 8003816:	23fa      	movs	r3, #250	; 0xfa
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	429a      	cmp	r2, r3
 800381c:	d3ee      	bcc.n	80037fc <HCI_TL_SPI_Send+0xf8>
 800381e:	e000      	b.n	8003822 <HCI_TL_SPI_Send+0x11e>
      break;
 8003820:	46c0      	nop			; (mov r8, r8)
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 8003822:	f7ff fe39 	bl	8003498 <HCI_TL_SPI_Enable_IRQ>

  return result;
 8003826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003828:	0018      	movs	r0, r3
 800382a:	46bd      	mov	sp, r7
 800382c:	b00b      	add	sp, #44	; 0x2c
 800382e:	bd90      	pop	{r4, r7, pc}
 8003830:	080108e0 	.word	0x080108e0
 8003834:	200002d8 	.word	0x200002d8

08003838 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 800383c:	23a0      	movs	r3, #160	; 0xa0
 800383e:	05db      	lsls	r3, r3, #23
 8003840:	2101      	movs	r1, #1
 8003842:	0018      	movs	r0, r3
 8003844:	f002 fe8c 	bl	8006560 <HAL_GPIO_ReadPin>
 8003848:	0003      	movs	r3, r0
 800384a:	3b01      	subs	r3, #1
 800384c:	425a      	negs	r2, r3
 800384e:	4153      	adcs	r3, r2
 8003850:	b2db      	uxtb	r3, r3
}
 8003852:	0018      	movs	r0, r3
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b088      	sub	sp, #32
 800385c:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 800385e:	1d3b      	adds	r3, r7, #4
 8003860:	4a16      	ldr	r2, [pc, #88]	; (80038bc <hci_tl_lowlevel_init+0x64>)
 8003862:	601a      	str	r2, [r3, #0]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8003864:	1d3b      	adds	r3, r7, #4
 8003866:	4a16      	ldr	r2, [pc, #88]	; (80038c0 <hci_tl_lowlevel_init+0x68>)
 8003868:	605a      	str	r2, [r3, #4]
  fops.Send    = HCI_TL_SPI_Send;
 800386a:	1d3b      	adds	r3, r7, #4
 800386c:	4a15      	ldr	r2, [pc, #84]	; (80038c4 <hci_tl_lowlevel_init+0x6c>)
 800386e:	611a      	str	r2, [r3, #16]
  fops.Receive = HCI_TL_SPI_Receive;
 8003870:	1d3b      	adds	r3, r7, #4
 8003872:	4a15      	ldr	r2, [pc, #84]	; (80038c8 <hci_tl_lowlevel_init+0x70>)
 8003874:	60da      	str	r2, [r3, #12]
  fops.Reset   = HCI_TL_SPI_Reset;
 8003876:	1d3b      	adds	r3, r7, #4
 8003878:	4a14      	ldr	r2, [pc, #80]	; (80038cc <hci_tl_lowlevel_init+0x74>)
 800387a:	609a      	str	r2, [r3, #8]
  fops.GetTick = BSP_GetTick;
 800387c:	1d3b      	adds	r3, r7, #4
 800387e:	4a14      	ldr	r2, [pc, #80]	; (80038d0 <hci_tl_lowlevel_init+0x78>)
 8003880:	619a      	str	r2, [r3, #24]

  hci_register_io_bus (&fops);
 8003882:	1d3b      	adds	r3, r7, #4
 8003884:	0018      	movs	r0, r3
 8003886:	f009 fc31 	bl	800d0ec <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 800388a:	23c0      	movs	r3, #192	; 0xc0
 800388c:	04da      	lsls	r2, r3, #19
 800388e:	4b11      	ldr	r3, [pc, #68]	; (80038d4 <hci_tl_lowlevel_init+0x7c>)
 8003890:	0011      	movs	r1, r2
 8003892:	0018      	movs	r0, r3
 8003894:	f002 fbd4 	bl	8006040 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8003898:	4a0f      	ldr	r2, [pc, #60]	; (80038d8 <hci_tl_lowlevel_init+0x80>)
 800389a:	4b0e      	ldr	r3, [pc, #56]	; (80038d4 <hci_tl_lowlevel_init+0x7c>)
 800389c:	2100      	movs	r1, #0
 800389e:	0018      	movs	r0, r3
 80038a0:	f002 fb9c 	bl	8005fdc <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80038a4:	2200      	movs	r2, #0
 80038a6:	2100      	movs	r1, #0
 80038a8:	2005      	movs	r0, #5
 80038aa:	f002 f903 	bl	8005ab4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80038ae:	2005      	movs	r0, #5
 80038b0:	f002 f915 	bl	8005ade <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 80038b4:	46c0      	nop			; (mov r8, r8)
 80038b6:	46bd      	mov	sp, r7
 80038b8:	b008      	add	sp, #32
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	080034b9 	.word	0x080034b9
 80038c0:	0800356d 	.word	0x0800356d
 80038c4:	08003705 	.word	0x08003705
 80038c8:	080035e5 	.word	0x080035e5
 80038cc:	080035a1 	.word	0x080035a1
 80038d0:	08004259 	.word	0x08004259
 80038d4:	200002cc 	.word	0x200002cc
 80038d8:	080038dd 	.word	0x080038dd

080038dc <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 80038e0:	e004      	b.n	80038ec <hci_tl_lowlevel_isr+0x10>
  {
    if (hci_notify_asynch_evt(NULL))
 80038e2:	2000      	movs	r0, #0
 80038e4:	f009 fd7c 	bl	800d3e0 <hci_notify_asynch_evt>
 80038e8:	1e03      	subs	r3, r0, #0
 80038ea:	d104      	bne.n	80038f6 <hci_tl_lowlevel_isr+0x1a>
  while(IsDataAvailable())
 80038ec:	f7ff ffa4 	bl	8003838 <IsDataAvailable>
 80038f0:	1e03      	subs	r3, r0, #0
 80038f2:	d1f6      	bne.n	80038e2 <hci_tl_lowlevel_isr+0x6>
 80038f4:	e000      	b.n	80038f8 <hci_tl_lowlevel_isr+0x1c>
    {
      return;
 80038f6:	46c0      	nop			; (mov r8, r8)
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <HAL_ADC_ConvCpltCallback>:
uint32_t counterInside = 0;
volatile int state =0;
volatile int count=0;
int flag = 0;
uint32_t buffer;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
	raw=buffer;
 8003904:	4b03      	ldr	r3, [pc, #12]	; (8003914 <HAL_ADC_ConvCpltCallback+0x18>)
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	4b03      	ldr	r3, [pc, #12]	; (8003918 <HAL_ADC_ConvCpltCallback+0x1c>)
 800390a:	601a      	str	r2, [r3, #0]
//	adc_val=HAL_ADC_GetValue(&hadc1);
}
 800390c:	46c0      	nop			; (mov r8, r8)
 800390e:	46bd      	mov	sp, r7
 8003910:	b002      	add	sp, #8
 8003912:	bd80      	pop	{r7, pc}
 8003914:	200004e8 	.word	0x200004e8
 8003918:	200003d8 	.word	0x200003d8

0800391c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003920:	f001 f8c0 	bl	8004aa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003924:	f000 f83c 	bl	80039a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003928:	f000 f9b2 	bl	8003c90 <MX_GPIO_Init>
  MX_DMA_Init();
 800392c:	f000 f99a 	bl	8003c64 <MX_DMA_Init>
  MX_TIM3_Init();
 8003930:	f000 f910 	bl	8003b54 <MX_TIM3_Init>
  MX_ADC1_Init();
 8003934:	f000 f8a2 	bl	8003a7c <MX_ADC1_Init>
  MX_BlueNRG_2_Init();
 8003938:	f7fe fc18 	bl	800216c <MX_BlueNRG_2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800393c:	f000 f878 	bl	8003a30 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  ihm12a1_stspin240_init(); // initializes XNucleo-IHM12A1 board
 8003940:	f000 fab0 	bl	8003ea4 <ihm12a1_stspin240_init>
  enable_dualbridge();
 8003944:	f000 fa94 	bl	8003e70 <enable_dualbridge>
//  MX_BlueNRG_2_Init();
  HAL_ADC_Start_DMA(&hadc1,&buffer,1);
 8003948:	4911      	ldr	r1, [pc, #68]	; (8003990 <main+0x74>)
 800394a:	4b12      	ldr	r3, [pc, #72]	; (8003994 <main+0x78>)
 800394c:	2201      	movs	r2, #1
 800394e:	0018      	movs	r0, r3
 8003950:	f001 fc58 	bl	8005204 <HAL_ADC_Start_DMA>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8003954:	2380      	movs	r3, #128	; 0x80
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	480f      	ldr	r0, [pc, #60]	; (8003998 <main+0x7c>)
 800395a:	2201      	movs	r2, #1
 800395c:	0019      	movs	r1, r3
 800395e:	f002 fe1c 	bl	800659a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 8003962:	2380      	movs	r3, #128	; 0x80
 8003964:	011b      	lsls	r3, r3, #4
 8003966:	480c      	ldr	r0, [pc, #48]	; (8003998 <main+0x7c>)
 8003968:	2201      	movs	r2, #1
 800396a:	0019      	movs	r1, r3
 800396c:	f002 fe15 	bl	800659a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 8003970:	2380      	movs	r3, #128	; 0x80
 8003972:	015b      	lsls	r3, r3, #5
 8003974:	4808      	ldr	r0, [pc, #32]	; (8003998 <main+0x7c>)
 8003976:	2201      	movs	r2, #1
 8003978:	0019      	movs	r1, r3
 800397a:	f002 fe0e 	bl	800659a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 800397e:	4b07      	ldr	r3, [pc, #28]	; (800399c <main+0x80>)
 8003980:	2201      	movs	r2, #1
 8003982:	2104      	movs	r1, #4
 8003984:	0018      	movs	r0, r3
 8003986:	f002 fe08 	bl	800659a <HAL_GPIO_WritePin>
  while (1)
  {
//	  battery_indicator();
    /* USER CODE END WHILE */

  MX_BlueNRG_2_Process();
 800398a:	f7fe fc1f 	bl	80021cc <MX_BlueNRG_2_Process>
 800398e:	e7fc      	b.n	800398a <main+0x6e>
 8003990:	200004e8 	.word	0x200004e8
 8003994:	200003dc 	.word	0x200003dc
 8003998:	50000800 	.word	0x50000800
 800399c:	50000c00 	.word	0x50000c00

080039a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80039a0:	b590      	push	{r4, r7, lr}
 80039a2:	b093      	sub	sp, #76	; 0x4c
 80039a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80039a6:	2414      	movs	r4, #20
 80039a8:	193b      	adds	r3, r7, r4
 80039aa:	0018      	movs	r0, r3
 80039ac:	2334      	movs	r3, #52	; 0x34
 80039ae:	001a      	movs	r2, r3
 80039b0:	2100      	movs	r1, #0
 80039b2:	f00a fe05 	bl	800e5c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80039b6:	1d3b      	adds	r3, r7, #4
 80039b8:	0018      	movs	r0, r3
 80039ba:	2310      	movs	r3, #16
 80039bc:	001a      	movs	r2, r3
 80039be:	2100      	movs	r1, #0
 80039c0:	f00a fdfe 	bl	800e5c0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80039c4:	2380      	movs	r3, #128	; 0x80
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	0018      	movs	r0, r3
 80039ca:	f002 fe5d 	bl	8006688 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80039ce:	193b      	adds	r3, r7, r4
 80039d0:	2202      	movs	r2, #2
 80039d2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80039d4:	193b      	adds	r3, r7, r4
 80039d6:	2280      	movs	r2, #128	; 0x80
 80039d8:	0052      	lsls	r2, r2, #1
 80039da:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80039dc:	193b      	adds	r3, r7, r4
 80039de:	2200      	movs	r2, #0
 80039e0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80039e2:	193b      	adds	r3, r7, r4
 80039e4:	2240      	movs	r2, #64	; 0x40
 80039e6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80039e8:	193b      	adds	r3, r7, r4
 80039ea:	2200      	movs	r2, #0
 80039ec:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039ee:	193b      	adds	r3, r7, r4
 80039f0:	0018      	movs	r0, r3
 80039f2:	f002 fe95 	bl	8006720 <HAL_RCC_OscConfig>
 80039f6:	1e03      	subs	r3, r0, #0
 80039f8:	d001      	beq.n	80039fe <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80039fa:	f000 fa81 	bl	8003f00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80039fe:	1d3b      	adds	r3, r7, #4
 8003a00:	2207      	movs	r2, #7
 8003a02:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003a04:	1d3b      	adds	r3, r7, #4
 8003a06:	2200      	movs	r2, #0
 8003a08:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a0a:	1d3b      	adds	r3, r7, #4
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003a10:	1d3b      	adds	r3, r7, #4
 8003a12:	2200      	movs	r2, #0
 8003a14:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003a16:	1d3b      	adds	r3, r7, #4
 8003a18:	2100      	movs	r1, #0
 8003a1a:	0018      	movs	r0, r3
 8003a1c:	f003 f990 	bl	8006d40 <HAL_RCC_ClockConfig>
 8003a20:	1e03      	subs	r3, r0, #0
 8003a22:	d001      	beq.n	8003a28 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8003a24:	f000 fa6c 	bl	8003f00 <Error_Handler>
  }
}
 8003a28:	46c0      	nop			; (mov r8, r8)
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	b013      	add	sp, #76	; 0x4c
 8003a2e:	bd90      	pop	{r4, r7, pc}

08003a30 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  /* EXTI0_1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8003a34:	2200      	movs	r2, #0
 8003a36:	2100      	movs	r1, #0
 8003a38:	2005      	movs	r0, #5
 8003a3a:	f002 f83b 	bl	8005ab4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8003a3e:	2005      	movs	r0, #5
 8003a40:	f002 f84d 	bl	8005ade <HAL_NVIC_EnableIRQ>
  /* EXTI2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8003a44:	2200      	movs	r2, #0
 8003a46:	2100      	movs	r1, #0
 8003a48:	2006      	movs	r0, #6
 8003a4a:	f002 f833 	bl	8005ab4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8003a4e:	2006      	movs	r0, #6
 8003a50:	f002 f845 	bl	8005ade <HAL_NVIC_EnableIRQ>
  /* EXTI4_15_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8003a54:	2200      	movs	r2, #0
 8003a56:	2100      	movs	r1, #0
 8003a58:	2007      	movs	r0, #7
 8003a5a:	f002 f82b 	bl	8005ab4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003a5e:	2007      	movs	r0, #7
 8003a60:	f002 f83d 	bl	8005ade <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003a64:	2200      	movs	r2, #0
 8003a66:	2100      	movs	r1, #0
 8003a68:	2009      	movs	r0, #9
 8003a6a:	f002 f823 	bl	8005ab4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003a6e:	2009      	movs	r0, #9
 8003a70:	f002 f835 	bl	8005ade <HAL_NVIC_EnableIRQ>
}
 8003a74:	46c0      	nop			; (mov r8, r8)
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
	...

08003a7c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003a82:	1d3b      	adds	r3, r7, #4
 8003a84:	0018      	movs	r0, r3
 8003a86:	230c      	movs	r3, #12
 8003a88:	001a      	movs	r2, r3
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	f00a fd98 	bl	800e5c0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003a90:	4b2d      	ldr	r3, [pc, #180]	; (8003b48 <MX_ADC1_Init+0xcc>)
 8003a92:	4a2e      	ldr	r2, [pc, #184]	; (8003b4c <MX_ADC1_Init+0xd0>)
 8003a94:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003a96:	4b2c      	ldr	r3, [pc, #176]	; (8003b48 <MX_ADC1_Init+0xcc>)
 8003a98:	2280      	movs	r2, #128	; 0x80
 8003a9a:	05d2      	lsls	r2, r2, #23
 8003a9c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003a9e:	4b2a      	ldr	r3, [pc, #168]	; (8003b48 <MX_ADC1_Init+0xcc>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003aa4:	4b28      	ldr	r3, [pc, #160]	; (8003b48 <MX_ADC1_Init+0xcc>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003aaa:	4b27      	ldr	r3, [pc, #156]	; (8003b48 <MX_ADC1_Init+0xcc>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003ab0:	4b25      	ldr	r3, [pc, #148]	; (8003b48 <MX_ADC1_Init+0xcc>)
 8003ab2:	2204      	movs	r2, #4
 8003ab4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003ab6:	4b24      	ldr	r3, [pc, #144]	; (8003b48 <MX_ADC1_Init+0xcc>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8003abc:	4b22      	ldr	r3, [pc, #136]	; (8003b48 <MX_ADC1_Init+0xcc>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003ac2:	4b21      	ldr	r3, [pc, #132]	; (8003b48 <MX_ADC1_Init+0xcc>)
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8003ac8:	4b1f      	ldr	r3, [pc, #124]	; (8003b48 <MX_ADC1_Init+0xcc>)
 8003aca:	2201      	movs	r2, #1
 8003acc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003ace:	4b1e      	ldr	r3, [pc, #120]	; (8003b48 <MX_ADC1_Init+0xcc>)
 8003ad0:	2220      	movs	r2, #32
 8003ad2:	2100      	movs	r1, #0
 8003ad4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003ad6:	4b1c      	ldr	r3, [pc, #112]	; (8003b48 <MX_ADC1_Init+0xcc>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003adc:	4b1a      	ldr	r3, [pc, #104]	; (8003b48 <MX_ADC1_Init+0xcc>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003ae2:	4b19      	ldr	r3, [pc, #100]	; (8003b48 <MX_ADC1_Init+0xcc>)
 8003ae4:	222c      	movs	r2, #44	; 0x2c
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003aea:	4b17      	ldr	r3, [pc, #92]	; (8003b48 <MX_ADC1_Init+0xcc>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8003af0:	4b15      	ldr	r3, [pc, #84]	; (8003b48 <MX_ADC1_Init+0xcc>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8003af6:	4b14      	ldr	r3, [pc, #80]	; (8003b48 <MX_ADC1_Init+0xcc>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8003afc:	4b12      	ldr	r3, [pc, #72]	; (8003b48 <MX_ADC1_Init+0xcc>)
 8003afe:	223c      	movs	r2, #60	; 0x3c
 8003b00:	2100      	movs	r1, #0
 8003b02:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8003b04:	4b10      	ldr	r3, [pc, #64]	; (8003b48 <MX_ADC1_Init+0xcc>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003b0a:	4b0f      	ldr	r3, [pc, #60]	; (8003b48 <MX_ADC1_Init+0xcc>)
 8003b0c:	0018      	movs	r0, r3
 8003b0e:	f001 f9d1 	bl	8004eb4 <HAL_ADC_Init>
 8003b12:	1e03      	subs	r3, r0, #0
 8003b14:	d001      	beq.n	8003b1a <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8003b16:	f000 f9f3 	bl	8003f00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8003b1a:	1d3b      	adds	r3, r7, #4
 8003b1c:	4a0c      	ldr	r2, [pc, #48]	; (8003b50 <MX_ADC1_Init+0xd4>)
 8003b1e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003b20:	1d3b      	adds	r3, r7, #4
 8003b22:	2200      	movs	r2, #0
 8003b24:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8003b26:	1d3b      	adds	r3, r7, #4
 8003b28:	2200      	movs	r2, #0
 8003b2a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003b2c:	1d3a      	adds	r2, r7, #4
 8003b2e:	4b06      	ldr	r3, [pc, #24]	; (8003b48 <MX_ADC1_Init+0xcc>)
 8003b30:	0011      	movs	r1, r2
 8003b32:	0018      	movs	r0, r3
 8003b34:	f001 fc04 	bl	8005340 <HAL_ADC_ConfigChannel>
 8003b38:	1e03      	subs	r3, r0, #0
 8003b3a:	d001      	beq.n	8003b40 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8003b3c:	f000 f9e0 	bl	8003f00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003b40:	46c0      	nop			; (mov r8, r8)
 8003b42:	46bd      	mov	sp, r7
 8003b44:	b004      	add	sp, #16
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	200003dc 	.word	0x200003dc
 8003b4c:	40012400 	.word	0x40012400
 8003b50:	28000400 	.word	0x28000400

08003b54 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b08e      	sub	sp, #56	; 0x38
 8003b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b5a:	2328      	movs	r3, #40	; 0x28
 8003b5c:	18fb      	adds	r3, r7, r3
 8003b5e:	0018      	movs	r0, r3
 8003b60:	2310      	movs	r3, #16
 8003b62:	001a      	movs	r2, r3
 8003b64:	2100      	movs	r1, #0
 8003b66:	f00a fd2b 	bl	800e5c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b6a:	231c      	movs	r3, #28
 8003b6c:	18fb      	adds	r3, r7, r3
 8003b6e:	0018      	movs	r0, r3
 8003b70:	230c      	movs	r3, #12
 8003b72:	001a      	movs	r2, r3
 8003b74:	2100      	movs	r1, #0
 8003b76:	f00a fd23 	bl	800e5c0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b7a:	003b      	movs	r3, r7
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	231c      	movs	r3, #28
 8003b80:	001a      	movs	r2, r3
 8003b82:	2100      	movs	r1, #0
 8003b84:	f00a fd1c 	bl	800e5c0 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003b88:	4b34      	ldr	r3, [pc, #208]	; (8003c5c <MX_TIM3_Init+0x108>)
 8003b8a:	4a35      	ldr	r2, [pc, #212]	; (8003c60 <MX_TIM3_Init+0x10c>)
 8003b8c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8003b8e:	4b33      	ldr	r3, [pc, #204]	; (8003c5c <MX_TIM3_Init+0x108>)
 8003b90:	220f      	movs	r2, #15
 8003b92:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b94:	4b31      	ldr	r3, [pc, #196]	; (8003c5c <MX_TIM3_Init+0x108>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8003b9a:	4b30      	ldr	r3, [pc, #192]	; (8003c5c <MX_TIM3_Init+0x108>)
 8003b9c:	2263      	movs	r2, #99	; 0x63
 8003b9e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ba0:	4b2e      	ldr	r3, [pc, #184]	; (8003c5c <MX_TIM3_Init+0x108>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ba6:	4b2d      	ldr	r3, [pc, #180]	; (8003c5c <MX_TIM3_Init+0x108>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003bac:	4b2b      	ldr	r3, [pc, #172]	; (8003c5c <MX_TIM3_Init+0x108>)
 8003bae:	0018      	movs	r0, r3
 8003bb0:	f003 ffc8 	bl	8007b44 <HAL_TIM_Base_Init>
 8003bb4:	1e03      	subs	r3, r0, #0
 8003bb6:	d001      	beq.n	8003bbc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003bb8:	f000 f9a2 	bl	8003f00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003bbc:	2128      	movs	r1, #40	; 0x28
 8003bbe:	187b      	adds	r3, r7, r1
 8003bc0:	2280      	movs	r2, #128	; 0x80
 8003bc2:	0152      	lsls	r2, r2, #5
 8003bc4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003bc6:	187a      	adds	r2, r7, r1
 8003bc8:	4b24      	ldr	r3, [pc, #144]	; (8003c5c <MX_TIM3_Init+0x108>)
 8003bca:	0011      	movs	r1, r2
 8003bcc:	0018      	movs	r0, r3
 8003bce:	f004 fa55 	bl	800807c <HAL_TIM_ConfigClockSource>
 8003bd2:	1e03      	subs	r3, r0, #0
 8003bd4:	d001      	beq.n	8003bda <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8003bd6:	f000 f993 	bl	8003f00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003bda:	4b20      	ldr	r3, [pc, #128]	; (8003c5c <MX_TIM3_Init+0x108>)
 8003bdc:	0018      	movs	r0, r3
 8003bde:	f004 f809 	bl	8007bf4 <HAL_TIM_PWM_Init>
 8003be2:	1e03      	subs	r3, r0, #0
 8003be4:	d001      	beq.n	8003bea <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8003be6:	f000 f98b 	bl	8003f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bea:	211c      	movs	r1, #28
 8003bec:	187b      	adds	r3, r7, r1
 8003bee:	2200      	movs	r2, #0
 8003bf0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bf2:	187b      	adds	r3, r7, r1
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003bf8:	187a      	adds	r2, r7, r1
 8003bfa:	4b18      	ldr	r3, [pc, #96]	; (8003c5c <MX_TIM3_Init+0x108>)
 8003bfc:	0011      	movs	r1, r2
 8003bfe:	0018      	movs	r0, r3
 8003c00:	f004 ff1a 	bl	8008a38 <HAL_TIMEx_MasterConfigSynchronization>
 8003c04:	1e03      	subs	r3, r0, #0
 8003c06:	d001      	beq.n	8003c0c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8003c08:	f000 f97a 	bl	8003f00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c0c:	003b      	movs	r3, r7
 8003c0e:	2260      	movs	r2, #96	; 0x60
 8003c10:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003c12:	003b      	movs	r3, r7
 8003c14:	2200      	movs	r2, #0
 8003c16:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c18:	003b      	movs	r3, r7
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c1e:	003b      	movs	r3, r7
 8003c20:	2200      	movs	r2, #0
 8003c22:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c24:	0039      	movs	r1, r7
 8003c26:	4b0d      	ldr	r3, [pc, #52]	; (8003c5c <MX_TIM3_Init+0x108>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	0018      	movs	r0, r3
 8003c2c:	f004 f926 	bl	8007e7c <HAL_TIM_PWM_ConfigChannel>
 8003c30:	1e03      	subs	r3, r0, #0
 8003c32:	d001      	beq.n	8003c38 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8003c34:	f000 f964 	bl	8003f00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003c38:	0039      	movs	r1, r7
 8003c3a:	4b08      	ldr	r3, [pc, #32]	; (8003c5c <MX_TIM3_Init+0x108>)
 8003c3c:	2204      	movs	r2, #4
 8003c3e:	0018      	movs	r0, r3
 8003c40:	f004 f91c 	bl	8007e7c <HAL_TIM_PWM_ConfigChannel>
 8003c44:	1e03      	subs	r3, r0, #0
 8003c46:	d001      	beq.n	8003c4c <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 8003c48:	f000 f95a 	bl	8003f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003c4c:	4b03      	ldr	r3, [pc, #12]	; (8003c5c <MX_TIM3_Init+0x108>)
 8003c4e:	0018      	movs	r0, r3
 8003c50:	f000 fa16 	bl	8004080 <HAL_TIM_MspPostInit>

}
 8003c54:	46c0      	nop			; (mov r8, r8)
 8003c56:	46bd      	mov	sp, r7
 8003c58:	b00e      	add	sp, #56	; 0x38
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	2000049c 	.word	0x2000049c
 8003c60:	40000400 	.word	0x40000400

08003c64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003c6a:	4b08      	ldr	r3, [pc, #32]	; (8003c8c <MX_DMA_Init+0x28>)
 8003c6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c6e:	4b07      	ldr	r3, [pc, #28]	; (8003c8c <MX_DMA_Init+0x28>)
 8003c70:	2101      	movs	r1, #1
 8003c72:	430a      	orrs	r2, r1
 8003c74:	639a      	str	r2, [r3, #56]	; 0x38
 8003c76:	4b05      	ldr	r3, [pc, #20]	; (8003c8c <MX_DMA_Init+0x28>)
 8003c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	607b      	str	r3, [r7, #4]
 8003c80:	687b      	ldr	r3, [r7, #4]

}
 8003c82:	46c0      	nop			; (mov r8, r8)
 8003c84:	46bd      	mov	sp, r7
 8003c86:	b002      	add	sp, #8
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	46c0      	nop			; (mov r8, r8)
 8003c8c:	40021000 	.word	0x40021000

08003c90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c90:	b590      	push	{r4, r7, lr}
 8003c92:	b08b      	sub	sp, #44	; 0x2c
 8003c94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c96:	2414      	movs	r4, #20
 8003c98:	193b      	adds	r3, r7, r4
 8003c9a:	0018      	movs	r0, r3
 8003c9c:	2314      	movs	r3, #20
 8003c9e:	001a      	movs	r2, r3
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	f00a fc8d 	bl	800e5c0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ca6:	4b6c      	ldr	r3, [pc, #432]	; (8003e58 <MX_GPIO_Init+0x1c8>)
 8003ca8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003caa:	4b6b      	ldr	r3, [pc, #428]	; (8003e58 <MX_GPIO_Init+0x1c8>)
 8003cac:	2104      	movs	r1, #4
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	635a      	str	r2, [r3, #52]	; 0x34
 8003cb2:	4b69      	ldr	r3, [pc, #420]	; (8003e58 <MX_GPIO_Init+0x1c8>)
 8003cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb6:	2204      	movs	r2, #4
 8003cb8:	4013      	ands	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]
 8003cbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003cbe:	4b66      	ldr	r3, [pc, #408]	; (8003e58 <MX_GPIO_Init+0x1c8>)
 8003cc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cc2:	4b65      	ldr	r3, [pc, #404]	; (8003e58 <MX_GPIO_Init+0x1c8>)
 8003cc4:	2120      	movs	r1, #32
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	635a      	str	r2, [r3, #52]	; 0x34
 8003cca:	4b63      	ldr	r3, [pc, #396]	; (8003e58 <MX_GPIO_Init+0x1c8>)
 8003ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cce:	2220      	movs	r2, #32
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	60fb      	str	r3, [r7, #12]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cd6:	4b60      	ldr	r3, [pc, #384]	; (8003e58 <MX_GPIO_Init+0x1c8>)
 8003cd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cda:	4b5f      	ldr	r3, [pc, #380]	; (8003e58 <MX_GPIO_Init+0x1c8>)
 8003cdc:	2101      	movs	r1, #1
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	635a      	str	r2, [r3, #52]	; 0x34
 8003ce2:	4b5d      	ldr	r3, [pc, #372]	; (8003e58 <MX_GPIO_Init+0x1c8>)
 8003ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	4013      	ands	r3, r2
 8003cea:	60bb      	str	r3, [r7, #8]
 8003cec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cee:	4b5a      	ldr	r3, [pc, #360]	; (8003e58 <MX_GPIO_Init+0x1c8>)
 8003cf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cf2:	4b59      	ldr	r3, [pc, #356]	; (8003e58 <MX_GPIO_Init+0x1c8>)
 8003cf4:	2102      	movs	r1, #2
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	635a      	str	r2, [r3, #52]	; 0x34
 8003cfa:	4b57      	ldr	r3, [pc, #348]	; (8003e58 <MX_GPIO_Init+0x1c8>)
 8003cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cfe:	2202      	movs	r2, #2
 8003d00:	4013      	ands	r3, r2
 8003d02:	607b      	str	r3, [r7, #4]
 8003d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d06:	4b54      	ldr	r3, [pc, #336]	; (8003e58 <MX_GPIO_Init+0x1c8>)
 8003d08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d0a:	4b53      	ldr	r3, [pc, #332]	; (8003e58 <MX_GPIO_Init+0x1c8>)
 8003d0c:	2108      	movs	r1, #8
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	635a      	str	r2, [r3, #52]	; 0x34
 8003d12:	4b51      	ldr	r3, [pc, #324]	; (8003e58 <MX_GPIO_Init+0x1c8>)
 8003d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d16:	2208      	movs	r2, #8
 8003d18:	4013      	ands	r3, r2
 8003d1a:	603b      	str	r3, [r7, #0]
 8003d1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED4_Pin|LED3_Pin|BLNRG_RST_Pin|RST_Pin
 8003d1e:	494f      	ldr	r1, [pc, #316]	; (8003e5c <MX_GPIO_Init+0x1cc>)
 8003d20:	4b4f      	ldr	r3, [pc, #316]	; (8003e60 <MX_GPIO_Init+0x1d0>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	0018      	movs	r0, r3
 8003d26:	f002 fc38 	bl	800659a <HAL_GPIO_WritePin>
                          |LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CS_Pin|PHB_Pin|REF_Pin|EN_IHM_Pin, GPIO_PIN_RESET);
 8003d2a:	494e      	ldr	r1, [pc, #312]	; (8003e64 <MX_GPIO_Init+0x1d4>)
 8003d2c:	23a0      	movs	r3, #160	; 0xa0
 8003d2e:	05db      	lsls	r3, r3, #23
 8003d30:	2200      	movs	r2, #0
 8003d32:	0018      	movs	r0, r3
 8003d34:	f002 fc31 	bl	800659a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PHA_GPIO_Port, PHA_Pin, GPIO_PIN_RESET);
 8003d38:	2380      	movs	r3, #128	; 0x80
 8003d3a:	01db      	lsls	r3, r3, #7
 8003d3c:	484a      	ldr	r0, [pc, #296]	; (8003e68 <MX_GPIO_Init+0x1d8>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	0019      	movs	r1, r3
 8003d42:	f002 fc2a 	bl	800659a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 8003d46:	4b49      	ldr	r3, [pc, #292]	; (8003e6c <MX_GPIO_Init+0x1dc>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	2104      	movs	r1, #4
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	f002 fc24 	bl	800659a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED4_Pin LED3_Pin BLNRG_RST_Pin RST_Pin
                           LED2_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|BLNRG_RST_Pin|RST_Pin
 8003d52:	193b      	adds	r3, r7, r4
 8003d54:	4a41      	ldr	r2, [pc, #260]	; (8003e5c <MX_GPIO_Init+0x1cc>)
 8003d56:	601a      	str	r2, [r3, #0]
                          |LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d58:	193b      	adds	r3, r7, r4
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d5e:	193b      	adds	r3, r7, r4
 8003d60:	2200      	movs	r2, #0
 8003d62:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d64:	193b      	adds	r3, r7, r4
 8003d66:	2200      	movs	r2, #0
 8003d68:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d6a:	193b      	adds	r3, r7, r4
 8003d6c:	4a3c      	ldr	r2, [pc, #240]	; (8003e60 <MX_GPIO_Init+0x1d0>)
 8003d6e:	0019      	movs	r1, r3
 8003d70:	0010      	movs	r0, r2
 8003d72:	f002 f9c1 	bl	80060f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_ENCODER1_Pin INT_ENCODER2_Pin */
  GPIO_InitStruct.Pin = INT_ENCODER1_Pin|INT_ENCODER2_Pin;
 8003d76:	0021      	movs	r1, r4
 8003d78:	187b      	adds	r3, r7, r1
 8003d7a:	2206      	movs	r2, #6
 8003d7c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003d7e:	187b      	adds	r3, r7, r1
 8003d80:	2288      	movs	r2, #136	; 0x88
 8003d82:	0352      	lsls	r2, r2, #13
 8003d84:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d86:	000c      	movs	r4, r1
 8003d88:	193b      	adds	r3, r7, r4
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d8e:	193b      	adds	r3, r7, r4
 8003d90:	4a33      	ldr	r2, [pc, #204]	; (8003e60 <MX_GPIO_Init+0x1d0>)
 8003d92:	0019      	movs	r1, r3
 8003d94:	0010      	movs	r0, r2
 8003d96:	f002 f9af 	bl	80060f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_BNRG_EXTI_Pin */
  GPIO_InitStruct.Pin = SPI_BNRG_EXTI_Pin;
 8003d9a:	193b      	adds	r3, r7, r4
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003da0:	193b      	adds	r3, r7, r4
 8003da2:	2288      	movs	r2, #136	; 0x88
 8003da4:	0352      	lsls	r2, r2, #13
 8003da6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da8:	193b      	adds	r3, r7, r4
 8003daa:	2200      	movs	r2, #0
 8003dac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SPI_BNRG_EXTI_GPIO_Port, &GPIO_InitStruct);
 8003dae:	193a      	adds	r2, r7, r4
 8003db0:	23a0      	movs	r3, #160	; 0xa0
 8003db2:	05db      	lsls	r3, r3, #23
 8003db4:	0011      	movs	r1, r2
 8003db6:	0018      	movs	r0, r3
 8003db8:	f002 f99e 	bl	80060f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CS_Pin PHB_Pin REF_Pin EN_IHM_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin|PHB_Pin|REF_Pin|EN_IHM_Pin;
 8003dbc:	193b      	adds	r3, r7, r4
 8003dbe:	4a29      	ldr	r2, [pc, #164]	; (8003e64 <MX_GPIO_Init+0x1d4>)
 8003dc0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dc2:	193b      	adds	r3, r7, r4
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dc8:	193b      	adds	r3, r7, r4
 8003dca:	2200      	movs	r2, #0
 8003dcc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dce:	193b      	adds	r3, r7, r4
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dd4:	193a      	adds	r2, r7, r4
 8003dd6:	23a0      	movs	r3, #160	; 0xa0
 8003dd8:	05db      	lsls	r3, r3, #23
 8003dda:	0011      	movs	r1, r2
 8003ddc:	0018      	movs	r0, r3
 8003dde:	f002 f98b 	bl	80060f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PHA_Pin */
  GPIO_InitStruct.Pin = PHA_Pin;
 8003de2:	0021      	movs	r1, r4
 8003de4:	187b      	adds	r3, r7, r1
 8003de6:	2280      	movs	r2, #128	; 0x80
 8003de8:	01d2      	lsls	r2, r2, #7
 8003dea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dec:	000c      	movs	r4, r1
 8003dee:	193b      	adds	r3, r7, r4
 8003df0:	2201      	movs	r2, #1
 8003df2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df4:	193b      	adds	r3, r7, r4
 8003df6:	2200      	movs	r2, #0
 8003df8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dfa:	193b      	adds	r3, r7, r4
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(PHA_GPIO_Port, &GPIO_InitStruct);
 8003e00:	193b      	adds	r3, r7, r4
 8003e02:	4a19      	ldr	r2, [pc, #100]	; (8003e68 <MX_GPIO_Init+0x1d8>)
 8003e04:	0019      	movs	r1, r3
 8003e06:	0010      	movs	r0, r2
 8003e08:	f002 f976 	bl	80060f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED5_Pin */
  GPIO_InitStruct.Pin = LED5_Pin;
 8003e0c:	193b      	adds	r3, r7, r4
 8003e0e:	2204      	movs	r2, #4
 8003e10:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e12:	193b      	adds	r3, r7, r4
 8003e14:	2201      	movs	r2, #1
 8003e16:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e18:	193b      	adds	r3, r7, r4
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e1e:	193b      	adds	r3, r7, r4
 8003e20:	2200      	movs	r2, #0
 8003e22:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED5_GPIO_Port, &GPIO_InitStruct);
 8003e24:	193b      	adds	r3, r7, r4
 8003e26:	4a11      	ldr	r2, [pc, #68]	; (8003e6c <MX_GPIO_Init+0x1dc>)
 8003e28:	0019      	movs	r1, r3
 8003e2a:	0010      	movs	r0, r2
 8003e2c:	f002 f964 	bl	80060f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENCODER1_DATA_Pin ENCODER2_DATA_Pin */
  GPIO_InitStruct.Pin = ENCODER1_DATA_Pin|ENCODER2_DATA_Pin;
 8003e30:	0021      	movs	r1, r4
 8003e32:	187b      	adds	r3, r7, r1
 8003e34:	2248      	movs	r2, #72	; 0x48
 8003e36:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e38:	187b      	adds	r3, r7, r1
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e3e:	187b      	adds	r3, r7, r1
 8003e40:	2200      	movs	r2, #0
 8003e42:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e44:	187b      	adds	r3, r7, r1
 8003e46:	4a08      	ldr	r2, [pc, #32]	; (8003e68 <MX_GPIO_Init+0x1d8>)
 8003e48:	0019      	movs	r1, r3
 8003e4a:	0010      	movs	r0, r2
 8003e4c:	f002 f954 	bl	80060f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003e50:	46c0      	nop			; (mov r8, r8)
 8003e52:	46bd      	mov	sp, r7
 8003e54:	b00b      	add	sp, #44	; 0x2c
 8003e56:	bd90      	pop	{r4, r7, pc}
 8003e58:	40021000 	.word	0x40021000
 8003e5c:	00001c90 	.word	0x00001c90
 8003e60:	50000800 	.word	0x50000800
 8003e64:	00000702 	.word	0x00000702
 8003e68:	50000400 	.word	0x50000400
 8003e6c:	50000c00 	.word	0x50000c00

08003e70 <enable_dualbridge>:
	   state=!state;
	    previousMillis = currentMillis;
	  }
}
void enable_dualbridge(void)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	af00      	add	r7, sp, #0
  TIM3->CCR1 = 0; //pwma
 8003e74:	4b09      	ldr	r3, [pc, #36]	; (8003e9c <enable_dualbridge+0x2c>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //timer 15 channel 1
 8003e7a:	4b09      	ldr	r3, [pc, #36]	; (8003ea0 <enable_dualbridge+0x30>)
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	0018      	movs	r0, r3
 8003e80:	f003 ff18 	bl	8007cb4 <HAL_TIM_PWM_Start>
  TIM3->CCR2 = 0; //pwmb
 8003e84:	4b05      	ldr	r3, [pc, #20]	; (8003e9c <enable_dualbridge+0x2c>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);//timer 15 channel 2
 8003e8a:	4b05      	ldr	r3, [pc, #20]	; (8003ea0 <enable_dualbridge+0x30>)
 8003e8c:	2104      	movs	r1, #4
 8003e8e:	0018      	movs	r0, r3
 8003e90:	f003 ff10 	bl	8007cb4 <HAL_TIM_PWM_Start>
}
 8003e94:	46c0      	nop			; (mov r8, r8)
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	46c0      	nop			; (mov r8, r8)
 8003e9c:	40000400 	.word	0x40000400
 8003ea0:	2000049c 	.word	0x2000049c

08003ea4 <ihm12a1_stspin240_init>:
void ihm12a1_stspin240_init(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET); //sys_rst high
 8003ea8:	4b13      	ldr	r3, [pc, #76]	; (8003ef8 <ihm12a1_stspin240_init+0x54>)
 8003eaa:	2201      	movs	r2, #1
 8003eac:	2180      	movs	r1, #128	; 0x80
 8003eae:	0018      	movs	r0, r3
 8003eb0:	f002 fb73 	bl	800659a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);   //dir2 high
 8003eb4:	2380      	movs	r3, #128	; 0x80
 8003eb6:	0059      	lsls	r1, r3, #1
 8003eb8:	23a0      	movs	r3, #160	; 0xa0
 8003eba:	05db      	lsls	r3, r3, #23
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	0018      	movs	r0, r3
 8003ec0:	f002 fb6b 	bl	800659a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);  //dir1 high
 8003ec4:	2380      	movs	r3, #128	; 0x80
 8003ec6:	01db      	lsls	r3, r3, #7
 8003ec8:	480c      	ldr	r0, [pc, #48]	; (8003efc <ihm12a1_stspin240_init+0x58>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	0019      	movs	r1, r3
 8003ece:	f002 fb64 	bl	800659a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);   //ref high = 100% Duty cycle
 8003ed2:	2380      	movs	r3, #128	; 0x80
 8003ed4:	0099      	lsls	r1, r3, #2
 8003ed6:	23a0      	movs	r3, #160	; 0xa0
 8003ed8:	05db      	lsls	r3, r3, #23
 8003eda:	2201      	movs	r2, #1
 8003edc:	0018      	movs	r0, r3
 8003ede:	f002 fb5c 	bl	800659a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8003ee2:	2380      	movs	r3, #128	; 0x80
 8003ee4:	00d9      	lsls	r1, r3, #3
 8003ee6:	23a0      	movs	r3, #160	; 0xa0
 8003ee8:	05db      	lsls	r3, r3, #23
 8003eea:	2201      	movs	r2, #1
 8003eec:	0018      	movs	r0, r3
 8003eee:	f002 fb54 	bl	800659a <HAL_GPIO_WritePin>
//  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
//  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
}
 8003ef2:	46c0      	nop			; (mov r8, r8)
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	50000800 	.word	0x50000800
 8003efc:	50000400 	.word	0x50000400

08003f00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003f04:	b672      	cpsid	i
}
 8003f06:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003f08:	e7fe      	b.n	8003f08 <Error_Handler+0x8>
	...

08003f0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f12:	4b11      	ldr	r3, [pc, #68]	; (8003f58 <HAL_MspInit+0x4c>)
 8003f14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f16:	4b10      	ldr	r3, [pc, #64]	; (8003f58 <HAL_MspInit+0x4c>)
 8003f18:	2101      	movs	r1, #1
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	641a      	str	r2, [r3, #64]	; 0x40
 8003f1e:	4b0e      	ldr	r3, [pc, #56]	; (8003f58 <HAL_MspInit+0x4c>)
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	2201      	movs	r2, #1
 8003f24:	4013      	ands	r3, r2
 8003f26:	607b      	str	r3, [r7, #4]
 8003f28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f2a:	4b0b      	ldr	r3, [pc, #44]	; (8003f58 <HAL_MspInit+0x4c>)
 8003f2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f2e:	4b0a      	ldr	r3, [pc, #40]	; (8003f58 <HAL_MspInit+0x4c>)
 8003f30:	2180      	movs	r1, #128	; 0x80
 8003f32:	0549      	lsls	r1, r1, #21
 8003f34:	430a      	orrs	r2, r1
 8003f36:	63da      	str	r2, [r3, #60]	; 0x3c
 8003f38:	4b07      	ldr	r3, [pc, #28]	; (8003f58 <HAL_MspInit+0x4c>)
 8003f3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f3c:	2380      	movs	r3, #128	; 0x80
 8003f3e:	055b      	lsls	r3, r3, #21
 8003f40:	4013      	ands	r3, r2
 8003f42:	603b      	str	r3, [r7, #0]
 8003f44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8003f46:	23c0      	movs	r3, #192	; 0xc0
 8003f48:	00db      	lsls	r3, r3, #3
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	f000 fe54 	bl	8004bf8 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f50:	46c0      	nop			; (mov r8, r8)
 8003f52:	46bd      	mov	sp, r7
 8003f54:	b002      	add	sp, #8
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	40021000 	.word	0x40021000

08003f5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003f5c:	b590      	push	{r4, r7, lr}
 8003f5e:	b08b      	sub	sp, #44	; 0x2c
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f64:	2414      	movs	r4, #20
 8003f66:	193b      	adds	r3, r7, r4
 8003f68:	0018      	movs	r0, r3
 8003f6a:	2314      	movs	r3, #20
 8003f6c:	001a      	movs	r2, r3
 8003f6e:	2100      	movs	r1, #0
 8003f70:	f00a fb26 	bl	800e5c0 <memset>
  if(hadc->Instance==ADC1)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a2d      	ldr	r2, [pc, #180]	; (8004030 <HAL_ADC_MspInit+0xd4>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d153      	bne.n	8004026 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003f7e:	4b2d      	ldr	r3, [pc, #180]	; (8004034 <HAL_ADC_MspInit+0xd8>)
 8003f80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f82:	4b2c      	ldr	r3, [pc, #176]	; (8004034 <HAL_ADC_MspInit+0xd8>)
 8003f84:	2180      	movs	r1, #128	; 0x80
 8003f86:	0349      	lsls	r1, r1, #13
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	641a      	str	r2, [r3, #64]	; 0x40
 8003f8c:	4b29      	ldr	r3, [pc, #164]	; (8004034 <HAL_ADC_MspInit+0xd8>)
 8003f8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f90:	2380      	movs	r3, #128	; 0x80
 8003f92:	035b      	lsls	r3, r3, #13
 8003f94:	4013      	ands	r3, r2
 8003f96:	613b      	str	r3, [r7, #16]
 8003f98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f9a:	4b26      	ldr	r3, [pc, #152]	; (8004034 <HAL_ADC_MspInit+0xd8>)
 8003f9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f9e:	4b25      	ldr	r3, [pc, #148]	; (8004034 <HAL_ADC_MspInit+0xd8>)
 8003fa0:	2102      	movs	r1, #2
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	635a      	str	r2, [r3, #52]	; 0x34
 8003fa6:	4b23      	ldr	r3, [pc, #140]	; (8004034 <HAL_ADC_MspInit+0xd8>)
 8003fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003faa:	2202      	movs	r2, #2
 8003fac:	4013      	ands	r3, r2
 8003fae:	60fb      	str	r3, [r7, #12]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB2     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = ADC_BATTERY_INDICATOR_Pin;
 8003fb2:	193b      	adds	r3, r7, r4
 8003fb4:	2204      	movs	r2, #4
 8003fb6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003fb8:	193b      	adds	r3, r7, r4
 8003fba:	2203      	movs	r2, #3
 8003fbc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fbe:	193b      	adds	r3, r7, r4
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(ADC_BATTERY_INDICATOR_GPIO_Port, &GPIO_InitStruct);
 8003fc4:	193b      	adds	r3, r7, r4
 8003fc6:	4a1c      	ldr	r2, [pc, #112]	; (8004038 <HAL_ADC_MspInit+0xdc>)
 8003fc8:	0019      	movs	r1, r3
 8003fca:	0010      	movs	r0, r2
 8003fcc:	f002 f894 	bl	80060f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003fd0:	4b1a      	ldr	r3, [pc, #104]	; (800403c <HAL_ADC_MspInit+0xe0>)
 8003fd2:	4a1b      	ldr	r2, [pc, #108]	; (8004040 <HAL_ADC_MspInit+0xe4>)
 8003fd4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003fd6:	4b19      	ldr	r3, [pc, #100]	; (800403c <HAL_ADC_MspInit+0xe0>)
 8003fd8:	2205      	movs	r2, #5
 8003fda:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003fdc:	4b17      	ldr	r3, [pc, #92]	; (800403c <HAL_ADC_MspInit+0xe0>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fe2:	4b16      	ldr	r3, [pc, #88]	; (800403c <HAL_ADC_MspInit+0xe0>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003fe8:	4b14      	ldr	r3, [pc, #80]	; (800403c <HAL_ADC_MspInit+0xe0>)
 8003fea:	2280      	movs	r2, #128	; 0x80
 8003fec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003fee:	4b13      	ldr	r3, [pc, #76]	; (800403c <HAL_ADC_MspInit+0xe0>)
 8003ff0:	2280      	movs	r2, #128	; 0x80
 8003ff2:	0092      	lsls	r2, r2, #2
 8003ff4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003ff6:	4b11      	ldr	r3, [pc, #68]	; (800403c <HAL_ADC_MspInit+0xe0>)
 8003ff8:	2280      	movs	r2, #128	; 0x80
 8003ffa:	0112      	lsls	r2, r2, #4
 8003ffc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003ffe:	4b0f      	ldr	r3, [pc, #60]	; (800403c <HAL_ADC_MspInit+0xe0>)
 8004000:	2220      	movs	r2, #32
 8004002:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004004:	4b0d      	ldr	r3, [pc, #52]	; (800403c <HAL_ADC_MspInit+0xe0>)
 8004006:	2200      	movs	r2, #0
 8004008:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800400a:	4b0c      	ldr	r3, [pc, #48]	; (800403c <HAL_ADC_MspInit+0xe0>)
 800400c:	0018      	movs	r0, r3
 800400e:	f001 fd93 	bl	8005b38 <HAL_DMA_Init>
 8004012:	1e03      	subs	r3, r0, #0
 8004014:	d001      	beq.n	800401a <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8004016:	f7ff ff73 	bl	8003f00 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a07      	ldr	r2, [pc, #28]	; (800403c <HAL_ADC_MspInit+0xe0>)
 800401e:	651a      	str	r2, [r3, #80]	; 0x50
 8004020:	4b06      	ldr	r3, [pc, #24]	; (800403c <HAL_ADC_MspInit+0xe0>)
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004026:	46c0      	nop			; (mov r8, r8)
 8004028:	46bd      	mov	sp, r7
 800402a:	b00b      	add	sp, #44	; 0x2c
 800402c:	bd90      	pop	{r4, r7, pc}
 800402e:	46c0      	nop			; (mov r8, r8)
 8004030:	40012400 	.word	0x40012400
 8004034:	40021000 	.word	0x40021000
 8004038:	50000400 	.word	0x50000400
 800403c:	20000440 	.word	0x20000440
 8004040:	40020008 	.word	0x40020008

08004044 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a09      	ldr	r2, [pc, #36]	; (8004078 <HAL_TIM_Base_MspInit+0x34>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d10b      	bne.n	800406e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004056:	4b09      	ldr	r3, [pc, #36]	; (800407c <HAL_TIM_Base_MspInit+0x38>)
 8004058:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800405a:	4b08      	ldr	r3, [pc, #32]	; (800407c <HAL_TIM_Base_MspInit+0x38>)
 800405c:	2102      	movs	r1, #2
 800405e:	430a      	orrs	r2, r1
 8004060:	63da      	str	r2, [r3, #60]	; 0x3c
 8004062:	4b06      	ldr	r3, [pc, #24]	; (800407c <HAL_TIM_Base_MspInit+0x38>)
 8004064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004066:	2202      	movs	r2, #2
 8004068:	4013      	ands	r3, r2
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800406e:	46c0      	nop			; (mov r8, r8)
 8004070:	46bd      	mov	sp, r7
 8004072:	b004      	add	sp, #16
 8004074:	bd80      	pop	{r7, pc}
 8004076:	46c0      	nop			; (mov r8, r8)
 8004078:	40000400 	.word	0x40000400
 800407c:	40021000 	.word	0x40021000

08004080 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004080:	b590      	push	{r4, r7, lr}
 8004082:	b089      	sub	sp, #36	; 0x24
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004088:	240c      	movs	r4, #12
 800408a:	193b      	adds	r3, r7, r4
 800408c:	0018      	movs	r0, r3
 800408e:	2314      	movs	r3, #20
 8004090:	001a      	movs	r2, r3
 8004092:	2100      	movs	r1, #0
 8004094:	f00a fa94 	bl	800e5c0 <memset>
  if(htim->Instance==TIM3)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a14      	ldr	r2, [pc, #80]	; (80040f0 <HAL_TIM_MspPostInit+0x70>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d121      	bne.n	80040e6 <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040a2:	4b14      	ldr	r3, [pc, #80]	; (80040f4 <HAL_TIM_MspPostInit+0x74>)
 80040a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040a6:	4b13      	ldr	r3, [pc, #76]	; (80040f4 <HAL_TIM_MspPostInit+0x74>)
 80040a8:	2102      	movs	r1, #2
 80040aa:	430a      	orrs	r2, r1
 80040ac:	635a      	str	r2, [r3, #52]	; 0x34
 80040ae:	4b11      	ldr	r3, [pc, #68]	; (80040f4 <HAL_TIM_MspPostInit+0x74>)
 80040b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040b2:	2202      	movs	r2, #2
 80040b4:	4013      	ands	r3, r2
 80040b6:	60bb      	str	r3, [r7, #8]
 80040b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = IHM_PWMA_Pin|IHM_PWMB_Pin;
 80040ba:	0021      	movs	r1, r4
 80040bc:	187b      	adds	r3, r7, r1
 80040be:	2230      	movs	r2, #48	; 0x30
 80040c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040c2:	187b      	adds	r3, r7, r1
 80040c4:	2202      	movs	r2, #2
 80040c6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c8:	187b      	adds	r3, r7, r1
 80040ca:	2200      	movs	r2, #0
 80040cc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040ce:	187b      	adds	r3, r7, r1
 80040d0:	2200      	movs	r2, #0
 80040d2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80040d4:	187b      	adds	r3, r7, r1
 80040d6:	2201      	movs	r2, #1
 80040d8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040da:	187b      	adds	r3, r7, r1
 80040dc:	4a06      	ldr	r2, [pc, #24]	; (80040f8 <HAL_TIM_MspPostInit+0x78>)
 80040de:	0019      	movs	r1, r3
 80040e0:	0010      	movs	r0, r2
 80040e2:	f002 f809 	bl	80060f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80040e6:	46c0      	nop			; (mov r8, r8)
 80040e8:	46bd      	mov	sp, r7
 80040ea:	b009      	add	sp, #36	; 0x24
 80040ec:	bd90      	pop	{r4, r7, pc}
 80040ee:	46c0      	nop			; (mov r8, r8)
 80040f0:	40000400 	.word	0x40000400
 80040f4:	40021000 	.word	0x40021000
 80040f8:	50000400 	.word	0x50000400

080040fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004100:	e7fe      	b.n	8004100 <NMI_Handler+0x4>

08004102 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004106:	e7fe      	b.n	8004106 <HardFault_Handler+0x4>

08004108 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800410c:	46c0      	nop			; (mov r8, r8)
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004116:	46c0      	nop			; (mov r8, r8)
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004120:	f000 fd2a 	bl	8004b78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004124:	46c0      	nop			; (mov r8, r8)
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
	...

0800412c <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8004130:	4b0f      	ldr	r3, [pc, #60]	; (8004170 <EXTI0_1_IRQHandler+0x44>)
 8004132:	0018      	movs	r0, r3
 8004134:	f001 ff96 	bl	8006064 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INT_ENCODER1_Pin);
 8004138:	2002      	movs	r0, #2
 800413a:	f002 fa67 	bl	800660c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */
  /* EXTI line interrupt detected */
   if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_1) != 0x00u)
 800413e:	4b0d      	ldr	r3, [pc, #52]	; (8004174 <EXTI0_1_IRQHandler+0x48>)
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	2202      	movs	r2, #2
 8004144:	4013      	ands	r3, r2
 8004146:	d104      	bne.n	8004152 <EXTI0_1_IRQHandler+0x26>
 8004148:	4b0a      	ldr	r3, [pc, #40]	; (8004174 <EXTI0_1_IRQHandler+0x48>)
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	2202      	movs	r2, #2
 800414e:	4013      	ands	r3, r2
 8004150:	d001      	beq.n	8004156 <EXTI0_1_IRQHandler+0x2a>
 8004152:	2301      	movs	r3, #1
 8004154:	e000      	b.n	8004158 <EXTI0_1_IRQHandler+0x2c>
 8004156:	2300      	movs	r3, #0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d005      	beq.n	8004168 <EXTI0_1_IRQHandler+0x3c>
   {
     __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_1); // Clears The Interrupt Flag
 800415c:	4b05      	ldr	r3, [pc, #20]	; (8004174 <EXTI0_1_IRQHandler+0x48>)
 800415e:	2202      	movs	r2, #2
 8004160:	60da      	str	r2, [r3, #12]
 8004162:	4b04      	ldr	r3, [pc, #16]	; (8004174 <EXTI0_1_IRQHandler+0x48>)
 8004164:	2202      	movs	r2, #2
 8004166:	611a      	str	r2, [r3, #16]
//     HAL_GPIO_EXTI_Rising_Callback(GPIO_PIN_1);   // Calls The ISR Handler CallBack Function
   }
  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8004168:	46c0      	nop			; (mov r8, r8)
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	46c0      	nop			; (mov r8, r8)
 8004170:	200002cc 	.word	0x200002cc
 8004174:	40021800 	.word	0x40021800

08004178 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_ENCODER2_Pin);
 800417c:	2004      	movs	r0, #4
 800417e:	f002 fa45 	bl	800660c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8004182:	46c0      	nop			; (mov r8, r8)
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 800418c:	4b03      	ldr	r3, [pc, #12]	; (800419c <EXTI4_15_IRQHandler+0x14>)
 800418e:	0018      	movs	r0, r3
 8004190:	f001 ff68 	bl	8006064 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8004194:	46c0      	nop			; (mov r8, r8)
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	46c0      	nop			; (mov r8, r8)
 800419c:	20000028 	.word	0x20000028

080041a0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80041a4:	4b03      	ldr	r3, [pc, #12]	; (80041b4 <DMA1_Channel1_IRQHandler+0x14>)
 80041a6:	0018      	movs	r0, r3
 80041a8:	f001 fdd6 	bl	8005d58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80041ac:	46c0      	nop			; (mov r8, r8)
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	46c0      	nop			; (mov r8, r8)
 80041b4:	20000440 	.word	0x20000440

080041b8 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80041be:	2300      	movs	r3, #0
 80041c0:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 80041c2:	4b12      	ldr	r3, [pc, #72]	; (800420c <BSP_SPI1_Init+0x54>)
 80041c4:	4a12      	ldr	r2, [pc, #72]	; (8004210 <BSP_SPI1_Init+0x58>)
 80041c6:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 80041c8:	4b12      	ldr	r3, [pc, #72]	; (8004214 <BSP_SPI1_Init+0x5c>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	1c59      	adds	r1, r3, #1
 80041ce:	4a11      	ldr	r2, [pc, #68]	; (8004214 <BSP_SPI1_Init+0x5c>)
 80041d0:	6011      	str	r1, [r2, #0]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d115      	bne.n	8004202 <BSP_SPI1_Init+0x4a>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 80041d6:	4b0d      	ldr	r3, [pc, #52]	; (800420c <BSP_SPI1_Init+0x54>)
 80041d8:	0018      	movs	r0, r3
 80041da:	f003 fb31 	bl	8007840 <HAL_SPI_GetState>
 80041de:	1e03      	subs	r3, r0, #0
 80041e0:	d10f      	bne.n	8004202 <BSP_SPI1_Init+0x4a>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 80041e2:	4b0a      	ldr	r3, [pc, #40]	; (800420c <BSP_SPI1_Init+0x54>)
 80041e4:	0018      	movs	r0, r3
 80041e6:	f000 f887 	bl	80042f8 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d108      	bne.n	8004202 <BSP_SPI1_Init+0x4a>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 80041f0:	4b06      	ldr	r3, [pc, #24]	; (800420c <BSP_SPI1_Init+0x54>)
 80041f2:	0018      	movs	r0, r3
 80041f4:	f000 f838 	bl	8004268 <MX_SPI1_Init>
 80041f8:	1e03      	subs	r3, r0, #0
 80041fa:	d002      	beq.n	8004202 <BSP_SPI1_Init+0x4a>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 80041fc:	2308      	movs	r3, #8
 80041fe:	425b      	negs	r3, r3
 8004200:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8004202:	687b      	ldr	r3, [r7, #4]
}
 8004204:	0018      	movs	r0, r3
 8004206:	46bd      	mov	sp, r7
 8004208:	b002      	add	sp, #8
 800420a:	bd80      	pop	{r7, pc}
 800420c:	200004ec 	.word	0x200004ec
 8004210:	40013000 	.word	0x40013000
 8004214:	20000550 	.word	0x20000550

08004218 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8004218:	b590      	push	{r4, r7, lr}
 800421a:	b089      	sub	sp, #36	; 0x24
 800421c:	af02      	add	r7, sp, #8
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	1dbb      	adds	r3, r7, #6
 8004224:	801a      	strh	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 8004226:	2300      	movs	r3, #0
 8004228:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 800422a:	1dbb      	adds	r3, r7, #6
 800422c:	881c      	ldrh	r4, [r3, #0]
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	68f9      	ldr	r1, [r7, #12]
 8004232:	4808      	ldr	r0, [pc, #32]	; (8004254 <BSP_SPI1_SendRecv+0x3c>)
 8004234:	2380      	movs	r3, #128	; 0x80
 8004236:	015b      	lsls	r3, r3, #5
 8004238:	9300      	str	r3, [sp, #0]
 800423a:	0023      	movs	r3, r4
 800423c:	f003 f91e 	bl	800747c <HAL_SPI_TransmitReceive>
 8004240:	1e03      	subs	r3, r0, #0
 8004242:	d002      	beq.n	800424a <BSP_SPI1_SendRecv+0x32>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8004244:	2306      	movs	r3, #6
 8004246:	425b      	negs	r3, r3
 8004248:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800424a:	697b      	ldr	r3, [r7, #20]
}
 800424c:	0018      	movs	r0, r3
 800424e:	46bd      	mov	sp, r7
 8004250:	b007      	add	sp, #28
 8004252:	bd90      	pop	{r4, r7, pc}
 8004254:	200004ec 	.word	0x200004ec

08004258 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800425c:	f000 fc9e 	bl	8004b9c <HAL_GetTick>
 8004260:	0003      	movs	r3, r0
}
 8004262:	0018      	movs	r0, r3
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8004268:	b590      	push	{r4, r7, lr}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004270:	240f      	movs	r4, #15
 8004272:	193b      	adds	r3, r7, r4
 8004274:	2200      	movs	r2, #0
 8004276:	701a      	strb	r2, [r3, #0]

  hspi->Instance = SPI1;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a1e      	ldr	r2, [pc, #120]	; (80042f4 <MX_SPI1_Init+0x8c>)
 800427c:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2282      	movs	r2, #130	; 0x82
 8004282:	0052      	lsls	r2, r2, #1
 8004284:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	22e0      	movs	r2, #224	; 0xe0
 8004290:	00d2      	lsls	r2, r2, #3
 8004292:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2201      	movs	r2, #1
 800429e:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2280      	movs	r2, #128	; 0x80
 80042a4:	0092      	lsls	r2, r2, #2
 80042a6:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2228      	movs	r2, #40	; 0x28
 80042ac:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2207      	movs	r2, #7
 80042c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	0018      	movs	r0, r3
 80042d6:	f003 f811 	bl	80072fc <HAL_SPI_Init>
 80042da:	1e03      	subs	r3, r0, #0
 80042dc:	d002      	beq.n	80042e4 <MX_SPI1_Init+0x7c>
  {
    ret = HAL_ERROR;
 80042de:	193b      	adds	r3, r7, r4
 80042e0:	2201      	movs	r2, #1
 80042e2:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80042e4:	230f      	movs	r3, #15
 80042e6:	18fb      	adds	r3, r7, r3
 80042e8:	781b      	ldrb	r3, [r3, #0]
}
 80042ea:	0018      	movs	r0, r3
 80042ec:	46bd      	mov	sp, r7
 80042ee:	b005      	add	sp, #20
 80042f0:	bd90      	pop	{r4, r7, pc}
 80042f2:	46c0      	nop			; (mov r8, r8)
 80042f4:	40013000 	.word	0x40013000

080042f8 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80042f8:	b590      	push	{r4, r7, lr}
 80042fa:	b08b      	sub	sp, #44	; 0x2c
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004300:	4b30      	ldr	r3, [pc, #192]	; (80043c4 <SPI1_MspInit+0xcc>)
 8004302:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004304:	4b2f      	ldr	r3, [pc, #188]	; (80043c4 <SPI1_MspInit+0xcc>)
 8004306:	2180      	movs	r1, #128	; 0x80
 8004308:	0149      	lsls	r1, r1, #5
 800430a:	430a      	orrs	r2, r1
 800430c:	641a      	str	r2, [r3, #64]	; 0x40
 800430e:	4b2d      	ldr	r3, [pc, #180]	; (80043c4 <SPI1_MspInit+0xcc>)
 8004310:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004312:	2380      	movs	r3, #128	; 0x80
 8004314:	015b      	lsls	r3, r3, #5
 8004316:	4013      	ands	r3, r2
 8004318:	613b      	str	r3, [r7, #16]
 800431a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800431c:	4b29      	ldr	r3, [pc, #164]	; (80043c4 <SPI1_MspInit+0xcc>)
 800431e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004320:	4b28      	ldr	r3, [pc, #160]	; (80043c4 <SPI1_MspInit+0xcc>)
 8004322:	2101      	movs	r1, #1
 8004324:	430a      	orrs	r2, r1
 8004326:	635a      	str	r2, [r3, #52]	; 0x34
 8004328:	4b26      	ldr	r3, [pc, #152]	; (80043c4 <SPI1_MspInit+0xcc>)
 800432a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800432c:	2201      	movs	r2, #1
 800432e:	4013      	ands	r3, r2
 8004330:	60fb      	str	r3, [r7, #12]
 8004332:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8004334:	2414      	movs	r4, #20
 8004336:	193b      	adds	r3, r7, r4
 8004338:	2220      	movs	r2, #32
 800433a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800433c:	193b      	adds	r3, r7, r4
 800433e:	2202      	movs	r2, #2
 8004340:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004342:	193b      	adds	r3, r7, r4
 8004344:	2200      	movs	r2, #0
 8004346:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004348:	193b      	adds	r3, r7, r4
 800434a:	2200      	movs	r2, #0
 800434c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 800434e:	193b      	adds	r3, r7, r4
 8004350:	2200      	movs	r2, #0
 8004352:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8004354:	193a      	adds	r2, r7, r4
 8004356:	23a0      	movs	r3, #160	; 0xa0
 8004358:	05db      	lsls	r3, r3, #23
 800435a:	0011      	movs	r1, r2
 800435c:	0018      	movs	r0, r3
 800435e:	f001 fecb 	bl	80060f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8004362:	193b      	adds	r3, r7, r4
 8004364:	2240      	movs	r2, #64	; 0x40
 8004366:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004368:	193b      	adds	r3, r7, r4
 800436a:	2202      	movs	r2, #2
 800436c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800436e:	193b      	adds	r3, r7, r4
 8004370:	2200      	movs	r2, #0
 8004372:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004374:	193b      	adds	r3, r7, r4
 8004376:	2200      	movs	r2, #0
 8004378:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 800437a:	193b      	adds	r3, r7, r4
 800437c:	2200      	movs	r2, #0
 800437e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8004380:	193a      	adds	r2, r7, r4
 8004382:	23a0      	movs	r3, #160	; 0xa0
 8004384:	05db      	lsls	r3, r3, #23
 8004386:	0011      	movs	r1, r2
 8004388:	0018      	movs	r0, r3
 800438a:	f001 feb5 	bl	80060f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 800438e:	0021      	movs	r1, r4
 8004390:	187b      	adds	r3, r7, r1
 8004392:	2280      	movs	r2, #128	; 0x80
 8004394:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004396:	187b      	adds	r3, r7, r1
 8004398:	2202      	movs	r2, #2
 800439a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800439c:	187b      	adds	r3, r7, r1
 800439e:	2200      	movs	r2, #0
 80043a0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043a2:	187b      	adds	r3, r7, r1
 80043a4:	2200      	movs	r2, #0
 80043a6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 80043a8:	187b      	adds	r3, r7, r1
 80043aa:	2200      	movs	r2, #0
 80043ac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80043ae:	187a      	adds	r2, r7, r1
 80043b0:	23a0      	movs	r3, #160	; 0xa0
 80043b2:	05db      	lsls	r3, r3, #23
 80043b4:	0011      	movs	r1, r2
 80043b6:	0018      	movs	r0, r3
 80043b8:	f001 fe9e 	bl	80060f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 80043bc:	46c0      	nop			; (mov r8, r8)
 80043be:	46bd      	mov	sp, r7
 80043c0:	b00b      	add	sp, #44	; 0x2c
 80043c2:	bd90      	pop	{r4, r7, pc}
 80043c4:	40021000 	.word	0x40021000

080043c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	af00      	add	r7, sp, #0
  return 1;
 80043cc:	2301      	movs	r3, #1
}
 80043ce:	0018      	movs	r0, r3
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <_kill>:

int _kill(int pid, int sig)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80043de:	f00a f949 	bl	800e674 <__errno>
 80043e2:	0003      	movs	r3, r0
 80043e4:	2216      	movs	r2, #22
 80043e6:	601a      	str	r2, [r3, #0]
  return -1;
 80043e8:	2301      	movs	r3, #1
 80043ea:	425b      	negs	r3, r3
}
 80043ec:	0018      	movs	r0, r3
 80043ee:	46bd      	mov	sp, r7
 80043f0:	b002      	add	sp, #8
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <_exit>:

void _exit (int status)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80043fc:	2301      	movs	r3, #1
 80043fe:	425a      	negs	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	0011      	movs	r1, r2
 8004404:	0018      	movs	r0, r3
 8004406:	f7ff ffe5 	bl	80043d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 800440a:	e7fe      	b.n	800440a <_exit+0x16>

0800440c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b086      	sub	sp, #24
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004418:	2300      	movs	r3, #0
 800441a:	617b      	str	r3, [r7, #20]
 800441c:	e00a      	b.n	8004434 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800441e:	e000      	b.n	8004422 <_read+0x16>
 8004420:	bf00      	nop
 8004422:	0001      	movs	r1, r0
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	1c5a      	adds	r2, r3, #1
 8004428:	60ba      	str	r2, [r7, #8]
 800442a:	b2ca      	uxtb	r2, r1
 800442c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	3301      	adds	r3, #1
 8004432:	617b      	str	r3, [r7, #20]
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	429a      	cmp	r2, r3
 800443a:	dbf0      	blt.n	800441e <_read+0x12>
  }

  return len;
 800443c:	687b      	ldr	r3, [r7, #4]
}
 800443e:	0018      	movs	r0, r3
 8004440:	46bd      	mov	sp, r7
 8004442:	b006      	add	sp, #24
 8004444:	bd80      	pop	{r7, pc}

08004446 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b086      	sub	sp, #24
 800444a:	af00      	add	r7, sp, #0
 800444c:	60f8      	str	r0, [r7, #12]
 800444e:	60b9      	str	r1, [r7, #8]
 8004450:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004452:	2300      	movs	r3, #0
 8004454:	617b      	str	r3, [r7, #20]
 8004456:	e009      	b.n	800446c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	1c5a      	adds	r2, r3, #1
 800445c:	60ba      	str	r2, [r7, #8]
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	0018      	movs	r0, r3
 8004462:	f000 faa1 	bl	80049a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	3301      	adds	r3, #1
 800446a:	617b      	str	r3, [r7, #20]
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	429a      	cmp	r2, r3
 8004472:	dbf1      	blt.n	8004458 <_write+0x12>
  }
  return len;
 8004474:	687b      	ldr	r3, [r7, #4]
}
 8004476:	0018      	movs	r0, r3
 8004478:	46bd      	mov	sp, r7
 800447a:	b006      	add	sp, #24
 800447c:	bd80      	pop	{r7, pc}

0800447e <_close>:

int _close(int file)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	b082      	sub	sp, #8
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004486:	2301      	movs	r3, #1
 8004488:	425b      	negs	r3, r3
}
 800448a:	0018      	movs	r0, r3
 800448c:	46bd      	mov	sp, r7
 800448e:	b002      	add	sp, #8
 8004490:	bd80      	pop	{r7, pc}

08004492 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b082      	sub	sp, #8
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
 800449a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	2280      	movs	r2, #128	; 0x80
 80044a0:	0192      	lsls	r2, r2, #6
 80044a2:	605a      	str	r2, [r3, #4]
  return 0;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	0018      	movs	r0, r3
 80044a8:	46bd      	mov	sp, r7
 80044aa:	b002      	add	sp, #8
 80044ac:	bd80      	pop	{r7, pc}

080044ae <_isatty>:

int _isatty(int file)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b082      	sub	sp, #8
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80044b6:	2301      	movs	r3, #1
}
 80044b8:	0018      	movs	r0, r3
 80044ba:	46bd      	mov	sp, r7
 80044bc:	b002      	add	sp, #8
 80044be:	bd80      	pop	{r7, pc}

080044c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	0018      	movs	r0, r3
 80044d0:	46bd      	mov	sp, r7
 80044d2:	b004      	add	sp, #16
 80044d4:	bd80      	pop	{r7, pc}
	...

080044d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80044e0:	4a14      	ldr	r2, [pc, #80]	; (8004534 <_sbrk+0x5c>)
 80044e2:	4b15      	ldr	r3, [pc, #84]	; (8004538 <_sbrk+0x60>)
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80044ec:	4b13      	ldr	r3, [pc, #76]	; (800453c <_sbrk+0x64>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d102      	bne.n	80044fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80044f4:	4b11      	ldr	r3, [pc, #68]	; (800453c <_sbrk+0x64>)
 80044f6:	4a12      	ldr	r2, [pc, #72]	; (8004540 <_sbrk+0x68>)
 80044f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80044fa:	4b10      	ldr	r3, [pc, #64]	; (800453c <_sbrk+0x64>)
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	18d3      	adds	r3, r2, r3
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	429a      	cmp	r2, r3
 8004506:	d207      	bcs.n	8004518 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004508:	f00a f8b4 	bl	800e674 <__errno>
 800450c:	0003      	movs	r3, r0
 800450e:	220c      	movs	r2, #12
 8004510:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004512:	2301      	movs	r3, #1
 8004514:	425b      	negs	r3, r3
 8004516:	e009      	b.n	800452c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004518:	4b08      	ldr	r3, [pc, #32]	; (800453c <_sbrk+0x64>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800451e:	4b07      	ldr	r3, [pc, #28]	; (800453c <_sbrk+0x64>)
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	18d2      	adds	r2, r2, r3
 8004526:	4b05      	ldr	r3, [pc, #20]	; (800453c <_sbrk+0x64>)
 8004528:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800452a:	68fb      	ldr	r3, [r7, #12]
}
 800452c:	0018      	movs	r0, r3
 800452e:	46bd      	mov	sp, r7
 8004530:	b006      	add	sp, #24
 8004532:	bd80      	pop	{r7, pc}
 8004534:	20009000 	.word	0x20009000
 8004538:	00000400 	.word	0x00000400
 800453c:	20000554 	.word	0x20000554
 8004540:	20000ce8 	.word	0x20000ce8

08004544 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004548:	46c0      	nop			; (mov r8, r8)
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
	...

08004550 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004550:	480d      	ldr	r0, [pc, #52]	; (8004588 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004552:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004554:	f7ff fff6 	bl	8004544 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004558:	480c      	ldr	r0, [pc, #48]	; (800458c <LoopForever+0x6>)
  ldr r1, =_edata
 800455a:	490d      	ldr	r1, [pc, #52]	; (8004590 <LoopForever+0xa>)
  ldr r2, =_sidata
 800455c:	4a0d      	ldr	r2, [pc, #52]	; (8004594 <LoopForever+0xe>)
  movs r3, #0
 800455e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004560:	e002      	b.n	8004568 <LoopCopyDataInit>

08004562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004566:	3304      	adds	r3, #4

08004568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800456a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800456c:	d3f9      	bcc.n	8004562 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800456e:	4a0a      	ldr	r2, [pc, #40]	; (8004598 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004570:	4c0a      	ldr	r4, [pc, #40]	; (800459c <LoopForever+0x16>)
  movs r3, #0
 8004572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004574:	e001      	b.n	800457a <LoopFillZerobss>

08004576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004578:	3204      	adds	r2, #4

0800457a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800457a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800457c:	d3fb      	bcc.n	8004576 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800457e:	f00a f87f 	bl	800e680 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004582:	f7ff f9cb 	bl	800391c <main>

08004586 <LoopForever>:

LoopForever:
  b LoopForever
 8004586:	e7fe      	b.n	8004586 <LoopForever>
  ldr   r0, =_estack
 8004588:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800458c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004590:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8004594:	08011874 	.word	0x08011874
  ldr r2, =_sbss
 8004598:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 800459c:	20000ce8 	.word	0x20000ce8

080045a0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80045a0:	e7fe      	b.n	80045a0 <ADC1_IRQHandler>
	...

080045a4 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	0002      	movs	r2, r0
 80045ac:	1dfb      	adds	r3, r7, #7
 80045ae:	701a      	strb	r2, [r3, #0]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 80045b0:	1dfb      	adds	r3, r7, #7
 80045b2:	781a      	ldrb	r2, [r3, #0]
 80045b4:	4b04      	ldr	r3, [pc, #16]	; (80045c8 <BSP_LED_Init+0x24>)
 80045b6:	0092      	lsls	r2, r2, #2
 80045b8:	58d3      	ldr	r3, [r2, r3]
 80045ba:	4798      	blx	r3
  return BSP_ERROR_NONE;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	0018      	movs	r0, r3
 80045c0:	46bd      	mov	sp, r7
 80045c2:	b002      	add	sp, #8
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	46c0      	nop			; (mov r8, r8)
 80045c8:	08011288 	.word	0x08011288

080045cc <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	0002      	movs	r2, r0
 80045d4:	1dfb      	adds	r3, r7, #7
 80045d6:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 80045d8:	1dfb      	adds	r3, r7, #7
 80045da:	781a      	ldrb	r2, [r3, #0]
 80045dc:	4b06      	ldr	r3, [pc, #24]	; (80045f8 <BSP_LED_On+0x2c>)
 80045de:	0092      	lsls	r2, r2, #2
 80045e0:	58d3      	ldr	r3, [r2, r3]
 80045e2:	2120      	movs	r1, #32
 80045e4:	2201      	movs	r2, #1
 80045e6:	0018      	movs	r0, r3
 80045e8:	f001 ffd7 	bl	800659a <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	0018      	movs	r0, r3
 80045f0:	46bd      	mov	sp, r7
 80045f2:	b002      	add	sp, #8
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	46c0      	nop			; (mov r8, r8)
 80045f8:	20000020 	.word	0x20000020

080045fc <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	0002      	movs	r2, r0
 8004604:	1dfb      	adds	r3, r7, #7
 8004606:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8004608:	1dfb      	adds	r3, r7, #7
 800460a:	781a      	ldrb	r2, [r3, #0]
 800460c:	4b06      	ldr	r3, [pc, #24]	; (8004628 <BSP_LED_Off+0x2c>)
 800460e:	0092      	lsls	r2, r2, #2
 8004610:	58d3      	ldr	r3, [r2, r3]
 8004612:	2120      	movs	r1, #32
 8004614:	2200      	movs	r2, #0
 8004616:	0018      	movs	r0, r3
 8004618:	f001 ffbf 	bl	800659a <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800461c:	2300      	movs	r3, #0
}
 800461e:	0018      	movs	r0, r3
 8004620:	46bd      	mov	sp, r7
 8004622:	b002      	add	sp, #8
 8004624:	bd80      	pop	{r7, pc}
 8004626:	46c0      	nop			; (mov r8, r8)
 8004628:	20000020 	.word	0x20000020

0800462c <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	0002      	movs	r2, r0
 8004634:	1dfb      	adds	r3, r7, #7
 8004636:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8004638:	1dfb      	adds	r3, r7, #7
 800463a:	781a      	ldrb	r2, [r3, #0]
 800463c:	4b06      	ldr	r3, [pc, #24]	; (8004658 <BSP_LED_Toggle+0x2c>)
 800463e:	0092      	lsls	r2, r2, #2
 8004640:	58d3      	ldr	r3, [r2, r3]
 8004642:	2220      	movs	r2, #32
 8004644:	0011      	movs	r1, r2
 8004646:	0018      	movs	r0, r3
 8004648:	f001 ffc4 	bl	80065d4 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 800464c:	2300      	movs	r3, #0
}
 800464e:	0018      	movs	r0, r3
 8004650:	46bd      	mov	sp, r7
 8004652:	b002      	add	sp, #8
 8004654:	bd80      	pop	{r7, pc}
 8004656:	46c0      	nop			; (mov r8, r8)
 8004658:	20000020 	.word	0x20000020

0800465c <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 800465c:	b590      	push	{r4, r7, lr}
 800465e:	b089      	sub	sp, #36	; 0x24
 8004660:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004662:	4b1e      	ldr	r3, [pc, #120]	; (80046dc <LED_USER_GPIO_Init+0x80>)
 8004664:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004666:	4b1d      	ldr	r3, [pc, #116]	; (80046dc <LED_USER_GPIO_Init+0x80>)
 8004668:	2104      	movs	r1, #4
 800466a:	430a      	orrs	r2, r1
 800466c:	635a      	str	r2, [r3, #52]	; 0x34
 800466e:	4b1b      	ldr	r3, [pc, #108]	; (80046dc <LED_USER_GPIO_Init+0x80>)
 8004670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004672:	2204      	movs	r2, #4
 8004674:	4013      	ands	r3, r2
 8004676:	60bb      	str	r3, [r7, #8]
 8004678:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800467a:	240c      	movs	r4, #12
 800467c:	193b      	adds	r3, r7, r4
 800467e:	0018      	movs	r0, r3
 8004680:	2314      	movs	r3, #20
 8004682:	001a      	movs	r2, r3
 8004684:	2100      	movs	r1, #0
 8004686:	f009 ff9b 	bl	800e5c0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800468a:	4b14      	ldr	r3, [pc, #80]	; (80046dc <LED_USER_GPIO_Init+0x80>)
 800468c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800468e:	4b13      	ldr	r3, [pc, #76]	; (80046dc <LED_USER_GPIO_Init+0x80>)
 8004690:	2104      	movs	r1, #4
 8004692:	430a      	orrs	r2, r1
 8004694:	635a      	str	r2, [r3, #52]	; 0x34
 8004696:	4b11      	ldr	r3, [pc, #68]	; (80046dc <LED_USER_GPIO_Init+0x80>)
 8004698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800469a:	2204      	movs	r2, #4
 800469c:	4013      	ands	r3, r2
 800469e:	607b      	str	r3, [r7, #4]
 80046a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 80046a2:	4b0f      	ldr	r3, [pc, #60]	; (80046e0 <LED_USER_GPIO_Init+0x84>)
 80046a4:	2200      	movs	r2, #0
 80046a6:	2120      	movs	r1, #32
 80046a8:	0018      	movs	r0, r3
 80046aa:	f001 ff76 	bl	800659a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 80046ae:	0021      	movs	r1, r4
 80046b0:	187b      	adds	r3, r7, r1
 80046b2:	2220      	movs	r2, #32
 80046b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046b6:	187b      	adds	r3, r7, r1
 80046b8:	2201      	movs	r2, #1
 80046ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046bc:	187b      	adds	r3, r7, r1
 80046be:	2200      	movs	r2, #0
 80046c0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046c2:	187b      	adds	r3, r7, r1
 80046c4:	2200      	movs	r2, #0
 80046c6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 80046c8:	187b      	adds	r3, r7, r1
 80046ca:	4a05      	ldr	r2, [pc, #20]	; (80046e0 <LED_USER_GPIO_Init+0x84>)
 80046cc:	0019      	movs	r1, r3
 80046ce:	0010      	movs	r0, r2
 80046d0:	f001 fd12 	bl	80060f8 <HAL_GPIO_Init>

}
 80046d4:	46c0      	nop			; (mov r8, r8)
 80046d6:	46bd      	mov	sp, r7
 80046d8:	b009      	add	sp, #36	; 0x24
 80046da:	bd90      	pop	{r4, r7, pc}
 80046dc:	40021000 	.word	0x40021000
 80046e0:	50000800 	.word	0x50000800

080046e4 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	0002      	movs	r2, r0
 80046ec:	1dfb      	adds	r3, r7, #7
 80046ee:	701a      	strb	r2, [r3, #0]
 80046f0:	1dbb      	adds	r3, r7, #6
 80046f2:	1c0a      	adds	r2, r1, #0
 80046f4:	701a      	strb	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 80046f6:	2300      	movs	r3, #0
 80046f8:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 80046fa:	1dfb      	adds	r3, r7, #7
 80046fc:	781a      	ldrb	r2, [r3, #0]
 80046fe:	4b24      	ldr	r3, [pc, #144]	; (8004790 <BSP_PB_Init+0xac>)
 8004700:	0092      	lsls	r2, r2, #2
 8004702:	58d3      	ldr	r3, [r2, r3]
 8004704:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8004706:	1dbb      	adds	r3, r7, #6
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d13a      	bne.n	8004784 <BSP_PB_Init+0xa0>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 800470e:	1dfb      	adds	r3, r7, #7
 8004710:	781a      	ldrb	r2, [r3, #0]
 8004712:	0013      	movs	r3, r2
 8004714:	005b      	lsls	r3, r3, #1
 8004716:	189b      	adds	r3, r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	4a1e      	ldr	r2, [pc, #120]	; (8004794 <BSP_PB_Init+0xb0>)
 800471c:	1898      	adds	r0, r3, r2
 800471e:	1dfb      	adds	r3, r7, #7
 8004720:	781a      	ldrb	r2, [r3, #0]
 8004722:	4b1d      	ldr	r3, [pc, #116]	; (8004798 <BSP_PB_Init+0xb4>)
 8004724:	0092      	lsls	r2, r2, #2
 8004726:	58d3      	ldr	r3, [r2, r3]
 8004728:	0019      	movs	r1, r3
 800472a:	f001 fc89 	bl	8006040 <HAL_EXTI_GetHandle>
 800472e:	1e03      	subs	r3, r0, #0
 8004730:	d003      	beq.n	800473a <BSP_PB_Init+0x56>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004732:	2304      	movs	r3, #4
 8004734:	425b      	negs	r3, r3
 8004736:	60fb      	str	r3, [r7, #12]
 8004738:	e024      	b.n	8004784 <BSP_PB_Init+0xa0>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 800473a:	1dfb      	adds	r3, r7, #7
 800473c:	781a      	ldrb	r2, [r3, #0]
 800473e:	0013      	movs	r3, r2
 8004740:	005b      	lsls	r3, r3, #1
 8004742:	189b      	adds	r3, r3, r2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	4a13      	ldr	r2, [pc, #76]	; (8004794 <BSP_PB_Init+0xb0>)
 8004748:	1898      	adds	r0, r3, r2
 800474a:	1dfb      	adds	r3, r7, #7
 800474c:	781a      	ldrb	r2, [r3, #0]
 800474e:	4b13      	ldr	r3, [pc, #76]	; (800479c <BSP_PB_Init+0xb8>)
 8004750:	0092      	lsls	r2, r2, #2
 8004752:	58d3      	ldr	r3, [r2, r3]
 8004754:	001a      	movs	r2, r3
 8004756:	2100      	movs	r1, #0
 8004758:	f001 fc40 	bl	8005fdc <HAL_EXTI_RegisterCallback>
 800475c:	1e03      	subs	r3, r0, #0
 800475e:	d003      	beq.n	8004768 <BSP_PB_Init+0x84>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004760:	2304      	movs	r3, #4
 8004762:	425b      	negs	r3, r3
 8004764:	60fb      	str	r3, [r7, #12]
 8004766:	e00d      	b.n	8004784 <BSP_PB_Init+0xa0>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8004768:	2007      	movs	r0, #7
 800476a:	1dfb      	adds	r3, r7, #7
 800476c:	781a      	ldrb	r2, [r3, #0]
 800476e:	4b0c      	ldr	r3, [pc, #48]	; (80047a0 <BSP_PB_Init+0xbc>)
 8004770:	0092      	lsls	r2, r2, #2
 8004772:	58d3      	ldr	r3, [r2, r3]
 8004774:	2200      	movs	r2, #0
 8004776:	0019      	movs	r1, r3
 8004778:	f001 f99c 	bl	8005ab4 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800477c:	2307      	movs	r3, #7
 800477e:	0018      	movs	r0, r3
 8004780:	f001 f9ad 	bl	8005ade <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8004784:	68fb      	ldr	r3, [r7, #12]
}
 8004786:	0018      	movs	r0, r3
 8004788:	46bd      	mov	sp, r7
 800478a:	b004      	add	sp, #16
 800478c:	bd80      	pop	{r7, pc}
 800478e:	46c0      	nop			; (mov r8, r8)
 8004790:	0801128c 	.word	0x0801128c
 8004794:	20000028 	.word	0x20000028
 8004798:	08011290 	.word	0x08011290
 800479c:	08011294 	.word	0x08011294
 80047a0:	08011298 	.word	0x08011298

080047a4 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	0002      	movs	r2, r0
 80047ac:	1dfb      	adds	r3, r7, #7
 80047ae:	701a      	strb	r2, [r3, #0]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 80047b0:	1dfb      	adds	r3, r7, #7
 80047b2:	781a      	ldrb	r2, [r3, #0]
 80047b4:	4b08      	ldr	r3, [pc, #32]	; (80047d8 <BSP_PB_GetState+0x34>)
 80047b6:	0092      	lsls	r2, r2, #2
 80047b8:	58d3      	ldr	r3, [r2, r3]
 80047ba:	2280      	movs	r2, #128	; 0x80
 80047bc:	0192      	lsls	r2, r2, #6
 80047be:	0011      	movs	r1, r2
 80047c0:	0018      	movs	r0, r3
 80047c2:	f001 fecd 	bl	8006560 <HAL_GPIO_ReadPin>
 80047c6:	0003      	movs	r3, r0
 80047c8:	425a      	negs	r2, r3
 80047ca:	4153      	adcs	r3, r2
 80047cc:	b2db      	uxtb	r3, r3
}
 80047ce:	0018      	movs	r0, r3
 80047d0:	46bd      	mov	sp, r7
 80047d2:	b002      	add	sp, #8
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	46c0      	nop			; (mov r8, r8)
 80047d8:	20000024 	.word	0x20000024

080047dc <BSP_PB_Callback>:
 * @brief  BSP Push Button callback
 * @param  Button Specifies the pin connected EXTI line
 * @retval None.
 */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	0002      	movs	r2, r0
 80047e4:	1dfb      	adds	r3, r7, #7
 80047e6:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80047e8:	46c0      	nop			; (mov r8, r8)
 80047ea:	46bd      	mov	sp, r7
 80047ec:	b002      	add	sp, #8
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80047f4:	2000      	movs	r0, #0
 80047f6:	f7ff fff1 	bl	80047dc <BSP_PB_Callback>
}
 80047fa:	46c0      	nop			; (mov r8, r8)
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8004800:	b590      	push	{r4, r7, lr}
 8004802:	b089      	sub	sp, #36	; 0x24
 8004804:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004806:	4b1a      	ldr	r3, [pc, #104]	; (8004870 <BUTTON_USER_GPIO_Init+0x70>)
 8004808:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800480a:	4b19      	ldr	r3, [pc, #100]	; (8004870 <BUTTON_USER_GPIO_Init+0x70>)
 800480c:	2104      	movs	r1, #4
 800480e:	430a      	orrs	r2, r1
 8004810:	635a      	str	r2, [r3, #52]	; 0x34
 8004812:	4b17      	ldr	r3, [pc, #92]	; (8004870 <BUTTON_USER_GPIO_Init+0x70>)
 8004814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004816:	2204      	movs	r2, #4
 8004818:	4013      	ands	r3, r2
 800481a:	60bb      	str	r3, [r7, #8]
 800481c:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800481e:	240c      	movs	r4, #12
 8004820:	193b      	adds	r3, r7, r4
 8004822:	0018      	movs	r0, r3
 8004824:	2314      	movs	r3, #20
 8004826:	001a      	movs	r2, r3
 8004828:	2100      	movs	r1, #0
 800482a:	f009 fec9 	bl	800e5c0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800482e:	4b10      	ldr	r3, [pc, #64]	; (8004870 <BUTTON_USER_GPIO_Init+0x70>)
 8004830:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004832:	4b0f      	ldr	r3, [pc, #60]	; (8004870 <BUTTON_USER_GPIO_Init+0x70>)
 8004834:	2104      	movs	r1, #4
 8004836:	430a      	orrs	r2, r1
 8004838:	635a      	str	r2, [r3, #52]	; 0x34
 800483a:	4b0d      	ldr	r3, [pc, #52]	; (8004870 <BUTTON_USER_GPIO_Init+0x70>)
 800483c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800483e:	2204      	movs	r2, #4
 8004840:	4013      	ands	r3, r2
 8004842:	607b      	str	r3, [r7, #4]
 8004844:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8004846:	193b      	adds	r3, r7, r4
 8004848:	2280      	movs	r2, #128	; 0x80
 800484a:	0192      	lsls	r2, r2, #6
 800484c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800484e:	193b      	adds	r3, r7, r4
 8004850:	2288      	movs	r2, #136	; 0x88
 8004852:	0352      	lsls	r2, r2, #13
 8004854:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004856:	193b      	adds	r3, r7, r4
 8004858:	2200      	movs	r2, #0
 800485a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 800485c:	193b      	adds	r3, r7, r4
 800485e:	4a05      	ldr	r2, [pc, #20]	; (8004874 <BUTTON_USER_GPIO_Init+0x74>)
 8004860:	0019      	movs	r1, r3
 8004862:	0010      	movs	r0, r2
 8004864:	f001 fc48 	bl	80060f8 <HAL_GPIO_Init>

}
 8004868:	46c0      	nop			; (mov r8, r8)
 800486a:	46bd      	mov	sp, r7
 800486c:	b009      	add	sp, #36	; 0x24
 800486e:	bd90      	pop	{r4, r7, pc}
 8004870:	40021000 	.word	0x40021000
 8004874:	50000800 	.word	0x50000800

08004878 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	0002      	movs	r2, r0
 8004880:	1dfb      	adds	r3, r7, #7
 8004882:	701a      	strb	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 8004884:	2300      	movs	r3, #0
 8004886:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8004888:	1dfb      	adds	r3, r7, #7
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d903      	bls.n	8004898 <BSP_COM_Init+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004890:	2302      	movs	r3, #2
 8004892:	425b      	negs	r3, r3
 8004894:	60fb      	str	r3, [r7, #12]
 8004896:	e021      	b.n	80048dc <BSP_COM_Init+0x64>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8004898:	1dfb      	adds	r3, r7, #7
 800489a:	7819      	ldrb	r1, [r3, #0]
 800489c:	1dfb      	adds	r3, r7, #7
 800489e:	781a      	ldrb	r2, [r3, #0]
 80048a0:	4b11      	ldr	r3, [pc, #68]	; (80048e8 <BSP_COM_Init+0x70>)
 80048a2:	0089      	lsls	r1, r1, #2
 80048a4:	58c9      	ldr	r1, [r1, r3]
 80048a6:	4b11      	ldr	r3, [pc, #68]	; (80048ec <BSP_COM_Init+0x74>)
 80048a8:	2094      	movs	r0, #148	; 0x94
 80048aa:	4342      	muls	r2, r0
 80048ac:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 80048ae:	1dfb      	adds	r3, r7, #7
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	2294      	movs	r2, #148	; 0x94
 80048b4:	435a      	muls	r2, r3
 80048b6:	4b0d      	ldr	r3, [pc, #52]	; (80048ec <BSP_COM_Init+0x74>)
 80048b8:	18d3      	adds	r3, r2, r3
 80048ba:	0018      	movs	r0, r3
 80048bc:	f000 f88e 	bl	80049dc <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 80048c0:	1dfb      	adds	r3, r7, #7
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	2294      	movs	r2, #148	; 0x94
 80048c6:	435a      	muls	r2, r3
 80048c8:	4b08      	ldr	r3, [pc, #32]	; (80048ec <BSP_COM_Init+0x74>)
 80048ca:	18d3      	adds	r3, r2, r3
 80048cc:	0018      	movs	r0, r3
 80048ce:	f000 f80f 	bl	80048f0 <MX_USART2_UART_Init>
 80048d2:	1e03      	subs	r3, r0, #0
 80048d4:	d002      	beq.n	80048dc <BSP_COM_Init+0x64>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80048d6:	2304      	movs	r3, #4
 80048d8:	425b      	negs	r3, r3
 80048da:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80048dc:	68fb      	ldr	r3, [r7, #12]
}
 80048de:	0018      	movs	r0, r3
 80048e0:	46bd      	mov	sp, r7
 80048e2:	b004      	add	sp, #16
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	46c0      	nop			; (mov r8, r8)
 80048e8:	20000034 	.word	0x20000034
 80048ec:	20000558 	.word	0x20000558

080048f0 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 80048f0:	b590      	push	{r4, r7, lr}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80048f8:	240f      	movs	r4, #15
 80048fa:	193b      	adds	r3, r7, r4
 80048fc:	2200      	movs	r2, #0
 80048fe:	701a      	strb	r2, [r3, #0]

  huart->Instance = USART2;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a28      	ldr	r2, [pc, #160]	; (80049a4 <MX_USART2_UART_Init+0xb4>)
 8004904:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	22e1      	movs	r2, #225	; 0xe1
 800490a:	0252      	lsls	r2, r2, #9
 800490c:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	220c      	movs	r2, #12
 8004924:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	625a      	str	r2, [r3, #36]	; 0x24
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(huart) != HAL_OK)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	0018      	movs	r0, r3
 8004948:	f004 f8de 	bl	8008b08 <HAL_UART_Init>
 800494c:	1e03      	subs	r3, r0, #0
 800494e:	d002      	beq.n	8004956 <MX_USART2_UART_Init+0x66>
  {
    ret = HAL_ERROR;
 8004950:	193b      	adds	r3, r7, r4
 8004952:	2201      	movs	r2, #1
 8004954:	701a      	strb	r2, [r3, #0]
  }

  if (HAL_UARTEx_SetTxFifoThreshold(huart, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2100      	movs	r1, #0
 800495a:	0018      	movs	r0, r3
 800495c:	f004 fde8 	bl	8009530 <HAL_UARTEx_SetTxFifoThreshold>
 8004960:	1e03      	subs	r3, r0, #0
 8004962:	d003      	beq.n	800496c <MX_USART2_UART_Init+0x7c>
  {
    ret = HAL_ERROR;
 8004964:	230f      	movs	r3, #15
 8004966:	18fb      	adds	r3, r7, r3
 8004968:	2201      	movs	r2, #1
 800496a:	701a      	strb	r2, [r3, #0]
  }

  if (HAL_UARTEx_SetRxFifoThreshold(huart, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2100      	movs	r1, #0
 8004970:	0018      	movs	r0, r3
 8004972:	f004 fe1d 	bl	80095b0 <HAL_UARTEx_SetRxFifoThreshold>
 8004976:	1e03      	subs	r3, r0, #0
 8004978:	d003      	beq.n	8004982 <MX_USART2_UART_Init+0x92>
  {
    ret = HAL_ERROR;
 800497a:	230f      	movs	r3, #15
 800497c:	18fb      	adds	r3, r7, r3
 800497e:	2201      	movs	r2, #1
 8004980:	701a      	strb	r2, [r3, #0]
  }

  if (HAL_UARTEx_DisableFifoMode(huart) != HAL_OK)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	0018      	movs	r0, r3
 8004986:	f004 fd99 	bl	80094bc <HAL_UARTEx_DisableFifoMode>
 800498a:	1e03      	subs	r3, r0, #0
 800498c:	d003      	beq.n	8004996 <MX_USART2_UART_Init+0xa6>
  {
    ret = HAL_ERROR;
 800498e:	230f      	movs	r3, #15
 8004990:	18fb      	adds	r3, r7, r3
 8004992:	2201      	movs	r2, #1
 8004994:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8004996:	230f      	movs	r3, #15
 8004998:	18fb      	adds	r3, r7, r3
 800499a:	781b      	ldrb	r3, [r3, #0]
}
 800499c:	0018      	movs	r0, r3
 800499e:	46bd      	mov	sp, r7
 80049a0:	b005      	add	sp, #20
 80049a2:	bd90      	pop	{r4, r7, pc}
 80049a4:	40004400 	.word	0x40004400

080049a8 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 80049b0:	4b08      	ldr	r3, [pc, #32]	; (80049d4 <__io_putchar+0x2c>)
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	001a      	movs	r2, r3
 80049b6:	2394      	movs	r3, #148	; 0x94
 80049b8:	435a      	muls	r2, r3
 80049ba:	4b07      	ldr	r3, [pc, #28]	; (80049d8 <__io_putchar+0x30>)
 80049bc:	18d0      	adds	r0, r2, r3
 80049be:	23fa      	movs	r3, #250	; 0xfa
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	1d39      	adds	r1, r7, #4
 80049c4:	2201      	movs	r2, #1
 80049c6:	f004 f8fd 	bl	8008bc4 <HAL_UART_Transmit>
  return ch;
 80049ca:	687b      	ldr	r3, [r7, #4]
}
 80049cc:	0018      	movs	r0, r3
 80049ce:	46bd      	mov	sp, r7
 80049d0:	b002      	add	sp, #8
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	200005ec 	.word	0x200005ec
 80049d8:	20000558 	.word	0x20000558

080049dc <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 80049dc:	b590      	push	{r4, r7, lr}
 80049de:	b091      	sub	sp, #68	; 0x44
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80049e4:	2410      	movs	r4, #16
 80049e6:	193b      	adds	r3, r7, r4
 80049e8:	0018      	movs	r0, r3
 80049ea:	231c      	movs	r3, #28
 80049ec:	001a      	movs	r2, r3
 80049ee:	2100      	movs	r1, #0
 80049f0:	f009 fde6 	bl	800e5c0 <memset>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80049f4:	193b      	adds	r3, r7, r4
 80049f6:	2202      	movs	r2, #2
 80049f8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80049fa:	193b      	adds	r3, r7, r4
 80049fc:	2200      	movs	r2, #0
 80049fe:	609a      	str	r2, [r3, #8]
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8004a00:	193b      	adds	r3, r7, r4
 8004a02:	0018      	movs	r0, r3
 8004a04:	f002 fb46 	bl	8007094 <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004a08:	4b25      	ldr	r3, [pc, #148]	; (8004aa0 <USART2_MspInit+0xc4>)
 8004a0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a0c:	4b24      	ldr	r3, [pc, #144]	; (8004aa0 <USART2_MspInit+0xc4>)
 8004a0e:	2180      	movs	r1, #128	; 0x80
 8004a10:	0289      	lsls	r1, r1, #10
 8004a12:	430a      	orrs	r2, r1
 8004a14:	63da      	str	r2, [r3, #60]	; 0x3c
 8004a16:	4b22      	ldr	r3, [pc, #136]	; (8004aa0 <USART2_MspInit+0xc4>)
 8004a18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a1a:	2380      	movs	r3, #128	; 0x80
 8004a1c:	029b      	lsls	r3, r3, #10
 8004a1e:	4013      	ands	r3, r2
 8004a20:	60fb      	str	r3, [r7, #12]
 8004a22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a24:	4b1e      	ldr	r3, [pc, #120]	; (8004aa0 <USART2_MspInit+0xc4>)
 8004a26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a28:	4b1d      	ldr	r3, [pc, #116]	; (8004aa0 <USART2_MspInit+0xc4>)
 8004a2a:	2101      	movs	r1, #1
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	635a      	str	r2, [r3, #52]	; 0x34
 8004a30:	4b1b      	ldr	r3, [pc, #108]	; (8004aa0 <USART2_MspInit+0xc4>)
 8004a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a34:	2201      	movs	r2, #1
 8004a36:	4013      	ands	r3, r2
 8004a38:	60bb      	str	r3, [r7, #8]
 8004a3a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8004a3c:	242c      	movs	r4, #44	; 0x2c
 8004a3e:	193b      	adds	r3, r7, r4
 8004a40:	2204      	movs	r2, #4
 8004a42:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a44:	193b      	adds	r3, r7, r4
 8004a46:	2202      	movs	r2, #2
 8004a48:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a4a:	193b      	adds	r3, r7, r4
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a50:	193b      	adds	r3, r7, r4
 8004a52:	2200      	movs	r2, #0
 8004a54:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8004a56:	193b      	adds	r3, r7, r4
 8004a58:	2201      	movs	r2, #1
 8004a5a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8004a5c:	193a      	adds	r2, r7, r4
 8004a5e:	23a0      	movs	r3, #160	; 0xa0
 8004a60:	05db      	lsls	r3, r3, #23
 8004a62:	0011      	movs	r1, r2
 8004a64:	0018      	movs	r0, r3
 8004a66:	f001 fb47 	bl	80060f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8004a6a:	0021      	movs	r1, r4
 8004a6c:	187b      	adds	r3, r7, r1
 8004a6e:	2208      	movs	r2, #8
 8004a70:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a72:	187b      	adds	r3, r7, r1
 8004a74:	2202      	movs	r2, #2
 8004a76:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a78:	187b      	adds	r3, r7, r1
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a7e:	187b      	adds	r3, r7, r1
 8004a80:	2200      	movs	r2, #0
 8004a82:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8004a84:	187b      	adds	r3, r7, r1
 8004a86:	2201      	movs	r2, #1
 8004a88:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8004a8a:	187a      	adds	r2, r7, r1
 8004a8c:	23a0      	movs	r3, #160	; 0xa0
 8004a8e:	05db      	lsls	r3, r3, #23
 8004a90:	0011      	movs	r1, r2
 8004a92:	0018      	movs	r0, r3
 8004a94:	f001 fb30 	bl	80060f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8004a98:	46c0      	nop			; (mov r8, r8)
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	b011      	add	sp, #68	; 0x44
 8004a9e:	bd90      	pop	{r4, r7, pc}
 8004aa0:	40021000 	.word	0x40021000

08004aa4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004aaa:	1dfb      	adds	r3, r7, #7
 8004aac:	2200      	movs	r2, #0
 8004aae:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ab0:	4b0b      	ldr	r3, [pc, #44]	; (8004ae0 <HAL_Init+0x3c>)
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	4b0a      	ldr	r3, [pc, #40]	; (8004ae0 <HAL_Init+0x3c>)
 8004ab6:	2180      	movs	r1, #128	; 0x80
 8004ab8:	0049      	lsls	r1, r1, #1
 8004aba:	430a      	orrs	r2, r1
 8004abc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004abe:	2000      	movs	r0, #0
 8004ac0:	f000 f810 	bl	8004ae4 <HAL_InitTick>
 8004ac4:	1e03      	subs	r3, r0, #0
 8004ac6:	d003      	beq.n	8004ad0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8004ac8:	1dfb      	adds	r3, r7, #7
 8004aca:	2201      	movs	r2, #1
 8004acc:	701a      	strb	r2, [r3, #0]
 8004ace:	e001      	b.n	8004ad4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8004ad0:	f7ff fa1c 	bl	8003f0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004ad4:	1dfb      	adds	r3, r7, #7
 8004ad6:	781b      	ldrb	r3, [r3, #0]
}
 8004ad8:	0018      	movs	r0, r3
 8004ada:	46bd      	mov	sp, r7
 8004adc:	b002      	add	sp, #8
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	40022000 	.word	0x40022000

08004ae4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ae4:	b590      	push	{r4, r7, lr}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004aec:	230f      	movs	r3, #15
 8004aee:	18fb      	adds	r3, r7, r3
 8004af0:	2200      	movs	r2, #0
 8004af2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8004af4:	4b1d      	ldr	r3, [pc, #116]	; (8004b6c <HAL_InitTick+0x88>)
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d02b      	beq.n	8004b54 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8004afc:	4b1c      	ldr	r3, [pc, #112]	; (8004b70 <HAL_InitTick+0x8c>)
 8004afe:	681c      	ldr	r4, [r3, #0]
 8004b00:	4b1a      	ldr	r3, [pc, #104]	; (8004b6c <HAL_InitTick+0x88>)
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	0019      	movs	r1, r3
 8004b06:	23fa      	movs	r3, #250	; 0xfa
 8004b08:	0098      	lsls	r0, r3, #2
 8004b0a:	f7fb fb15 	bl	8000138 <__udivsi3>
 8004b0e:	0003      	movs	r3, r0
 8004b10:	0019      	movs	r1, r3
 8004b12:	0020      	movs	r0, r4
 8004b14:	f7fb fb10 	bl	8000138 <__udivsi3>
 8004b18:	0003      	movs	r3, r0
 8004b1a:	0018      	movs	r0, r3
 8004b1c:	f000 ffff 	bl	8005b1e <HAL_SYSTICK_Config>
 8004b20:	1e03      	subs	r3, r0, #0
 8004b22:	d112      	bne.n	8004b4a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b03      	cmp	r3, #3
 8004b28:	d80a      	bhi.n	8004b40 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b2a:	6879      	ldr	r1, [r7, #4]
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	425b      	negs	r3, r3
 8004b30:	2200      	movs	r2, #0
 8004b32:	0018      	movs	r0, r3
 8004b34:	f000 ffbe 	bl	8005ab4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004b38:	4b0e      	ldr	r3, [pc, #56]	; (8004b74 <HAL_InitTick+0x90>)
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	601a      	str	r2, [r3, #0]
 8004b3e:	e00d      	b.n	8004b5c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8004b40:	230f      	movs	r3, #15
 8004b42:	18fb      	adds	r3, r7, r3
 8004b44:	2201      	movs	r2, #1
 8004b46:	701a      	strb	r2, [r3, #0]
 8004b48:	e008      	b.n	8004b5c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004b4a:	230f      	movs	r3, #15
 8004b4c:	18fb      	adds	r3, r7, r3
 8004b4e:	2201      	movs	r2, #1
 8004b50:	701a      	strb	r2, [r3, #0]
 8004b52:	e003      	b.n	8004b5c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004b54:	230f      	movs	r3, #15
 8004b56:	18fb      	adds	r3, r7, r3
 8004b58:	2201      	movs	r2, #1
 8004b5a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8004b5c:	230f      	movs	r3, #15
 8004b5e:	18fb      	adds	r3, r7, r3
 8004b60:	781b      	ldrb	r3, [r3, #0]
}
 8004b62:	0018      	movs	r0, r3
 8004b64:	46bd      	mov	sp, r7
 8004b66:	b005      	add	sp, #20
 8004b68:	bd90      	pop	{r4, r7, pc}
 8004b6a:	46c0      	nop			; (mov r8, r8)
 8004b6c:	2000003c 	.word	0x2000003c
 8004b70:	2000001c 	.word	0x2000001c
 8004b74:	20000038 	.word	0x20000038

08004b78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004b7c:	4b05      	ldr	r3, [pc, #20]	; (8004b94 <HAL_IncTick+0x1c>)
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	001a      	movs	r2, r3
 8004b82:	4b05      	ldr	r3, [pc, #20]	; (8004b98 <HAL_IncTick+0x20>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	18d2      	adds	r2, r2, r3
 8004b88:	4b03      	ldr	r3, [pc, #12]	; (8004b98 <HAL_IncTick+0x20>)
 8004b8a:	601a      	str	r2, [r3, #0]
}
 8004b8c:	46c0      	nop			; (mov r8, r8)
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	46c0      	nop			; (mov r8, r8)
 8004b94:	2000003c 	.word	0x2000003c
 8004b98:	200005f0 	.word	0x200005f0

08004b9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	af00      	add	r7, sp, #0
  return uwTick;
 8004ba0:	4b02      	ldr	r3, [pc, #8]	; (8004bac <HAL_GetTick+0x10>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
}
 8004ba4:	0018      	movs	r0, r3
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	46c0      	nop			; (mov r8, r8)
 8004bac:	200005f0 	.word	0x200005f0

08004bb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004bb8:	f7ff fff0 	bl	8004b9c <HAL_GetTick>
 8004bbc:	0003      	movs	r3, r0
 8004bbe:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	d005      	beq.n	8004bd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004bca:	4b0a      	ldr	r3, [pc, #40]	; (8004bf4 <HAL_Delay+0x44>)
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	001a      	movs	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	189b      	adds	r3, r3, r2
 8004bd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004bd6:	46c0      	nop			; (mov r8, r8)
 8004bd8:	f7ff ffe0 	bl	8004b9c <HAL_GetTick>
 8004bdc:	0002      	movs	r2, r0
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d8f7      	bhi.n	8004bd8 <HAL_Delay+0x28>
  {
  }
}
 8004be8:	46c0      	nop			; (mov r8, r8)
 8004bea:	46c0      	nop			; (mov r8, r8)
 8004bec:	46bd      	mov	sp, r7
 8004bee:	b004      	add	sp, #16
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	46c0      	nop			; (mov r8, r8)
 8004bf4:	2000003c 	.word	0x2000003c

08004bf8 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8004c00:	4b06      	ldr	r3, [pc, #24]	; (8004c1c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a06      	ldr	r2, [pc, #24]	; (8004c20 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8004c06:	4013      	ands	r3, r2
 8004c08:	0019      	movs	r1, r3
 8004c0a:	4b04      	ldr	r3, [pc, #16]	; (8004c1c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	601a      	str	r2, [r3, #0]
}
 8004c12:	46c0      	nop			; (mov r8, r8)
 8004c14:	46bd      	mov	sp, r7
 8004c16:	b002      	add	sp, #8
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	46c0      	nop			; (mov r8, r8)
 8004c1c:	40010000 	.word	0x40010000
 8004c20:	fffff9ff 	.word	0xfffff9ff

08004c24 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a05      	ldr	r2, [pc, #20]	; (8004c48 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8004c34:	401a      	ands	r2, r3
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	431a      	orrs	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	601a      	str	r2, [r3, #0]
}
 8004c3e:	46c0      	nop			; (mov r8, r8)
 8004c40:	46bd      	mov	sp, r7
 8004c42:	b002      	add	sp, #8
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	46c0      	nop			; (mov r8, r8)
 8004c48:	fe3fffff 	.word	0xfe3fffff

08004c4c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	23e0      	movs	r3, #224	; 0xe0
 8004c5a:	045b      	lsls	r3, r3, #17
 8004c5c:	4013      	ands	r3, r2
}
 8004c5e:	0018      	movs	r0, r3
 8004c60:	46bd      	mov	sp, r7
 8004c62:	b002      	add	sp, #8
 8004c64:	bd80      	pop	{r7, pc}

08004c66 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8004c66:	b580      	push	{r7, lr}
 8004c68:	b084      	sub	sp, #16
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	60f8      	str	r0, [r7, #12]
 8004c6e:	60b9      	str	r1, [r7, #8]
 8004c70:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	2104      	movs	r1, #4
 8004c7a:	400a      	ands	r2, r1
 8004c7c:	2107      	movs	r1, #7
 8004c7e:	4091      	lsls	r1, r2
 8004c80:	000a      	movs	r2, r1
 8004c82:	43d2      	mvns	r2, r2
 8004c84:	401a      	ands	r2, r3
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	2104      	movs	r1, #4
 8004c8a:	400b      	ands	r3, r1
 8004c8c:	6879      	ldr	r1, [r7, #4]
 8004c8e:	4099      	lsls	r1, r3
 8004c90:	000b      	movs	r3, r1
 8004c92:	431a      	orrs	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8004c98:	46c0      	nop			; (mov r8, r8)
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	b004      	add	sp, #16
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	683a      	ldr	r2, [r7, #0]
 8004cb0:	2104      	movs	r1, #4
 8004cb2:	400a      	ands	r2, r1
 8004cb4:	2107      	movs	r1, #7
 8004cb6:	4091      	lsls	r1, r2
 8004cb8:	000a      	movs	r2, r1
 8004cba:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	2104      	movs	r1, #4
 8004cc0:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8004cc2:	40da      	lsrs	r2, r3
 8004cc4:	0013      	movs	r3, r2
}
 8004cc6:	0018      	movs	r0, r3
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	b002      	add	sp, #8
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b082      	sub	sp, #8
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	68da      	ldr	r2, [r3, #12]
 8004cda:	23c0      	movs	r3, #192	; 0xc0
 8004cdc:	011b      	lsls	r3, r3, #4
 8004cde:	4013      	ands	r3, r2
 8004ce0:	d101      	bne.n	8004ce6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e000      	b.n	8004ce8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	0018      	movs	r0, r3
 8004cea:	46bd      	mov	sp, r7
 8004cec:	b002      	add	sp, #8
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d00:	68ba      	ldr	r2, [r7, #8]
 8004d02:	211f      	movs	r1, #31
 8004d04:	400a      	ands	r2, r1
 8004d06:	210f      	movs	r1, #15
 8004d08:	4091      	lsls	r1, r2
 8004d0a:	000a      	movs	r2, r1
 8004d0c:	43d2      	mvns	r2, r2
 8004d0e:	401a      	ands	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	0e9b      	lsrs	r3, r3, #26
 8004d14:	210f      	movs	r1, #15
 8004d16:	4019      	ands	r1, r3
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	201f      	movs	r0, #31
 8004d1c:	4003      	ands	r3, r0
 8004d1e:	4099      	lsls	r1, r3
 8004d20:	000b      	movs	r3, r1
 8004d22:	431a      	orrs	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004d28:	46c0      	nop			; (mov r8, r8)
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	b004      	add	sp, #16
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	035b      	lsls	r3, r3, #13
 8004d42:	0b5b      	lsrs	r3, r3, #13
 8004d44:	431a      	orrs	r2, r3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004d4a:	46c0      	nop			; (mov r8, r8)
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	b002      	add	sp, #8
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b082      	sub	sp, #8
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
 8004d5a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d60:	683a      	ldr	r2, [r7, #0]
 8004d62:	0352      	lsls	r2, r2, #13
 8004d64:	0b52      	lsrs	r2, r2, #13
 8004d66:	43d2      	mvns	r2, r2
 8004d68:	401a      	ands	r2, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004d6e:	46c0      	nop			; (mov r8, r8)
 8004d70:	46bd      	mov	sp, r7
 8004d72:	b002      	add	sp, #8
 8004d74:	bd80      	pop	{r7, pc}
	...

08004d78 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	695b      	ldr	r3, [r3, #20]
 8004d88:	68ba      	ldr	r2, [r7, #8]
 8004d8a:	0212      	lsls	r2, r2, #8
 8004d8c:	43d2      	mvns	r2, r2
 8004d8e:	401a      	ands	r2, r3
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	021b      	lsls	r3, r3, #8
 8004d94:	6879      	ldr	r1, [r7, #4]
 8004d96:	400b      	ands	r3, r1
 8004d98:	4904      	ldr	r1, [pc, #16]	; (8004dac <LL_ADC_SetChannelSamplingTime+0x34>)
 8004d9a:	400b      	ands	r3, r1
 8004d9c:	431a      	orrs	r2, r3
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8004da2:	46c0      	nop			; (mov r8, r8)
 8004da4:	46bd      	mov	sp, r7
 8004da6:	b004      	add	sp, #16
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	46c0      	nop			; (mov r8, r8)
 8004dac:	07ffff00 	.word	0x07ffff00

08004db0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	4a05      	ldr	r2, [pc, #20]	; (8004dd4 <LL_ADC_EnableInternalRegulator+0x24>)
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	2280      	movs	r2, #128	; 0x80
 8004dc2:	0552      	lsls	r2, r2, #21
 8004dc4:	431a      	orrs	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004dca:	46c0      	nop			; (mov r8, r8)
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	b002      	add	sp, #8
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	46c0      	nop			; (mov r8, r8)
 8004dd4:	6fffffe8 	.word	0x6fffffe8

08004dd8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689a      	ldr	r2, [r3, #8]
 8004de4:	2380      	movs	r3, #128	; 0x80
 8004de6:	055b      	lsls	r3, r3, #21
 8004de8:	401a      	ands	r2, r3
 8004dea:	2380      	movs	r3, #128	; 0x80
 8004dec:	055b      	lsls	r3, r3, #21
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d101      	bne.n	8004df6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8004df2:	2301      	movs	r3, #1
 8004df4:	e000      	b.n	8004df8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	0018      	movs	r0, r3
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	b002      	add	sp, #8
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	4a04      	ldr	r2, [pc, #16]	; (8004e20 <LL_ADC_Enable+0x20>)
 8004e0e:	4013      	ands	r3, r2
 8004e10:	2201      	movs	r2, #1
 8004e12:	431a      	orrs	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004e18:	46c0      	nop			; (mov r8, r8)
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	b002      	add	sp, #8
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	7fffffe8 	.word	0x7fffffe8

08004e24 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	4a04      	ldr	r2, [pc, #16]	; (8004e44 <LL_ADC_Disable+0x20>)
 8004e32:	4013      	ands	r3, r2
 8004e34:	2202      	movs	r2, #2
 8004e36:	431a      	orrs	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004e3c:	46c0      	nop			; (mov r8, r8)
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	b002      	add	sp, #8
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	7fffffe8 	.word	0x7fffffe8

08004e48 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	2201      	movs	r2, #1
 8004e56:	4013      	ands	r3, r2
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d101      	bne.n	8004e60 <LL_ADC_IsEnabled+0x18>
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e000      	b.n	8004e62 <LL_ADC_IsEnabled+0x1a>
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	0018      	movs	r0, r3
 8004e64:	46bd      	mov	sp, r7
 8004e66:	b002      	add	sp, #8
 8004e68:	bd80      	pop	{r7, pc}
	...

08004e6c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	4a04      	ldr	r2, [pc, #16]	; (8004e8c <LL_ADC_REG_StartConversion+0x20>)
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	2204      	movs	r2, #4
 8004e7e:	431a      	orrs	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004e84:	46c0      	nop			; (mov r8, r8)
 8004e86:	46bd      	mov	sp, r7
 8004e88:	b002      	add	sp, #8
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	7fffffe8 	.word	0x7fffffe8

08004e90 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	2204      	movs	r2, #4
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	2b04      	cmp	r3, #4
 8004ea2:	d101      	bne.n	8004ea8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e000      	b.n	8004eaa <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	0018      	movs	r0, r3
 8004eac:	46bd      	mov	sp, r7
 8004eae:	b002      	add	sp, #8
 8004eb0:	bd80      	pop	{r7, pc}
	...

08004eb4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b088      	sub	sp, #32
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ebc:	231f      	movs	r3, #31
 8004ebe:	18fb      	adds	r3, r7, r3
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d101      	bne.n	8004eda <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e17f      	b.n	80051da <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10a      	bne.n	8004ef8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	0018      	movs	r0, r3
 8004ee6:	f7ff f839 	bl	8003f5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2254      	movs	r2, #84	; 0x54
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	0018      	movs	r0, r3
 8004efe:	f7ff ff6b 	bl	8004dd8 <LL_ADC_IsInternalRegulatorEnabled>
 8004f02:	1e03      	subs	r3, r0, #0
 8004f04:	d115      	bne.n	8004f32 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	0018      	movs	r0, r3
 8004f0c:	f7ff ff50 	bl	8004db0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004f10:	4bb4      	ldr	r3, [pc, #720]	; (80051e4 <HAL_ADC_Init+0x330>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	49b4      	ldr	r1, [pc, #720]	; (80051e8 <HAL_ADC_Init+0x334>)
 8004f16:	0018      	movs	r0, r3
 8004f18:	f7fb f90e 	bl	8000138 <__udivsi3>
 8004f1c:	0003      	movs	r3, r0
 8004f1e:	3301      	adds	r3, #1
 8004f20:	005b      	lsls	r3, r3, #1
 8004f22:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004f24:	e002      	b.n	8004f2c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1f9      	bne.n	8004f26 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	0018      	movs	r0, r3
 8004f38:	f7ff ff4e 	bl	8004dd8 <LL_ADC_IsInternalRegulatorEnabled>
 8004f3c:	1e03      	subs	r3, r0, #0
 8004f3e:	d10f      	bne.n	8004f60 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f44:	2210      	movs	r2, #16
 8004f46:	431a      	orrs	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f50:	2201      	movs	r2, #1
 8004f52:	431a      	orrs	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004f58:	231f      	movs	r3, #31
 8004f5a:	18fb      	adds	r3, r7, r3
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	0018      	movs	r0, r3
 8004f66:	f7ff ff93 	bl	8004e90 <LL_ADC_REG_IsConversionOngoing>
 8004f6a:	0003      	movs	r3, r0
 8004f6c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f72:	2210      	movs	r2, #16
 8004f74:	4013      	ands	r3, r2
 8004f76:	d000      	beq.n	8004f7a <HAL_ADC_Init+0xc6>
 8004f78:	e122      	b.n	80051c0 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d000      	beq.n	8004f82 <HAL_ADC_Init+0xce>
 8004f80:	e11e      	b.n	80051c0 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f86:	4a99      	ldr	r2, [pc, #612]	; (80051ec <HAL_ADC_Init+0x338>)
 8004f88:	4013      	ands	r3, r2
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	431a      	orrs	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	0018      	movs	r0, r3
 8004f98:	f7ff ff56 	bl	8004e48 <LL_ADC_IsEnabled>
 8004f9c:	1e03      	subs	r3, r0, #0
 8004f9e:	d000      	beq.n	8004fa2 <HAL_ADC_Init+0xee>
 8004fa0:	e0ad      	b.n	80050fe <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	7e1b      	ldrb	r3, [r3, #24]
 8004faa:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8004fac:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	7e5b      	ldrb	r3, [r3, #25]
 8004fb2:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004fb4:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	7e9b      	ldrb	r3, [r3, #26]
 8004fba:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004fbc:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d002      	beq.n	8004fcc <HAL_ADC_Init+0x118>
 8004fc6:	2380      	movs	r3, #128	; 0x80
 8004fc8:	015b      	lsls	r3, r3, #5
 8004fca:	e000      	b.n	8004fce <HAL_ADC_Init+0x11a>
 8004fcc:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004fce:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004fd4:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	da04      	bge.n	8004fe8 <HAL_ADC_Init+0x134>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	005b      	lsls	r3, r3, #1
 8004fe4:	085b      	lsrs	r3, r3, #1
 8004fe6:	e001      	b.n	8004fec <HAL_ADC_Init+0x138>
 8004fe8:	2380      	movs	r3, #128	; 0x80
 8004fea:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8004fec:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	212c      	movs	r1, #44	; 0x2c
 8004ff2:	5c5b      	ldrb	r3, [r3, r1]
 8004ff4:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004ff6:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8004ff8:	69ba      	ldr	r2, [r7, #24]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2220      	movs	r2, #32
 8005002:	5c9b      	ldrb	r3, [r3, r2]
 8005004:	2b01      	cmp	r3, #1
 8005006:	d115      	bne.n	8005034 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	7e9b      	ldrb	r3, [r3, #26]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d105      	bne.n	800501c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	2280      	movs	r2, #128	; 0x80
 8005014:	0252      	lsls	r2, r2, #9
 8005016:	4313      	orrs	r3, r2
 8005018:	61bb      	str	r3, [r7, #24]
 800501a:	e00b      	b.n	8005034 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005020:	2220      	movs	r2, #32
 8005022:	431a      	orrs	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800502c:	2201      	movs	r2, #1
 800502e:	431a      	orrs	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00a      	beq.n	8005052 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005040:	23e0      	movs	r3, #224	; 0xe0
 8005042:	005b      	lsls	r3, r3, #1
 8005044:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800504a:	4313      	orrs	r3, r2
 800504c:	69ba      	ldr	r2, [r7, #24]
 800504e:	4313      	orrs	r3, r2
 8005050:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	4a65      	ldr	r2, [pc, #404]	; (80051f0 <HAL_ADC_Init+0x33c>)
 800505a:	4013      	ands	r3, r2
 800505c:	0019      	movs	r1, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	69ba      	ldr	r2, [r7, #24]
 8005064:	430a      	orrs	r2, r1
 8005066:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	0f9b      	lsrs	r3, r3, #30
 800506e:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005074:	4313      	orrs	r3, r2
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	4313      	orrs	r3, r2
 800507a:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	223c      	movs	r2, #60	; 0x3c
 8005080:	5c9b      	ldrb	r3, [r3, r2]
 8005082:	2b01      	cmp	r3, #1
 8005084:	d111      	bne.n	80050aa <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	0f9b      	lsrs	r3, r3, #30
 800508c:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005092:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                      hadc->Init.Oversampling.Ratio         |
 8005098:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800509e:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	2201      	movs	r2, #1
 80050a6:	4313      	orrs	r3, r2
 80050a8:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	4a50      	ldr	r2, [pc, #320]	; (80051f4 <HAL_ADC_Init+0x340>)
 80050b2:	4013      	ands	r3, r2
 80050b4:	0019      	movs	r1, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	430a      	orrs	r2, r1
 80050be:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685a      	ldr	r2, [r3, #4]
 80050c4:	23c0      	movs	r3, #192	; 0xc0
 80050c6:	061b      	lsls	r3, r3, #24
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d018      	beq.n	80050fe <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80050d0:	2380      	movs	r3, #128	; 0x80
 80050d2:	05db      	lsls	r3, r3, #23
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d012      	beq.n	80050fe <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80050dc:	2380      	movs	r3, #128	; 0x80
 80050de:	061b      	lsls	r3, r3, #24
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d00c      	beq.n	80050fe <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80050e4:	4b44      	ldr	r3, [pc, #272]	; (80051f8 <HAL_ADC_Init+0x344>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a44      	ldr	r2, [pc, #272]	; (80051fc <HAL_ADC_Init+0x348>)
 80050ea:	4013      	ands	r3, r2
 80050ec:	0019      	movs	r1, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685a      	ldr	r2, [r3, #4]
 80050f2:	23f0      	movs	r3, #240	; 0xf0
 80050f4:	039b      	lsls	r3, r3, #14
 80050f6:	401a      	ands	r2, r3
 80050f8:	4b3f      	ldr	r3, [pc, #252]	; (80051f8 <HAL_ADC_Init+0x344>)
 80050fa:	430a      	orrs	r2, r1
 80050fc:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6818      	ldr	r0, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005106:	001a      	movs	r2, r3
 8005108:	2100      	movs	r1, #0
 800510a:	f7ff fdac 	bl	8004c66 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6818      	ldr	r0, [r3, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005116:	493a      	ldr	r1, [pc, #232]	; (8005200 <HAL_ADC_Init+0x34c>)
 8005118:	001a      	movs	r2, r3
 800511a:	f7ff fda4 	bl	8004c66 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d109      	bne.n	800513a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2110      	movs	r1, #16
 8005132:	4249      	negs	r1, r1
 8005134:	430a      	orrs	r2, r1
 8005136:	629a      	str	r2, [r3, #40]	; 0x28
 8005138:	e018      	b.n	800516c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	691a      	ldr	r2, [r3, #16]
 800513e:	2380      	movs	r3, #128	; 0x80
 8005140:	039b      	lsls	r3, r3, #14
 8005142:	429a      	cmp	r2, r3
 8005144:	d112      	bne.n	800516c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	69db      	ldr	r3, [r3, #28]
 8005150:	3b01      	subs	r3, #1
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	221c      	movs	r2, #28
 8005156:	4013      	ands	r3, r2
 8005158:	2210      	movs	r2, #16
 800515a:	4252      	negs	r2, r2
 800515c:	409a      	lsls	r2, r3
 800515e:	0011      	movs	r1, r2
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	430a      	orrs	r2, r1
 800516a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2100      	movs	r1, #0
 8005172:	0018      	movs	r0, r3
 8005174:	f7ff fd94 	bl	8004ca0 <LL_ADC_GetSamplingTimeCommonChannels>
 8005178:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800517e:	429a      	cmp	r2, r3
 8005180:	d10b      	bne.n	800519a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800518c:	2203      	movs	r2, #3
 800518e:	4393      	bics	r3, r2
 8005190:	2201      	movs	r2, #1
 8005192:	431a      	orrs	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005198:	e01c      	b.n	80051d4 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800519e:	2212      	movs	r2, #18
 80051a0:	4393      	bics	r3, r2
 80051a2:	2210      	movs	r2, #16
 80051a4:	431a      	orrs	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ae:	2201      	movs	r2, #1
 80051b0:	431a      	orrs	r2, r3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80051b6:	231f      	movs	r3, #31
 80051b8:	18fb      	adds	r3, r7, r3
 80051ba:	2201      	movs	r2, #1
 80051bc:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80051be:	e009      	b.n	80051d4 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c4:	2210      	movs	r2, #16
 80051c6:	431a      	orrs	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80051cc:	231f      	movs	r3, #31
 80051ce:	18fb      	adds	r3, r7, r3
 80051d0:	2201      	movs	r2, #1
 80051d2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80051d4:	231f      	movs	r3, #31
 80051d6:	18fb      	adds	r3, r7, r3
 80051d8:	781b      	ldrb	r3, [r3, #0]
}
 80051da:	0018      	movs	r0, r3
 80051dc:	46bd      	mov	sp, r7
 80051de:	b008      	add	sp, #32
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	46c0      	nop			; (mov r8, r8)
 80051e4:	2000001c 	.word	0x2000001c
 80051e8:	00030d40 	.word	0x00030d40
 80051ec:	fffffefd 	.word	0xfffffefd
 80051f0:	ffde0201 	.word	0xffde0201
 80051f4:	1ffffc02 	.word	0x1ffffc02
 80051f8:	40012708 	.word	0x40012708
 80051fc:	ffc3ffff 	.word	0xffc3ffff
 8005200:	07ffff04 	.word	0x07ffff04

08005204 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005204:	b5b0      	push	{r4, r5, r7, lr}
 8005206:	b086      	sub	sp, #24
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	0018      	movs	r0, r3
 8005216:	f7ff fe3b 	bl	8004e90 <LL_ADC_REG_IsConversionOngoing>
 800521a:	1e03      	subs	r3, r0, #0
 800521c:	d16c      	bne.n	80052f8 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2254      	movs	r2, #84	; 0x54
 8005222:	5c9b      	ldrb	r3, [r3, r2]
 8005224:	2b01      	cmp	r3, #1
 8005226:	d101      	bne.n	800522c <HAL_ADC_Start_DMA+0x28>
 8005228:	2302      	movs	r3, #2
 800522a:	e06c      	b.n	8005306 <HAL_ADC_Start_DMA+0x102>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2254      	movs	r2, #84	; 0x54
 8005230:	2101      	movs	r1, #1
 8005232:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	2201      	movs	r2, #1
 800523c:	4013      	ands	r3, r2
 800523e:	d113      	bne.n	8005268 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	0018      	movs	r0, r3
 8005246:	f7ff fdff 	bl	8004e48 <LL_ADC_IsEnabled>
 800524a:	1e03      	subs	r3, r0, #0
 800524c:	d004      	beq.n	8005258 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	0018      	movs	r0, r3
 8005254:	f7ff fde6 	bl	8004e24 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68da      	ldr	r2, [r3, #12]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2101      	movs	r1, #1
 8005264:	430a      	orrs	r2, r1
 8005266:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005268:	2517      	movs	r5, #23
 800526a:	197c      	adds	r4, r7, r5
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	0018      	movs	r0, r3
 8005270:	f000 fa3e 	bl	80056f0 <ADC_Enable>
 8005274:	0003      	movs	r3, r0
 8005276:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005278:	002c      	movs	r4, r5
 800527a:	193b      	adds	r3, r7, r4
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d13e      	bne.n	8005300 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005286:	4a22      	ldr	r2, [pc, #136]	; (8005310 <HAL_ADC_Start_DMA+0x10c>)
 8005288:	4013      	ands	r3, r2
 800528a:	2280      	movs	r2, #128	; 0x80
 800528c:	0052      	lsls	r2, r2, #1
 800528e:	431a      	orrs	r2, r3
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800529e:	4a1d      	ldr	r2, [pc, #116]	; (8005314 <HAL_ADC_Start_DMA+0x110>)
 80052a0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052a6:	4a1c      	ldr	r2, [pc, #112]	; (8005318 <HAL_ADC_Start_DMA+0x114>)
 80052a8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ae:	4a1b      	ldr	r2, [pc, #108]	; (800531c <HAL_ADC_Start_DMA+0x118>)
 80052b0:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	221c      	movs	r2, #28
 80052b8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2254      	movs	r2, #84	; 0x54
 80052be:	2100      	movs	r1, #0
 80052c0:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	685a      	ldr	r2, [r3, #4]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2110      	movs	r1, #16
 80052ce:	430a      	orrs	r2, r1
 80052d0:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	3340      	adds	r3, #64	; 0x40
 80052dc:	0019      	movs	r1, r3
 80052de:	68ba      	ldr	r2, [r7, #8]
 80052e0:	193c      	adds	r4, r7, r4
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f000 fcb2 	bl	8005c4c <HAL_DMA_Start_IT>
 80052e8:	0003      	movs	r3, r0
 80052ea:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	0018      	movs	r0, r3
 80052f2:	f7ff fdbb 	bl	8004e6c <LL_ADC_REG_StartConversion>
 80052f6:	e003      	b.n	8005300 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80052f8:	2317      	movs	r3, #23
 80052fa:	18fb      	adds	r3, r7, r3
 80052fc:	2202      	movs	r2, #2
 80052fe:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8005300:	2317      	movs	r3, #23
 8005302:	18fb      	adds	r3, r7, r3
 8005304:	781b      	ldrb	r3, [r3, #0]
}
 8005306:	0018      	movs	r0, r3
 8005308:	46bd      	mov	sp, r7
 800530a:	b006      	add	sp, #24
 800530c:	bdb0      	pop	{r4, r5, r7, pc}
 800530e:	46c0      	nop			; (mov r8, r8)
 8005310:	fffff0fe 	.word	0xfffff0fe
 8005314:	080057fd 	.word	0x080057fd
 8005318:	080058c5 	.word	0x080058c5
 800531c:	080058e3 	.word	0x080058e3

08005320 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005328:	46c0      	nop			; (mov r8, r8)
 800532a:	46bd      	mov	sp, r7
 800532c:	b002      	add	sp, #8
 800532e:	bd80      	pop	{r7, pc}

08005330 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005338:	46c0      	nop			; (mov r8, r8)
 800533a:	46bd      	mov	sp, r7
 800533c:	b002      	add	sp, #8
 800533e:	bd80      	pop	{r7, pc}

08005340 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b086      	sub	sp, #24
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800534a:	2317      	movs	r3, #23
 800534c:	18fb      	adds	r3, r7, r3
 800534e:	2200      	movs	r2, #0
 8005350:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005352:	2300      	movs	r3, #0
 8005354:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2254      	movs	r2, #84	; 0x54
 800535a:	5c9b      	ldrb	r3, [r3, r2]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d101      	bne.n	8005364 <HAL_ADC_ConfigChannel+0x24>
 8005360:	2302      	movs	r3, #2
 8005362:	e1c0      	b.n	80056e6 <HAL_ADC_ConfigChannel+0x3a6>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2254      	movs	r2, #84	; 0x54
 8005368:	2101      	movs	r1, #1
 800536a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	0018      	movs	r0, r3
 8005372:	f7ff fd8d 	bl	8004e90 <LL_ADC_REG_IsConversionOngoing>
 8005376:	1e03      	subs	r3, r0, #0
 8005378:	d000      	beq.n	800537c <HAL_ADC_ConfigChannel+0x3c>
 800537a:	e1a3      	b.n	80056c4 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	2b02      	cmp	r3, #2
 8005382:	d100      	bne.n	8005386 <HAL_ADC_ConfigChannel+0x46>
 8005384:	e143      	b.n	800560e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	691a      	ldr	r2, [r3, #16]
 800538a:	2380      	movs	r3, #128	; 0x80
 800538c:	061b      	lsls	r3, r3, #24
 800538e:	429a      	cmp	r2, r3
 8005390:	d004      	beq.n	800539c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005396:	4ac1      	ldr	r2, [pc, #772]	; (800569c <HAL_ADC_ConfigChannel+0x35c>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d108      	bne.n	80053ae <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	0019      	movs	r1, r3
 80053a6:	0010      	movs	r0, r2
 80053a8:	f7ff fcc2 	bl	8004d30 <LL_ADC_REG_SetSequencerChAdd>
 80053ac:	e0c9      	b.n	8005542 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	211f      	movs	r1, #31
 80053b8:	400b      	ands	r3, r1
 80053ba:	210f      	movs	r1, #15
 80053bc:	4099      	lsls	r1, r3
 80053be:	000b      	movs	r3, r1
 80053c0:	43db      	mvns	r3, r3
 80053c2:	4013      	ands	r3, r2
 80053c4:	0019      	movs	r1, r3
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	035b      	lsls	r3, r3, #13
 80053cc:	0b5b      	lsrs	r3, r3, #13
 80053ce:	d105      	bne.n	80053dc <HAL_ADC_ConfigChannel+0x9c>
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	0e9b      	lsrs	r3, r3, #26
 80053d6:	221f      	movs	r2, #31
 80053d8:	4013      	ands	r3, r2
 80053da:	e098      	b.n	800550e <HAL_ADC_ConfigChannel+0x1ce>
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2201      	movs	r2, #1
 80053e2:	4013      	ands	r3, r2
 80053e4:	d000      	beq.n	80053e8 <HAL_ADC_ConfigChannel+0xa8>
 80053e6:	e091      	b.n	800550c <HAL_ADC_ConfigChannel+0x1cc>
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2202      	movs	r2, #2
 80053ee:	4013      	ands	r3, r2
 80053f0:	d000      	beq.n	80053f4 <HAL_ADC_ConfigChannel+0xb4>
 80053f2:	e089      	b.n	8005508 <HAL_ADC_ConfigChannel+0x1c8>
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2204      	movs	r2, #4
 80053fa:	4013      	ands	r3, r2
 80053fc:	d000      	beq.n	8005400 <HAL_ADC_ConfigChannel+0xc0>
 80053fe:	e081      	b.n	8005504 <HAL_ADC_ConfigChannel+0x1c4>
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2208      	movs	r2, #8
 8005406:	4013      	ands	r3, r2
 8005408:	d000      	beq.n	800540c <HAL_ADC_ConfigChannel+0xcc>
 800540a:	e079      	b.n	8005500 <HAL_ADC_ConfigChannel+0x1c0>
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2210      	movs	r2, #16
 8005412:	4013      	ands	r3, r2
 8005414:	d000      	beq.n	8005418 <HAL_ADC_ConfigChannel+0xd8>
 8005416:	e071      	b.n	80054fc <HAL_ADC_ConfigChannel+0x1bc>
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2220      	movs	r2, #32
 800541e:	4013      	ands	r3, r2
 8005420:	d000      	beq.n	8005424 <HAL_ADC_ConfigChannel+0xe4>
 8005422:	e069      	b.n	80054f8 <HAL_ADC_ConfigChannel+0x1b8>
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2240      	movs	r2, #64	; 0x40
 800542a:	4013      	ands	r3, r2
 800542c:	d000      	beq.n	8005430 <HAL_ADC_ConfigChannel+0xf0>
 800542e:	e061      	b.n	80054f4 <HAL_ADC_ConfigChannel+0x1b4>
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2280      	movs	r2, #128	; 0x80
 8005436:	4013      	ands	r3, r2
 8005438:	d000      	beq.n	800543c <HAL_ADC_ConfigChannel+0xfc>
 800543a:	e059      	b.n	80054f0 <HAL_ADC_ConfigChannel+0x1b0>
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	2380      	movs	r3, #128	; 0x80
 8005442:	005b      	lsls	r3, r3, #1
 8005444:	4013      	ands	r3, r2
 8005446:	d151      	bne.n	80054ec <HAL_ADC_ConfigChannel+0x1ac>
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	2380      	movs	r3, #128	; 0x80
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4013      	ands	r3, r2
 8005452:	d149      	bne.n	80054e8 <HAL_ADC_ConfigChannel+0x1a8>
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	2380      	movs	r3, #128	; 0x80
 800545a:	00db      	lsls	r3, r3, #3
 800545c:	4013      	ands	r3, r2
 800545e:	d141      	bne.n	80054e4 <HAL_ADC_ConfigChannel+0x1a4>
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	2380      	movs	r3, #128	; 0x80
 8005466:	011b      	lsls	r3, r3, #4
 8005468:	4013      	ands	r3, r2
 800546a:	d139      	bne.n	80054e0 <HAL_ADC_ConfigChannel+0x1a0>
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	2380      	movs	r3, #128	; 0x80
 8005472:	015b      	lsls	r3, r3, #5
 8005474:	4013      	ands	r3, r2
 8005476:	d131      	bne.n	80054dc <HAL_ADC_ConfigChannel+0x19c>
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	2380      	movs	r3, #128	; 0x80
 800547e:	019b      	lsls	r3, r3, #6
 8005480:	4013      	ands	r3, r2
 8005482:	d129      	bne.n	80054d8 <HAL_ADC_ConfigChannel+0x198>
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	2380      	movs	r3, #128	; 0x80
 800548a:	01db      	lsls	r3, r3, #7
 800548c:	4013      	ands	r3, r2
 800548e:	d121      	bne.n	80054d4 <HAL_ADC_ConfigChannel+0x194>
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	2380      	movs	r3, #128	; 0x80
 8005496:	021b      	lsls	r3, r3, #8
 8005498:	4013      	ands	r3, r2
 800549a:	d119      	bne.n	80054d0 <HAL_ADC_ConfigChannel+0x190>
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	2380      	movs	r3, #128	; 0x80
 80054a2:	025b      	lsls	r3, r3, #9
 80054a4:	4013      	ands	r3, r2
 80054a6:	d111      	bne.n	80054cc <HAL_ADC_ConfigChannel+0x18c>
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	2380      	movs	r3, #128	; 0x80
 80054ae:	029b      	lsls	r3, r3, #10
 80054b0:	4013      	ands	r3, r2
 80054b2:	d109      	bne.n	80054c8 <HAL_ADC_ConfigChannel+0x188>
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	2380      	movs	r3, #128	; 0x80
 80054ba:	02db      	lsls	r3, r3, #11
 80054bc:	4013      	ands	r3, r2
 80054be:	d001      	beq.n	80054c4 <HAL_ADC_ConfigChannel+0x184>
 80054c0:	2312      	movs	r3, #18
 80054c2:	e024      	b.n	800550e <HAL_ADC_ConfigChannel+0x1ce>
 80054c4:	2300      	movs	r3, #0
 80054c6:	e022      	b.n	800550e <HAL_ADC_ConfigChannel+0x1ce>
 80054c8:	2311      	movs	r3, #17
 80054ca:	e020      	b.n	800550e <HAL_ADC_ConfigChannel+0x1ce>
 80054cc:	2310      	movs	r3, #16
 80054ce:	e01e      	b.n	800550e <HAL_ADC_ConfigChannel+0x1ce>
 80054d0:	230f      	movs	r3, #15
 80054d2:	e01c      	b.n	800550e <HAL_ADC_ConfigChannel+0x1ce>
 80054d4:	230e      	movs	r3, #14
 80054d6:	e01a      	b.n	800550e <HAL_ADC_ConfigChannel+0x1ce>
 80054d8:	230d      	movs	r3, #13
 80054da:	e018      	b.n	800550e <HAL_ADC_ConfigChannel+0x1ce>
 80054dc:	230c      	movs	r3, #12
 80054de:	e016      	b.n	800550e <HAL_ADC_ConfigChannel+0x1ce>
 80054e0:	230b      	movs	r3, #11
 80054e2:	e014      	b.n	800550e <HAL_ADC_ConfigChannel+0x1ce>
 80054e4:	230a      	movs	r3, #10
 80054e6:	e012      	b.n	800550e <HAL_ADC_ConfigChannel+0x1ce>
 80054e8:	2309      	movs	r3, #9
 80054ea:	e010      	b.n	800550e <HAL_ADC_ConfigChannel+0x1ce>
 80054ec:	2308      	movs	r3, #8
 80054ee:	e00e      	b.n	800550e <HAL_ADC_ConfigChannel+0x1ce>
 80054f0:	2307      	movs	r3, #7
 80054f2:	e00c      	b.n	800550e <HAL_ADC_ConfigChannel+0x1ce>
 80054f4:	2306      	movs	r3, #6
 80054f6:	e00a      	b.n	800550e <HAL_ADC_ConfigChannel+0x1ce>
 80054f8:	2305      	movs	r3, #5
 80054fa:	e008      	b.n	800550e <HAL_ADC_ConfigChannel+0x1ce>
 80054fc:	2304      	movs	r3, #4
 80054fe:	e006      	b.n	800550e <HAL_ADC_ConfigChannel+0x1ce>
 8005500:	2303      	movs	r3, #3
 8005502:	e004      	b.n	800550e <HAL_ADC_ConfigChannel+0x1ce>
 8005504:	2302      	movs	r3, #2
 8005506:	e002      	b.n	800550e <HAL_ADC_ConfigChannel+0x1ce>
 8005508:	2301      	movs	r3, #1
 800550a:	e000      	b.n	800550e <HAL_ADC_ConfigChannel+0x1ce>
 800550c:	2300      	movs	r3, #0
 800550e:	683a      	ldr	r2, [r7, #0]
 8005510:	6852      	ldr	r2, [r2, #4]
 8005512:	201f      	movs	r0, #31
 8005514:	4002      	ands	r2, r0
 8005516:	4093      	lsls	r3, r2
 8005518:	000a      	movs	r2, r1
 800551a:	431a      	orrs	r2, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	089b      	lsrs	r3, r3, #2
 8005526:	1c5a      	adds	r2, r3, #1
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	69db      	ldr	r3, [r3, #28]
 800552c:	429a      	cmp	r2, r3
 800552e:	d808      	bhi.n	8005542 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6818      	ldr	r0, [r3, #0]
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	6859      	ldr	r1, [r3, #4]
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	001a      	movs	r2, r3
 800553e:	f7ff fbd7 	bl	8004cf0 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6818      	ldr	r0, [r3, #0]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	6819      	ldr	r1, [r3, #0]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	001a      	movs	r2, r3
 8005550:	f7ff fc12 	bl	8004d78 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	db00      	blt.n	800555e <HAL_ADC_ConfigChannel+0x21e>
 800555c:	e0bc      	b.n	80056d8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800555e:	4b50      	ldr	r3, [pc, #320]	; (80056a0 <HAL_ADC_ConfigChannel+0x360>)
 8005560:	0018      	movs	r0, r3
 8005562:	f7ff fb73 	bl	8004c4c <LL_ADC_GetCommonPathInternalCh>
 8005566:	0003      	movs	r3, r0
 8005568:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a4d      	ldr	r2, [pc, #308]	; (80056a4 <HAL_ADC_ConfigChannel+0x364>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d122      	bne.n	80055ba <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	2380      	movs	r3, #128	; 0x80
 8005578:	041b      	lsls	r3, r3, #16
 800557a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800557c:	d11d      	bne.n	80055ba <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	2280      	movs	r2, #128	; 0x80
 8005582:	0412      	lsls	r2, r2, #16
 8005584:	4313      	orrs	r3, r2
 8005586:	4a46      	ldr	r2, [pc, #280]	; (80056a0 <HAL_ADC_ConfigChannel+0x360>)
 8005588:	0019      	movs	r1, r3
 800558a:	0010      	movs	r0, r2
 800558c:	f7ff fb4a 	bl	8004c24 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005590:	4b45      	ldr	r3, [pc, #276]	; (80056a8 <HAL_ADC_ConfigChannel+0x368>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4945      	ldr	r1, [pc, #276]	; (80056ac <HAL_ADC_ConfigChannel+0x36c>)
 8005596:	0018      	movs	r0, r3
 8005598:	f7fa fdce 	bl	8000138 <__udivsi3>
 800559c:	0003      	movs	r3, r0
 800559e:	1c5a      	adds	r2, r3, #1
 80055a0:	0013      	movs	r3, r2
 80055a2:	005b      	lsls	r3, r3, #1
 80055a4:	189b      	adds	r3, r3, r2
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80055aa:	e002      	b.n	80055b2 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	3b01      	subs	r3, #1
 80055b0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1f9      	bne.n	80055ac <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80055b8:	e08e      	b.n	80056d8 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a3c      	ldr	r2, [pc, #240]	; (80056b0 <HAL_ADC_ConfigChannel+0x370>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d10e      	bne.n	80055e2 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80055c4:	693a      	ldr	r2, [r7, #16]
 80055c6:	2380      	movs	r3, #128	; 0x80
 80055c8:	045b      	lsls	r3, r3, #17
 80055ca:	4013      	ands	r3, r2
 80055cc:	d109      	bne.n	80055e2 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	2280      	movs	r2, #128	; 0x80
 80055d2:	0452      	lsls	r2, r2, #17
 80055d4:	4313      	orrs	r3, r2
 80055d6:	4a32      	ldr	r2, [pc, #200]	; (80056a0 <HAL_ADC_ConfigChannel+0x360>)
 80055d8:	0019      	movs	r1, r3
 80055da:	0010      	movs	r0, r2
 80055dc:	f7ff fb22 	bl	8004c24 <LL_ADC_SetCommonPathInternalCh>
 80055e0:	e07a      	b.n	80056d8 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a33      	ldr	r2, [pc, #204]	; (80056b4 <HAL_ADC_ConfigChannel+0x374>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d000      	beq.n	80055ee <HAL_ADC_ConfigChannel+0x2ae>
 80055ec:	e074      	b.n	80056d8 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80055ee:	693a      	ldr	r2, [r7, #16]
 80055f0:	2380      	movs	r3, #128	; 0x80
 80055f2:	03db      	lsls	r3, r3, #15
 80055f4:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80055f6:	d000      	beq.n	80055fa <HAL_ADC_ConfigChannel+0x2ba>
 80055f8:	e06e      	b.n	80056d8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	2280      	movs	r2, #128	; 0x80
 80055fe:	03d2      	lsls	r2, r2, #15
 8005600:	4313      	orrs	r3, r2
 8005602:	4a27      	ldr	r2, [pc, #156]	; (80056a0 <HAL_ADC_ConfigChannel+0x360>)
 8005604:	0019      	movs	r1, r3
 8005606:	0010      	movs	r0, r2
 8005608:	f7ff fb0c 	bl	8004c24 <LL_ADC_SetCommonPathInternalCh>
 800560c:	e064      	b.n	80056d8 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	691a      	ldr	r2, [r3, #16]
 8005612:	2380      	movs	r3, #128	; 0x80
 8005614:	061b      	lsls	r3, r3, #24
 8005616:	429a      	cmp	r2, r3
 8005618:	d004      	beq.n	8005624 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800561e:	4a1f      	ldr	r2, [pc, #124]	; (800569c <HAL_ADC_ConfigChannel+0x35c>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d107      	bne.n	8005634 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	0019      	movs	r1, r3
 800562e:	0010      	movs	r0, r2
 8005630:	f7ff fb8f 	bl	8004d52 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	da4d      	bge.n	80056d8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800563c:	4b18      	ldr	r3, [pc, #96]	; (80056a0 <HAL_ADC_ConfigChannel+0x360>)
 800563e:	0018      	movs	r0, r3
 8005640:	f7ff fb04 	bl	8004c4c <LL_ADC_GetCommonPathInternalCh>
 8005644:	0003      	movs	r3, r0
 8005646:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a15      	ldr	r2, [pc, #84]	; (80056a4 <HAL_ADC_ConfigChannel+0x364>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d108      	bne.n	8005664 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	4a18      	ldr	r2, [pc, #96]	; (80056b8 <HAL_ADC_ConfigChannel+0x378>)
 8005656:	4013      	ands	r3, r2
 8005658:	4a11      	ldr	r2, [pc, #68]	; (80056a0 <HAL_ADC_ConfigChannel+0x360>)
 800565a:	0019      	movs	r1, r3
 800565c:	0010      	movs	r0, r2
 800565e:	f7ff fae1 	bl	8004c24 <LL_ADC_SetCommonPathInternalCh>
 8005662:	e039      	b.n	80056d8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a11      	ldr	r2, [pc, #68]	; (80056b0 <HAL_ADC_ConfigChannel+0x370>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d108      	bne.n	8005680 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	4a12      	ldr	r2, [pc, #72]	; (80056bc <HAL_ADC_ConfigChannel+0x37c>)
 8005672:	4013      	ands	r3, r2
 8005674:	4a0a      	ldr	r2, [pc, #40]	; (80056a0 <HAL_ADC_ConfigChannel+0x360>)
 8005676:	0019      	movs	r1, r3
 8005678:	0010      	movs	r0, r2
 800567a:	f7ff fad3 	bl	8004c24 <LL_ADC_SetCommonPathInternalCh>
 800567e:	e02b      	b.n	80056d8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a0b      	ldr	r2, [pc, #44]	; (80056b4 <HAL_ADC_ConfigChannel+0x374>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d126      	bne.n	80056d8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	4a0c      	ldr	r2, [pc, #48]	; (80056c0 <HAL_ADC_ConfigChannel+0x380>)
 800568e:	4013      	ands	r3, r2
 8005690:	4a03      	ldr	r2, [pc, #12]	; (80056a0 <HAL_ADC_ConfigChannel+0x360>)
 8005692:	0019      	movs	r1, r3
 8005694:	0010      	movs	r0, r2
 8005696:	f7ff fac5 	bl	8004c24 <LL_ADC_SetCommonPathInternalCh>
 800569a:	e01d      	b.n	80056d8 <HAL_ADC_ConfigChannel+0x398>
 800569c:	80000004 	.word	0x80000004
 80056a0:	40012708 	.word	0x40012708
 80056a4:	b0001000 	.word	0xb0001000
 80056a8:	2000001c 	.word	0x2000001c
 80056ac:	00030d40 	.word	0x00030d40
 80056b0:	b8004000 	.word	0xb8004000
 80056b4:	b4002000 	.word	0xb4002000
 80056b8:	ff7fffff 	.word	0xff7fffff
 80056bc:	feffffff 	.word	0xfeffffff
 80056c0:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056c8:	2220      	movs	r2, #32
 80056ca:	431a      	orrs	r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80056d0:	2317      	movs	r3, #23
 80056d2:	18fb      	adds	r3, r7, r3
 80056d4:	2201      	movs	r2, #1
 80056d6:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2254      	movs	r2, #84	; 0x54
 80056dc:	2100      	movs	r1, #0
 80056de:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80056e0:	2317      	movs	r3, #23
 80056e2:	18fb      	adds	r3, r7, r3
 80056e4:	781b      	ldrb	r3, [r3, #0]
}
 80056e6:	0018      	movs	r0, r3
 80056e8:	46bd      	mov	sp, r7
 80056ea:	b006      	add	sp, #24
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	46c0      	nop			; (mov r8, r8)

080056f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80056f8:	2300      	movs	r3, #0
 80056fa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	0018      	movs	r0, r3
 8005702:	f7ff fba1 	bl	8004e48 <LL_ADC_IsEnabled>
 8005706:	1e03      	subs	r3, r0, #0
 8005708:	d000      	beq.n	800570c <ADC_Enable+0x1c>
 800570a:	e069      	b.n	80057e0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	4a36      	ldr	r2, [pc, #216]	; (80057ec <ADC_Enable+0xfc>)
 8005714:	4013      	ands	r3, r2
 8005716:	d00d      	beq.n	8005734 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800571c:	2210      	movs	r2, #16
 800571e:	431a      	orrs	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005728:	2201      	movs	r2, #1
 800572a:	431a      	orrs	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e056      	b.n	80057e2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	0018      	movs	r0, r3
 800573a:	f7ff fb61 	bl	8004e00 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 800573e:	4b2c      	ldr	r3, [pc, #176]	; (80057f0 <ADC_Enable+0x100>)
 8005740:	0018      	movs	r0, r3
 8005742:	f7ff fa83 	bl	8004c4c <LL_ADC_GetCommonPathInternalCh>
 8005746:	0002      	movs	r2, r0
 8005748:	2380      	movs	r3, #128	; 0x80
 800574a:	041b      	lsls	r3, r3, #16
 800574c:	4013      	ands	r3, r2
 800574e:	d00f      	beq.n	8005770 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005750:	4b28      	ldr	r3, [pc, #160]	; (80057f4 <ADC_Enable+0x104>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4928      	ldr	r1, [pc, #160]	; (80057f8 <ADC_Enable+0x108>)
 8005756:	0018      	movs	r0, r3
 8005758:	f7fa fcee 	bl	8000138 <__udivsi3>
 800575c:	0003      	movs	r3, r0
 800575e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8005760:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005762:	e002      	b.n	800576a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	3b01      	subs	r3, #1
 8005768:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1f9      	bne.n	8005764 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	7e5b      	ldrb	r3, [r3, #25]
 8005774:	2b01      	cmp	r3, #1
 8005776:	d033      	beq.n	80057e0 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8005778:	f7ff fa10 	bl	8004b9c <HAL_GetTick>
 800577c:	0003      	movs	r3, r0
 800577e:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005780:	e027      	b.n	80057d2 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	0018      	movs	r0, r3
 8005788:	f7ff fb5e 	bl	8004e48 <LL_ADC_IsEnabled>
 800578c:	1e03      	subs	r3, r0, #0
 800578e:	d104      	bne.n	800579a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	0018      	movs	r0, r3
 8005796:	f7ff fb33 	bl	8004e00 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800579a:	f7ff f9ff 	bl	8004b9c <HAL_GetTick>
 800579e:	0002      	movs	r2, r0
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d914      	bls.n	80057d2 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2201      	movs	r2, #1
 80057b0:	4013      	ands	r3, r2
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d00d      	beq.n	80057d2 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ba:	2210      	movs	r2, #16
 80057bc:	431a      	orrs	r2, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057c6:	2201      	movs	r2, #1
 80057c8:	431a      	orrs	r2, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e007      	b.n	80057e2 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2201      	movs	r2, #1
 80057da:	4013      	ands	r3, r2
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d1d0      	bne.n	8005782 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	0018      	movs	r0, r3
 80057e4:	46bd      	mov	sp, r7
 80057e6:	b004      	add	sp, #16
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	46c0      	nop			; (mov r8, r8)
 80057ec:	80000017 	.word	0x80000017
 80057f0:	40012708 	.word	0x40012708
 80057f4:	2000001c 	.word	0x2000001c
 80057f8:	00030d40 	.word	0x00030d40

080057fc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005808:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800580e:	2250      	movs	r2, #80	; 0x50
 8005810:	4013      	ands	r3, r2
 8005812:	d141      	bne.n	8005898 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005818:	2280      	movs	r2, #128	; 0x80
 800581a:	0092      	lsls	r2, r2, #2
 800581c:	431a      	orrs	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	0018      	movs	r0, r3
 8005828:	f7ff fa51 	bl	8004cce <LL_ADC_REG_IsTriggerSourceSWStart>
 800582c:	1e03      	subs	r3, r0, #0
 800582e:	d02e      	beq.n	800588e <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	7e9b      	ldrb	r3, [r3, #26]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d12a      	bne.n	800588e <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2208      	movs	r2, #8
 8005840:	4013      	ands	r3, r2
 8005842:	2b08      	cmp	r3, #8
 8005844:	d123      	bne.n	800588e <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	0018      	movs	r0, r3
 800584c:	f7ff fb20 	bl	8004e90 <LL_ADC_REG_IsConversionOngoing>
 8005850:	1e03      	subs	r3, r0, #0
 8005852:	d110      	bne.n	8005876 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	685a      	ldr	r2, [r3, #4]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	210c      	movs	r1, #12
 8005860:	438a      	bics	r2, r1
 8005862:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005868:	4a15      	ldr	r2, [pc, #84]	; (80058c0 <ADC_DMAConvCplt+0xc4>)
 800586a:	4013      	ands	r3, r2
 800586c:	2201      	movs	r2, #1
 800586e:	431a      	orrs	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	659a      	str	r2, [r3, #88]	; 0x58
 8005874:	e00b      	b.n	800588e <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800587a:	2220      	movs	r2, #32
 800587c:	431a      	orrs	r2, r3
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005886:	2201      	movs	r2, #1
 8005888:	431a      	orrs	r2, r3
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	0018      	movs	r0, r3
 8005892:	f7fe f833 	bl	80038fc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005896:	e00f      	b.n	80058b8 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800589c:	2210      	movs	r2, #16
 800589e:	4013      	ands	r3, r2
 80058a0:	d004      	beq.n	80058ac <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	0018      	movs	r0, r3
 80058a6:	f7ff fd43 	bl	8005330 <HAL_ADC_ErrorCallback>
}
 80058aa:	e005      	b.n	80058b8 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	0010      	movs	r0, r2
 80058b6:	4798      	blx	r3
}
 80058b8:	46c0      	nop			; (mov r8, r8)
 80058ba:	46bd      	mov	sp, r7
 80058bc:	b004      	add	sp, #16
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	fffffefe 	.word	0xfffffefe

080058c4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	0018      	movs	r0, r3
 80058d6:	f7ff fd23 	bl	8005320 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80058da:	46c0      	nop			; (mov r8, r8)
 80058dc:	46bd      	mov	sp, r7
 80058de:	b004      	add	sp, #16
 80058e0:	bd80      	pop	{r7, pc}

080058e2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80058e2:	b580      	push	{r7, lr}
 80058e4:	b084      	sub	sp, #16
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ee:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058f4:	2240      	movs	r2, #64	; 0x40
 80058f6:	431a      	orrs	r2, r3
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005900:	2204      	movs	r2, #4
 8005902:	431a      	orrs	r2, r3
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	0018      	movs	r0, r3
 800590c:	f7ff fd10 	bl	8005330 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005910:	46c0      	nop			; (mov r8, r8)
 8005912:	46bd      	mov	sp, r7
 8005914:	b004      	add	sp, #16
 8005916:	bd80      	pop	{r7, pc}

08005918 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
 800591e:	0002      	movs	r2, r0
 8005920:	1dfb      	adds	r3, r7, #7
 8005922:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005924:	1dfb      	adds	r3, r7, #7
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	2b7f      	cmp	r3, #127	; 0x7f
 800592a:	d809      	bhi.n	8005940 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800592c:	1dfb      	adds	r3, r7, #7
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	001a      	movs	r2, r3
 8005932:	231f      	movs	r3, #31
 8005934:	401a      	ands	r2, r3
 8005936:	4b04      	ldr	r3, [pc, #16]	; (8005948 <__NVIC_EnableIRQ+0x30>)
 8005938:	2101      	movs	r1, #1
 800593a:	4091      	lsls	r1, r2
 800593c:	000a      	movs	r2, r1
 800593e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8005940:	46c0      	nop			; (mov r8, r8)
 8005942:	46bd      	mov	sp, r7
 8005944:	b002      	add	sp, #8
 8005946:	bd80      	pop	{r7, pc}
 8005948:	e000e100 	.word	0xe000e100

0800594c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	0002      	movs	r2, r0
 8005954:	1dfb      	adds	r3, r7, #7
 8005956:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005958:	1dfb      	adds	r3, r7, #7
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	2b7f      	cmp	r3, #127	; 0x7f
 800595e:	d810      	bhi.n	8005982 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005960:	1dfb      	adds	r3, r7, #7
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	001a      	movs	r2, r3
 8005966:	231f      	movs	r3, #31
 8005968:	4013      	ands	r3, r2
 800596a:	4908      	ldr	r1, [pc, #32]	; (800598c <__NVIC_DisableIRQ+0x40>)
 800596c:	2201      	movs	r2, #1
 800596e:	409a      	lsls	r2, r3
 8005970:	0013      	movs	r3, r2
 8005972:	2280      	movs	r2, #128	; 0x80
 8005974:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005976:	f3bf 8f4f 	dsb	sy
}
 800597a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800597c:	f3bf 8f6f 	isb	sy
}
 8005980:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8005982:	46c0      	nop			; (mov r8, r8)
 8005984:	46bd      	mov	sp, r7
 8005986:	b002      	add	sp, #8
 8005988:	bd80      	pop	{r7, pc}
 800598a:	46c0      	nop			; (mov r8, r8)
 800598c:	e000e100 	.word	0xe000e100

08005990 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005990:	b590      	push	{r4, r7, lr}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	0002      	movs	r2, r0
 8005998:	6039      	str	r1, [r7, #0]
 800599a:	1dfb      	adds	r3, r7, #7
 800599c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800599e:	1dfb      	adds	r3, r7, #7
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	2b7f      	cmp	r3, #127	; 0x7f
 80059a4:	d828      	bhi.n	80059f8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80059a6:	4a2f      	ldr	r2, [pc, #188]	; (8005a64 <__NVIC_SetPriority+0xd4>)
 80059a8:	1dfb      	adds	r3, r7, #7
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	b25b      	sxtb	r3, r3
 80059ae:	089b      	lsrs	r3, r3, #2
 80059b0:	33c0      	adds	r3, #192	; 0xc0
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	589b      	ldr	r3, [r3, r2]
 80059b6:	1dfa      	adds	r2, r7, #7
 80059b8:	7812      	ldrb	r2, [r2, #0]
 80059ba:	0011      	movs	r1, r2
 80059bc:	2203      	movs	r2, #3
 80059be:	400a      	ands	r2, r1
 80059c0:	00d2      	lsls	r2, r2, #3
 80059c2:	21ff      	movs	r1, #255	; 0xff
 80059c4:	4091      	lsls	r1, r2
 80059c6:	000a      	movs	r2, r1
 80059c8:	43d2      	mvns	r2, r2
 80059ca:	401a      	ands	r2, r3
 80059cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	019b      	lsls	r3, r3, #6
 80059d2:	22ff      	movs	r2, #255	; 0xff
 80059d4:	401a      	ands	r2, r3
 80059d6:	1dfb      	adds	r3, r7, #7
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	0018      	movs	r0, r3
 80059dc:	2303      	movs	r3, #3
 80059de:	4003      	ands	r3, r0
 80059e0:	00db      	lsls	r3, r3, #3
 80059e2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80059e4:	481f      	ldr	r0, [pc, #124]	; (8005a64 <__NVIC_SetPriority+0xd4>)
 80059e6:	1dfb      	adds	r3, r7, #7
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	b25b      	sxtb	r3, r3
 80059ec:	089b      	lsrs	r3, r3, #2
 80059ee:	430a      	orrs	r2, r1
 80059f0:	33c0      	adds	r3, #192	; 0xc0
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80059f6:	e031      	b.n	8005a5c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80059f8:	4a1b      	ldr	r2, [pc, #108]	; (8005a68 <__NVIC_SetPriority+0xd8>)
 80059fa:	1dfb      	adds	r3, r7, #7
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	0019      	movs	r1, r3
 8005a00:	230f      	movs	r3, #15
 8005a02:	400b      	ands	r3, r1
 8005a04:	3b08      	subs	r3, #8
 8005a06:	089b      	lsrs	r3, r3, #2
 8005a08:	3306      	adds	r3, #6
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	18d3      	adds	r3, r2, r3
 8005a0e:	3304      	adds	r3, #4
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	1dfa      	adds	r2, r7, #7
 8005a14:	7812      	ldrb	r2, [r2, #0]
 8005a16:	0011      	movs	r1, r2
 8005a18:	2203      	movs	r2, #3
 8005a1a:	400a      	ands	r2, r1
 8005a1c:	00d2      	lsls	r2, r2, #3
 8005a1e:	21ff      	movs	r1, #255	; 0xff
 8005a20:	4091      	lsls	r1, r2
 8005a22:	000a      	movs	r2, r1
 8005a24:	43d2      	mvns	r2, r2
 8005a26:	401a      	ands	r2, r3
 8005a28:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	019b      	lsls	r3, r3, #6
 8005a2e:	22ff      	movs	r2, #255	; 0xff
 8005a30:	401a      	ands	r2, r3
 8005a32:	1dfb      	adds	r3, r7, #7
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	0018      	movs	r0, r3
 8005a38:	2303      	movs	r3, #3
 8005a3a:	4003      	ands	r3, r0
 8005a3c:	00db      	lsls	r3, r3, #3
 8005a3e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005a40:	4809      	ldr	r0, [pc, #36]	; (8005a68 <__NVIC_SetPriority+0xd8>)
 8005a42:	1dfb      	adds	r3, r7, #7
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	001c      	movs	r4, r3
 8005a48:	230f      	movs	r3, #15
 8005a4a:	4023      	ands	r3, r4
 8005a4c:	3b08      	subs	r3, #8
 8005a4e:	089b      	lsrs	r3, r3, #2
 8005a50:	430a      	orrs	r2, r1
 8005a52:	3306      	adds	r3, #6
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	18c3      	adds	r3, r0, r3
 8005a58:	3304      	adds	r3, #4
 8005a5a:	601a      	str	r2, [r3, #0]
}
 8005a5c:	46c0      	nop			; (mov r8, r8)
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	b003      	add	sp, #12
 8005a62:	bd90      	pop	{r4, r7, pc}
 8005a64:	e000e100 	.word	0xe000e100
 8005a68:	e000ed00 	.word	0xe000ed00

08005a6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	1e5a      	subs	r2, r3, #1
 8005a78:	2380      	movs	r3, #128	; 0x80
 8005a7a:	045b      	lsls	r3, r3, #17
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d301      	bcc.n	8005a84 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005a80:	2301      	movs	r3, #1
 8005a82:	e010      	b.n	8005aa6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a84:	4b0a      	ldr	r3, [pc, #40]	; (8005ab0 <SysTick_Config+0x44>)
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	3a01      	subs	r2, #1
 8005a8a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	425b      	negs	r3, r3
 8005a90:	2103      	movs	r1, #3
 8005a92:	0018      	movs	r0, r3
 8005a94:	f7ff ff7c 	bl	8005990 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a98:	4b05      	ldr	r3, [pc, #20]	; (8005ab0 <SysTick_Config+0x44>)
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a9e:	4b04      	ldr	r3, [pc, #16]	; (8005ab0 <SysTick_Config+0x44>)
 8005aa0:	2207      	movs	r2, #7
 8005aa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	0018      	movs	r0, r3
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	b002      	add	sp, #8
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	46c0      	nop			; (mov r8, r8)
 8005ab0:	e000e010 	.word	0xe000e010

08005ab4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60b9      	str	r1, [r7, #8]
 8005abc:	607a      	str	r2, [r7, #4]
 8005abe:	210f      	movs	r1, #15
 8005ac0:	187b      	adds	r3, r7, r1
 8005ac2:	1c02      	adds	r2, r0, #0
 8005ac4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8005ac6:	68ba      	ldr	r2, [r7, #8]
 8005ac8:	187b      	adds	r3, r7, r1
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	b25b      	sxtb	r3, r3
 8005ace:	0011      	movs	r1, r2
 8005ad0:	0018      	movs	r0, r3
 8005ad2:	f7ff ff5d 	bl	8005990 <__NVIC_SetPriority>
}
 8005ad6:	46c0      	nop			; (mov r8, r8)
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	b004      	add	sp, #16
 8005adc:	bd80      	pop	{r7, pc}

08005ade <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b082      	sub	sp, #8
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	0002      	movs	r2, r0
 8005ae6:	1dfb      	adds	r3, r7, #7
 8005ae8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005aea:	1dfb      	adds	r3, r7, #7
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	b25b      	sxtb	r3, r3
 8005af0:	0018      	movs	r0, r3
 8005af2:	f7ff ff11 	bl	8005918 <__NVIC_EnableIRQ>
}
 8005af6:	46c0      	nop			; (mov r8, r8)
 8005af8:	46bd      	mov	sp, r7
 8005afa:	b002      	add	sp, #8
 8005afc:	bd80      	pop	{r7, pc}

08005afe <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005afe:	b580      	push	{r7, lr}
 8005b00:	b082      	sub	sp, #8
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	0002      	movs	r2, r0
 8005b06:	1dfb      	adds	r3, r7, #7
 8005b08:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005b0a:	1dfb      	adds	r3, r7, #7
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	b25b      	sxtb	r3, r3
 8005b10:	0018      	movs	r0, r3
 8005b12:	f7ff ff1b 	bl	800594c <__NVIC_DisableIRQ>
}
 8005b16:	46c0      	nop			; (mov r8, r8)
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	b002      	add	sp, #8
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b1e:	b580      	push	{r7, lr}
 8005b20:	b082      	sub	sp, #8
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	0018      	movs	r0, r3
 8005b2a:	f7ff ff9f 	bl	8005a6c <SysTick_Config>
 8005b2e:	0003      	movs	r3, r0
}
 8005b30:	0018      	movs	r0, r3
 8005b32:	46bd      	mov	sp, r7
 8005b34:	b002      	add	sp, #8
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d101      	bne.n	8005b4a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e077      	b.n	8005c3a <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a3d      	ldr	r2, [pc, #244]	; (8005c44 <HAL_DMA_Init+0x10c>)
 8005b50:	4694      	mov	ip, r2
 8005b52:	4463      	add	r3, ip
 8005b54:	2114      	movs	r1, #20
 8005b56:	0018      	movs	r0, r3
 8005b58:	f7fa faee 	bl	8000138 <__udivsi3>
 8005b5c:	0003      	movs	r3, r0
 8005b5e:	009a      	lsls	r2, r3, #2
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2225      	movs	r2, #37	; 0x25
 8005b68:	2102      	movs	r1, #2
 8005b6a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4934      	ldr	r1, [pc, #208]	; (8005c48 <HAL_DMA_Init+0x110>)
 8005b78:	400a      	ands	r2, r1
 8005b7a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	6819      	ldr	r1, [r3, #0]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	689a      	ldr	r2, [r3, #8]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	431a      	orrs	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	431a      	orrs	r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	431a      	orrs	r2, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	431a      	orrs	r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	69db      	ldr	r3, [r3, #28]
 8005ba2:	431a      	orrs	r2, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a1b      	ldr	r3, [r3, #32]
 8005ba8:	431a      	orrs	r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	430a      	orrs	r2, r1
 8005bb0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	0018      	movs	r0, r3
 8005bb6:	f000 f9c1 	bl	8005f3c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	689a      	ldr	r2, [r3, #8]
 8005bbe:	2380      	movs	r3, #128	; 0x80
 8005bc0:	01db      	lsls	r3, r3, #7
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d102      	bne.n	8005bcc <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685a      	ldr	r2, [r3, #4]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bd4:	213f      	movs	r1, #63	; 0x3f
 8005bd6:	400a      	ands	r2, r1
 8005bd8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005be2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d011      	beq.n	8005c10 <HAL_DMA_Init+0xd8>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	2b04      	cmp	r3, #4
 8005bf2:	d80d      	bhi.n	8005c10 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	0018      	movs	r0, r3
 8005bf8:	f000 f9cc 	bl	8005f94 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c00:	2200      	movs	r2, #0
 8005c02:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005c0c:	605a      	str	r2, [r3, #4]
 8005c0e:	e008      	b.n	8005c22 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2225      	movs	r2, #37	; 0x25
 8005c2c:	2101      	movs	r1, #1
 8005c2e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2224      	movs	r2, #36	; 0x24
 8005c34:	2100      	movs	r1, #0
 8005c36:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	0018      	movs	r0, r3
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	b002      	add	sp, #8
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	46c0      	nop			; (mov r8, r8)
 8005c44:	bffdfff8 	.word	0xbffdfff8
 8005c48:	ffff800f 	.word	0xffff800f

08005c4c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b086      	sub	sp, #24
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]
 8005c58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c5a:	2317      	movs	r3, #23
 8005c5c:	18fb      	adds	r3, r7, r3
 8005c5e:	2200      	movs	r2, #0
 8005c60:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2224      	movs	r2, #36	; 0x24
 8005c66:	5c9b      	ldrb	r3, [r3, r2]
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d101      	bne.n	8005c70 <HAL_DMA_Start_IT+0x24>
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	e06f      	b.n	8005d50 <HAL_DMA_Start_IT+0x104>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2224      	movs	r2, #36	; 0x24
 8005c74:	2101      	movs	r1, #1
 8005c76:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2225      	movs	r2, #37	; 0x25
 8005c7c:	5c9b      	ldrb	r3, [r3, r2]
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d157      	bne.n	8005d34 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2225      	movs	r2, #37	; 0x25
 8005c88:	2102      	movs	r1, #2
 8005c8a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2101      	movs	r1, #1
 8005c9e:	438a      	bics	r2, r1
 8005ca0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	68b9      	ldr	r1, [r7, #8]
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	f000 f907 	bl	8005ebc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d008      	beq.n	8005cc8 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	210e      	movs	r1, #14
 8005cc2:	430a      	orrs	r2, r1
 8005cc4:	601a      	str	r2, [r3, #0]
 8005cc6:	e00f      	b.n	8005ce8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2104      	movs	r1, #4
 8005cd4:	438a      	bics	r2, r1
 8005cd6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	210a      	movs	r1, #10
 8005ce4:	430a      	orrs	r2, r1
 8005ce6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	2380      	movs	r3, #128	; 0x80
 8005cf0:	025b      	lsls	r3, r3, #9
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	d008      	beq.n	8005d08 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d00:	2180      	movs	r1, #128	; 0x80
 8005d02:	0049      	lsls	r1, r1, #1
 8005d04:	430a      	orrs	r2, r1
 8005d06:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d008      	beq.n	8005d22 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d1a:	2180      	movs	r1, #128	; 0x80
 8005d1c:	0049      	lsls	r1, r1, #1
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2101      	movs	r1, #1
 8005d2e:	430a      	orrs	r2, r1
 8005d30:	601a      	str	r2, [r3, #0]
 8005d32:	e00a      	b.n	8005d4a <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2280      	movs	r2, #128	; 0x80
 8005d38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2224      	movs	r2, #36	; 0x24
 8005d3e:	2100      	movs	r1, #0
 8005d40:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8005d42:	2317      	movs	r3, #23
 8005d44:	18fb      	adds	r3, r7, r3
 8005d46:	2201      	movs	r2, #1
 8005d48:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8005d4a:	2317      	movs	r3, #23
 8005d4c:	18fb      	adds	r3, r7, r3
 8005d4e:	781b      	ldrb	r3, [r3, #0]
}
 8005d50:	0018      	movs	r0, r3
 8005d52:	46bd      	mov	sp, r7
 8005d54:	b006      	add	sp, #24
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8005d60:	4b55      	ldr	r3, [pc, #340]	; (8005eb8 <HAL_DMA_IRQHandler+0x160>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d72:	221c      	movs	r2, #28
 8005d74:	4013      	ands	r3, r2
 8005d76:	2204      	movs	r2, #4
 8005d78:	409a      	lsls	r2, r3
 8005d7a:	0013      	movs	r3, r2
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	4013      	ands	r3, r2
 8005d80:	d027      	beq.n	8005dd2 <HAL_DMA_IRQHandler+0x7a>
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	2204      	movs	r2, #4
 8005d86:	4013      	ands	r3, r2
 8005d88:	d023      	beq.n	8005dd2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2220      	movs	r2, #32
 8005d92:	4013      	ands	r3, r2
 8005d94:	d107      	bne.n	8005da6 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2104      	movs	r1, #4
 8005da2:	438a      	bics	r2, r1
 8005da4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8005da6:	4b44      	ldr	r3, [pc, #272]	; (8005eb8 <HAL_DMA_IRQHandler+0x160>)
 8005da8:	6859      	ldr	r1, [r3, #4]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dae:	221c      	movs	r2, #28
 8005db0:	4013      	ands	r3, r2
 8005db2:	2204      	movs	r2, #4
 8005db4:	409a      	lsls	r2, r3
 8005db6:	4b40      	ldr	r3, [pc, #256]	; (8005eb8 <HAL_DMA_IRQHandler+0x160>)
 8005db8:	430a      	orrs	r2, r1
 8005dba:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d100      	bne.n	8005dc6 <HAL_DMA_IRQHandler+0x6e>
 8005dc4:	e073      	b.n	8005eae <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	0010      	movs	r0, r2
 8005dce:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8005dd0:	e06d      	b.n	8005eae <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd6:	221c      	movs	r2, #28
 8005dd8:	4013      	ands	r3, r2
 8005dda:	2202      	movs	r2, #2
 8005ddc:	409a      	lsls	r2, r3
 8005dde:	0013      	movs	r3, r2
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	4013      	ands	r3, r2
 8005de4:	d02e      	beq.n	8005e44 <HAL_DMA_IRQHandler+0xec>
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	2202      	movs	r2, #2
 8005dea:	4013      	ands	r3, r2
 8005dec:	d02a      	beq.n	8005e44 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2220      	movs	r2, #32
 8005df6:	4013      	ands	r3, r2
 8005df8:	d10b      	bne.n	8005e12 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	210a      	movs	r1, #10
 8005e06:	438a      	bics	r2, r1
 8005e08:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2225      	movs	r2, #37	; 0x25
 8005e0e:	2101      	movs	r1, #1
 8005e10:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8005e12:	4b29      	ldr	r3, [pc, #164]	; (8005eb8 <HAL_DMA_IRQHandler+0x160>)
 8005e14:	6859      	ldr	r1, [r3, #4]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1a:	221c      	movs	r2, #28
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	2202      	movs	r2, #2
 8005e20:	409a      	lsls	r2, r3
 8005e22:	4b25      	ldr	r3, [pc, #148]	; (8005eb8 <HAL_DMA_IRQHandler+0x160>)
 8005e24:	430a      	orrs	r2, r1
 8005e26:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2224      	movs	r2, #36	; 0x24
 8005e2c:	2100      	movs	r1, #0
 8005e2e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d03a      	beq.n	8005eae <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	0010      	movs	r0, r2
 8005e40:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8005e42:	e034      	b.n	8005eae <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e48:	221c      	movs	r2, #28
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	2208      	movs	r2, #8
 8005e4e:	409a      	lsls	r2, r3
 8005e50:	0013      	movs	r3, r2
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	4013      	ands	r3, r2
 8005e56:	d02b      	beq.n	8005eb0 <HAL_DMA_IRQHandler+0x158>
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	2208      	movs	r2, #8
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	d027      	beq.n	8005eb0 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	210e      	movs	r1, #14
 8005e6c:	438a      	bics	r2, r1
 8005e6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8005e70:	4b11      	ldr	r3, [pc, #68]	; (8005eb8 <HAL_DMA_IRQHandler+0x160>)
 8005e72:	6859      	ldr	r1, [r3, #4]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e78:	221c      	movs	r2, #28
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	409a      	lsls	r2, r3
 8005e80:	4b0d      	ldr	r3, [pc, #52]	; (8005eb8 <HAL_DMA_IRQHandler+0x160>)
 8005e82:	430a      	orrs	r2, r1
 8005e84:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2225      	movs	r2, #37	; 0x25
 8005e90:	2101      	movs	r1, #1
 8005e92:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2224      	movs	r2, #36	; 0x24
 8005e98:	2100      	movs	r1, #0
 8005e9a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d005      	beq.n	8005eb0 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	0010      	movs	r0, r2
 8005eac:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005eae:	46c0      	nop			; (mov r8, r8)
 8005eb0:	46c0      	nop			; (mov r8, r8)
}
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	b004      	add	sp, #16
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	40020000 	.word	0x40020000

08005ebc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
 8005ec8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005ed2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d004      	beq.n	8005ee6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005ee4:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8005ee6:	4b14      	ldr	r3, [pc, #80]	; (8005f38 <DMA_SetConfig+0x7c>)
 8005ee8:	6859      	ldr	r1, [r3, #4]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eee:	221c      	movs	r2, #28
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	409a      	lsls	r2, r3
 8005ef6:	4b10      	ldr	r3, [pc, #64]	; (8005f38 <DMA_SetConfig+0x7c>)
 8005ef8:	430a      	orrs	r2, r1
 8005efa:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	683a      	ldr	r2, [r7, #0]
 8005f02:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	2b10      	cmp	r3, #16
 8005f0a:	d108      	bne.n	8005f1e <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68ba      	ldr	r2, [r7, #8]
 8005f1a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005f1c:	e007      	b.n	8005f2e <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	60da      	str	r2, [r3, #12]
}
 8005f2e:	46c0      	nop			; (mov r8, r8)
 8005f30:	46bd      	mov	sp, r7
 8005f32:	b004      	add	sp, #16
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	46c0      	nop			; (mov r8, r8)
 8005f38:	40020000 	.word	0x40020000

08005f3c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f48:	089b      	lsrs	r3, r3, #2
 8005f4a:	4a10      	ldr	r2, [pc, #64]	; (8005f8c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8005f4c:	4694      	mov	ip, r2
 8005f4e:	4463      	add	r3, ip
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	001a      	movs	r2, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	001a      	movs	r2, r3
 8005f5e:	23ff      	movs	r3, #255	; 0xff
 8005f60:	4013      	ands	r3, r2
 8005f62:	3b08      	subs	r3, #8
 8005f64:	2114      	movs	r1, #20
 8005f66:	0018      	movs	r0, r3
 8005f68:	f7fa f8e6 	bl	8000138 <__udivsi3>
 8005f6c:	0003      	movs	r3, r0
 8005f6e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a07      	ldr	r2, [pc, #28]	; (8005f90 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8005f74:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	221f      	movs	r2, #31
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	409a      	lsls	r2, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8005f84:	46c0      	nop			; (mov r8, r8)
 8005f86:	46bd      	mov	sp, r7
 8005f88:	b004      	add	sp, #16
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	10008200 	.word	0x10008200
 8005f90:	40020880 	.word	0x40020880

08005f94 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	223f      	movs	r2, #63	; 0x3f
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	4a0a      	ldr	r2, [pc, #40]	; (8005fd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005faa:	4694      	mov	ip, r2
 8005fac:	4463      	add	r3, ip
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	001a      	movs	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a07      	ldr	r2, [pc, #28]	; (8005fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005fba:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	2203      	movs	r2, #3
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	409a      	lsls	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	659a      	str	r2, [r3, #88]	; 0x58
}
 8005fcc:	46c0      	nop			; (mov r8, r8)
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	b004      	add	sp, #16
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	1000823f 	.word	0x1000823f
 8005fd8:	40020940 	.word	0x40020940

08005fdc <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b086      	sub	sp, #24
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	607a      	str	r2, [r7, #4]
 8005fe6:	200b      	movs	r0, #11
 8005fe8:	183b      	adds	r3, r7, r0
 8005fea:	1c0a      	adds	r2, r1, #0
 8005fec:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fee:	2317      	movs	r3, #23
 8005ff0:	18fb      	adds	r3, r7, r3
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	701a      	strb	r2, [r3, #0]

  switch (CallbackID)
 8005ff6:	183b      	adds	r3, r7, r0
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d010      	beq.n	8006020 <HAL_EXTI_RegisterCallback+0x44>
 8005ffe:	dc13      	bgt.n	8006028 <HAL_EXTI_RegisterCallback+0x4c>
 8006000:	2b00      	cmp	r3, #0
 8006002:	d002      	beq.n	800600a <HAL_EXTI_RegisterCallback+0x2e>
 8006004:	2b01      	cmp	r3, #1
 8006006:	d007      	beq.n	8006018 <HAL_EXTI_RegisterCallback+0x3c>
 8006008:	e00e      	b.n	8006028 <HAL_EXTI_RegisterCallback+0x4c>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	609a      	str	r2, [r3, #8]
      break;
 8006016:	e00c      	b.n	8006032 <HAL_EXTI_RegisterCallback+0x56>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	605a      	str	r2, [r3, #4]
      break;
 800601e:	e008      	b.n	8006032 <HAL_EXTI_RegisterCallback+0x56>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	609a      	str	r2, [r3, #8]
      break;
 8006026:	e004      	b.n	8006032 <HAL_EXTI_RegisterCallback+0x56>

    default:
      status = HAL_ERROR;
 8006028:	2317      	movs	r3, #23
 800602a:	18fb      	adds	r3, r7, r3
 800602c:	2201      	movs	r2, #1
 800602e:	701a      	strb	r2, [r3, #0]
      break;
 8006030:	46c0      	nop			; (mov r8, r8)
  }

  return status;
 8006032:	2317      	movs	r3, #23
 8006034:	18fb      	adds	r3, r7, r3
 8006036:	781b      	ldrb	r3, [r3, #0]
}
 8006038:	0018      	movs	r0, r3
 800603a:	46bd      	mov	sp, r7
 800603c:	b006      	add	sp, #24
 800603e:	bd80      	pop	{r7, pc}

08006040 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d101      	bne.n	8006054 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e003      	b.n	800605c <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	683a      	ldr	r2, [r7, #0]
 8006058:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800605a:	2300      	movs	r3, #0
  }
}
 800605c:	0018      	movs	r0, r3
 800605e:	46bd      	mov	sp, r7
 8006060:	b002      	add	sp, #8
 8006062:	bd80      	pop	{r7, pc}

08006064 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b086      	sub	sp, #24
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	0c1b      	lsrs	r3, r3, #16
 8006072:	2201      	movs	r2, #1
 8006074:	4013      	ands	r3, r2
 8006076:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	221f      	movs	r2, #31
 800607e:	4013      	ands	r3, r2
 8006080:	2201      	movs	r2, #1
 8006082:	409a      	lsls	r2, r3
 8006084:	0013      	movs	r3, r2
 8006086:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	015b      	lsls	r3, r3, #5
 800608c:	4a18      	ldr	r2, [pc, #96]	; (80060f0 <HAL_EXTI_IRQHandler+0x8c>)
 800608e:	4694      	mov	ip, r2
 8006090:	4463      	add	r3, ip
 8006092:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	4013      	ands	r3, r2
 800609c:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d009      	beq.n	80060b8 <HAL_EXTI_IRQHandler+0x54>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d002      	beq.n	80060b8 <HAL_EXTI_IRQHandler+0x54>
    {
      hexti->RisingCallback();
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	015b      	lsls	r3, r3, #5
 80060bc:	4a0d      	ldr	r2, [pc, #52]	; (80060f4 <HAL_EXTI_IRQHandler+0x90>)
 80060be:	4694      	mov	ip, r2
 80060c0:	4463      	add	r3, ip
 80060c2:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	4013      	ands	r3, r2
 80060cc:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d009      	beq.n	80060e8 <HAL_EXTI_IRQHandler+0x84>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	693a      	ldr	r2, [r7, #16]
 80060d8:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d002      	beq.n	80060e8 <HAL_EXTI_IRQHandler+0x84>
    {
      hexti->FallingCallback();
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	4798      	blx	r3
    }
  }
}
 80060e8:	46c0      	nop			; (mov r8, r8)
 80060ea:	46bd      	mov	sp, r7
 80060ec:	b006      	add	sp, #24
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	4002180c 	.word	0x4002180c
 80060f4:	40021810 	.word	0x40021810

080060f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b086      	sub	sp, #24
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006102:	2300      	movs	r3, #0
 8006104:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006106:	e147      	b.n	8006398 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2101      	movs	r1, #1
 800610e:	697a      	ldr	r2, [r7, #20]
 8006110:	4091      	lsls	r1, r2
 8006112:	000a      	movs	r2, r1
 8006114:	4013      	ands	r3, r2
 8006116:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d100      	bne.n	8006120 <HAL_GPIO_Init+0x28>
 800611e:	e138      	b.n	8006392 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	2203      	movs	r2, #3
 8006126:	4013      	ands	r3, r2
 8006128:	2b01      	cmp	r3, #1
 800612a:	d005      	beq.n	8006138 <HAL_GPIO_Init+0x40>
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	2203      	movs	r2, #3
 8006132:	4013      	ands	r3, r2
 8006134:	2b02      	cmp	r3, #2
 8006136:	d130      	bne.n	800619a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	005b      	lsls	r3, r3, #1
 8006142:	2203      	movs	r2, #3
 8006144:	409a      	lsls	r2, r3
 8006146:	0013      	movs	r3, r2
 8006148:	43da      	mvns	r2, r3
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	4013      	ands	r3, r2
 800614e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	68da      	ldr	r2, [r3, #12]
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	005b      	lsls	r3, r3, #1
 8006158:	409a      	lsls	r2, r3
 800615a:	0013      	movs	r3, r2
 800615c:	693a      	ldr	r2, [r7, #16]
 800615e:	4313      	orrs	r3, r2
 8006160:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800616e:	2201      	movs	r2, #1
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	409a      	lsls	r2, r3
 8006174:	0013      	movs	r3, r2
 8006176:	43da      	mvns	r2, r3
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	4013      	ands	r3, r2
 800617c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	091b      	lsrs	r3, r3, #4
 8006184:	2201      	movs	r2, #1
 8006186:	401a      	ands	r2, r3
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	409a      	lsls	r2, r3
 800618c:	0013      	movs	r3, r2
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	4313      	orrs	r3, r2
 8006192:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	693a      	ldr	r2, [r7, #16]
 8006198:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	2203      	movs	r2, #3
 80061a0:	4013      	ands	r3, r2
 80061a2:	2b03      	cmp	r3, #3
 80061a4:	d017      	beq.n	80061d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	005b      	lsls	r3, r3, #1
 80061b0:	2203      	movs	r2, #3
 80061b2:	409a      	lsls	r2, r3
 80061b4:	0013      	movs	r3, r2
 80061b6:	43da      	mvns	r2, r3
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	4013      	ands	r3, r2
 80061bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	689a      	ldr	r2, [r3, #8]
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	005b      	lsls	r3, r3, #1
 80061c6:	409a      	lsls	r2, r3
 80061c8:	0013      	movs	r3, r2
 80061ca:	693a      	ldr	r2, [r7, #16]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	2203      	movs	r2, #3
 80061dc:	4013      	ands	r3, r2
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d123      	bne.n	800622a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	08da      	lsrs	r2, r3, #3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	3208      	adds	r2, #8
 80061ea:	0092      	lsls	r2, r2, #2
 80061ec:	58d3      	ldr	r3, [r2, r3]
 80061ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	2207      	movs	r2, #7
 80061f4:	4013      	ands	r3, r2
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	220f      	movs	r2, #15
 80061fa:	409a      	lsls	r2, r3
 80061fc:	0013      	movs	r3, r2
 80061fe:	43da      	mvns	r2, r3
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	4013      	ands	r3, r2
 8006204:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	691a      	ldr	r2, [r3, #16]
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	2107      	movs	r1, #7
 800620e:	400b      	ands	r3, r1
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	409a      	lsls	r2, r3
 8006214:	0013      	movs	r3, r2
 8006216:	693a      	ldr	r2, [r7, #16]
 8006218:	4313      	orrs	r3, r2
 800621a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	08da      	lsrs	r2, r3, #3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	3208      	adds	r2, #8
 8006224:	0092      	lsls	r2, r2, #2
 8006226:	6939      	ldr	r1, [r7, #16]
 8006228:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	005b      	lsls	r3, r3, #1
 8006234:	2203      	movs	r2, #3
 8006236:	409a      	lsls	r2, r3
 8006238:	0013      	movs	r3, r2
 800623a:	43da      	mvns	r2, r3
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	4013      	ands	r3, r2
 8006240:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	2203      	movs	r2, #3
 8006248:	401a      	ands	r2, r3
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	005b      	lsls	r3, r3, #1
 800624e:	409a      	lsls	r2, r3
 8006250:	0013      	movs	r3, r2
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	4313      	orrs	r3, r2
 8006256:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	693a      	ldr	r2, [r7, #16]
 800625c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	685a      	ldr	r2, [r3, #4]
 8006262:	23c0      	movs	r3, #192	; 0xc0
 8006264:	029b      	lsls	r3, r3, #10
 8006266:	4013      	ands	r3, r2
 8006268:	d100      	bne.n	800626c <HAL_GPIO_Init+0x174>
 800626a:	e092      	b.n	8006392 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800626c:	4a50      	ldr	r2, [pc, #320]	; (80063b0 <HAL_GPIO_Init+0x2b8>)
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	089b      	lsrs	r3, r3, #2
 8006272:	3318      	adds	r3, #24
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	589b      	ldr	r3, [r3, r2]
 8006278:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	2203      	movs	r2, #3
 800627e:	4013      	ands	r3, r2
 8006280:	00db      	lsls	r3, r3, #3
 8006282:	220f      	movs	r2, #15
 8006284:	409a      	lsls	r2, r3
 8006286:	0013      	movs	r3, r2
 8006288:	43da      	mvns	r2, r3
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	4013      	ands	r3, r2
 800628e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	23a0      	movs	r3, #160	; 0xa0
 8006294:	05db      	lsls	r3, r3, #23
 8006296:	429a      	cmp	r2, r3
 8006298:	d013      	beq.n	80062c2 <HAL_GPIO_Init+0x1ca>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a45      	ldr	r2, [pc, #276]	; (80063b4 <HAL_GPIO_Init+0x2bc>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d00d      	beq.n	80062be <HAL_GPIO_Init+0x1c6>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a44      	ldr	r2, [pc, #272]	; (80063b8 <HAL_GPIO_Init+0x2c0>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d007      	beq.n	80062ba <HAL_GPIO_Init+0x1c2>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a43      	ldr	r2, [pc, #268]	; (80063bc <HAL_GPIO_Init+0x2c4>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d101      	bne.n	80062b6 <HAL_GPIO_Init+0x1be>
 80062b2:	2303      	movs	r3, #3
 80062b4:	e006      	b.n	80062c4 <HAL_GPIO_Init+0x1cc>
 80062b6:	2305      	movs	r3, #5
 80062b8:	e004      	b.n	80062c4 <HAL_GPIO_Init+0x1cc>
 80062ba:	2302      	movs	r3, #2
 80062bc:	e002      	b.n	80062c4 <HAL_GPIO_Init+0x1cc>
 80062be:	2301      	movs	r3, #1
 80062c0:	e000      	b.n	80062c4 <HAL_GPIO_Init+0x1cc>
 80062c2:	2300      	movs	r3, #0
 80062c4:	697a      	ldr	r2, [r7, #20]
 80062c6:	2103      	movs	r1, #3
 80062c8:	400a      	ands	r2, r1
 80062ca:	00d2      	lsls	r2, r2, #3
 80062cc:	4093      	lsls	r3, r2
 80062ce:	693a      	ldr	r2, [r7, #16]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80062d4:	4936      	ldr	r1, [pc, #216]	; (80063b0 <HAL_GPIO_Init+0x2b8>)
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	089b      	lsrs	r3, r3, #2
 80062da:	3318      	adds	r3, #24
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	693a      	ldr	r2, [r7, #16]
 80062e0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80062e2:	4b33      	ldr	r3, [pc, #204]	; (80063b0 <HAL_GPIO_Init+0x2b8>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	43da      	mvns	r2, r3
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	4013      	ands	r3, r2
 80062f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	685a      	ldr	r2, [r3, #4]
 80062f6:	2380      	movs	r3, #128	; 0x80
 80062f8:	035b      	lsls	r3, r3, #13
 80062fa:	4013      	ands	r3, r2
 80062fc:	d003      	beq.n	8006306 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80062fe:	693a      	ldr	r2, [r7, #16]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	4313      	orrs	r3, r2
 8006304:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006306:	4b2a      	ldr	r3, [pc, #168]	; (80063b0 <HAL_GPIO_Init+0x2b8>)
 8006308:	693a      	ldr	r2, [r7, #16]
 800630a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800630c:	4b28      	ldr	r3, [pc, #160]	; (80063b0 <HAL_GPIO_Init+0x2b8>)
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	43da      	mvns	r2, r3
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	4013      	ands	r3, r2
 800631a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	685a      	ldr	r2, [r3, #4]
 8006320:	2380      	movs	r3, #128	; 0x80
 8006322:	039b      	lsls	r3, r3, #14
 8006324:	4013      	ands	r3, r2
 8006326:	d003      	beq.n	8006330 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8006328:	693a      	ldr	r2, [r7, #16]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	4313      	orrs	r3, r2
 800632e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006330:	4b1f      	ldr	r3, [pc, #124]	; (80063b0 <HAL_GPIO_Init+0x2b8>)
 8006332:	693a      	ldr	r2, [r7, #16]
 8006334:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006336:	4a1e      	ldr	r2, [pc, #120]	; (80063b0 <HAL_GPIO_Init+0x2b8>)
 8006338:	2384      	movs	r3, #132	; 0x84
 800633a:	58d3      	ldr	r3, [r2, r3]
 800633c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	43da      	mvns	r2, r3
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	4013      	ands	r3, r2
 8006346:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	685a      	ldr	r2, [r3, #4]
 800634c:	2380      	movs	r3, #128	; 0x80
 800634e:	029b      	lsls	r3, r3, #10
 8006350:	4013      	ands	r3, r2
 8006352:	d003      	beq.n	800635c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8006354:	693a      	ldr	r2, [r7, #16]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	4313      	orrs	r3, r2
 800635a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800635c:	4914      	ldr	r1, [pc, #80]	; (80063b0 <HAL_GPIO_Init+0x2b8>)
 800635e:	2284      	movs	r2, #132	; 0x84
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8006364:	4a12      	ldr	r2, [pc, #72]	; (80063b0 <HAL_GPIO_Init+0x2b8>)
 8006366:	2380      	movs	r3, #128	; 0x80
 8006368:	58d3      	ldr	r3, [r2, r3]
 800636a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	43da      	mvns	r2, r3
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	4013      	ands	r3, r2
 8006374:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	685a      	ldr	r2, [r3, #4]
 800637a:	2380      	movs	r3, #128	; 0x80
 800637c:	025b      	lsls	r3, r3, #9
 800637e:	4013      	ands	r3, r2
 8006380:	d003      	beq.n	800638a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8006382:	693a      	ldr	r2, [r7, #16]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	4313      	orrs	r3, r2
 8006388:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800638a:	4909      	ldr	r1, [pc, #36]	; (80063b0 <HAL_GPIO_Init+0x2b8>)
 800638c:	2280      	movs	r2, #128	; 0x80
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	3301      	adds	r3, #1
 8006396:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	40da      	lsrs	r2, r3
 80063a0:	1e13      	subs	r3, r2, #0
 80063a2:	d000      	beq.n	80063a6 <HAL_GPIO_Init+0x2ae>
 80063a4:	e6b0      	b.n	8006108 <HAL_GPIO_Init+0x10>
  }
}
 80063a6:	46c0      	nop			; (mov r8, r8)
 80063a8:	46c0      	nop			; (mov r8, r8)
 80063aa:	46bd      	mov	sp, r7
 80063ac:	b006      	add	sp, #24
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	40021800 	.word	0x40021800
 80063b4:	50000400 	.word	0x50000400
 80063b8:	50000800 	.word	0x50000800
 80063bc:	50000c00 	.word	0x50000c00

080063c0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b086      	sub	sp, #24
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80063ca:	2300      	movs	r3, #0
 80063cc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80063ce:	e0b4      	b.n	800653a <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80063d0:	2201      	movs	r2, #1
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	409a      	lsls	r2, r3
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	4013      	ands	r3, r2
 80063da:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d100      	bne.n	80063e4 <HAL_GPIO_DeInit+0x24>
 80063e2:	e0a7      	b.n	8006534 <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 80063e4:	4a5a      	ldr	r2, [pc, #360]	; (8006550 <HAL_GPIO_DeInit+0x190>)
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	089b      	lsrs	r3, r3, #2
 80063ea:	3318      	adds	r3, #24
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	589b      	ldr	r3, [r3, r2]
 80063f0:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	2203      	movs	r2, #3
 80063f6:	4013      	ands	r3, r2
 80063f8:	00db      	lsls	r3, r3, #3
 80063fa:	220f      	movs	r2, #15
 80063fc:	409a      	lsls	r2, r3
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	4013      	ands	r3, r2
 8006402:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	23a0      	movs	r3, #160	; 0xa0
 8006408:	05db      	lsls	r3, r3, #23
 800640a:	429a      	cmp	r2, r3
 800640c:	d013      	beq.n	8006436 <HAL_GPIO_DeInit+0x76>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a50      	ldr	r2, [pc, #320]	; (8006554 <HAL_GPIO_DeInit+0x194>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d00d      	beq.n	8006432 <HAL_GPIO_DeInit+0x72>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a4f      	ldr	r2, [pc, #316]	; (8006558 <HAL_GPIO_DeInit+0x198>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d007      	beq.n	800642e <HAL_GPIO_DeInit+0x6e>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a4e      	ldr	r2, [pc, #312]	; (800655c <HAL_GPIO_DeInit+0x19c>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d101      	bne.n	800642a <HAL_GPIO_DeInit+0x6a>
 8006426:	2303      	movs	r3, #3
 8006428:	e006      	b.n	8006438 <HAL_GPIO_DeInit+0x78>
 800642a:	2305      	movs	r3, #5
 800642c:	e004      	b.n	8006438 <HAL_GPIO_DeInit+0x78>
 800642e:	2302      	movs	r3, #2
 8006430:	e002      	b.n	8006438 <HAL_GPIO_DeInit+0x78>
 8006432:	2301      	movs	r3, #1
 8006434:	e000      	b.n	8006438 <HAL_GPIO_DeInit+0x78>
 8006436:	2300      	movs	r3, #0
 8006438:	697a      	ldr	r2, [r7, #20]
 800643a:	2103      	movs	r1, #3
 800643c:	400a      	ands	r2, r1
 800643e:	00d2      	lsls	r2, r2, #3
 8006440:	4093      	lsls	r3, r2
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	429a      	cmp	r2, r3
 8006446:	d136      	bne.n	80064b6 <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8006448:	4a41      	ldr	r2, [pc, #260]	; (8006550 <HAL_GPIO_DeInit+0x190>)
 800644a:	2380      	movs	r3, #128	; 0x80
 800644c:	58d3      	ldr	r3, [r2, r3]
 800644e:	693a      	ldr	r2, [r7, #16]
 8006450:	43d2      	mvns	r2, r2
 8006452:	493f      	ldr	r1, [pc, #252]	; (8006550 <HAL_GPIO_DeInit+0x190>)
 8006454:	4013      	ands	r3, r2
 8006456:	2280      	movs	r2, #128	; 0x80
 8006458:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 800645a:	4a3d      	ldr	r2, [pc, #244]	; (8006550 <HAL_GPIO_DeInit+0x190>)
 800645c:	2384      	movs	r3, #132	; 0x84
 800645e:	58d3      	ldr	r3, [r2, r3]
 8006460:	693a      	ldr	r2, [r7, #16]
 8006462:	43d2      	mvns	r2, r2
 8006464:	493a      	ldr	r1, [pc, #232]	; (8006550 <HAL_GPIO_DeInit+0x190>)
 8006466:	4013      	ands	r3, r2
 8006468:	2284      	movs	r2, #132	; 0x84
 800646a:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800646c:	4b38      	ldr	r3, [pc, #224]	; (8006550 <HAL_GPIO_DeInit+0x190>)
 800646e:	685a      	ldr	r2, [r3, #4]
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	43d9      	mvns	r1, r3
 8006474:	4b36      	ldr	r3, [pc, #216]	; (8006550 <HAL_GPIO_DeInit+0x190>)
 8006476:	400a      	ands	r2, r1
 8006478:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800647a:	4b35      	ldr	r3, [pc, #212]	; (8006550 <HAL_GPIO_DeInit+0x190>)
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	43d9      	mvns	r1, r3
 8006482:	4b33      	ldr	r3, [pc, #204]	; (8006550 <HAL_GPIO_DeInit+0x190>)
 8006484:	400a      	ands	r2, r1
 8006486:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	2203      	movs	r2, #3
 800648c:	4013      	ands	r3, r2
 800648e:	00db      	lsls	r3, r3, #3
 8006490:	220f      	movs	r2, #15
 8006492:	409a      	lsls	r2, r3
 8006494:	0013      	movs	r3, r2
 8006496:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8006498:	4a2d      	ldr	r2, [pc, #180]	; (8006550 <HAL_GPIO_DeInit+0x190>)
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	089b      	lsrs	r3, r3, #2
 800649e:	3318      	adds	r3, #24
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	589a      	ldr	r2, [r3, r2]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	43d9      	mvns	r1, r3
 80064a8:	4829      	ldr	r0, [pc, #164]	; (8006550 <HAL_GPIO_DeInit+0x190>)
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	089b      	lsrs	r3, r3, #2
 80064ae:	400a      	ands	r2, r1
 80064b0:	3318      	adds	r3, #24
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	005b      	lsls	r3, r3, #1
 80064be:	2103      	movs	r1, #3
 80064c0:	4099      	lsls	r1, r3
 80064c2:	000b      	movs	r3, r1
 80064c4:	431a      	orrs	r2, r3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	08da      	lsrs	r2, r3, #3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	3208      	adds	r2, #8
 80064d2:	0092      	lsls	r2, r2, #2
 80064d4:	58d3      	ldr	r3, [r2, r3]
 80064d6:	697a      	ldr	r2, [r7, #20]
 80064d8:	2107      	movs	r1, #7
 80064da:	400a      	ands	r2, r1
 80064dc:	0092      	lsls	r2, r2, #2
 80064de:	210f      	movs	r1, #15
 80064e0:	4091      	lsls	r1, r2
 80064e2:	000a      	movs	r2, r1
 80064e4:	43d1      	mvns	r1, r2
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	08d2      	lsrs	r2, r2, #3
 80064ea:	4019      	ands	r1, r3
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	3208      	adds	r2, #8
 80064f0:	0092      	lsls	r2, r2, #2
 80064f2:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	697a      	ldr	r2, [r7, #20]
 80064fa:	0052      	lsls	r2, r2, #1
 80064fc:	2103      	movs	r1, #3
 80064fe:	4091      	lsls	r1, r2
 8006500:	000a      	movs	r2, r1
 8006502:	43d2      	mvns	r2, r2
 8006504:	401a      	ands	r2, r3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	2101      	movs	r1, #1
 8006510:	697a      	ldr	r2, [r7, #20]
 8006512:	4091      	lsls	r1, r2
 8006514:	000a      	movs	r2, r1
 8006516:	43d2      	mvns	r2, r2
 8006518:	401a      	ands	r2, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	697a      	ldr	r2, [r7, #20]
 8006524:	0052      	lsls	r2, r2, #1
 8006526:	2103      	movs	r1, #3
 8006528:	4091      	lsls	r1, r2
 800652a:	000a      	movs	r2, r1
 800652c:	43d2      	mvns	r2, r2
 800652e:	401a      	ands	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	60da      	str	r2, [r3, #12]
    }

    position++;
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	3301      	adds	r3, #1
 8006538:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800653a:	683a      	ldr	r2, [r7, #0]
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	40da      	lsrs	r2, r3
 8006540:	1e13      	subs	r3, r2, #0
 8006542:	d000      	beq.n	8006546 <HAL_GPIO_DeInit+0x186>
 8006544:	e744      	b.n	80063d0 <HAL_GPIO_DeInit+0x10>
  }
}
 8006546:	46c0      	nop			; (mov r8, r8)
 8006548:	46c0      	nop			; (mov r8, r8)
 800654a:	46bd      	mov	sp, r7
 800654c:	b006      	add	sp, #24
 800654e:	bd80      	pop	{r7, pc}
 8006550:	40021800 	.word	0x40021800
 8006554:	50000400 	.word	0x50000400
 8006558:	50000800 	.word	0x50000800
 800655c:	50000c00 	.word	0x50000c00

08006560 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	000a      	movs	r2, r1
 800656a:	1cbb      	adds	r3, r7, #2
 800656c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	1cba      	adds	r2, r7, #2
 8006574:	8812      	ldrh	r2, [r2, #0]
 8006576:	4013      	ands	r3, r2
 8006578:	d004      	beq.n	8006584 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800657a:	230f      	movs	r3, #15
 800657c:	18fb      	adds	r3, r7, r3
 800657e:	2201      	movs	r2, #1
 8006580:	701a      	strb	r2, [r3, #0]
 8006582:	e003      	b.n	800658c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006584:	230f      	movs	r3, #15
 8006586:	18fb      	adds	r3, r7, r3
 8006588:	2200      	movs	r2, #0
 800658a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800658c:	230f      	movs	r3, #15
 800658e:	18fb      	adds	r3, r7, r3
 8006590:	781b      	ldrb	r3, [r3, #0]
}
 8006592:	0018      	movs	r0, r3
 8006594:	46bd      	mov	sp, r7
 8006596:	b004      	add	sp, #16
 8006598:	bd80      	pop	{r7, pc}

0800659a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800659a:	b580      	push	{r7, lr}
 800659c:	b082      	sub	sp, #8
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
 80065a2:	0008      	movs	r0, r1
 80065a4:	0011      	movs	r1, r2
 80065a6:	1cbb      	adds	r3, r7, #2
 80065a8:	1c02      	adds	r2, r0, #0
 80065aa:	801a      	strh	r2, [r3, #0]
 80065ac:	1c7b      	adds	r3, r7, #1
 80065ae:	1c0a      	adds	r2, r1, #0
 80065b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80065b2:	1c7b      	adds	r3, r7, #1
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d004      	beq.n	80065c4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80065ba:	1cbb      	adds	r3, r7, #2
 80065bc:	881a      	ldrh	r2, [r3, #0]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80065c2:	e003      	b.n	80065cc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80065c4:	1cbb      	adds	r3, r7, #2
 80065c6:	881a      	ldrh	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80065cc:	46c0      	nop			; (mov r8, r8)
 80065ce:	46bd      	mov	sp, r7
 80065d0:	b002      	add	sp, #8
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	000a      	movs	r2, r1
 80065de:	1cbb      	adds	r3, r7, #2
 80065e0:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	695b      	ldr	r3, [r3, #20]
 80065e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80065e8:	1cbb      	adds	r3, r7, #2
 80065ea:	881b      	ldrh	r3, [r3, #0]
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	4013      	ands	r3, r2
 80065f0:	041a      	lsls	r2, r3, #16
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	43db      	mvns	r3, r3
 80065f6:	1cb9      	adds	r1, r7, #2
 80065f8:	8809      	ldrh	r1, [r1, #0]
 80065fa:	400b      	ands	r3, r1
 80065fc:	431a      	orrs	r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	619a      	str	r2, [r3, #24]
}
 8006602:	46c0      	nop			; (mov r8, r8)
 8006604:	46bd      	mov	sp, r7
 8006606:	b004      	add	sp, #16
 8006608:	bd80      	pop	{r7, pc}
	...

0800660c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b082      	sub	sp, #8
 8006610:	af00      	add	r7, sp, #0
 8006612:	0002      	movs	r2, r0
 8006614:	1dbb      	adds	r3, r7, #6
 8006616:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8006618:	4b10      	ldr	r3, [pc, #64]	; (800665c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	1dba      	adds	r2, r7, #6
 800661e:	8812      	ldrh	r2, [r2, #0]
 8006620:	4013      	ands	r3, r2
 8006622:	d008      	beq.n	8006636 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8006624:	4b0d      	ldr	r3, [pc, #52]	; (800665c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8006626:	1dba      	adds	r2, r7, #6
 8006628:	8812      	ldrh	r2, [r2, #0]
 800662a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800662c:	1dbb      	adds	r3, r7, #6
 800662e:	881b      	ldrh	r3, [r3, #0]
 8006630:	0018      	movs	r0, r3
 8006632:	f000 f815 	bl	8006660 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8006636:	4b09      	ldr	r3, [pc, #36]	; (800665c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	1dba      	adds	r2, r7, #6
 800663c:	8812      	ldrh	r2, [r2, #0]
 800663e:	4013      	ands	r3, r2
 8006640:	d008      	beq.n	8006654 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8006642:	4b06      	ldr	r3, [pc, #24]	; (800665c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8006644:	1dba      	adds	r2, r7, #6
 8006646:	8812      	ldrh	r2, [r2, #0]
 8006648:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800664a:	1dbb      	adds	r3, r7, #6
 800664c:	881b      	ldrh	r3, [r3, #0]
 800664e:	0018      	movs	r0, r3
 8006650:	f000 f810 	bl	8006674 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8006654:	46c0      	nop			; (mov r8, r8)
 8006656:	46bd      	mov	sp, r7
 8006658:	b002      	add	sp, #8
 800665a:	bd80      	pop	{r7, pc}
 800665c:	40021800 	.word	0x40021800

08006660 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
 8006666:	0002      	movs	r2, r0
 8006668:	1dbb      	adds	r3, r7, #6
 800666a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800666c:	46c0      	nop			; (mov r8, r8)
 800666e:	46bd      	mov	sp, r7
 8006670:	b002      	add	sp, #8
 8006672:	bd80      	pop	{r7, pc}

08006674 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	af00      	add	r7, sp, #0
 800667a:	0002      	movs	r2, r0
 800667c:	1dbb      	adds	r3, r7, #6
 800667e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8006680:	46c0      	nop			; (mov r8, r8)
 8006682:	46bd      	mov	sp, r7
 8006684:	b002      	add	sp, #8
 8006686:	bd80      	pop	{r7, pc}

08006688 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8006690:	4b19      	ldr	r3, [pc, #100]	; (80066f8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a19      	ldr	r2, [pc, #100]	; (80066fc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8006696:	4013      	ands	r3, r2
 8006698:	0019      	movs	r1, r3
 800669a:	4b17      	ldr	r3, [pc, #92]	; (80066f8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	430a      	orrs	r2, r1
 80066a0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	2380      	movs	r3, #128	; 0x80
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d11f      	bne.n	80066ec <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80066ac:	4b14      	ldr	r3, [pc, #80]	; (8006700 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	0013      	movs	r3, r2
 80066b2:	005b      	lsls	r3, r3, #1
 80066b4:	189b      	adds	r3, r3, r2
 80066b6:	005b      	lsls	r3, r3, #1
 80066b8:	4912      	ldr	r1, [pc, #72]	; (8006704 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80066ba:	0018      	movs	r0, r3
 80066bc:	f7f9 fd3c 	bl	8000138 <__udivsi3>
 80066c0:	0003      	movs	r3, r0
 80066c2:	3301      	adds	r3, #1
 80066c4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80066c6:	e008      	b.n	80066da <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d003      	beq.n	80066d6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	3b01      	subs	r3, #1
 80066d2:	60fb      	str	r3, [r7, #12]
 80066d4:	e001      	b.n	80066da <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80066d6:	2303      	movs	r3, #3
 80066d8:	e009      	b.n	80066ee <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80066da:	4b07      	ldr	r3, [pc, #28]	; (80066f8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80066dc:	695a      	ldr	r2, [r3, #20]
 80066de:	2380      	movs	r3, #128	; 0x80
 80066e0:	00db      	lsls	r3, r3, #3
 80066e2:	401a      	ands	r2, r3
 80066e4:	2380      	movs	r3, #128	; 0x80
 80066e6:	00db      	lsls	r3, r3, #3
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d0ed      	beq.n	80066c8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	0018      	movs	r0, r3
 80066f0:	46bd      	mov	sp, r7
 80066f2:	b004      	add	sp, #16
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	46c0      	nop			; (mov r8, r8)
 80066f8:	40007000 	.word	0x40007000
 80066fc:	fffff9ff 	.word	0xfffff9ff
 8006700:	2000001c 	.word	0x2000001c
 8006704:	000f4240 	.word	0x000f4240

08006708 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800670c:	4b03      	ldr	r3, [pc, #12]	; (800671c <LL_RCC_GetAPB1Prescaler+0x14>)
 800670e:	689a      	ldr	r2, [r3, #8]
 8006710:	23e0      	movs	r3, #224	; 0xe0
 8006712:	01db      	lsls	r3, r3, #7
 8006714:	4013      	ands	r3, r2
}
 8006716:	0018      	movs	r0, r3
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}
 800671c:	40021000 	.word	0x40021000

08006720 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b088      	sub	sp, #32
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d101      	bne.n	8006732 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e2f3      	b.n	8006d1a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2201      	movs	r2, #1
 8006738:	4013      	ands	r3, r2
 800673a:	d100      	bne.n	800673e <HAL_RCC_OscConfig+0x1e>
 800673c:	e07c      	b.n	8006838 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800673e:	4bc3      	ldr	r3, [pc, #780]	; (8006a4c <HAL_RCC_OscConfig+0x32c>)
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	2238      	movs	r2, #56	; 0x38
 8006744:	4013      	ands	r3, r2
 8006746:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006748:	4bc0      	ldr	r3, [pc, #768]	; (8006a4c <HAL_RCC_OscConfig+0x32c>)
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	2203      	movs	r2, #3
 800674e:	4013      	ands	r3, r2
 8006750:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	2b10      	cmp	r3, #16
 8006756:	d102      	bne.n	800675e <HAL_RCC_OscConfig+0x3e>
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	2b03      	cmp	r3, #3
 800675c:	d002      	beq.n	8006764 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	2b08      	cmp	r3, #8
 8006762:	d10b      	bne.n	800677c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006764:	4bb9      	ldr	r3, [pc, #740]	; (8006a4c <HAL_RCC_OscConfig+0x32c>)
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	2380      	movs	r3, #128	; 0x80
 800676a:	029b      	lsls	r3, r3, #10
 800676c:	4013      	ands	r3, r2
 800676e:	d062      	beq.n	8006836 <HAL_RCC_OscConfig+0x116>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d15e      	bne.n	8006836 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e2ce      	b.n	8006d1a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685a      	ldr	r2, [r3, #4]
 8006780:	2380      	movs	r3, #128	; 0x80
 8006782:	025b      	lsls	r3, r3, #9
 8006784:	429a      	cmp	r2, r3
 8006786:	d107      	bne.n	8006798 <HAL_RCC_OscConfig+0x78>
 8006788:	4bb0      	ldr	r3, [pc, #704]	; (8006a4c <HAL_RCC_OscConfig+0x32c>)
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	4baf      	ldr	r3, [pc, #700]	; (8006a4c <HAL_RCC_OscConfig+0x32c>)
 800678e:	2180      	movs	r1, #128	; 0x80
 8006790:	0249      	lsls	r1, r1, #9
 8006792:	430a      	orrs	r2, r1
 8006794:	601a      	str	r2, [r3, #0]
 8006796:	e020      	b.n	80067da <HAL_RCC_OscConfig+0xba>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	685a      	ldr	r2, [r3, #4]
 800679c:	23a0      	movs	r3, #160	; 0xa0
 800679e:	02db      	lsls	r3, r3, #11
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d10e      	bne.n	80067c2 <HAL_RCC_OscConfig+0xa2>
 80067a4:	4ba9      	ldr	r3, [pc, #676]	; (8006a4c <HAL_RCC_OscConfig+0x32c>)
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	4ba8      	ldr	r3, [pc, #672]	; (8006a4c <HAL_RCC_OscConfig+0x32c>)
 80067aa:	2180      	movs	r1, #128	; 0x80
 80067ac:	02c9      	lsls	r1, r1, #11
 80067ae:	430a      	orrs	r2, r1
 80067b0:	601a      	str	r2, [r3, #0]
 80067b2:	4ba6      	ldr	r3, [pc, #664]	; (8006a4c <HAL_RCC_OscConfig+0x32c>)
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	4ba5      	ldr	r3, [pc, #660]	; (8006a4c <HAL_RCC_OscConfig+0x32c>)
 80067b8:	2180      	movs	r1, #128	; 0x80
 80067ba:	0249      	lsls	r1, r1, #9
 80067bc:	430a      	orrs	r2, r1
 80067be:	601a      	str	r2, [r3, #0]
 80067c0:	e00b      	b.n	80067da <HAL_RCC_OscConfig+0xba>
 80067c2:	4ba2      	ldr	r3, [pc, #648]	; (8006a4c <HAL_RCC_OscConfig+0x32c>)
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	4ba1      	ldr	r3, [pc, #644]	; (8006a4c <HAL_RCC_OscConfig+0x32c>)
 80067c8:	49a1      	ldr	r1, [pc, #644]	; (8006a50 <HAL_RCC_OscConfig+0x330>)
 80067ca:	400a      	ands	r2, r1
 80067cc:	601a      	str	r2, [r3, #0]
 80067ce:	4b9f      	ldr	r3, [pc, #636]	; (8006a4c <HAL_RCC_OscConfig+0x32c>)
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	4b9e      	ldr	r3, [pc, #632]	; (8006a4c <HAL_RCC_OscConfig+0x32c>)
 80067d4:	499f      	ldr	r1, [pc, #636]	; (8006a54 <HAL_RCC_OscConfig+0x334>)
 80067d6:	400a      	ands	r2, r1
 80067d8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d014      	beq.n	800680c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067e2:	f7fe f9db 	bl	8004b9c <HAL_GetTick>
 80067e6:	0003      	movs	r3, r0
 80067e8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80067ea:	e008      	b.n	80067fe <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067ec:	f7fe f9d6 	bl	8004b9c <HAL_GetTick>
 80067f0:	0002      	movs	r2, r0
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	2b64      	cmp	r3, #100	; 0x64
 80067f8:	d901      	bls.n	80067fe <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e28d      	b.n	8006d1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80067fe:	4b93      	ldr	r3, [pc, #588]	; (8006a4c <HAL_RCC_OscConfig+0x32c>)
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	2380      	movs	r3, #128	; 0x80
 8006804:	029b      	lsls	r3, r3, #10
 8006806:	4013      	ands	r3, r2
 8006808:	d0f0      	beq.n	80067ec <HAL_RCC_OscConfig+0xcc>
 800680a:	e015      	b.n	8006838 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800680c:	f7fe f9c6 	bl	8004b9c <HAL_GetTick>
 8006810:	0003      	movs	r3, r0
 8006812:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006814:	e008      	b.n	8006828 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006816:	f7fe f9c1 	bl	8004b9c <HAL_GetTick>
 800681a:	0002      	movs	r2, r0
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	1ad3      	subs	r3, r2, r3
 8006820:	2b64      	cmp	r3, #100	; 0x64
 8006822:	d901      	bls.n	8006828 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006824:	2303      	movs	r3, #3
 8006826:	e278      	b.n	8006d1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006828:	4b88      	ldr	r3, [pc, #544]	; (8006a4c <HAL_RCC_OscConfig+0x32c>)
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	2380      	movs	r3, #128	; 0x80
 800682e:	029b      	lsls	r3, r3, #10
 8006830:	4013      	ands	r3, r2
 8006832:	d1f0      	bne.n	8006816 <HAL_RCC_OscConfig+0xf6>
 8006834:	e000      	b.n	8006838 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006836:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2202      	movs	r2, #2
 800683e:	4013      	ands	r3, r2
 8006840:	d100      	bne.n	8006844 <HAL_RCC_OscConfig+0x124>
 8006842:	e099      	b.n	8006978 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006844:	4b81      	ldr	r3, [pc, #516]	; (8006a4c <HAL_RCC_OscConfig+0x32c>)
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	2238      	movs	r2, #56	; 0x38
 800684a:	4013      	ands	r3, r2
 800684c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800684e:	4b7f      	ldr	r3, [pc, #508]	; (8006a4c <HAL_RCC_OscConfig+0x32c>)
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	2203      	movs	r2, #3
 8006854:	4013      	ands	r3, r2
 8006856:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	2b10      	cmp	r3, #16
 800685c:	d102      	bne.n	8006864 <HAL_RCC_OscConfig+0x144>
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	2b02      	cmp	r3, #2
 8006862:	d002      	beq.n	800686a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8006864:	69bb      	ldr	r3, [r7, #24]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d135      	bne.n	80068d6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800686a:	4b78      	ldr	r3, [pc, #480]	; (8006a4c <HAL_RCC_OscConfig+0x32c>)
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	2380      	movs	r3, #128	; 0x80
 8006870:	00db      	lsls	r3, r3, #3
 8006872:	4013      	ands	r3, r2
 8006874:	d005      	beq.n	8006882 <HAL_RCC_OscConfig+0x162>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d101      	bne.n	8006882 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e24b      	b.n	8006d1a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006882:	4b72      	ldr	r3, [pc, #456]	; (8006a4c <HAL_RCC_OscConfig+0x32c>)
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	4a74      	ldr	r2, [pc, #464]	; (8006a58 <HAL_RCC_OscConfig+0x338>)
 8006888:	4013      	ands	r3, r2
 800688a:	0019      	movs	r1, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	695b      	ldr	r3, [r3, #20]
 8006890:	021a      	lsls	r2, r3, #8
 8006892:	4b6e      	ldr	r3, [pc, #440]	; (8006a4c <HAL_RCC_OscConfig+0x32c>)
 8006894:	430a      	orrs	r2, r1
 8006896:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d112      	bne.n	80068c4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800689e:	4b6b      	ldr	r3, [pc, #428]	; (8006a4c <HAL_RCC_OscConfig+0x32c>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a6e      	ldr	r2, [pc, #440]	; (8006a5c <HAL_RCC_OscConfig+0x33c>)
 80068a4:	4013      	ands	r3, r2
 80068a6:	0019      	movs	r1, r3
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	691a      	ldr	r2, [r3, #16]
 80068ac:	4b67      	ldr	r3, [pc, #412]	; (8006a4c <HAL_RCC_OscConfig+0x32c>)
 80068ae:	430a      	orrs	r2, r1
 80068b0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80068b2:	4b66      	ldr	r3, [pc, #408]	; (8006a4c <HAL_RCC_OscConfig+0x32c>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	0adb      	lsrs	r3, r3, #11
 80068b8:	2207      	movs	r2, #7
 80068ba:	4013      	ands	r3, r2
 80068bc:	4a68      	ldr	r2, [pc, #416]	; (8006a60 <HAL_RCC_OscConfig+0x340>)
 80068be:	40da      	lsrs	r2, r3
 80068c0:	4b68      	ldr	r3, [pc, #416]	; (8006a64 <HAL_RCC_OscConfig+0x344>)
 80068c2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80068c4:	4b68      	ldr	r3, [pc, #416]	; (8006a68 <HAL_RCC_OscConfig+0x348>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	0018      	movs	r0, r3
 80068ca:	f7fe f90b 	bl	8004ae4 <HAL_InitTick>
 80068ce:	1e03      	subs	r3, r0, #0
 80068d0:	d051      	beq.n	8006976 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e221      	b.n	8006d1a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d030      	beq.n	8006940 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80068de:	4b5b      	ldr	r3, [pc, #364]	; (8006a4c <HAL_RCC_OscConfig+0x32c>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a5e      	ldr	r2, [pc, #376]	; (8006a5c <HAL_RCC_OscConfig+0x33c>)
 80068e4:	4013      	ands	r3, r2
 80068e6:	0019      	movs	r1, r3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	691a      	ldr	r2, [r3, #16]
 80068ec:	4b57      	ldr	r3, [pc, #348]	; (8006a4c <HAL_RCC_OscConfig+0x32c>)
 80068ee:	430a      	orrs	r2, r1
 80068f0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80068f2:	4b56      	ldr	r3, [pc, #344]	; (8006a4c <HAL_RCC_OscConfig+0x32c>)
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	4b55      	ldr	r3, [pc, #340]	; (8006a4c <HAL_RCC_OscConfig+0x32c>)
 80068f8:	2180      	movs	r1, #128	; 0x80
 80068fa:	0049      	lsls	r1, r1, #1
 80068fc:	430a      	orrs	r2, r1
 80068fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006900:	f7fe f94c 	bl	8004b9c <HAL_GetTick>
 8006904:	0003      	movs	r3, r0
 8006906:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006908:	e008      	b.n	800691c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800690a:	f7fe f947 	bl	8004b9c <HAL_GetTick>
 800690e:	0002      	movs	r2, r0
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	2b02      	cmp	r3, #2
 8006916:	d901      	bls.n	800691c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006918:	2303      	movs	r3, #3
 800691a:	e1fe      	b.n	8006d1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800691c:	4b4b      	ldr	r3, [pc, #300]	; (8006a4c <HAL_RCC_OscConfig+0x32c>)
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	2380      	movs	r3, #128	; 0x80
 8006922:	00db      	lsls	r3, r3, #3
 8006924:	4013      	ands	r3, r2
 8006926:	d0f0      	beq.n	800690a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006928:	4b48      	ldr	r3, [pc, #288]	; (8006a4c <HAL_RCC_OscConfig+0x32c>)
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	4a4a      	ldr	r2, [pc, #296]	; (8006a58 <HAL_RCC_OscConfig+0x338>)
 800692e:	4013      	ands	r3, r2
 8006930:	0019      	movs	r1, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	695b      	ldr	r3, [r3, #20]
 8006936:	021a      	lsls	r2, r3, #8
 8006938:	4b44      	ldr	r3, [pc, #272]	; (8006a4c <HAL_RCC_OscConfig+0x32c>)
 800693a:	430a      	orrs	r2, r1
 800693c:	605a      	str	r2, [r3, #4]
 800693e:	e01b      	b.n	8006978 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8006940:	4b42      	ldr	r3, [pc, #264]	; (8006a4c <HAL_RCC_OscConfig+0x32c>)
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	4b41      	ldr	r3, [pc, #260]	; (8006a4c <HAL_RCC_OscConfig+0x32c>)
 8006946:	4949      	ldr	r1, [pc, #292]	; (8006a6c <HAL_RCC_OscConfig+0x34c>)
 8006948:	400a      	ands	r2, r1
 800694a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800694c:	f7fe f926 	bl	8004b9c <HAL_GetTick>
 8006950:	0003      	movs	r3, r0
 8006952:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006954:	e008      	b.n	8006968 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006956:	f7fe f921 	bl	8004b9c <HAL_GetTick>
 800695a:	0002      	movs	r2, r0
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	2b02      	cmp	r3, #2
 8006962:	d901      	bls.n	8006968 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006964:	2303      	movs	r3, #3
 8006966:	e1d8      	b.n	8006d1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006968:	4b38      	ldr	r3, [pc, #224]	; (8006a4c <HAL_RCC_OscConfig+0x32c>)
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	2380      	movs	r3, #128	; 0x80
 800696e:	00db      	lsls	r3, r3, #3
 8006970:	4013      	ands	r3, r2
 8006972:	d1f0      	bne.n	8006956 <HAL_RCC_OscConfig+0x236>
 8006974:	e000      	b.n	8006978 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006976:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2208      	movs	r2, #8
 800697e:	4013      	ands	r3, r2
 8006980:	d047      	beq.n	8006a12 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006982:	4b32      	ldr	r3, [pc, #200]	; (8006a4c <HAL_RCC_OscConfig+0x32c>)
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	2238      	movs	r2, #56	; 0x38
 8006988:	4013      	ands	r3, r2
 800698a:	2b18      	cmp	r3, #24
 800698c:	d10a      	bne.n	80069a4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800698e:	4b2f      	ldr	r3, [pc, #188]	; (8006a4c <HAL_RCC_OscConfig+0x32c>)
 8006990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006992:	2202      	movs	r2, #2
 8006994:	4013      	ands	r3, r2
 8006996:	d03c      	beq.n	8006a12 <HAL_RCC_OscConfig+0x2f2>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	699b      	ldr	r3, [r3, #24]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d138      	bne.n	8006a12 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	e1ba      	b.n	8006d1a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	699b      	ldr	r3, [r3, #24]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d019      	beq.n	80069e0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80069ac:	4b27      	ldr	r3, [pc, #156]	; (8006a4c <HAL_RCC_OscConfig+0x32c>)
 80069ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80069b0:	4b26      	ldr	r3, [pc, #152]	; (8006a4c <HAL_RCC_OscConfig+0x32c>)
 80069b2:	2101      	movs	r1, #1
 80069b4:	430a      	orrs	r2, r1
 80069b6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069b8:	f7fe f8f0 	bl	8004b9c <HAL_GetTick>
 80069bc:	0003      	movs	r3, r0
 80069be:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80069c0:	e008      	b.n	80069d4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069c2:	f7fe f8eb 	bl	8004b9c <HAL_GetTick>
 80069c6:	0002      	movs	r2, r0
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	1ad3      	subs	r3, r2, r3
 80069cc:	2b02      	cmp	r3, #2
 80069ce:	d901      	bls.n	80069d4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80069d0:	2303      	movs	r3, #3
 80069d2:	e1a2      	b.n	8006d1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80069d4:	4b1d      	ldr	r3, [pc, #116]	; (8006a4c <HAL_RCC_OscConfig+0x32c>)
 80069d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069d8:	2202      	movs	r2, #2
 80069da:	4013      	ands	r3, r2
 80069dc:	d0f1      	beq.n	80069c2 <HAL_RCC_OscConfig+0x2a2>
 80069de:	e018      	b.n	8006a12 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80069e0:	4b1a      	ldr	r3, [pc, #104]	; (8006a4c <HAL_RCC_OscConfig+0x32c>)
 80069e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80069e4:	4b19      	ldr	r3, [pc, #100]	; (8006a4c <HAL_RCC_OscConfig+0x32c>)
 80069e6:	2101      	movs	r1, #1
 80069e8:	438a      	bics	r2, r1
 80069ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069ec:	f7fe f8d6 	bl	8004b9c <HAL_GetTick>
 80069f0:	0003      	movs	r3, r0
 80069f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80069f4:	e008      	b.n	8006a08 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069f6:	f7fe f8d1 	bl	8004b9c <HAL_GetTick>
 80069fa:	0002      	movs	r2, r0
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	2b02      	cmp	r3, #2
 8006a02:	d901      	bls.n	8006a08 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8006a04:	2303      	movs	r3, #3
 8006a06:	e188      	b.n	8006d1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006a08:	4b10      	ldr	r3, [pc, #64]	; (8006a4c <HAL_RCC_OscConfig+0x32c>)
 8006a0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a0c:	2202      	movs	r2, #2
 8006a0e:	4013      	ands	r3, r2
 8006a10:	d1f1      	bne.n	80069f6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2204      	movs	r2, #4
 8006a18:	4013      	ands	r3, r2
 8006a1a:	d100      	bne.n	8006a1e <HAL_RCC_OscConfig+0x2fe>
 8006a1c:	e0c6      	b.n	8006bac <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a1e:	231f      	movs	r3, #31
 8006a20:	18fb      	adds	r3, r7, r3
 8006a22:	2200      	movs	r2, #0
 8006a24:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006a26:	4b09      	ldr	r3, [pc, #36]	; (8006a4c <HAL_RCC_OscConfig+0x32c>)
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	2238      	movs	r2, #56	; 0x38
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	2b20      	cmp	r3, #32
 8006a30:	d11e      	bne.n	8006a70 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8006a32:	4b06      	ldr	r3, [pc, #24]	; (8006a4c <HAL_RCC_OscConfig+0x32c>)
 8006a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a36:	2202      	movs	r2, #2
 8006a38:	4013      	ands	r3, r2
 8006a3a:	d100      	bne.n	8006a3e <HAL_RCC_OscConfig+0x31e>
 8006a3c:	e0b6      	b.n	8006bac <HAL_RCC_OscConfig+0x48c>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d000      	beq.n	8006a48 <HAL_RCC_OscConfig+0x328>
 8006a46:	e0b1      	b.n	8006bac <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e166      	b.n	8006d1a <HAL_RCC_OscConfig+0x5fa>
 8006a4c:	40021000 	.word	0x40021000
 8006a50:	fffeffff 	.word	0xfffeffff
 8006a54:	fffbffff 	.word	0xfffbffff
 8006a58:	ffff80ff 	.word	0xffff80ff
 8006a5c:	ffffc7ff 	.word	0xffffc7ff
 8006a60:	00f42400 	.word	0x00f42400
 8006a64:	2000001c 	.word	0x2000001c
 8006a68:	20000038 	.word	0x20000038
 8006a6c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006a70:	4bac      	ldr	r3, [pc, #688]	; (8006d24 <HAL_RCC_OscConfig+0x604>)
 8006a72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a74:	2380      	movs	r3, #128	; 0x80
 8006a76:	055b      	lsls	r3, r3, #21
 8006a78:	4013      	ands	r3, r2
 8006a7a:	d101      	bne.n	8006a80 <HAL_RCC_OscConfig+0x360>
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e000      	b.n	8006a82 <HAL_RCC_OscConfig+0x362>
 8006a80:	2300      	movs	r3, #0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d011      	beq.n	8006aaa <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006a86:	4ba7      	ldr	r3, [pc, #668]	; (8006d24 <HAL_RCC_OscConfig+0x604>)
 8006a88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a8a:	4ba6      	ldr	r3, [pc, #664]	; (8006d24 <HAL_RCC_OscConfig+0x604>)
 8006a8c:	2180      	movs	r1, #128	; 0x80
 8006a8e:	0549      	lsls	r1, r1, #21
 8006a90:	430a      	orrs	r2, r1
 8006a92:	63da      	str	r2, [r3, #60]	; 0x3c
 8006a94:	4ba3      	ldr	r3, [pc, #652]	; (8006d24 <HAL_RCC_OscConfig+0x604>)
 8006a96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a98:	2380      	movs	r3, #128	; 0x80
 8006a9a:	055b      	lsls	r3, r3, #21
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	60fb      	str	r3, [r7, #12]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8006aa2:	231f      	movs	r3, #31
 8006aa4:	18fb      	adds	r3, r7, r3
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006aaa:	4b9f      	ldr	r3, [pc, #636]	; (8006d28 <HAL_RCC_OscConfig+0x608>)
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	2380      	movs	r3, #128	; 0x80
 8006ab0:	005b      	lsls	r3, r3, #1
 8006ab2:	4013      	ands	r3, r2
 8006ab4:	d11a      	bne.n	8006aec <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ab6:	4b9c      	ldr	r3, [pc, #624]	; (8006d28 <HAL_RCC_OscConfig+0x608>)
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	4b9b      	ldr	r3, [pc, #620]	; (8006d28 <HAL_RCC_OscConfig+0x608>)
 8006abc:	2180      	movs	r1, #128	; 0x80
 8006abe:	0049      	lsls	r1, r1, #1
 8006ac0:	430a      	orrs	r2, r1
 8006ac2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8006ac4:	f7fe f86a 	bl	8004b9c <HAL_GetTick>
 8006ac8:	0003      	movs	r3, r0
 8006aca:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006acc:	e008      	b.n	8006ae0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ace:	f7fe f865 	bl	8004b9c <HAL_GetTick>
 8006ad2:	0002      	movs	r2, r0
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	d901      	bls.n	8006ae0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8006adc:	2303      	movs	r3, #3
 8006ade:	e11c      	b.n	8006d1a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ae0:	4b91      	ldr	r3, [pc, #580]	; (8006d28 <HAL_RCC_OscConfig+0x608>)
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	2380      	movs	r3, #128	; 0x80
 8006ae6:	005b      	lsls	r3, r3, #1
 8006ae8:	4013      	ands	r3, r2
 8006aea:	d0f0      	beq.n	8006ace <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d106      	bne.n	8006b02 <HAL_RCC_OscConfig+0x3e2>
 8006af4:	4b8b      	ldr	r3, [pc, #556]	; (8006d24 <HAL_RCC_OscConfig+0x604>)
 8006af6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006af8:	4b8a      	ldr	r3, [pc, #552]	; (8006d24 <HAL_RCC_OscConfig+0x604>)
 8006afa:	2101      	movs	r1, #1
 8006afc:	430a      	orrs	r2, r1
 8006afe:	65da      	str	r2, [r3, #92]	; 0x5c
 8006b00:	e01c      	b.n	8006b3c <HAL_RCC_OscConfig+0x41c>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	2b05      	cmp	r3, #5
 8006b08:	d10c      	bne.n	8006b24 <HAL_RCC_OscConfig+0x404>
 8006b0a:	4b86      	ldr	r3, [pc, #536]	; (8006d24 <HAL_RCC_OscConfig+0x604>)
 8006b0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006b0e:	4b85      	ldr	r3, [pc, #532]	; (8006d24 <HAL_RCC_OscConfig+0x604>)
 8006b10:	2104      	movs	r1, #4
 8006b12:	430a      	orrs	r2, r1
 8006b14:	65da      	str	r2, [r3, #92]	; 0x5c
 8006b16:	4b83      	ldr	r3, [pc, #524]	; (8006d24 <HAL_RCC_OscConfig+0x604>)
 8006b18:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006b1a:	4b82      	ldr	r3, [pc, #520]	; (8006d24 <HAL_RCC_OscConfig+0x604>)
 8006b1c:	2101      	movs	r1, #1
 8006b1e:	430a      	orrs	r2, r1
 8006b20:	65da      	str	r2, [r3, #92]	; 0x5c
 8006b22:	e00b      	b.n	8006b3c <HAL_RCC_OscConfig+0x41c>
 8006b24:	4b7f      	ldr	r3, [pc, #508]	; (8006d24 <HAL_RCC_OscConfig+0x604>)
 8006b26:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006b28:	4b7e      	ldr	r3, [pc, #504]	; (8006d24 <HAL_RCC_OscConfig+0x604>)
 8006b2a:	2101      	movs	r1, #1
 8006b2c:	438a      	bics	r2, r1
 8006b2e:	65da      	str	r2, [r3, #92]	; 0x5c
 8006b30:	4b7c      	ldr	r3, [pc, #496]	; (8006d24 <HAL_RCC_OscConfig+0x604>)
 8006b32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006b34:	4b7b      	ldr	r3, [pc, #492]	; (8006d24 <HAL_RCC_OscConfig+0x604>)
 8006b36:	2104      	movs	r1, #4
 8006b38:	438a      	bics	r2, r1
 8006b3a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d014      	beq.n	8006b6e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b44:	f7fe f82a 	bl	8004b9c <HAL_GetTick>
 8006b48:	0003      	movs	r3, r0
 8006b4a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b4c:	e009      	b.n	8006b62 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b4e:	f7fe f825 	bl	8004b9c <HAL_GetTick>
 8006b52:	0002      	movs	r2, r0
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	1ad3      	subs	r3, r2, r3
 8006b58:	4a74      	ldr	r2, [pc, #464]	; (8006d2c <HAL_RCC_OscConfig+0x60c>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d901      	bls.n	8006b62 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e0db      	b.n	8006d1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b62:	4b70      	ldr	r3, [pc, #448]	; (8006d24 <HAL_RCC_OscConfig+0x604>)
 8006b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b66:	2202      	movs	r2, #2
 8006b68:	4013      	ands	r3, r2
 8006b6a:	d0f0      	beq.n	8006b4e <HAL_RCC_OscConfig+0x42e>
 8006b6c:	e013      	b.n	8006b96 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b6e:	f7fe f815 	bl	8004b9c <HAL_GetTick>
 8006b72:	0003      	movs	r3, r0
 8006b74:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b76:	e009      	b.n	8006b8c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b78:	f7fe f810 	bl	8004b9c <HAL_GetTick>
 8006b7c:	0002      	movs	r2, r0
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	4a6a      	ldr	r2, [pc, #424]	; (8006d2c <HAL_RCC_OscConfig+0x60c>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d901      	bls.n	8006b8c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8006b88:	2303      	movs	r3, #3
 8006b8a:	e0c6      	b.n	8006d1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b8c:	4b65      	ldr	r3, [pc, #404]	; (8006d24 <HAL_RCC_OscConfig+0x604>)
 8006b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b90:	2202      	movs	r2, #2
 8006b92:	4013      	ands	r3, r2
 8006b94:	d1f0      	bne.n	8006b78 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006b96:	231f      	movs	r3, #31
 8006b98:	18fb      	adds	r3, r7, r3
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d105      	bne.n	8006bac <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8006ba0:	4b60      	ldr	r3, [pc, #384]	; (8006d24 <HAL_RCC_OscConfig+0x604>)
 8006ba2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ba4:	4b5f      	ldr	r3, [pc, #380]	; (8006d24 <HAL_RCC_OscConfig+0x604>)
 8006ba6:	4962      	ldr	r1, [pc, #392]	; (8006d30 <HAL_RCC_OscConfig+0x610>)
 8006ba8:	400a      	ands	r2, r1
 8006baa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	69db      	ldr	r3, [r3, #28]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d100      	bne.n	8006bb6 <HAL_RCC_OscConfig+0x496>
 8006bb4:	e0b0      	b.n	8006d18 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006bb6:	4b5b      	ldr	r3, [pc, #364]	; (8006d24 <HAL_RCC_OscConfig+0x604>)
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	2238      	movs	r2, #56	; 0x38
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	2b10      	cmp	r3, #16
 8006bc0:	d100      	bne.n	8006bc4 <HAL_RCC_OscConfig+0x4a4>
 8006bc2:	e078      	b.n	8006cb6 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	69db      	ldr	r3, [r3, #28]
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	d153      	bne.n	8006c74 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bcc:	4b55      	ldr	r3, [pc, #340]	; (8006d24 <HAL_RCC_OscConfig+0x604>)
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	4b54      	ldr	r3, [pc, #336]	; (8006d24 <HAL_RCC_OscConfig+0x604>)
 8006bd2:	4958      	ldr	r1, [pc, #352]	; (8006d34 <HAL_RCC_OscConfig+0x614>)
 8006bd4:	400a      	ands	r2, r1
 8006bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bd8:	f7fd ffe0 	bl	8004b9c <HAL_GetTick>
 8006bdc:	0003      	movs	r3, r0
 8006bde:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006be0:	e008      	b.n	8006bf4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006be2:	f7fd ffdb 	bl	8004b9c <HAL_GetTick>
 8006be6:	0002      	movs	r2, r0
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	1ad3      	subs	r3, r2, r3
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	d901      	bls.n	8006bf4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8006bf0:	2303      	movs	r3, #3
 8006bf2:	e092      	b.n	8006d1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006bf4:	4b4b      	ldr	r3, [pc, #300]	; (8006d24 <HAL_RCC_OscConfig+0x604>)
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	2380      	movs	r3, #128	; 0x80
 8006bfa:	049b      	lsls	r3, r3, #18
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	d1f0      	bne.n	8006be2 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c00:	4b48      	ldr	r3, [pc, #288]	; (8006d24 <HAL_RCC_OscConfig+0x604>)
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	4a4c      	ldr	r2, [pc, #304]	; (8006d38 <HAL_RCC_OscConfig+0x618>)
 8006c06:	4013      	ands	r3, r2
 8006c08:	0019      	movs	r1, r3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a1a      	ldr	r2, [r3, #32]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c12:	431a      	orrs	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c18:	021b      	lsls	r3, r3, #8
 8006c1a:	431a      	orrs	r2, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c20:	431a      	orrs	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c26:	431a      	orrs	r2, r3
 8006c28:	4b3e      	ldr	r3, [pc, #248]	; (8006d24 <HAL_RCC_OscConfig+0x604>)
 8006c2a:	430a      	orrs	r2, r1
 8006c2c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c2e:	4b3d      	ldr	r3, [pc, #244]	; (8006d24 <HAL_RCC_OscConfig+0x604>)
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	4b3c      	ldr	r3, [pc, #240]	; (8006d24 <HAL_RCC_OscConfig+0x604>)
 8006c34:	2180      	movs	r1, #128	; 0x80
 8006c36:	0449      	lsls	r1, r1, #17
 8006c38:	430a      	orrs	r2, r1
 8006c3a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8006c3c:	4b39      	ldr	r3, [pc, #228]	; (8006d24 <HAL_RCC_OscConfig+0x604>)
 8006c3e:	68da      	ldr	r2, [r3, #12]
 8006c40:	4b38      	ldr	r3, [pc, #224]	; (8006d24 <HAL_RCC_OscConfig+0x604>)
 8006c42:	2180      	movs	r1, #128	; 0x80
 8006c44:	0549      	lsls	r1, r1, #21
 8006c46:	430a      	orrs	r2, r1
 8006c48:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c4a:	f7fd ffa7 	bl	8004b9c <HAL_GetTick>
 8006c4e:	0003      	movs	r3, r0
 8006c50:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c52:	e008      	b.n	8006c66 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c54:	f7fd ffa2 	bl	8004b9c <HAL_GetTick>
 8006c58:	0002      	movs	r2, r0
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	d901      	bls.n	8006c66 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8006c62:	2303      	movs	r3, #3
 8006c64:	e059      	b.n	8006d1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c66:	4b2f      	ldr	r3, [pc, #188]	; (8006d24 <HAL_RCC_OscConfig+0x604>)
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	2380      	movs	r3, #128	; 0x80
 8006c6c:	049b      	lsls	r3, r3, #18
 8006c6e:	4013      	ands	r3, r2
 8006c70:	d0f0      	beq.n	8006c54 <HAL_RCC_OscConfig+0x534>
 8006c72:	e051      	b.n	8006d18 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c74:	4b2b      	ldr	r3, [pc, #172]	; (8006d24 <HAL_RCC_OscConfig+0x604>)
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	4b2a      	ldr	r3, [pc, #168]	; (8006d24 <HAL_RCC_OscConfig+0x604>)
 8006c7a:	492e      	ldr	r1, [pc, #184]	; (8006d34 <HAL_RCC_OscConfig+0x614>)
 8006c7c:	400a      	ands	r2, r1
 8006c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c80:	f7fd ff8c 	bl	8004b9c <HAL_GetTick>
 8006c84:	0003      	movs	r3, r0
 8006c86:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c88:	e008      	b.n	8006c9c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c8a:	f7fd ff87 	bl	8004b9c <HAL_GetTick>
 8006c8e:	0002      	movs	r2, r0
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	1ad3      	subs	r3, r2, r3
 8006c94:	2b02      	cmp	r3, #2
 8006c96:	d901      	bls.n	8006c9c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8006c98:	2303      	movs	r3, #3
 8006c9a:	e03e      	b.n	8006d1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c9c:	4b21      	ldr	r3, [pc, #132]	; (8006d24 <HAL_RCC_OscConfig+0x604>)
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	2380      	movs	r3, #128	; 0x80
 8006ca2:	049b      	lsls	r3, r3, #18
 8006ca4:	4013      	ands	r3, r2
 8006ca6:	d1f0      	bne.n	8006c8a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8006ca8:	4b1e      	ldr	r3, [pc, #120]	; (8006d24 <HAL_RCC_OscConfig+0x604>)
 8006caa:	68da      	ldr	r2, [r3, #12]
 8006cac:	4b1d      	ldr	r3, [pc, #116]	; (8006d24 <HAL_RCC_OscConfig+0x604>)
 8006cae:	4923      	ldr	r1, [pc, #140]	; (8006d3c <HAL_RCC_OscConfig+0x61c>)
 8006cb0:	400a      	ands	r2, r1
 8006cb2:	60da      	str	r2, [r3, #12]
 8006cb4:	e030      	b.n	8006d18 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	69db      	ldr	r3, [r3, #28]
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d101      	bne.n	8006cc2 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e02b      	b.n	8006d1a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8006cc2:	4b18      	ldr	r3, [pc, #96]	; (8006d24 <HAL_RCC_OscConfig+0x604>)
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	2203      	movs	r2, #3
 8006ccc:	401a      	ands	r2, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a1b      	ldr	r3, [r3, #32]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d11e      	bne.n	8006d14 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	2270      	movs	r2, #112	; 0x70
 8006cda:	401a      	ands	r2, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d117      	bne.n	8006d14 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ce4:	697a      	ldr	r2, [r7, #20]
 8006ce6:	23fe      	movs	r3, #254	; 0xfe
 8006ce8:	01db      	lsls	r3, r3, #7
 8006cea:	401a      	ands	r2, r3
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf0:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d10e      	bne.n	8006d14 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006cf6:	697a      	ldr	r2, [r7, #20]
 8006cf8:	23f8      	movs	r3, #248	; 0xf8
 8006cfa:	039b      	lsls	r3, r3, #14
 8006cfc:	401a      	ands	r2, r3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d106      	bne.n	8006d14 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	0f5b      	lsrs	r3, r3, #29
 8006d0a:	075a      	lsls	r2, r3, #29
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d001      	beq.n	8006d18 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	e000      	b.n	8006d1a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	0018      	movs	r0, r3
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	b008      	add	sp, #32
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	46c0      	nop			; (mov r8, r8)
 8006d24:	40021000 	.word	0x40021000
 8006d28:	40007000 	.word	0x40007000
 8006d2c:	00001388 	.word	0x00001388
 8006d30:	efffffff 	.word	0xefffffff
 8006d34:	feffffff 	.word	0xfeffffff
 8006d38:	1fc1808c 	.word	0x1fc1808c
 8006d3c:	effefffc 	.word	0xeffefffc

08006d40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d101      	bne.n	8006d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	e0e9      	b.n	8006f28 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d54:	4b76      	ldr	r3, [pc, #472]	; (8006f30 <HAL_RCC_ClockConfig+0x1f0>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2207      	movs	r2, #7
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	683a      	ldr	r2, [r7, #0]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d91e      	bls.n	8006da0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d62:	4b73      	ldr	r3, [pc, #460]	; (8006f30 <HAL_RCC_ClockConfig+0x1f0>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2207      	movs	r2, #7
 8006d68:	4393      	bics	r3, r2
 8006d6a:	0019      	movs	r1, r3
 8006d6c:	4b70      	ldr	r3, [pc, #448]	; (8006f30 <HAL_RCC_ClockConfig+0x1f0>)
 8006d6e:	683a      	ldr	r2, [r7, #0]
 8006d70:	430a      	orrs	r2, r1
 8006d72:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006d74:	f7fd ff12 	bl	8004b9c <HAL_GetTick>
 8006d78:	0003      	movs	r3, r0
 8006d7a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006d7c:	e009      	b.n	8006d92 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d7e:	f7fd ff0d 	bl	8004b9c <HAL_GetTick>
 8006d82:	0002      	movs	r2, r0
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	1ad3      	subs	r3, r2, r3
 8006d88:	4a6a      	ldr	r2, [pc, #424]	; (8006f34 <HAL_RCC_ClockConfig+0x1f4>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d901      	bls.n	8006d92 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8006d8e:	2303      	movs	r3, #3
 8006d90:	e0ca      	b.n	8006f28 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006d92:	4b67      	ldr	r3, [pc, #412]	; (8006f30 <HAL_RCC_ClockConfig+0x1f0>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2207      	movs	r2, #7
 8006d98:	4013      	ands	r3, r2
 8006d9a:	683a      	ldr	r2, [r7, #0]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d1ee      	bne.n	8006d7e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2202      	movs	r2, #2
 8006da6:	4013      	ands	r3, r2
 8006da8:	d015      	beq.n	8006dd6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	2204      	movs	r2, #4
 8006db0:	4013      	ands	r3, r2
 8006db2:	d006      	beq.n	8006dc2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006db4:	4b60      	ldr	r3, [pc, #384]	; (8006f38 <HAL_RCC_ClockConfig+0x1f8>)
 8006db6:	689a      	ldr	r2, [r3, #8]
 8006db8:	4b5f      	ldr	r3, [pc, #380]	; (8006f38 <HAL_RCC_ClockConfig+0x1f8>)
 8006dba:	21e0      	movs	r1, #224	; 0xe0
 8006dbc:	01c9      	lsls	r1, r1, #7
 8006dbe:	430a      	orrs	r2, r1
 8006dc0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006dc2:	4b5d      	ldr	r3, [pc, #372]	; (8006f38 <HAL_RCC_ClockConfig+0x1f8>)
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	4a5d      	ldr	r2, [pc, #372]	; (8006f3c <HAL_RCC_ClockConfig+0x1fc>)
 8006dc8:	4013      	ands	r3, r2
 8006dca:	0019      	movs	r1, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	689a      	ldr	r2, [r3, #8]
 8006dd0:	4b59      	ldr	r3, [pc, #356]	; (8006f38 <HAL_RCC_ClockConfig+0x1f8>)
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	4013      	ands	r3, r2
 8006dde:	d057      	beq.n	8006e90 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d107      	bne.n	8006df8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006de8:	4b53      	ldr	r3, [pc, #332]	; (8006f38 <HAL_RCC_ClockConfig+0x1f8>)
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	2380      	movs	r3, #128	; 0x80
 8006dee:	029b      	lsls	r3, r3, #10
 8006df0:	4013      	ands	r3, r2
 8006df2:	d12b      	bne.n	8006e4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e097      	b.n	8006f28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	2b02      	cmp	r3, #2
 8006dfe:	d107      	bne.n	8006e10 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e00:	4b4d      	ldr	r3, [pc, #308]	; (8006f38 <HAL_RCC_ClockConfig+0x1f8>)
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	2380      	movs	r3, #128	; 0x80
 8006e06:	049b      	lsls	r3, r3, #18
 8006e08:	4013      	ands	r3, r2
 8006e0a:	d11f      	bne.n	8006e4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e08b      	b.n	8006f28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d107      	bne.n	8006e28 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e18:	4b47      	ldr	r3, [pc, #284]	; (8006f38 <HAL_RCC_ClockConfig+0x1f8>)
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	2380      	movs	r3, #128	; 0x80
 8006e1e:	00db      	lsls	r3, r3, #3
 8006e20:	4013      	ands	r3, r2
 8006e22:	d113      	bne.n	8006e4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	e07f      	b.n	8006f28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	2b03      	cmp	r3, #3
 8006e2e:	d106      	bne.n	8006e3e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006e30:	4b41      	ldr	r3, [pc, #260]	; (8006f38 <HAL_RCC_ClockConfig+0x1f8>)
 8006e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e34:	2202      	movs	r2, #2
 8006e36:	4013      	ands	r3, r2
 8006e38:	d108      	bne.n	8006e4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e074      	b.n	8006f28 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e3e:	4b3e      	ldr	r3, [pc, #248]	; (8006f38 <HAL_RCC_ClockConfig+0x1f8>)
 8006e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e42:	2202      	movs	r2, #2
 8006e44:	4013      	ands	r3, r2
 8006e46:	d101      	bne.n	8006e4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e06d      	b.n	8006f28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006e4c:	4b3a      	ldr	r3, [pc, #232]	; (8006f38 <HAL_RCC_ClockConfig+0x1f8>)
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	2207      	movs	r2, #7
 8006e52:	4393      	bics	r3, r2
 8006e54:	0019      	movs	r1, r3
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	685a      	ldr	r2, [r3, #4]
 8006e5a:	4b37      	ldr	r3, [pc, #220]	; (8006f38 <HAL_RCC_ClockConfig+0x1f8>)
 8006e5c:	430a      	orrs	r2, r1
 8006e5e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e60:	f7fd fe9c 	bl	8004b9c <HAL_GetTick>
 8006e64:	0003      	movs	r3, r0
 8006e66:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e68:	e009      	b.n	8006e7e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e6a:	f7fd fe97 	bl	8004b9c <HAL_GetTick>
 8006e6e:	0002      	movs	r2, r0
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	1ad3      	subs	r3, r2, r3
 8006e74:	4a2f      	ldr	r2, [pc, #188]	; (8006f34 <HAL_RCC_ClockConfig+0x1f4>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d901      	bls.n	8006e7e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e054      	b.n	8006f28 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e7e:	4b2e      	ldr	r3, [pc, #184]	; (8006f38 <HAL_RCC_ClockConfig+0x1f8>)
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	2238      	movs	r2, #56	; 0x38
 8006e84:	401a      	ands	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	00db      	lsls	r3, r3, #3
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d1ec      	bne.n	8006e6a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e90:	4b27      	ldr	r3, [pc, #156]	; (8006f30 <HAL_RCC_ClockConfig+0x1f0>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2207      	movs	r2, #7
 8006e96:	4013      	ands	r3, r2
 8006e98:	683a      	ldr	r2, [r7, #0]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d21e      	bcs.n	8006edc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e9e:	4b24      	ldr	r3, [pc, #144]	; (8006f30 <HAL_RCC_ClockConfig+0x1f0>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2207      	movs	r2, #7
 8006ea4:	4393      	bics	r3, r2
 8006ea6:	0019      	movs	r1, r3
 8006ea8:	4b21      	ldr	r3, [pc, #132]	; (8006f30 <HAL_RCC_ClockConfig+0x1f0>)
 8006eaa:	683a      	ldr	r2, [r7, #0]
 8006eac:	430a      	orrs	r2, r1
 8006eae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006eb0:	f7fd fe74 	bl	8004b9c <HAL_GetTick>
 8006eb4:	0003      	movs	r3, r0
 8006eb6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006eb8:	e009      	b.n	8006ece <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006eba:	f7fd fe6f 	bl	8004b9c <HAL_GetTick>
 8006ebe:	0002      	movs	r2, r0
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	1ad3      	subs	r3, r2, r3
 8006ec4:	4a1b      	ldr	r2, [pc, #108]	; (8006f34 <HAL_RCC_ClockConfig+0x1f4>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d901      	bls.n	8006ece <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8006eca:	2303      	movs	r3, #3
 8006ecc:	e02c      	b.n	8006f28 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006ece:	4b18      	ldr	r3, [pc, #96]	; (8006f30 <HAL_RCC_ClockConfig+0x1f0>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	2207      	movs	r2, #7
 8006ed4:	4013      	ands	r3, r2
 8006ed6:	683a      	ldr	r2, [r7, #0]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d1ee      	bne.n	8006eba <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2204      	movs	r2, #4
 8006ee2:	4013      	ands	r3, r2
 8006ee4:	d009      	beq.n	8006efa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006ee6:	4b14      	ldr	r3, [pc, #80]	; (8006f38 <HAL_RCC_ClockConfig+0x1f8>)
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	4a15      	ldr	r2, [pc, #84]	; (8006f40 <HAL_RCC_ClockConfig+0x200>)
 8006eec:	4013      	ands	r3, r2
 8006eee:	0019      	movs	r1, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	68da      	ldr	r2, [r3, #12]
 8006ef4:	4b10      	ldr	r3, [pc, #64]	; (8006f38 <HAL_RCC_ClockConfig+0x1f8>)
 8006ef6:	430a      	orrs	r2, r1
 8006ef8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006efa:	f000 f829 	bl	8006f50 <HAL_RCC_GetSysClockFreq>
 8006efe:	0001      	movs	r1, r0
 8006f00:	4b0d      	ldr	r3, [pc, #52]	; (8006f38 <HAL_RCC_ClockConfig+0x1f8>)
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	0a1b      	lsrs	r3, r3, #8
 8006f06:	220f      	movs	r2, #15
 8006f08:	401a      	ands	r2, r3
 8006f0a:	4b0e      	ldr	r3, [pc, #56]	; (8006f44 <HAL_RCC_ClockConfig+0x204>)
 8006f0c:	0092      	lsls	r2, r2, #2
 8006f0e:	58d3      	ldr	r3, [r2, r3]
 8006f10:	221f      	movs	r2, #31
 8006f12:	4013      	ands	r3, r2
 8006f14:	000a      	movs	r2, r1
 8006f16:	40da      	lsrs	r2, r3
 8006f18:	4b0b      	ldr	r3, [pc, #44]	; (8006f48 <HAL_RCC_ClockConfig+0x208>)
 8006f1a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006f1c:	4b0b      	ldr	r3, [pc, #44]	; (8006f4c <HAL_RCC_ClockConfig+0x20c>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	0018      	movs	r0, r3
 8006f22:	f7fd fddf 	bl	8004ae4 <HAL_InitTick>
 8006f26:	0003      	movs	r3, r0
}
 8006f28:	0018      	movs	r0, r3
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	b004      	add	sp, #16
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	40022000 	.word	0x40022000
 8006f34:	00001388 	.word	0x00001388
 8006f38:	40021000 	.word	0x40021000
 8006f3c:	fffff0ff 	.word	0xfffff0ff
 8006f40:	ffff8fff 	.word	0xffff8fff
 8006f44:	08011228 	.word	0x08011228
 8006f48:	2000001c 	.word	0x2000001c
 8006f4c:	20000038 	.word	0x20000038

08006f50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b086      	sub	sp, #24
 8006f54:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006f56:	4b3c      	ldr	r3, [pc, #240]	; (8007048 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	2238      	movs	r2, #56	; 0x38
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	d10f      	bne.n	8006f80 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8006f60:	4b39      	ldr	r3, [pc, #228]	; (8007048 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	0adb      	lsrs	r3, r3, #11
 8006f66:	2207      	movs	r2, #7
 8006f68:	4013      	ands	r3, r2
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	409a      	lsls	r2, r3
 8006f6e:	0013      	movs	r3, r2
 8006f70:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8006f72:	6839      	ldr	r1, [r7, #0]
 8006f74:	4835      	ldr	r0, [pc, #212]	; (800704c <HAL_RCC_GetSysClockFreq+0xfc>)
 8006f76:	f7f9 f8df 	bl	8000138 <__udivsi3>
 8006f7a:	0003      	movs	r3, r0
 8006f7c:	613b      	str	r3, [r7, #16]
 8006f7e:	e05d      	b.n	800703c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006f80:	4b31      	ldr	r3, [pc, #196]	; (8007048 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	2238      	movs	r2, #56	; 0x38
 8006f86:	4013      	ands	r3, r2
 8006f88:	2b08      	cmp	r3, #8
 8006f8a:	d102      	bne.n	8006f92 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006f8c:	4b30      	ldr	r3, [pc, #192]	; (8007050 <HAL_RCC_GetSysClockFreq+0x100>)
 8006f8e:	613b      	str	r3, [r7, #16]
 8006f90:	e054      	b.n	800703c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006f92:	4b2d      	ldr	r3, [pc, #180]	; (8007048 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	2238      	movs	r2, #56	; 0x38
 8006f98:	4013      	ands	r3, r2
 8006f9a:	2b10      	cmp	r3, #16
 8006f9c:	d138      	bne.n	8007010 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006f9e:	4b2a      	ldr	r3, [pc, #168]	; (8007048 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	2203      	movs	r2, #3
 8006fa4:	4013      	ands	r3, r2
 8006fa6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006fa8:	4b27      	ldr	r3, [pc, #156]	; (8007048 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	091b      	lsrs	r3, r3, #4
 8006fae:	2207      	movs	r2, #7
 8006fb0:	4013      	ands	r3, r2
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2b03      	cmp	r3, #3
 8006fba:	d10d      	bne.n	8006fd8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006fbc:	68b9      	ldr	r1, [r7, #8]
 8006fbe:	4824      	ldr	r0, [pc, #144]	; (8007050 <HAL_RCC_GetSysClockFreq+0x100>)
 8006fc0:	f7f9 f8ba 	bl	8000138 <__udivsi3>
 8006fc4:	0003      	movs	r3, r0
 8006fc6:	0019      	movs	r1, r3
 8006fc8:	4b1f      	ldr	r3, [pc, #124]	; (8007048 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	0a1b      	lsrs	r3, r3, #8
 8006fce:	227f      	movs	r2, #127	; 0x7f
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	434b      	muls	r3, r1
 8006fd4:	617b      	str	r3, [r7, #20]
        break;
 8006fd6:	e00d      	b.n	8006ff4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006fd8:	68b9      	ldr	r1, [r7, #8]
 8006fda:	481c      	ldr	r0, [pc, #112]	; (800704c <HAL_RCC_GetSysClockFreq+0xfc>)
 8006fdc:	f7f9 f8ac 	bl	8000138 <__udivsi3>
 8006fe0:	0003      	movs	r3, r0
 8006fe2:	0019      	movs	r1, r3
 8006fe4:	4b18      	ldr	r3, [pc, #96]	; (8007048 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	0a1b      	lsrs	r3, r3, #8
 8006fea:	227f      	movs	r2, #127	; 0x7f
 8006fec:	4013      	ands	r3, r2
 8006fee:	434b      	muls	r3, r1
 8006ff0:	617b      	str	r3, [r7, #20]
        break;
 8006ff2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8006ff4:	4b14      	ldr	r3, [pc, #80]	; (8007048 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006ff6:	68db      	ldr	r3, [r3, #12]
 8006ff8:	0f5b      	lsrs	r3, r3, #29
 8006ffa:	2207      	movs	r2, #7
 8006ffc:	4013      	ands	r3, r2
 8006ffe:	3301      	adds	r3, #1
 8007000:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8007002:	6879      	ldr	r1, [r7, #4]
 8007004:	6978      	ldr	r0, [r7, #20]
 8007006:	f7f9 f897 	bl	8000138 <__udivsi3>
 800700a:	0003      	movs	r3, r0
 800700c:	613b      	str	r3, [r7, #16]
 800700e:	e015      	b.n	800703c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8007010:	4b0d      	ldr	r3, [pc, #52]	; (8007048 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	2238      	movs	r2, #56	; 0x38
 8007016:	4013      	ands	r3, r2
 8007018:	2b20      	cmp	r3, #32
 800701a:	d103      	bne.n	8007024 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800701c:	2380      	movs	r3, #128	; 0x80
 800701e:	021b      	lsls	r3, r3, #8
 8007020:	613b      	str	r3, [r7, #16]
 8007022:	e00b      	b.n	800703c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007024:	4b08      	ldr	r3, [pc, #32]	; (8007048 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	2238      	movs	r2, #56	; 0x38
 800702a:	4013      	ands	r3, r2
 800702c:	2b18      	cmp	r3, #24
 800702e:	d103      	bne.n	8007038 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8007030:	23fa      	movs	r3, #250	; 0xfa
 8007032:	01db      	lsls	r3, r3, #7
 8007034:	613b      	str	r3, [r7, #16]
 8007036:	e001      	b.n	800703c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8007038:	2300      	movs	r3, #0
 800703a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800703c:	693b      	ldr	r3, [r7, #16]
}
 800703e:	0018      	movs	r0, r3
 8007040:	46bd      	mov	sp, r7
 8007042:	b006      	add	sp, #24
 8007044:	bd80      	pop	{r7, pc}
 8007046:	46c0      	nop			; (mov r8, r8)
 8007048:	40021000 	.word	0x40021000
 800704c:	00f42400 	.word	0x00f42400
 8007050:	007a1200 	.word	0x007a1200

08007054 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007058:	4b02      	ldr	r3, [pc, #8]	; (8007064 <HAL_RCC_GetHCLKFreq+0x10>)
 800705a:	681b      	ldr	r3, [r3, #0]
}
 800705c:	0018      	movs	r0, r3
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	46c0      	nop			; (mov r8, r8)
 8007064:	2000001c 	.word	0x2000001c

08007068 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007068:	b5b0      	push	{r4, r5, r7, lr}
 800706a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800706c:	f7ff fff2 	bl	8007054 <HAL_RCC_GetHCLKFreq>
 8007070:	0004      	movs	r4, r0
 8007072:	f7ff fb49 	bl	8006708 <LL_RCC_GetAPB1Prescaler>
 8007076:	0003      	movs	r3, r0
 8007078:	0b1a      	lsrs	r2, r3, #12
 800707a:	4b05      	ldr	r3, [pc, #20]	; (8007090 <HAL_RCC_GetPCLK1Freq+0x28>)
 800707c:	0092      	lsls	r2, r2, #2
 800707e:	58d3      	ldr	r3, [r2, r3]
 8007080:	221f      	movs	r2, #31
 8007082:	4013      	ands	r3, r2
 8007084:	40dc      	lsrs	r4, r3
 8007086:	0023      	movs	r3, r4
}
 8007088:	0018      	movs	r0, r3
 800708a:	46bd      	mov	sp, r7
 800708c:	bdb0      	pop	{r4, r5, r7, pc}
 800708e:	46c0      	nop			; (mov r8, r8)
 8007090:	08011268 	.word	0x08011268

08007094 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b086      	sub	sp, #24
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800709c:	2313      	movs	r3, #19
 800709e:	18fb      	adds	r3, r7, r3
 80070a0:	2200      	movs	r2, #0
 80070a2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80070a4:	2312      	movs	r3, #18
 80070a6:	18fb      	adds	r3, r7, r3
 80070a8:	2200      	movs	r2, #0
 80070aa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	2380      	movs	r3, #128	; 0x80
 80070b2:	029b      	lsls	r3, r3, #10
 80070b4:	4013      	ands	r3, r2
 80070b6:	d100      	bne.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x26>
 80070b8:	e0a3      	b.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070ba:	2011      	movs	r0, #17
 80070bc:	183b      	adds	r3, r7, r0
 80070be:	2200      	movs	r2, #0
 80070c0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070c2:	4b86      	ldr	r3, [pc, #536]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80070c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070c6:	2380      	movs	r3, #128	; 0x80
 80070c8:	055b      	lsls	r3, r3, #21
 80070ca:	4013      	ands	r3, r2
 80070cc:	d110      	bne.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070ce:	4b83      	ldr	r3, [pc, #524]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80070d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070d2:	4b82      	ldr	r3, [pc, #520]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80070d4:	2180      	movs	r1, #128	; 0x80
 80070d6:	0549      	lsls	r1, r1, #21
 80070d8:	430a      	orrs	r2, r1
 80070da:	63da      	str	r2, [r3, #60]	; 0x3c
 80070dc:	4b7f      	ldr	r3, [pc, #508]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80070de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070e0:	2380      	movs	r3, #128	; 0x80
 80070e2:	055b      	lsls	r3, r3, #21
 80070e4:	4013      	ands	r3, r2
 80070e6:	60bb      	str	r3, [r7, #8]
 80070e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070ea:	183b      	adds	r3, r7, r0
 80070ec:	2201      	movs	r2, #1
 80070ee:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80070f0:	4b7b      	ldr	r3, [pc, #492]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	4b7a      	ldr	r3, [pc, #488]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80070f6:	2180      	movs	r1, #128	; 0x80
 80070f8:	0049      	lsls	r1, r1, #1
 80070fa:	430a      	orrs	r2, r1
 80070fc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80070fe:	f7fd fd4d 	bl	8004b9c <HAL_GetTick>
 8007102:	0003      	movs	r3, r0
 8007104:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007106:	e00b      	b.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007108:	f7fd fd48 	bl	8004b9c <HAL_GetTick>
 800710c:	0002      	movs	r2, r0
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	1ad3      	subs	r3, r2, r3
 8007112:	2b02      	cmp	r3, #2
 8007114:	d904      	bls.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8007116:	2313      	movs	r3, #19
 8007118:	18fb      	adds	r3, r7, r3
 800711a:	2203      	movs	r2, #3
 800711c:	701a      	strb	r2, [r3, #0]
        break;
 800711e:	e005      	b.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007120:	4b6f      	ldr	r3, [pc, #444]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	2380      	movs	r3, #128	; 0x80
 8007126:	005b      	lsls	r3, r3, #1
 8007128:	4013      	ands	r3, r2
 800712a:	d0ed      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800712c:	2313      	movs	r3, #19
 800712e:	18fb      	adds	r3, r7, r3
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d154      	bne.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007136:	4b69      	ldr	r3, [pc, #420]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007138:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800713a:	23c0      	movs	r3, #192	; 0xc0
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	4013      	ands	r3, r2
 8007140:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d019      	beq.n	800717c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	699b      	ldr	r3, [r3, #24]
 800714c:	697a      	ldr	r2, [r7, #20]
 800714e:	429a      	cmp	r2, r3
 8007150:	d014      	beq.n	800717c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007152:	4b62      	ldr	r3, [pc, #392]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007156:	4a63      	ldr	r2, [pc, #396]	; (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8007158:	4013      	ands	r3, r2
 800715a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800715c:	4b5f      	ldr	r3, [pc, #380]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800715e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007160:	4b5e      	ldr	r3, [pc, #376]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007162:	2180      	movs	r1, #128	; 0x80
 8007164:	0249      	lsls	r1, r1, #9
 8007166:	430a      	orrs	r2, r1
 8007168:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800716a:	4b5c      	ldr	r3, [pc, #368]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800716c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800716e:	4b5b      	ldr	r3, [pc, #364]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007170:	495d      	ldr	r1, [pc, #372]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007172:	400a      	ands	r2, r1
 8007174:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007176:	4b59      	ldr	r3, [pc, #356]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007178:	697a      	ldr	r2, [r7, #20]
 800717a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	2201      	movs	r2, #1
 8007180:	4013      	ands	r3, r2
 8007182:	d016      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007184:	f7fd fd0a 	bl	8004b9c <HAL_GetTick>
 8007188:	0003      	movs	r3, r0
 800718a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800718c:	e00c      	b.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800718e:	f7fd fd05 	bl	8004b9c <HAL_GetTick>
 8007192:	0002      	movs	r2, r0
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	4a54      	ldr	r2, [pc, #336]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d904      	bls.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800719e:	2313      	movs	r3, #19
 80071a0:	18fb      	adds	r3, r7, r3
 80071a2:	2203      	movs	r2, #3
 80071a4:	701a      	strb	r2, [r3, #0]
            break;
 80071a6:	e004      	b.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071a8:	4b4c      	ldr	r3, [pc, #304]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80071aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071ac:	2202      	movs	r2, #2
 80071ae:	4013      	ands	r3, r2
 80071b0:	d0ed      	beq.n	800718e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80071b2:	2313      	movs	r3, #19
 80071b4:	18fb      	adds	r3, r7, r3
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d10a      	bne.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80071bc:	4b47      	ldr	r3, [pc, #284]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80071be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071c0:	4a48      	ldr	r2, [pc, #288]	; (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80071c2:	4013      	ands	r3, r2
 80071c4:	0019      	movs	r1, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	699a      	ldr	r2, [r3, #24]
 80071ca:	4b44      	ldr	r3, [pc, #272]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80071cc:	430a      	orrs	r2, r1
 80071ce:	65da      	str	r2, [r3, #92]	; 0x5c
 80071d0:	e00c      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80071d2:	2312      	movs	r3, #18
 80071d4:	18fb      	adds	r3, r7, r3
 80071d6:	2213      	movs	r2, #19
 80071d8:	18ba      	adds	r2, r7, r2
 80071da:	7812      	ldrb	r2, [r2, #0]
 80071dc:	701a      	strb	r2, [r3, #0]
 80071de:	e005      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071e0:	2312      	movs	r3, #18
 80071e2:	18fb      	adds	r3, r7, r3
 80071e4:	2213      	movs	r2, #19
 80071e6:	18ba      	adds	r2, r7, r2
 80071e8:	7812      	ldrb	r2, [r2, #0]
 80071ea:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80071ec:	2311      	movs	r3, #17
 80071ee:	18fb      	adds	r3, r7, r3
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d105      	bne.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071f6:	4b39      	ldr	r3, [pc, #228]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80071f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071fa:	4b38      	ldr	r3, [pc, #224]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80071fc:	493c      	ldr	r1, [pc, #240]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80071fe:	400a      	ands	r2, r1
 8007200:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	2201      	movs	r2, #1
 8007208:	4013      	ands	r3, r2
 800720a:	d009      	beq.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800720c:	4b33      	ldr	r3, [pc, #204]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800720e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007210:	2203      	movs	r2, #3
 8007212:	4393      	bics	r3, r2
 8007214:	0019      	movs	r1, r3
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	685a      	ldr	r2, [r3, #4]
 800721a:	4b30      	ldr	r3, [pc, #192]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800721c:	430a      	orrs	r2, r1
 800721e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	2202      	movs	r2, #2
 8007226:	4013      	ands	r3, r2
 8007228:	d009      	beq.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800722a:	4b2c      	ldr	r3, [pc, #176]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800722c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800722e:	220c      	movs	r2, #12
 8007230:	4393      	bics	r3, r2
 8007232:	0019      	movs	r1, r3
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	689a      	ldr	r2, [r3, #8]
 8007238:	4b28      	ldr	r3, [pc, #160]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800723a:	430a      	orrs	r2, r1
 800723c:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	2220      	movs	r2, #32
 8007244:	4013      	ands	r3, r2
 8007246:	d009      	beq.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007248:	4b24      	ldr	r3, [pc, #144]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800724a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800724c:	4a29      	ldr	r2, [pc, #164]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800724e:	4013      	ands	r3, r2
 8007250:	0019      	movs	r1, r3
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	68da      	ldr	r2, [r3, #12]
 8007256:	4b21      	ldr	r3, [pc, #132]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007258:	430a      	orrs	r2, r1
 800725a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	2380      	movs	r3, #128	; 0x80
 8007262:	01db      	lsls	r3, r3, #7
 8007264:	4013      	ands	r3, r2
 8007266:	d015      	beq.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007268:	4b1c      	ldr	r3, [pc, #112]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800726a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	0899      	lsrs	r1, r3, #2
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	695a      	ldr	r2, [r3, #20]
 8007274:	4b19      	ldr	r3, [pc, #100]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007276:	430a      	orrs	r2, r1
 8007278:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	695a      	ldr	r2, [r3, #20]
 800727e:	2380      	movs	r3, #128	; 0x80
 8007280:	05db      	lsls	r3, r3, #23
 8007282:	429a      	cmp	r2, r3
 8007284:	d106      	bne.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007286:	4b15      	ldr	r3, [pc, #84]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007288:	68da      	ldr	r2, [r3, #12]
 800728a:	4b14      	ldr	r3, [pc, #80]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800728c:	2180      	movs	r1, #128	; 0x80
 800728e:	0249      	lsls	r1, r1, #9
 8007290:	430a      	orrs	r2, r1
 8007292:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	2380      	movs	r3, #128	; 0x80
 800729a:	011b      	lsls	r3, r3, #4
 800729c:	4013      	ands	r3, r2
 800729e:	d016      	beq.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80072a0:	4b0e      	ldr	r3, [pc, #56]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80072a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072a4:	4a14      	ldr	r2, [pc, #80]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80072a6:	4013      	ands	r3, r2
 80072a8:	0019      	movs	r1, r3
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	691a      	ldr	r2, [r3, #16]
 80072ae:	4b0b      	ldr	r3, [pc, #44]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80072b0:	430a      	orrs	r2, r1
 80072b2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	691a      	ldr	r2, [r3, #16]
 80072b8:	2380      	movs	r3, #128	; 0x80
 80072ba:	01db      	lsls	r3, r3, #7
 80072bc:	429a      	cmp	r2, r3
 80072be:	d106      	bne.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80072c0:	4b06      	ldr	r3, [pc, #24]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80072c2:	68da      	ldr	r2, [r3, #12]
 80072c4:	4b05      	ldr	r3, [pc, #20]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80072c6:	2180      	movs	r1, #128	; 0x80
 80072c8:	0249      	lsls	r1, r1, #9
 80072ca:	430a      	orrs	r2, r1
 80072cc:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80072ce:	2312      	movs	r3, #18
 80072d0:	18fb      	adds	r3, r7, r3
 80072d2:	781b      	ldrb	r3, [r3, #0]
}
 80072d4:	0018      	movs	r0, r3
 80072d6:	46bd      	mov	sp, r7
 80072d8:	b006      	add	sp, #24
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	40021000 	.word	0x40021000
 80072e0:	40007000 	.word	0x40007000
 80072e4:	fffffcff 	.word	0xfffffcff
 80072e8:	fffeffff 	.word	0xfffeffff
 80072ec:	00001388 	.word	0x00001388
 80072f0:	efffffff 	.word	0xefffffff
 80072f4:	ffffcfff 	.word	0xffffcfff
 80072f8:	ffff3fff 	.word	0xffff3fff

080072fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d101      	bne.n	800730e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	e0a8      	b.n	8007460 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007312:	2b00      	cmp	r3, #0
 8007314:	d109      	bne.n	800732a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	685a      	ldr	r2, [r3, #4]
 800731a:	2382      	movs	r3, #130	; 0x82
 800731c:	005b      	lsls	r3, r3, #1
 800731e:	429a      	cmp	r2, r3
 8007320:	d009      	beq.n	8007336 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	61da      	str	r2, [r3, #28]
 8007328:	e005      	b.n	8007336 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	225d      	movs	r2, #93	; 0x5d
 8007340:	5c9b      	ldrb	r3, [r3, r2]
 8007342:	b2db      	uxtb	r3, r3
 8007344:	2b00      	cmp	r3, #0
 8007346:	d107      	bne.n	8007358 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	225c      	movs	r2, #92	; 0x5c
 800734c:	2100      	movs	r1, #0
 800734e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	0018      	movs	r0, r3
 8007354:	f000 f88a 	bl	800746c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	225d      	movs	r2, #93	; 0x5d
 800735c:	2102      	movs	r1, #2
 800735e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2140      	movs	r1, #64	; 0x40
 800736c:	438a      	bics	r2, r1
 800736e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	68da      	ldr	r2, [r3, #12]
 8007374:	23e0      	movs	r3, #224	; 0xe0
 8007376:	00db      	lsls	r3, r3, #3
 8007378:	429a      	cmp	r2, r3
 800737a:	d902      	bls.n	8007382 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800737c:	2300      	movs	r3, #0
 800737e:	60fb      	str	r3, [r7, #12]
 8007380:	e002      	b.n	8007388 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007382:	2380      	movs	r3, #128	; 0x80
 8007384:	015b      	lsls	r3, r3, #5
 8007386:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	68da      	ldr	r2, [r3, #12]
 800738c:	23f0      	movs	r3, #240	; 0xf0
 800738e:	011b      	lsls	r3, r3, #4
 8007390:	429a      	cmp	r2, r3
 8007392:	d008      	beq.n	80073a6 <HAL_SPI_Init+0xaa>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	68da      	ldr	r2, [r3, #12]
 8007398:	23e0      	movs	r3, #224	; 0xe0
 800739a:	00db      	lsls	r3, r3, #3
 800739c:	429a      	cmp	r2, r3
 800739e:	d002      	beq.n	80073a6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	685a      	ldr	r2, [r3, #4]
 80073aa:	2382      	movs	r3, #130	; 0x82
 80073ac:	005b      	lsls	r3, r3, #1
 80073ae:	401a      	ands	r2, r3
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6899      	ldr	r1, [r3, #8]
 80073b4:	2384      	movs	r3, #132	; 0x84
 80073b6:	021b      	lsls	r3, r3, #8
 80073b8:	400b      	ands	r3, r1
 80073ba:	431a      	orrs	r2, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	691b      	ldr	r3, [r3, #16]
 80073c0:	2102      	movs	r1, #2
 80073c2:	400b      	ands	r3, r1
 80073c4:	431a      	orrs	r2, r3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	695b      	ldr	r3, [r3, #20]
 80073ca:	2101      	movs	r1, #1
 80073cc:	400b      	ands	r3, r1
 80073ce:	431a      	orrs	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6999      	ldr	r1, [r3, #24]
 80073d4:	2380      	movs	r3, #128	; 0x80
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	400b      	ands	r3, r1
 80073da:	431a      	orrs	r2, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	69db      	ldr	r3, [r3, #28]
 80073e0:	2138      	movs	r1, #56	; 0x38
 80073e2:	400b      	ands	r3, r1
 80073e4:	431a      	orrs	r2, r3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6a1b      	ldr	r3, [r3, #32]
 80073ea:	2180      	movs	r1, #128	; 0x80
 80073ec:	400b      	ands	r3, r1
 80073ee:	431a      	orrs	r2, r3
 80073f0:	0011      	movs	r1, r2
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073f6:	2380      	movs	r3, #128	; 0x80
 80073f8:	019b      	lsls	r3, r3, #6
 80073fa:	401a      	ands	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	430a      	orrs	r2, r1
 8007402:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	699b      	ldr	r3, [r3, #24]
 8007408:	0c1b      	lsrs	r3, r3, #16
 800740a:	2204      	movs	r2, #4
 800740c:	401a      	ands	r2, r3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007412:	2110      	movs	r1, #16
 8007414:	400b      	ands	r3, r1
 8007416:	431a      	orrs	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800741c:	2108      	movs	r1, #8
 800741e:	400b      	ands	r3, r1
 8007420:	431a      	orrs	r2, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	68d9      	ldr	r1, [r3, #12]
 8007426:	23f0      	movs	r3, #240	; 0xf0
 8007428:	011b      	lsls	r3, r3, #4
 800742a:	400b      	ands	r3, r1
 800742c:	431a      	orrs	r2, r3
 800742e:	0011      	movs	r1, r2
 8007430:	68fa      	ldr	r2, [r7, #12]
 8007432:	2380      	movs	r3, #128	; 0x80
 8007434:	015b      	lsls	r3, r3, #5
 8007436:	401a      	ands	r2, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	430a      	orrs	r2, r1
 800743e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	69da      	ldr	r2, [r3, #28]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4907      	ldr	r1, [pc, #28]	; (8007468 <HAL_SPI_Init+0x16c>)
 800744c:	400a      	ands	r2, r1
 800744e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	225d      	movs	r2, #93	; 0x5d
 800745a:	2101      	movs	r1, #1
 800745c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800745e:	2300      	movs	r3, #0
}
 8007460:	0018      	movs	r0, r3
 8007462:	46bd      	mov	sp, r7
 8007464:	b004      	add	sp, #16
 8007466:	bd80      	pop	{r7, pc}
 8007468:	fffff7ff 	.word	0xfffff7ff

0800746c <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8007474:	46c0      	nop			; (mov r8, r8)
 8007476:	46bd      	mov	sp, r7
 8007478:	b002      	add	sp, #8
 800747a:	bd80      	pop	{r7, pc}

0800747c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b08a      	sub	sp, #40	; 0x28
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	607a      	str	r2, [r7, #4]
 8007488:	001a      	movs	r2, r3
 800748a:	1cbb      	adds	r3, r7, #2
 800748c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800748e:	2301      	movs	r3, #1
 8007490:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007492:	2323      	movs	r3, #35	; 0x23
 8007494:	18fb      	adds	r3, r7, r3
 8007496:	2200      	movs	r2, #0
 8007498:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	225c      	movs	r2, #92	; 0x5c
 800749e:	5c9b      	ldrb	r3, [r3, r2]
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d101      	bne.n	80074a8 <HAL_SPI_TransmitReceive+0x2c>
 80074a4:	2302      	movs	r3, #2
 80074a6:	e1c4      	b.n	8007832 <HAL_SPI_TransmitReceive+0x3b6>
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	225c      	movs	r2, #92	; 0x5c
 80074ac:	2101      	movs	r1, #1
 80074ae:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074b0:	f7fd fb74 	bl	8004b9c <HAL_GetTick>
 80074b4:	0003      	movs	r3, r0
 80074b6:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80074b8:	201b      	movs	r0, #27
 80074ba:	183b      	adds	r3, r7, r0
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	215d      	movs	r1, #93	; 0x5d
 80074c0:	5c52      	ldrb	r2, [r2, r1]
 80074c2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80074ca:	2312      	movs	r3, #18
 80074cc:	18fb      	adds	r3, r7, r3
 80074ce:	1cba      	adds	r2, r7, #2
 80074d0:	8812      	ldrh	r2, [r2, #0]
 80074d2:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80074d4:	183b      	adds	r3, r7, r0
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d011      	beq.n	8007500 <HAL_SPI_TransmitReceive+0x84>
 80074dc:	697a      	ldr	r2, [r7, #20]
 80074de:	2382      	movs	r3, #130	; 0x82
 80074e0:	005b      	lsls	r3, r3, #1
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d107      	bne.n	80074f6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d103      	bne.n	80074f6 <HAL_SPI_TransmitReceive+0x7a>
 80074ee:	183b      	adds	r3, r7, r0
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	2b04      	cmp	r3, #4
 80074f4:	d004      	beq.n	8007500 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80074f6:	2323      	movs	r3, #35	; 0x23
 80074f8:	18fb      	adds	r3, r7, r3
 80074fa:	2202      	movs	r2, #2
 80074fc:	701a      	strb	r2, [r3, #0]
    goto error;
 80074fe:	e191      	b.n	8007824 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d006      	beq.n	8007514 <HAL_SPI_TransmitReceive+0x98>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d003      	beq.n	8007514 <HAL_SPI_TransmitReceive+0x98>
 800750c:	1cbb      	adds	r3, r7, #2
 800750e:	881b      	ldrh	r3, [r3, #0]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d104      	bne.n	800751e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8007514:	2323      	movs	r3, #35	; 0x23
 8007516:	18fb      	adds	r3, r7, r3
 8007518:	2201      	movs	r2, #1
 800751a:	701a      	strb	r2, [r3, #0]
    goto error;
 800751c:	e182      	b.n	8007824 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	225d      	movs	r2, #93	; 0x5d
 8007522:	5c9b      	ldrb	r3, [r3, r2]
 8007524:	b2db      	uxtb	r3, r3
 8007526:	2b04      	cmp	r3, #4
 8007528:	d003      	beq.n	8007532 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	225d      	movs	r2, #93	; 0x5d
 800752e:	2105      	movs	r1, #5
 8007530:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2200      	movs	r2, #0
 8007536:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	1cba      	adds	r2, r7, #2
 8007542:	2146      	movs	r1, #70	; 0x46
 8007544:	8812      	ldrh	r2, [r2, #0]
 8007546:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	1cba      	adds	r2, r7, #2
 800754c:	2144      	movs	r1, #68	; 0x44
 800754e:	8812      	ldrh	r2, [r2, #0]
 8007550:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	68ba      	ldr	r2, [r7, #8]
 8007556:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	1cba      	adds	r2, r7, #2
 800755c:	8812      	ldrh	r2, [r2, #0]
 800755e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	1cba      	adds	r2, r7, #2
 8007564:	8812      	ldrh	r2, [r2, #0]
 8007566:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2200      	movs	r2, #0
 800756c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2200      	movs	r2, #0
 8007572:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	68da      	ldr	r2, [r3, #12]
 8007578:	23e0      	movs	r3, #224	; 0xe0
 800757a:	00db      	lsls	r3, r3, #3
 800757c:	429a      	cmp	r2, r3
 800757e:	d908      	bls.n	8007592 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	685a      	ldr	r2, [r3, #4]
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	49ac      	ldr	r1, [pc, #688]	; (800783c <HAL_SPI_TransmitReceive+0x3c0>)
 800758c:	400a      	ands	r2, r1
 800758e:	605a      	str	r2, [r3, #4]
 8007590:	e008      	b.n	80075a4 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	685a      	ldr	r2, [r3, #4]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2180      	movs	r1, #128	; 0x80
 800759e:	0149      	lsls	r1, r1, #5
 80075a0:	430a      	orrs	r2, r1
 80075a2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	2240      	movs	r2, #64	; 0x40
 80075ac:	4013      	ands	r3, r2
 80075ae:	2b40      	cmp	r3, #64	; 0x40
 80075b0:	d007      	beq.n	80075c2 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2140      	movs	r1, #64	; 0x40
 80075be:	430a      	orrs	r2, r1
 80075c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	68da      	ldr	r2, [r3, #12]
 80075c6:	23e0      	movs	r3, #224	; 0xe0
 80075c8:	00db      	lsls	r3, r3, #3
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d800      	bhi.n	80075d0 <HAL_SPI_TransmitReceive+0x154>
 80075ce:	e083      	b.n	80076d8 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d005      	beq.n	80075e4 <HAL_SPI_TransmitReceive+0x168>
 80075d8:	2312      	movs	r3, #18
 80075da:	18fb      	adds	r3, r7, r3
 80075dc:	881b      	ldrh	r3, [r3, #0]
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d000      	beq.n	80075e4 <HAL_SPI_TransmitReceive+0x168>
 80075e2:	e06d      	b.n	80076c0 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e8:	881a      	ldrh	r2, [r3, #0]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f4:	1c9a      	adds	r2, r3, #2
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075fe:	b29b      	uxth	r3, r3
 8007600:	3b01      	subs	r3, #1
 8007602:	b29a      	uxth	r2, r3
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007608:	e05a      	b.n	80076c0 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	2202      	movs	r2, #2
 8007612:	4013      	ands	r3, r2
 8007614:	2b02      	cmp	r3, #2
 8007616:	d11b      	bne.n	8007650 <HAL_SPI_TransmitReceive+0x1d4>
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800761c:	b29b      	uxth	r3, r3
 800761e:	2b00      	cmp	r3, #0
 8007620:	d016      	beq.n	8007650 <HAL_SPI_TransmitReceive+0x1d4>
 8007622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007624:	2b01      	cmp	r3, #1
 8007626:	d113      	bne.n	8007650 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800762c:	881a      	ldrh	r2, [r3, #0]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007638:	1c9a      	adds	r2, r3, #2
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007642:	b29b      	uxth	r3, r3
 8007644:	3b01      	subs	r3, #1
 8007646:	b29a      	uxth	r2, r3
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800764c:	2300      	movs	r3, #0
 800764e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	2201      	movs	r2, #1
 8007658:	4013      	ands	r3, r2
 800765a:	2b01      	cmp	r3, #1
 800765c:	d11c      	bne.n	8007698 <HAL_SPI_TransmitReceive+0x21c>
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2246      	movs	r2, #70	; 0x46
 8007662:	5a9b      	ldrh	r3, [r3, r2]
 8007664:	b29b      	uxth	r3, r3
 8007666:	2b00      	cmp	r3, #0
 8007668:	d016      	beq.n	8007698 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	68da      	ldr	r2, [r3, #12]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007674:	b292      	uxth	r2, r2
 8007676:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800767c:	1c9a      	adds	r2, r3, #2
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2246      	movs	r2, #70	; 0x46
 8007686:	5a9b      	ldrh	r3, [r3, r2]
 8007688:	b29b      	uxth	r3, r3
 800768a:	3b01      	subs	r3, #1
 800768c:	b299      	uxth	r1, r3
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2246      	movs	r2, #70	; 0x46
 8007692:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007694:	2301      	movs	r3, #1
 8007696:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007698:	f7fd fa80 	bl	8004b9c <HAL_GetTick>
 800769c:	0002      	movs	r2, r0
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d80b      	bhi.n	80076c0 <HAL_SPI_TransmitReceive+0x244>
 80076a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076aa:	3301      	adds	r3, #1
 80076ac:	d008      	beq.n	80076c0 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 80076ae:	2323      	movs	r3, #35	; 0x23
 80076b0:	18fb      	adds	r3, r7, r3
 80076b2:	2203      	movs	r2, #3
 80076b4:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	225d      	movs	r2, #93	; 0x5d
 80076ba:	2101      	movs	r1, #1
 80076bc:	5499      	strb	r1, [r3, r2]
        goto error;
 80076be:	e0b1      	b.n	8007824 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d19f      	bne.n	800760a <HAL_SPI_TransmitReceive+0x18e>
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2246      	movs	r2, #70	; 0x46
 80076ce:	5a9b      	ldrh	r3, [r3, r2]
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d199      	bne.n	800760a <HAL_SPI_TransmitReceive+0x18e>
 80076d6:	e089      	b.n	80077ec <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d005      	beq.n	80076ec <HAL_SPI_TransmitReceive+0x270>
 80076e0:	2312      	movs	r3, #18
 80076e2:	18fb      	adds	r3, r7, r3
 80076e4:	881b      	ldrh	r3, [r3, #0]
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d000      	beq.n	80076ec <HAL_SPI_TransmitReceive+0x270>
 80076ea:	e074      	b.n	80077d6 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	330c      	adds	r3, #12
 80076f6:	7812      	ldrb	r2, [r2, #0]
 80076f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076fe:	1c5a      	adds	r2, r3, #1
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007708:	b29b      	uxth	r3, r3
 800770a:	3b01      	subs	r3, #1
 800770c:	b29a      	uxth	r2, r3
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007712:	e060      	b.n	80077d6 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	2202      	movs	r2, #2
 800771c:	4013      	ands	r3, r2
 800771e:	2b02      	cmp	r3, #2
 8007720:	d11c      	bne.n	800775c <HAL_SPI_TransmitReceive+0x2e0>
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007726:	b29b      	uxth	r3, r3
 8007728:	2b00      	cmp	r3, #0
 800772a:	d017      	beq.n	800775c <HAL_SPI_TransmitReceive+0x2e0>
 800772c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772e:	2b01      	cmp	r3, #1
 8007730:	d114      	bne.n	800775c <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	330c      	adds	r3, #12
 800773c:	7812      	ldrb	r2, [r2, #0]
 800773e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007744:	1c5a      	adds	r2, r3, #1
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800774e:	b29b      	uxth	r3, r3
 8007750:	3b01      	subs	r3, #1
 8007752:	b29a      	uxth	r2, r3
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007758:	2300      	movs	r3, #0
 800775a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	2201      	movs	r2, #1
 8007764:	4013      	ands	r3, r2
 8007766:	2b01      	cmp	r3, #1
 8007768:	d11e      	bne.n	80077a8 <HAL_SPI_TransmitReceive+0x32c>
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2246      	movs	r2, #70	; 0x46
 800776e:	5a9b      	ldrh	r3, [r3, r2]
 8007770:	b29b      	uxth	r3, r3
 8007772:	2b00      	cmp	r3, #0
 8007774:	d018      	beq.n	80077a8 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	330c      	adds	r3, #12
 800777c:	001a      	movs	r2, r3
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007782:	7812      	ldrb	r2, [r2, #0]
 8007784:	b2d2      	uxtb	r2, r2
 8007786:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800778c:	1c5a      	adds	r2, r3, #1
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2246      	movs	r2, #70	; 0x46
 8007796:	5a9b      	ldrh	r3, [r3, r2]
 8007798:	b29b      	uxth	r3, r3
 800779a:	3b01      	subs	r3, #1
 800779c:	b299      	uxth	r1, r3
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2246      	movs	r2, #70	; 0x46
 80077a2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80077a4:	2301      	movs	r3, #1
 80077a6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80077a8:	f7fd f9f8 	bl	8004b9c <HAL_GetTick>
 80077ac:	0002      	movs	r2, r0
 80077ae:	69fb      	ldr	r3, [r7, #28]
 80077b0:	1ad3      	subs	r3, r2, r3
 80077b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d802      	bhi.n	80077be <HAL_SPI_TransmitReceive+0x342>
 80077b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ba:	3301      	adds	r3, #1
 80077bc:	d102      	bne.n	80077c4 <HAL_SPI_TransmitReceive+0x348>
 80077be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d108      	bne.n	80077d6 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 80077c4:	2323      	movs	r3, #35	; 0x23
 80077c6:	18fb      	adds	r3, r7, r3
 80077c8:	2203      	movs	r2, #3
 80077ca:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	225d      	movs	r2, #93	; 0x5d
 80077d0:	2101      	movs	r1, #1
 80077d2:	5499      	strb	r1, [r3, r2]
        goto error;
 80077d4:	e026      	b.n	8007824 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077da:	b29b      	uxth	r3, r3
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d199      	bne.n	8007714 <HAL_SPI_TransmitReceive+0x298>
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2246      	movs	r2, #70	; 0x46
 80077e4:	5a9b      	ldrh	r3, [r3, r2]
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d193      	bne.n	8007714 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80077ec:	69fa      	ldr	r2, [r7, #28]
 80077ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	0018      	movs	r0, r3
 80077f4:	f000 f960 	bl	8007ab8 <SPI_EndRxTxTransaction>
 80077f8:	1e03      	subs	r3, r0, #0
 80077fa:	d006      	beq.n	800780a <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 80077fc:	2323      	movs	r3, #35	; 0x23
 80077fe:	18fb      	adds	r3, r7, r3
 8007800:	2201      	movs	r2, #1
 8007802:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2220      	movs	r2, #32
 8007808:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800780e:	2b00      	cmp	r3, #0
 8007810:	d004      	beq.n	800781c <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8007812:	2323      	movs	r3, #35	; 0x23
 8007814:	18fb      	adds	r3, r7, r3
 8007816:	2201      	movs	r2, #1
 8007818:	701a      	strb	r2, [r3, #0]
 800781a:	e003      	b.n	8007824 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	225d      	movs	r2, #93	; 0x5d
 8007820:	2101      	movs	r1, #1
 8007822:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	225c      	movs	r2, #92	; 0x5c
 8007828:	2100      	movs	r1, #0
 800782a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800782c:	2323      	movs	r3, #35	; 0x23
 800782e:	18fb      	adds	r3, r7, r3
 8007830:	781b      	ldrb	r3, [r3, #0]
}
 8007832:	0018      	movs	r0, r3
 8007834:	46bd      	mov	sp, r7
 8007836:	b00a      	add	sp, #40	; 0x28
 8007838:	bd80      	pop	{r7, pc}
 800783a:	46c0      	nop			; (mov r8, r8)
 800783c:	ffffefff 	.word	0xffffefff

08007840 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	225d      	movs	r2, #93	; 0x5d
 800784c:	5c9b      	ldrb	r3, [r3, r2]
 800784e:	b2db      	uxtb	r3, r3
}
 8007850:	0018      	movs	r0, r3
 8007852:	46bd      	mov	sp, r7
 8007854:	b002      	add	sp, #8
 8007856:	bd80      	pop	{r7, pc}

08007858 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b088      	sub	sp, #32
 800785c:	af00      	add	r7, sp, #0
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	60b9      	str	r1, [r7, #8]
 8007862:	603b      	str	r3, [r7, #0]
 8007864:	1dfb      	adds	r3, r7, #7
 8007866:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007868:	f7fd f998 	bl	8004b9c <HAL_GetTick>
 800786c:	0002      	movs	r2, r0
 800786e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007870:	1a9b      	subs	r3, r3, r2
 8007872:	683a      	ldr	r2, [r7, #0]
 8007874:	18d3      	adds	r3, r2, r3
 8007876:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007878:	f7fd f990 	bl	8004b9c <HAL_GetTick>
 800787c:	0003      	movs	r3, r0
 800787e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007880:	4b3a      	ldr	r3, [pc, #232]	; (800796c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	015b      	lsls	r3, r3, #5
 8007886:	0d1b      	lsrs	r3, r3, #20
 8007888:	69fa      	ldr	r2, [r7, #28]
 800788a:	4353      	muls	r3, r2
 800788c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800788e:	e058      	b.n	8007942 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	3301      	adds	r3, #1
 8007894:	d055      	beq.n	8007942 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007896:	f7fd f981 	bl	8004b9c <HAL_GetTick>
 800789a:	0002      	movs	r2, r0
 800789c:	69bb      	ldr	r3, [r7, #24]
 800789e:	1ad3      	subs	r3, r2, r3
 80078a0:	69fa      	ldr	r2, [r7, #28]
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d902      	bls.n	80078ac <SPI_WaitFlagStateUntilTimeout+0x54>
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d142      	bne.n	8007932 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	685a      	ldr	r2, [r3, #4]
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	21e0      	movs	r1, #224	; 0xe0
 80078b8:	438a      	bics	r2, r1
 80078ba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	685a      	ldr	r2, [r3, #4]
 80078c0:	2382      	movs	r3, #130	; 0x82
 80078c2:	005b      	lsls	r3, r3, #1
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d113      	bne.n	80078f0 <SPI_WaitFlagStateUntilTimeout+0x98>
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	689a      	ldr	r2, [r3, #8]
 80078cc:	2380      	movs	r3, #128	; 0x80
 80078ce:	021b      	lsls	r3, r3, #8
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d005      	beq.n	80078e0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	689a      	ldr	r2, [r3, #8]
 80078d8:	2380      	movs	r3, #128	; 0x80
 80078da:	00db      	lsls	r3, r3, #3
 80078dc:	429a      	cmp	r2, r3
 80078de:	d107      	bne.n	80078f0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	2140      	movs	r1, #64	; 0x40
 80078ec:	438a      	bics	r2, r1
 80078ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80078f4:	2380      	movs	r3, #128	; 0x80
 80078f6:	019b      	lsls	r3, r3, #6
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d110      	bne.n	800791e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	491a      	ldr	r1, [pc, #104]	; (8007970 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8007908:	400a      	ands	r2, r1
 800790a:	601a      	str	r2, [r3, #0]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	2180      	movs	r1, #128	; 0x80
 8007918:	0189      	lsls	r1, r1, #6
 800791a:	430a      	orrs	r2, r1
 800791c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	225d      	movs	r2, #93	; 0x5d
 8007922:	2101      	movs	r1, #1
 8007924:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	225c      	movs	r2, #92	; 0x5c
 800792a:	2100      	movs	r1, #0
 800792c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800792e:	2303      	movs	r3, #3
 8007930:	e017      	b.n	8007962 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d101      	bne.n	800793c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8007938:	2300      	movs	r3, #0
 800793a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	3b01      	subs	r3, #1
 8007940:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	68ba      	ldr	r2, [r7, #8]
 800794a:	4013      	ands	r3, r2
 800794c:	68ba      	ldr	r2, [r7, #8]
 800794e:	1ad3      	subs	r3, r2, r3
 8007950:	425a      	negs	r2, r3
 8007952:	4153      	adcs	r3, r2
 8007954:	b2db      	uxtb	r3, r3
 8007956:	001a      	movs	r2, r3
 8007958:	1dfb      	adds	r3, r7, #7
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	429a      	cmp	r2, r3
 800795e:	d197      	bne.n	8007890 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	0018      	movs	r0, r3
 8007964:	46bd      	mov	sp, r7
 8007966:	b008      	add	sp, #32
 8007968:	bd80      	pop	{r7, pc}
 800796a:	46c0      	nop			; (mov r8, r8)
 800796c:	2000001c 	.word	0x2000001c
 8007970:	ffffdfff 	.word	0xffffdfff

08007974 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b08a      	sub	sp, #40	; 0x28
 8007978:	af00      	add	r7, sp, #0
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	607a      	str	r2, [r7, #4]
 8007980:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007982:	2317      	movs	r3, #23
 8007984:	18fb      	adds	r3, r7, r3
 8007986:	2200      	movs	r2, #0
 8007988:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800798a:	f7fd f907 	bl	8004b9c <HAL_GetTick>
 800798e:	0002      	movs	r2, r0
 8007990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007992:	1a9b      	subs	r3, r3, r2
 8007994:	683a      	ldr	r2, [r7, #0]
 8007996:	18d3      	adds	r3, r2, r3
 8007998:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800799a:	f7fd f8ff 	bl	8004b9c <HAL_GetTick>
 800799e:	0003      	movs	r3, r0
 80079a0:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	330c      	adds	r3, #12
 80079a8:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80079aa:	4b41      	ldr	r3, [pc, #260]	; (8007ab0 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	0013      	movs	r3, r2
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	189b      	adds	r3, r3, r2
 80079b4:	00da      	lsls	r2, r3, #3
 80079b6:	1ad3      	subs	r3, r2, r3
 80079b8:	0d1b      	lsrs	r3, r3, #20
 80079ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079bc:	4353      	muls	r3, r2
 80079be:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80079c0:	e068      	b.n	8007a94 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80079c2:	68ba      	ldr	r2, [r7, #8]
 80079c4:	23c0      	movs	r3, #192	; 0xc0
 80079c6:	00db      	lsls	r3, r3, #3
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d10a      	bne.n	80079e2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d107      	bne.n	80079e2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	b2da      	uxtb	r2, r3
 80079d8:	2117      	movs	r1, #23
 80079da:	187b      	adds	r3, r7, r1
 80079dc:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80079de:	187b      	adds	r3, r7, r1
 80079e0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	3301      	adds	r3, #1
 80079e6:	d055      	beq.n	8007a94 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80079e8:	f7fd f8d8 	bl	8004b9c <HAL_GetTick>
 80079ec:	0002      	movs	r2, r0
 80079ee:	6a3b      	ldr	r3, [r7, #32]
 80079f0:	1ad3      	subs	r3, r2, r3
 80079f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d902      	bls.n	80079fe <SPI_WaitFifoStateUntilTimeout+0x8a>
 80079f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d142      	bne.n	8007a84 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	685a      	ldr	r2, [r3, #4]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	21e0      	movs	r1, #224	; 0xe0
 8007a0a:	438a      	bics	r2, r1
 8007a0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	685a      	ldr	r2, [r3, #4]
 8007a12:	2382      	movs	r3, #130	; 0x82
 8007a14:	005b      	lsls	r3, r3, #1
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d113      	bne.n	8007a42 <SPI_WaitFifoStateUntilTimeout+0xce>
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	689a      	ldr	r2, [r3, #8]
 8007a1e:	2380      	movs	r3, #128	; 0x80
 8007a20:	021b      	lsls	r3, r3, #8
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d005      	beq.n	8007a32 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	689a      	ldr	r2, [r3, #8]
 8007a2a:	2380      	movs	r3, #128	; 0x80
 8007a2c:	00db      	lsls	r3, r3, #3
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d107      	bne.n	8007a42 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2140      	movs	r1, #64	; 0x40
 8007a3e:	438a      	bics	r2, r1
 8007a40:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a46:	2380      	movs	r3, #128	; 0x80
 8007a48:	019b      	lsls	r3, r3, #6
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d110      	bne.n	8007a70 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4916      	ldr	r1, [pc, #88]	; (8007ab4 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8007a5a:	400a      	ands	r2, r1
 8007a5c:	601a      	str	r2, [r3, #0]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	2180      	movs	r1, #128	; 0x80
 8007a6a:	0189      	lsls	r1, r1, #6
 8007a6c:	430a      	orrs	r2, r1
 8007a6e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	225d      	movs	r2, #93	; 0x5d
 8007a74:	2101      	movs	r1, #1
 8007a76:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	225c      	movs	r2, #92	; 0x5c
 8007a7c:	2100      	movs	r1, #0
 8007a7e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007a80:	2303      	movs	r3, #3
 8007a82:	e010      	b.n	8007aa6 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d101      	bne.n	8007a8e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007a8e:	69bb      	ldr	r3, [r7, #24]
 8007a90:	3b01      	subs	r3, #1
 8007a92:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	68ba      	ldr	r2, [r7, #8]
 8007a9c:	4013      	ands	r3, r2
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d18e      	bne.n	80079c2 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8007aa4:	2300      	movs	r3, #0
}
 8007aa6:	0018      	movs	r0, r3
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	b00a      	add	sp, #40	; 0x28
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	46c0      	nop			; (mov r8, r8)
 8007ab0:	2000001c 	.word	0x2000001c
 8007ab4:	ffffdfff 	.word	0xffffdfff

08007ab8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b086      	sub	sp, #24
 8007abc:	af02      	add	r7, sp, #8
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007ac4:	68ba      	ldr	r2, [r7, #8]
 8007ac6:	23c0      	movs	r3, #192	; 0xc0
 8007ac8:	0159      	lsls	r1, r3, #5
 8007aca:	68f8      	ldr	r0, [r7, #12]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	9300      	str	r3, [sp, #0]
 8007ad0:	0013      	movs	r3, r2
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f7ff ff4e 	bl	8007974 <SPI_WaitFifoStateUntilTimeout>
 8007ad8:	1e03      	subs	r3, r0, #0
 8007ada:	d007      	beq.n	8007aec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ae0:	2220      	movs	r2, #32
 8007ae2:	431a      	orrs	r2, r3
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007ae8:	2303      	movs	r3, #3
 8007aea:	e027      	b.n	8007b3c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007aec:	68ba      	ldr	r2, [r7, #8]
 8007aee:	68f8      	ldr	r0, [r7, #12]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	9300      	str	r3, [sp, #0]
 8007af4:	0013      	movs	r3, r2
 8007af6:	2200      	movs	r2, #0
 8007af8:	2180      	movs	r1, #128	; 0x80
 8007afa:	f7ff fead 	bl	8007858 <SPI_WaitFlagStateUntilTimeout>
 8007afe:	1e03      	subs	r3, r0, #0
 8007b00:	d007      	beq.n	8007b12 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b06:	2220      	movs	r2, #32
 8007b08:	431a      	orrs	r2, r3
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007b0e:	2303      	movs	r3, #3
 8007b10:	e014      	b.n	8007b3c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007b12:	68ba      	ldr	r2, [r7, #8]
 8007b14:	23c0      	movs	r3, #192	; 0xc0
 8007b16:	00d9      	lsls	r1, r3, #3
 8007b18:	68f8      	ldr	r0, [r7, #12]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	9300      	str	r3, [sp, #0]
 8007b1e:	0013      	movs	r3, r2
 8007b20:	2200      	movs	r2, #0
 8007b22:	f7ff ff27 	bl	8007974 <SPI_WaitFifoStateUntilTimeout>
 8007b26:	1e03      	subs	r3, r0, #0
 8007b28:	d007      	beq.n	8007b3a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b2e:	2220      	movs	r2, #32
 8007b30:	431a      	orrs	r2, r3
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007b36:	2303      	movs	r3, #3
 8007b38:	e000      	b.n	8007b3c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007b3a:	2300      	movs	r3, #0
}
 8007b3c:	0018      	movs	r0, r3
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	b004      	add	sp, #16
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d101      	bne.n	8007b56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	e04a      	b.n	8007bec <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	223d      	movs	r2, #61	; 0x3d
 8007b5a:	5c9b      	ldrb	r3, [r3, r2]
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d107      	bne.n	8007b72 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	223c      	movs	r2, #60	; 0x3c
 8007b66:	2100      	movs	r1, #0
 8007b68:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	0018      	movs	r0, r3
 8007b6e:	f7fc fa69 	bl	8004044 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	223d      	movs	r2, #61	; 0x3d
 8007b76:	2102      	movs	r1, #2
 8007b78:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	3304      	adds	r3, #4
 8007b82:	0019      	movs	r1, r3
 8007b84:	0010      	movs	r0, r2
 8007b86:	f000 fb4f 	bl	8008228 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2248      	movs	r2, #72	; 0x48
 8007b8e:	2101      	movs	r1, #1
 8007b90:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	223e      	movs	r2, #62	; 0x3e
 8007b96:	2101      	movs	r1, #1
 8007b98:	5499      	strb	r1, [r3, r2]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	223f      	movs	r2, #63	; 0x3f
 8007b9e:	2101      	movs	r1, #1
 8007ba0:	5499      	strb	r1, [r3, r2]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2240      	movs	r2, #64	; 0x40
 8007ba6:	2101      	movs	r1, #1
 8007ba8:	5499      	strb	r1, [r3, r2]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2241      	movs	r2, #65	; 0x41
 8007bae:	2101      	movs	r1, #1
 8007bb0:	5499      	strb	r1, [r3, r2]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2242      	movs	r2, #66	; 0x42
 8007bb6:	2101      	movs	r1, #1
 8007bb8:	5499      	strb	r1, [r3, r2]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2243      	movs	r2, #67	; 0x43
 8007bbe:	2101      	movs	r1, #1
 8007bc0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2244      	movs	r2, #68	; 0x44
 8007bc6:	2101      	movs	r1, #1
 8007bc8:	5499      	strb	r1, [r3, r2]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2245      	movs	r2, #69	; 0x45
 8007bce:	2101      	movs	r1, #1
 8007bd0:	5499      	strb	r1, [r3, r2]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2246      	movs	r2, #70	; 0x46
 8007bd6:	2101      	movs	r1, #1
 8007bd8:	5499      	strb	r1, [r3, r2]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2247      	movs	r2, #71	; 0x47
 8007bde:	2101      	movs	r1, #1
 8007be0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	223d      	movs	r2, #61	; 0x3d
 8007be6:	2101      	movs	r1, #1
 8007be8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	0018      	movs	r0, r3
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	b002      	add	sp, #8
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d101      	bne.n	8007c06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	e04a      	b.n	8007c9c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	223d      	movs	r2, #61	; 0x3d
 8007c0a:	5c9b      	ldrb	r3, [r3, r2]
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d107      	bne.n	8007c22 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	223c      	movs	r2, #60	; 0x3c
 8007c16:	2100      	movs	r1, #0
 8007c18:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	0018      	movs	r0, r3
 8007c1e:	f000 f841 	bl	8007ca4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	223d      	movs	r2, #61	; 0x3d
 8007c26:	2102      	movs	r1, #2
 8007c28:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	3304      	adds	r3, #4
 8007c32:	0019      	movs	r1, r3
 8007c34:	0010      	movs	r0, r2
 8007c36:	f000 faf7 	bl	8008228 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2248      	movs	r2, #72	; 0x48
 8007c3e:	2101      	movs	r1, #1
 8007c40:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	223e      	movs	r2, #62	; 0x3e
 8007c46:	2101      	movs	r1, #1
 8007c48:	5499      	strb	r1, [r3, r2]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	223f      	movs	r2, #63	; 0x3f
 8007c4e:	2101      	movs	r1, #1
 8007c50:	5499      	strb	r1, [r3, r2]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2240      	movs	r2, #64	; 0x40
 8007c56:	2101      	movs	r1, #1
 8007c58:	5499      	strb	r1, [r3, r2]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2241      	movs	r2, #65	; 0x41
 8007c5e:	2101      	movs	r1, #1
 8007c60:	5499      	strb	r1, [r3, r2]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2242      	movs	r2, #66	; 0x42
 8007c66:	2101      	movs	r1, #1
 8007c68:	5499      	strb	r1, [r3, r2]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2243      	movs	r2, #67	; 0x43
 8007c6e:	2101      	movs	r1, #1
 8007c70:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2244      	movs	r2, #68	; 0x44
 8007c76:	2101      	movs	r1, #1
 8007c78:	5499      	strb	r1, [r3, r2]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2245      	movs	r2, #69	; 0x45
 8007c7e:	2101      	movs	r1, #1
 8007c80:	5499      	strb	r1, [r3, r2]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2246      	movs	r2, #70	; 0x46
 8007c86:	2101      	movs	r1, #1
 8007c88:	5499      	strb	r1, [r3, r2]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2247      	movs	r2, #71	; 0x47
 8007c8e:	2101      	movs	r1, #1
 8007c90:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	223d      	movs	r2, #61	; 0x3d
 8007c96:	2101      	movs	r1, #1
 8007c98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007c9a:	2300      	movs	r3, #0
}
 8007c9c:	0018      	movs	r0, r3
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	b002      	add	sp, #8
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007cac:	46c0      	nop			; (mov r8, r8)
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	b002      	add	sp, #8
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b084      	sub	sp, #16
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d108      	bne.n	8007cd6 <HAL_TIM_PWM_Start+0x22>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	223e      	movs	r2, #62	; 0x3e
 8007cc8:	5c9b      	ldrb	r3, [r3, r2]
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	3b01      	subs	r3, #1
 8007cce:	1e5a      	subs	r2, r3, #1
 8007cd0:	4193      	sbcs	r3, r2
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	e037      	b.n	8007d46 <HAL_TIM_PWM_Start+0x92>
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	2b04      	cmp	r3, #4
 8007cda:	d108      	bne.n	8007cee <HAL_TIM_PWM_Start+0x3a>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	223f      	movs	r2, #63	; 0x3f
 8007ce0:	5c9b      	ldrb	r3, [r3, r2]
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	3b01      	subs	r3, #1
 8007ce6:	1e5a      	subs	r2, r3, #1
 8007ce8:	4193      	sbcs	r3, r2
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	e02b      	b.n	8007d46 <HAL_TIM_PWM_Start+0x92>
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	2b08      	cmp	r3, #8
 8007cf2:	d108      	bne.n	8007d06 <HAL_TIM_PWM_Start+0x52>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2240      	movs	r2, #64	; 0x40
 8007cf8:	5c9b      	ldrb	r3, [r3, r2]
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	3b01      	subs	r3, #1
 8007cfe:	1e5a      	subs	r2, r3, #1
 8007d00:	4193      	sbcs	r3, r2
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	e01f      	b.n	8007d46 <HAL_TIM_PWM_Start+0x92>
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	2b0c      	cmp	r3, #12
 8007d0a:	d108      	bne.n	8007d1e <HAL_TIM_PWM_Start+0x6a>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2241      	movs	r2, #65	; 0x41
 8007d10:	5c9b      	ldrb	r3, [r3, r2]
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	3b01      	subs	r3, #1
 8007d16:	1e5a      	subs	r2, r3, #1
 8007d18:	4193      	sbcs	r3, r2
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	e013      	b.n	8007d46 <HAL_TIM_PWM_Start+0x92>
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	2b10      	cmp	r3, #16
 8007d22:	d108      	bne.n	8007d36 <HAL_TIM_PWM_Start+0x82>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2242      	movs	r2, #66	; 0x42
 8007d28:	5c9b      	ldrb	r3, [r3, r2]
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	3b01      	subs	r3, #1
 8007d2e:	1e5a      	subs	r2, r3, #1
 8007d30:	4193      	sbcs	r3, r2
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	e007      	b.n	8007d46 <HAL_TIM_PWM_Start+0x92>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2243      	movs	r2, #67	; 0x43
 8007d3a:	5c9b      	ldrb	r3, [r3, r2]
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	3b01      	subs	r3, #1
 8007d40:	1e5a      	subs	r2, r3, #1
 8007d42:	4193      	sbcs	r3, r2
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d001      	beq.n	8007d4e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e085      	b.n	8007e5a <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d104      	bne.n	8007d5e <HAL_TIM_PWM_Start+0xaa>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	223e      	movs	r2, #62	; 0x3e
 8007d58:	2102      	movs	r1, #2
 8007d5a:	5499      	strb	r1, [r3, r2]
 8007d5c:	e023      	b.n	8007da6 <HAL_TIM_PWM_Start+0xf2>
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	2b04      	cmp	r3, #4
 8007d62:	d104      	bne.n	8007d6e <HAL_TIM_PWM_Start+0xba>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	223f      	movs	r2, #63	; 0x3f
 8007d68:	2102      	movs	r1, #2
 8007d6a:	5499      	strb	r1, [r3, r2]
 8007d6c:	e01b      	b.n	8007da6 <HAL_TIM_PWM_Start+0xf2>
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	2b08      	cmp	r3, #8
 8007d72:	d104      	bne.n	8007d7e <HAL_TIM_PWM_Start+0xca>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2240      	movs	r2, #64	; 0x40
 8007d78:	2102      	movs	r1, #2
 8007d7a:	5499      	strb	r1, [r3, r2]
 8007d7c:	e013      	b.n	8007da6 <HAL_TIM_PWM_Start+0xf2>
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	2b0c      	cmp	r3, #12
 8007d82:	d104      	bne.n	8007d8e <HAL_TIM_PWM_Start+0xda>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2241      	movs	r2, #65	; 0x41
 8007d88:	2102      	movs	r1, #2
 8007d8a:	5499      	strb	r1, [r3, r2]
 8007d8c:	e00b      	b.n	8007da6 <HAL_TIM_PWM_Start+0xf2>
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	2b10      	cmp	r3, #16
 8007d92:	d104      	bne.n	8007d9e <HAL_TIM_PWM_Start+0xea>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2242      	movs	r2, #66	; 0x42
 8007d98:	2102      	movs	r1, #2
 8007d9a:	5499      	strb	r1, [r3, r2]
 8007d9c:	e003      	b.n	8007da6 <HAL_TIM_PWM_Start+0xf2>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2243      	movs	r2, #67	; 0x43
 8007da2:	2102      	movs	r1, #2
 8007da4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	6839      	ldr	r1, [r7, #0]
 8007dac:	2201      	movs	r2, #1
 8007dae:	0018      	movs	r0, r3
 8007db0:	f000 fe1e 	bl	80089f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a2a      	ldr	r2, [pc, #168]	; (8007e64 <HAL_TIM_PWM_Start+0x1b0>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d00e      	beq.n	8007ddc <HAL_TIM_PWM_Start+0x128>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a29      	ldr	r2, [pc, #164]	; (8007e68 <HAL_TIM_PWM_Start+0x1b4>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d009      	beq.n	8007ddc <HAL_TIM_PWM_Start+0x128>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a27      	ldr	r2, [pc, #156]	; (8007e6c <HAL_TIM_PWM_Start+0x1b8>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d004      	beq.n	8007ddc <HAL_TIM_PWM_Start+0x128>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a26      	ldr	r2, [pc, #152]	; (8007e70 <HAL_TIM_PWM_Start+0x1bc>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d101      	bne.n	8007de0 <HAL_TIM_PWM_Start+0x12c>
 8007ddc:	2301      	movs	r3, #1
 8007dde:	e000      	b.n	8007de2 <HAL_TIM_PWM_Start+0x12e>
 8007de0:	2300      	movs	r3, #0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d008      	beq.n	8007df8 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2180      	movs	r1, #128	; 0x80
 8007df2:	0209      	lsls	r1, r1, #8
 8007df4:	430a      	orrs	r2, r1
 8007df6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a19      	ldr	r2, [pc, #100]	; (8007e64 <HAL_TIM_PWM_Start+0x1b0>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d009      	beq.n	8007e16 <HAL_TIM_PWM_Start+0x162>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a1b      	ldr	r2, [pc, #108]	; (8007e74 <HAL_TIM_PWM_Start+0x1c0>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d004      	beq.n	8007e16 <HAL_TIM_PWM_Start+0x162>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a15      	ldr	r2, [pc, #84]	; (8007e68 <HAL_TIM_PWM_Start+0x1b4>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d116      	bne.n	8007e44 <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	4a16      	ldr	r2, [pc, #88]	; (8007e78 <HAL_TIM_PWM_Start+0x1c4>)
 8007e1e:	4013      	ands	r3, r2
 8007e20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2b06      	cmp	r3, #6
 8007e26:	d016      	beq.n	8007e56 <HAL_TIM_PWM_Start+0x1a2>
 8007e28:	68fa      	ldr	r2, [r7, #12]
 8007e2a:	2380      	movs	r3, #128	; 0x80
 8007e2c:	025b      	lsls	r3, r3, #9
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d011      	beq.n	8007e56 <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2101      	movs	r1, #1
 8007e3e:	430a      	orrs	r2, r1
 8007e40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e42:	e008      	b.n	8007e56 <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	2101      	movs	r1, #1
 8007e50:	430a      	orrs	r2, r1
 8007e52:	601a      	str	r2, [r3, #0]
 8007e54:	e000      	b.n	8007e58 <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e56:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8007e58:	2300      	movs	r3, #0
}
 8007e5a:	0018      	movs	r0, r3
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	b004      	add	sp, #16
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	46c0      	nop			; (mov r8, r8)
 8007e64:	40012c00 	.word	0x40012c00
 8007e68:	40014000 	.word	0x40014000
 8007e6c:	40014400 	.word	0x40014400
 8007e70:	40014800 	.word	0x40014800
 8007e74:	40000400 	.word	0x40000400
 8007e78:	00010007 	.word	0x00010007

08007e7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b086      	sub	sp, #24
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e88:	2317      	movs	r3, #23
 8007e8a:	18fb      	adds	r3, r7, r3
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	223c      	movs	r2, #60	; 0x3c
 8007e94:	5c9b      	ldrb	r3, [r3, r2]
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d101      	bne.n	8007e9e <HAL_TIM_PWM_ConfigChannel+0x22>
 8007e9a:	2302      	movs	r3, #2
 8007e9c:	e0e5      	b.n	800806a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	223c      	movs	r2, #60	; 0x3c
 8007ea2:	2101      	movs	r1, #1
 8007ea4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2b14      	cmp	r3, #20
 8007eaa:	d900      	bls.n	8007eae <HAL_TIM_PWM_ConfigChannel+0x32>
 8007eac:	e0d1      	b.n	8008052 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	009a      	lsls	r2, r3, #2
 8007eb2:	4b70      	ldr	r3, [pc, #448]	; (8008074 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8007eb4:	18d3      	adds	r3, r2, r3
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	68ba      	ldr	r2, [r7, #8]
 8007ec0:	0011      	movs	r1, r2
 8007ec2:	0018      	movs	r0, r3
 8007ec4:	f000 fa34 	bl	8008330 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	699a      	ldr	r2, [r3, #24]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	2108      	movs	r1, #8
 8007ed4:	430a      	orrs	r2, r1
 8007ed6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	699a      	ldr	r2, [r3, #24]
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	2104      	movs	r1, #4
 8007ee4:	438a      	bics	r2, r1
 8007ee6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	6999      	ldr	r1, [r3, #24]
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	691a      	ldr	r2, [r3, #16]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	430a      	orrs	r2, r1
 8007ef8:	619a      	str	r2, [r3, #24]
      break;
 8007efa:	e0af      	b.n	800805c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	68ba      	ldr	r2, [r7, #8]
 8007f02:	0011      	movs	r1, r2
 8007f04:	0018      	movs	r0, r3
 8007f06:	f000 fa9d 	bl	8008444 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	699a      	ldr	r2, [r3, #24]
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	2180      	movs	r1, #128	; 0x80
 8007f16:	0109      	lsls	r1, r1, #4
 8007f18:	430a      	orrs	r2, r1
 8007f1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	699a      	ldr	r2, [r3, #24]
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4954      	ldr	r1, [pc, #336]	; (8008078 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007f28:	400a      	ands	r2, r1
 8007f2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	6999      	ldr	r1, [r3, #24]
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	691b      	ldr	r3, [r3, #16]
 8007f36:	021a      	lsls	r2, r3, #8
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	430a      	orrs	r2, r1
 8007f3e:	619a      	str	r2, [r3, #24]
      break;
 8007f40:	e08c      	b.n	800805c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	68ba      	ldr	r2, [r7, #8]
 8007f48:	0011      	movs	r1, r2
 8007f4a:	0018      	movs	r0, r3
 8007f4c:	f000 fafe 	bl	800854c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	69da      	ldr	r2, [r3, #28]
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	2108      	movs	r1, #8
 8007f5c:	430a      	orrs	r2, r1
 8007f5e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	69da      	ldr	r2, [r3, #28]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	2104      	movs	r1, #4
 8007f6c:	438a      	bics	r2, r1
 8007f6e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	69d9      	ldr	r1, [r3, #28]
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	691a      	ldr	r2, [r3, #16]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	430a      	orrs	r2, r1
 8007f80:	61da      	str	r2, [r3, #28]
      break;
 8007f82:	e06b      	b.n	800805c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	68ba      	ldr	r2, [r7, #8]
 8007f8a:	0011      	movs	r1, r2
 8007f8c:	0018      	movs	r0, r3
 8007f8e:	f000 fb65 	bl	800865c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	69da      	ldr	r2, [r3, #28]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2180      	movs	r1, #128	; 0x80
 8007f9e:	0109      	lsls	r1, r1, #4
 8007fa0:	430a      	orrs	r2, r1
 8007fa2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	69da      	ldr	r2, [r3, #28]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4932      	ldr	r1, [pc, #200]	; (8008078 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007fb0:	400a      	ands	r2, r1
 8007fb2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	69d9      	ldr	r1, [r3, #28]
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	021a      	lsls	r2, r3, #8
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	430a      	orrs	r2, r1
 8007fc6:	61da      	str	r2, [r3, #28]
      break;
 8007fc8:	e048      	b.n	800805c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	68ba      	ldr	r2, [r7, #8]
 8007fd0:	0011      	movs	r1, r2
 8007fd2:	0018      	movs	r0, r3
 8007fd4:	f000 fbac 	bl	8008730 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2108      	movs	r1, #8
 8007fe4:	430a      	orrs	r2, r1
 8007fe6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	2104      	movs	r1, #4
 8007ff4:	438a      	bics	r2, r1
 8007ff6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	691a      	ldr	r2, [r3, #16]
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	430a      	orrs	r2, r1
 8008008:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800800a:	e027      	b.n	800805c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	68ba      	ldr	r2, [r7, #8]
 8008012:	0011      	movs	r1, r2
 8008014:	0018      	movs	r0, r3
 8008016:	f000 fbeb 	bl	80087f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	2180      	movs	r1, #128	; 0x80
 8008026:	0109      	lsls	r1, r1, #4
 8008028:	430a      	orrs	r2, r1
 800802a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4910      	ldr	r1, [pc, #64]	; (8008078 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8008038:	400a      	ands	r2, r1
 800803a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	691b      	ldr	r3, [r3, #16]
 8008046:	021a      	lsls	r2, r3, #8
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	430a      	orrs	r2, r1
 800804e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008050:	e004      	b.n	800805c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8008052:	2317      	movs	r3, #23
 8008054:	18fb      	adds	r3, r7, r3
 8008056:	2201      	movs	r2, #1
 8008058:	701a      	strb	r2, [r3, #0]
      break;
 800805a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	223c      	movs	r2, #60	; 0x3c
 8008060:	2100      	movs	r1, #0
 8008062:	5499      	strb	r1, [r3, r2]

  return status;
 8008064:	2317      	movs	r3, #23
 8008066:	18fb      	adds	r3, r7, r3
 8008068:	781b      	ldrb	r3, [r3, #0]
}
 800806a:	0018      	movs	r0, r3
 800806c:	46bd      	mov	sp, r7
 800806e:	b006      	add	sp, #24
 8008070:	bd80      	pop	{r7, pc}
 8008072:	46c0      	nop			; (mov r8, r8)
 8008074:	0801129c 	.word	0x0801129c
 8008078:	fffffbff 	.word	0xfffffbff

0800807c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008086:	230f      	movs	r3, #15
 8008088:	18fb      	adds	r3, r7, r3
 800808a:	2200      	movs	r2, #0
 800808c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	223c      	movs	r2, #60	; 0x3c
 8008092:	5c9b      	ldrb	r3, [r3, r2]
 8008094:	2b01      	cmp	r3, #1
 8008096:	d101      	bne.n	800809c <HAL_TIM_ConfigClockSource+0x20>
 8008098:	2302      	movs	r3, #2
 800809a:	e0bc      	b.n	8008216 <HAL_TIM_ConfigClockSource+0x19a>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	223c      	movs	r2, #60	; 0x3c
 80080a0:	2101      	movs	r1, #1
 80080a2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	223d      	movs	r2, #61	; 0x3d
 80080a8:	2102      	movs	r1, #2
 80080aa:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	4a5a      	ldr	r2, [pc, #360]	; (8008220 <HAL_TIM_ConfigClockSource+0x1a4>)
 80080b8:	4013      	ands	r3, r2
 80080ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	4a59      	ldr	r2, [pc, #356]	; (8008224 <HAL_TIM_ConfigClockSource+0x1a8>)
 80080c0:	4013      	ands	r3, r2
 80080c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	68ba      	ldr	r2, [r7, #8]
 80080ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	2280      	movs	r2, #128	; 0x80
 80080d2:	0192      	lsls	r2, r2, #6
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d040      	beq.n	800815a <HAL_TIM_ConfigClockSource+0xde>
 80080d8:	2280      	movs	r2, #128	; 0x80
 80080da:	0192      	lsls	r2, r2, #6
 80080dc:	4293      	cmp	r3, r2
 80080de:	d900      	bls.n	80080e2 <HAL_TIM_ConfigClockSource+0x66>
 80080e0:	e088      	b.n	80081f4 <HAL_TIM_ConfigClockSource+0x178>
 80080e2:	2280      	movs	r2, #128	; 0x80
 80080e4:	0152      	lsls	r2, r2, #5
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d100      	bne.n	80080ec <HAL_TIM_ConfigClockSource+0x70>
 80080ea:	e088      	b.n	80081fe <HAL_TIM_ConfigClockSource+0x182>
 80080ec:	2280      	movs	r2, #128	; 0x80
 80080ee:	0152      	lsls	r2, r2, #5
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d900      	bls.n	80080f6 <HAL_TIM_ConfigClockSource+0x7a>
 80080f4:	e07e      	b.n	80081f4 <HAL_TIM_ConfigClockSource+0x178>
 80080f6:	2b70      	cmp	r3, #112	; 0x70
 80080f8:	d018      	beq.n	800812c <HAL_TIM_ConfigClockSource+0xb0>
 80080fa:	d900      	bls.n	80080fe <HAL_TIM_ConfigClockSource+0x82>
 80080fc:	e07a      	b.n	80081f4 <HAL_TIM_ConfigClockSource+0x178>
 80080fe:	2b60      	cmp	r3, #96	; 0x60
 8008100:	d04f      	beq.n	80081a2 <HAL_TIM_ConfigClockSource+0x126>
 8008102:	d900      	bls.n	8008106 <HAL_TIM_ConfigClockSource+0x8a>
 8008104:	e076      	b.n	80081f4 <HAL_TIM_ConfigClockSource+0x178>
 8008106:	2b50      	cmp	r3, #80	; 0x50
 8008108:	d03b      	beq.n	8008182 <HAL_TIM_ConfigClockSource+0x106>
 800810a:	d900      	bls.n	800810e <HAL_TIM_ConfigClockSource+0x92>
 800810c:	e072      	b.n	80081f4 <HAL_TIM_ConfigClockSource+0x178>
 800810e:	2b40      	cmp	r3, #64	; 0x40
 8008110:	d057      	beq.n	80081c2 <HAL_TIM_ConfigClockSource+0x146>
 8008112:	d900      	bls.n	8008116 <HAL_TIM_ConfigClockSource+0x9a>
 8008114:	e06e      	b.n	80081f4 <HAL_TIM_ConfigClockSource+0x178>
 8008116:	2b30      	cmp	r3, #48	; 0x30
 8008118:	d063      	beq.n	80081e2 <HAL_TIM_ConfigClockSource+0x166>
 800811a:	d86b      	bhi.n	80081f4 <HAL_TIM_ConfigClockSource+0x178>
 800811c:	2b20      	cmp	r3, #32
 800811e:	d060      	beq.n	80081e2 <HAL_TIM_ConfigClockSource+0x166>
 8008120:	d868      	bhi.n	80081f4 <HAL_TIM_ConfigClockSource+0x178>
 8008122:	2b00      	cmp	r3, #0
 8008124:	d05d      	beq.n	80081e2 <HAL_TIM_ConfigClockSource+0x166>
 8008126:	2b10      	cmp	r3, #16
 8008128:	d05b      	beq.n	80081e2 <HAL_TIM_ConfigClockSource+0x166>
 800812a:	e063      	b.n	80081f4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800813c:	f000 fc38 	bl	80089b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	2277      	movs	r2, #119	; 0x77
 800814c:	4313      	orrs	r3, r2
 800814e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	68ba      	ldr	r2, [r7, #8]
 8008156:	609a      	str	r2, [r3, #8]
      break;
 8008158:	e052      	b.n	8008200 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800816a:	f000 fc21 	bl	80089b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	689a      	ldr	r2, [r3, #8]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2180      	movs	r1, #128	; 0x80
 800817a:	01c9      	lsls	r1, r1, #7
 800817c:	430a      	orrs	r2, r1
 800817e:	609a      	str	r2, [r3, #8]
      break;
 8008180:	e03e      	b.n	8008200 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800818e:	001a      	movs	r2, r3
 8008190:	f000 fb92 	bl	80088b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	2150      	movs	r1, #80	; 0x50
 800819a:	0018      	movs	r0, r3
 800819c:	f000 fbec 	bl	8008978 <TIM_ITRx_SetConfig>
      break;
 80081a0:	e02e      	b.n	8008200 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80081ae:	001a      	movs	r2, r3
 80081b0:	f000 fbb0 	bl	8008914 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	2160      	movs	r1, #96	; 0x60
 80081ba:	0018      	movs	r0, r3
 80081bc:	f000 fbdc 	bl	8008978 <TIM_ITRx_SetConfig>
      break;
 80081c0:	e01e      	b.n	8008200 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80081ce:	001a      	movs	r2, r3
 80081d0:	f000 fb72 	bl	80088b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	2140      	movs	r1, #64	; 0x40
 80081da:	0018      	movs	r0, r3
 80081dc:	f000 fbcc 	bl	8008978 <TIM_ITRx_SetConfig>
      break;
 80081e0:	e00e      	b.n	8008200 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	0019      	movs	r1, r3
 80081ec:	0010      	movs	r0, r2
 80081ee:	f000 fbc3 	bl	8008978 <TIM_ITRx_SetConfig>
      break;
 80081f2:	e005      	b.n	8008200 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80081f4:	230f      	movs	r3, #15
 80081f6:	18fb      	adds	r3, r7, r3
 80081f8:	2201      	movs	r2, #1
 80081fa:	701a      	strb	r2, [r3, #0]
      break;
 80081fc:	e000      	b.n	8008200 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80081fe:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	223d      	movs	r2, #61	; 0x3d
 8008204:	2101      	movs	r1, #1
 8008206:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	223c      	movs	r2, #60	; 0x3c
 800820c:	2100      	movs	r1, #0
 800820e:	5499      	strb	r1, [r3, r2]

  return status;
 8008210:	230f      	movs	r3, #15
 8008212:	18fb      	adds	r3, r7, r3
 8008214:	781b      	ldrb	r3, [r3, #0]
}
 8008216:	0018      	movs	r0, r3
 8008218:	46bd      	mov	sp, r7
 800821a:	b004      	add	sp, #16
 800821c:	bd80      	pop	{r7, pc}
 800821e:	46c0      	nop			; (mov r8, r8)
 8008220:	ffceff88 	.word	0xffceff88
 8008224:	ffff00ff 	.word	0xffff00ff

08008228 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	4a36      	ldr	r2, [pc, #216]	; (8008314 <TIM_Base_SetConfig+0xec>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d003      	beq.n	8008248 <TIM_Base_SetConfig+0x20>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	4a35      	ldr	r2, [pc, #212]	; (8008318 <TIM_Base_SetConfig+0xf0>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d108      	bne.n	800825a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2270      	movs	r2, #112	; 0x70
 800824c:	4393      	bics	r3, r2
 800824e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	68fa      	ldr	r2, [r7, #12]
 8008256:	4313      	orrs	r3, r2
 8008258:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	4a2d      	ldr	r2, [pc, #180]	; (8008314 <TIM_Base_SetConfig+0xec>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d013      	beq.n	800828a <TIM_Base_SetConfig+0x62>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4a2c      	ldr	r2, [pc, #176]	; (8008318 <TIM_Base_SetConfig+0xf0>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d00f      	beq.n	800828a <TIM_Base_SetConfig+0x62>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4a2b      	ldr	r2, [pc, #172]	; (800831c <TIM_Base_SetConfig+0xf4>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d00b      	beq.n	800828a <TIM_Base_SetConfig+0x62>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4a2a      	ldr	r2, [pc, #168]	; (8008320 <TIM_Base_SetConfig+0xf8>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d007      	beq.n	800828a <TIM_Base_SetConfig+0x62>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4a29      	ldr	r2, [pc, #164]	; (8008324 <TIM_Base_SetConfig+0xfc>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d003      	beq.n	800828a <TIM_Base_SetConfig+0x62>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4a28      	ldr	r2, [pc, #160]	; (8008328 <TIM_Base_SetConfig+0x100>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d108      	bne.n	800829c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	4a27      	ldr	r2, [pc, #156]	; (800832c <TIM_Base_SetConfig+0x104>)
 800828e:	4013      	ands	r3, r2
 8008290:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	68db      	ldr	r3, [r3, #12]
 8008296:	68fa      	ldr	r2, [r7, #12]
 8008298:	4313      	orrs	r3, r2
 800829a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2280      	movs	r2, #128	; 0x80
 80082a0:	4393      	bics	r3, r2
 80082a2:	001a      	movs	r2, r3
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	695b      	ldr	r3, [r3, #20]
 80082a8:	4313      	orrs	r3, r2
 80082aa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	68fa      	ldr	r2, [r7, #12]
 80082b0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	689a      	ldr	r2, [r3, #8]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	4a13      	ldr	r2, [pc, #76]	; (8008314 <TIM_Base_SetConfig+0xec>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d00b      	beq.n	80082e2 <TIM_Base_SetConfig+0xba>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	4a14      	ldr	r2, [pc, #80]	; (8008320 <TIM_Base_SetConfig+0xf8>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d007      	beq.n	80082e2 <TIM_Base_SetConfig+0xba>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	4a13      	ldr	r2, [pc, #76]	; (8008324 <TIM_Base_SetConfig+0xfc>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d003      	beq.n	80082e2 <TIM_Base_SetConfig+0xba>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4a12      	ldr	r2, [pc, #72]	; (8008328 <TIM_Base_SetConfig+0x100>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d103      	bne.n	80082ea <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	691a      	ldr	r2, [r3, #16]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2201      	movs	r2, #1
 80082ee:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	691b      	ldr	r3, [r3, #16]
 80082f4:	2201      	movs	r2, #1
 80082f6:	4013      	ands	r3, r2
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d106      	bne.n	800830a <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	691b      	ldr	r3, [r3, #16]
 8008300:	2201      	movs	r2, #1
 8008302:	4393      	bics	r3, r2
 8008304:	001a      	movs	r2, r3
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	611a      	str	r2, [r3, #16]
  }
}
 800830a:	46c0      	nop			; (mov r8, r8)
 800830c:	46bd      	mov	sp, r7
 800830e:	b004      	add	sp, #16
 8008310:	bd80      	pop	{r7, pc}
 8008312:	46c0      	nop			; (mov r8, r8)
 8008314:	40012c00 	.word	0x40012c00
 8008318:	40000400 	.word	0x40000400
 800831c:	40002000 	.word	0x40002000
 8008320:	40014000 	.word	0x40014000
 8008324:	40014400 	.word	0x40014400
 8008328:	40014800 	.word	0x40014800
 800832c:	fffffcff 	.word	0xfffffcff

08008330 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b086      	sub	sp, #24
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6a1b      	ldr	r3, [r3, #32]
 800833e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6a1b      	ldr	r3, [r3, #32]
 8008344:	2201      	movs	r2, #1
 8008346:	4393      	bics	r3, r2
 8008348:	001a      	movs	r2, r3
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	699b      	ldr	r3, [r3, #24]
 8008358:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	4a32      	ldr	r2, [pc, #200]	; (8008428 <TIM_OC1_SetConfig+0xf8>)
 800835e:	4013      	ands	r3, r2
 8008360:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2203      	movs	r2, #3
 8008366:	4393      	bics	r3, r2
 8008368:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	68fa      	ldr	r2, [r7, #12]
 8008370:	4313      	orrs	r3, r2
 8008372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	2202      	movs	r2, #2
 8008378:	4393      	bics	r3, r2
 800837a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	697a      	ldr	r2, [r7, #20]
 8008382:	4313      	orrs	r3, r2
 8008384:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	4a28      	ldr	r2, [pc, #160]	; (800842c <TIM_OC1_SetConfig+0xfc>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d00b      	beq.n	80083a6 <TIM_OC1_SetConfig+0x76>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4a27      	ldr	r2, [pc, #156]	; (8008430 <TIM_OC1_SetConfig+0x100>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d007      	beq.n	80083a6 <TIM_OC1_SetConfig+0x76>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	4a26      	ldr	r2, [pc, #152]	; (8008434 <TIM_OC1_SetConfig+0x104>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d003      	beq.n	80083a6 <TIM_OC1_SetConfig+0x76>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	4a25      	ldr	r2, [pc, #148]	; (8008438 <TIM_OC1_SetConfig+0x108>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d10c      	bne.n	80083c0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	2208      	movs	r2, #8
 80083aa:	4393      	bics	r3, r2
 80083ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	68db      	ldr	r3, [r3, #12]
 80083b2:	697a      	ldr	r2, [r7, #20]
 80083b4:	4313      	orrs	r3, r2
 80083b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	2204      	movs	r2, #4
 80083bc:	4393      	bics	r3, r2
 80083be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	4a1a      	ldr	r2, [pc, #104]	; (800842c <TIM_OC1_SetConfig+0xfc>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d00b      	beq.n	80083e0 <TIM_OC1_SetConfig+0xb0>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	4a19      	ldr	r2, [pc, #100]	; (8008430 <TIM_OC1_SetConfig+0x100>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d007      	beq.n	80083e0 <TIM_OC1_SetConfig+0xb0>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	4a18      	ldr	r2, [pc, #96]	; (8008434 <TIM_OC1_SetConfig+0x104>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d003      	beq.n	80083e0 <TIM_OC1_SetConfig+0xb0>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	4a17      	ldr	r2, [pc, #92]	; (8008438 <TIM_OC1_SetConfig+0x108>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d111      	bne.n	8008404 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	4a16      	ldr	r2, [pc, #88]	; (800843c <TIM_OC1_SetConfig+0x10c>)
 80083e4:	4013      	ands	r3, r2
 80083e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	4a15      	ldr	r2, [pc, #84]	; (8008440 <TIM_OC1_SetConfig+0x110>)
 80083ec:	4013      	ands	r3, r2
 80083ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	695b      	ldr	r3, [r3, #20]
 80083f4:	693a      	ldr	r2, [r7, #16]
 80083f6:	4313      	orrs	r3, r2
 80083f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	699b      	ldr	r3, [r3, #24]
 80083fe:	693a      	ldr	r2, [r7, #16]
 8008400:	4313      	orrs	r3, r2
 8008402:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	693a      	ldr	r2, [r7, #16]
 8008408:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	68fa      	ldr	r2, [r7, #12]
 800840e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	685a      	ldr	r2, [r3, #4]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	697a      	ldr	r2, [r7, #20]
 800841c:	621a      	str	r2, [r3, #32]
}
 800841e:	46c0      	nop			; (mov r8, r8)
 8008420:	46bd      	mov	sp, r7
 8008422:	b006      	add	sp, #24
 8008424:	bd80      	pop	{r7, pc}
 8008426:	46c0      	nop			; (mov r8, r8)
 8008428:	fffeff8f 	.word	0xfffeff8f
 800842c:	40012c00 	.word	0x40012c00
 8008430:	40014000 	.word	0x40014000
 8008434:	40014400 	.word	0x40014400
 8008438:	40014800 	.word	0x40014800
 800843c:	fffffeff 	.word	0xfffffeff
 8008440:	fffffdff 	.word	0xfffffdff

08008444 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b086      	sub	sp, #24
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6a1b      	ldr	r3, [r3, #32]
 8008452:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6a1b      	ldr	r3, [r3, #32]
 8008458:	2210      	movs	r2, #16
 800845a:	4393      	bics	r3, r2
 800845c:	001a      	movs	r2, r3
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	699b      	ldr	r3, [r3, #24]
 800846c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	4a2e      	ldr	r2, [pc, #184]	; (800852c <TIM_OC2_SetConfig+0xe8>)
 8008472:	4013      	ands	r3, r2
 8008474:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	4a2d      	ldr	r2, [pc, #180]	; (8008530 <TIM_OC2_SetConfig+0xec>)
 800847a:	4013      	ands	r3, r2
 800847c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	021b      	lsls	r3, r3, #8
 8008484:	68fa      	ldr	r2, [r7, #12]
 8008486:	4313      	orrs	r3, r2
 8008488:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	2220      	movs	r2, #32
 800848e:	4393      	bics	r3, r2
 8008490:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	011b      	lsls	r3, r3, #4
 8008498:	697a      	ldr	r2, [r7, #20]
 800849a:	4313      	orrs	r3, r2
 800849c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4a24      	ldr	r2, [pc, #144]	; (8008534 <TIM_OC2_SetConfig+0xf0>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d10d      	bne.n	80084c2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	2280      	movs	r2, #128	; 0x80
 80084aa:	4393      	bics	r3, r2
 80084ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	68db      	ldr	r3, [r3, #12]
 80084b2:	011b      	lsls	r3, r3, #4
 80084b4:	697a      	ldr	r2, [r7, #20]
 80084b6:	4313      	orrs	r3, r2
 80084b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	2240      	movs	r2, #64	; 0x40
 80084be:	4393      	bics	r3, r2
 80084c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	4a1b      	ldr	r2, [pc, #108]	; (8008534 <TIM_OC2_SetConfig+0xf0>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d00b      	beq.n	80084e2 <TIM_OC2_SetConfig+0x9e>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	4a1a      	ldr	r2, [pc, #104]	; (8008538 <TIM_OC2_SetConfig+0xf4>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d007      	beq.n	80084e2 <TIM_OC2_SetConfig+0x9e>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	4a19      	ldr	r2, [pc, #100]	; (800853c <TIM_OC2_SetConfig+0xf8>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d003      	beq.n	80084e2 <TIM_OC2_SetConfig+0x9e>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	4a18      	ldr	r2, [pc, #96]	; (8008540 <TIM_OC2_SetConfig+0xfc>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d113      	bne.n	800850a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	4a17      	ldr	r2, [pc, #92]	; (8008544 <TIM_OC2_SetConfig+0x100>)
 80084e6:	4013      	ands	r3, r2
 80084e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	4a16      	ldr	r2, [pc, #88]	; (8008548 <TIM_OC2_SetConfig+0x104>)
 80084ee:	4013      	ands	r3, r2
 80084f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	695b      	ldr	r3, [r3, #20]
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	693a      	ldr	r2, [r7, #16]
 80084fa:	4313      	orrs	r3, r2
 80084fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	699b      	ldr	r3, [r3, #24]
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	693a      	ldr	r2, [r7, #16]
 8008506:	4313      	orrs	r3, r2
 8008508:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	693a      	ldr	r2, [r7, #16]
 800850e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	68fa      	ldr	r2, [r7, #12]
 8008514:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	685a      	ldr	r2, [r3, #4]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	697a      	ldr	r2, [r7, #20]
 8008522:	621a      	str	r2, [r3, #32]
}
 8008524:	46c0      	nop			; (mov r8, r8)
 8008526:	46bd      	mov	sp, r7
 8008528:	b006      	add	sp, #24
 800852a:	bd80      	pop	{r7, pc}
 800852c:	feff8fff 	.word	0xfeff8fff
 8008530:	fffffcff 	.word	0xfffffcff
 8008534:	40012c00 	.word	0x40012c00
 8008538:	40014000 	.word	0x40014000
 800853c:	40014400 	.word	0x40014400
 8008540:	40014800 	.word	0x40014800
 8008544:	fffffbff 	.word	0xfffffbff
 8008548:	fffff7ff 	.word	0xfffff7ff

0800854c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b086      	sub	sp, #24
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6a1b      	ldr	r3, [r3, #32]
 800855a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6a1b      	ldr	r3, [r3, #32]
 8008560:	4a33      	ldr	r2, [pc, #204]	; (8008630 <TIM_OC3_SetConfig+0xe4>)
 8008562:	401a      	ands	r2, r3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	69db      	ldr	r3, [r3, #28]
 8008572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	4a2f      	ldr	r2, [pc, #188]	; (8008634 <TIM_OC3_SetConfig+0xe8>)
 8008578:	4013      	ands	r3, r2
 800857a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2203      	movs	r2, #3
 8008580:	4393      	bics	r3, r2
 8008582:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	4313      	orrs	r3, r2
 800858c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	4a29      	ldr	r2, [pc, #164]	; (8008638 <TIM_OC3_SetConfig+0xec>)
 8008592:	4013      	ands	r3, r2
 8008594:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	021b      	lsls	r3, r3, #8
 800859c:	697a      	ldr	r2, [r7, #20]
 800859e:	4313      	orrs	r3, r2
 80085a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	4a25      	ldr	r2, [pc, #148]	; (800863c <TIM_OC3_SetConfig+0xf0>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d10d      	bne.n	80085c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	4a24      	ldr	r2, [pc, #144]	; (8008640 <TIM_OC3_SetConfig+0xf4>)
 80085ae:	4013      	ands	r3, r2
 80085b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	68db      	ldr	r3, [r3, #12]
 80085b6:	021b      	lsls	r3, r3, #8
 80085b8:	697a      	ldr	r2, [r7, #20]
 80085ba:	4313      	orrs	r3, r2
 80085bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	4a20      	ldr	r2, [pc, #128]	; (8008644 <TIM_OC3_SetConfig+0xf8>)
 80085c2:	4013      	ands	r3, r2
 80085c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	4a1c      	ldr	r2, [pc, #112]	; (800863c <TIM_OC3_SetConfig+0xf0>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d00b      	beq.n	80085e6 <TIM_OC3_SetConfig+0x9a>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	4a1d      	ldr	r2, [pc, #116]	; (8008648 <TIM_OC3_SetConfig+0xfc>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d007      	beq.n	80085e6 <TIM_OC3_SetConfig+0x9a>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	4a1c      	ldr	r2, [pc, #112]	; (800864c <TIM_OC3_SetConfig+0x100>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d003      	beq.n	80085e6 <TIM_OC3_SetConfig+0x9a>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	4a1b      	ldr	r2, [pc, #108]	; (8008650 <TIM_OC3_SetConfig+0x104>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d113      	bne.n	800860e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	4a1a      	ldr	r2, [pc, #104]	; (8008654 <TIM_OC3_SetConfig+0x108>)
 80085ea:	4013      	ands	r3, r2
 80085ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	4a19      	ldr	r2, [pc, #100]	; (8008658 <TIM_OC3_SetConfig+0x10c>)
 80085f2:	4013      	ands	r3, r2
 80085f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	695b      	ldr	r3, [r3, #20]
 80085fa:	011b      	lsls	r3, r3, #4
 80085fc:	693a      	ldr	r2, [r7, #16]
 80085fe:	4313      	orrs	r3, r2
 8008600:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	699b      	ldr	r3, [r3, #24]
 8008606:	011b      	lsls	r3, r3, #4
 8008608:	693a      	ldr	r2, [r7, #16]
 800860a:	4313      	orrs	r3, r2
 800860c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	693a      	ldr	r2, [r7, #16]
 8008612:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	68fa      	ldr	r2, [r7, #12]
 8008618:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	685a      	ldr	r2, [r3, #4]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	697a      	ldr	r2, [r7, #20]
 8008626:	621a      	str	r2, [r3, #32]
}
 8008628:	46c0      	nop			; (mov r8, r8)
 800862a:	46bd      	mov	sp, r7
 800862c:	b006      	add	sp, #24
 800862e:	bd80      	pop	{r7, pc}
 8008630:	fffffeff 	.word	0xfffffeff
 8008634:	fffeff8f 	.word	0xfffeff8f
 8008638:	fffffdff 	.word	0xfffffdff
 800863c:	40012c00 	.word	0x40012c00
 8008640:	fffff7ff 	.word	0xfffff7ff
 8008644:	fffffbff 	.word	0xfffffbff
 8008648:	40014000 	.word	0x40014000
 800864c:	40014400 	.word	0x40014400
 8008650:	40014800 	.word	0x40014800
 8008654:	ffffefff 	.word	0xffffefff
 8008658:	ffffdfff 	.word	0xffffdfff

0800865c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b086      	sub	sp, #24
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6a1b      	ldr	r3, [r3, #32]
 800866a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6a1b      	ldr	r3, [r3, #32]
 8008670:	4a26      	ldr	r2, [pc, #152]	; (800870c <TIM_OC4_SetConfig+0xb0>)
 8008672:	401a      	ands	r2, r3
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	69db      	ldr	r3, [r3, #28]
 8008682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	4a22      	ldr	r2, [pc, #136]	; (8008710 <TIM_OC4_SetConfig+0xb4>)
 8008688:	4013      	ands	r3, r2
 800868a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	4a21      	ldr	r2, [pc, #132]	; (8008714 <TIM_OC4_SetConfig+0xb8>)
 8008690:	4013      	ands	r3, r2
 8008692:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	021b      	lsls	r3, r3, #8
 800869a:	68fa      	ldr	r2, [r7, #12]
 800869c:	4313      	orrs	r3, r2
 800869e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	4a1d      	ldr	r2, [pc, #116]	; (8008718 <TIM_OC4_SetConfig+0xbc>)
 80086a4:	4013      	ands	r3, r2
 80086a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	689b      	ldr	r3, [r3, #8]
 80086ac:	031b      	lsls	r3, r3, #12
 80086ae:	693a      	ldr	r2, [r7, #16]
 80086b0:	4313      	orrs	r3, r2
 80086b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	4a19      	ldr	r2, [pc, #100]	; (800871c <TIM_OC4_SetConfig+0xc0>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d00b      	beq.n	80086d4 <TIM_OC4_SetConfig+0x78>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	4a18      	ldr	r2, [pc, #96]	; (8008720 <TIM_OC4_SetConfig+0xc4>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d007      	beq.n	80086d4 <TIM_OC4_SetConfig+0x78>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	4a17      	ldr	r2, [pc, #92]	; (8008724 <TIM_OC4_SetConfig+0xc8>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d003      	beq.n	80086d4 <TIM_OC4_SetConfig+0x78>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	4a16      	ldr	r2, [pc, #88]	; (8008728 <TIM_OC4_SetConfig+0xcc>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d109      	bne.n	80086e8 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	4a15      	ldr	r2, [pc, #84]	; (800872c <TIM_OC4_SetConfig+0xd0>)
 80086d8:	4013      	ands	r3, r2
 80086da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	695b      	ldr	r3, [r3, #20]
 80086e0:	019b      	lsls	r3, r3, #6
 80086e2:	697a      	ldr	r2, [r7, #20]
 80086e4:	4313      	orrs	r3, r2
 80086e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	697a      	ldr	r2, [r7, #20]
 80086ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	685a      	ldr	r2, [r3, #4]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	693a      	ldr	r2, [r7, #16]
 8008700:	621a      	str	r2, [r3, #32]
}
 8008702:	46c0      	nop			; (mov r8, r8)
 8008704:	46bd      	mov	sp, r7
 8008706:	b006      	add	sp, #24
 8008708:	bd80      	pop	{r7, pc}
 800870a:	46c0      	nop			; (mov r8, r8)
 800870c:	ffffefff 	.word	0xffffefff
 8008710:	feff8fff 	.word	0xfeff8fff
 8008714:	fffffcff 	.word	0xfffffcff
 8008718:	ffffdfff 	.word	0xffffdfff
 800871c:	40012c00 	.word	0x40012c00
 8008720:	40014000 	.word	0x40014000
 8008724:	40014400 	.word	0x40014400
 8008728:	40014800 	.word	0x40014800
 800872c:	ffffbfff 	.word	0xffffbfff

08008730 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b086      	sub	sp, #24
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6a1b      	ldr	r3, [r3, #32]
 800873e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6a1b      	ldr	r3, [r3, #32]
 8008744:	4a23      	ldr	r2, [pc, #140]	; (80087d4 <TIM_OC5_SetConfig+0xa4>)
 8008746:	401a      	ands	r2, r3
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	4a1f      	ldr	r2, [pc, #124]	; (80087d8 <TIM_OC5_SetConfig+0xa8>)
 800875c:	4013      	ands	r3, r2
 800875e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	68fa      	ldr	r2, [r7, #12]
 8008766:	4313      	orrs	r3, r2
 8008768:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	4a1b      	ldr	r2, [pc, #108]	; (80087dc <TIM_OC5_SetConfig+0xac>)
 800876e:	4013      	ands	r3, r2
 8008770:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	041b      	lsls	r3, r3, #16
 8008778:	693a      	ldr	r2, [r7, #16]
 800877a:	4313      	orrs	r3, r2
 800877c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4a17      	ldr	r2, [pc, #92]	; (80087e0 <TIM_OC5_SetConfig+0xb0>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d00b      	beq.n	800879e <TIM_OC5_SetConfig+0x6e>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	4a16      	ldr	r2, [pc, #88]	; (80087e4 <TIM_OC5_SetConfig+0xb4>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d007      	beq.n	800879e <TIM_OC5_SetConfig+0x6e>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	4a15      	ldr	r2, [pc, #84]	; (80087e8 <TIM_OC5_SetConfig+0xb8>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d003      	beq.n	800879e <TIM_OC5_SetConfig+0x6e>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	4a14      	ldr	r2, [pc, #80]	; (80087ec <TIM_OC5_SetConfig+0xbc>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d109      	bne.n	80087b2 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	4a0c      	ldr	r2, [pc, #48]	; (80087d4 <TIM_OC5_SetConfig+0xa4>)
 80087a2:	4013      	ands	r3, r2
 80087a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	695b      	ldr	r3, [r3, #20]
 80087aa:	021b      	lsls	r3, r3, #8
 80087ac:	697a      	ldr	r2, [r7, #20]
 80087ae:	4313      	orrs	r3, r2
 80087b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	697a      	ldr	r2, [r7, #20]
 80087b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	68fa      	ldr	r2, [r7, #12]
 80087bc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	685a      	ldr	r2, [r3, #4]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	693a      	ldr	r2, [r7, #16]
 80087ca:	621a      	str	r2, [r3, #32]
}
 80087cc:	46c0      	nop			; (mov r8, r8)
 80087ce:	46bd      	mov	sp, r7
 80087d0:	b006      	add	sp, #24
 80087d2:	bd80      	pop	{r7, pc}
 80087d4:	fffeffff 	.word	0xfffeffff
 80087d8:	fffeff8f 	.word	0xfffeff8f
 80087dc:	fffdffff 	.word	0xfffdffff
 80087e0:	40012c00 	.word	0x40012c00
 80087e4:	40014000 	.word	0x40014000
 80087e8:	40014400 	.word	0x40014400
 80087ec:	40014800 	.word	0x40014800

080087f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b086      	sub	sp, #24
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6a1b      	ldr	r3, [r3, #32]
 80087fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6a1b      	ldr	r3, [r3, #32]
 8008804:	4a24      	ldr	r2, [pc, #144]	; (8008898 <TIM_OC6_SetConfig+0xa8>)
 8008806:	401a      	ands	r2, r3
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	4a20      	ldr	r2, [pc, #128]	; (800889c <TIM_OC6_SetConfig+0xac>)
 800881c:	4013      	ands	r3, r2
 800881e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	021b      	lsls	r3, r3, #8
 8008826:	68fa      	ldr	r2, [r7, #12]
 8008828:	4313      	orrs	r3, r2
 800882a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	4a1c      	ldr	r2, [pc, #112]	; (80088a0 <TIM_OC6_SetConfig+0xb0>)
 8008830:	4013      	ands	r3, r2
 8008832:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	689b      	ldr	r3, [r3, #8]
 8008838:	051b      	lsls	r3, r3, #20
 800883a:	693a      	ldr	r2, [r7, #16]
 800883c:	4313      	orrs	r3, r2
 800883e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	4a18      	ldr	r2, [pc, #96]	; (80088a4 <TIM_OC6_SetConfig+0xb4>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d00b      	beq.n	8008860 <TIM_OC6_SetConfig+0x70>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	4a17      	ldr	r2, [pc, #92]	; (80088a8 <TIM_OC6_SetConfig+0xb8>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d007      	beq.n	8008860 <TIM_OC6_SetConfig+0x70>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	4a16      	ldr	r2, [pc, #88]	; (80088ac <TIM_OC6_SetConfig+0xbc>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d003      	beq.n	8008860 <TIM_OC6_SetConfig+0x70>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	4a15      	ldr	r2, [pc, #84]	; (80088b0 <TIM_OC6_SetConfig+0xc0>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d109      	bne.n	8008874 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	4a14      	ldr	r2, [pc, #80]	; (80088b4 <TIM_OC6_SetConfig+0xc4>)
 8008864:	4013      	ands	r3, r2
 8008866:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	695b      	ldr	r3, [r3, #20]
 800886c:	029b      	lsls	r3, r3, #10
 800886e:	697a      	ldr	r2, [r7, #20]
 8008870:	4313      	orrs	r3, r2
 8008872:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	697a      	ldr	r2, [r7, #20]
 8008878:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	68fa      	ldr	r2, [r7, #12]
 800887e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	685a      	ldr	r2, [r3, #4]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	693a      	ldr	r2, [r7, #16]
 800888c:	621a      	str	r2, [r3, #32]
}
 800888e:	46c0      	nop			; (mov r8, r8)
 8008890:	46bd      	mov	sp, r7
 8008892:	b006      	add	sp, #24
 8008894:	bd80      	pop	{r7, pc}
 8008896:	46c0      	nop			; (mov r8, r8)
 8008898:	ffefffff 	.word	0xffefffff
 800889c:	feff8fff 	.word	0xfeff8fff
 80088a0:	ffdfffff 	.word	0xffdfffff
 80088a4:	40012c00 	.word	0x40012c00
 80088a8:	40014000 	.word	0x40014000
 80088ac:	40014400 	.word	0x40014400
 80088b0:	40014800 	.word	0x40014800
 80088b4:	fffbffff 	.word	0xfffbffff

080088b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b086      	sub	sp, #24
 80088bc:	af00      	add	r7, sp, #0
 80088be:	60f8      	str	r0, [r7, #12]
 80088c0:	60b9      	str	r1, [r7, #8]
 80088c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	6a1b      	ldr	r3, [r3, #32]
 80088c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	6a1b      	ldr	r3, [r3, #32]
 80088ce:	2201      	movs	r2, #1
 80088d0:	4393      	bics	r3, r2
 80088d2:	001a      	movs	r2, r3
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	699b      	ldr	r3, [r3, #24]
 80088dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	22f0      	movs	r2, #240	; 0xf0
 80088e2:	4393      	bics	r3, r2
 80088e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	011b      	lsls	r3, r3, #4
 80088ea:	693a      	ldr	r2, [r7, #16]
 80088ec:	4313      	orrs	r3, r2
 80088ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	220a      	movs	r2, #10
 80088f4:	4393      	bics	r3, r2
 80088f6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80088f8:	697a      	ldr	r2, [r7, #20]
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	4313      	orrs	r3, r2
 80088fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	693a      	ldr	r2, [r7, #16]
 8008904:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	697a      	ldr	r2, [r7, #20]
 800890a:	621a      	str	r2, [r3, #32]
}
 800890c:	46c0      	nop			; (mov r8, r8)
 800890e:	46bd      	mov	sp, r7
 8008910:	b006      	add	sp, #24
 8008912:	bd80      	pop	{r7, pc}

08008914 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b086      	sub	sp, #24
 8008918:	af00      	add	r7, sp, #0
 800891a:	60f8      	str	r0, [r7, #12]
 800891c:	60b9      	str	r1, [r7, #8]
 800891e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	6a1b      	ldr	r3, [r3, #32]
 8008924:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	6a1b      	ldr	r3, [r3, #32]
 800892a:	2210      	movs	r2, #16
 800892c:	4393      	bics	r3, r2
 800892e:	001a      	movs	r2, r3
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	699b      	ldr	r3, [r3, #24]
 8008938:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	4a0d      	ldr	r2, [pc, #52]	; (8008974 <TIM_TI2_ConfigInputStage+0x60>)
 800893e:	4013      	ands	r3, r2
 8008940:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	031b      	lsls	r3, r3, #12
 8008946:	693a      	ldr	r2, [r7, #16]
 8008948:	4313      	orrs	r3, r2
 800894a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	22a0      	movs	r2, #160	; 0xa0
 8008950:	4393      	bics	r3, r2
 8008952:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	011b      	lsls	r3, r3, #4
 8008958:	697a      	ldr	r2, [r7, #20]
 800895a:	4313      	orrs	r3, r2
 800895c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	693a      	ldr	r2, [r7, #16]
 8008962:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	697a      	ldr	r2, [r7, #20]
 8008968:	621a      	str	r2, [r3, #32]
}
 800896a:	46c0      	nop			; (mov r8, r8)
 800896c:	46bd      	mov	sp, r7
 800896e:	b006      	add	sp, #24
 8008970:	bd80      	pop	{r7, pc}
 8008972:	46c0      	nop			; (mov r8, r8)
 8008974:	ffff0fff 	.word	0xffff0fff

08008978 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b084      	sub	sp, #16
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	689b      	ldr	r3, [r3, #8]
 8008986:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	4a08      	ldr	r2, [pc, #32]	; (80089ac <TIM_ITRx_SetConfig+0x34>)
 800898c:	4013      	ands	r3, r2
 800898e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008990:	683a      	ldr	r2, [r7, #0]
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	4313      	orrs	r3, r2
 8008996:	2207      	movs	r2, #7
 8008998:	4313      	orrs	r3, r2
 800899a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	68fa      	ldr	r2, [r7, #12]
 80089a0:	609a      	str	r2, [r3, #8]
}
 80089a2:	46c0      	nop			; (mov r8, r8)
 80089a4:	46bd      	mov	sp, r7
 80089a6:	b004      	add	sp, #16
 80089a8:	bd80      	pop	{r7, pc}
 80089aa:	46c0      	nop			; (mov r8, r8)
 80089ac:	ffcfff8f 	.word	0xffcfff8f

080089b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b086      	sub	sp, #24
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	60f8      	str	r0, [r7, #12]
 80089b8:	60b9      	str	r1, [r7, #8]
 80089ba:	607a      	str	r2, [r7, #4]
 80089bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	4a09      	ldr	r2, [pc, #36]	; (80089ec <TIM_ETR_SetConfig+0x3c>)
 80089c8:	4013      	ands	r3, r2
 80089ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	021a      	lsls	r2, r3, #8
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	431a      	orrs	r2, r3
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	4313      	orrs	r3, r2
 80089d8:	697a      	ldr	r2, [r7, #20]
 80089da:	4313      	orrs	r3, r2
 80089dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	697a      	ldr	r2, [r7, #20]
 80089e2:	609a      	str	r2, [r3, #8]
}
 80089e4:	46c0      	nop			; (mov r8, r8)
 80089e6:	46bd      	mov	sp, r7
 80089e8:	b006      	add	sp, #24
 80089ea:	bd80      	pop	{r7, pc}
 80089ec:	ffff00ff 	.word	0xffff00ff

080089f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b086      	sub	sp, #24
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	60b9      	str	r1, [r7, #8]
 80089fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	221f      	movs	r2, #31
 8008a00:	4013      	ands	r3, r2
 8008a02:	2201      	movs	r2, #1
 8008a04:	409a      	lsls	r2, r3
 8008a06:	0013      	movs	r3, r2
 8008a08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	6a1b      	ldr	r3, [r3, #32]
 8008a0e:	697a      	ldr	r2, [r7, #20]
 8008a10:	43d2      	mvns	r2, r2
 8008a12:	401a      	ands	r2, r3
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	6a1a      	ldr	r2, [r3, #32]
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	211f      	movs	r1, #31
 8008a20:	400b      	ands	r3, r1
 8008a22:	6879      	ldr	r1, [r7, #4]
 8008a24:	4099      	lsls	r1, r3
 8008a26:	000b      	movs	r3, r1
 8008a28:	431a      	orrs	r2, r3
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	621a      	str	r2, [r3, #32]
}
 8008a2e:	46c0      	nop			; (mov r8, r8)
 8008a30:	46bd      	mov	sp, r7
 8008a32:	b006      	add	sp, #24
 8008a34:	bd80      	pop	{r7, pc}
	...

08008a38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b084      	sub	sp, #16
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	223c      	movs	r2, #60	; 0x3c
 8008a46:	5c9b      	ldrb	r3, [r3, r2]
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	d101      	bne.n	8008a50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a4c:	2302      	movs	r3, #2
 8008a4e:	e04f      	b.n	8008af0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	223c      	movs	r2, #60	; 0x3c
 8008a54:	2101      	movs	r1, #1
 8008a56:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	223d      	movs	r2, #61	; 0x3d
 8008a5c:	2102      	movs	r1, #2
 8008a5e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	689b      	ldr	r3, [r3, #8]
 8008a6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a20      	ldr	r2, [pc, #128]	; (8008af8 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d108      	bne.n	8008a8c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	4a1f      	ldr	r2, [pc, #124]	; (8008afc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008a7e:	4013      	ands	r3, r2
 8008a80:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	68fa      	ldr	r2, [r7, #12]
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2270      	movs	r2, #112	; 0x70
 8008a90:	4393      	bics	r3, r2
 8008a92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	68fa      	ldr	r2, [r7, #12]
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	68fa      	ldr	r2, [r7, #12]
 8008aa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a13      	ldr	r2, [pc, #76]	; (8008af8 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d009      	beq.n	8008ac4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a12      	ldr	r2, [pc, #72]	; (8008b00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d004      	beq.n	8008ac4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4a11      	ldr	r2, [pc, #68]	; (8008b04 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d10c      	bne.n	8008ade <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	2280      	movs	r2, #128	; 0x80
 8008ac8:	4393      	bics	r3, r2
 8008aca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	689b      	ldr	r3, [r3, #8]
 8008ad0:	68ba      	ldr	r2, [r7, #8]
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	68ba      	ldr	r2, [r7, #8]
 8008adc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	223d      	movs	r2, #61	; 0x3d
 8008ae2:	2101      	movs	r1, #1
 8008ae4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	223c      	movs	r2, #60	; 0x3c
 8008aea:	2100      	movs	r1, #0
 8008aec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008aee:	2300      	movs	r3, #0
}
 8008af0:	0018      	movs	r0, r3
 8008af2:	46bd      	mov	sp, r7
 8008af4:	b004      	add	sp, #16
 8008af6:	bd80      	pop	{r7, pc}
 8008af8:	40012c00 	.word	0x40012c00
 8008afc:	ff0fffff 	.word	0xff0fffff
 8008b00:	40000400 	.word	0x40000400
 8008b04:	40014000 	.word	0x40014000

08008b08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d101      	bne.n	8008b1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b16:	2301      	movs	r3, #1
 8008b18:	e046      	b.n	8008ba8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2288      	movs	r2, #136	; 0x88
 8008b1e:	589b      	ldr	r3, [r3, r2]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d107      	bne.n	8008b34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2284      	movs	r2, #132	; 0x84
 8008b28:	2100      	movs	r1, #0
 8008b2a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	0018      	movs	r0, r3
 8008b30:	f000 f840 	bl	8008bb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2288      	movs	r2, #136	; 0x88
 8008b38:	2124      	movs	r1, #36	; 0x24
 8008b3a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	2101      	movs	r1, #1
 8008b48:	438a      	bics	r2, r1
 8008b4a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d003      	beq.n	8008b5c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	0018      	movs	r0, r3
 8008b58:	f000 fa7c 	bl	8009054 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	0018      	movs	r0, r3
 8008b60:	f000 f8d4 	bl	8008d0c <UART_SetConfig>
 8008b64:	0003      	movs	r3, r0
 8008b66:	2b01      	cmp	r3, #1
 8008b68:	d101      	bne.n	8008b6e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	e01c      	b.n	8008ba8 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	685a      	ldr	r2, [r3, #4]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	490d      	ldr	r1, [pc, #52]	; (8008bb0 <HAL_UART_Init+0xa8>)
 8008b7a:	400a      	ands	r2, r1
 8008b7c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	689a      	ldr	r2, [r3, #8]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	212a      	movs	r1, #42	; 0x2a
 8008b8a:	438a      	bics	r2, r1
 8008b8c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	2101      	movs	r1, #1
 8008b9a:	430a      	orrs	r2, r1
 8008b9c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	0018      	movs	r0, r3
 8008ba2:	f000 fb0b 	bl	80091bc <UART_CheckIdleState>
 8008ba6:	0003      	movs	r3, r0
}
 8008ba8:	0018      	movs	r0, r3
 8008baa:	46bd      	mov	sp, r7
 8008bac:	b002      	add	sp, #8
 8008bae:	bd80      	pop	{r7, pc}
 8008bb0:	ffffb7ff 	.word	0xffffb7ff

08008bb4 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b082      	sub	sp, #8
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8008bbc:	46c0      	nop			; (mov r8, r8)
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	b002      	add	sp, #8
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b08a      	sub	sp, #40	; 0x28
 8008bc8:	af02      	add	r7, sp, #8
 8008bca:	60f8      	str	r0, [r7, #12]
 8008bcc:	60b9      	str	r1, [r7, #8]
 8008bce:	603b      	str	r3, [r7, #0]
 8008bd0:	1dbb      	adds	r3, r7, #6
 8008bd2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2288      	movs	r2, #136	; 0x88
 8008bd8:	589b      	ldr	r3, [r3, r2]
 8008bda:	2b20      	cmp	r3, #32
 8008bdc:	d000      	beq.n	8008be0 <HAL_UART_Transmit+0x1c>
 8008bde:	e090      	b.n	8008d02 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d003      	beq.n	8008bee <HAL_UART_Transmit+0x2a>
 8008be6:	1dbb      	adds	r3, r7, #6
 8008be8:	881b      	ldrh	r3, [r3, #0]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d101      	bne.n	8008bf2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	e088      	b.n	8008d04 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	689a      	ldr	r2, [r3, #8]
 8008bf6:	2380      	movs	r3, #128	; 0x80
 8008bf8:	015b      	lsls	r3, r3, #5
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d109      	bne.n	8008c12 <HAL_UART_Transmit+0x4e>
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	691b      	ldr	r3, [r3, #16]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d105      	bne.n	8008c12 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	2201      	movs	r2, #1
 8008c0a:	4013      	ands	r3, r2
 8008c0c:	d001      	beq.n	8008c12 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e078      	b.n	8008d04 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2290      	movs	r2, #144	; 0x90
 8008c16:	2100      	movs	r1, #0
 8008c18:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2288      	movs	r2, #136	; 0x88
 8008c1e:	2121      	movs	r1, #33	; 0x21
 8008c20:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008c22:	f7fb ffbb 	bl	8004b9c <HAL_GetTick>
 8008c26:	0003      	movs	r3, r0
 8008c28:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	1dba      	adds	r2, r7, #6
 8008c2e:	2154      	movs	r1, #84	; 0x54
 8008c30:	8812      	ldrh	r2, [r2, #0]
 8008c32:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	1dba      	adds	r2, r7, #6
 8008c38:	2156      	movs	r1, #86	; 0x56
 8008c3a:	8812      	ldrh	r2, [r2, #0]
 8008c3c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	689a      	ldr	r2, [r3, #8]
 8008c42:	2380      	movs	r3, #128	; 0x80
 8008c44:	015b      	lsls	r3, r3, #5
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d108      	bne.n	8008c5c <HAL_UART_Transmit+0x98>
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	691b      	ldr	r3, [r3, #16]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d104      	bne.n	8008c5c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8008c52:	2300      	movs	r3, #0
 8008c54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	61bb      	str	r3, [r7, #24]
 8008c5a:	e003      	b.n	8008c64 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008c60:	2300      	movs	r3, #0
 8008c62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008c64:	e030      	b.n	8008cc8 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008c66:	697a      	ldr	r2, [r7, #20]
 8008c68:	68f8      	ldr	r0, [r7, #12]
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	9300      	str	r3, [sp, #0]
 8008c6e:	0013      	movs	r3, r2
 8008c70:	2200      	movs	r2, #0
 8008c72:	2180      	movs	r1, #128	; 0x80
 8008c74:	f000 fb4c 	bl	8009310 <UART_WaitOnFlagUntilTimeout>
 8008c78:	1e03      	subs	r3, r0, #0
 8008c7a:	d005      	beq.n	8008c88 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2288      	movs	r2, #136	; 0x88
 8008c80:	2120      	movs	r1, #32
 8008c82:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008c84:	2303      	movs	r3, #3
 8008c86:	e03d      	b.n	8008d04 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d10b      	bne.n	8008ca6 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008c8e:	69bb      	ldr	r3, [r7, #24]
 8008c90:	881b      	ldrh	r3, [r3, #0]
 8008c92:	001a      	movs	r2, r3
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	05d2      	lsls	r2, r2, #23
 8008c9a:	0dd2      	lsrs	r2, r2, #23
 8008c9c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008c9e:	69bb      	ldr	r3, [r7, #24]
 8008ca0:	3302      	adds	r3, #2
 8008ca2:	61bb      	str	r3, [r7, #24]
 8008ca4:	e007      	b.n	8008cb6 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008ca6:	69fb      	ldr	r3, [r7, #28]
 8008ca8:	781a      	ldrb	r2, [r3, #0]
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008cb0:	69fb      	ldr	r3, [r7, #28]
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2256      	movs	r2, #86	; 0x56
 8008cba:	5a9b      	ldrh	r3, [r3, r2]
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	3b01      	subs	r3, #1
 8008cc0:	b299      	uxth	r1, r3
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2256      	movs	r2, #86	; 0x56
 8008cc6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2256      	movs	r2, #86	; 0x56
 8008ccc:	5a9b      	ldrh	r3, [r3, r2]
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d1c8      	bne.n	8008c66 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008cd4:	697a      	ldr	r2, [r7, #20]
 8008cd6:	68f8      	ldr	r0, [r7, #12]
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	9300      	str	r3, [sp, #0]
 8008cdc:	0013      	movs	r3, r2
 8008cde:	2200      	movs	r2, #0
 8008ce0:	2140      	movs	r1, #64	; 0x40
 8008ce2:	f000 fb15 	bl	8009310 <UART_WaitOnFlagUntilTimeout>
 8008ce6:	1e03      	subs	r3, r0, #0
 8008ce8:	d005      	beq.n	8008cf6 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2288      	movs	r2, #136	; 0x88
 8008cee:	2120      	movs	r1, #32
 8008cf0:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8008cf2:	2303      	movs	r3, #3
 8008cf4:	e006      	b.n	8008d04 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2288      	movs	r2, #136	; 0x88
 8008cfa:	2120      	movs	r1, #32
 8008cfc:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	e000      	b.n	8008d04 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8008d02:	2302      	movs	r3, #2
  }
}
 8008d04:	0018      	movs	r0, r3
 8008d06:	46bd      	mov	sp, r7
 8008d08:	b008      	add	sp, #32
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b088      	sub	sp, #32
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008d14:	231a      	movs	r3, #26
 8008d16:	18fb      	adds	r3, r7, r3
 8008d18:	2200      	movs	r2, #0
 8008d1a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	689a      	ldr	r2, [r3, #8]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	691b      	ldr	r3, [r3, #16]
 8008d24:	431a      	orrs	r2, r3
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	695b      	ldr	r3, [r3, #20]
 8008d2a:	431a      	orrs	r2, r3
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	69db      	ldr	r3, [r3, #28]
 8008d30:	4313      	orrs	r3, r2
 8008d32:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4abc      	ldr	r2, [pc, #752]	; (800902c <UART_SetConfig+0x320>)
 8008d3c:	4013      	ands	r3, r2
 8008d3e:	0019      	movs	r1, r3
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	69fa      	ldr	r2, [r7, #28]
 8008d46:	430a      	orrs	r2, r1
 8008d48:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	4ab7      	ldr	r2, [pc, #732]	; (8009030 <UART_SetConfig+0x324>)
 8008d52:	4013      	ands	r3, r2
 8008d54:	0019      	movs	r1, r3
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	68da      	ldr	r2, [r3, #12]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	430a      	orrs	r2, r1
 8008d60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	699b      	ldr	r3, [r3, #24]
 8008d66:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6a1b      	ldr	r3, [r3, #32]
 8008d6c:	69fa      	ldr	r2, [r7, #28]
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	689b      	ldr	r3, [r3, #8]
 8008d78:	4aae      	ldr	r2, [pc, #696]	; (8009034 <UART_SetConfig+0x328>)
 8008d7a:	4013      	ands	r3, r2
 8008d7c:	0019      	movs	r1, r3
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	69fa      	ldr	r2, [r7, #28]
 8008d84:	430a      	orrs	r2, r1
 8008d86:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d8e:	220f      	movs	r2, #15
 8008d90:	4393      	bics	r3, r2
 8008d92:	0019      	movs	r1, r3
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	430a      	orrs	r2, r1
 8008d9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4aa4      	ldr	r2, [pc, #656]	; (8009038 <UART_SetConfig+0x32c>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d127      	bne.n	8008dfa <UART_SetConfig+0xee>
 8008daa:	4ba4      	ldr	r3, [pc, #656]	; (800903c <UART_SetConfig+0x330>)
 8008dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dae:	2203      	movs	r2, #3
 8008db0:	4013      	ands	r3, r2
 8008db2:	2b03      	cmp	r3, #3
 8008db4:	d017      	beq.n	8008de6 <UART_SetConfig+0xda>
 8008db6:	d81b      	bhi.n	8008df0 <UART_SetConfig+0xe4>
 8008db8:	2b02      	cmp	r3, #2
 8008dba:	d00a      	beq.n	8008dd2 <UART_SetConfig+0xc6>
 8008dbc:	d818      	bhi.n	8008df0 <UART_SetConfig+0xe4>
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d002      	beq.n	8008dc8 <UART_SetConfig+0xbc>
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d00a      	beq.n	8008ddc <UART_SetConfig+0xd0>
 8008dc6:	e013      	b.n	8008df0 <UART_SetConfig+0xe4>
 8008dc8:	231b      	movs	r3, #27
 8008dca:	18fb      	adds	r3, r7, r3
 8008dcc:	2200      	movs	r2, #0
 8008dce:	701a      	strb	r2, [r3, #0]
 8008dd0:	e058      	b.n	8008e84 <UART_SetConfig+0x178>
 8008dd2:	231b      	movs	r3, #27
 8008dd4:	18fb      	adds	r3, r7, r3
 8008dd6:	2202      	movs	r2, #2
 8008dd8:	701a      	strb	r2, [r3, #0]
 8008dda:	e053      	b.n	8008e84 <UART_SetConfig+0x178>
 8008ddc:	231b      	movs	r3, #27
 8008dde:	18fb      	adds	r3, r7, r3
 8008de0:	2204      	movs	r2, #4
 8008de2:	701a      	strb	r2, [r3, #0]
 8008de4:	e04e      	b.n	8008e84 <UART_SetConfig+0x178>
 8008de6:	231b      	movs	r3, #27
 8008de8:	18fb      	adds	r3, r7, r3
 8008dea:	2208      	movs	r2, #8
 8008dec:	701a      	strb	r2, [r3, #0]
 8008dee:	e049      	b.n	8008e84 <UART_SetConfig+0x178>
 8008df0:	231b      	movs	r3, #27
 8008df2:	18fb      	adds	r3, r7, r3
 8008df4:	2210      	movs	r2, #16
 8008df6:	701a      	strb	r2, [r3, #0]
 8008df8:	e044      	b.n	8008e84 <UART_SetConfig+0x178>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a90      	ldr	r2, [pc, #576]	; (8009040 <UART_SetConfig+0x334>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d127      	bne.n	8008e54 <UART_SetConfig+0x148>
 8008e04:	4b8d      	ldr	r3, [pc, #564]	; (800903c <UART_SetConfig+0x330>)
 8008e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e08:	220c      	movs	r2, #12
 8008e0a:	4013      	ands	r3, r2
 8008e0c:	2b0c      	cmp	r3, #12
 8008e0e:	d017      	beq.n	8008e40 <UART_SetConfig+0x134>
 8008e10:	d81b      	bhi.n	8008e4a <UART_SetConfig+0x13e>
 8008e12:	2b08      	cmp	r3, #8
 8008e14:	d00a      	beq.n	8008e2c <UART_SetConfig+0x120>
 8008e16:	d818      	bhi.n	8008e4a <UART_SetConfig+0x13e>
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d002      	beq.n	8008e22 <UART_SetConfig+0x116>
 8008e1c:	2b04      	cmp	r3, #4
 8008e1e:	d00a      	beq.n	8008e36 <UART_SetConfig+0x12a>
 8008e20:	e013      	b.n	8008e4a <UART_SetConfig+0x13e>
 8008e22:	231b      	movs	r3, #27
 8008e24:	18fb      	adds	r3, r7, r3
 8008e26:	2200      	movs	r2, #0
 8008e28:	701a      	strb	r2, [r3, #0]
 8008e2a:	e02b      	b.n	8008e84 <UART_SetConfig+0x178>
 8008e2c:	231b      	movs	r3, #27
 8008e2e:	18fb      	adds	r3, r7, r3
 8008e30:	2202      	movs	r2, #2
 8008e32:	701a      	strb	r2, [r3, #0]
 8008e34:	e026      	b.n	8008e84 <UART_SetConfig+0x178>
 8008e36:	231b      	movs	r3, #27
 8008e38:	18fb      	adds	r3, r7, r3
 8008e3a:	2204      	movs	r2, #4
 8008e3c:	701a      	strb	r2, [r3, #0]
 8008e3e:	e021      	b.n	8008e84 <UART_SetConfig+0x178>
 8008e40:	231b      	movs	r3, #27
 8008e42:	18fb      	adds	r3, r7, r3
 8008e44:	2208      	movs	r2, #8
 8008e46:	701a      	strb	r2, [r3, #0]
 8008e48:	e01c      	b.n	8008e84 <UART_SetConfig+0x178>
 8008e4a:	231b      	movs	r3, #27
 8008e4c:	18fb      	adds	r3, r7, r3
 8008e4e:	2210      	movs	r2, #16
 8008e50:	701a      	strb	r2, [r3, #0]
 8008e52:	e017      	b.n	8008e84 <UART_SetConfig+0x178>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a7a      	ldr	r2, [pc, #488]	; (8009044 <UART_SetConfig+0x338>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d104      	bne.n	8008e68 <UART_SetConfig+0x15c>
 8008e5e:	231b      	movs	r3, #27
 8008e60:	18fb      	adds	r3, r7, r3
 8008e62:	2200      	movs	r2, #0
 8008e64:	701a      	strb	r2, [r3, #0]
 8008e66:	e00d      	b.n	8008e84 <UART_SetConfig+0x178>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a76      	ldr	r2, [pc, #472]	; (8009048 <UART_SetConfig+0x33c>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d104      	bne.n	8008e7c <UART_SetConfig+0x170>
 8008e72:	231b      	movs	r3, #27
 8008e74:	18fb      	adds	r3, r7, r3
 8008e76:	2200      	movs	r2, #0
 8008e78:	701a      	strb	r2, [r3, #0]
 8008e7a:	e003      	b.n	8008e84 <UART_SetConfig+0x178>
 8008e7c:	231b      	movs	r3, #27
 8008e7e:	18fb      	adds	r3, r7, r3
 8008e80:	2210      	movs	r2, #16
 8008e82:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	69da      	ldr	r2, [r3, #28]
 8008e88:	2380      	movs	r3, #128	; 0x80
 8008e8a:	021b      	lsls	r3, r3, #8
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d000      	beq.n	8008e92 <UART_SetConfig+0x186>
 8008e90:	e065      	b.n	8008f5e <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8008e92:	231b      	movs	r3, #27
 8008e94:	18fb      	adds	r3, r7, r3
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	2b08      	cmp	r3, #8
 8008e9a:	d015      	beq.n	8008ec8 <UART_SetConfig+0x1bc>
 8008e9c:	dc18      	bgt.n	8008ed0 <UART_SetConfig+0x1c4>
 8008e9e:	2b04      	cmp	r3, #4
 8008ea0:	d00d      	beq.n	8008ebe <UART_SetConfig+0x1b2>
 8008ea2:	dc15      	bgt.n	8008ed0 <UART_SetConfig+0x1c4>
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d002      	beq.n	8008eae <UART_SetConfig+0x1a2>
 8008ea8:	2b02      	cmp	r3, #2
 8008eaa:	d005      	beq.n	8008eb8 <UART_SetConfig+0x1ac>
 8008eac:	e010      	b.n	8008ed0 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008eae:	f7fe f8db 	bl	8007068 <HAL_RCC_GetPCLK1Freq>
 8008eb2:	0003      	movs	r3, r0
 8008eb4:	617b      	str	r3, [r7, #20]
        break;
 8008eb6:	e012      	b.n	8008ede <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008eb8:	4b64      	ldr	r3, [pc, #400]	; (800904c <UART_SetConfig+0x340>)
 8008eba:	617b      	str	r3, [r7, #20]
        break;
 8008ebc:	e00f      	b.n	8008ede <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ebe:	f7fe f847 	bl	8006f50 <HAL_RCC_GetSysClockFreq>
 8008ec2:	0003      	movs	r3, r0
 8008ec4:	617b      	str	r3, [r7, #20]
        break;
 8008ec6:	e00a      	b.n	8008ede <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ec8:	2380      	movs	r3, #128	; 0x80
 8008eca:	021b      	lsls	r3, r3, #8
 8008ecc:	617b      	str	r3, [r7, #20]
        break;
 8008ece:	e006      	b.n	8008ede <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008ed4:	231a      	movs	r3, #26
 8008ed6:	18fb      	adds	r3, r7, r3
 8008ed8:	2201      	movs	r2, #1
 8008eda:	701a      	strb	r2, [r3, #0]
        break;
 8008edc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d100      	bne.n	8008ee6 <UART_SetConfig+0x1da>
 8008ee4:	e08d      	b.n	8009002 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008eea:	4b59      	ldr	r3, [pc, #356]	; (8009050 <UART_SetConfig+0x344>)
 8008eec:	0052      	lsls	r2, r2, #1
 8008eee:	5ad3      	ldrh	r3, [r2, r3]
 8008ef0:	0019      	movs	r1, r3
 8008ef2:	6978      	ldr	r0, [r7, #20]
 8008ef4:	f7f7 f920 	bl	8000138 <__udivsi3>
 8008ef8:	0003      	movs	r3, r0
 8008efa:	005a      	lsls	r2, r3, #1
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	085b      	lsrs	r3, r3, #1
 8008f02:	18d2      	adds	r2, r2, r3
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	0019      	movs	r1, r3
 8008f0a:	0010      	movs	r0, r2
 8008f0c:	f7f7 f914 	bl	8000138 <__udivsi3>
 8008f10:	0003      	movs	r3, r0
 8008f12:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	2b0f      	cmp	r3, #15
 8008f18:	d91c      	bls.n	8008f54 <UART_SetConfig+0x248>
 8008f1a:	693a      	ldr	r2, [r7, #16]
 8008f1c:	2380      	movs	r3, #128	; 0x80
 8008f1e:	025b      	lsls	r3, r3, #9
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d217      	bcs.n	8008f54 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	b29a      	uxth	r2, r3
 8008f28:	200e      	movs	r0, #14
 8008f2a:	183b      	adds	r3, r7, r0
 8008f2c:	210f      	movs	r1, #15
 8008f2e:	438a      	bics	r2, r1
 8008f30:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	085b      	lsrs	r3, r3, #1
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	2207      	movs	r2, #7
 8008f3a:	4013      	ands	r3, r2
 8008f3c:	b299      	uxth	r1, r3
 8008f3e:	183b      	adds	r3, r7, r0
 8008f40:	183a      	adds	r2, r7, r0
 8008f42:	8812      	ldrh	r2, [r2, #0]
 8008f44:	430a      	orrs	r2, r1
 8008f46:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	183a      	adds	r2, r7, r0
 8008f4e:	8812      	ldrh	r2, [r2, #0]
 8008f50:	60da      	str	r2, [r3, #12]
 8008f52:	e056      	b.n	8009002 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8008f54:	231a      	movs	r3, #26
 8008f56:	18fb      	adds	r3, r7, r3
 8008f58:	2201      	movs	r2, #1
 8008f5a:	701a      	strb	r2, [r3, #0]
 8008f5c:	e051      	b.n	8009002 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008f5e:	231b      	movs	r3, #27
 8008f60:	18fb      	adds	r3, r7, r3
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	2b08      	cmp	r3, #8
 8008f66:	d015      	beq.n	8008f94 <UART_SetConfig+0x288>
 8008f68:	dc18      	bgt.n	8008f9c <UART_SetConfig+0x290>
 8008f6a:	2b04      	cmp	r3, #4
 8008f6c:	d00d      	beq.n	8008f8a <UART_SetConfig+0x27e>
 8008f6e:	dc15      	bgt.n	8008f9c <UART_SetConfig+0x290>
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d002      	beq.n	8008f7a <UART_SetConfig+0x26e>
 8008f74:	2b02      	cmp	r3, #2
 8008f76:	d005      	beq.n	8008f84 <UART_SetConfig+0x278>
 8008f78:	e010      	b.n	8008f9c <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f7a:	f7fe f875 	bl	8007068 <HAL_RCC_GetPCLK1Freq>
 8008f7e:	0003      	movs	r3, r0
 8008f80:	617b      	str	r3, [r7, #20]
        break;
 8008f82:	e012      	b.n	8008faa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f84:	4b31      	ldr	r3, [pc, #196]	; (800904c <UART_SetConfig+0x340>)
 8008f86:	617b      	str	r3, [r7, #20]
        break;
 8008f88:	e00f      	b.n	8008faa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f8a:	f7fd ffe1 	bl	8006f50 <HAL_RCC_GetSysClockFreq>
 8008f8e:	0003      	movs	r3, r0
 8008f90:	617b      	str	r3, [r7, #20]
        break;
 8008f92:	e00a      	b.n	8008faa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f94:	2380      	movs	r3, #128	; 0x80
 8008f96:	021b      	lsls	r3, r3, #8
 8008f98:	617b      	str	r3, [r7, #20]
        break;
 8008f9a:	e006      	b.n	8008faa <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008fa0:	231a      	movs	r3, #26
 8008fa2:	18fb      	adds	r3, r7, r3
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	701a      	strb	r2, [r3, #0]
        break;
 8008fa8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d028      	beq.n	8009002 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008fb4:	4b26      	ldr	r3, [pc, #152]	; (8009050 <UART_SetConfig+0x344>)
 8008fb6:	0052      	lsls	r2, r2, #1
 8008fb8:	5ad3      	ldrh	r3, [r2, r3]
 8008fba:	0019      	movs	r1, r3
 8008fbc:	6978      	ldr	r0, [r7, #20]
 8008fbe:	f7f7 f8bb 	bl	8000138 <__udivsi3>
 8008fc2:	0003      	movs	r3, r0
 8008fc4:	001a      	movs	r2, r3
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	085b      	lsrs	r3, r3, #1
 8008fcc:	18d2      	adds	r2, r2, r3
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	0019      	movs	r1, r3
 8008fd4:	0010      	movs	r0, r2
 8008fd6:	f7f7 f8af 	bl	8000138 <__udivsi3>
 8008fda:	0003      	movs	r3, r0
 8008fdc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	2b0f      	cmp	r3, #15
 8008fe2:	d90a      	bls.n	8008ffa <UART_SetConfig+0x2ee>
 8008fe4:	693a      	ldr	r2, [r7, #16]
 8008fe6:	2380      	movs	r3, #128	; 0x80
 8008fe8:	025b      	lsls	r3, r3, #9
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d205      	bcs.n	8008ffa <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	b29a      	uxth	r2, r3
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	60da      	str	r2, [r3, #12]
 8008ff8:	e003      	b.n	8009002 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8008ffa:	231a      	movs	r3, #26
 8008ffc:	18fb      	adds	r3, r7, r3
 8008ffe:	2201      	movs	r2, #1
 8009000:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	226a      	movs	r2, #106	; 0x6a
 8009006:	2101      	movs	r1, #1
 8009008:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2268      	movs	r2, #104	; 0x68
 800900e:	2101      	movs	r1, #1
 8009010:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2200      	movs	r2, #0
 8009016:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800901e:	231a      	movs	r3, #26
 8009020:	18fb      	adds	r3, r7, r3
 8009022:	781b      	ldrb	r3, [r3, #0]
}
 8009024:	0018      	movs	r0, r3
 8009026:	46bd      	mov	sp, r7
 8009028:	b008      	add	sp, #32
 800902a:	bd80      	pop	{r7, pc}
 800902c:	cfff69f3 	.word	0xcfff69f3
 8009030:	ffffcfff 	.word	0xffffcfff
 8009034:	11fff4ff 	.word	0x11fff4ff
 8009038:	40013800 	.word	0x40013800
 800903c:	40021000 	.word	0x40021000
 8009040:	40004400 	.word	0x40004400
 8009044:	40004800 	.word	0x40004800
 8009048:	40004c00 	.word	0x40004c00
 800904c:	00f42400 	.word	0x00f42400
 8009050:	080112f0 	.word	0x080112f0

08009054 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009060:	2208      	movs	r2, #8
 8009062:	4013      	ands	r3, r2
 8009064:	d00b      	beq.n	800907e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	4a4a      	ldr	r2, [pc, #296]	; (8009198 <UART_AdvFeatureConfig+0x144>)
 800906e:	4013      	ands	r3, r2
 8009070:	0019      	movs	r1, r3
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	430a      	orrs	r2, r1
 800907c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009082:	2201      	movs	r2, #1
 8009084:	4013      	ands	r3, r2
 8009086:	d00b      	beq.n	80090a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	4a43      	ldr	r2, [pc, #268]	; (800919c <UART_AdvFeatureConfig+0x148>)
 8009090:	4013      	ands	r3, r2
 8009092:	0019      	movs	r1, r3
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	430a      	orrs	r2, r1
 800909e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090a4:	2202      	movs	r2, #2
 80090a6:	4013      	ands	r3, r2
 80090a8:	d00b      	beq.n	80090c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	4a3b      	ldr	r2, [pc, #236]	; (80091a0 <UART_AdvFeatureConfig+0x14c>)
 80090b2:	4013      	ands	r3, r2
 80090b4:	0019      	movs	r1, r3
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	430a      	orrs	r2, r1
 80090c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090c6:	2204      	movs	r2, #4
 80090c8:	4013      	ands	r3, r2
 80090ca:	d00b      	beq.n	80090e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	4a34      	ldr	r2, [pc, #208]	; (80091a4 <UART_AdvFeatureConfig+0x150>)
 80090d4:	4013      	ands	r3, r2
 80090d6:	0019      	movs	r1, r3
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	430a      	orrs	r2, r1
 80090e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090e8:	2210      	movs	r2, #16
 80090ea:	4013      	ands	r3, r2
 80090ec:	d00b      	beq.n	8009106 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	689b      	ldr	r3, [r3, #8]
 80090f4:	4a2c      	ldr	r2, [pc, #176]	; (80091a8 <UART_AdvFeatureConfig+0x154>)
 80090f6:	4013      	ands	r3, r2
 80090f8:	0019      	movs	r1, r3
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	430a      	orrs	r2, r1
 8009104:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800910a:	2220      	movs	r2, #32
 800910c:	4013      	ands	r3, r2
 800910e:	d00b      	beq.n	8009128 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	4a25      	ldr	r2, [pc, #148]	; (80091ac <UART_AdvFeatureConfig+0x158>)
 8009118:	4013      	ands	r3, r2
 800911a:	0019      	movs	r1, r3
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	430a      	orrs	r2, r1
 8009126:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800912c:	2240      	movs	r2, #64	; 0x40
 800912e:	4013      	ands	r3, r2
 8009130:	d01d      	beq.n	800916e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	4a1d      	ldr	r2, [pc, #116]	; (80091b0 <UART_AdvFeatureConfig+0x15c>)
 800913a:	4013      	ands	r3, r2
 800913c:	0019      	movs	r1, r3
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	430a      	orrs	r2, r1
 8009148:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800914e:	2380      	movs	r3, #128	; 0x80
 8009150:	035b      	lsls	r3, r3, #13
 8009152:	429a      	cmp	r2, r3
 8009154:	d10b      	bne.n	800916e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	4a15      	ldr	r2, [pc, #84]	; (80091b4 <UART_AdvFeatureConfig+0x160>)
 800915e:	4013      	ands	r3, r2
 8009160:	0019      	movs	r1, r3
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	430a      	orrs	r2, r1
 800916c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009172:	2280      	movs	r2, #128	; 0x80
 8009174:	4013      	ands	r3, r2
 8009176:	d00b      	beq.n	8009190 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	4a0e      	ldr	r2, [pc, #56]	; (80091b8 <UART_AdvFeatureConfig+0x164>)
 8009180:	4013      	ands	r3, r2
 8009182:	0019      	movs	r1, r3
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	430a      	orrs	r2, r1
 800918e:	605a      	str	r2, [r3, #4]
  }
}
 8009190:	46c0      	nop			; (mov r8, r8)
 8009192:	46bd      	mov	sp, r7
 8009194:	b002      	add	sp, #8
 8009196:	bd80      	pop	{r7, pc}
 8009198:	ffff7fff 	.word	0xffff7fff
 800919c:	fffdffff 	.word	0xfffdffff
 80091a0:	fffeffff 	.word	0xfffeffff
 80091a4:	fffbffff 	.word	0xfffbffff
 80091a8:	ffffefff 	.word	0xffffefff
 80091ac:	ffffdfff 	.word	0xffffdfff
 80091b0:	ffefffff 	.word	0xffefffff
 80091b4:	ff9fffff 	.word	0xff9fffff
 80091b8:	fff7ffff 	.word	0xfff7ffff

080091bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b092      	sub	sp, #72	; 0x48
 80091c0:	af02      	add	r7, sp, #8
 80091c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2290      	movs	r2, #144	; 0x90
 80091c8:	2100      	movs	r1, #0
 80091ca:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80091cc:	f7fb fce6 	bl	8004b9c <HAL_GetTick>
 80091d0:	0003      	movs	r3, r0
 80091d2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	2208      	movs	r2, #8
 80091dc:	4013      	ands	r3, r2
 80091de:	2b08      	cmp	r3, #8
 80091e0:	d12d      	bne.n	800923e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80091e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091e4:	2280      	movs	r2, #128	; 0x80
 80091e6:	0391      	lsls	r1, r2, #14
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	4a47      	ldr	r2, [pc, #284]	; (8009308 <UART_CheckIdleState+0x14c>)
 80091ec:	9200      	str	r2, [sp, #0]
 80091ee:	2200      	movs	r2, #0
 80091f0:	f000 f88e 	bl	8009310 <UART_WaitOnFlagUntilTimeout>
 80091f4:	1e03      	subs	r3, r0, #0
 80091f6:	d022      	beq.n	800923e <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091f8:	f3ef 8310 	mrs	r3, PRIMASK
 80091fc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80091fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009200:	63bb      	str	r3, [r7, #56]	; 0x38
 8009202:	2301      	movs	r3, #1
 8009204:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009208:	f383 8810 	msr	PRIMASK, r3
}
 800920c:	46c0      	nop			; (mov r8, r8)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	681a      	ldr	r2, [r3, #0]
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	2180      	movs	r1, #128	; 0x80
 800921a:	438a      	bics	r2, r1
 800921c:	601a      	str	r2, [r3, #0]
 800921e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009220:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009224:	f383 8810 	msr	PRIMASK, r3
}
 8009228:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2288      	movs	r2, #136	; 0x88
 800922e:	2120      	movs	r1, #32
 8009230:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2284      	movs	r2, #132	; 0x84
 8009236:	2100      	movs	r1, #0
 8009238:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800923a:	2303      	movs	r3, #3
 800923c:	e060      	b.n	8009300 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	2204      	movs	r2, #4
 8009246:	4013      	ands	r3, r2
 8009248:	2b04      	cmp	r3, #4
 800924a:	d146      	bne.n	80092da <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800924c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800924e:	2280      	movs	r2, #128	; 0x80
 8009250:	03d1      	lsls	r1, r2, #15
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	4a2c      	ldr	r2, [pc, #176]	; (8009308 <UART_CheckIdleState+0x14c>)
 8009256:	9200      	str	r2, [sp, #0]
 8009258:	2200      	movs	r2, #0
 800925a:	f000 f859 	bl	8009310 <UART_WaitOnFlagUntilTimeout>
 800925e:	1e03      	subs	r3, r0, #0
 8009260:	d03b      	beq.n	80092da <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009262:	f3ef 8310 	mrs	r3, PRIMASK
 8009266:	60fb      	str	r3, [r7, #12]
  return(result);
 8009268:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800926a:	637b      	str	r3, [r7, #52]	; 0x34
 800926c:	2301      	movs	r3, #1
 800926e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	f383 8810 	msr	PRIMASK, r3
}
 8009276:	46c0      	nop			; (mov r8, r8)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	681a      	ldr	r2, [r3, #0]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4922      	ldr	r1, [pc, #136]	; (800930c <UART_CheckIdleState+0x150>)
 8009284:	400a      	ands	r2, r1
 8009286:	601a      	str	r2, [r3, #0]
 8009288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800928a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	f383 8810 	msr	PRIMASK, r3
}
 8009292:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009294:	f3ef 8310 	mrs	r3, PRIMASK
 8009298:	61bb      	str	r3, [r7, #24]
  return(result);
 800929a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800929c:	633b      	str	r3, [r7, #48]	; 0x30
 800929e:	2301      	movs	r3, #1
 80092a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092a2:	69fb      	ldr	r3, [r7, #28]
 80092a4:	f383 8810 	msr	PRIMASK, r3
}
 80092a8:	46c0      	nop			; (mov r8, r8)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	689a      	ldr	r2, [r3, #8]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	2101      	movs	r1, #1
 80092b6:	438a      	bics	r2, r1
 80092b8:	609a      	str	r2, [r3, #8]
 80092ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092bc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092be:	6a3b      	ldr	r3, [r7, #32]
 80092c0:	f383 8810 	msr	PRIMASK, r3
}
 80092c4:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	228c      	movs	r2, #140	; 0x8c
 80092ca:	2120      	movs	r1, #32
 80092cc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2284      	movs	r2, #132	; 0x84
 80092d2:	2100      	movs	r1, #0
 80092d4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80092d6:	2303      	movs	r3, #3
 80092d8:	e012      	b.n	8009300 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2288      	movs	r2, #136	; 0x88
 80092de:	2120      	movs	r1, #32
 80092e0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	228c      	movs	r2, #140	; 0x8c
 80092e6:	2120      	movs	r1, #32
 80092e8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2200      	movs	r2, #0
 80092ee:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2200      	movs	r2, #0
 80092f4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2284      	movs	r2, #132	; 0x84
 80092fa:	2100      	movs	r1, #0
 80092fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80092fe:	2300      	movs	r3, #0
}
 8009300:	0018      	movs	r0, r3
 8009302:	46bd      	mov	sp, r7
 8009304:	b010      	add	sp, #64	; 0x40
 8009306:	bd80      	pop	{r7, pc}
 8009308:	01ffffff 	.word	0x01ffffff
 800930c:	fffffedf 	.word	0xfffffedf

08009310 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	60f8      	str	r0, [r7, #12]
 8009318:	60b9      	str	r1, [r7, #8]
 800931a:	603b      	str	r3, [r7, #0]
 800931c:	1dfb      	adds	r3, r7, #7
 800931e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009320:	e051      	b.n	80093c6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009322:	69bb      	ldr	r3, [r7, #24]
 8009324:	3301      	adds	r3, #1
 8009326:	d04e      	beq.n	80093c6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009328:	f7fb fc38 	bl	8004b9c <HAL_GetTick>
 800932c:	0002      	movs	r2, r0
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	1ad3      	subs	r3, r2, r3
 8009332:	69ba      	ldr	r2, [r7, #24]
 8009334:	429a      	cmp	r2, r3
 8009336:	d302      	bcc.n	800933e <UART_WaitOnFlagUntilTimeout+0x2e>
 8009338:	69bb      	ldr	r3, [r7, #24]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d101      	bne.n	8009342 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800933e:	2303      	movs	r3, #3
 8009340:	e051      	b.n	80093e6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	2204      	movs	r2, #4
 800934a:	4013      	ands	r3, r2
 800934c:	d03b      	beq.n	80093c6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	2b80      	cmp	r3, #128	; 0x80
 8009352:	d038      	beq.n	80093c6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	2b40      	cmp	r3, #64	; 0x40
 8009358:	d035      	beq.n	80093c6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	69db      	ldr	r3, [r3, #28]
 8009360:	2208      	movs	r2, #8
 8009362:	4013      	ands	r3, r2
 8009364:	2b08      	cmp	r3, #8
 8009366:	d111      	bne.n	800938c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	2208      	movs	r2, #8
 800936e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	0018      	movs	r0, r3
 8009374:	f000 f83c 	bl	80093f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2290      	movs	r2, #144	; 0x90
 800937c:	2108      	movs	r1, #8
 800937e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2284      	movs	r2, #132	; 0x84
 8009384:	2100      	movs	r1, #0
 8009386:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8009388:	2301      	movs	r3, #1
 800938a:	e02c      	b.n	80093e6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	69da      	ldr	r2, [r3, #28]
 8009392:	2380      	movs	r3, #128	; 0x80
 8009394:	011b      	lsls	r3, r3, #4
 8009396:	401a      	ands	r2, r3
 8009398:	2380      	movs	r3, #128	; 0x80
 800939a:	011b      	lsls	r3, r3, #4
 800939c:	429a      	cmp	r2, r3
 800939e:	d112      	bne.n	80093c6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	2280      	movs	r2, #128	; 0x80
 80093a6:	0112      	lsls	r2, r2, #4
 80093a8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	0018      	movs	r0, r3
 80093ae:	f000 f81f 	bl	80093f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2290      	movs	r2, #144	; 0x90
 80093b6:	2120      	movs	r1, #32
 80093b8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2284      	movs	r2, #132	; 0x84
 80093be:	2100      	movs	r1, #0
 80093c0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80093c2:	2303      	movs	r3, #3
 80093c4:	e00f      	b.n	80093e6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	69db      	ldr	r3, [r3, #28]
 80093cc:	68ba      	ldr	r2, [r7, #8]
 80093ce:	4013      	ands	r3, r2
 80093d0:	68ba      	ldr	r2, [r7, #8]
 80093d2:	1ad3      	subs	r3, r2, r3
 80093d4:	425a      	negs	r2, r3
 80093d6:	4153      	adcs	r3, r2
 80093d8:	b2db      	uxtb	r3, r3
 80093da:	001a      	movs	r2, r3
 80093dc:	1dfb      	adds	r3, r7, #7
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d09e      	beq.n	8009322 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80093e4:	2300      	movs	r3, #0
}
 80093e6:	0018      	movs	r0, r3
 80093e8:	46bd      	mov	sp, r7
 80093ea:	b004      	add	sp, #16
 80093ec:	bd80      	pop	{r7, pc}
	...

080093f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b08e      	sub	sp, #56	; 0x38
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093f8:	f3ef 8310 	mrs	r3, PRIMASK
 80093fc:	617b      	str	r3, [r7, #20]
  return(result);
 80093fe:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009400:	637b      	str	r3, [r7, #52]	; 0x34
 8009402:	2301      	movs	r3, #1
 8009404:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009406:	69bb      	ldr	r3, [r7, #24]
 8009408:	f383 8810 	msr	PRIMASK, r3
}
 800940c:	46c0      	nop			; (mov r8, r8)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	681a      	ldr	r2, [r3, #0]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4926      	ldr	r1, [pc, #152]	; (80094b4 <UART_EndRxTransfer+0xc4>)
 800941a:	400a      	ands	r2, r1
 800941c:	601a      	str	r2, [r3, #0]
 800941e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009420:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009422:	69fb      	ldr	r3, [r7, #28]
 8009424:	f383 8810 	msr	PRIMASK, r3
}
 8009428:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800942a:	f3ef 8310 	mrs	r3, PRIMASK
 800942e:	623b      	str	r3, [r7, #32]
  return(result);
 8009430:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009432:	633b      	str	r3, [r7, #48]	; 0x30
 8009434:	2301      	movs	r3, #1
 8009436:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800943a:	f383 8810 	msr	PRIMASK, r3
}
 800943e:	46c0      	nop			; (mov r8, r8)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	689a      	ldr	r2, [r3, #8]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	491b      	ldr	r1, [pc, #108]	; (80094b8 <UART_EndRxTransfer+0xc8>)
 800944c:	400a      	ands	r2, r1
 800944e:	609a      	str	r2, [r3, #8]
 8009450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009452:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009456:	f383 8810 	msr	PRIMASK, r3
}
 800945a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009460:	2b01      	cmp	r3, #1
 8009462:	d118      	bne.n	8009496 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009464:	f3ef 8310 	mrs	r3, PRIMASK
 8009468:	60bb      	str	r3, [r7, #8]
  return(result);
 800946a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800946c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800946e:	2301      	movs	r3, #1
 8009470:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	f383 8810 	msr	PRIMASK, r3
}
 8009478:	46c0      	nop			; (mov r8, r8)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	681a      	ldr	r2, [r3, #0]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	2110      	movs	r1, #16
 8009486:	438a      	bics	r2, r1
 8009488:	601a      	str	r2, [r3, #0]
 800948a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800948c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	f383 8810 	msr	PRIMASK, r3
}
 8009494:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	228c      	movs	r2, #140	; 0x8c
 800949a:	2120      	movs	r1, #32
 800949c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2200      	movs	r2, #0
 80094a2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2200      	movs	r2, #0
 80094a8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80094aa:	46c0      	nop			; (mov r8, r8)
 80094ac:	46bd      	mov	sp, r7
 80094ae:	b00e      	add	sp, #56	; 0x38
 80094b0:	bd80      	pop	{r7, pc}
 80094b2:	46c0      	nop			; (mov r8, r8)
 80094b4:	fffffedf 	.word	0xfffffedf
 80094b8:	effffffe 	.word	0xeffffffe

080094bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2284      	movs	r2, #132	; 0x84
 80094c8:	5c9b      	ldrb	r3, [r3, r2]
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	d101      	bne.n	80094d2 <HAL_UARTEx_DisableFifoMode+0x16>
 80094ce:	2302      	movs	r3, #2
 80094d0:	e027      	b.n	8009522 <HAL_UARTEx_DisableFifoMode+0x66>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2284      	movs	r2, #132	; 0x84
 80094d6:	2101      	movs	r1, #1
 80094d8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2288      	movs	r2, #136	; 0x88
 80094de:	2124      	movs	r1, #36	; 0x24
 80094e0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	681a      	ldr	r2, [r3, #0]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	2101      	movs	r1, #1
 80094f6:	438a      	bics	r2, r1
 80094f8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	4a0b      	ldr	r2, [pc, #44]	; (800952c <HAL_UARTEx_DisableFifoMode+0x70>)
 80094fe:	4013      	ands	r3, r2
 8009500:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2200      	movs	r2, #0
 8009506:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	68fa      	ldr	r2, [r7, #12]
 800950e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2288      	movs	r2, #136	; 0x88
 8009514:	2120      	movs	r1, #32
 8009516:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2284      	movs	r2, #132	; 0x84
 800951c:	2100      	movs	r1, #0
 800951e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009520:	2300      	movs	r3, #0
}
 8009522:	0018      	movs	r0, r3
 8009524:	46bd      	mov	sp, r7
 8009526:	b004      	add	sp, #16
 8009528:	bd80      	pop	{r7, pc}
 800952a:	46c0      	nop			; (mov r8, r8)
 800952c:	dfffffff 	.word	0xdfffffff

08009530 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b084      	sub	sp, #16
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2284      	movs	r2, #132	; 0x84
 800953e:	5c9b      	ldrb	r3, [r3, r2]
 8009540:	2b01      	cmp	r3, #1
 8009542:	d101      	bne.n	8009548 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009544:	2302      	movs	r3, #2
 8009546:	e02e      	b.n	80095a6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2284      	movs	r2, #132	; 0x84
 800954c:	2101      	movs	r1, #1
 800954e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2288      	movs	r2, #136	; 0x88
 8009554:	2124      	movs	r1, #36	; 0x24
 8009556:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	681a      	ldr	r2, [r3, #0]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	2101      	movs	r1, #1
 800956c:	438a      	bics	r2, r1
 800956e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	689b      	ldr	r3, [r3, #8]
 8009576:	00db      	lsls	r3, r3, #3
 8009578:	08d9      	lsrs	r1, r3, #3
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	683a      	ldr	r2, [r7, #0]
 8009580:	430a      	orrs	r2, r1
 8009582:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	0018      	movs	r0, r3
 8009588:	f000 f854 	bl	8009634 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	68fa      	ldr	r2, [r7, #12]
 8009592:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2288      	movs	r2, #136	; 0x88
 8009598:	2120      	movs	r1, #32
 800959a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2284      	movs	r2, #132	; 0x84
 80095a0:	2100      	movs	r1, #0
 80095a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80095a4:	2300      	movs	r3, #0
}
 80095a6:	0018      	movs	r0, r3
 80095a8:	46bd      	mov	sp, r7
 80095aa:	b004      	add	sp, #16
 80095ac:	bd80      	pop	{r7, pc}
	...

080095b0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b084      	sub	sp, #16
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2284      	movs	r2, #132	; 0x84
 80095be:	5c9b      	ldrb	r3, [r3, r2]
 80095c0:	2b01      	cmp	r3, #1
 80095c2:	d101      	bne.n	80095c8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80095c4:	2302      	movs	r3, #2
 80095c6:	e02f      	b.n	8009628 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2284      	movs	r2, #132	; 0x84
 80095cc:	2101      	movs	r1, #1
 80095ce:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2288      	movs	r2, #136	; 0x88
 80095d4:	2124      	movs	r1, #36	; 0x24
 80095d6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	681a      	ldr	r2, [r3, #0]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	2101      	movs	r1, #1
 80095ec:	438a      	bics	r2, r1
 80095ee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	689b      	ldr	r3, [r3, #8]
 80095f6:	4a0e      	ldr	r2, [pc, #56]	; (8009630 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80095f8:	4013      	ands	r3, r2
 80095fa:	0019      	movs	r1, r3
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	683a      	ldr	r2, [r7, #0]
 8009602:	430a      	orrs	r2, r1
 8009604:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	0018      	movs	r0, r3
 800960a:	f000 f813 	bl	8009634 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	68fa      	ldr	r2, [r7, #12]
 8009614:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2288      	movs	r2, #136	; 0x88
 800961a:	2120      	movs	r1, #32
 800961c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2284      	movs	r2, #132	; 0x84
 8009622:	2100      	movs	r1, #0
 8009624:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009626:	2300      	movs	r3, #0
}
 8009628:	0018      	movs	r0, r3
 800962a:	46bd      	mov	sp, r7
 800962c:	b004      	add	sp, #16
 800962e:	bd80      	pop	{r7, pc}
 8009630:	f1ffffff 	.word	0xf1ffffff

08009634 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009636:	b085      	sub	sp, #20
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009640:	2b00      	cmp	r3, #0
 8009642:	d108      	bne.n	8009656 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	226a      	movs	r2, #106	; 0x6a
 8009648:	2101      	movs	r1, #1
 800964a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2268      	movs	r2, #104	; 0x68
 8009650:	2101      	movs	r1, #1
 8009652:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009654:	e043      	b.n	80096de <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009656:	260f      	movs	r6, #15
 8009658:	19bb      	adds	r3, r7, r6
 800965a:	2208      	movs	r2, #8
 800965c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800965e:	200e      	movs	r0, #14
 8009660:	183b      	adds	r3, r7, r0
 8009662:	2208      	movs	r2, #8
 8009664:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	0e5b      	lsrs	r3, r3, #25
 800966e:	b2da      	uxtb	r2, r3
 8009670:	240d      	movs	r4, #13
 8009672:	193b      	adds	r3, r7, r4
 8009674:	2107      	movs	r1, #7
 8009676:	400a      	ands	r2, r1
 8009678:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	0f5b      	lsrs	r3, r3, #29
 8009682:	b2da      	uxtb	r2, r3
 8009684:	250c      	movs	r5, #12
 8009686:	197b      	adds	r3, r7, r5
 8009688:	2107      	movs	r1, #7
 800968a:	400a      	ands	r2, r1
 800968c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800968e:	183b      	adds	r3, r7, r0
 8009690:	781b      	ldrb	r3, [r3, #0]
 8009692:	197a      	adds	r2, r7, r5
 8009694:	7812      	ldrb	r2, [r2, #0]
 8009696:	4914      	ldr	r1, [pc, #80]	; (80096e8 <UARTEx_SetNbDataToProcess+0xb4>)
 8009698:	5c8a      	ldrb	r2, [r1, r2]
 800969a:	435a      	muls	r2, r3
 800969c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800969e:	197b      	adds	r3, r7, r5
 80096a0:	781b      	ldrb	r3, [r3, #0]
 80096a2:	4a12      	ldr	r2, [pc, #72]	; (80096ec <UARTEx_SetNbDataToProcess+0xb8>)
 80096a4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80096a6:	0019      	movs	r1, r3
 80096a8:	f7f6 fdd0 	bl	800024c <__divsi3>
 80096ac:	0003      	movs	r3, r0
 80096ae:	b299      	uxth	r1, r3
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	226a      	movs	r2, #106	; 0x6a
 80096b4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80096b6:	19bb      	adds	r3, r7, r6
 80096b8:	781b      	ldrb	r3, [r3, #0]
 80096ba:	193a      	adds	r2, r7, r4
 80096bc:	7812      	ldrb	r2, [r2, #0]
 80096be:	490a      	ldr	r1, [pc, #40]	; (80096e8 <UARTEx_SetNbDataToProcess+0xb4>)
 80096c0:	5c8a      	ldrb	r2, [r1, r2]
 80096c2:	435a      	muls	r2, r3
 80096c4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80096c6:	193b      	adds	r3, r7, r4
 80096c8:	781b      	ldrb	r3, [r3, #0]
 80096ca:	4a08      	ldr	r2, [pc, #32]	; (80096ec <UARTEx_SetNbDataToProcess+0xb8>)
 80096cc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80096ce:	0019      	movs	r1, r3
 80096d0:	f7f6 fdbc 	bl	800024c <__divsi3>
 80096d4:	0003      	movs	r3, r0
 80096d6:	b299      	uxth	r1, r3
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2268      	movs	r2, #104	; 0x68
 80096dc:	5299      	strh	r1, [r3, r2]
}
 80096de:	46c0      	nop			; (mov r8, r8)
 80096e0:	46bd      	mov	sp, r7
 80096e2:	b005      	add	sp, #20
 80096e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096e6:	46c0      	nop			; (mov r8, r8)
 80096e8:	08011308 	.word	0x08011308
 80096ec:	08011310 	.word	0x08011310

080096f0 <hci_disconnection_complete_event_process>:
 * @param Reason Reason for disconnection. See Error Codes.
 * @retval None
 */

tBleStatus hci_disconnection_complete_event_process(uint8_t *buffer_in)
{
 80096f0:	b590      	push	{r4, r7, lr}
 80096f2:	b085      	sub	sp, #20
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80096f8:	240f      	movs	r4, #15
 80096fa:	193b      	adds	r3, r7, r4
 80096fc:	2200      	movs	r2, #0
 80096fe:	701a      	strb	r2, [r3, #0]
  /* Input params */
  hci_disconnection_complete_event_rp0 *rp0 = (hci_disconnection_complete_event_rp0 *)buffer_in;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	60bb      	str	r3, [r7, #8]
  hci_disconnection_complete_event(rp0->Status,
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	7818      	ldrb	r0, [r3, #0]
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	785a      	ldrb	r2, [r3, #1]
 800970c:	789b      	ldrb	r3, [r3, #2]
 800970e:	021b      	lsls	r3, r3, #8
 8009710:	4313      	orrs	r3, r2
 8009712:	b299      	uxth	r1, r3
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	78db      	ldrb	r3, [r3, #3]
 8009718:	001a      	movs	r2, r3
 800971a:	f7f9 fb9d 	bl	8002e58 <hci_disconnection_complete_event>
                                   rp0->Connection_Handle,
                                   rp0->Reason);

  return status;
 800971e:	193b      	adds	r3, r7, r4
 8009720:	781b      	ldrb	r3, [r3, #0]
}
 8009722:	0018      	movs	r0, r3
 8009724:	46bd      	mov	sp, r7
 8009726:	b005      	add	sp, #20
 8009728:	bd90      	pop	{r4, r7, pc}

0800972a <hci_encryption_change_event_process>:
 *        - 0x01: Link Level Encryption is ON with AES-CCM
 * @retval None
 */

tBleStatus hci_encryption_change_event_process(uint8_t *buffer_in)
{
 800972a:	b590      	push	{r4, r7, lr}
 800972c:	b085      	sub	sp, #20
 800972e:	af00      	add	r7, sp, #0
 8009730:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009732:	240f      	movs	r4, #15
 8009734:	193b      	adds	r3, r7, r4
 8009736:	2200      	movs	r2, #0
 8009738:	701a      	strb	r2, [r3, #0]
  /* Input params */
  hci_encryption_change_event_rp0 *rp0 = (hci_encryption_change_event_rp0 *)buffer_in;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	60bb      	str	r3, [r7, #8]
  hci_encryption_change_event(rp0->Status,
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	7818      	ldrb	r0, [r3, #0]
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	785a      	ldrb	r2, [r3, #1]
 8009746:	789b      	ldrb	r3, [r3, #2]
 8009748:	021b      	lsls	r3, r3, #8
 800974a:	4313      	orrs	r3, r2
 800974c:	b299      	uxth	r1, r3
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	78db      	ldrb	r3, [r3, #3]
 8009752:	001a      	movs	r2, r3
 8009754:	f001 fa0a 	bl	800ab6c <hci_encryption_change_event>
                              rp0->Connection_Handle,
                              rp0->Encryption_Enabled);

  return status;
 8009758:	193b      	adds	r3, r7, r4
 800975a:	781b      	ldrb	r3, [r3, #0]
}
 800975c:	0018      	movs	r0, r3
 800975e:	46bd      	mov	sp, r7
 8009760:	b005      	add	sp, #20
 8009762:	bd90      	pop	{r4, r7, pc}

08009764 <hci_read_remote_version_information_complete_event_process>:
 * @param Subversion Subversion of the LMP in the remote Controller
 * @retval None
 */

tBleStatus hci_read_remote_version_information_complete_event_process(uint8_t *buffer_in)
{
 8009764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009766:	b087      	sub	sp, #28
 8009768:	af02      	add	r7, sp, #8
 800976a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800976c:	260f      	movs	r6, #15
 800976e:	19bb      	adds	r3, r7, r6
 8009770:	2200      	movs	r2, #0
 8009772:	701a      	strb	r2, [r3, #0]
  /* Input params */
  hci_read_remote_version_information_complete_event_rp0 *rp0 = (hci_read_remote_version_information_complete_event_rp0 *)buffer_in;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	60bb      	str	r3, [r7, #8]
  hci_read_remote_version_information_complete_event(rp0->Status,
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	7818      	ldrb	r0, [r3, #0]
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	785a      	ldrb	r2, [r3, #1]
 8009780:	789b      	ldrb	r3, [r3, #2]
 8009782:	021b      	lsls	r3, r3, #8
 8009784:	4313      	orrs	r3, r2
 8009786:	b299      	uxth	r1, r3
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	78dc      	ldrb	r4, [r3, #3]
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	791a      	ldrb	r2, [r3, #4]
 8009790:	795b      	ldrb	r3, [r3, #5]
 8009792:	021b      	lsls	r3, r3, #8
 8009794:	4313      	orrs	r3, r2
 8009796:	b29d      	uxth	r5, r3
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	799a      	ldrb	r2, [r3, #6]
 800979c:	79db      	ldrb	r3, [r3, #7]
 800979e:	021b      	lsls	r3, r3, #8
 80097a0:	4313      	orrs	r3, r2
 80097a2:	b29b      	uxth	r3, r3
 80097a4:	9300      	str	r3, [sp, #0]
 80097a6:	002b      	movs	r3, r5
 80097a8:	0022      	movs	r2, r4
 80097aa:	f001 f9f9 	bl	800aba0 <hci_read_remote_version_information_complete_event>
                                                     rp0->Connection_Handle,
                                                     rp0->Version,
                                                     rp0->Manufacturer_Name,
                                                     rp0->Subversion);

  return status;
 80097ae:	19bb      	adds	r3, r7, r6
 80097b0:	781b      	ldrb	r3, [r3, #0]
}
 80097b2:	0018      	movs	r0, r3
 80097b4:	46bd      	mov	sp, r7
 80097b6:	b005      	add	sp, #20
 80097b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080097ba <hci_hardware_error_event_process>:
 *        - 0x03: Internal queue overflow error
 * @retval None
 */

tBleStatus hci_hardware_error_event_process(uint8_t *buffer_in)
{
 80097ba:	b590      	push	{r4, r7, lr}
 80097bc:	b085      	sub	sp, #20
 80097be:	af00      	add	r7, sp, #0
 80097c0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80097c2:	240f      	movs	r4, #15
 80097c4:	193b      	adds	r3, r7, r4
 80097c6:	2200      	movs	r2, #0
 80097c8:	701a      	strb	r2, [r3, #0]
  /* Input params */
  hci_hardware_error_event_rp0 *rp0 = (hci_hardware_error_event_rp0 *)buffer_in;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	60bb      	str	r3, [r7, #8]
  hci_hardware_error_event(rp0->Hardware_Code);
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	0018      	movs	r0, r3
 80097d4:	f001 fa02 	bl	800abdc <hci_hardware_error_event>

  return status;
 80097d8:	193b      	adds	r3, r7, r4
 80097da:	781b      	ldrb	r3, [r3, #0]
}
 80097dc:	0018      	movs	r0, r3
 80097de:	46bd      	mov	sp, r7
 80097e0:	b005      	add	sp, #20
 80097e2:	bd90      	pop	{r4, r7, pc}

080097e4 <hci_number_of_completed_packets_event_process>:
 * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
 * @retval None
 */

tBleStatus hci_number_of_completed_packets_event_process(uint8_t *buffer_in)
{
 80097e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097e6:	b0a7      	sub	sp, #156	; 0x9c
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80097ec:	238f      	movs	r3, #143	; 0x8f
 80097ee:	18fb      	adds	r3, r7, r3
 80097f0:	2200      	movs	r2, #0
 80097f2:	701a      	strb	r2, [r3, #0]
  /* Input params */
  hci_number_of_completed_packets_event_rp0 *rp0 = (hci_number_of_completed_packets_event_rp0 *)buffer_in;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2288      	movs	r2, #136	; 0x88
 80097f8:	18ba      	adds	r2, r7, r2
 80097fa:	6013      	str	r3, [r2, #0]
  uint8_t size = 1;
 80097fc:	2397      	movs	r3, #151	; 0x97
 80097fe:	18fb      	adds	r3, r7, r3
 8009800:	2201      	movs	r2, #1
 8009802:	701a      	strb	r2, [r3, #0]
  int i;
  Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Packets_Pair_Entry_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8009804:	2300      	movs	r3, #0
 8009806:	2290      	movs	r2, #144	; 0x90
 8009808:	18ba      	adds	r2, r7, r2
 800980a:	6013      	str	r3, [r2, #0]
 800980c:	e037      	b.n	800987e <hci_number_of_completed_packets_event_process+0x9a>
    Handle_Packets_Pair_Entry[i].Connection_Handle = rp0->Handle_Packets_Pair_Entry[i].Connection_Handle;
 800980e:	2588      	movs	r5, #136	; 0x88
 8009810:	197b      	adds	r3, r7, r5
 8009812:	681a      	ldr	r2, [r3, #0]
 8009814:	2090      	movs	r0, #144	; 0x90
 8009816:	183b      	adds	r3, r7, r0
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	009b      	lsls	r3, r3, #2
 800981c:	18d1      	adds	r1, r2, r3
 800981e:	7849      	ldrb	r1, [r1, #1]
 8009820:	18d3      	adds	r3, r2, r3
 8009822:	789b      	ldrb	r3, [r3, #2]
 8009824:	021b      	lsls	r3, r3, #8
 8009826:	430b      	orrs	r3, r1
 8009828:	b299      	uxth	r1, r3
 800982a:	2608      	movs	r6, #8
 800982c:	19bb      	adds	r3, r7, r6
 800982e:	183a      	adds	r2, r7, r0
 8009830:	6812      	ldr	r2, [r2, #0]
 8009832:	0092      	lsls	r2, r2, #2
 8009834:	52d1      	strh	r1, [r2, r3]
    size += 2;
 8009836:	2497      	movs	r4, #151	; 0x97
 8009838:	193b      	adds	r3, r7, r4
 800983a:	193a      	adds	r2, r7, r4
 800983c:	7812      	ldrb	r2, [r2, #0]
 800983e:	3202      	adds	r2, #2
 8009840:	701a      	strb	r2, [r3, #0]
    Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets = rp0->Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets;
 8009842:	197b      	adds	r3, r7, r5
 8009844:	681a      	ldr	r2, [r3, #0]
 8009846:	183b      	adds	r3, r7, r0
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	009b      	lsls	r3, r3, #2
 800984c:	18d1      	adds	r1, r2, r3
 800984e:	78c9      	ldrb	r1, [r1, #3]
 8009850:	18d3      	adds	r3, r2, r3
 8009852:	791b      	ldrb	r3, [r3, #4]
 8009854:	021b      	lsls	r3, r3, #8
 8009856:	430b      	orrs	r3, r1
 8009858:	b299      	uxth	r1, r3
 800985a:	19ba      	adds	r2, r7, r6
 800985c:	183b      	adds	r3, r7, r0
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	009b      	lsls	r3, r3, #2
 8009862:	18d3      	adds	r3, r2, r3
 8009864:	3302      	adds	r3, #2
 8009866:	1c0a      	adds	r2, r1, #0
 8009868:	801a      	strh	r2, [r3, #0]
    size += 2;
 800986a:	193b      	adds	r3, r7, r4
 800986c:	193a      	adds	r2, r7, r4
 800986e:	7812      	ldrb	r2, [r2, #0]
 8009870:	3202      	adds	r2, #2
 8009872:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8009874:	183b      	adds	r3, r7, r0
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	3301      	adds	r3, #1
 800987a:	183a      	adds	r2, r7, r0
 800987c:	6013      	str	r3, [r2, #0]
 800987e:	2188      	movs	r1, #136	; 0x88
 8009880:	187b      	adds	r3, r7, r1
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	781b      	ldrb	r3, [r3, #0]
 8009886:	001a      	movs	r2, r3
 8009888:	2390      	movs	r3, #144	; 0x90
 800988a:	18fb      	adds	r3, r7, r3
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4293      	cmp	r3, r2
 8009890:	dbbd      	blt.n	800980e <hci_number_of_completed_packets_event_process+0x2a>
  }
  hci_number_of_completed_packets_event(rp0->Number_of_Handles,
 8009892:	187b      	adds	r3, r7, r1
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	2208      	movs	r2, #8
 800989a:	18ba      	adds	r2, r7, r2
 800989c:	0011      	movs	r1, r2
 800989e:	0018      	movs	r0, r3
 80098a0:	f001 f9ac 	bl	800abfc <hci_number_of_completed_packets_event>
                                        Handle_Packets_Pair_Entry);

  return status;
 80098a4:	238f      	movs	r3, #143	; 0x8f
 80098a6:	18fb      	adds	r3, r7, r3
 80098a8:	781b      	ldrb	r3, [r3, #0]
}
 80098aa:	0018      	movs	r0, r3
 80098ac:	46bd      	mov	sp, r7
 80098ae:	b027      	add	sp, #156	; 0x9c
 80098b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080098b2 <hci_data_buffer_overflow_event_process>:
 *        - 0x01: ACL Buffer Overflow
 * @retval None
 */

tBleStatus hci_data_buffer_overflow_event_process(uint8_t *buffer_in)
{
 80098b2:	b590      	push	{r4, r7, lr}
 80098b4:	b085      	sub	sp, #20
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80098ba:	240f      	movs	r4, #15
 80098bc:	193b      	adds	r3, r7, r4
 80098be:	2200      	movs	r2, #0
 80098c0:	701a      	strb	r2, [r3, #0]
  /* Input params */
  hci_data_buffer_overflow_event_rp0 *rp0 = (hci_data_buffer_overflow_event_rp0 *)buffer_in;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	60bb      	str	r3, [r7, #8]
  hci_data_buffer_overflow_event(rp0->Link_Type);
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	781b      	ldrb	r3, [r3, #0]
 80098ca:	0018      	movs	r0, r3
 80098cc:	f001 f9a8 	bl	800ac20 <hci_data_buffer_overflow_event>

  return status;
 80098d0:	193b      	adds	r3, r7, r4
 80098d2:	781b      	ldrb	r3, [r3, #0]
}
 80098d4:	0018      	movs	r0, r3
 80098d6:	46bd      	mov	sp, r7
 80098d8:	b005      	add	sp, #20
 80098da:	bd90      	pop	{r4, r7, pc}

080098dc <hci_encryption_key_refresh_complete_event_process>:
 *        - 0x0000 ... 0x0EFF
 * @retval None
 */

tBleStatus hci_encryption_key_refresh_complete_event_process(uint8_t *buffer_in)
{
 80098dc:	b590      	push	{r4, r7, lr}
 80098de:	b085      	sub	sp, #20
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80098e4:	240f      	movs	r4, #15
 80098e6:	193b      	adds	r3, r7, r4
 80098e8:	2200      	movs	r2, #0
 80098ea:	701a      	strb	r2, [r3, #0]
  /* Input params */
  hci_encryption_key_refresh_complete_event_rp0 *rp0 = (hci_encryption_key_refresh_complete_event_rp0 *)buffer_in;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	60bb      	str	r3, [r7, #8]
  hci_encryption_key_refresh_complete_event(rp0->Status,
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	7818      	ldrb	r0, [r3, #0]
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	785a      	ldrb	r2, [r3, #1]
 80098f8:	789b      	ldrb	r3, [r3, #2]
 80098fa:	021b      	lsls	r3, r3, #8
 80098fc:	4313      	orrs	r3, r2
 80098fe:	b29b      	uxth	r3, r3
 8009900:	0019      	movs	r1, r3
 8009902:	f001 f99d 	bl	800ac40 <hci_encryption_key_refresh_complete_event>
                                            rp0->Connection_Handle);

  return status;
 8009906:	193b      	adds	r3, r7, r4
 8009908:	781b      	ldrb	r3, [r3, #0]
}
 800990a:	0018      	movs	r0, r3
 800990c:	46bd      	mov	sp, r7
 800990e:	b005      	add	sp, #20
 8009910:	bd90      	pop	{r4, r7, pc}

08009912 <aci_blue_initialized_event_process>:
 *        - 0x09: System reset due to ECC error
 * @retval None
 */

tBleStatus aci_blue_initialized_event_process(uint8_t *buffer_in)
{
 8009912:	b590      	push	{r4, r7, lr}
 8009914:	b085      	sub	sp, #20
 8009916:	af00      	add	r7, sp, #0
 8009918:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800991a:	240f      	movs	r4, #15
 800991c:	193b      	adds	r3, r7, r4
 800991e:	2200      	movs	r2, #0
 8009920:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_blue_initialized_event_rp0 *rp0 = (aci_blue_initialized_event_rp0 *)buffer_in;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	60bb      	str	r3, [r7, #8]
  aci_blue_initialized_event(rp0->Reason_Code);
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	781b      	ldrb	r3, [r3, #0]
 800992a:	0018      	movs	r0, r3
 800992c:	f001 fce0 	bl	800b2f0 <aci_blue_initialized_event>

  return status;
 8009930:	193b      	adds	r3, r7, r4
 8009932:	781b      	ldrb	r3, [r3, #0]
}
 8009934:	0018      	movs	r0, r3
 8009936:	46bd      	mov	sp, r7
 8009938:	b005      	add	sp, #20
 800993a:	bd90      	pop	{r4, r7, pc}

0800993c <aci_blue_events_lost_event_process>:
 *        - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
 * @retval None
 */

tBleStatus aci_blue_events_lost_event_process(uint8_t *buffer_in)
{
 800993c:	b590      	push	{r4, r7, lr}
 800993e:	b085      	sub	sp, #20
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009944:	240f      	movs	r4, #15
 8009946:	193b      	adds	r3, r7, r4
 8009948:	2200      	movs	r2, #0
 800994a:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_blue_events_lost_event_rp0 *rp0 = (aci_blue_events_lost_event_rp0 *)buffer_in;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	60bb      	str	r3, [r7, #8]
  aci_blue_events_lost_event(rp0->Lost_Events);
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	0018      	movs	r0, r3
 8009954:	f001 fce0 	bl	800b318 <aci_blue_events_lost_event>

  return status;
 8009958:	193b      	adds	r3, r7, r4
 800995a:	781b      	ldrb	r3, [r3, #0]
}
 800995c:	0018      	movs	r0, r3
 800995e:	46bd      	mov	sp, r7
 8009960:	b005      	add	sp, #20
 8009962:	bd90      	pop	{r4, r7, pc}

08009964 <aci_blue_crash_info_event_process>:
 * @param Debug_Data Debug data
 * @retval None
 */

tBleStatus aci_blue_crash_info_event_process(uint8_t *buffer_in)
{
 8009964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009966:	46de      	mov	lr, fp
 8009968:	4657      	mov	r7, sl
 800996a:	464e      	mov	r6, r9
 800996c:	4645      	mov	r5, r8
 800996e:	b5e0      	push	{r5, r6, r7, lr}
 8009970:	b08d      	sub	sp, #52	; 0x34
 8009972:	af08      	add	r7, sp, #32
 8009974:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009976:	230f      	movs	r3, #15
 8009978:	18fb      	adds	r3, r7, r3
 800997a:	2200      	movs	r2, #0
 800997c:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_blue_crash_info_event_rp0 *rp0 = (aci_blue_crash_info_event_rp0 *)buffer_in;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	60bb      	str	r3, [r7, #8]
  aci_blue_crash_info_event(rp0->Crash_Type,
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	7818      	ldrb	r0, [r3, #0]
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	785a      	ldrb	r2, [r3, #1]
 800998a:	7899      	ldrb	r1, [r3, #2]
 800998c:	0209      	lsls	r1, r1, #8
 800998e:	430a      	orrs	r2, r1
 8009990:	78d9      	ldrb	r1, [r3, #3]
 8009992:	0409      	lsls	r1, r1, #16
 8009994:	430a      	orrs	r2, r1
 8009996:	791b      	ldrb	r3, [r3, #4]
 8009998:	061b      	lsls	r3, r3, #24
 800999a:	4313      	orrs	r3, r2
 800999c:	4699      	mov	r9, r3
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	795a      	ldrb	r2, [r3, #5]
 80099a2:	7999      	ldrb	r1, [r3, #6]
 80099a4:	0209      	lsls	r1, r1, #8
 80099a6:	430a      	orrs	r2, r1
 80099a8:	79d9      	ldrb	r1, [r3, #7]
 80099aa:	0409      	lsls	r1, r1, #16
 80099ac:	430a      	orrs	r2, r1
 80099ae:	7a1b      	ldrb	r3, [r3, #8]
 80099b0:	061b      	lsls	r3, r3, #24
 80099b2:	4313      	orrs	r3, r2
 80099b4:	469a      	mov	sl, r3
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	7a5a      	ldrb	r2, [r3, #9]
 80099ba:	7a99      	ldrb	r1, [r3, #10]
 80099bc:	0209      	lsls	r1, r1, #8
 80099be:	430a      	orrs	r2, r1
 80099c0:	7ad9      	ldrb	r1, [r3, #11]
 80099c2:	0409      	lsls	r1, r1, #16
 80099c4:	430a      	orrs	r2, r1
 80099c6:	7b1b      	ldrb	r3, [r3, #12]
 80099c8:	061b      	lsls	r3, r3, #24
 80099ca:	4313      	orrs	r3, r2
 80099cc:	469b      	mov	fp, r3
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	7b5a      	ldrb	r2, [r3, #13]
 80099d2:	7b99      	ldrb	r1, [r3, #14]
 80099d4:	0209      	lsls	r1, r1, #8
 80099d6:	430a      	orrs	r2, r1
 80099d8:	7bd9      	ldrb	r1, [r3, #15]
 80099da:	0409      	lsls	r1, r1, #16
 80099dc:	430a      	orrs	r2, r1
 80099de:	7c1b      	ldrb	r3, [r3, #16]
 80099e0:	061b      	lsls	r3, r3, #24
 80099e2:	4313      	orrs	r3, r2
 80099e4:	001c      	movs	r4, r3
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	7c5a      	ldrb	r2, [r3, #17]
 80099ea:	7c99      	ldrb	r1, [r3, #18]
 80099ec:	0209      	lsls	r1, r1, #8
 80099ee:	430a      	orrs	r2, r1
 80099f0:	7cd9      	ldrb	r1, [r3, #19]
 80099f2:	0409      	lsls	r1, r1, #16
 80099f4:	430a      	orrs	r2, r1
 80099f6:	7d1b      	ldrb	r3, [r3, #20]
 80099f8:	061b      	lsls	r3, r3, #24
 80099fa:	4313      	orrs	r3, r2
 80099fc:	001d      	movs	r5, r3
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	7d5a      	ldrb	r2, [r3, #21]
 8009a02:	7d99      	ldrb	r1, [r3, #22]
 8009a04:	0209      	lsls	r1, r1, #8
 8009a06:	430a      	orrs	r2, r1
 8009a08:	7dd9      	ldrb	r1, [r3, #23]
 8009a0a:	0409      	lsls	r1, r1, #16
 8009a0c:	430a      	orrs	r2, r1
 8009a0e:	7e1b      	ldrb	r3, [r3, #24]
 8009a10:	061b      	lsls	r3, r3, #24
 8009a12:	4313      	orrs	r3, r2
 8009a14:	001e      	movs	r6, r3
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	7e5a      	ldrb	r2, [r3, #25]
 8009a1a:	7e99      	ldrb	r1, [r3, #26]
 8009a1c:	0209      	lsls	r1, r1, #8
 8009a1e:	430a      	orrs	r2, r1
 8009a20:	7ed9      	ldrb	r1, [r3, #27]
 8009a22:	0409      	lsls	r1, r1, #16
 8009a24:	430a      	orrs	r2, r1
 8009a26:	7f1b      	ldrb	r3, [r3, #28]
 8009a28:	061b      	lsls	r3, r3, #24
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	469c      	mov	ip, r3
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	7f5a      	ldrb	r2, [r3, #29]
 8009a32:	7f99      	ldrb	r1, [r3, #30]
 8009a34:	0209      	lsls	r1, r1, #8
 8009a36:	430a      	orrs	r2, r1
 8009a38:	7fd9      	ldrb	r1, [r3, #31]
 8009a3a:	0409      	lsls	r1, r1, #16
 8009a3c:	430a      	orrs	r2, r1
 8009a3e:	2120      	movs	r1, #32
 8009a40:	5c5b      	ldrb	r3, [r3, r1]
 8009a42:	061b      	lsls	r3, r3, #24
 8009a44:	4313      	orrs	r3, r2
 8009a46:	4698      	mov	r8, r3
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	2221      	movs	r2, #33	; 0x21
 8009a4c:	5c9a      	ldrb	r2, [r3, r2]
 8009a4e:	2122      	movs	r1, #34	; 0x22
 8009a50:	5c59      	ldrb	r1, [r3, r1]
 8009a52:	0209      	lsls	r1, r1, #8
 8009a54:	430a      	orrs	r2, r1
 8009a56:	2123      	movs	r1, #35	; 0x23
 8009a58:	5c59      	ldrb	r1, [r3, r1]
 8009a5a:	0409      	lsls	r1, r1, #16
 8009a5c:	430a      	orrs	r2, r1
 8009a5e:	2124      	movs	r1, #36	; 0x24
 8009a60:	5c5b      	ldrb	r3, [r3, r1]
 8009a62:	061b      	lsls	r3, r3, #24
 8009a64:	4313      	orrs	r3, r2
 8009a66:	0019      	movs	r1, r3
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	2225      	movs	r2, #37	; 0x25
 8009a6c:	5c9b      	ldrb	r3, [r3, r2]
                            rp0->R12,
                            rp0->LR,
                            rp0->PC,
                            rp0->xPSR,
                            rp0->Debug_Data_Length,
                            rp0->Debug_Data);
 8009a6e:	68ba      	ldr	r2, [r7, #8]
 8009a70:	3226      	adds	r2, #38	; 0x26
  aci_blue_crash_info_event(rp0->Crash_Type,
 8009a72:	9207      	str	r2, [sp, #28]
 8009a74:	9306      	str	r3, [sp, #24]
 8009a76:	9105      	str	r1, [sp, #20]
 8009a78:	4642      	mov	r2, r8
 8009a7a:	9204      	str	r2, [sp, #16]
 8009a7c:	4662      	mov	r2, ip
 8009a7e:	9203      	str	r2, [sp, #12]
 8009a80:	9602      	str	r6, [sp, #8]
 8009a82:	9501      	str	r5, [sp, #4]
 8009a84:	9400      	str	r4, [sp, #0]
 8009a86:	465b      	mov	r3, fp
 8009a88:	4652      	mov	r2, sl
 8009a8a:	4649      	mov	r1, r9
 8009a8c:	f001 fc52 	bl	800b334 <aci_blue_crash_info_event>

  return status;
 8009a90:	230f      	movs	r3, #15
 8009a92:	18fb      	adds	r3, r7, r3
 8009a94:	781b      	ldrb	r3, [r3, #0]
}
 8009a96:	0018      	movs	r0, r3
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	b005      	add	sp, #20
 8009a9c:	bcf0      	pop	{r4, r5, r6, r7}
 8009a9e:	46bb      	mov	fp, r7
 8009aa0:	46b2      	mov	sl, r6
 8009aa2:	46a9      	mov	r9, r5
 8009aa4:	46a0      	mov	r8, r4
 8009aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009aa8 <aci_hal_end_of_radio_activity_event_process>:
 *        time units.
 * @retval None
 */

tBleStatus aci_hal_end_of_radio_activity_event_process(uint8_t *buffer_in)
{
 8009aa8:	b5b0      	push	{r4, r5, r7, lr}
 8009aaa:	b084      	sub	sp, #16
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009ab0:	250f      	movs	r5, #15
 8009ab2:	197b      	adds	r3, r7, r5
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_hal_end_of_radio_activity_event_rp0 *rp0 = (aci_hal_end_of_radio_activity_event_rp0 *)buffer_in;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	60bb      	str	r3, [r7, #8]
  aci_hal_end_of_radio_activity_event(rp0->Last_State,
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	7818      	ldrb	r0, [r3, #0]
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	785c      	ldrb	r4, [r3, #1]
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	789a      	ldrb	r2, [r3, #2]
 8009ac8:	78d9      	ldrb	r1, [r3, #3]
 8009aca:	0209      	lsls	r1, r1, #8
 8009acc:	430a      	orrs	r2, r1
 8009ace:	7919      	ldrb	r1, [r3, #4]
 8009ad0:	0409      	lsls	r1, r1, #16
 8009ad2:	430a      	orrs	r2, r1
 8009ad4:	795b      	ldrb	r3, [r3, #5]
 8009ad6:	061b      	lsls	r3, r3, #24
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	001a      	movs	r2, r3
 8009adc:	0021      	movs	r1, r4
 8009ade:	f001 fc3d 	bl	800b35c <aci_hal_end_of_radio_activity_event>
                                      rp0->Next_State,
                                      rp0->Next_State_SysTime);

  return status;
 8009ae2:	197b      	adds	r3, r7, r5
 8009ae4:	781b      	ldrb	r3, [r3, #0]
}
 8009ae6:	0018      	movs	r0, r3
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	b004      	add	sp, #16
 8009aec:	bdb0      	pop	{r4, r5, r7, pc}

08009aee <aci_hal_scan_req_report_event_process>:
 *        peer device
 * @retval None
 */

tBleStatus aci_hal_scan_req_report_event_process(uint8_t *buffer_in)
{
 8009aee:	b590      	push	{r4, r7, lr}
 8009af0:	b085      	sub	sp, #20
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009af6:	240f      	movs	r4, #15
 8009af8:	193b      	adds	r3, r7, r4
 8009afa:	2200      	movs	r2, #0
 8009afc:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_hal_scan_req_report_event_rp0 *rp0 = (aci_hal_scan_req_report_event_rp0 *)buffer_in;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	60bb      	str	r3, [r7, #8]
  aci_hal_scan_req_report_event(rp0->RSSI,
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	2000      	movs	r0, #0
 8009b06:	5618      	ldrsb	r0, [r3, r0]
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	7859      	ldrb	r1, [r3, #1]
                                rp0->Peer_Address_Type,
                                rp0->Peer_Address);
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	3302      	adds	r3, #2
  aci_hal_scan_req_report_event(rp0->RSSI,
 8009b10:	001a      	movs	r2, r3
 8009b12:	f001 fc37 	bl	800b384 <aci_hal_scan_req_report_event>

  return status;
 8009b16:	193b      	adds	r3, r7, r4
 8009b18:	781b      	ldrb	r3, [r3, #0]
}
 8009b1a:	0018      	movs	r0, r3
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	b005      	add	sp, #20
 8009b20:	bd90      	pop	{r4, r7, pc}

08009b22 <aci_hal_fw_error_event_process>:
 *        the connection handle where the abnormal condition has occurred.
 * @retval None
 */

tBleStatus aci_hal_fw_error_event_process(uint8_t *buffer_in)
{
 8009b22:	b590      	push	{r4, r7, lr}
 8009b24:	b085      	sub	sp, #20
 8009b26:	af00      	add	r7, sp, #0
 8009b28:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009b2a:	240f      	movs	r4, #15
 8009b2c:	193b      	adds	r3, r7, r4
 8009b2e:	2200      	movs	r2, #0
 8009b30:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_hal_fw_error_event_rp0 *rp0 = (aci_hal_fw_error_event_rp0 *)buffer_in;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	60bb      	str	r3, [r7, #8]
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	7818      	ldrb	r0, [r3, #0]
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	7859      	ldrb	r1, [r3, #1]
                         rp0->Data_Length,
                         rp0->Data);
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	3302      	adds	r3, #2
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 8009b42:	001a      	movs	r2, r3
 8009b44:	f001 fc32 	bl	800b3ac <aci_hal_fw_error_event>

  return status;
 8009b48:	193b      	adds	r3, r7, r4
 8009b4a:	781b      	ldrb	r3, [r3, #0]
}
 8009b4c:	0018      	movs	r0, r3
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	b005      	add	sp, #20
 8009b52:	bd90      	pop	{r4, r7, pc}

08009b54 <aci_gap_limited_discoverable_event_process>:
 *        discoverable mode ends due to timeout. The timeout is 180 seconds.
 * @retval None
 */

tBleStatus aci_gap_limited_discoverable_event_process(uint8_t *buffer_in)
{
 8009b54:	b590      	push	{r4, r7, lr}
 8009b56:	b085      	sub	sp, #20
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009b5c:	240f      	movs	r4, #15
 8009b5e:	193b      	adds	r3, r7, r4
 8009b60:	2200      	movs	r2, #0
 8009b62:	701a      	strb	r2, [r3, #0]
  aci_gap_limited_discoverable_event();
 8009b64:	f001 f93a 	bl	800addc <aci_gap_limited_discoverable_event>

  return status;
 8009b68:	193b      	adds	r3, r7, r4
 8009b6a:	781b      	ldrb	r3, [r3, #0]
}
 8009b6c:	0018      	movs	r0, r3
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	b005      	add	sp, #20
 8009b72:	bd90      	pop	{r4, r7, pc}

08009b74 <aci_gap_pairing_complete_event_process>:
 *        - 0x0C: SMP_SC_NUMCOMPARISON_FAILED
 * @retval None
 */

tBleStatus aci_gap_pairing_complete_event_process(uint8_t *buffer_in)
{
 8009b74:	b590      	push	{r4, r7, lr}
 8009b76:	b085      	sub	sp, #20
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009b7c:	240f      	movs	r4, #15
 8009b7e:	193b      	adds	r3, r7, r4
 8009b80:	2200      	movs	r2, #0
 8009b82:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gap_pairing_complete_event_rp0 *rp0 = (aci_gap_pairing_complete_event_rp0 *)buffer_in;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	60bb      	str	r3, [r7, #8]
  aci_gap_pairing_complete_event(rp0->Connection_Handle,
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	781a      	ldrb	r2, [r3, #0]
 8009b8c:	785b      	ldrb	r3, [r3, #1]
 8009b8e:	021b      	lsls	r3, r3, #8
 8009b90:	4313      	orrs	r3, r2
 8009b92:	b298      	uxth	r0, r3
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	7899      	ldrb	r1, [r3, #2]
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	78db      	ldrb	r3, [r3, #3]
 8009b9c:	001a      	movs	r2, r3
 8009b9e:	f001 f929 	bl	800adf4 <aci_gap_pairing_complete_event>
                                 rp0->Status,
                                 rp0->Reason);

  return status;
 8009ba2:	193b      	adds	r3, r7, r4
 8009ba4:	781b      	ldrb	r3, [r3, #0]
}
 8009ba6:	0018      	movs	r0, r3
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	b005      	add	sp, #20
 8009bac:	bd90      	pop	{r4, r7, pc}

08009bae <aci_gap_pass_key_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_pass_key_req_event_process(uint8_t *buffer_in)
{
 8009bae:	b590      	push	{r4, r7, lr}
 8009bb0:	b085      	sub	sp, #20
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009bb6:	240f      	movs	r4, #15
 8009bb8:	193b      	adds	r3, r7, r4
 8009bba:	2200      	movs	r2, #0
 8009bbc:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gap_pass_key_req_event_rp0 *rp0 = (aci_gap_pass_key_req_event_rp0 *)buffer_in;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	60bb      	str	r3, [r7, #8]
  aci_gap_pass_key_req_event(rp0->Connection_Handle);
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	781a      	ldrb	r2, [r3, #0]
 8009bc6:	785b      	ldrb	r3, [r3, #1]
 8009bc8:	021b      	lsls	r3, r3, #8
 8009bca:	4313      	orrs	r3, r2
 8009bcc:	b29b      	uxth	r3, r3
 8009bce:	0018      	movs	r0, r3
 8009bd0:	f001 f92a 	bl	800ae28 <aci_gap_pass_key_req_event>

  return status;
 8009bd4:	193b      	adds	r3, r7, r4
 8009bd6:	781b      	ldrb	r3, [r3, #0]
}
 8009bd8:	0018      	movs	r0, r3
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	b005      	add	sp, #20
 8009bde:	bd90      	pop	{r4, r7, pc}

08009be0 <aci_gap_authorization_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_authorization_req_event_process(uint8_t *buffer_in)
{
 8009be0:	b590      	push	{r4, r7, lr}
 8009be2:	b085      	sub	sp, #20
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009be8:	240f      	movs	r4, #15
 8009bea:	193b      	adds	r3, r7, r4
 8009bec:	2200      	movs	r2, #0
 8009bee:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gap_authorization_req_event_rp0 *rp0 = (aci_gap_authorization_req_event_rp0 *)buffer_in;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	60bb      	str	r3, [r7, #8]
  aci_gap_authorization_req_event(rp0->Connection_Handle);
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	781a      	ldrb	r2, [r3, #0]
 8009bf8:	785b      	ldrb	r3, [r3, #1]
 8009bfa:	021b      	lsls	r3, r3, #8
 8009bfc:	4313      	orrs	r3, r2
 8009bfe:	b29b      	uxth	r3, r3
 8009c00:	0018      	movs	r0, r3
 8009c02:	f001 f921 	bl	800ae48 <aci_gap_authorization_req_event>

  return status;
 8009c06:	193b      	adds	r3, r7, r4
 8009c08:	781b      	ldrb	r3, [r3, #0]
}
 8009c0a:	0018      	movs	r0, r3
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	b005      	add	sp, #20
 8009c10:	bd90      	pop	{r4, r7, pc}

08009c12 <aci_gap_slave_security_initiated_event_process>:
 *        successfully sent to the master.
 * @retval None
 */

tBleStatus aci_gap_slave_security_initiated_event_process(uint8_t *buffer_in)
{
 8009c12:	b590      	push	{r4, r7, lr}
 8009c14:	b085      	sub	sp, #20
 8009c16:	af00      	add	r7, sp, #0
 8009c18:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009c1a:	240f      	movs	r4, #15
 8009c1c:	193b      	adds	r3, r7, r4
 8009c1e:	2200      	movs	r2, #0
 8009c20:	701a      	strb	r2, [r3, #0]
  aci_gap_slave_security_initiated_event();
 8009c22:	f001 f921 	bl	800ae68 <aci_gap_slave_security_initiated_event>

  return status;
 8009c26:	193b      	adds	r3, r7, r4
 8009c28:	781b      	ldrb	r3, [r3, #0]
}
 8009c2a:	0018      	movs	r0, r3
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	b005      	add	sp, #20
 8009c30:	bd90      	pop	{r4, r7, pc}

08009c32 <aci_gap_bond_lost_event_process>:
 *        force_rebond set to 1.
 * @retval None
 */

tBleStatus aci_gap_bond_lost_event_process(uint8_t *buffer_in)
{
 8009c32:	b590      	push	{r4, r7, lr}
 8009c34:	b085      	sub	sp, #20
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009c3a:	240f      	movs	r4, #15
 8009c3c:	193b      	adds	r3, r7, r4
 8009c3e:	2200      	movs	r2, #0
 8009c40:	701a      	strb	r2, [r3, #0]
  aci_gap_bond_lost_event();
 8009c42:	f001 f91d 	bl	800ae80 <aci_gap_bond_lost_event>

  return status;
 8009c46:	193b      	adds	r3, r7, r4
 8009c48:	781b      	ldrb	r3, [r3, #0]
}
 8009c4a:	0018      	movs	r0, r3
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	b005      	add	sp, #20
 8009c50:	bd90      	pop	{r4, r7, pc}

08009c52 <aci_gap_proc_complete_event_process>:
 *        of the peer device if the procedure completed successfully.
 * @retval None
 */

tBleStatus aci_gap_proc_complete_event_process(uint8_t *buffer_in)
{
 8009c52:	b590      	push	{r4, r7, lr}
 8009c54:	b085      	sub	sp, #20
 8009c56:	af00      	add	r7, sp, #0
 8009c58:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009c5a:	240f      	movs	r4, #15
 8009c5c:	193b      	adds	r3, r7, r4
 8009c5e:	2200      	movs	r2, #0
 8009c60:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gap_proc_complete_event_rp0 *rp0 = (aci_gap_proc_complete_event_rp0 *)buffer_in;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	60bb      	str	r3, [r7, #8]
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	7818      	ldrb	r0, [r3, #0]
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	7859      	ldrb	r1, [r3, #1]
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	789a      	ldrb	r2, [r3, #2]
                              rp0->Status,
                              rp0->Data_Length,
                              rp0->Data);
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	3303      	adds	r3, #3
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 8009c76:	f7f9 f84b 	bl	8002d10 <aci_gap_proc_complete_event>

  return status;
 8009c7a:	193b      	adds	r3, r7, r4
 8009c7c:	781b      	ldrb	r3, [r3, #0]
}
 8009c7e:	0018      	movs	r0, r3
 8009c80:	46bd      	mov	sp, r7
 8009c82:	b005      	add	sp, #20
 8009c84:	bd90      	pop	{r4, r7, pc}

08009c86 <aci_gap_addr_not_resolved_event_process>:
 *        could not be resolved with any of the stored IRK's.
 * @retval None
 */

tBleStatus aci_gap_addr_not_resolved_event_process(uint8_t *buffer_in)
{
 8009c86:	b590      	push	{r4, r7, lr}
 8009c88:	b085      	sub	sp, #20
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009c8e:	240f      	movs	r4, #15
 8009c90:	193b      	adds	r3, r7, r4
 8009c92:	2200      	movs	r2, #0
 8009c94:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gap_addr_not_resolved_event_rp0 *rp0 = (aci_gap_addr_not_resolved_event_rp0 *)buffer_in;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	60bb      	str	r3, [r7, #8]
  aci_gap_addr_not_resolved_event(rp0->Connection_Handle);
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	781a      	ldrb	r2, [r3, #0]
 8009c9e:	785b      	ldrb	r3, [r3, #1]
 8009ca0:	021b      	lsls	r3, r3, #8
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	b29b      	uxth	r3, r3
 8009ca6:	0018      	movs	r0, r3
 8009ca8:	f001 f8f6 	bl	800ae98 <aci_gap_addr_not_resolved_event>

  return status;
 8009cac:	193b      	adds	r3, r7, r4
 8009cae:	781b      	ldrb	r3, [r3, #0]
}
 8009cb0:	0018      	movs	r0, r3
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	b005      	add	sp, #20
 8009cb6:	bd90      	pop	{r4, r7, pc}

08009cb8 <aci_gap_numeric_comparison_value_event_process>:
 * @param Numeric_Value
 * @retval None
 */

tBleStatus aci_gap_numeric_comparison_value_event_process(uint8_t *buffer_in)
{
 8009cb8:	b590      	push	{r4, r7, lr}
 8009cba:	b085      	sub	sp, #20
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009cc0:	240f      	movs	r4, #15
 8009cc2:	193b      	adds	r3, r7, r4
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gap_numeric_comparison_value_event_rp0 *rp0 = (aci_gap_numeric_comparison_value_event_rp0 *)buffer_in;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	60bb      	str	r3, [r7, #8]
  aci_gap_numeric_comparison_value_event(rp0->Connection_Handle,
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	781a      	ldrb	r2, [r3, #0]
 8009cd0:	785b      	ldrb	r3, [r3, #1]
 8009cd2:	021b      	lsls	r3, r3, #8
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	b298      	uxth	r0, r3
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	789a      	ldrb	r2, [r3, #2]
 8009cdc:	78d9      	ldrb	r1, [r3, #3]
 8009cde:	0209      	lsls	r1, r1, #8
 8009ce0:	430a      	orrs	r2, r1
 8009ce2:	7919      	ldrb	r1, [r3, #4]
 8009ce4:	0409      	lsls	r1, r1, #16
 8009ce6:	430a      	orrs	r2, r1
 8009ce8:	795b      	ldrb	r3, [r3, #5]
 8009cea:	061b      	lsls	r3, r3, #24
 8009cec:	4313      	orrs	r3, r2
 8009cee:	0019      	movs	r1, r3
 8009cf0:	f001 f8e2 	bl	800aeb8 <aci_gap_numeric_comparison_value_event>
                                         rp0->Numeric_Value);

  return status;
 8009cf4:	193b      	adds	r3, r7, r4
 8009cf6:	781b      	ldrb	r3, [r3, #0]
}
 8009cf8:	0018      	movs	r0, r3
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	b005      	add	sp, #20
 8009cfe:	bd90      	pop	{r4, r7, pc}

08009d00 <aci_gap_keypress_notification_event_process>:
 *        - 0x04: PASSKEY_ENTRY_COMPLETED
 * @retval None
 */

tBleStatus aci_gap_keypress_notification_event_process(uint8_t *buffer_in)
{
 8009d00:	b590      	push	{r4, r7, lr}
 8009d02:	b085      	sub	sp, #20
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009d08:	240f      	movs	r4, #15
 8009d0a:	193b      	adds	r3, r7, r4
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gap_keypress_notification_event_rp0 *rp0 = (aci_gap_keypress_notification_event_rp0 *)buffer_in;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	60bb      	str	r3, [r7, #8]
  aci_gap_keypress_notification_event(rp0->Connection_Handle,
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	781a      	ldrb	r2, [r3, #0]
 8009d18:	785b      	ldrb	r3, [r3, #1]
 8009d1a:	021b      	lsls	r3, r3, #8
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	b29a      	uxth	r2, r3
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	789b      	ldrb	r3, [r3, #2]
 8009d24:	0019      	movs	r1, r3
 8009d26:	0010      	movs	r0, r2
 8009d28:	f001 f8d8 	bl	800aedc <aci_gap_keypress_notification_event>
                                      rp0->Notification_Type);

  return status;
 8009d2c:	193b      	adds	r3, r7, r4
 8009d2e:	781b      	ldrb	r3, [r3, #0]
}
 8009d30:	0018      	movs	r0, r3
 8009d32:	46bd      	mov	sp, r7
 8009d34:	b005      	add	sp, #20
 8009d36:	bd90      	pop	{r4, r7, pc}

08009d38 <aci_l2cap_connection_update_resp_event_process>:
 * @param Result
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_resp_event_process(uint8_t *buffer_in)
{
 8009d38:	b590      	push	{r4, r7, lr}
 8009d3a:	b085      	sub	sp, #20
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009d40:	240f      	movs	r4, #15
 8009d42:	193b      	adds	r3, r7, r4
 8009d44:	2200      	movs	r2, #0
 8009d46:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_l2cap_connection_update_resp_event_rp0 *rp0 = (aci_l2cap_connection_update_resp_event_rp0 *)buffer_in;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_resp_event(rp0->Connection_Handle,
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	781a      	ldrb	r2, [r3, #0]
 8009d50:	785b      	ldrb	r3, [r3, #1]
 8009d52:	021b      	lsls	r3, r3, #8
 8009d54:	4313      	orrs	r3, r2
 8009d56:	b298      	uxth	r0, r3
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	789a      	ldrb	r2, [r3, #2]
 8009d5c:	78db      	ldrb	r3, [r3, #3]
 8009d5e:	021b      	lsls	r3, r3, #8
 8009d60:	4313      	orrs	r3, r2
 8009d62:	b29b      	uxth	r3, r3
 8009d64:	0019      	movs	r1, r3
 8009d66:	f001 fa5f 	bl	800b228 <aci_l2cap_connection_update_resp_event>
                                         rp0->Result);

  return status;
 8009d6a:	193b      	adds	r3, r7, r4
 8009d6c:	781b      	ldrb	r3, [r3, #0]
}
 8009d6e:	0018      	movs	r0, r3
 8009d70:	46bd      	mov	sp, r7
 8009d72:	b005      	add	sp, #20
 8009d74:	bd90      	pop	{r4, r7, pc}

08009d76 <aci_l2cap_proc_timeout_event_process>:
 * @param Data
 * @retval None
 */

tBleStatus aci_l2cap_proc_timeout_event_process(uint8_t *buffer_in)
{
 8009d76:	b590      	push	{r4, r7, lr}
 8009d78:	b085      	sub	sp, #20
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009d7e:	240f      	movs	r4, #15
 8009d80:	193b      	adds	r3, r7, r4
 8009d82:	2200      	movs	r2, #0
 8009d84:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_l2cap_proc_timeout_event_rp0 *rp0 = (aci_l2cap_proc_timeout_event_rp0 *)buffer_in;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	60bb      	str	r3, [r7, #8]
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	781a      	ldrb	r2, [r3, #0]
 8009d8e:	785b      	ldrb	r3, [r3, #1]
 8009d90:	021b      	lsls	r3, r3, #8
 8009d92:	4313      	orrs	r3, r2
 8009d94:	b298      	uxth	r0, r3
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	7899      	ldrb	r1, [r3, #2]
                               rp0->Data_Length,
                               rp0->Data);
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	3303      	adds	r3, #3
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 8009d9e:	001a      	movs	r2, r3
 8009da0:	f001 fa56 	bl	800b250 <aci_l2cap_proc_timeout_event>

  return status;
 8009da4:	193b      	adds	r3, r7, r4
 8009da6:	781b      	ldrb	r3, [r3, #0]
}
 8009da8:	0018      	movs	r0, r3
 8009daa:	46bd      	mov	sp, r7
 8009dac:	b005      	add	sp, #20
 8009dae:	bd90      	pop	{r4, r7, pc}

08009db0 <aci_l2cap_connection_update_req_event_process>:
 *        - 10 (100 ms)  ... 3200 (32000 ms) 
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_req_event_process(uint8_t *buffer_in)
{
 8009db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009db2:	b089      	sub	sp, #36	; 0x24
 8009db4:	af04      	add	r7, sp, #16
 8009db6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009db8:	230f      	movs	r3, #15
 8009dba:	18fb      	adds	r3, r7, r3
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_l2cap_connection_update_req_event_rp0 *rp0 = (aci_l2cap_connection_update_req_event_rp0 *)buffer_in;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_req_event(rp0->Connection_Handle,
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	781a      	ldrb	r2, [r3, #0]
 8009dc8:	785b      	ldrb	r3, [r3, #1]
 8009dca:	021b      	lsls	r3, r3, #8
 8009dcc:	4313      	orrs	r3, r2
 8009dce:	b29c      	uxth	r4, r3
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	789d      	ldrb	r5, [r3, #2]
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	78da      	ldrb	r2, [r3, #3]
 8009dd8:	791b      	ldrb	r3, [r3, #4]
 8009dda:	021b      	lsls	r3, r3, #8
 8009ddc:	4313      	orrs	r3, r2
 8009dde:	b29e      	uxth	r6, r3
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	795a      	ldrb	r2, [r3, #5]
 8009de4:	799b      	ldrb	r3, [r3, #6]
 8009de6:	021b      	lsls	r3, r3, #8
 8009de8:	4313      	orrs	r3, r2
 8009dea:	b29a      	uxth	r2, r3
 8009dec:	4694      	mov	ip, r2
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	79da      	ldrb	r2, [r3, #7]
 8009df2:	7a1b      	ldrb	r3, [r3, #8]
 8009df4:	021b      	lsls	r3, r3, #8
 8009df6:	4313      	orrs	r3, r2
 8009df8:	b29a      	uxth	r2, r3
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	7a59      	ldrb	r1, [r3, #9]
 8009dfe:	7a9b      	ldrb	r3, [r3, #10]
 8009e00:	021b      	lsls	r3, r3, #8
 8009e02:	430b      	orrs	r3, r1
 8009e04:	b299      	uxth	r1, r3
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	7ad8      	ldrb	r0, [r3, #11]
 8009e0a:	7b1b      	ldrb	r3, [r3, #12]
 8009e0c:	021b      	lsls	r3, r3, #8
 8009e0e:	4303      	orrs	r3, r0
 8009e10:	b29b      	uxth	r3, r3
 8009e12:	9302      	str	r3, [sp, #8]
 8009e14:	9101      	str	r1, [sp, #4]
 8009e16:	9200      	str	r2, [sp, #0]
 8009e18:	4663      	mov	r3, ip
 8009e1a:	0032      	movs	r2, r6
 8009e1c:	0029      	movs	r1, r5
 8009e1e:	0020      	movs	r0, r4
 8009e20:	f001 fa2a 	bl	800b278 <aci_l2cap_connection_update_req_event>
                                        rp0->Interval_Min,
                                        rp0->Interval_Max,
                                        rp0->Slave_Latency,
                                        rp0->Timeout_Multiplier);

  return status;
 8009e24:	230f      	movs	r3, #15
 8009e26:	18fb      	adds	r3, r7, r3
 8009e28:	781b      	ldrb	r3, [r3, #0]
}
 8009e2a:	0018      	movs	r0, r3
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	b005      	add	sp, #20
 8009e30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009e32 <aci_l2cap_command_reject_event_process>:
 * @param Data Data field associated with Reason
 * @retval None
 */

tBleStatus aci_l2cap_command_reject_event_process(uint8_t *buffer_in)
{
 8009e32:	b5b0      	push	{r4, r5, r7, lr}
 8009e34:	b086      	sub	sp, #24
 8009e36:	af02      	add	r7, sp, #8
 8009e38:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009e3a:	250f      	movs	r5, #15
 8009e3c:	197b      	adds	r3, r7, r5
 8009e3e:	2200      	movs	r2, #0
 8009e40:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_l2cap_command_reject_event_rp0 *rp0 = (aci_l2cap_command_reject_event_rp0 *)buffer_in;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	60bb      	str	r3, [r7, #8]
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	781a      	ldrb	r2, [r3, #0]
 8009e4a:	785b      	ldrb	r3, [r3, #1]
 8009e4c:	021b      	lsls	r3, r3, #8
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	b298      	uxth	r0, r3
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	7899      	ldrb	r1, [r3, #2]
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	78da      	ldrb	r2, [r3, #3]
 8009e5a:	791b      	ldrb	r3, [r3, #4]
 8009e5c:	021b      	lsls	r3, r3, #8
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	b29a      	uxth	r2, r3
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	795c      	ldrb	r4, [r3, #5]
                                 rp0->Identifier,
                                 rp0->Reason,
                                 rp0->Data_Length,
                                 rp0->Data);
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	3306      	adds	r3, #6
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 8009e6a:	9300      	str	r3, [sp, #0]
 8009e6c:	0023      	movs	r3, r4
 8009e6e:	f001 fa21 	bl	800b2b4 <aci_l2cap_command_reject_event>

  return status;
 8009e72:	197b      	adds	r3, r7, r5
 8009e74:	781b      	ldrb	r3, [r3, #0]
}
 8009e76:	0018      	movs	r0, r3
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	b004      	add	sp, #16
 8009e7c:	bdb0      	pop	{r4, r5, r7, pc}

08009e7e <aci_gatt_attribute_modified_event_process>:
 * @param Attr_Data The modified value
 * @retval None
 */

tBleStatus aci_gatt_attribute_modified_event_process(uint8_t *buffer_in)
{
 8009e7e:	b5b0      	push	{r4, r5, r7, lr}
 8009e80:	b086      	sub	sp, #24
 8009e82:	af02      	add	r7, sp, #8
 8009e84:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009e86:	250f      	movs	r5, #15
 8009e88:	197b      	adds	r3, r7, r5
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gatt_attribute_modified_event_rp0 *rp0 = (aci_gatt_attribute_modified_event_rp0 *)buffer_in;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	60bb      	str	r3, [r7, #8]
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	781a      	ldrb	r2, [r3, #0]
 8009e96:	785b      	ldrb	r3, [r3, #1]
 8009e98:	021b      	lsls	r3, r3, #8
 8009e9a:	4313      	orrs	r3, r2
 8009e9c:	b298      	uxth	r0, r3
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	789a      	ldrb	r2, [r3, #2]
 8009ea2:	78db      	ldrb	r3, [r3, #3]
 8009ea4:	021b      	lsls	r3, r3, #8
 8009ea6:	4313      	orrs	r3, r2
 8009ea8:	b299      	uxth	r1, r3
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	791a      	ldrb	r2, [r3, #4]
 8009eae:	795b      	ldrb	r3, [r3, #5]
 8009eb0:	021b      	lsls	r3, r3, #8
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	b29c      	uxth	r4, r3
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	799a      	ldrb	r2, [r3, #6]
 8009eba:	79db      	ldrb	r3, [r3, #7]
 8009ebc:	021b      	lsls	r3, r3, #8
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	b29a      	uxth	r2, r3
                                    rp0->Attr_Handle,
                                    rp0->Offset,
                                    rp0->Attr_Data_Length,
                                    rp0->Attr_Data);
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	3308      	adds	r3, #8
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 8009ec6:	9300      	str	r3, [sp, #0]
 8009ec8:	0013      	movs	r3, r2
 8009eca:	0022      	movs	r2, r4
 8009ecc:	f7f9 f87e 	bl	8002fcc <aci_gatt_attribute_modified_event>

  return status;
 8009ed0:	197b      	adds	r3, r7, r5
 8009ed2:	781b      	ldrb	r3, [r3, #0]
}
 8009ed4:	0018      	movs	r0, r3
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	b004      	add	sp, #16
 8009eda:	bdb0      	pop	{r4, r5, r7, pc}

08009edc <aci_gatt_proc_timeout_event_process>:
 *        timed out
 * @retval None
 */

tBleStatus aci_gatt_proc_timeout_event_process(uint8_t *buffer_in)
{
 8009edc:	b590      	push	{r4, r7, lr}
 8009ede:	b085      	sub	sp, #20
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009ee4:	240f      	movs	r4, #15
 8009ee6:	193b      	adds	r3, r7, r4
 8009ee8:	2200      	movs	r2, #0
 8009eea:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gatt_proc_timeout_event_rp0 *rp0 = (aci_gatt_proc_timeout_event_rp0 *)buffer_in;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_timeout_event(rp0->Connection_Handle);
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	781a      	ldrb	r2, [r3, #0]
 8009ef4:	785b      	ldrb	r3, [r3, #1]
 8009ef6:	021b      	lsls	r3, r3, #8
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	b29b      	uxth	r3, r3
 8009efc:	0018      	movs	r0, r3
 8009efe:	f001 f801 	bl	800af04 <aci_gatt_proc_timeout_event>

  return status;
 8009f02:	193b      	adds	r3, r7, r4
 8009f04:	781b      	ldrb	r3, [r3, #0]
}
 8009f06:	0018      	movs	r0, r3
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	b005      	add	sp, #20
 8009f0c:	bd90      	pop	{r4, r7, pc}

08009f0e <aci_att_exchange_mtu_resp_event_process>:
 * @param Server_RX_MTU ATT_MTU value agreed between server and client
 * @retval None
 */

tBleStatus aci_att_exchange_mtu_resp_event_process(uint8_t *buffer_in)
{
 8009f0e:	b590      	push	{r4, r7, lr}
 8009f10:	b085      	sub	sp, #20
 8009f12:	af00      	add	r7, sp, #0
 8009f14:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009f16:	240f      	movs	r4, #15
 8009f18:	193b      	adds	r3, r7, r4
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_att_exchange_mtu_resp_event_rp0 *rp0 = (aci_att_exchange_mtu_resp_event_rp0 *)buffer_in;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	60bb      	str	r3, [r7, #8]
  aci_att_exchange_mtu_resp_event(rp0->Connection_Handle,
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	781a      	ldrb	r2, [r3, #0]
 8009f26:	785b      	ldrb	r3, [r3, #1]
 8009f28:	021b      	lsls	r3, r3, #8
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	b298      	uxth	r0, r3
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	789a      	ldrb	r2, [r3, #2]
 8009f32:	78db      	ldrb	r3, [r3, #3]
 8009f34:	021b      	lsls	r3, r3, #8
 8009f36:	4313      	orrs	r3, r2
 8009f38:	b29b      	uxth	r3, r3
 8009f3a:	0019      	movs	r1, r3
 8009f3c:	f7f9 f94e 	bl	80031dc <aci_att_exchange_mtu_resp_event>
                                  rp0->Server_RX_MTU);

  return status;
 8009f40:	193b      	adds	r3, r7, r4
 8009f42:	781b      	ldrb	r3, [r3, #0]
}
 8009f44:	0018      	movs	r0, r3
 8009f46:	46bd      	mov	sp, r7
 8009f48:	b005      	add	sp, #20
 8009f4a:	bd90      	pop	{r4, r7, pc}

08009f4c <aci_att_find_info_resp_event_process>:
 *        pair is:[2 octets for handle, 16 octets for UUIDs]
 * @retval None
 */

tBleStatus aci_att_find_info_resp_event_process(uint8_t *buffer_in)
{
 8009f4c:	b590      	push	{r4, r7, lr}
 8009f4e:	b085      	sub	sp, #20
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009f54:	240f      	movs	r4, #15
 8009f56:	193b      	adds	r3, r7, r4
 8009f58:	2200      	movs	r2, #0
 8009f5a:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_att_find_info_resp_event_rp0 *rp0 = (aci_att_find_info_resp_event_rp0 *)buffer_in;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	60bb      	str	r3, [r7, #8]
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	781a      	ldrb	r2, [r3, #0]
 8009f64:	785b      	ldrb	r3, [r3, #1]
 8009f66:	021b      	lsls	r3, r3, #8
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	b298      	uxth	r0, r3
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	7899      	ldrb	r1, [r3, #2]
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	78da      	ldrb	r2, [r3, #3]
                               rp0->Format,
                               rp0->Event_Data_Length,
                               rp0->Handle_UUID_Pair);
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	3304      	adds	r3, #4
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 8009f78:	f000 ffd4 	bl	800af24 <aci_att_find_info_resp_event>

  return status;
 8009f7c:	193b      	adds	r3, r7, r4
 8009f7e:	781b      	ldrb	r3, [r3, #0]
}
 8009f80:	0018      	movs	r0, r3
 8009f82:	46bd      	mov	sp, r7
 8009f84:	b005      	add	sp, #20
 8009f86:	bd90      	pop	{r4, r7, pc}

08009f88 <aci_att_find_by_type_value_resp_event_process>:
 * @param Attribute_Group_Handle_Pair See @ref Attribute_Group_Handle_Pair_t
 * @retval None
 */

tBleStatus aci_att_find_by_type_value_resp_event_process(uint8_t *buffer_in)
{
 8009f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f8a:	b0a7      	sub	sp, #156	; 0x9c
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009f90:	238f      	movs	r3, #143	; 0x8f
 8009f92:	18fb      	adds	r3, r7, r3
 8009f94:	2200      	movs	r2, #0
 8009f96:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_att_find_by_type_value_resp_event_rp0 *rp0 = (aci_att_find_by_type_value_resp_event_rp0 *)buffer_in;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2288      	movs	r2, #136	; 0x88
 8009f9c:	18ba      	adds	r2, r7, r2
 8009f9e:	6013      	str	r3, [r2, #0]
  uint8_t size = 3;
 8009fa0:	2397      	movs	r3, #151	; 0x97
 8009fa2:	18fb      	adds	r3, r7, r3
 8009fa4:	2203      	movs	r2, #3
 8009fa6:	701a      	strb	r2, [r3, #0]
  int i;
  Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[HCI_MAX_PAYLOAD_SIZE/sizeof(Attribute_Group_Handle_Pair_t)];
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 8009fa8:	2300      	movs	r3, #0
 8009faa:	2290      	movs	r2, #144	; 0x90
 8009fac:	18ba      	adds	r2, r7, r2
 8009fae:	6013      	str	r3, [r2, #0]
 8009fb0:	e037      	b.n	800a022 <aci_att_find_by_type_value_resp_event_process+0x9a>
    Attribute_Group_Handle_Pair[i].Found_Attribute_Handle = rp0->Attribute_Group_Handle_Pair[i].Found_Attribute_Handle;
 8009fb2:	2588      	movs	r5, #136	; 0x88
 8009fb4:	197b      	adds	r3, r7, r5
 8009fb6:	681a      	ldr	r2, [r3, #0]
 8009fb8:	2090      	movs	r0, #144	; 0x90
 8009fba:	183b      	adds	r3, r7, r0
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	009b      	lsls	r3, r3, #2
 8009fc0:	18d1      	adds	r1, r2, r3
 8009fc2:	78c9      	ldrb	r1, [r1, #3]
 8009fc4:	18d3      	adds	r3, r2, r3
 8009fc6:	791b      	ldrb	r3, [r3, #4]
 8009fc8:	021b      	lsls	r3, r3, #8
 8009fca:	430b      	orrs	r3, r1
 8009fcc:	b299      	uxth	r1, r3
 8009fce:	2608      	movs	r6, #8
 8009fd0:	19bb      	adds	r3, r7, r6
 8009fd2:	183a      	adds	r2, r7, r0
 8009fd4:	6812      	ldr	r2, [r2, #0]
 8009fd6:	0092      	lsls	r2, r2, #2
 8009fd8:	52d1      	strh	r1, [r2, r3]
    size += 2;
 8009fda:	2497      	movs	r4, #151	; 0x97
 8009fdc:	193b      	adds	r3, r7, r4
 8009fde:	193a      	adds	r2, r7, r4
 8009fe0:	7812      	ldrb	r2, [r2, #0]
 8009fe2:	3202      	adds	r2, #2
 8009fe4:	701a      	strb	r2, [r3, #0]
    Attribute_Group_Handle_Pair[i].Group_End_Handle = rp0->Attribute_Group_Handle_Pair[i].Group_End_Handle;
 8009fe6:	197b      	adds	r3, r7, r5
 8009fe8:	681a      	ldr	r2, [r3, #0]
 8009fea:	183b      	adds	r3, r7, r0
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	009b      	lsls	r3, r3, #2
 8009ff0:	18d1      	adds	r1, r2, r3
 8009ff2:	7949      	ldrb	r1, [r1, #5]
 8009ff4:	18d3      	adds	r3, r2, r3
 8009ff6:	799b      	ldrb	r3, [r3, #6]
 8009ff8:	021b      	lsls	r3, r3, #8
 8009ffa:	430b      	orrs	r3, r1
 8009ffc:	b299      	uxth	r1, r3
 8009ffe:	19ba      	adds	r2, r7, r6
 800a000:	183b      	adds	r3, r7, r0
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	009b      	lsls	r3, r3, #2
 800a006:	18d3      	adds	r3, r2, r3
 800a008:	3302      	adds	r3, #2
 800a00a:	1c0a      	adds	r2, r1, #0
 800a00c:	801a      	strh	r2, [r3, #0]
    size += 2;
 800a00e:	193b      	adds	r3, r7, r4
 800a010:	193a      	adds	r2, r7, r4
 800a012:	7812      	ldrb	r2, [r2, #0]
 800a014:	3202      	adds	r2, #2
 800a016:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 800a018:	183b      	adds	r3, r7, r0
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	3301      	adds	r3, #1
 800a01e:	183a      	adds	r2, r7, r0
 800a020:	6013      	str	r3, [r2, #0]
 800a022:	2188      	movs	r1, #136	; 0x88
 800a024:	187b      	adds	r3, r7, r1
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	789b      	ldrb	r3, [r3, #2]
 800a02a:	001a      	movs	r2, r3
 800a02c:	2390      	movs	r3, #144	; 0x90
 800a02e:	18fb      	adds	r3, r7, r3
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	4293      	cmp	r3, r2
 800a034:	dbbd      	blt.n	8009fb2 <aci_att_find_by_type_value_resp_event_process+0x2a>
  }
  aci_att_find_by_type_value_resp_event(rp0->Connection_Handle,
 800a036:	187b      	adds	r3, r7, r1
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	781a      	ldrb	r2, [r3, #0]
 800a03c:	785b      	ldrb	r3, [r3, #1]
 800a03e:	021b      	lsls	r3, r3, #8
 800a040:	4313      	orrs	r3, r2
 800a042:	b298      	uxth	r0, r3
 800a044:	187b      	adds	r3, r7, r1
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	789b      	ldrb	r3, [r3, #2]
 800a04a:	2208      	movs	r2, #8
 800a04c:	18ba      	adds	r2, r7, r2
 800a04e:	0019      	movs	r1, r3
 800a050:	f000 ff82 	bl	800af58 <aci_att_find_by_type_value_resp_event>
                                        rp0->Num_of_Handle_Pair,
                                        Attribute_Group_Handle_Pair);

  return status;
 800a054:	238f      	movs	r3, #143	; 0x8f
 800a056:	18fb      	adds	r3, r7, r3
 800a058:	781b      	ldrb	r3, [r3, #0]
}
 800a05a:	0018      	movs	r0, r3
 800a05c:	46bd      	mov	sp, r7
 800a05e:	b027      	add	sp, #156	; 0x9c
 800a060:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a062 <aci_att_read_by_type_resp_event_process>:
 *        Value]
 * @retval None
 */

tBleStatus aci_att_read_by_type_resp_event_process(uint8_t *buffer_in)
{
 800a062:	b590      	push	{r4, r7, lr}
 800a064:	b085      	sub	sp, #20
 800a066:	af00      	add	r7, sp, #0
 800a068:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a06a:	240f      	movs	r4, #15
 800a06c:	193b      	adds	r3, r7, r4
 800a06e:	2200      	movs	r2, #0
 800a070:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_att_read_by_type_resp_event_rp0 *rp0 = (aci_att_read_by_type_resp_event_rp0 *)buffer_in;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	781a      	ldrb	r2, [r3, #0]
 800a07a:	785b      	ldrb	r3, [r3, #1]
 800a07c:	021b      	lsls	r3, r3, #8
 800a07e:	4313      	orrs	r3, r2
 800a080:	b298      	uxth	r0, r3
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	7899      	ldrb	r1, [r3, #2]
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	78da      	ldrb	r2, [r3, #3]
                                  rp0->Handle_Value_Pair_Length,
                                  rp0->Data_Length,
                                  rp0->Handle_Value_Pair_Data);
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	3304      	adds	r3, #4
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 800a08e:	f000 ff77 	bl	800af80 <aci_att_read_by_type_resp_event>

  return status;
 800a092:	193b      	adds	r3, r7, r4
 800a094:	781b      	ldrb	r3, [r3, #0]
}
 800a096:	0018      	movs	r0, r3
 800a098:	46bd      	mov	sp, r7
 800a09a:	b005      	add	sp, #20
 800a09c:	bd90      	pop	{r4, r7, pc}

0800a09e <aci_att_read_resp_event_process>:
 * @param Attribute_Value The value of the attribute.
 * @retval None
 */

tBleStatus aci_att_read_resp_event_process(uint8_t *buffer_in)
{
 800a09e:	b590      	push	{r4, r7, lr}
 800a0a0:	b085      	sub	sp, #20
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a0a6:	240f      	movs	r4, #15
 800a0a8:	193b      	adds	r3, r7, r4
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_att_read_resp_event_rp0 *rp0 = (aci_att_read_resp_event_rp0 *)buffer_in;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	60bb      	str	r3, [r7, #8]
  aci_att_read_resp_event(rp0->Connection_Handle,
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	781a      	ldrb	r2, [r3, #0]
 800a0b6:	785b      	ldrb	r3, [r3, #1]
 800a0b8:	021b      	lsls	r3, r3, #8
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	b298      	uxth	r0, r3
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	7899      	ldrb	r1, [r3, #2]
                          rp0->Event_Data_Length,
                          rp0->Attribute_Value);
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	3303      	adds	r3, #3
  aci_att_read_resp_event(rp0->Connection_Handle,
 800a0c6:	001a      	movs	r2, r3
 800a0c8:	f000 ff74 	bl	800afb4 <aci_att_read_resp_event>

  return status;
 800a0cc:	193b      	adds	r3, r7, r4
 800a0ce:	781b      	ldrb	r3, [r3, #0]
}
 800a0d0:	0018      	movs	r0, r3
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	b005      	add	sp, #20
 800a0d6:	bd90      	pop	{r4, r7, pc}

0800a0d8 <aci_att_read_blob_resp_event_process>:
 * @param Attribute_Value Part of the attribute value.
 * @retval None
 */

tBleStatus aci_att_read_blob_resp_event_process(uint8_t *buffer_in)
{
 800a0d8:	b590      	push	{r4, r7, lr}
 800a0da:	b085      	sub	sp, #20
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a0e0:	240f      	movs	r4, #15
 800a0e2:	193b      	adds	r3, r7, r4
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_att_read_blob_resp_event_rp0 *rp0 = (aci_att_read_blob_resp_event_rp0 *)buffer_in;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	60bb      	str	r3, [r7, #8]
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	781a      	ldrb	r2, [r3, #0]
 800a0f0:	785b      	ldrb	r3, [r3, #1]
 800a0f2:	021b      	lsls	r3, r3, #8
 800a0f4:	4313      	orrs	r3, r2
 800a0f6:	b298      	uxth	r0, r3
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	7899      	ldrb	r1, [r3, #2]
                               rp0->Event_Data_Length,
                               rp0->Attribute_Value);
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	3303      	adds	r3, #3
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 800a100:	001a      	movs	r2, r3
 800a102:	f000 ff6b 	bl	800afdc <aci_att_read_blob_resp_event>

  return status;
 800a106:	193b      	adds	r3, r7, r4
 800a108:	781b      	ldrb	r3, [r3, #0]
}
 800a10a:	0018      	movs	r0, r3
 800a10c:	46bd      	mov	sp, r7
 800a10e:	b005      	add	sp, #20
 800a110:	bd90      	pop	{r4, r7, pc}

0800a112 <aci_att_read_multiple_resp_event_process>:
 *        the order that they were requested.
 * @retval None
 */

tBleStatus aci_att_read_multiple_resp_event_process(uint8_t *buffer_in)
{
 800a112:	b590      	push	{r4, r7, lr}
 800a114:	b085      	sub	sp, #20
 800a116:	af00      	add	r7, sp, #0
 800a118:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a11a:	240f      	movs	r4, #15
 800a11c:	193b      	adds	r3, r7, r4
 800a11e:	2200      	movs	r2, #0
 800a120:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_att_read_multiple_resp_event_rp0 *rp0 = (aci_att_read_multiple_resp_event_rp0 *)buffer_in;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	60bb      	str	r3, [r7, #8]
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	781a      	ldrb	r2, [r3, #0]
 800a12a:	785b      	ldrb	r3, [r3, #1]
 800a12c:	021b      	lsls	r3, r3, #8
 800a12e:	4313      	orrs	r3, r2
 800a130:	b298      	uxth	r0, r3
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	7899      	ldrb	r1, [r3, #2]
                                   rp0->Event_Data_Length,
                                   rp0->Set_Of_Values);
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	3303      	adds	r3, #3
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 800a13a:	001a      	movs	r2, r3
 800a13c:	f000 ff62 	bl	800b004 <aci_att_read_multiple_resp_event>

  return status;
 800a140:	193b      	adds	r3, r7, r4
 800a142:	781b      	ldrb	r3, [r3, #0]
}
 800a144:	0018      	movs	r0, r3
 800a146:	46bd      	mov	sp, r7
 800a148:	b005      	add	sp, #20
 800a14a:	bd90      	pop	{r4, r7, pc}

0800a14c <aci_att_read_by_group_type_resp_event_process>:
 *        Handle, (Attribute_Data_Length - 4 octets) for Attribute Value]
 * @retval None
 */

tBleStatus aci_att_read_by_group_type_resp_event_process(uint8_t *buffer_in)
{
 800a14c:	b590      	push	{r4, r7, lr}
 800a14e:	b085      	sub	sp, #20
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a154:	240f      	movs	r4, #15
 800a156:	193b      	adds	r3, r7, r4
 800a158:	2200      	movs	r2, #0
 800a15a:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_att_read_by_group_type_resp_event_rp0 *rp0 = (aci_att_read_by_group_type_resp_event_rp0 *)buffer_in;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	781a      	ldrb	r2, [r3, #0]
 800a164:	785b      	ldrb	r3, [r3, #1]
 800a166:	021b      	lsls	r3, r3, #8
 800a168:	4313      	orrs	r3, r2
 800a16a:	b298      	uxth	r0, r3
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	7899      	ldrb	r1, [r3, #2]
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	78da      	ldrb	r2, [r3, #3]
                                        rp0->Attribute_Data_Length,
                                        rp0->Data_Length,
                                        rp0->Attribute_Data_List);
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	3304      	adds	r3, #4
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 800a178:	f000 ff58 	bl	800b02c <aci_att_read_by_group_type_resp_event>

  return status;
 800a17c:	193b      	adds	r3, r7, r4
 800a17e:	781b      	ldrb	r3, [r3, #0]
}
 800a180:	0018      	movs	r0, r3
 800a182:	46bd      	mov	sp, r7
 800a184:	b005      	add	sp, #20
 800a186:	bd90      	pop	{r4, r7, pc}

0800a188 <aci_att_prepare_write_resp_event_process>:
 * @param Part_Attribute_Value The value of the attribute to be written
 * @retval None
 */

tBleStatus aci_att_prepare_write_resp_event_process(uint8_t *buffer_in)
{
 800a188:	b5b0      	push	{r4, r5, r7, lr}
 800a18a:	b086      	sub	sp, #24
 800a18c:	af02      	add	r7, sp, #8
 800a18e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a190:	250f      	movs	r5, #15
 800a192:	197b      	adds	r3, r7, r5
 800a194:	2200      	movs	r2, #0
 800a196:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_att_prepare_write_resp_event_rp0 *rp0 = (aci_att_prepare_write_resp_event_rp0 *)buffer_in;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	60bb      	str	r3, [r7, #8]
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	781a      	ldrb	r2, [r3, #0]
 800a1a0:	785b      	ldrb	r3, [r3, #1]
 800a1a2:	021b      	lsls	r3, r3, #8
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	b298      	uxth	r0, r3
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	789a      	ldrb	r2, [r3, #2]
 800a1ac:	78db      	ldrb	r3, [r3, #3]
 800a1ae:	021b      	lsls	r3, r3, #8
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	b299      	uxth	r1, r3
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	791a      	ldrb	r2, [r3, #4]
 800a1b8:	795b      	ldrb	r3, [r3, #5]
 800a1ba:	021b      	lsls	r3, r3, #8
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	b29a      	uxth	r2, r3
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	799c      	ldrb	r4, [r3, #6]
                                   rp0->Attribute_Handle,
                                   rp0->Offset,
                                   rp0->Part_Attribute_Value_Length,
                                   rp0->Part_Attribute_Value);
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	3307      	adds	r3, #7
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 800a1c8:	9300      	str	r3, [sp, #0]
 800a1ca:	0023      	movs	r3, r4
 800a1cc:	f000 ff48 	bl	800b060 <aci_att_prepare_write_resp_event>

  return status;
 800a1d0:	197b      	adds	r3, r7, r5
 800a1d2:	781b      	ldrb	r3, [r3, #0]
}
 800a1d4:	0018      	movs	r0, r3
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	b004      	add	sp, #16
 800a1da:	bdb0      	pop	{r4, r5, r7, pc}

0800a1dc <aci_att_exec_write_resp_event_process>:
 * @param Connection_Handle Connection handle related to the response
 * @retval None
 */

tBleStatus aci_att_exec_write_resp_event_process(uint8_t *buffer_in)
{
 800a1dc:	b590      	push	{r4, r7, lr}
 800a1de:	b085      	sub	sp, #20
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a1e4:	240f      	movs	r4, #15
 800a1e6:	193b      	adds	r3, r7, r4
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_att_exec_write_resp_event_rp0 *rp0 = (aci_att_exec_write_resp_event_rp0 *)buffer_in;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	60bb      	str	r3, [r7, #8]
  aci_att_exec_write_resp_event(rp0->Connection_Handle);
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	781a      	ldrb	r2, [r3, #0]
 800a1f4:	785b      	ldrb	r3, [r3, #1]
 800a1f6:	021b      	lsls	r3, r3, #8
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	b29b      	uxth	r3, r3
 800a1fc:	0018      	movs	r0, r3
 800a1fe:	f000 ff4d 	bl	800b09c <aci_att_exec_write_resp_event>

  return status;
 800a202:	193b      	adds	r3, r7, r4
 800a204:	781b      	ldrb	r3, [r3, #0]
}
 800a206:	0018      	movs	r0, r3
 800a208:	46bd      	mov	sp, r7
 800a20a:	b005      	add	sp, #20
 800a20c:	bd90      	pop	{r4, r7, pc}

0800a20e <aci_gatt_indication_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_indication_event_process(uint8_t *buffer_in)
{
 800a20e:	b590      	push	{r4, r7, lr}
 800a210:	b085      	sub	sp, #20
 800a212:	af00      	add	r7, sp, #0
 800a214:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a216:	240f      	movs	r4, #15
 800a218:	193b      	adds	r3, r7, r4
 800a21a:	2200      	movs	r2, #0
 800a21c:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gatt_indication_event_rp0 *rp0 = (aci_gatt_indication_event_rp0 *)buffer_in;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	60bb      	str	r3, [r7, #8]
  aci_gatt_indication_event(rp0->Connection_Handle,
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	781a      	ldrb	r2, [r3, #0]
 800a226:	785b      	ldrb	r3, [r3, #1]
 800a228:	021b      	lsls	r3, r3, #8
 800a22a:	4313      	orrs	r3, r2
 800a22c:	b298      	uxth	r0, r3
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	789a      	ldrb	r2, [r3, #2]
 800a232:	78db      	ldrb	r3, [r3, #3]
 800a234:	021b      	lsls	r3, r3, #8
 800a236:	4313      	orrs	r3, r2
 800a238:	b299      	uxth	r1, r3
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	791a      	ldrb	r2, [r3, #4]
                            rp0->Attribute_Handle,
                            rp0->Attribute_Value_Length,
                            rp0->Attribute_Value);
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	3305      	adds	r3, #5
  aci_gatt_indication_event(rp0->Connection_Handle,
 800a242:	f000 ff3b 	bl	800b0bc <aci_gatt_indication_event>

  return status;
 800a246:	193b      	adds	r3, r7, r4
 800a248:	781b      	ldrb	r3, [r3, #0]
}
 800a24a:	0018      	movs	r0, r3
 800a24c:	46bd      	mov	sp, r7
 800a24e:	b005      	add	sp, #20
 800a250:	bd90      	pop	{r4, r7, pc}

0800a252 <aci_gatt_notification_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_notification_event_process(uint8_t *buffer_in)
{
 800a252:	b590      	push	{r4, r7, lr}
 800a254:	b085      	sub	sp, #20
 800a256:	af00      	add	r7, sp, #0
 800a258:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a25a:	240f      	movs	r4, #15
 800a25c:	193b      	adds	r3, r7, r4
 800a25e:	2200      	movs	r2, #0
 800a260:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gatt_notification_event_rp0 *rp0 = (aci_gatt_notification_event_rp0 *)buffer_in;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	60bb      	str	r3, [r7, #8]
  aci_gatt_notification_event(rp0->Connection_Handle,
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	781a      	ldrb	r2, [r3, #0]
 800a26a:	785b      	ldrb	r3, [r3, #1]
 800a26c:	021b      	lsls	r3, r3, #8
 800a26e:	4313      	orrs	r3, r2
 800a270:	b298      	uxth	r0, r3
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	789a      	ldrb	r2, [r3, #2]
 800a276:	78db      	ldrb	r3, [r3, #3]
 800a278:	021b      	lsls	r3, r3, #8
 800a27a:	4313      	orrs	r3, r2
 800a27c:	b299      	uxth	r1, r3
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	791a      	ldrb	r2, [r3, #4]
                              rp0->Attribute_Handle,
                              rp0->Attribute_Value_Length,
                              rp0->Attribute_Value);
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	3305      	adds	r3, #5
  aci_gatt_notification_event(rp0->Connection_Handle,
 800a286:	f7f8 fec1 	bl	800300c <aci_gatt_notification_event>

  return status;
 800a28a:	193b      	adds	r3, r7, r4
 800a28c:	781b      	ldrb	r3, [r3, #0]
}
 800a28e:	0018      	movs	r0, r3
 800a290:	46bd      	mov	sp, r7
 800a292:	b005      	add	sp, #20
 800a294:	bd90      	pop	{r4, r7, pc}

0800a296 <aci_gatt_proc_complete_event_process>:
 *        was successful.
 * @retval None
 */

tBleStatus aci_gatt_proc_complete_event_process(uint8_t *buffer_in)
{
 800a296:	b590      	push	{r4, r7, lr}
 800a298:	b085      	sub	sp, #20
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a29e:	240f      	movs	r4, #15
 800a2a0:	193b      	adds	r3, r7, r4
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gatt_proc_complete_event_rp0 *rp0 = (aci_gatt_proc_complete_event_rp0 *)buffer_in;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_complete_event(rp0->Connection_Handle,
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	781a      	ldrb	r2, [r3, #0]
 800a2ae:	785b      	ldrb	r3, [r3, #1]
 800a2b0:	021b      	lsls	r3, r3, #8
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	b29a      	uxth	r2, r3
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	789b      	ldrb	r3, [r3, #2]
 800a2ba:	0019      	movs	r1, r3
 800a2bc:	0010      	movs	r0, r2
 800a2be:	f7f8 ff3f 	bl	8003140 <aci_gatt_proc_complete_event>
                               rp0->Error_Code);

  return status;
 800a2c2:	193b      	adds	r3, r7, r4
 800a2c4:	781b      	ldrb	r3, [r3, #0]
}
 800a2c6:	0018      	movs	r0, r3
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	b005      	add	sp, #20
 800a2cc:	bd90      	pop	{r4, r7, pc}

0800a2ce <aci_gatt_error_resp_event_process>:
 *        - 0x11: Insufficient resources
 * @retval None
 */

tBleStatus aci_gatt_error_resp_event_process(uint8_t *buffer_in)
{
 800a2ce:	b590      	push	{r4, r7, lr}
 800a2d0:	b085      	sub	sp, #20
 800a2d2:	af00      	add	r7, sp, #0
 800a2d4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a2d6:	240f      	movs	r4, #15
 800a2d8:	193b      	adds	r3, r7, r4
 800a2da:	2200      	movs	r2, #0
 800a2dc:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gatt_error_resp_event_rp0 *rp0 = (aci_gatt_error_resp_event_rp0 *)buffer_in;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	60bb      	str	r3, [r7, #8]
  aci_gatt_error_resp_event(rp0->Connection_Handle,
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	781a      	ldrb	r2, [r3, #0]
 800a2e6:	785b      	ldrb	r3, [r3, #1]
 800a2e8:	021b      	lsls	r3, r3, #8
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	b298      	uxth	r0, r3
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	7899      	ldrb	r1, [r3, #2]
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	78da      	ldrb	r2, [r3, #3]
 800a2f6:	791b      	ldrb	r3, [r3, #4]
 800a2f8:	021b      	lsls	r3, r3, #8
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	b29a      	uxth	r2, r3
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	795b      	ldrb	r3, [r3, #5]
 800a302:	f000 fef9 	bl	800b0f8 <aci_gatt_error_resp_event>
                            rp0->Req_Opcode,
                            rp0->Attribute_Handle,
                            rp0->Error_Code);

  return status;
 800a306:	193b      	adds	r3, r7, r4
 800a308:	781b      	ldrb	r3, [r3, #0]
}
 800a30a:	0018      	movs	r0, r3
 800a30c:	46bd      	mov	sp, r7
 800a30e:	b005      	add	sp, #20
 800a310:	bd90      	pop	{r4, r7, pc}

0800a312 <aci_gatt_disc_read_char_by_uuid_resp_event_process>:
 *        been performed.
 * @retval None
 */

tBleStatus aci_gatt_disc_read_char_by_uuid_resp_event_process(uint8_t *buffer_in)
{
 800a312:	b590      	push	{r4, r7, lr}
 800a314:	b085      	sub	sp, #20
 800a316:	af00      	add	r7, sp, #0
 800a318:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a31a:	240f      	movs	r4, #15
 800a31c:	193b      	adds	r3, r7, r4
 800a31e:	2200      	movs	r2, #0
 800a320:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *rp0 = (aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *)buffer_in;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	60bb      	str	r3, [r7, #8]
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	781a      	ldrb	r2, [r3, #0]
 800a32a:	785b      	ldrb	r3, [r3, #1]
 800a32c:	021b      	lsls	r3, r3, #8
 800a32e:	4313      	orrs	r3, r2
 800a330:	b298      	uxth	r0, r3
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	789a      	ldrb	r2, [r3, #2]
 800a336:	78db      	ldrb	r3, [r3, #3]
 800a338:	021b      	lsls	r3, r3, #8
 800a33a:	4313      	orrs	r3, r2
 800a33c:	b299      	uxth	r1, r3
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	791a      	ldrb	r2, [r3, #4]
                                             rp0->Attribute_Handle,
                                             rp0->Attribute_Value_Length,
                                             rp0->Attribute_Value);
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	3305      	adds	r3, #5
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 800a346:	f7f8 fe89 	bl	800305c <aci_gatt_disc_read_char_by_uuid_resp_event>

  return status;
 800a34a:	193b      	adds	r3, r7, r4
 800a34c:	781b      	ldrb	r3, [r3, #0]
}
 800a34e:	0018      	movs	r0, r3
 800a350:	46bd      	mov	sp, r7
 800a352:	b005      	add	sp, #20
 800a354:	bd90      	pop	{r4, r7, pc}

0800a356 <aci_gatt_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_write_permit_req_event_process(uint8_t *buffer_in)
{
 800a356:	b590      	push	{r4, r7, lr}
 800a358:	b085      	sub	sp, #20
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a35e:	240f      	movs	r4, #15
 800a360:	193b      	adds	r3, r7, r4
 800a362:	2200      	movs	r2, #0
 800a364:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gatt_write_permit_req_event_rp0 *rp0 = (aci_gatt_write_permit_req_event_rp0 *)buffer_in;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	60bb      	str	r3, [r7, #8]
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	781a      	ldrb	r2, [r3, #0]
 800a36e:	785b      	ldrb	r3, [r3, #1]
 800a370:	021b      	lsls	r3, r3, #8
 800a372:	4313      	orrs	r3, r2
 800a374:	b298      	uxth	r0, r3
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	789a      	ldrb	r2, [r3, #2]
 800a37a:	78db      	ldrb	r3, [r3, #3]
 800a37c:	021b      	lsls	r3, r3, #8
 800a37e:	4313      	orrs	r3, r2
 800a380:	b299      	uxth	r1, r3
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	791a      	ldrb	r2, [r3, #4]
                                  rp0->Attribute_Handle,
                                  rp0->Data_Length,
                                  rp0->Data);
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	3305      	adds	r3, #5
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 800a38a:	f000 fed3 	bl	800b134 <aci_gatt_write_permit_req_event>

  return status;
 800a38e:	193b      	adds	r3, r7, r4
 800a390:	781b      	ldrb	r3, [r3, #0]
}
 800a392:	0018      	movs	r0, r3
 800a394:	46bd      	mov	sp, r7
 800a396:	b005      	add	sp, #20
 800a398:	bd90      	pop	{r4, r7, pc}

0800a39a <aci_gatt_read_permit_req_event_process>:
 * @param Offset Contains the offset from which the read has been requested
 * @retval None
 */

tBleStatus aci_gatt_read_permit_req_event_process(uint8_t *buffer_in)
{
 800a39a:	b590      	push	{r4, r7, lr}
 800a39c:	b085      	sub	sp, #20
 800a39e:	af00      	add	r7, sp, #0
 800a3a0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a3a2:	240f      	movs	r4, #15
 800a3a4:	193b      	adds	r3, r7, r4
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gatt_read_permit_req_event_rp0 *rp0 = (aci_gatt_read_permit_req_event_rp0 *)buffer_in;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	60bb      	str	r3, [r7, #8]
  aci_gatt_read_permit_req_event(rp0->Connection_Handle,
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	781a      	ldrb	r2, [r3, #0]
 800a3b2:	785b      	ldrb	r3, [r3, #1]
 800a3b4:	021b      	lsls	r3, r3, #8
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	b298      	uxth	r0, r3
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	789a      	ldrb	r2, [r3, #2]
 800a3be:	78db      	ldrb	r3, [r3, #3]
 800a3c0:	021b      	lsls	r3, r3, #8
 800a3c2:	4313      	orrs	r3, r2
 800a3c4:	b299      	uxth	r1, r3
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	791a      	ldrb	r2, [r3, #4]
 800a3ca:	795b      	ldrb	r3, [r3, #5]
 800a3cc:	021b      	lsls	r3, r3, #8
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	b29b      	uxth	r3, r3
 800a3d2:	001a      	movs	r2, r3
 800a3d4:	f000 fecc 	bl	800b170 <aci_gatt_read_permit_req_event>
                                 rp0->Attribute_Handle,
                                 rp0->Offset);

  return status;
 800a3d8:	193b      	adds	r3, r7, r4
 800a3da:	781b      	ldrb	r3, [r3, #0]
}
 800a3dc:	0018      	movs	r0, r3
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	b005      	add	sp, #20
 800a3e2:	bd90      	pop	{r4, r7, pc}

0800a3e4 <aci_gatt_read_multi_permit_req_event_process>:
 * @param Handle_Item See @ref Handle_Item_t
 * @retval None
 */

tBleStatus aci_gatt_read_multi_permit_req_event_process(uint8_t *buffer_in)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b0a6      	sub	sp, #152	; 0x98
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a3ec:	238f      	movs	r3, #143	; 0x8f
 800a3ee:	18fb      	adds	r3, r7, r3
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gatt_read_multi_permit_req_event_rp0 *rp0 = (aci_gatt_read_multi_permit_req_event_rp0 *)buffer_in;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2288      	movs	r2, #136	; 0x88
 800a3f8:	18ba      	adds	r2, r7, r2
 800a3fa:	6013      	str	r3, [r2, #0]
  uint8_t size = 3;
 800a3fc:	2397      	movs	r3, #151	; 0x97
 800a3fe:	18fb      	adds	r3, r7, r3
 800a400:	2203      	movs	r2, #3
 800a402:	701a      	strb	r2, [r3, #0]
  int i;
  Handle_Item_t Handle_Item[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Item_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800a404:	2300      	movs	r3, #0
 800a406:	2290      	movs	r2, #144	; 0x90
 800a408:	18ba      	adds	r2, r7, r2
 800a40a:	6013      	str	r3, [r2, #0]
 800a40c:	e01e      	b.n	800a44c <aci_gatt_read_multi_permit_req_event_process+0x68>
    Handle_Item[i].Handle = rp0->Handle_Item[i].Handle;
 800a40e:	2388      	movs	r3, #136	; 0x88
 800a410:	18fb      	adds	r3, r7, r3
 800a412:	681a      	ldr	r2, [r3, #0]
 800a414:	2090      	movs	r0, #144	; 0x90
 800a416:	183b      	adds	r3, r7, r0
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	005b      	lsls	r3, r3, #1
 800a41c:	18d1      	adds	r1, r2, r3
 800a41e:	78c9      	ldrb	r1, [r1, #3]
 800a420:	18d3      	adds	r3, r2, r3
 800a422:	791b      	ldrb	r3, [r3, #4]
 800a424:	021b      	lsls	r3, r3, #8
 800a426:	430b      	orrs	r3, r1
 800a428:	b299      	uxth	r1, r3
 800a42a:	2308      	movs	r3, #8
 800a42c:	18fb      	adds	r3, r7, r3
 800a42e:	183a      	adds	r2, r7, r0
 800a430:	6812      	ldr	r2, [r2, #0]
 800a432:	0052      	lsls	r2, r2, #1
 800a434:	52d1      	strh	r1, [r2, r3]
    size += 2;
 800a436:	2297      	movs	r2, #151	; 0x97
 800a438:	18bb      	adds	r3, r7, r2
 800a43a:	18ba      	adds	r2, r7, r2
 800a43c:	7812      	ldrb	r2, [r2, #0]
 800a43e:	3202      	adds	r2, #2
 800a440:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800a442:	183b      	adds	r3, r7, r0
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	3301      	adds	r3, #1
 800a448:	183a      	adds	r2, r7, r0
 800a44a:	6013      	str	r3, [r2, #0]
 800a44c:	2188      	movs	r1, #136	; 0x88
 800a44e:	187b      	adds	r3, r7, r1
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	789b      	ldrb	r3, [r3, #2]
 800a454:	001a      	movs	r2, r3
 800a456:	2390      	movs	r3, #144	; 0x90
 800a458:	18fb      	adds	r3, r7, r3
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	4293      	cmp	r3, r2
 800a45e:	dbd6      	blt.n	800a40e <aci_gatt_read_multi_permit_req_event_process+0x2a>
  }
  aci_gatt_read_multi_permit_req_event(rp0->Connection_Handle,
 800a460:	187b      	adds	r3, r7, r1
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	781a      	ldrb	r2, [r3, #0]
 800a466:	785b      	ldrb	r3, [r3, #1]
 800a468:	021b      	lsls	r3, r3, #8
 800a46a:	4313      	orrs	r3, r2
 800a46c:	b298      	uxth	r0, r3
 800a46e:	187b      	adds	r3, r7, r1
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	789b      	ldrb	r3, [r3, #2]
 800a474:	2208      	movs	r2, #8
 800a476:	18ba      	adds	r2, r7, r2
 800a478:	0019      	movs	r1, r3
 800a47a:	f000 fe93 	bl	800b1a4 <aci_gatt_read_multi_permit_req_event>
                                       rp0->Number_of_Handles,
                                       Handle_Item);

  return status;
 800a47e:	238f      	movs	r3, #143	; 0x8f
 800a480:	18fb      	adds	r3, r7, r3
 800a482:	781b      	ldrb	r3, [r3, #0]
}
 800a484:	0018      	movs	r0, r3
 800a486:	46bd      	mov	sp, r7
 800a488:	b026      	add	sp, #152	; 0x98
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <aci_gatt_tx_pool_available_event_process>:
 * @param Available_Buffers Not used.
 * @retval None
 */

tBleStatus aci_gatt_tx_pool_available_event_process(uint8_t *buffer_in)
{
 800a48c:	b590      	push	{r4, r7, lr}
 800a48e:	b085      	sub	sp, #20
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a494:	240f      	movs	r4, #15
 800a496:	193b      	adds	r3, r7, r4
 800a498:	2200      	movs	r2, #0
 800a49a:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gatt_tx_pool_available_event_rp0 *rp0 = (aci_gatt_tx_pool_available_event_rp0 *)buffer_in;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	60bb      	str	r3, [r7, #8]
  aci_gatt_tx_pool_available_event(rp0->Connection_Handle,
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	781a      	ldrb	r2, [r3, #0]
 800a4a4:	785b      	ldrb	r3, [r3, #1]
 800a4a6:	021b      	lsls	r3, r3, #8
 800a4a8:	4313      	orrs	r3, r2
 800a4aa:	b298      	uxth	r0, r3
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	789a      	ldrb	r2, [r3, #2]
 800a4b0:	78db      	ldrb	r3, [r3, #3]
 800a4b2:	021b      	lsls	r3, r3, #8
 800a4b4:	4313      	orrs	r3, r2
 800a4b6:	b29b      	uxth	r3, r3
 800a4b8:	0019      	movs	r1, r3
 800a4ba:	f7f8 fe77 	bl	80031ac <aci_gatt_tx_pool_available_event>
                                   rp0->Available_Buffers);

  return status;
 800a4be:	193b      	adds	r3, r7, r4
 800a4c0:	781b      	ldrb	r3, [r3, #0]
}
 800a4c2:	0018      	movs	r0, r3
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	b005      	add	sp, #20
 800a4c8:	bd90      	pop	{r4, r7, pc}

0800a4ca <aci_gatt_server_confirmation_event_process>:
 * @param Connection_Handle Connection handle related to the event
 * @retval None
 */

tBleStatus aci_gatt_server_confirmation_event_process(uint8_t *buffer_in)
{
 800a4ca:	b590      	push	{r4, r7, lr}
 800a4cc:	b085      	sub	sp, #20
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a4d2:	240f      	movs	r4, #15
 800a4d4:	193b      	adds	r3, r7, r4
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gatt_server_confirmation_event_rp0 *rp0 = (aci_gatt_server_confirmation_event_rp0 *)buffer_in;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	60bb      	str	r3, [r7, #8]
  aci_gatt_server_confirmation_event(rp0->Connection_Handle);
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	781a      	ldrb	r2, [r3, #0]
 800a4e2:	785b      	ldrb	r3, [r3, #1]
 800a4e4:	021b      	lsls	r3, r3, #8
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	b29b      	uxth	r3, r3
 800a4ea:	0018      	movs	r0, r3
 800a4ec:	f000 fe6e 	bl	800b1cc <aci_gatt_server_confirmation_event>

  return status;
 800a4f0:	193b      	adds	r3, r7, r4
 800a4f2:	781b      	ldrb	r3, [r3, #0]
}
 800a4f4:	0018      	movs	r0, r3
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	b005      	add	sp, #20
 800a4fa:	bd90      	pop	{r4, r7, pc}

0800a4fc <aci_gatt_prepare_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_prepare_write_permit_req_event_process(uint8_t *buffer_in)
{
 800a4fc:	b5b0      	push	{r4, r5, r7, lr}
 800a4fe:	b086      	sub	sp, #24
 800a500:	af02      	add	r7, sp, #8
 800a502:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a504:	250f      	movs	r5, #15
 800a506:	197b      	adds	r3, r7, r5
 800a508:	2200      	movs	r2, #0
 800a50a:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gatt_prepare_write_permit_req_event_rp0 *rp0 = (aci_gatt_prepare_write_permit_req_event_rp0 *)buffer_in;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	60bb      	str	r3, [r7, #8]
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	781a      	ldrb	r2, [r3, #0]
 800a514:	785b      	ldrb	r3, [r3, #1]
 800a516:	021b      	lsls	r3, r3, #8
 800a518:	4313      	orrs	r3, r2
 800a51a:	b298      	uxth	r0, r3
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	789a      	ldrb	r2, [r3, #2]
 800a520:	78db      	ldrb	r3, [r3, #3]
 800a522:	021b      	lsls	r3, r3, #8
 800a524:	4313      	orrs	r3, r2
 800a526:	b299      	uxth	r1, r3
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	791a      	ldrb	r2, [r3, #4]
 800a52c:	795b      	ldrb	r3, [r3, #5]
 800a52e:	021b      	lsls	r3, r3, #8
 800a530:	4313      	orrs	r3, r2
 800a532:	b29a      	uxth	r2, r3
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	799c      	ldrb	r4, [r3, #6]
                                          rp0->Attribute_Handle,
                                          rp0->Offset,
                                          rp0->Data_Length,
                                          rp0->Data);
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	3307      	adds	r3, #7
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 800a53c:	9300      	str	r3, [sp, #0]
 800a53e:	0023      	movs	r3, r4
 800a540:	f000 fe54 	bl	800b1ec <aci_gatt_prepare_write_permit_req_event>

  return status;
 800a544:	197b      	adds	r3, r7, r5
 800a546:	781b      	ldrb	r3, [r3, #0]
}
 800a548:	0018      	movs	r0, r3
 800a54a:	46bd      	mov	sp, r7
 800a54c:	b004      	add	sp, #16
 800a54e:	bdb0      	pop	{r4, r5, r7, pc}

0800a550 <hci_le_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_connection_complete_event_process(uint8_t *buffer_in)
{
 800a550:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a552:	46c6      	mov	lr, r8
 800a554:	b500      	push	{lr}
 800a556:	b08a      	sub	sp, #40	; 0x28
 800a558:	af06      	add	r7, sp, #24
 800a55a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a55c:	230f      	movs	r3, #15
 800a55e:	18fb      	adds	r3, r7, r3
 800a560:	2200      	movs	r2, #0
 800a562:	701a      	strb	r2, [r3, #0]
  /* Input params */
  hci_le_connection_complete_event_rp0 *rp0 = (hci_le_connection_complete_event_rp0 *)buffer_in;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	60bb      	str	r3, [r7, #8]
  hci_le_connection_complete_event(rp0->Status,
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	781d      	ldrb	r5, [r3, #0]
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	785a      	ldrb	r2, [r3, #1]
 800a570:	789b      	ldrb	r3, [r3, #2]
 800a572:	021b      	lsls	r3, r3, #8
 800a574:	4313      	orrs	r3, r2
 800a576:	b29e      	uxth	r6, r3
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	78da      	ldrb	r2, [r3, #3]
 800a57c:	4694      	mov	ip, r2
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	791a      	ldrb	r2, [r3, #4]
 800a582:	4690      	mov	r8, r2
                                   rp0->Connection_Handle,
                                   rp0->Role,
                                   rp0->Peer_Address_Type,
                                   rp0->Peer_Address,
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	1d5a      	adds	r2, r3, #5
  hci_le_connection_complete_event(rp0->Status,
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	7ad9      	ldrb	r1, [r3, #11]
 800a58c:	7b1b      	ldrb	r3, [r3, #12]
 800a58e:	021b      	lsls	r3, r3, #8
 800a590:	430b      	orrs	r3, r1
 800a592:	b299      	uxth	r1, r3
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	7b58      	ldrb	r0, [r3, #13]
 800a598:	7b9b      	ldrb	r3, [r3, #14]
 800a59a:	021b      	lsls	r3, r3, #8
 800a59c:	4303      	orrs	r3, r0
 800a59e:	b298      	uxth	r0, r3
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	7bdc      	ldrb	r4, [r3, #15]
 800a5a4:	7c1b      	ldrb	r3, [r3, #16]
 800a5a6:	021b      	lsls	r3, r3, #8
 800a5a8:	4323      	orrs	r3, r4
 800a5aa:	b29b      	uxth	r3, r3
 800a5ac:	68bc      	ldr	r4, [r7, #8]
 800a5ae:	7c64      	ldrb	r4, [r4, #17]
 800a5b0:	9404      	str	r4, [sp, #16]
 800a5b2:	9303      	str	r3, [sp, #12]
 800a5b4:	9002      	str	r0, [sp, #8]
 800a5b6:	9101      	str	r1, [sp, #4]
 800a5b8:	9200      	str	r2, [sp, #0]
 800a5ba:	4643      	mov	r3, r8
 800a5bc:	4662      	mov	r2, ip
 800a5be:	0031      	movs	r1, r6
 800a5c0:	0028      	movs	r0, r5
 800a5c2:	f7f8 fbd9 	bl	8002d78 <hci_le_connection_complete_event>
                                   rp0->Conn_Interval,
                                   rp0->Conn_Latency,
                                   rp0->Supervision_Timeout,
                                   rp0->Master_Clock_Accuracy);

  return status;
 800a5c6:	230f      	movs	r3, #15
 800a5c8:	18fb      	adds	r3, r7, r3
 800a5ca:	781b      	ldrb	r3, [r3, #0]
}
 800a5cc:	0018      	movs	r0, r3
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	b004      	add	sp, #16
 800a5d2:	bc80      	pop	{r7}
 800a5d4:	46b8      	mov	r8, r7
 800a5d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a5d8 <hci_le_advertising_report_event_process>:
 * @param Advertising_Report See @ref Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_advertising_report_event_process(uint8_t *buffer_in)
{
 800a5d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5da:	b0a5      	sub	sp, #148	; 0x94
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a5e0:	2387      	movs	r3, #135	; 0x87
 800a5e2:	18fb      	adds	r3, r7, r3
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	701a      	strb	r2, [r3, #0]
  /* Input params */
  hci_le_advertising_report_event_rp0 *rp0 = (hci_le_advertising_report_event_rp0 *)buffer_in;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2280      	movs	r2, #128	; 0x80
 800a5ec:	18ba      	adds	r2, r7, r2
 800a5ee:	6013      	str	r3, [r2, #0]
  uint8_t size = 1;
 800a5f0:	238f      	movs	r3, #143	; 0x8f
 800a5f2:	18fb      	adds	r3, r7, r3
 800a5f4:	2201      	movs	r2, #1
 800a5f6:	701a      	strb	r2, [r3, #0]
  int i;
  Advertising_Report_t Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	2288      	movs	r2, #136	; 0x88
 800a5fc:	18ba      	adds	r2, r7, r2
 800a5fe:	6013      	str	r3, [r2, #0]
 800a600:	e0b9      	b.n	800a776 <hci_le_advertising_report_event_process+0x19e>
    Advertising_Report[i].Event_Type = rp0->Advertising_Report[i].Event_Type;
 800a602:	2680      	movs	r6, #128	; 0x80
 800a604:	19bb      	adds	r3, r7, r6
 800a606:	6819      	ldr	r1, [r3, #0]
 800a608:	2488      	movs	r4, #136	; 0x88
 800a60a:	193b      	adds	r3, r7, r4
 800a60c:	681a      	ldr	r2, [r3, #0]
 800a60e:	0013      	movs	r3, r2
 800a610:	009b      	lsls	r3, r3, #2
 800a612:	189b      	adds	r3, r3, r2
 800a614:	005b      	lsls	r3, r3, #1
 800a616:	189b      	adds	r3, r3, r2
 800a618:	18cb      	adds	r3, r1, r3
 800a61a:	3301      	adds	r3, #1
 800a61c:	7818      	ldrb	r0, [r3, #0]
 800a61e:	2308      	movs	r3, #8
 800a620:	18f9      	adds	r1, r7, r3
 800a622:	193a      	adds	r2, r7, r4
 800a624:	6812      	ldr	r2, [r2, #0]
 800a626:	0013      	movs	r3, r2
 800a628:	009b      	lsls	r3, r3, #2
 800a62a:	189b      	adds	r3, r3, r2
 800a62c:	009b      	lsls	r3, r3, #2
 800a62e:	1c02      	adds	r2, r0, #0
 800a630:	545a      	strb	r2, [r3, r1]
    size += 1;
 800a632:	258f      	movs	r5, #143	; 0x8f
 800a634:	197b      	adds	r3, r7, r5
 800a636:	197a      	adds	r2, r7, r5
 800a638:	7812      	ldrb	r2, [r2, #0]
 800a63a:	3201      	adds	r2, #1
 800a63c:	701a      	strb	r2, [r3, #0]
    Advertising_Report[i].Address_Type = rp0->Advertising_Report[i].Address_Type;
 800a63e:	19ba      	adds	r2, r7, r6
 800a640:	6811      	ldr	r1, [r2, #0]
 800a642:	193a      	adds	r2, r7, r4
 800a644:	6812      	ldr	r2, [r2, #0]
 800a646:	0013      	movs	r3, r2
 800a648:	009b      	lsls	r3, r3, #2
 800a64a:	189b      	adds	r3, r3, r2
 800a64c:	005b      	lsls	r3, r3, #1
 800a64e:	189b      	adds	r3, r3, r2
 800a650:	18cb      	adds	r3, r1, r3
 800a652:	3302      	adds	r3, #2
 800a654:	7818      	ldrb	r0, [r3, #0]
 800a656:	2308      	movs	r3, #8
 800a658:	18f9      	adds	r1, r7, r3
 800a65a:	193a      	adds	r2, r7, r4
 800a65c:	6812      	ldr	r2, [r2, #0]
 800a65e:	0013      	movs	r3, r2
 800a660:	009b      	lsls	r3, r3, #2
 800a662:	189b      	adds	r3, r3, r2
 800a664:	009b      	lsls	r3, r3, #2
 800a666:	18cb      	adds	r3, r1, r3
 800a668:	3301      	adds	r3, #1
 800a66a:	1c02      	adds	r2, r0, #0
 800a66c:	701a      	strb	r2, [r3, #0]
    size += 1;
 800a66e:	197b      	adds	r3, r7, r5
 800a670:	197a      	adds	r2, r7, r5
 800a672:	7812      	ldrb	r2, [r2, #0]
 800a674:	3201      	adds	r2, #1
 800a676:	701a      	strb	r2, [r3, #0]
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 800a678:	2308      	movs	r3, #8
 800a67a:	18f9      	adds	r1, r7, r3
 800a67c:	193a      	adds	r2, r7, r4
 800a67e:	6812      	ldr	r2, [r2, #0]
 800a680:	0013      	movs	r3, r2
 800a682:	009b      	lsls	r3, r3, #2
 800a684:	189b      	adds	r3, r3, r2
 800a686:	009b      	lsls	r3, r3, #2
 800a688:	18cb      	adds	r3, r1, r3
 800a68a:	1c98      	adds	r0, r3, #2
 800a68c:	193a      	adds	r2, r7, r4
 800a68e:	6812      	ldr	r2, [r2, #0]
 800a690:	0013      	movs	r3, r2
 800a692:	009b      	lsls	r3, r3, #2
 800a694:	189b      	adds	r3, r3, r2
 800a696:	005b      	lsls	r3, r3, #1
 800a698:	189b      	adds	r3, r3, r2
 800a69a:	19ba      	adds	r2, r7, r6
 800a69c:	6812      	ldr	r2, [r2, #0]
 800a69e:	18d3      	adds	r3, r2, r3
 800a6a0:	3303      	adds	r3, #3
 800a6a2:	2206      	movs	r2, #6
 800a6a4:	0019      	movs	r1, r3
 800a6a6:	f004 f81d 	bl	800e6e4 <memcpy>
    size += 6;
 800a6aa:	197b      	adds	r3, r7, r5
 800a6ac:	197a      	adds	r2, r7, r5
 800a6ae:	7812      	ldrb	r2, [r2, #0]
 800a6b0:	3206      	adds	r2, #6
 800a6b2:	701a      	strb	r2, [r3, #0]
    Advertising_Report[i].Length_Data = rp0->Advertising_Report[i].Length_Data;
 800a6b4:	19ba      	adds	r2, r7, r6
 800a6b6:	6811      	ldr	r1, [r2, #0]
 800a6b8:	193a      	adds	r2, r7, r4
 800a6ba:	6812      	ldr	r2, [r2, #0]
 800a6bc:	0013      	movs	r3, r2
 800a6be:	009b      	lsls	r3, r3, #2
 800a6c0:	189b      	adds	r3, r3, r2
 800a6c2:	005b      	lsls	r3, r3, #1
 800a6c4:	189b      	adds	r3, r3, r2
 800a6c6:	18cb      	adds	r3, r1, r3
 800a6c8:	3309      	adds	r3, #9
 800a6ca:	7818      	ldrb	r0, [r3, #0]
 800a6cc:	2308      	movs	r3, #8
 800a6ce:	18f9      	adds	r1, r7, r3
 800a6d0:	193a      	adds	r2, r7, r4
 800a6d2:	6812      	ldr	r2, [r2, #0]
 800a6d4:	0013      	movs	r3, r2
 800a6d6:	009b      	lsls	r3, r3, #2
 800a6d8:	189b      	adds	r3, r3, r2
 800a6da:	009b      	lsls	r3, r3, #2
 800a6dc:	18cb      	adds	r3, r1, r3
 800a6de:	3308      	adds	r3, #8
 800a6e0:	1c02      	adds	r2, r0, #0
 800a6e2:	701a      	strb	r2, [r3, #0]
    size += 1;
 800a6e4:	197b      	adds	r3, r7, r5
 800a6e6:	197a      	adds	r2, r7, r5
 800a6e8:	7812      	ldrb	r2, [r2, #0]
 800a6ea:	3201      	adds	r2, #1
 800a6ec:	701a      	strb	r2, [r3, #0]
    Advertising_Report[i].Data = rp0->Advertising_Report[i].Data;
 800a6ee:	193a      	adds	r2, r7, r4
 800a6f0:	6812      	ldr	r2, [r2, #0]
 800a6f2:	0013      	movs	r3, r2
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	189b      	adds	r3, r3, r2
 800a6f8:	005b      	lsls	r3, r3, #1
 800a6fa:	189b      	adds	r3, r3, r2
 800a6fc:	3308      	adds	r3, #8
 800a6fe:	19ba      	adds	r2, r7, r6
 800a700:	6812      	ldr	r2, [r2, #0]
 800a702:	18d3      	adds	r3, r2, r3
 800a704:	1c99      	adds	r1, r3, #2
 800a706:	2308      	movs	r3, #8
 800a708:	18f8      	adds	r0, r7, r3
 800a70a:	193a      	adds	r2, r7, r4
 800a70c:	6812      	ldr	r2, [r2, #0]
 800a70e:	0013      	movs	r3, r2
 800a710:	009b      	lsls	r3, r3, #2
 800a712:	189b      	adds	r3, r3, r2
 800a714:	009b      	lsls	r3, r3, #2
 800a716:	18c3      	adds	r3, r0, r3
 800a718:	330c      	adds	r3, #12
 800a71a:	6019      	str	r1, [r3, #0]
    size += rp0->Advertising_Report[i].Length_Data;
 800a71c:	19ba      	adds	r2, r7, r6
 800a71e:	6811      	ldr	r1, [r2, #0]
 800a720:	193a      	adds	r2, r7, r4
 800a722:	6812      	ldr	r2, [r2, #0]
 800a724:	0013      	movs	r3, r2
 800a726:	009b      	lsls	r3, r3, #2
 800a728:	189b      	adds	r3, r3, r2
 800a72a:	005b      	lsls	r3, r3, #1
 800a72c:	189b      	adds	r3, r3, r2
 800a72e:	18cb      	adds	r3, r1, r3
 800a730:	3309      	adds	r3, #9
 800a732:	7819      	ldrb	r1, [r3, #0]
 800a734:	197b      	adds	r3, r7, r5
 800a736:	197a      	adds	r2, r7, r5
 800a738:	7812      	ldrb	r2, [r2, #0]
 800a73a:	188a      	adds	r2, r1, r2
 800a73c:	701a      	strb	r2, [r3, #0]
    Advertising_Report[i].RSSI = (uint8_t)buffer_in[size];
 800a73e:	197b      	adds	r3, r7, r5
 800a740:	781b      	ldrb	r3, [r3, #0]
 800a742:	687a      	ldr	r2, [r7, #4]
 800a744:	18d3      	adds	r3, r2, r3
 800a746:	781b      	ldrb	r3, [r3, #0]
 800a748:	b258      	sxtb	r0, r3
 800a74a:	2308      	movs	r3, #8
 800a74c:	18f9      	adds	r1, r7, r3
 800a74e:	193b      	adds	r3, r7, r4
 800a750:	681a      	ldr	r2, [r3, #0]
 800a752:	0013      	movs	r3, r2
 800a754:	009b      	lsls	r3, r3, #2
 800a756:	189b      	adds	r3, r3, r2
 800a758:	009b      	lsls	r3, r3, #2
 800a75a:	18cb      	adds	r3, r1, r3
 800a75c:	3310      	adds	r3, #16
 800a75e:	1c02      	adds	r2, r0, #0
 800a760:	701a      	strb	r2, [r3, #0]
    size += 1;
 800a762:	197b      	adds	r3, r7, r5
 800a764:	197a      	adds	r2, r7, r5
 800a766:	7812      	ldrb	r2, [r2, #0]
 800a768:	3201      	adds	r2, #1
 800a76a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < rp0->Num_Reports; i++) {
 800a76c:	193b      	adds	r3, r7, r4
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	3301      	adds	r3, #1
 800a772:	193a      	adds	r2, r7, r4
 800a774:	6013      	str	r3, [r2, #0]
 800a776:	2180      	movs	r1, #128	; 0x80
 800a778:	187b      	adds	r3, r7, r1
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	781b      	ldrb	r3, [r3, #0]
 800a77e:	001a      	movs	r2, r3
 800a780:	2388      	movs	r3, #136	; 0x88
 800a782:	18fb      	adds	r3, r7, r3
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	4293      	cmp	r3, r2
 800a788:	da00      	bge.n	800a78c <hci_le_advertising_report_event_process+0x1b4>
 800a78a:	e73a      	b.n	800a602 <hci_le_advertising_report_event_process+0x2a>
  }
  hci_le_advertising_report_event(rp0->Num_Reports,
 800a78c:	187b      	adds	r3, r7, r1
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	781b      	ldrb	r3, [r3, #0]
 800a792:	2208      	movs	r2, #8
 800a794:	18ba      	adds	r2, r7, r2
 800a796:	0011      	movs	r1, r2
 800a798:	0018      	movs	r0, r3
 800a79a:	f7f8 fbbd 	bl	8002f18 <hci_le_advertising_report_event>
                                  Advertising_Report);

  return status;
 800a79e:	2387      	movs	r3, #135	; 0x87
 800a7a0:	18fb      	adds	r3, r7, r3
 800a7a2:	781b      	ldrb	r3, [r3, #0]
}
 800a7a4:	0018      	movs	r0, r3
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	b025      	add	sp, #148	; 0x94
 800a7aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a7ac <hci_le_connection_update_complete_event_process>:
 *        - 0x000A (100 ms)  ... 0x0C80 (32000 ms) 
 * @retval None
 */

tBleStatus hci_le_connection_update_complete_event_process(uint8_t *buffer_in)
{
 800a7ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7ae:	b087      	sub	sp, #28
 800a7b0:	af02      	add	r7, sp, #8
 800a7b2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a7b4:	260f      	movs	r6, #15
 800a7b6:	19bb      	adds	r3, r7, r6
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	701a      	strb	r2, [r3, #0]
  /* Input params */
  hci_le_connection_update_complete_event_rp0 *rp0 = (hci_le_connection_update_complete_event_rp0 *)buffer_in;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	60bb      	str	r3, [r7, #8]
  hci_le_connection_update_complete_event(rp0->Status,
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	7818      	ldrb	r0, [r3, #0]
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	785a      	ldrb	r2, [r3, #1]
 800a7c8:	789b      	ldrb	r3, [r3, #2]
 800a7ca:	021b      	lsls	r3, r3, #8
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	b299      	uxth	r1, r3
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	78da      	ldrb	r2, [r3, #3]
 800a7d4:	791b      	ldrb	r3, [r3, #4]
 800a7d6:	021b      	lsls	r3, r3, #8
 800a7d8:	4313      	orrs	r3, r2
 800a7da:	b29c      	uxth	r4, r3
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	795a      	ldrb	r2, [r3, #5]
 800a7e0:	799b      	ldrb	r3, [r3, #6]
 800a7e2:	021b      	lsls	r3, r3, #8
 800a7e4:	4313      	orrs	r3, r2
 800a7e6:	b29d      	uxth	r5, r3
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	79da      	ldrb	r2, [r3, #7]
 800a7ec:	7a1b      	ldrb	r3, [r3, #8]
 800a7ee:	021b      	lsls	r3, r3, #8
 800a7f0:	4313      	orrs	r3, r2
 800a7f2:	b29b      	uxth	r3, r3
 800a7f4:	9300      	str	r3, [sp, #0]
 800a7f6:	002b      	movs	r3, r5
 800a7f8:	0022      	movs	r2, r4
 800a7fa:	f000 fa35 	bl	800ac68 <hci_le_connection_update_complete_event>
                                          rp0->Connection_Handle,
                                          rp0->Conn_Interval,
                                          rp0->Conn_Latency,
                                          rp0->Supervision_Timeout);

  return status;
 800a7fe:	19bb      	adds	r3, r7, r6
 800a800:	781b      	ldrb	r3, [r3, #0]
}
 800a802:	0018      	movs	r0, r3
 800a804:	46bd      	mov	sp, r7
 800a806:	b005      	add	sp, #20
 800a808:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a80a <hci_le_read_remote_used_features_complete_event_process>:
 *        Layer specification.
 * @retval None
 */

tBleStatus hci_le_read_remote_used_features_complete_event_process(uint8_t *buffer_in)
{
 800a80a:	b590      	push	{r4, r7, lr}
 800a80c:	b085      	sub	sp, #20
 800a80e:	af00      	add	r7, sp, #0
 800a810:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a812:	240f      	movs	r4, #15
 800a814:	193b      	adds	r3, r7, r4
 800a816:	2200      	movs	r2, #0
 800a818:	701a      	strb	r2, [r3, #0]
  /* Input params */
  hci_le_read_remote_used_features_complete_event_rp0 *rp0 = (hci_le_read_remote_used_features_complete_event_rp0 *)buffer_in;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	60bb      	str	r3, [r7, #8]
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	7818      	ldrb	r0, [r3, #0]
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	785a      	ldrb	r2, [r3, #1]
 800a826:	789b      	ldrb	r3, [r3, #2]
 800a828:	021b      	lsls	r3, r3, #8
 800a82a:	4313      	orrs	r3, r2
 800a82c:	b299      	uxth	r1, r3
                                                  rp0->Connection_Handle,
                                                  rp0->LE_Features);
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	3303      	adds	r3, #3
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 800a832:	001a      	movs	r2, r3
 800a834:	f000 fa36 	bl	800aca4 <hci_le_read_remote_used_features_complete_event>

  return status;
 800a838:	193b      	adds	r3, r7, r4
 800a83a:	781b      	ldrb	r3, [r3, #0]
}
 800a83c:	0018      	movs	r0, r3
 800a83e:	46bd      	mov	sp, r7
 800a840:	b005      	add	sp, #20
 800a842:	bd90      	pop	{r4, r7, pc}

0800a844 <hci_le_long_term_key_request_event_process>:
 * @param Encrypted_Diversifier 16-bit encrypted diversifier
 * @retval None
 */

tBleStatus hci_le_long_term_key_request_event_process(uint8_t *buffer_in)
{
 800a844:	b590      	push	{r4, r7, lr}
 800a846:	b085      	sub	sp, #20
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a84c:	240f      	movs	r4, #15
 800a84e:	193b      	adds	r3, r7, r4
 800a850:	2200      	movs	r2, #0
 800a852:	701a      	strb	r2, [r3, #0]
  /* Input params */
  hci_le_long_term_key_request_event_rp0 *rp0 = (hci_le_long_term_key_request_event_rp0 *)buffer_in;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	60bb      	str	r3, [r7, #8]
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	781a      	ldrb	r2, [r3, #0]
 800a85c:	785b      	ldrb	r3, [r3, #1]
 800a85e:	021b      	lsls	r3, r3, #8
 800a860:	4313      	orrs	r3, r2
 800a862:	b298      	uxth	r0, r3
                                     rp0->Random_Number,
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	1c99      	adds	r1, r3, #2
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	7a9a      	ldrb	r2, [r3, #10]
 800a86c:	7adb      	ldrb	r3, [r3, #11]
 800a86e:	021b      	lsls	r3, r3, #8
 800a870:	4313      	orrs	r3, r2
 800a872:	b29b      	uxth	r3, r3
 800a874:	001a      	movs	r2, r3
 800a876:	f000 fa29 	bl	800accc <hci_le_long_term_key_request_event>
                                     rp0->Encrypted_Diversifier);

  return status;
 800a87a:	193b      	adds	r3, r7, r4
 800a87c:	781b      	ldrb	r3, [r3, #0]
}
 800a87e:	0018      	movs	r0, r3
 800a880:	46bd      	mov	sp, r7
 800a882:	b005      	add	sp, #20
 800a884:	bd90      	pop	{r4, r7, pc}

0800a886 <hci_le_data_length_change_event_process>:
 *        future use)
 * @retval None
 */

tBleStatus hci_le_data_length_change_event_process(uint8_t *buffer_in)
{
 800a886:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a888:	b087      	sub	sp, #28
 800a88a:	af02      	add	r7, sp, #8
 800a88c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a88e:	260f      	movs	r6, #15
 800a890:	19bb      	adds	r3, r7, r6
 800a892:	2200      	movs	r2, #0
 800a894:	701a      	strb	r2, [r3, #0]
  /* Input params */
  hci_le_data_length_change_event_rp0 *rp0 = (hci_le_data_length_change_event_rp0 *)buffer_in;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	60bb      	str	r3, [r7, #8]
  hci_le_data_length_change_event(rp0->Connection_Handle,
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	781a      	ldrb	r2, [r3, #0]
 800a89e:	785b      	ldrb	r3, [r3, #1]
 800a8a0:	021b      	lsls	r3, r3, #8
 800a8a2:	4313      	orrs	r3, r2
 800a8a4:	b298      	uxth	r0, r3
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	789a      	ldrb	r2, [r3, #2]
 800a8aa:	78db      	ldrb	r3, [r3, #3]
 800a8ac:	021b      	lsls	r3, r3, #8
 800a8ae:	4313      	orrs	r3, r2
 800a8b0:	b299      	uxth	r1, r3
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	791a      	ldrb	r2, [r3, #4]
 800a8b6:	795b      	ldrb	r3, [r3, #5]
 800a8b8:	021b      	lsls	r3, r3, #8
 800a8ba:	4313      	orrs	r3, r2
 800a8bc:	b29c      	uxth	r4, r3
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	799a      	ldrb	r2, [r3, #6]
 800a8c2:	79db      	ldrb	r3, [r3, #7]
 800a8c4:	021b      	lsls	r3, r3, #8
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	b29d      	uxth	r5, r3
 800a8ca:	68bb      	ldr	r3, [r7, #8]
 800a8cc:	7a1a      	ldrb	r2, [r3, #8]
 800a8ce:	7a5b      	ldrb	r3, [r3, #9]
 800a8d0:	021b      	lsls	r3, r3, #8
 800a8d2:	4313      	orrs	r3, r2
 800a8d4:	b29b      	uxth	r3, r3
 800a8d6:	9300      	str	r3, [sp, #0]
 800a8d8:	002b      	movs	r3, r5
 800a8da:	0022      	movs	r2, r4
 800a8dc:	f000 fa0c 	bl	800acf8 <hci_le_data_length_change_event>
                                  rp0->MaxTxOctets,
                                  rp0->MaxTxTime,
                                  rp0->MaxRxOctets,
                                  rp0->MaxRxTime);

  return status;
 800a8e0:	19bb      	adds	r3, r7, r6
 800a8e2:	781b      	ldrb	r3, [r3, #0]
}
 800a8e4:	0018      	movs	r0, r3
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	b005      	add	sp, #20
 800a8ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a8ec <hci_le_read_local_p256_public_key_complete_event_process>:
 * @param Local_P256_Public_Key Local P-256 public key.
 * @retval None
 */

tBleStatus hci_le_read_local_p256_public_key_complete_event_process(uint8_t *buffer_in)
{
 800a8ec:	b590      	push	{r4, r7, lr}
 800a8ee:	b085      	sub	sp, #20
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a8f4:	240f      	movs	r4, #15
 800a8f6:	193b      	adds	r3, r7, r4
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	701a      	strb	r2, [r3, #0]
  /* Input params */
  hci_le_read_local_p256_public_key_complete_event_rp0 *rp0 = (hci_le_read_local_p256_public_key_complete_event_rp0 *)buffer_in;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	60bb      	str	r3, [r7, #8]
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	781a      	ldrb	r2, [r3, #0]
                                                   rp0->Local_P256_Public_Key);
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	3301      	adds	r3, #1
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 800a908:	0019      	movs	r1, r3
 800a90a:	0010      	movs	r0, r2
 800a90c:	f000 fa12 	bl	800ad34 <hci_le_read_local_p256_public_key_complete_event>

  return status;
 800a910:	193b      	adds	r3, r7, r4
 800a912:	781b      	ldrb	r3, [r3, #0]
}
 800a914:	0018      	movs	r0, r3
 800a916:	46bd      	mov	sp, r7
 800a918:	b005      	add	sp, #20
 800a91a:	bd90      	pop	{r4, r7, pc}

0800a91c <hci_le_generate_dhkey_complete_event_process>:
 * @param DHKey Diffie Hellman Key
 * @retval None
 */

tBleStatus hci_le_generate_dhkey_complete_event_process(uint8_t *buffer_in)
{
 800a91c:	b590      	push	{r4, r7, lr}
 800a91e:	b085      	sub	sp, #20
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a924:	240f      	movs	r4, #15
 800a926:	193b      	adds	r3, r7, r4
 800a928:	2200      	movs	r2, #0
 800a92a:	701a      	strb	r2, [r3, #0]
  /* Input params */
  hci_le_generate_dhkey_complete_event_rp0 *rp0 = (hci_le_generate_dhkey_complete_event_rp0 *)buffer_in;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	60bb      	str	r3, [r7, #8]
  hci_le_generate_dhkey_complete_event(rp0->Status,
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	781a      	ldrb	r2, [r3, #0]
                                       rp0->DHKey);
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	3301      	adds	r3, #1
  hci_le_generate_dhkey_complete_event(rp0->Status,
 800a938:	0019      	movs	r1, r3
 800a93a:	0010      	movs	r0, r2
 800a93c:	f000 fa0c 	bl	800ad58 <hci_le_generate_dhkey_complete_event>

  return status;
 800a940:	193b      	adds	r3, r7, r4
 800a942:	781b      	ldrb	r3, [r3, #0]
}
 800a944:	0018      	movs	r0, r3
 800a946:	46bd      	mov	sp, r7
 800a948:	b005      	add	sp, #20
 800a94a:	bd90      	pop	{r4, r7, pc}

0800a94c <hci_le_enhanced_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_enhanced_connection_complete_event_process(uint8_t *buffer_in)
{
 800a94c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a94e:	46d6      	mov	lr, sl
 800a950:	464f      	mov	r7, r9
 800a952:	4646      	mov	r6, r8
 800a954:	b5c0      	push	{r6, r7, lr}
 800a956:	b08c      	sub	sp, #48	; 0x30
 800a958:	af08      	add	r7, sp, #32
 800a95a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a95c:	230f      	movs	r3, #15
 800a95e:	18fb      	adds	r3, r7, r3
 800a960:	2200      	movs	r2, #0
 800a962:	701a      	strb	r2, [r3, #0]
  /* Input params */
  hci_le_enhanced_connection_complete_event_rp0 *rp0 = (hci_le_enhanced_connection_complete_event_rp0 *)buffer_in;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	60bb      	str	r3, [r7, #8]
  hci_le_enhanced_connection_complete_event(rp0->Status,
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	781a      	ldrb	r2, [r3, #0]
 800a96c:	4694      	mov	ip, r2
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	785a      	ldrb	r2, [r3, #1]
 800a972:	789b      	ldrb	r3, [r3, #2]
 800a974:	021b      	lsls	r3, r3, #8
 800a976:	4313      	orrs	r3, r2
 800a978:	b29a      	uxth	r2, r3
 800a97a:	4690      	mov	r8, r2
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	78da      	ldrb	r2, [r3, #3]
 800a980:	4691      	mov	r9, r2
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	791a      	ldrb	r2, [r3, #4]
 800a986:	4692      	mov	sl, r2
                                            rp0->Connection_Handle,
                                            rp0->Role,
                                            rp0->Peer_Address_Type,
                                            rp0->Peer_Address,
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	1d5a      	adds	r2, r3, #5
                                            rp0->Local_Resolvable_Private_Address,
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	0019      	movs	r1, r3
 800a990:	310b      	adds	r1, #11
                                            rp0->Peer_Resolvable_Private_Address,
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	0018      	movs	r0, r3
 800a996:	3011      	adds	r0, #17
  hci_le_enhanced_connection_complete_event(rp0->Status,
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	7ddc      	ldrb	r4, [r3, #23]
 800a99c:	7e1b      	ldrb	r3, [r3, #24]
 800a99e:	021b      	lsls	r3, r3, #8
 800a9a0:	4323      	orrs	r3, r4
 800a9a2:	b29c      	uxth	r4, r3
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	7e5d      	ldrb	r5, [r3, #25]
 800a9a8:	7e9b      	ldrb	r3, [r3, #26]
 800a9aa:	021b      	lsls	r3, r3, #8
 800a9ac:	432b      	orrs	r3, r5
 800a9ae:	b29d      	uxth	r5, r3
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	7ede      	ldrb	r6, [r3, #27]
 800a9b4:	7f1b      	ldrb	r3, [r3, #28]
 800a9b6:	021b      	lsls	r3, r3, #8
 800a9b8:	4333      	orrs	r3, r6
 800a9ba:	b29b      	uxth	r3, r3
 800a9bc:	68be      	ldr	r6, [r7, #8]
 800a9be:	7f76      	ldrb	r6, [r6, #29]
 800a9c0:	9606      	str	r6, [sp, #24]
 800a9c2:	9305      	str	r3, [sp, #20]
 800a9c4:	9504      	str	r5, [sp, #16]
 800a9c6:	9403      	str	r4, [sp, #12]
 800a9c8:	9002      	str	r0, [sp, #8]
 800a9ca:	9101      	str	r1, [sp, #4]
 800a9cc:	9200      	str	r2, [sp, #0]
 800a9ce:	4653      	mov	r3, sl
 800a9d0:	464a      	mov	r2, r9
 800a9d2:	4641      	mov	r1, r8
 800a9d4:	4660      	mov	r0, ip
 800a9d6:	f000 f9d1 	bl	800ad7c <hci_le_enhanced_connection_complete_event>
                                            rp0->Conn_Interval,
                                            rp0->Conn_Latency,
                                            rp0->Supervision_Timeout,
                                            rp0->Master_Clock_Accuracy);

  return status;
 800a9da:	230f      	movs	r3, #15
 800a9dc:	18fb      	adds	r3, r7, r3
 800a9de:	781b      	ldrb	r3, [r3, #0]
}
 800a9e0:	0018      	movs	r0, r3
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	b004      	add	sp, #16
 800a9e6:	bce0      	pop	{r5, r6, r7}
 800a9e8:	46ba      	mov	sl, r7
 800a9ea:	46b1      	mov	r9, r6
 800a9ec:	46a8      	mov	r8, r5
 800a9ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a9f0 <hci_le_direct_advertising_report_event_process>:
 * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_direct_advertising_report_event_process(uint8_t *buffer_in)
{
 800a9f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9f2:	b0a7      	sub	sp, #156	; 0x9c
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a9f8:	238f      	movs	r3, #143	; 0x8f
 800a9fa:	18fb      	adds	r3, r7, r3
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	701a      	strb	r2, [r3, #0]
  /* Input params */
  hci_le_direct_advertising_report_event_rp0 *rp0 = (hci_le_direct_advertising_report_event_rp0 *)buffer_in;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2288      	movs	r2, #136	; 0x88
 800aa04:	18ba      	adds	r2, r7, r2
 800aa06:	6013      	str	r3, [r2, #0]
  uint8_t size = 1;
 800aa08:	2397      	movs	r3, #151	; 0x97
 800aa0a:	18fb      	adds	r3, r7, r3
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	701a      	strb	r2, [r3, #0]
  int i;
  Direct_Advertising_Report_t Direct_Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Direct_Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 800aa10:	2300      	movs	r3, #0
 800aa12:	2290      	movs	r2, #144	; 0x90
 800aa14:	18ba      	adds	r2, r7, r2
 800aa16:	6013      	str	r3, [r2, #0]
 800aa18:	e08d      	b.n	800ab36 <hci_le_direct_advertising_report_event_process+0x146>
    Direct_Advertising_Report[i].Event_Type = rp0->Direct_Advertising_Report[i].Event_Type;
 800aa1a:	2688      	movs	r6, #136	; 0x88
 800aa1c:	19bb      	adds	r3, r7, r6
 800aa1e:	681a      	ldr	r2, [r3, #0]
 800aa20:	2490      	movs	r4, #144	; 0x90
 800aa22:	193b      	adds	r3, r7, r4
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	011b      	lsls	r3, r3, #4
 800aa28:	18d3      	adds	r3, r2, r3
 800aa2a:	3301      	adds	r3, #1
 800aa2c:	7819      	ldrb	r1, [r3, #0]
 800aa2e:	2508      	movs	r5, #8
 800aa30:	197b      	adds	r3, r7, r5
 800aa32:	193a      	adds	r2, r7, r4
 800aa34:	6812      	ldr	r2, [r2, #0]
 800aa36:	0112      	lsls	r2, r2, #4
 800aa38:	54d1      	strb	r1, [r2, r3]
    size += 1;
 800aa3a:	2097      	movs	r0, #151	; 0x97
 800aa3c:	183b      	adds	r3, r7, r0
 800aa3e:	183a      	adds	r2, r7, r0
 800aa40:	7812      	ldrb	r2, [r2, #0]
 800aa42:	3201      	adds	r2, #1
 800aa44:	701a      	strb	r2, [r3, #0]
    Direct_Advertising_Report[i].Address_Type = rp0->Direct_Advertising_Report[i].Address_Type;
 800aa46:	19bb      	adds	r3, r7, r6
 800aa48:	681a      	ldr	r2, [r3, #0]
 800aa4a:	193b      	adds	r3, r7, r4
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	011b      	lsls	r3, r3, #4
 800aa50:	18d3      	adds	r3, r2, r3
 800aa52:	3302      	adds	r3, #2
 800aa54:	7819      	ldrb	r1, [r3, #0]
 800aa56:	197a      	adds	r2, r7, r5
 800aa58:	193b      	adds	r3, r7, r4
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	011b      	lsls	r3, r3, #4
 800aa5e:	18d3      	adds	r3, r2, r3
 800aa60:	3301      	adds	r3, #1
 800aa62:	1c0a      	adds	r2, r1, #0
 800aa64:	701a      	strb	r2, [r3, #0]
    size += 1;
 800aa66:	0005      	movs	r5, r0
 800aa68:	197b      	adds	r3, r7, r5
 800aa6a:	197a      	adds	r2, r7, r5
 800aa6c:	7812      	ldrb	r2, [r2, #0]
 800aa6e:	3201      	adds	r2, #1
 800aa70:	701a      	strb	r2, [r3, #0]
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Address, (const void *) rp0->Direct_Advertising_Report[i].Address, 6);
 800aa72:	2008      	movs	r0, #8
 800aa74:	183a      	adds	r2, r7, r0
 800aa76:	193b      	adds	r3, r7, r4
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	011b      	lsls	r3, r3, #4
 800aa7c:	18d3      	adds	r3, r2, r3
 800aa7e:	1c98      	adds	r0, r3, #2
 800aa80:	193b      	adds	r3, r7, r4
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	011b      	lsls	r3, r3, #4
 800aa86:	19ba      	adds	r2, r7, r6
 800aa88:	6812      	ldr	r2, [r2, #0]
 800aa8a:	18d3      	adds	r3, r2, r3
 800aa8c:	3303      	adds	r3, #3
 800aa8e:	2206      	movs	r2, #6
 800aa90:	0019      	movs	r1, r3
 800aa92:	f003 fe27 	bl	800e6e4 <memcpy>
    size += 6;
 800aa96:	197b      	adds	r3, r7, r5
 800aa98:	197a      	adds	r2, r7, r5
 800aa9a:	7812      	ldrb	r2, [r2, #0]
 800aa9c:	3206      	adds	r2, #6
 800aa9e:	701a      	strb	r2, [r3, #0]
    Direct_Advertising_Report[i].Direct_Address_Type = rp0->Direct_Advertising_Report[i].Direct_Address_Type;
 800aaa0:	19bb      	adds	r3, r7, r6
 800aaa2:	681a      	ldr	r2, [r3, #0]
 800aaa4:	193b      	adds	r3, r7, r4
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	011b      	lsls	r3, r3, #4
 800aaaa:	18d3      	adds	r3, r2, r3
 800aaac:	3309      	adds	r3, #9
 800aaae:	7819      	ldrb	r1, [r3, #0]
 800aab0:	2008      	movs	r0, #8
 800aab2:	183a      	adds	r2, r7, r0
 800aab4:	193b      	adds	r3, r7, r4
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	011b      	lsls	r3, r3, #4
 800aaba:	18d3      	adds	r3, r2, r3
 800aabc:	3308      	adds	r3, #8
 800aabe:	1c0a      	adds	r2, r1, #0
 800aac0:	701a      	strb	r2, [r3, #0]
    size += 1;
 800aac2:	197b      	adds	r3, r7, r5
 800aac4:	197a      	adds	r2, r7, r5
 800aac6:	7812      	ldrb	r2, [r2, #0]
 800aac8:	3201      	adds	r2, #1
 800aaca:	701a      	strb	r2, [r3, #0]
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 800aacc:	183a      	adds	r2, r7, r0
 800aace:	1939      	adds	r1, r7, r4
 800aad0:	680b      	ldr	r3, [r1, #0]
 800aad2:	011b      	lsls	r3, r3, #4
 800aad4:	3308      	adds	r3, #8
 800aad6:	18d3      	adds	r3, r2, r3
 800aad8:	1c58      	adds	r0, r3, #1
 800aada:	193a      	adds	r2, r7, r4
 800aadc:	6813      	ldr	r3, [r2, #0]
 800aade:	011b      	lsls	r3, r3, #4
 800aae0:	3308      	adds	r3, #8
 800aae2:	19ba      	adds	r2, r7, r6
 800aae4:	6812      	ldr	r2, [r2, #0]
 800aae6:	18d3      	adds	r3, r2, r3
 800aae8:	3302      	adds	r3, #2
 800aaea:	2206      	movs	r2, #6
 800aaec:	0019      	movs	r1, r3
 800aaee:	f003 fdf9 	bl	800e6e4 <memcpy>
    size += 6;
 800aaf2:	0028      	movs	r0, r5
 800aaf4:	183b      	adds	r3, r7, r0
 800aaf6:	183a      	adds	r2, r7, r0
 800aaf8:	7812      	ldrb	r2, [r2, #0]
 800aafa:	3206      	adds	r2, #6
 800aafc:	701a      	strb	r2, [r3, #0]
    Direct_Advertising_Report[i].RSSI = rp0->Direct_Advertising_Report[i].RSSI;
 800aafe:	19ba      	adds	r2, r7, r6
 800ab00:	6812      	ldr	r2, [r2, #0]
 800ab02:	1939      	adds	r1, r7, r4
 800ab04:	680b      	ldr	r3, [r1, #0]
 800ab06:	011b      	lsls	r3, r3, #4
 800ab08:	18d3      	adds	r3, r2, r3
 800ab0a:	3310      	adds	r3, #16
 800ab0c:	2100      	movs	r1, #0
 800ab0e:	5659      	ldrsb	r1, [r3, r1]
 800ab10:	2308      	movs	r3, #8
 800ab12:	18fa      	adds	r2, r7, r3
 800ab14:	193b      	adds	r3, r7, r4
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	011b      	lsls	r3, r3, #4
 800ab1a:	18d3      	adds	r3, r2, r3
 800ab1c:	330f      	adds	r3, #15
 800ab1e:	1c0a      	adds	r2, r1, #0
 800ab20:	701a      	strb	r2, [r3, #0]
    size += 1;
 800ab22:	183b      	adds	r3, r7, r0
 800ab24:	183a      	adds	r2, r7, r0
 800ab26:	7812      	ldrb	r2, [r2, #0]
 800ab28:	3201      	adds	r2, #1
 800ab2a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < rp0->Num_Reports; i++) {
 800ab2c:	193b      	adds	r3, r7, r4
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	3301      	adds	r3, #1
 800ab32:	193a      	adds	r2, r7, r4
 800ab34:	6013      	str	r3, [r2, #0]
 800ab36:	2188      	movs	r1, #136	; 0x88
 800ab38:	187b      	adds	r3, r7, r1
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	781b      	ldrb	r3, [r3, #0]
 800ab3e:	001a      	movs	r2, r3
 800ab40:	2390      	movs	r3, #144	; 0x90
 800ab42:	18fb      	adds	r3, r7, r3
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	4293      	cmp	r3, r2
 800ab48:	da00      	bge.n	800ab4c <hci_le_direct_advertising_report_event_process+0x15c>
 800ab4a:	e766      	b.n	800aa1a <hci_le_direct_advertising_report_event_process+0x2a>
  }
  hci_le_direct_advertising_report_event(rp0->Num_Reports,
 800ab4c:	187b      	adds	r3, r7, r1
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	781b      	ldrb	r3, [r3, #0]
 800ab52:	2208      	movs	r2, #8
 800ab54:	18ba      	adds	r2, r7, r2
 800ab56:	0011      	movs	r1, r2
 800ab58:	0018      	movs	r0, r3
 800ab5a:	f000 f92d 	bl	800adb8 <hci_le_direct_advertising_report_event>
                                         Direct_Advertising_Report);

  return status;
 800ab5e:	238f      	movs	r3, #143	; 0x8f
 800ab60:	18fb      	adds	r3, r7, r3
 800ab62:	781b      	ldrb	r3, [r3, #0]
}
 800ab64:	0018      	movs	r0, r3
 800ab66:	46bd      	mov	sp, r7
 800ab68:	b027      	add	sp, #156	; 0x9c
 800ab6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ab6c <hci_encryption_change_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_change_event(uint8_t Status,
                                 uint16_t Connection_Handle,
                                 uint8_t Encryption_Enabled))
{
 800ab6c:	b590      	push	{r4, r7, lr}
 800ab6e:	b083      	sub	sp, #12
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	0004      	movs	r4, r0
 800ab74:	0008      	movs	r0, r1
 800ab76:	0011      	movs	r1, r2
 800ab78:	1dfb      	adds	r3, r7, #7
 800ab7a:	1c22      	adds	r2, r4, #0
 800ab7c:	701a      	strb	r2, [r3, #0]
 800ab7e:	1d3b      	adds	r3, r7, #4
 800ab80:	1c02      	adds	r2, r0, #0
 800ab82:	801a      	strh	r2, [r3, #0]
 800ab84:	1dbb      	adds	r3, r7, #6
 800ab86:	1c0a      	adds	r2, r1, #0
 800ab88:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_change_event\r\n");
 800ab8a:	4b04      	ldr	r3, [pc, #16]	; (800ab9c <hci_encryption_change_event+0x30>)
 800ab8c:	0018      	movs	r0, r3
 800ab8e:	f003 fc0d 	bl	800e3ac <puts>
}
 800ab92:	46c0      	nop			; (mov r8, r8)
 800ab94:	46bd      	mov	sp, r7
 800ab96:	b003      	add	sp, #12
 800ab98:	bd90      	pop	{r4, r7, pc}
 800ab9a:	46c0      	nop			; (mov r8, r8)
 800ab9c:	0801090c 	.word	0x0801090c

0800aba0 <hci_read_remote_version_information_complete_event>:
WEAK_FUNCTION(void hci_read_remote_version_information_complete_event(uint8_t Status,
                                                        uint16_t Connection_Handle,
                                                        uint8_t Version,
                                                        uint16_t Manufacturer_Name,
                                                        uint16_t Subversion))
{
 800aba0:	b5b0      	push	{r4, r5, r7, lr}
 800aba2:	b082      	sub	sp, #8
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	0005      	movs	r5, r0
 800aba8:	000c      	movs	r4, r1
 800abaa:	0010      	movs	r0, r2
 800abac:	0019      	movs	r1, r3
 800abae:	1dfb      	adds	r3, r7, #7
 800abb0:	1c2a      	adds	r2, r5, #0
 800abb2:	701a      	strb	r2, [r3, #0]
 800abb4:	1d3b      	adds	r3, r7, #4
 800abb6:	1c22      	adds	r2, r4, #0
 800abb8:	801a      	strh	r2, [r3, #0]
 800abba:	1dbb      	adds	r3, r7, #6
 800abbc:	1c02      	adds	r2, r0, #0
 800abbe:	701a      	strb	r2, [r3, #0]
 800abc0:	1cbb      	adds	r3, r7, #2
 800abc2:	1c0a      	adds	r2, r1, #0
 800abc4:	801a      	strh	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_read_remote_version_information_complete_event\r\n");
 800abc6:	4b04      	ldr	r3, [pc, #16]	; (800abd8 <hci_read_remote_version_information_complete_event+0x38>)
 800abc8:	0018      	movs	r0, r3
 800abca:	f003 fbef 	bl	800e3ac <puts>
}
 800abce:	46c0      	nop			; (mov r8, r8)
 800abd0:	46bd      	mov	sp, r7
 800abd2:	b002      	add	sp, #8
 800abd4:	bdb0      	pop	{r4, r5, r7, pc}
 800abd6:	46c0      	nop			; (mov r8, r8)
 800abd8:	0801092c 	.word	0x0801092c

0800abdc <hci_hardware_error_event>:
  - 0x02: Timer overrun error
  - 0x03: Internal queue overflow error
  * @retval None
*/
WEAK_FUNCTION(void hci_hardware_error_event(uint8_t Hardware_Code))
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b082      	sub	sp, #8
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	0002      	movs	r2, r0
 800abe4:	1dfb      	adds	r3, r7, #7
 800abe6:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_hardware_error_event\r\n");
 800abe8:	4b03      	ldr	r3, [pc, #12]	; (800abf8 <hci_hardware_error_event+0x1c>)
 800abea:	0018      	movs	r0, r3
 800abec:	f003 fbde 	bl	800e3ac <puts>
}
 800abf0:	46c0      	nop			; (mov r8, r8)
 800abf2:	46bd      	mov	sp, r7
 800abf4:	b002      	add	sp, #8
 800abf6:	bd80      	pop	{r7, pc}
 800abf8:	08010960 	.word	0x08010960

0800abfc <hci_number_of_completed_packets_event>:
  * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
  * @retval None
*/
WEAK_FUNCTION(void hci_number_of_completed_packets_event(uint8_t Number_of_Handles,
                                           Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[]))
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b082      	sub	sp, #8
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	0002      	movs	r2, r0
 800ac04:	6039      	str	r1, [r7, #0]
 800ac06:	1dfb      	adds	r3, r7, #7
 800ac08:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_number_of_completed_packets_event\r\n");
 800ac0a:	4b04      	ldr	r3, [pc, #16]	; (800ac1c <hci_number_of_completed_packets_event+0x20>)
 800ac0c:	0018      	movs	r0, r3
 800ac0e:	f003 fbcd 	bl	800e3ac <puts>
}
 800ac12:	46c0      	nop			; (mov r8, r8)
 800ac14:	46bd      	mov	sp, r7
 800ac16:	b002      	add	sp, #8
 800ac18:	bd80      	pop	{r7, pc}
 800ac1a:	46c0      	nop			; (mov r8, r8)
 800ac1c:	0801097c 	.word	0x0801097c

0800ac20 <hci_data_buffer_overflow_event>:
  * Values:
  - 0x01: ACL Buffer Overflow
  * @retval None
*/
WEAK_FUNCTION(void hci_data_buffer_overflow_event(uint8_t Link_Type))
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b082      	sub	sp, #8
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	0002      	movs	r2, r0
 800ac28:	1dfb      	adds	r3, r7, #7
 800ac2a:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_data_buffer_overflow_event\r\n");
 800ac2c:	4b03      	ldr	r3, [pc, #12]	; (800ac3c <hci_data_buffer_overflow_event+0x1c>)
 800ac2e:	0018      	movs	r0, r3
 800ac30:	f003 fbbc 	bl	800e3ac <puts>
}
 800ac34:	46c0      	nop			; (mov r8, r8)
 800ac36:	46bd      	mov	sp, r7
 800ac38:	b002      	add	sp, #8
 800ac3a:	bd80      	pop	{r7, pc}
 800ac3c:	080109a4 	.word	0x080109a4

0800ac40 <hci_encryption_key_refresh_complete_event>:
  - 0x0000 ... 0x0EFF
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_key_refresh_complete_event(uint8_t Status,
                                               uint16_t Connection_Handle))
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b082      	sub	sp, #8
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	0002      	movs	r2, r0
 800ac48:	1dfb      	adds	r3, r7, #7
 800ac4a:	701a      	strb	r2, [r3, #0]
 800ac4c:	1d3b      	adds	r3, r7, #4
 800ac4e:	1c0a      	adds	r2, r1, #0
 800ac50:	801a      	strh	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_key_refresh_complete_event\r\n");
 800ac52:	4b04      	ldr	r3, [pc, #16]	; (800ac64 <hci_encryption_key_refresh_complete_event+0x24>)
 800ac54:	0018      	movs	r0, r3
 800ac56:	f003 fba9 	bl	800e3ac <puts>
}
 800ac5a:	46c0      	nop			; (mov r8, r8)
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	b002      	add	sp, #8
 800ac60:	bd80      	pop	{r7, pc}
 800ac62:	46c0      	nop			; (mov r8, r8)
 800ac64:	080109c4 	.word	0x080109c4

0800ac68 <hci_le_connection_update_complete_event>:
WEAK_FUNCTION(void hci_le_connection_update_complete_event(uint8_t Status,
                                             uint16_t Connection_Handle,
                                             uint16_t Conn_Interval,
                                             uint16_t Conn_Latency,
                                             uint16_t Supervision_Timeout))
{
 800ac68:	b5b0      	push	{r4, r5, r7, lr}
 800ac6a:	b082      	sub	sp, #8
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	0005      	movs	r5, r0
 800ac70:	000c      	movs	r4, r1
 800ac72:	0010      	movs	r0, r2
 800ac74:	0019      	movs	r1, r3
 800ac76:	1dfb      	adds	r3, r7, #7
 800ac78:	1c2a      	adds	r2, r5, #0
 800ac7a:	701a      	strb	r2, [r3, #0]
 800ac7c:	1d3b      	adds	r3, r7, #4
 800ac7e:	1c22      	adds	r2, r4, #0
 800ac80:	801a      	strh	r2, [r3, #0]
 800ac82:	1cbb      	adds	r3, r7, #2
 800ac84:	1c02      	adds	r2, r0, #0
 800ac86:	801a      	strh	r2, [r3, #0]
 800ac88:	003b      	movs	r3, r7
 800ac8a:	1c0a      	adds	r2, r1, #0
 800ac8c:	801a      	strh	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_connection_update_complete_event\r\n");
 800ac8e:	4b04      	ldr	r3, [pc, #16]	; (800aca0 <hci_le_connection_update_complete_event+0x38>)
 800ac90:	0018      	movs	r0, r3
 800ac92:	f003 fb8b 	bl	800e3ac <puts>
}
 800ac96:	46c0      	nop			; (mov r8, r8)
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	b002      	add	sp, #8
 800ac9c:	bdb0      	pop	{r4, r5, r7, pc}
 800ac9e:	46c0      	nop			; (mov r8, r8)
 800aca0:	08010a38 	.word	0x08010a38

0800aca4 <hci_le_read_remote_used_features_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_remote_used_features_complete_event(uint8_t Status,
                                                     uint16_t Connection_Handle,
                                                     uint8_t LE_Features[8]))
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b082      	sub	sp, #8
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	603a      	str	r2, [r7, #0]
 800acac:	1dfb      	adds	r3, r7, #7
 800acae:	1c02      	adds	r2, r0, #0
 800acb0:	701a      	strb	r2, [r3, #0]
 800acb2:	1d3b      	adds	r3, r7, #4
 800acb4:	1c0a      	adds	r2, r1, #0
 800acb6:	801a      	strh	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_remote_used_features_complete_event\r\n");
 800acb8:	4b03      	ldr	r3, [pc, #12]	; (800acc8 <hci_le_read_remote_used_features_complete_event+0x24>)
 800acba:	0018      	movs	r0, r3
 800acbc:	f003 fb76 	bl	800e3ac <puts>
}
 800acc0:	46c0      	nop			; (mov r8, r8)
 800acc2:	46bd      	mov	sp, r7
 800acc4:	b002      	add	sp, #8
 800acc6:	bd80      	pop	{r7, pc}
 800acc8:	08010a64 	.word	0x08010a64

0800accc <hci_le_long_term_key_request_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_long_term_key_request_event(uint16_t Connection_Handle,
                                        uint8_t Random_Number[8],
                                        uint16_t Encrypted_Diversifier))
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b082      	sub	sp, #8
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6039      	str	r1, [r7, #0]
 800acd4:	0011      	movs	r1, r2
 800acd6:	1dbb      	adds	r3, r7, #6
 800acd8:	1c02      	adds	r2, r0, #0
 800acda:	801a      	strh	r2, [r3, #0]
 800acdc:	1d3b      	adds	r3, r7, #4
 800acde:	1c0a      	adds	r2, r1, #0
 800ace0:	801a      	strh	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_long_term_key_request_event\r\n");
 800ace2:	4b04      	ldr	r3, [pc, #16]	; (800acf4 <hci_le_long_term_key_request_event+0x28>)
 800ace4:	0018      	movs	r0, r3
 800ace6:	f003 fb61 	bl	800e3ac <puts>
}
 800acea:	46c0      	nop			; (mov r8, r8)
 800acec:	46bd      	mov	sp, r7
 800acee:	b002      	add	sp, #8
 800acf0:	bd80      	pop	{r7, pc}
 800acf2:	46c0      	nop			; (mov r8, r8)
 800acf4:	08010a98 	.word	0x08010a98

0800acf8 <hci_le_data_length_change_event>:
WEAK_FUNCTION(void hci_le_data_length_change_event(uint16_t Connection_Handle,
                                     uint16_t MaxTxOctets,
                                     uint16_t MaxTxTime,
                                     uint16_t MaxRxOctets,
                                     uint16_t MaxRxTime))
{
 800acf8:	b5b0      	push	{r4, r5, r7, lr}
 800acfa:	b082      	sub	sp, #8
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	0005      	movs	r5, r0
 800ad00:	000c      	movs	r4, r1
 800ad02:	0010      	movs	r0, r2
 800ad04:	0019      	movs	r1, r3
 800ad06:	1dbb      	adds	r3, r7, #6
 800ad08:	1c2a      	adds	r2, r5, #0
 800ad0a:	801a      	strh	r2, [r3, #0]
 800ad0c:	1d3b      	adds	r3, r7, #4
 800ad0e:	1c22      	adds	r2, r4, #0
 800ad10:	801a      	strh	r2, [r3, #0]
 800ad12:	1cbb      	adds	r3, r7, #2
 800ad14:	1c02      	adds	r2, r0, #0
 800ad16:	801a      	strh	r2, [r3, #0]
 800ad18:	003b      	movs	r3, r7
 800ad1a:	1c0a      	adds	r2, r1, #0
 800ad1c:	801a      	strh	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_data_length_change_event\r\n");
 800ad1e:	4b04      	ldr	r3, [pc, #16]	; (800ad30 <hci_le_data_length_change_event+0x38>)
 800ad20:	0018      	movs	r0, r3
 800ad22:	f003 fb43 	bl	800e3ac <puts>
}
 800ad26:	46c0      	nop			; (mov r8, r8)
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	b002      	add	sp, #8
 800ad2c:	bdb0      	pop	{r4, r5, r7, pc}
 800ad2e:	46c0      	nop			; (mov r8, r8)
 800ad30:	08010abc 	.word	0x08010abc

0800ad34 <hci_le_read_local_p256_public_key_complete_event>:
  * @param Local_P256_Public_Key Local P-256 public key.
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_local_p256_public_key_complete_event(uint8_t Status,
                                                      uint8_t Local_P256_Public_Key[64]))
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b082      	sub	sp, #8
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	0002      	movs	r2, r0
 800ad3c:	6039      	str	r1, [r7, #0]
 800ad3e:	1dfb      	adds	r3, r7, #7
 800ad40:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_local_p256_public_key_complete_event\r\n");
 800ad42:	4b04      	ldr	r3, [pc, #16]	; (800ad54 <hci_le_read_local_p256_public_key_complete_event+0x20>)
 800ad44:	0018      	movs	r0, r3
 800ad46:	f003 fb31 	bl	800e3ac <puts>
}
 800ad4a:	46c0      	nop			; (mov r8, r8)
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	b002      	add	sp, #8
 800ad50:	bd80      	pop	{r7, pc}
 800ad52:	46c0      	nop			; (mov r8, r8)
 800ad54:	08010ae0 	.word	0x08010ae0

0800ad58 <hci_le_generate_dhkey_complete_event>:
  * @param DHKey Diffie Hellman Key
  * @retval None
*/
WEAK_FUNCTION(void hci_le_generate_dhkey_complete_event(uint8_t Status,
                                          uint8_t DHKey[32]))
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b082      	sub	sp, #8
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	0002      	movs	r2, r0
 800ad60:	6039      	str	r1, [r7, #0]
 800ad62:	1dfb      	adds	r3, r7, #7
 800ad64:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_generate_dhkey_complete_event\r\n");
 800ad66:	4b04      	ldr	r3, [pc, #16]	; (800ad78 <hci_le_generate_dhkey_complete_event+0x20>)
 800ad68:	0018      	movs	r0, r3
 800ad6a:	f003 fb1f 	bl	800e3ac <puts>
}
 800ad6e:	46c0      	nop			; (mov r8, r8)
 800ad70:	46bd      	mov	sp, r7
 800ad72:	b002      	add	sp, #8
 800ad74:	bd80      	pop	{r7, pc}
 800ad76:	46c0      	nop			; (mov r8, r8)
 800ad78:	08010b14 	.word	0x08010b14

0800ad7c <hci_le_enhanced_connection_complete_event>:
                                               uint8_t Peer_Resolvable_Private_Address[6],
                                               uint16_t Conn_Interval,
                                               uint16_t Conn_Latency,
                                               uint16_t Supervision_Timeout,
                                               uint8_t Master_Clock_Accuracy))
{
 800ad7c:	b5b0      	push	{r4, r5, r7, lr}
 800ad7e:	b082      	sub	sp, #8
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	0005      	movs	r5, r0
 800ad84:	000c      	movs	r4, r1
 800ad86:	0010      	movs	r0, r2
 800ad88:	0019      	movs	r1, r3
 800ad8a:	1dfb      	adds	r3, r7, #7
 800ad8c:	1c2a      	adds	r2, r5, #0
 800ad8e:	701a      	strb	r2, [r3, #0]
 800ad90:	1d3b      	adds	r3, r7, #4
 800ad92:	1c22      	adds	r2, r4, #0
 800ad94:	801a      	strh	r2, [r3, #0]
 800ad96:	1dbb      	adds	r3, r7, #6
 800ad98:	1c02      	adds	r2, r0, #0
 800ad9a:	701a      	strb	r2, [r3, #0]
 800ad9c:	1cfb      	adds	r3, r7, #3
 800ad9e:	1c0a      	adds	r2, r1, #0
 800ada0:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_enhanced_connection_complete_event\r\n");
 800ada2:	4b04      	ldr	r3, [pc, #16]	; (800adb4 <hci_le_enhanced_connection_complete_event+0x38>)
 800ada4:	0018      	movs	r0, r3
 800ada6:	f003 fb01 	bl	800e3ac <puts>
}
 800adaa:	46c0      	nop			; (mov r8, r8)
 800adac:	46bd      	mov	sp, r7
 800adae:	b002      	add	sp, #8
 800adb0:	bdb0      	pop	{r4, r5, r7, pc}
 800adb2:	46c0      	nop			; (mov r8, r8)
 800adb4:	08010b3c 	.word	0x08010b3c

0800adb8 <hci_le_direct_advertising_report_event>:
  * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
  * @retval None
*/
WEAK_FUNCTION(void hci_le_direct_advertising_report_event(uint8_t Num_Reports,
                                            Direct_Advertising_Report_t Direct_Advertising_Report[]))
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b082      	sub	sp, #8
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	0002      	movs	r2, r0
 800adc0:	6039      	str	r1, [r7, #0]
 800adc2:	1dfb      	adds	r3, r7, #7
 800adc4:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_direct_advertising_report_event\r\n");
 800adc6:	4b04      	ldr	r3, [pc, #16]	; (800add8 <hci_le_direct_advertising_report_event+0x20>)
 800adc8:	0018      	movs	r0, r3
 800adca:	f003 faef 	bl	800e3ac <puts>
}
 800adce:	46c0      	nop			; (mov r8, r8)
 800add0:	46bd      	mov	sp, r7
 800add2:	b002      	add	sp, #8
 800add4:	bd80      	pop	{r7, pc}
 800add6:	46c0      	nop			; (mov r8, r8)
 800add8:	08010b68 	.word	0x08010b68

0800addc <aci_gap_limited_discoverable_event>:
  * @brief This event is generated by the controller when the limited discoverable mode ends due to
timeout. The timeout is 180 seconds.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_limited_discoverable_event(void))
{
 800addc:	b580      	push	{r7, lr}
 800adde:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_limited_discoverable_event\r\n");
 800ade0:	4b03      	ldr	r3, [pc, #12]	; (800adf0 <aci_gap_limited_discoverable_event+0x14>)
 800ade2:	0018      	movs	r0, r3
 800ade4:	f003 fae2 	bl	800e3ac <puts>
}
 800ade8:	46c0      	nop			; (mov r8, r8)
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
 800adee:	46c0      	nop			; (mov r8, r8)
 800adf0:	08010b90 	.word	0x08010b90

0800adf4 <aci_gap_pairing_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_pairing_complete_event(uint16_t Connection_Handle,
                                    uint8_t Status,
                                    uint8_t Reason))
{
 800adf4:	b590      	push	{r4, r7, lr}
 800adf6:	b083      	sub	sp, #12
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	0004      	movs	r4, r0
 800adfc:	0008      	movs	r0, r1
 800adfe:	0011      	movs	r1, r2
 800ae00:	1dbb      	adds	r3, r7, #6
 800ae02:	1c22      	adds	r2, r4, #0
 800ae04:	801a      	strh	r2, [r3, #0]
 800ae06:	1d7b      	adds	r3, r7, #5
 800ae08:	1c02      	adds	r2, r0, #0
 800ae0a:	701a      	strb	r2, [r3, #0]
 800ae0c:	1d3b      	adds	r3, r7, #4
 800ae0e:	1c0a      	adds	r2, r1, #0
 800ae10:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pairing_complete_event\r\n");
 800ae12:	4b04      	ldr	r3, [pc, #16]	; (800ae24 <aci_gap_pairing_complete_event+0x30>)
 800ae14:	0018      	movs	r0, r3
 800ae16:	f003 fac9 	bl	800e3ac <puts>
}
 800ae1a:	46c0      	nop			; (mov r8, r8)
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	b003      	add	sp, #12
 800ae20:	bd90      	pop	{r4, r7, pc}
 800ae22:	46c0      	nop			; (mov r8, r8)
 800ae24:	08010bb4 	.word	0x08010bb4

0800ae28 <aci_gap_pass_key_req_event>:
@ref aci_gap_pass_key_resp command.
  * @param Connection_Handle Connection handle for which the passkey has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_pass_key_req_event(uint16_t Connection_Handle))
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b082      	sub	sp, #8
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	0002      	movs	r2, r0
 800ae30:	1dbb      	adds	r3, r7, #6
 800ae32:	801a      	strh	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pass_key_req_event\r\n");
 800ae34:	4b03      	ldr	r3, [pc, #12]	; (800ae44 <aci_gap_pass_key_req_event+0x1c>)
 800ae36:	0018      	movs	r0, r3
 800ae38:	f003 fab8 	bl	800e3ac <puts>
}
 800ae3c:	46c0      	nop			; (mov r8, r8)
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	b002      	add	sp, #8
 800ae42:	bd80      	pop	{r7, pc}
 800ae44:	08010bd4 	.word	0x08010bd4

0800ae48 <aci_gap_authorization_req_event>:
@ref aci_gap_authorization_resp command should be used to respond by the application.
  * @param Connection_Handle Connection handle for which authorization has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_authorization_req_event(uint16_t Connection_Handle))
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b082      	sub	sp, #8
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	0002      	movs	r2, r0
 800ae50:	1dbb      	adds	r3, r7, #6
 800ae52:	801a      	strh	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_authorization_req_event\r\n");
 800ae54:	4b03      	ldr	r3, [pc, #12]	; (800ae64 <aci_gap_authorization_req_event+0x1c>)
 800ae56:	0018      	movs	r0, r3
 800ae58:	f003 faa8 	bl	800e3ac <puts>
}
 800ae5c:	46c0      	nop			; (mov r8, r8)
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	b002      	add	sp, #8
 800ae62:	bd80      	pop	{r7, pc}
 800ae64:	08010bf0 	.word	0x08010bf0

0800ae68 <aci_gap_slave_security_initiated_event>:
/**
  * @brief This event is generated when the slave security request is successfully sent to the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_slave_security_initiated_event(void))
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_slave_security_initiated_event\r\n");
 800ae6c:	4b03      	ldr	r3, [pc, #12]	; (800ae7c <aci_gap_slave_security_initiated_event+0x14>)
 800ae6e:	0018      	movs	r0, r3
 800ae70:	f003 fa9c 	bl	800e3ac <puts>
}
 800ae74:	46c0      	nop			; (mov r8, r8)
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}
 800ae7a:	46c0      	nop			; (mov r8, r8)
 800ae7c:	08010c14 	.word	0x08010c14

0800ae80 <aci_gap_bond_lost_event>:
received, the upper layer has to issue the command @ref aci_gap_allow_rebond in order to
allow the slave to continue the pairing process with the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_bond_lost_event(void))
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_bond_lost_event\r\n");
 800ae84:	4b03      	ldr	r3, [pc, #12]	; (800ae94 <aci_gap_bond_lost_event+0x14>)
 800ae86:	0018      	movs	r0, r3
 800ae88:	f003 fa90 	bl	800e3ac <puts>
}
 800ae8c:	46c0      	nop			; (mov r8, r8)
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}
 800ae92:	46c0      	nop			; (mov r8, r8)
 800ae94:	08010c3c 	.word	0x08010c3c

0800ae98 <aci_gap_addr_not_resolved_event>:
  * @param Connection_Handle Connection handle for which the private address could not be
resolved with any of the stored IRK's.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_addr_not_resolved_event(uint16_t Connection_Handle))
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b082      	sub	sp, #8
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	0002      	movs	r2, r0
 800aea0:	1dbb      	adds	r3, r7, #6
 800aea2:	801a      	strh	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_addr_not_resolved_event\r\n");
 800aea4:	4b03      	ldr	r3, [pc, #12]	; (800aeb4 <aci_gap_addr_not_resolved_event+0x1c>)
 800aea6:	0018      	movs	r0, r3
 800aea8:	f003 fa80 	bl	800e3ac <puts>
}
 800aeac:	46c0      	nop			; (mov r8, r8)
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	b002      	add	sp, #8
 800aeb2:	bd80      	pop	{r7, pc}
 800aeb4:	08010c78 	.word	0x08010c78

0800aeb8 <aci_gap_numeric_comparison_value_event>:
  * @param Numeric_Value 
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_numeric_comparison_value_event(uint16_t Connection_Handle,
                                            uint32_t Numeric_Value))
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b082      	sub	sp, #8
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	0002      	movs	r2, r0
 800aec0:	6039      	str	r1, [r7, #0]
 800aec2:	1dbb      	adds	r3, r7, #6
 800aec4:	801a      	strh	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_numeric_comparison_value_event\r\n");
 800aec6:	4b04      	ldr	r3, [pc, #16]	; (800aed8 <aci_gap_numeric_comparison_value_event+0x20>)
 800aec8:	0018      	movs	r0, r3
 800aeca:	f003 fa6f 	bl	800e3ac <puts>
}
 800aece:	46c0      	nop			; (mov r8, r8)
 800aed0:	46bd      	mov	sp, r7
 800aed2:	b002      	add	sp, #8
 800aed4:	bd80      	pop	{r7, pc}
 800aed6:	46c0      	nop			; (mov r8, r8)
 800aed8:	08010c9c 	.word	0x08010c9c

0800aedc <aci_gap_keypress_notification_event>:
  * @param Notification_Type Type of Keypress input notified/signaled by peer device (having Keyboard only I/O capabilities
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_keypress_notification_event(uint16_t Connection_Handle,
                                         uint8_t Notification_Type))
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b082      	sub	sp, #8
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	0002      	movs	r2, r0
 800aee4:	1dbb      	adds	r3, r7, #6
 800aee6:	801a      	strh	r2, [r3, #0]
 800aee8:	1d7b      	adds	r3, r7, #5
 800aeea:	1c0a      	adds	r2, r1, #0
 800aeec:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_keypress_notification_event\r\n");
 800aeee:	4b04      	ldr	r3, [pc, #16]	; (800af00 <aci_gap_keypress_notification_event+0x24>)
 800aef0:	0018      	movs	r0, r3
 800aef2:	f003 fa5b 	bl	800e3ac <puts>
}
 800aef6:	46c0      	nop			; (mov r8, r8)
 800aef8:	46bd      	mov	sp, r7
 800aefa:	b002      	add	sp, #8
 800aefc:	bd80      	pop	{r7, pc}
 800aefe:	46c0      	nop			; (mov r8, r8)
 800af00:	08010cc4 	.word	0x08010cc4

0800af04 <aci_gatt_proc_timeout_event>:
seconds). This is a critical event that should not happen during normal operating conditions. It is an indication of either a major disruption in the communication link or a mistake in the application which does not provide a reply to GATT procedures. After this event, the GATT channel is closed and no more GATT communication can be performed. The applications is exptected to issue an @ref aci_gap_terminate to disconnect from the peer device. It is important to leave an 100 ms blank window before sending the @ref aci_gap_terminate, since immediately after this event, system could save important information in non volatile memory.
  * @param Connection_Handle Connection handle on which the GATT procedure has timed out
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_proc_timeout_event(uint16_t Connection_Handle))
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b082      	sub	sp, #8
 800af08:	af00      	add	r7, sp, #0
 800af0a:	0002      	movs	r2, r0
 800af0c:	1dbb      	adds	r3, r7, #6
 800af0e:	801a      	strh	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_proc_timeout_event\r\n");
 800af10:	4b03      	ldr	r3, [pc, #12]	; (800af20 <aci_gatt_proc_timeout_event+0x1c>)
 800af12:	0018      	movs	r0, r3
 800af14:	f003 fa4a 	bl	800e3ac <puts>
}
 800af18:	46c0      	nop			; (mov r8, r8)
 800af1a:	46bd      	mov	sp, r7
 800af1c:	b002      	add	sp, #8
 800af1e:	bd80      	pop	{r7, pc}
 800af20:	08010d10 	.word	0x08010d10

0800af24 <aci_att_find_info_resp_event>:
*/
WEAK_FUNCTION(void aci_att_find_info_resp_event(uint16_t Connection_Handle,
                                  uint8_t Format,
                                  uint8_t Event_Data_Length,
                                  uint8_t Handle_UUID_Pair[]))
{
 800af24:	b590      	push	{r4, r7, lr}
 800af26:	b083      	sub	sp, #12
 800af28:	af00      	add	r7, sp, #0
 800af2a:	0004      	movs	r4, r0
 800af2c:	0008      	movs	r0, r1
 800af2e:	0011      	movs	r1, r2
 800af30:	603b      	str	r3, [r7, #0]
 800af32:	1dbb      	adds	r3, r7, #6
 800af34:	1c22      	adds	r2, r4, #0
 800af36:	801a      	strh	r2, [r3, #0]
 800af38:	1d7b      	adds	r3, r7, #5
 800af3a:	1c02      	adds	r2, r0, #0
 800af3c:	701a      	strb	r2, [r3, #0]
 800af3e:	1d3b      	adds	r3, r7, #4
 800af40:	1c0a      	adds	r2, r1, #0
 800af42:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_info_resp_event\r\n");
 800af44:	4b03      	ldr	r3, [pc, #12]	; (800af54 <aci_att_find_info_resp_event+0x30>)
 800af46:	0018      	movs	r0, r3
 800af48:	f003 fa30 	bl	800e3ac <puts>
}
 800af4c:	46c0      	nop			; (mov r8, r8)
 800af4e:	46bd      	mov	sp, r7
 800af50:	b003      	add	sp, #12
 800af52:	bd90      	pop	{r4, r7, pc}
 800af54:	08010d54 	.word	0x08010d54

0800af58 <aci_att_find_by_type_value_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_find_by_type_value_resp_event(uint16_t Connection_Handle,
                                           uint8_t Num_of_Handle_Pair,
                                           Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[]))
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b082      	sub	sp, #8
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	603a      	str	r2, [r7, #0]
 800af60:	1dbb      	adds	r3, r7, #6
 800af62:	1c02      	adds	r2, r0, #0
 800af64:	801a      	strh	r2, [r3, #0]
 800af66:	1d7b      	adds	r3, r7, #5
 800af68:	1c0a      	adds	r2, r1, #0
 800af6a:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_by_type_value_resp_event\r\n");
 800af6c:	4b03      	ldr	r3, [pc, #12]	; (800af7c <aci_att_find_by_type_value_resp_event+0x24>)
 800af6e:	0018      	movs	r0, r3
 800af70:	f003 fa1c 	bl	800e3ac <puts>
}
 800af74:	46c0      	nop			; (mov r8, r8)
 800af76:	46bd      	mov	sp, r7
 800af78:	b002      	add	sp, #8
 800af7a:	bd80      	pop	{r7, pc}
 800af7c:	08010d74 	.word	0x08010d74

0800af80 <aci_att_read_by_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_type_resp_event(uint16_t Connection_Handle,
                                     uint8_t Handle_Value_Pair_Length,
                                     uint8_t Data_Length,
                                     uint8_t Handle_Value_Pair_Data[]))
{
 800af80:	b590      	push	{r4, r7, lr}
 800af82:	b083      	sub	sp, #12
 800af84:	af00      	add	r7, sp, #0
 800af86:	0004      	movs	r4, r0
 800af88:	0008      	movs	r0, r1
 800af8a:	0011      	movs	r1, r2
 800af8c:	603b      	str	r3, [r7, #0]
 800af8e:	1dbb      	adds	r3, r7, #6
 800af90:	1c22      	adds	r2, r4, #0
 800af92:	801a      	strh	r2, [r3, #0]
 800af94:	1d7b      	adds	r3, r7, #5
 800af96:	1c02      	adds	r2, r0, #0
 800af98:	701a      	strb	r2, [r3, #0]
 800af9a:	1d3b      	adds	r3, r7, #4
 800af9c:	1c0a      	adds	r2, r1, #0
 800af9e:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_type_resp_event\r\n");
 800afa0:	4b03      	ldr	r3, [pc, #12]	; (800afb0 <aci_att_read_by_type_resp_event+0x30>)
 800afa2:	0018      	movs	r0, r3
 800afa4:	f003 fa02 	bl	800e3ac <puts>
}
 800afa8:	46c0      	nop			; (mov r8, r8)
 800afaa:	46bd      	mov	sp, r7
 800afac:	b003      	add	sp, #12
 800afae:	bd90      	pop	{r4, r7, pc}
 800afb0:	08010d9c 	.word	0x08010d9c

0800afb4 <aci_att_read_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_resp_event(uint16_t Connection_Handle,
                             uint8_t Event_Data_Length,
                             uint8_t Attribute_Value[]))
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b082      	sub	sp, #8
 800afb8:	af00      	add	r7, sp, #0
 800afba:	603a      	str	r2, [r7, #0]
 800afbc:	1dbb      	adds	r3, r7, #6
 800afbe:	1c02      	adds	r2, r0, #0
 800afc0:	801a      	strh	r2, [r3, #0]
 800afc2:	1d7b      	adds	r3, r7, #5
 800afc4:	1c0a      	adds	r2, r1, #0
 800afc6:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_resp_event\r\n");
 800afc8:	4b03      	ldr	r3, [pc, #12]	; (800afd8 <aci_att_read_resp_event+0x24>)
 800afca:	0018      	movs	r0, r3
 800afcc:	f003 f9ee 	bl	800e3ac <puts>
}
 800afd0:	46c0      	nop			; (mov r8, r8)
 800afd2:	46bd      	mov	sp, r7
 800afd4:	b002      	add	sp, #8
 800afd6:	bd80      	pop	{r7, pc}
 800afd8:	08010dc0 	.word	0x08010dc0

0800afdc <aci_att_read_blob_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_blob_resp_event(uint16_t Connection_Handle,
                                  uint8_t Event_Data_Length,
                                  uint8_t Attribute_Value[]))
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b082      	sub	sp, #8
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	603a      	str	r2, [r7, #0]
 800afe4:	1dbb      	adds	r3, r7, #6
 800afe6:	1c02      	adds	r2, r0, #0
 800afe8:	801a      	strh	r2, [r3, #0]
 800afea:	1d7b      	adds	r3, r7, #5
 800afec:	1c0a      	adds	r2, r1, #0
 800afee:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_blob_resp_event\r\n");
 800aff0:	4b03      	ldr	r3, [pc, #12]	; (800b000 <aci_att_read_blob_resp_event+0x24>)
 800aff2:	0018      	movs	r0, r3
 800aff4:	f003 f9da 	bl	800e3ac <puts>
}
 800aff8:	46c0      	nop			; (mov r8, r8)
 800affa:	46bd      	mov	sp, r7
 800affc:	b002      	add	sp, #8
 800affe:	bd80      	pop	{r7, pc}
 800b000:	08010ddc 	.word	0x08010ddc

0800b004 <aci_att_read_multiple_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_multiple_resp_event(uint16_t Connection_Handle,
                                      uint8_t Event_Data_Length,
                                      uint8_t Set_Of_Values[]))
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b082      	sub	sp, #8
 800b008:	af00      	add	r7, sp, #0
 800b00a:	603a      	str	r2, [r7, #0]
 800b00c:	1dbb      	adds	r3, r7, #6
 800b00e:	1c02      	adds	r2, r0, #0
 800b010:	801a      	strh	r2, [r3, #0]
 800b012:	1d7b      	adds	r3, r7, #5
 800b014:	1c0a      	adds	r2, r1, #0
 800b016:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_multiple_resp_event\r\n");
 800b018:	4b03      	ldr	r3, [pc, #12]	; (800b028 <aci_att_read_multiple_resp_event+0x24>)
 800b01a:	0018      	movs	r0, r3
 800b01c:	f003 f9c6 	bl	800e3ac <puts>
}
 800b020:	46c0      	nop			; (mov r8, r8)
 800b022:	46bd      	mov	sp, r7
 800b024:	b002      	add	sp, #8
 800b026:	bd80      	pop	{r7, pc}
 800b028:	08010dfc 	.word	0x08010dfc

0800b02c <aci_att_read_by_group_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_group_type_resp_event(uint16_t Connection_Handle,
                                           uint8_t Attribute_Data_Length,
                                           uint8_t Data_Length,
                                           uint8_t Attribute_Data_List[]))
{
 800b02c:	b590      	push	{r4, r7, lr}
 800b02e:	b083      	sub	sp, #12
 800b030:	af00      	add	r7, sp, #0
 800b032:	0004      	movs	r4, r0
 800b034:	0008      	movs	r0, r1
 800b036:	0011      	movs	r1, r2
 800b038:	603b      	str	r3, [r7, #0]
 800b03a:	1dbb      	adds	r3, r7, #6
 800b03c:	1c22      	adds	r2, r4, #0
 800b03e:	801a      	strh	r2, [r3, #0]
 800b040:	1d7b      	adds	r3, r7, #5
 800b042:	1c02      	adds	r2, r0, #0
 800b044:	701a      	strb	r2, [r3, #0]
 800b046:	1d3b      	adds	r3, r7, #4
 800b048:	1c0a      	adds	r2, r1, #0
 800b04a:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_group_type_resp_event\r\n");
 800b04c:	4b03      	ldr	r3, [pc, #12]	; (800b05c <aci_att_read_by_group_type_resp_event+0x30>)
 800b04e:	0018      	movs	r0, r3
 800b050:	f003 f9ac 	bl	800e3ac <puts>
}
 800b054:	46c0      	nop			; (mov r8, r8)
 800b056:	46bd      	mov	sp, r7
 800b058:	b003      	add	sp, #12
 800b05a:	bd90      	pop	{r4, r7, pc}
 800b05c:	08010e20 	.word	0x08010e20

0800b060 <aci_att_prepare_write_resp_event>:
WEAK_FUNCTION(void aci_att_prepare_write_resp_event(uint16_t Connection_Handle,
                                      uint16_t Attribute_Handle,
                                      uint16_t Offset,
                                      uint8_t Part_Attribute_Value_Length,
                                      uint8_t Part_Attribute_Value[]))
{
 800b060:	b5b0      	push	{r4, r5, r7, lr}
 800b062:	b082      	sub	sp, #8
 800b064:	af00      	add	r7, sp, #0
 800b066:	0005      	movs	r5, r0
 800b068:	000c      	movs	r4, r1
 800b06a:	0010      	movs	r0, r2
 800b06c:	0019      	movs	r1, r3
 800b06e:	1dbb      	adds	r3, r7, #6
 800b070:	1c2a      	adds	r2, r5, #0
 800b072:	801a      	strh	r2, [r3, #0]
 800b074:	1d3b      	adds	r3, r7, #4
 800b076:	1c22      	adds	r2, r4, #0
 800b078:	801a      	strh	r2, [r3, #0]
 800b07a:	1cbb      	adds	r3, r7, #2
 800b07c:	1c02      	adds	r2, r0, #0
 800b07e:	801a      	strh	r2, [r3, #0]
 800b080:	1c7b      	adds	r3, r7, #1
 800b082:	1c0a      	adds	r2, r1, #0
 800b084:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_prepare_write_resp_event\r\n");
 800b086:	4b04      	ldr	r3, [pc, #16]	; (800b098 <aci_att_prepare_write_resp_event+0x38>)
 800b088:	0018      	movs	r0, r3
 800b08a:	f003 f98f 	bl	800e3ac <puts>
}
 800b08e:	46c0      	nop			; (mov r8, r8)
 800b090:	46bd      	mov	sp, r7
 800b092:	b002      	add	sp, #8
 800b094:	bdb0      	pop	{r4, r5, r7, pc}
 800b096:	46c0      	nop			; (mov r8, r8)
 800b098:	08010e48 	.word	0x08010e48

0800b09c <aci_att_exec_write_resp_event>:
  * @brief This event is generated in response to an Execute Write Request.
  * @param Connection_Handle Connection handle related to the response
  * @retval None
*/
WEAK_FUNCTION(void aci_att_exec_write_resp_event(uint16_t Connection_Handle))
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b082      	sub	sp, #8
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	0002      	movs	r2, r0
 800b0a4:	1dbb      	adds	r3, r7, #6
 800b0a6:	801a      	strh	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exec_write_resp_event\r\n");
 800b0a8:	4b03      	ldr	r3, [pc, #12]	; (800b0b8 <aci_att_exec_write_resp_event+0x1c>)
 800b0aa:	0018      	movs	r0, r3
 800b0ac:	f003 f97e 	bl	800e3ac <puts>
}
 800b0b0:	46c0      	nop			; (mov r8, r8)
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	b002      	add	sp, #8
 800b0b6:	bd80      	pop	{r7, pc}
 800b0b8:	08010e6c 	.word	0x08010e6c

0800b0bc <aci_gatt_indication_event>:
*/
WEAK_FUNCTION(void aci_gatt_indication_event(uint16_t Connection_Handle,
                               uint16_t Attribute_Handle,
                               uint8_t Attribute_Value_Length,
                               uint8_t Attribute_Value[]))
{
 800b0bc:	b590      	push	{r4, r7, lr}
 800b0be:	b085      	sub	sp, #20
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	0004      	movs	r4, r0
 800b0c4:	0008      	movs	r0, r1
 800b0c6:	0011      	movs	r1, r2
 800b0c8:	607b      	str	r3, [r7, #4]
 800b0ca:	230e      	movs	r3, #14
 800b0cc:	18fb      	adds	r3, r7, r3
 800b0ce:	1c22      	adds	r2, r4, #0
 800b0d0:	801a      	strh	r2, [r3, #0]
 800b0d2:	230c      	movs	r3, #12
 800b0d4:	18fb      	adds	r3, r7, r3
 800b0d6:	1c02      	adds	r2, r0, #0
 800b0d8:	801a      	strh	r2, [r3, #0]
 800b0da:	230b      	movs	r3, #11
 800b0dc:	18fb      	adds	r3, r7, r3
 800b0de:	1c0a      	adds	r2, r1, #0
 800b0e0:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_indication_event\r\n");
 800b0e2:	4b04      	ldr	r3, [pc, #16]	; (800b0f4 <aci_gatt_indication_event+0x38>)
 800b0e4:	0018      	movs	r0, r3
 800b0e6:	f003 f961 	bl	800e3ac <puts>
}
 800b0ea:	46c0      	nop			; (mov r8, r8)
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	b005      	add	sp, #20
 800b0f0:	bd90      	pop	{r4, r7, pc}
 800b0f2:	46c0      	nop			; (mov r8, r8)
 800b0f4:	08010e8c 	.word	0x08010e8c

0800b0f8 <aci_gatt_error_resp_event>:
*/
WEAK_FUNCTION(void aci_gatt_error_resp_event(uint16_t Connection_Handle,
                               uint8_t Req_Opcode,
                               uint16_t Attribute_Handle,
                               uint8_t Error_Code))
{
 800b0f8:	b5b0      	push	{r4, r5, r7, lr}
 800b0fa:	b082      	sub	sp, #8
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	0005      	movs	r5, r0
 800b100:	000c      	movs	r4, r1
 800b102:	0010      	movs	r0, r2
 800b104:	0019      	movs	r1, r3
 800b106:	1dbb      	adds	r3, r7, #6
 800b108:	1c2a      	adds	r2, r5, #0
 800b10a:	801a      	strh	r2, [r3, #0]
 800b10c:	1d7b      	adds	r3, r7, #5
 800b10e:	1c22      	adds	r2, r4, #0
 800b110:	701a      	strb	r2, [r3, #0]
 800b112:	1cbb      	adds	r3, r7, #2
 800b114:	1c02      	adds	r2, r0, #0
 800b116:	801a      	strh	r2, [r3, #0]
 800b118:	1d3b      	adds	r3, r7, #4
 800b11a:	1c0a      	adds	r2, r1, #0
 800b11c:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_error_resp_event\r\n");
 800b11e:	4b04      	ldr	r3, [pc, #16]	; (800b130 <aci_gatt_error_resp_event+0x38>)
 800b120:	0018      	movs	r0, r3
 800b122:	f003 f943 	bl	800e3ac <puts>
}
 800b126:	46c0      	nop			; (mov r8, r8)
 800b128:	46bd      	mov	sp, r7
 800b12a:	b002      	add	sp, #8
 800b12c:	bdb0      	pop	{r4, r5, r7, pc}
 800b12e:	46c0      	nop			; (mov r8, r8)
 800b130:	08010ee8 	.word	0x08010ee8

0800b134 <aci_gatt_write_permit_req_event>:
*/
WEAK_FUNCTION(void aci_gatt_write_permit_req_event(uint16_t Connection_Handle,
                                     uint16_t Attribute_Handle,
                                     uint8_t Data_Length,
                                     uint8_t Data[]))
{
 800b134:	b590      	push	{r4, r7, lr}
 800b136:	b085      	sub	sp, #20
 800b138:	af00      	add	r7, sp, #0
 800b13a:	0004      	movs	r4, r0
 800b13c:	0008      	movs	r0, r1
 800b13e:	0011      	movs	r1, r2
 800b140:	607b      	str	r3, [r7, #4]
 800b142:	230e      	movs	r3, #14
 800b144:	18fb      	adds	r3, r7, r3
 800b146:	1c22      	adds	r2, r4, #0
 800b148:	801a      	strh	r2, [r3, #0]
 800b14a:	230c      	movs	r3, #12
 800b14c:	18fb      	adds	r3, r7, r3
 800b14e:	1c02      	adds	r2, r0, #0
 800b150:	801a      	strh	r2, [r3, #0]
 800b152:	230b      	movs	r3, #11
 800b154:	18fb      	adds	r3, r7, r3
 800b156:	1c0a      	adds	r2, r1, #0
 800b158:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_write_permit_req_event\r\n");
 800b15a:	4b04      	ldr	r3, [pc, #16]	; (800b16c <aci_gatt_write_permit_req_event+0x38>)
 800b15c:	0018      	movs	r0, r3
 800b15e:	f003 f925 	bl	800e3ac <puts>
}
 800b162:	46c0      	nop			; (mov r8, r8)
 800b164:	46bd      	mov	sp, r7
 800b166:	b005      	add	sp, #20
 800b168:	bd90      	pop	{r4, r7, pc}
 800b16a:	46c0      	nop			; (mov r8, r8)
 800b16c:	08010f30 	.word	0x08010f30

0800b170 <aci_gatt_read_permit_req_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_read_permit_req_event(uint16_t Connection_Handle,
                                    uint16_t Attribute_Handle,
                                    uint16_t Offset))
{
 800b170:	b590      	push	{r4, r7, lr}
 800b172:	b083      	sub	sp, #12
 800b174:	af00      	add	r7, sp, #0
 800b176:	0004      	movs	r4, r0
 800b178:	0008      	movs	r0, r1
 800b17a:	0011      	movs	r1, r2
 800b17c:	1dbb      	adds	r3, r7, #6
 800b17e:	1c22      	adds	r2, r4, #0
 800b180:	801a      	strh	r2, [r3, #0]
 800b182:	1d3b      	adds	r3, r7, #4
 800b184:	1c02      	adds	r2, r0, #0
 800b186:	801a      	strh	r2, [r3, #0]
 800b188:	1cbb      	adds	r3, r7, #2
 800b18a:	1c0a      	adds	r2, r1, #0
 800b18c:	801a      	strh	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_read_permit_req_event\r\n");
 800b18e:	4b04      	ldr	r3, [pc, #16]	; (800b1a0 <aci_gatt_read_permit_req_event+0x30>)
 800b190:	0018      	movs	r0, r3
 800b192:	f003 f90b 	bl	800e3ac <puts>
}
 800b196:	46c0      	nop			; (mov r8, r8)
 800b198:	46bd      	mov	sp, r7
 800b19a:	b003      	add	sp, #12
 800b19c:	bd90      	pop	{r4, r7, pc}
 800b19e:	46c0      	nop			; (mov r8, r8)
 800b1a0:	08010f54 	.word	0x08010f54

0800b1a4 <aci_gatt_read_multi_permit_req_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_read_multi_permit_req_event(uint16_t Connection_Handle,
                                          uint8_t Number_of_Handles,
                                          Handle_Item_t Handle_Item[]))
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b082      	sub	sp, #8
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	603a      	str	r2, [r7, #0]
 800b1ac:	1dbb      	adds	r3, r7, #6
 800b1ae:	1c02      	adds	r2, r0, #0
 800b1b0:	801a      	strh	r2, [r3, #0]
 800b1b2:	1d7b      	adds	r3, r7, #5
 800b1b4:	1c0a      	adds	r2, r1, #0
 800b1b6:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_read_multi_permit_req_event\r\n");
 800b1b8:	4b03      	ldr	r3, [pc, #12]	; (800b1c8 <aci_gatt_read_multi_permit_req_event+0x24>)
 800b1ba:	0018      	movs	r0, r3
 800b1bc:	f003 f8f6 	bl	800e3ac <puts>
}
 800b1c0:	46c0      	nop			; (mov r8, r8)
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	b002      	add	sp, #8
 800b1c6:	bd80      	pop	{r7, pc}
 800b1c8:	08010f74 	.word	0x08010f74

0800b1cc <aci_gatt_server_confirmation_event>:
  * @brief This event is generated when the client has sent the confirmation to a previously sent indication
  * @param Connection_Handle Connection handle related to the event
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_server_confirmation_event(uint16_t Connection_Handle))
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b082      	sub	sp, #8
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	0002      	movs	r2, r0
 800b1d4:	1dbb      	adds	r3, r7, #6
 800b1d6:	801a      	strh	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_server_confirmation_event\r\n");
 800b1d8:	4b03      	ldr	r3, [pc, #12]	; (800b1e8 <aci_gatt_server_confirmation_event+0x1c>)
 800b1da:	0018      	movs	r0, r3
 800b1dc:	f003 f8e6 	bl	800e3ac <puts>
}
 800b1e0:	46c0      	nop			; (mov r8, r8)
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	b002      	add	sp, #8
 800b1e6:	bd80      	pop	{r7, pc}
 800b1e8:	08010fc0 	.word	0x08010fc0

0800b1ec <aci_gatt_prepare_write_permit_req_event>:
WEAK_FUNCTION(void aci_gatt_prepare_write_permit_req_event(uint16_t Connection_Handle,
                                             uint16_t Attribute_Handle,
                                             uint16_t Offset,
                                             uint8_t Data_Length,
                                             uint8_t Data[]))
{
 800b1ec:	b5b0      	push	{r4, r5, r7, lr}
 800b1ee:	b082      	sub	sp, #8
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	0005      	movs	r5, r0
 800b1f4:	000c      	movs	r4, r1
 800b1f6:	0010      	movs	r0, r2
 800b1f8:	0019      	movs	r1, r3
 800b1fa:	1dbb      	adds	r3, r7, #6
 800b1fc:	1c2a      	adds	r2, r5, #0
 800b1fe:	801a      	strh	r2, [r3, #0]
 800b200:	1d3b      	adds	r3, r7, #4
 800b202:	1c22      	adds	r2, r4, #0
 800b204:	801a      	strh	r2, [r3, #0]
 800b206:	1cbb      	adds	r3, r7, #2
 800b208:	1c02      	adds	r2, r0, #0
 800b20a:	801a      	strh	r2, [r3, #0]
 800b20c:	1c7b      	adds	r3, r7, #1
 800b20e:	1c0a      	adds	r2, r1, #0
 800b210:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_prepare_write_permit_req_event\r\n");
 800b212:	4b04      	ldr	r3, [pc, #16]	; (800b224 <aci_gatt_prepare_write_permit_req_event+0x38>)
 800b214:	0018      	movs	r0, r3
 800b216:	f003 f8c9 	bl	800e3ac <puts>
}
 800b21a:	46c0      	nop			; (mov r8, r8)
 800b21c:	46bd      	mov	sp, r7
 800b21e:	b002      	add	sp, #8
 800b220:	bdb0      	pop	{r4, r5, r7, pc}
 800b222:	46c0      	nop			; (mov r8, r8)
 800b224:	08010fe4 	.word	0x08010fe4

0800b228 <aci_l2cap_connection_update_resp_event>:
  * @param Result 
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_connection_update_resp_event(uint16_t Connection_Handle,
                                            uint16_t Result))
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b082      	sub	sp, #8
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	0002      	movs	r2, r0
 800b230:	1dbb      	adds	r3, r7, #6
 800b232:	801a      	strh	r2, [r3, #0]
 800b234:	1d3b      	adds	r3, r7, #4
 800b236:	1c0a      	adds	r2, r1, #0
 800b238:	801a      	strh	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_resp_event\r\n");
 800b23a:	4b04      	ldr	r3, [pc, #16]	; (800b24c <aci_l2cap_connection_update_resp_event+0x24>)
 800b23c:	0018      	movs	r0, r3
 800b23e:	f003 f8b5 	bl	800e3ac <puts>
}
 800b242:	46c0      	nop			; (mov r8, r8)
 800b244:	46bd      	mov	sp, r7
 800b246:	b002      	add	sp, #8
 800b248:	bd80      	pop	{r7, pc}
 800b24a:	46c0      	nop			; (mov r8, r8)
 800b24c:	08011010 	.word	0x08011010

0800b250 <aci_l2cap_proc_timeout_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_proc_timeout_event(uint16_t Connection_Handle,
                                  uint8_t Data_Length,
                                  uint8_t Data[]))
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b082      	sub	sp, #8
 800b254:	af00      	add	r7, sp, #0
 800b256:	603a      	str	r2, [r7, #0]
 800b258:	1dbb      	adds	r3, r7, #6
 800b25a:	1c02      	adds	r2, r0, #0
 800b25c:	801a      	strh	r2, [r3, #0]
 800b25e:	1d7b      	adds	r3, r7, #5
 800b260:	1c0a      	adds	r2, r1, #0
 800b262:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_proc_timeout_event\r\n");
 800b264:	4b03      	ldr	r3, [pc, #12]	; (800b274 <aci_l2cap_proc_timeout_event+0x24>)
 800b266:	0018      	movs	r0, r3
 800b268:	f003 f8a0 	bl	800e3ac <puts>
}
 800b26c:	46c0      	nop			; (mov r8, r8)
 800b26e:	46bd      	mov	sp, r7
 800b270:	b002      	add	sp, #8
 800b272:	bd80      	pop	{r7, pc}
 800b274:	08011038 	.word	0x08011038

0800b278 <aci_l2cap_connection_update_req_event>:
                                           uint16_t L2CAP_Length,
                                           uint16_t Interval_Min,
                                           uint16_t Interval_Max,
                                           uint16_t Slave_Latency,
                                           uint16_t Timeout_Multiplier))
{
 800b278:	b5b0      	push	{r4, r5, r7, lr}
 800b27a:	b082      	sub	sp, #8
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	0005      	movs	r5, r0
 800b280:	000c      	movs	r4, r1
 800b282:	0010      	movs	r0, r2
 800b284:	0019      	movs	r1, r3
 800b286:	1dbb      	adds	r3, r7, #6
 800b288:	1c2a      	adds	r2, r5, #0
 800b28a:	801a      	strh	r2, [r3, #0]
 800b28c:	1d7b      	adds	r3, r7, #5
 800b28e:	1c22      	adds	r2, r4, #0
 800b290:	701a      	strb	r2, [r3, #0]
 800b292:	1cbb      	adds	r3, r7, #2
 800b294:	1c02      	adds	r2, r0, #0
 800b296:	801a      	strh	r2, [r3, #0]
 800b298:	003b      	movs	r3, r7
 800b29a:	1c0a      	adds	r2, r1, #0
 800b29c:	801a      	strh	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_req_event\r\n");
 800b29e:	4b04      	ldr	r3, [pc, #16]	; (800b2b0 <aci_l2cap_connection_update_req_event+0x38>)
 800b2a0:	0018      	movs	r0, r3
 800b2a2:	f003 f883 	bl	800e3ac <puts>
}
 800b2a6:	46c0      	nop			; (mov r8, r8)
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	b002      	add	sp, #8
 800b2ac:	bdb0      	pop	{r4, r5, r7, pc}
 800b2ae:	46c0      	nop			; (mov r8, r8)
 800b2b0:	08011058 	.word	0x08011058

0800b2b4 <aci_l2cap_command_reject_event>:
WEAK_FUNCTION(void aci_l2cap_command_reject_event(uint16_t Connection_Handle,
                                    uint8_t Identifier,
                                    uint16_t Reason,
                                    uint8_t Data_Length,
                                    uint8_t Data[]))
{
 800b2b4:	b5b0      	push	{r4, r5, r7, lr}
 800b2b6:	b082      	sub	sp, #8
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	0005      	movs	r5, r0
 800b2bc:	000c      	movs	r4, r1
 800b2be:	0010      	movs	r0, r2
 800b2c0:	0019      	movs	r1, r3
 800b2c2:	1dbb      	adds	r3, r7, #6
 800b2c4:	1c2a      	adds	r2, r5, #0
 800b2c6:	801a      	strh	r2, [r3, #0]
 800b2c8:	1d7b      	adds	r3, r7, #5
 800b2ca:	1c22      	adds	r2, r4, #0
 800b2cc:	701a      	strb	r2, [r3, #0]
 800b2ce:	1cbb      	adds	r3, r7, #2
 800b2d0:	1c02      	adds	r2, r0, #0
 800b2d2:	801a      	strh	r2, [r3, #0]
 800b2d4:	1d3b      	adds	r3, r7, #4
 800b2d6:	1c0a      	adds	r2, r1, #0
 800b2d8:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_command_reject_event\r\n");
 800b2da:	4b04      	ldr	r3, [pc, #16]	; (800b2ec <aci_l2cap_command_reject_event+0x38>)
 800b2dc:	0018      	movs	r0, r3
 800b2de:	f003 f865 	bl	800e3ac <puts>
}
 800b2e2:	46c0      	nop			; (mov r8, r8)
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	b002      	add	sp, #8
 800b2e8:	bdb0      	pop	{r4, r5, r7, pc}
 800b2ea:	46c0      	nop			; (mov r8, r8)
 800b2ec:	08011080 	.word	0x08011080

0800b2f0 <aci_blue_initialized_event>:
  - 0x08: System reset due to crash
  - 0x09: System reset due to ECC error
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_initialized_event(uint8_t Reason_Code))
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b082      	sub	sp, #8
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	0002      	movs	r2, r0
 800b2f8:	1dfb      	adds	r3, r7, #7
 800b2fa:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_initialized_event Reason_Code=%x\r\n",Reason_Code);
 800b2fc:	1dfb      	adds	r3, r7, #7
 800b2fe:	781a      	ldrb	r2, [r3, #0]
 800b300:	4b04      	ldr	r3, [pc, #16]	; (800b314 <aci_blue_initialized_event+0x24>)
 800b302:	0011      	movs	r1, r2
 800b304:	0018      	movs	r0, r3
 800b306:	f002 ffe1 	bl	800e2cc <iprintf>
}
 800b30a:	46c0      	nop			; (mov r8, r8)
 800b30c:	46bd      	mov	sp, r7
 800b30e:	b002      	add	sp, #8
 800b310:	bd80      	pop	{r7, pc}
 800b312:	46c0      	nop			; (mov r8, r8)
 800b314:	080110a0 	.word	0x080110a0

0800b318 <aci_blue_events_lost_event>:
  - 0x0040000000000000: ACI_GAP_NUMERIC_COMPARISON_VALUE_EVENT
  - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_events_lost_event(uint8_t Lost_Events[8]))
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b082      	sub	sp, #8
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_events_lost_event\r\n");
 800b320:	4b03      	ldr	r3, [pc, #12]	; (800b330 <aci_blue_events_lost_event+0x18>)
 800b322:	0018      	movs	r0, r3
 800b324:	f003 f842 	bl	800e3ac <puts>
}
 800b328:	46c0      	nop			; (mov r8, r8)
 800b32a:	46bd      	mov	sp, r7
 800b32c:	b002      	add	sp, #8
 800b32e:	bd80      	pop	{r7, pc}
 800b330:	080110cc 	.word	0x080110cc

0800b334 <aci_blue_crash_info_event>:
                               uint32_t LR,
                               uint32_t PC,
                               uint32_t xPSR,
                               uint8_t Debug_Data_Length,
                               uint8_t Debug_Data[]))
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b084      	sub	sp, #16
 800b338:	af00      	add	r7, sp, #0
 800b33a:	60b9      	str	r1, [r7, #8]
 800b33c:	607a      	str	r2, [r7, #4]
 800b33e:	603b      	str	r3, [r7, #0]
 800b340:	230f      	movs	r3, #15
 800b342:	18fb      	adds	r3, r7, r3
 800b344:	1c02      	adds	r2, r0, #0
 800b346:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_crash_info_event\r\n");
 800b348:	4b03      	ldr	r3, [pc, #12]	; (800b358 <aci_blue_crash_info_event+0x24>)
 800b34a:	0018      	movs	r0, r3
 800b34c:	f003 f82e 	bl	800e3ac <puts>
}
 800b350:	46c0      	nop			; (mov r8, r8)
 800b352:	46bd      	mov	sp, r7
 800b354:	b004      	add	sp, #16
 800b356:	bd80      	pop	{r7, pc}
 800b358:	080110e8 	.word	0x080110e8

0800b35c <aci_hal_end_of_radio_activity_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_end_of_radio_activity_event(uint8_t Last_State,
                                         uint8_t Next_State,
                                         uint32_t Next_State_SysTime))
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b082      	sub	sp, #8
 800b360:	af00      	add	r7, sp, #0
 800b362:	603a      	str	r2, [r7, #0]
 800b364:	1dfb      	adds	r3, r7, #7
 800b366:	1c02      	adds	r2, r0, #0
 800b368:	701a      	strb	r2, [r3, #0]
 800b36a:	1dbb      	adds	r3, r7, #6
 800b36c:	1c0a      	adds	r2, r1, #0
 800b36e:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_end_of_radio_activity_event\r\n");
 800b370:	4b03      	ldr	r3, [pc, #12]	; (800b380 <aci_hal_end_of_radio_activity_event+0x24>)
 800b372:	0018      	movs	r0, r3
 800b374:	f003 f81a 	bl	800e3ac <puts>
}
 800b378:	46c0      	nop			; (mov r8, r8)
 800b37a:	46bd      	mov	sp, r7
 800b37c:	b002      	add	sp, #8
 800b37e:	bd80      	pop	{r7, pc}
 800b380:	08011104 	.word	0x08011104

0800b384 <aci_hal_scan_req_report_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_scan_req_report_event(int8_t RSSI,
                                   uint8_t Peer_Address_Type,
                                   uint8_t Peer_Address[6]))
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b082      	sub	sp, #8
 800b388:	af00      	add	r7, sp, #0
 800b38a:	603a      	str	r2, [r7, #0]
 800b38c:	1dfb      	adds	r3, r7, #7
 800b38e:	1c02      	adds	r2, r0, #0
 800b390:	701a      	strb	r2, [r3, #0]
 800b392:	1dbb      	adds	r3, r7, #6
 800b394:	1c0a      	adds	r2, r1, #0
 800b396:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_scan_req_report_event\r\n");
 800b398:	4b03      	ldr	r3, [pc, #12]	; (800b3a8 <aci_hal_scan_req_report_event+0x24>)
 800b39a:	0018      	movs	r0, r3
 800b39c:	f003 f806 	bl	800e3ac <puts>
}
 800b3a0:	46c0      	nop			; (mov r8, r8)
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	b002      	add	sp, #8
 800b3a6:	bd80      	pop	{r7, pc}
 800b3a8:	0801112c 	.word	0x0801112c

0800b3ac <aci_hal_fw_error_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_fw_error_event(uint8_t FW_Error_Type,
                            uint8_t Data_Length,
                            uint8_t Data[]))
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b082      	sub	sp, #8
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	603a      	str	r2, [r7, #0]
 800b3b4:	1dfb      	adds	r3, r7, #7
 800b3b6:	1c02      	adds	r2, r0, #0
 800b3b8:	701a      	strb	r2, [r3, #0]
 800b3ba:	1dbb      	adds	r3, r7, #6
 800b3bc:	1c0a      	adds	r2, r1, #0
 800b3be:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_fw_error_event\r\n");
 800b3c0:	4b03      	ldr	r3, [pc, #12]	; (800b3d0 <aci_hal_fw_error_event+0x24>)
 800b3c2:	0018      	movs	r0, r3
 800b3c4:	f002 fff2 	bl	800e3ac <puts>
}
 800b3c8:	46c0      	nop			; (mov r8, r8)
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	b002      	add	sp, #8
 800b3ce:	bd80      	pop	{r7, pc}
 800b3d0:	0801114c 	.word	0x0801114c

0800b3d4 <hci_reset>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_reset(void)
{
 800b3d4:	b590      	push	{r4, r7, lr}
 800b3d6:	b089      	sub	sp, #36	; 0x24
 800b3d8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800b3da:	1dfb      	adds	r3, r7, #7
 800b3dc:	2200      	movs	r2, #0
 800b3de:	701a      	strb	r2, [r3, #0]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800b3e0:	2408      	movs	r4, #8
 800b3e2:	193b      	adds	r3, r7, r4
 800b3e4:	2218      	movs	r2, #24
 800b3e6:	2100      	movs	r1, #0
 800b3e8:	0018      	movs	r0, r3
 800b3ea:	f003 f8e9 	bl	800e5c0 <memset>
  rq.ogf = 0x03;
 800b3ee:	0021      	movs	r1, r4
 800b3f0:	187b      	adds	r3, r7, r1
 800b3f2:	2203      	movs	r2, #3
 800b3f4:	801a      	strh	r2, [r3, #0]
  rq.ocf = 0x003;
 800b3f6:	187b      	adds	r3, r7, r1
 800b3f8:	2203      	movs	r2, #3
 800b3fa:	805a      	strh	r2, [r3, #2]
  rq.rparam = &status;
 800b3fc:	187b      	adds	r3, r7, r1
 800b3fe:	1dfa      	adds	r2, r7, #7
 800b400:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 800b402:	187b      	adds	r3, r7, r1
 800b404:	2201      	movs	r2, #1
 800b406:	615a      	str	r2, [r3, #20]
  if (hci_send_req(&rq, FALSE) < 0)
 800b408:	187b      	adds	r3, r7, r1
 800b40a:	2100      	movs	r1, #0
 800b40c:	0018      	movs	r0, r3
 800b40e:	f001 fe8b 	bl	800d128 <hci_send_req>
 800b412:	1e03      	subs	r3, r0, #0
 800b414:	da01      	bge.n	800b41a <hci_reset+0x46>
    return BLE_STATUS_TIMEOUT;
 800b416:	23ff      	movs	r3, #255	; 0xff
 800b418:	e007      	b.n	800b42a <hci_reset+0x56>
  if (status) {
 800b41a:	1dfb      	adds	r3, r7, #7
 800b41c:	781b      	ldrb	r3, [r3, #0]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d002      	beq.n	800b428 <hci_reset+0x54>
    return status;
 800b422:	1dfb      	adds	r3, r7, #7
 800b424:	781b      	ldrb	r3, [r3, #0]
 800b426:	e000      	b.n	800b42a <hci_reset+0x56>
  }
  return BLE_STATUS_SUCCESS;
 800b428:	2300      	movs	r3, #0
}
 800b42a:	0018      	movs	r0, r3
 800b42c:	46bd      	mov	sp, r7
 800b42e:	b009      	add	sp, #36	; 0x24
 800b430:	bd90      	pop	{r4, r7, pc}
	...

0800b434 <hci_le_set_scan_response_data>:
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_le_set_scan_response_data(uint8_t Scan_Response_Data_Length,
                                         uint8_t Scan_Response_Data[31])
{
 800b434:	b5b0      	push	{r4, r5, r7, lr}
 800b436:	b0cc      	sub	sp, #304	; 0x130
 800b438:	af00      	add	r7, sp, #0
 800b43a:	0002      	movs	r2, r0
 800b43c:	6039      	str	r1, [r7, #0]
 800b43e:	4b36      	ldr	r3, [pc, #216]	; (800b518 <hci_le_set_scan_response_data+0xe4>)
 800b440:	2198      	movs	r1, #152	; 0x98
 800b442:	0049      	lsls	r1, r1, #1
 800b444:	185b      	adds	r3, r3, r1
 800b446:	19db      	adds	r3, r3, r7
 800b448:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  hci_le_set_scan_response_data_cp0 *cp0 = (hci_le_set_scan_response_data_cp0*)(cmd_buffer);
 800b44a:	230c      	movs	r3, #12
 800b44c:	18fb      	adds	r3, r7, r3
 800b44e:	2096      	movs	r0, #150	; 0x96
 800b450:	0040      	lsls	r0, r0, #1
 800b452:	183a      	adds	r2, r7, r0
 800b454:	6013      	str	r3, [r2, #0]
  tBleStatus status = 0;
 800b456:	4b31      	ldr	r3, [pc, #196]	; (800b51c <hci_le_set_scan_response_data+0xe8>)
 800b458:	185b      	adds	r3, r3, r1
 800b45a:	19db      	adds	r3, r3, r7
 800b45c:	2200      	movs	r2, #0
 800b45e:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800b460:	242c      	movs	r4, #44	; 0x2c
 800b462:	34ff      	adds	r4, #255	; 0xff
 800b464:	193b      	adds	r3, r7, r4
 800b466:	2200      	movs	r2, #0
 800b468:	701a      	strb	r2, [r3, #0]
  cp0->Scan_Response_Data_Length = htob(Scan_Response_Data_Length, 1);
 800b46a:	183b      	adds	r3, r7, r0
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	4a2a      	ldr	r2, [pc, #168]	; (800b518 <hci_le_set_scan_response_data+0xe4>)
 800b470:	1852      	adds	r2, r2, r1
 800b472:	19d2      	adds	r2, r2, r7
 800b474:	7812      	ldrb	r2, [r2, #0]
 800b476:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b478:	193b      	adds	r3, r7, r4
 800b47a:	193a      	adds	r2, r7, r4
 800b47c:	7812      	ldrb	r2, [r2, #0]
 800b47e:	3201      	adds	r2, #1
 800b480:	701a      	strb	r2, [r3, #0]
  /* FIX: check on Scan_Response_Data introduced to fix issue in projects for Cortex-M33 */
  if (Scan_Response_Data != NULL) {
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d007      	beq.n	800b498 <hci_le_set_scan_response_data+0x64>
    BLUENRG_memcpy((void *) &cp0->Scan_Response_Data, (const void *) Scan_Response_Data, 31);
 800b488:	183b      	adds	r3, r7, r0
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	3301      	adds	r3, #1
 800b48e:	6839      	ldr	r1, [r7, #0]
 800b490:	221f      	movs	r2, #31
 800b492:	0018      	movs	r0, r3
 800b494:	f003 f926 	bl	800e6e4 <memcpy>
  }
  index_input += 31;
 800b498:	252c      	movs	r5, #44	; 0x2c
 800b49a:	35ff      	adds	r5, #255	; 0xff
 800b49c:	197b      	adds	r3, r7, r5
 800b49e:	197a      	adds	r2, r7, r5
 800b4a0:	7812      	ldrb	r2, [r2, #0]
 800b4a2:	321f      	adds	r2, #31
 800b4a4:	701a      	strb	r2, [r3, #0]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800b4a6:	2488      	movs	r4, #136	; 0x88
 800b4a8:	0064      	lsls	r4, r4, #1
 800b4aa:	193b      	adds	r3, r7, r4
 800b4ac:	2218      	movs	r2, #24
 800b4ae:	2100      	movs	r1, #0
 800b4b0:	0018      	movs	r0, r3
 800b4b2:	f003 f885 	bl	800e5c0 <memset>
  rq.ogf = 0x08;
 800b4b6:	0021      	movs	r1, r4
 800b4b8:	187b      	adds	r3, r7, r1
 800b4ba:	2208      	movs	r2, #8
 800b4bc:	801a      	strh	r2, [r3, #0]
  rq.ocf = 0x009;
 800b4be:	187b      	adds	r3, r7, r1
 800b4c0:	2209      	movs	r2, #9
 800b4c2:	805a      	strh	r2, [r3, #2]
  rq.cparam = cmd_buffer;
 800b4c4:	187b      	adds	r3, r7, r1
 800b4c6:	220c      	movs	r2, #12
 800b4c8:	18ba      	adds	r2, r7, r2
 800b4ca:	609a      	str	r2, [r3, #8]
  rq.clen = index_input;
 800b4cc:	197b      	adds	r3, r7, r5
 800b4ce:	781a      	ldrb	r2, [r3, #0]
 800b4d0:	187b      	adds	r3, r7, r1
 800b4d2:	60da      	str	r2, [r3, #12]
  rq.rparam = &status;
 800b4d4:	187b      	adds	r3, r7, r1
 800b4d6:	220b      	movs	r2, #11
 800b4d8:	18ba      	adds	r2, r7, r2
 800b4da:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 800b4dc:	187b      	adds	r3, r7, r1
 800b4de:	2201      	movs	r2, #1
 800b4e0:	615a      	str	r2, [r3, #20]
  if (hci_send_req(&rq, FALSE) < 0)
 800b4e2:	187b      	adds	r3, r7, r1
 800b4e4:	2100      	movs	r1, #0
 800b4e6:	0018      	movs	r0, r3
 800b4e8:	f001 fe1e 	bl	800d128 <hci_send_req>
 800b4ec:	1e03      	subs	r3, r0, #0
 800b4ee:	da01      	bge.n	800b4f4 <hci_le_set_scan_response_data+0xc0>
    return BLE_STATUS_TIMEOUT;
 800b4f0:	23ff      	movs	r3, #255	; 0xff
 800b4f2:	e00d      	b.n	800b510 <hci_le_set_scan_response_data+0xdc>
  if (status) {
 800b4f4:	4b09      	ldr	r3, [pc, #36]	; (800b51c <hci_le_set_scan_response_data+0xe8>)
 800b4f6:	2298      	movs	r2, #152	; 0x98
 800b4f8:	0052      	lsls	r2, r2, #1
 800b4fa:	189b      	adds	r3, r3, r2
 800b4fc:	19db      	adds	r3, r3, r7
 800b4fe:	781b      	ldrb	r3, [r3, #0]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d004      	beq.n	800b50e <hci_le_set_scan_response_data+0xda>
    return status;
 800b504:	4b05      	ldr	r3, [pc, #20]	; (800b51c <hci_le_set_scan_response_data+0xe8>)
 800b506:	189b      	adds	r3, r3, r2
 800b508:	19db      	adds	r3, r3, r7
 800b50a:	781b      	ldrb	r3, [r3, #0]
 800b50c:	e000      	b.n	800b510 <hci_le_set_scan_response_data+0xdc>
  }
  return BLE_STATUS_SUCCESS;
 800b50e:	2300      	movs	r3, #0
}
 800b510:	0018      	movs	r0, r3
 800b512:	46bd      	mov	sp, r7
 800b514:	b04c      	add	sp, #304	; 0x130
 800b516:	bdb0      	pop	{r4, r5, r7, pc}
 800b518:	fffffed7 	.word	0xfffffed7
 800b51c:	fffffedb 	.word	0xfffffedb

0800b520 <hci_le_rand>:
  }
  BLUENRG_memcpy((void *) Encrypted_Data, (const void *) resp.Encrypted_Data, 16);
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_le_rand(uint8_t Random_Number[8])
{
 800b520:	b5b0      	push	{r4, r5, r7, lr}
 800b522:	b08c      	sub	sp, #48	; 0x30
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
  struct hci_request rq;
  hci_le_rand_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800b528:	250c      	movs	r5, #12
 800b52a:	197b      	adds	r3, r7, r5
 800b52c:	2209      	movs	r2, #9
 800b52e:	2100      	movs	r1, #0
 800b530:	0018      	movs	r0, r3
 800b532:	f003 f845 	bl	800e5c0 <memset>
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800b536:	2418      	movs	r4, #24
 800b538:	193b      	adds	r3, r7, r4
 800b53a:	2218      	movs	r2, #24
 800b53c:	2100      	movs	r1, #0
 800b53e:	0018      	movs	r0, r3
 800b540:	f003 f83e 	bl	800e5c0 <memset>
  rq.ogf = 0x08;
 800b544:	0021      	movs	r1, r4
 800b546:	187b      	adds	r3, r7, r1
 800b548:	2208      	movs	r2, #8
 800b54a:	801a      	strh	r2, [r3, #0]
  rq.ocf = 0x018;
 800b54c:	187b      	adds	r3, r7, r1
 800b54e:	2218      	movs	r2, #24
 800b550:	805a      	strh	r2, [r3, #2]
  rq.rparam = &resp;
 800b552:	187b      	adds	r3, r7, r1
 800b554:	197a      	adds	r2, r7, r5
 800b556:	611a      	str	r2, [r3, #16]
  rq.rlen = sizeof(resp);
 800b558:	187b      	adds	r3, r7, r1
 800b55a:	2209      	movs	r2, #9
 800b55c:	615a      	str	r2, [r3, #20]
  if (hci_send_req(&rq, FALSE) < 0)
 800b55e:	187b      	adds	r3, r7, r1
 800b560:	2100      	movs	r1, #0
 800b562:	0018      	movs	r0, r3
 800b564:	f001 fde0 	bl	800d128 <hci_send_req>
 800b568:	1e03      	subs	r3, r0, #0
 800b56a:	da01      	bge.n	800b570 <hci_le_rand+0x50>
    return BLE_STATUS_TIMEOUT;
 800b56c:	23ff      	movs	r3, #255	; 0xff
 800b56e:	e012      	b.n	800b596 <hci_le_rand+0x76>
  if (resp.Status) {
 800b570:	220c      	movs	r2, #12
 800b572:	18bb      	adds	r3, r7, r2
 800b574:	781b      	ldrb	r3, [r3, #0]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d002      	beq.n	800b580 <hci_le_rand+0x60>
    return resp.Status;
 800b57a:	18bb      	adds	r3, r7, r2
 800b57c:	781b      	ldrb	r3, [r3, #0]
 800b57e:	e00a      	b.n	800b596 <hci_le_rand+0x76>
  }
  BLUENRG_memcpy((void *) Random_Number, (const void *) resp.Random_Number, 8);
 800b580:	6879      	ldr	r1, [r7, #4]
 800b582:	230c      	movs	r3, #12
 800b584:	18fb      	adds	r3, r7, r3
 800b586:	2201      	movs	r2, #1
 800b588:	0008      	movs	r0, r1
 800b58a:	189b      	adds	r3, r3, r2
 800b58c:	2208      	movs	r2, #8
 800b58e:	0019      	movs	r1, r3
 800b590:	f003 f8a8 	bl	800e6e4 <memcpy>
  return BLE_STATUS_SUCCESS;
 800b594:	2300      	movs	r3, #0
}
 800b596:	0018      	movs	r0, r3
 800b598:	46bd      	mov	sp, r7
 800b59a:	b00c      	add	sp, #48	; 0x30
 800b59c:	bdb0      	pop	{r4, r5, r7, pc}

0800b59e <aci_gap_set_non_discoverable>:
  ******************************************************************************
  */
#include "ble_types.h"
#include "bluenrg1_gap_aci.h"
tBleStatus aci_gap_set_non_discoverable(void)
{
 800b59e:	b590      	push	{r4, r7, lr}
 800b5a0:	b089      	sub	sp, #36	; 0x24
 800b5a2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800b5a4:	1dfb      	adds	r3, r7, #7
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	701a      	strb	r2, [r3, #0]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800b5aa:	2408      	movs	r4, #8
 800b5ac:	193b      	adds	r3, r7, r4
 800b5ae:	2218      	movs	r2, #24
 800b5b0:	2100      	movs	r1, #0
 800b5b2:	0018      	movs	r0, r3
 800b5b4:	f003 f804 	bl	800e5c0 <memset>
  rq.ogf = 0x3f;
 800b5b8:	0021      	movs	r1, r4
 800b5ba:	187b      	adds	r3, r7, r1
 800b5bc:	223f      	movs	r2, #63	; 0x3f
 800b5be:	801a      	strh	r2, [r3, #0]
  rq.ocf = 0x081;
 800b5c0:	187b      	adds	r3, r7, r1
 800b5c2:	2281      	movs	r2, #129	; 0x81
 800b5c4:	805a      	strh	r2, [r3, #2]
  rq.rparam = &status;
 800b5c6:	187b      	adds	r3, r7, r1
 800b5c8:	1dfa      	adds	r2, r7, #7
 800b5ca:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 800b5cc:	187b      	adds	r3, r7, r1
 800b5ce:	2201      	movs	r2, #1
 800b5d0:	615a      	str	r2, [r3, #20]
  if (hci_send_req(&rq, FALSE) < 0)
 800b5d2:	187b      	adds	r3, r7, r1
 800b5d4:	2100      	movs	r1, #0
 800b5d6:	0018      	movs	r0, r3
 800b5d8:	f001 fda6 	bl	800d128 <hci_send_req>
 800b5dc:	1e03      	subs	r3, r0, #0
 800b5de:	da01      	bge.n	800b5e4 <aci_gap_set_non_discoverable+0x46>
    return BLE_STATUS_TIMEOUT;
 800b5e0:	23ff      	movs	r3, #255	; 0xff
 800b5e2:	e007      	b.n	800b5f4 <aci_gap_set_non_discoverable+0x56>
  if (status) {
 800b5e4:	1dfb      	adds	r3, r7, #7
 800b5e6:	781b      	ldrb	r3, [r3, #0]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d002      	beq.n	800b5f2 <aci_gap_set_non_discoverable+0x54>
    return status;
 800b5ec:	1dfb      	adds	r3, r7, #7
 800b5ee:	781b      	ldrb	r3, [r3, #0]
 800b5f0:	e000      	b.n	800b5f4 <aci_gap_set_non_discoverable+0x56>
  }
  return BLE_STATUS_SUCCESS;
 800b5f2:	2300      	movs	r3, #0
}
 800b5f4:	0018      	movs	r0, r3
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	b009      	add	sp, #36	; 0x24
 800b5fa:	bd90      	pop	{r4, r7, pc}

0800b5fc <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 800b5fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5fe:	b0cf      	sub	sp, #316	; 0x13c
 800b600:	af00      	add	r7, sp, #0
 800b602:	0005      	movs	r5, r0
 800b604:	000c      	movs	r4, r1
 800b606:	0010      	movs	r0, r2
 800b608:	0019      	movs	r1, r3
 800b60a:	4bb4      	ldr	r3, [pc, #720]	; (800b8dc <aci_gap_set_discoverable+0x2e0>)
 800b60c:	269c      	movs	r6, #156	; 0x9c
 800b60e:	0076      	lsls	r6, r6, #1
 800b610:	199b      	adds	r3, r3, r6
 800b612:	19db      	adds	r3, r3, r7
 800b614:	1c2a      	adds	r2, r5, #0
 800b616:	701a      	strb	r2, [r3, #0]
 800b618:	4bb1      	ldr	r3, [pc, #708]	; (800b8e0 <aci_gap_set_discoverable+0x2e4>)
 800b61a:	0035      	movs	r5, r6
 800b61c:	195b      	adds	r3, r3, r5
 800b61e:	19db      	adds	r3, r3, r7
 800b620:	1c22      	adds	r2, r4, #0
 800b622:	801a      	strh	r2, [r3, #0]
 800b624:	4baf      	ldr	r3, [pc, #700]	; (800b8e4 <aci_gap_set_discoverable+0x2e8>)
 800b626:	002c      	movs	r4, r5
 800b628:	191b      	adds	r3, r3, r4
 800b62a:	19db      	adds	r3, r3, r7
 800b62c:	1c02      	adds	r2, r0, #0
 800b62e:	801a      	strh	r2, [r3, #0]
 800b630:	4bad      	ldr	r3, [pc, #692]	; (800b8e8 <aci_gap_set_discoverable+0x2ec>)
 800b632:	0020      	movs	r0, r4
 800b634:	181b      	adds	r3, r3, r0
 800b636:	19db      	adds	r3, r3, r7
 800b638:	1c0a      	adds	r2, r1, #0
 800b63a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800b63c:	240c      	movs	r4, #12
 800b63e:	193b      	adds	r3, r7, r4
 800b640:	219a      	movs	r1, #154	; 0x9a
 800b642:	0049      	lsls	r1, r1, #1
 800b644:	187a      	adds	r2, r7, r1
 800b646:	6013      	str	r3, [r2, #0]
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800b648:	25a6      	movs	r5, #166	; 0xa6
 800b64a:	006d      	lsls	r5, r5, #1
 800b64c:	2608      	movs	r6, #8
 800b64e:	19ab      	adds	r3, r5, r6
 800b650:	19db      	adds	r3, r3, r7
 800b652:	781b      	ldrb	r3, [r3, #0]
 800b654:	3308      	adds	r3, #8
 800b656:	193a      	adds	r2, r7, r4
 800b658:	18d3      	adds	r3, r2, r3
 800b65a:	2298      	movs	r2, #152	; 0x98
 800b65c:	0052      	lsls	r2, r2, #1
 800b65e:	18be      	adds	r6, r7, r2
 800b660:	6033      	str	r3, [r6, #0]
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800b662:	2608      	movs	r6, #8
 800b664:	19ab      	adds	r3, r5, r6
 800b666:	19db      	adds	r3, r3, r7
 800b668:	781a      	ldrb	r2, [r3, #0]
 800b66a:	23aa      	movs	r3, #170	; 0xaa
 800b66c:	005b      	lsls	r3, r3, #1
 800b66e:	199b      	adds	r3, r3, r6
 800b670:	19db      	adds	r3, r3, r7
 800b672:	781b      	ldrb	r3, [r3, #0]
 800b674:	18d3      	adds	r3, r2, r3
 800b676:	3309      	adds	r3, #9
 800b678:	193a      	adds	r2, r7, r4
 800b67a:	18d3      	adds	r3, r2, r3
 800b67c:	2696      	movs	r6, #150	; 0x96
 800b67e:	0076      	lsls	r6, r6, #1
 800b680:	19ba      	adds	r2, r7, r6
 800b682:	6013      	str	r3, [r2, #0]
  tBleStatus status = 0;
 800b684:	4b99      	ldr	r3, [pc, #612]	; (800b8ec <aci_gap_set_discoverable+0x2f0>)
 800b686:	0006      	movs	r6, r0
 800b688:	199b      	adds	r3, r3, r6
 800b68a:	19db      	adds	r3, r3, r7
 800b68c:	2200      	movs	r2, #0
 800b68e:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800b690:	252c      	movs	r5, #44	; 0x2c
 800b692:	35ff      	adds	r5, #255	; 0xff
 800b694:	197b      	adds	r3, r7, r5
 800b696:	2200      	movs	r2, #0
 800b698:	701a      	strb	r2, [r3, #0]
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 800b69a:	187b      	adds	r3, r7, r1
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	4a8f      	ldr	r2, [pc, #572]	; (800b8dc <aci_gap_set_discoverable+0x2e0>)
 800b6a0:	1992      	adds	r2, r2, r6
 800b6a2:	19d2      	adds	r2, r2, r7
 800b6a4:	7812      	ldrb	r2, [r2, #0]
 800b6a6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b6a8:	197b      	adds	r3, r7, r5
 800b6aa:	197a      	adds	r2, r7, r5
 800b6ac:	7812      	ldrb	r2, [r2, #0]
 800b6ae:	3201      	adds	r2, #1
 800b6b0:	701a      	strb	r2, [r3, #0]
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 800b6b2:	187b      	adds	r3, r7, r1
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	4a8a      	ldr	r2, [pc, #552]	; (800b8e0 <aci_gap_set_discoverable+0x2e4>)
 800b6b8:	1992      	adds	r2, r2, r6
 800b6ba:	19d2      	adds	r2, r2, r7
 800b6bc:	3301      	adds	r3, #1
 800b6be:	7814      	ldrb	r4, [r2, #0]
 800b6c0:	7819      	ldrb	r1, [r3, #0]
 800b6c2:	2000      	movs	r0, #0
 800b6c4:	4001      	ands	r1, r0
 800b6c6:	1c08      	adds	r0, r1, #0
 800b6c8:	1c21      	adds	r1, r4, #0
 800b6ca:	4301      	orrs	r1, r0
 800b6cc:	7019      	strb	r1, [r3, #0]
 800b6ce:	7850      	ldrb	r0, [r2, #1]
 800b6d0:	785a      	ldrb	r2, [r3, #1]
 800b6d2:	2100      	movs	r1, #0
 800b6d4:	400a      	ands	r2, r1
 800b6d6:	1c11      	adds	r1, r2, #0
 800b6d8:	1c02      	adds	r2, r0, #0
 800b6da:	430a      	orrs	r2, r1
 800b6dc:	705a      	strb	r2, [r3, #1]
  index_input += 2;
 800b6de:	197b      	adds	r3, r7, r5
 800b6e0:	197a      	adds	r2, r7, r5
 800b6e2:	7812      	ldrb	r2, [r2, #0]
 800b6e4:	3202      	adds	r2, #2
 800b6e6:	701a      	strb	r2, [r3, #0]
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 800b6e8:	219a      	movs	r1, #154	; 0x9a
 800b6ea:	0049      	lsls	r1, r1, #1
 800b6ec:	187b      	adds	r3, r7, r1
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	4a7c      	ldr	r2, [pc, #496]	; (800b8e4 <aci_gap_set_discoverable+0x2e8>)
 800b6f2:	1992      	adds	r2, r2, r6
 800b6f4:	19d2      	adds	r2, r2, r7
 800b6f6:	3303      	adds	r3, #3
 800b6f8:	7814      	ldrb	r4, [r2, #0]
 800b6fa:	7819      	ldrb	r1, [r3, #0]
 800b6fc:	2000      	movs	r0, #0
 800b6fe:	4001      	ands	r1, r0
 800b700:	1c08      	adds	r0, r1, #0
 800b702:	1c21      	adds	r1, r4, #0
 800b704:	4301      	orrs	r1, r0
 800b706:	7019      	strb	r1, [r3, #0]
 800b708:	7850      	ldrb	r0, [r2, #1]
 800b70a:	785a      	ldrb	r2, [r3, #1]
 800b70c:	2100      	movs	r1, #0
 800b70e:	400a      	ands	r2, r1
 800b710:	1c11      	adds	r1, r2, #0
 800b712:	1c02      	adds	r2, r0, #0
 800b714:	430a      	orrs	r2, r1
 800b716:	705a      	strb	r2, [r3, #1]
  index_input += 2;
 800b718:	197b      	adds	r3, r7, r5
 800b71a:	197a      	adds	r2, r7, r5
 800b71c:	7812      	ldrb	r2, [r2, #0]
 800b71e:	3202      	adds	r2, #2
 800b720:	701a      	strb	r2, [r3, #0]
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 800b722:	219a      	movs	r1, #154	; 0x9a
 800b724:	0049      	lsls	r1, r1, #1
 800b726:	187b      	adds	r3, r7, r1
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	4a6f      	ldr	r2, [pc, #444]	; (800b8e8 <aci_gap_set_discoverable+0x2ec>)
 800b72c:	1992      	adds	r2, r2, r6
 800b72e:	19d2      	adds	r2, r2, r7
 800b730:	7812      	ldrb	r2, [r2, #0]
 800b732:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800b734:	002c      	movs	r4, r5
 800b736:	193b      	adds	r3, r7, r4
 800b738:	193a      	adds	r2, r7, r4
 800b73a:	7812      	ldrb	r2, [r2, #0]
 800b73c:	3201      	adds	r2, #1
 800b73e:	701a      	strb	r2, [r3, #0]
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 800b740:	187b      	adds	r3, r7, r1
 800b742:	681a      	ldr	r2, [r3, #0]
 800b744:	23a4      	movs	r3, #164	; 0xa4
 800b746:	005b      	lsls	r3, r3, #1
 800b748:	2608      	movs	r6, #8
 800b74a:	199b      	adds	r3, r3, r6
 800b74c:	19db      	adds	r3, r3, r7
 800b74e:	781b      	ldrb	r3, [r3, #0]
 800b750:	7193      	strb	r3, [r2, #6]
  index_input += 1;
 800b752:	193b      	adds	r3, r7, r4
 800b754:	193a      	adds	r2, r7, r4
 800b756:	7812      	ldrb	r2, [r2, #0]
 800b758:	3201      	adds	r2, #1
 800b75a:	701a      	strb	r2, [r3, #0]
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 800b75c:	187b      	adds	r3, r7, r1
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	25a6      	movs	r5, #166	; 0xa6
 800b762:	006d      	lsls	r5, r5, #1
 800b764:	19aa      	adds	r2, r5, r6
 800b766:	19d2      	adds	r2, r2, r7
 800b768:	7812      	ldrb	r2, [r2, #0]
 800b76a:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800b76c:	193b      	adds	r3, r7, r4
 800b76e:	193a      	adds	r2, r7, r4
 800b770:	7812      	ldrb	r2, [r2, #0]
 800b772:	3201      	adds	r2, #1
 800b774:	701a      	strb	r2, [r3, #0]
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 800b776:	187b      	adds	r3, r7, r1
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	3308      	adds	r3, #8
 800b77c:	0018      	movs	r0, r3
 800b77e:	19ab      	adds	r3, r5, r6
 800b780:	19db      	adds	r3, r3, r7
 800b782:	781a      	ldrb	r2, [r3, #0]
 800b784:	23a8      	movs	r3, #168	; 0xa8
 800b786:	005b      	lsls	r3, r3, #1
 800b788:	199b      	adds	r3, r3, r6
 800b78a:	19db      	adds	r3, r3, r7
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	0019      	movs	r1, r3
 800b790:	f002 ffa8 	bl	800e6e4 <memcpy>
    index_input += Local_Name_Length*sizeof(uint8_t);
 800b794:	193b      	adds	r3, r7, r4
 800b796:	1939      	adds	r1, r7, r4
 800b798:	19aa      	adds	r2, r5, r6
 800b79a:	19d2      	adds	r2, r2, r7
 800b79c:	7809      	ldrb	r1, [r1, #0]
 800b79e:	7812      	ldrb	r2, [r2, #0]
 800b7a0:	188a      	adds	r2, r1, r2
 800b7a2:	701a      	strb	r2, [r3, #0]
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 800b7a4:	2098      	movs	r0, #152	; 0x98
 800b7a6:	0040      	lsls	r0, r0, #1
 800b7a8:	183a      	adds	r2, r7, r0
 800b7aa:	6813      	ldr	r3, [r2, #0]
 800b7ac:	21aa      	movs	r1, #170	; 0xaa
 800b7ae:	0049      	lsls	r1, r1, #1
 800b7b0:	198a      	adds	r2, r1, r6
 800b7b2:	19d2      	adds	r2, r2, r7
 800b7b4:	7812      	ldrb	r2, [r2, #0]
 800b7b6:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800b7b8:	193b      	adds	r3, r7, r4
 800b7ba:	0025      	movs	r5, r4
 800b7bc:	193a      	adds	r2, r7, r4
 800b7be:	7812      	ldrb	r2, [r2, #0]
 800b7c0:	3201      	adds	r2, #1
 800b7c2:	701a      	strb	r2, [r3, #0]
    BLUENRG_memcpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length*sizeof(uint8_t));
 800b7c4:	183b      	adds	r3, r7, r0
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	1c58      	adds	r0, r3, #1
 800b7ca:	000e      	movs	r6, r1
 800b7cc:	2408      	movs	r4, #8
 800b7ce:	190b      	adds	r3, r1, r4
 800b7d0:	19db      	adds	r3, r3, r7
 800b7d2:	781a      	ldrb	r2, [r3, #0]
 800b7d4:	23ac      	movs	r3, #172	; 0xac
 800b7d6:	005b      	lsls	r3, r3, #1
 800b7d8:	191b      	adds	r3, r3, r4
 800b7da:	19db      	adds	r3, r3, r7
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	0019      	movs	r1, r3
 800b7e0:	f002 ff80 	bl	800e6e4 <memcpy>
    index_input += Service_Uuid_length*sizeof(uint8_t);
 800b7e4:	197b      	adds	r3, r7, r5
 800b7e6:	1979      	adds	r1, r7, r5
 800b7e8:	0020      	movs	r0, r4
 800b7ea:	1832      	adds	r2, r6, r0
 800b7ec:	19d2      	adds	r2, r2, r7
 800b7ee:	7809      	ldrb	r1, [r1, #0]
 800b7f0:	7812      	ldrb	r2, [r2, #0]
 800b7f2:	188a      	adds	r2, r1, r2
 800b7f4:	701a      	strb	r2, [r3, #0]
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 800b7f6:	2696      	movs	r6, #150	; 0x96
 800b7f8:	0076      	lsls	r6, r6, #1
 800b7fa:	19bb      	adds	r3, r7, r6
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	22ae      	movs	r2, #174	; 0xae
 800b800:	0052      	lsls	r2, r2, #1
 800b802:	1812      	adds	r2, r2, r0
 800b804:	19d2      	adds	r2, r2, r7
 800b806:	7814      	ldrb	r4, [r2, #0]
 800b808:	7819      	ldrb	r1, [r3, #0]
 800b80a:	2000      	movs	r0, #0
 800b80c:	4001      	ands	r1, r0
 800b80e:	1c08      	adds	r0, r1, #0
 800b810:	1c21      	adds	r1, r4, #0
 800b812:	4301      	orrs	r1, r0
 800b814:	7019      	strb	r1, [r3, #0]
 800b816:	7850      	ldrb	r0, [r2, #1]
 800b818:	785a      	ldrb	r2, [r3, #1]
 800b81a:	2100      	movs	r1, #0
 800b81c:	400a      	ands	r2, r1
 800b81e:	1c11      	adds	r1, r2, #0
 800b820:	1c02      	adds	r2, r0, #0
 800b822:	430a      	orrs	r2, r1
 800b824:	705a      	strb	r2, [r3, #1]
    }
    index_input += 2;
 800b826:	197b      	adds	r3, r7, r5
 800b828:	197a      	adds	r2, r7, r5
 800b82a:	7812      	ldrb	r2, [r2, #0]
 800b82c:	3202      	adds	r2, #2
 800b82e:	701a      	strb	r2, [r3, #0]
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 800b830:	19bb      	adds	r3, r7, r6
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	22b0      	movs	r2, #176	; 0xb0
 800b836:	0052      	lsls	r2, r2, #1
 800b838:	2008      	movs	r0, #8
 800b83a:	1812      	adds	r2, r2, r0
 800b83c:	19d2      	adds	r2, r2, r7
 800b83e:	7814      	ldrb	r4, [r2, #0]
 800b840:	7899      	ldrb	r1, [r3, #2]
 800b842:	2000      	movs	r0, #0
 800b844:	4001      	ands	r1, r0
 800b846:	1c08      	adds	r0, r1, #0
 800b848:	1c21      	adds	r1, r4, #0
 800b84a:	4301      	orrs	r1, r0
 800b84c:	7099      	strb	r1, [r3, #2]
 800b84e:	7850      	ldrb	r0, [r2, #1]
 800b850:	78da      	ldrb	r2, [r3, #3]
 800b852:	2100      	movs	r1, #0
 800b854:	400a      	ands	r2, r1
 800b856:	1c11      	adds	r1, r2, #0
 800b858:	1c02      	adds	r2, r0, #0
 800b85a:	430a      	orrs	r2, r1
 800b85c:	70da      	strb	r2, [r3, #3]
    }
    index_input += 2;
 800b85e:	197b      	adds	r3, r7, r5
 800b860:	197a      	adds	r2, r7, r5
 800b862:	7812      	ldrb	r2, [r2, #0]
 800b864:	3202      	adds	r2, #2
 800b866:	701a      	strb	r2, [r3, #0]
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800b868:	2488      	movs	r4, #136	; 0x88
 800b86a:	0064      	lsls	r4, r4, #1
 800b86c:	193b      	adds	r3, r7, r4
 800b86e:	2218      	movs	r2, #24
 800b870:	2100      	movs	r1, #0
 800b872:	0018      	movs	r0, r3
 800b874:	f002 fea4 	bl	800e5c0 <memset>
  rq.ogf = 0x3f;
 800b878:	0021      	movs	r1, r4
 800b87a:	187b      	adds	r3, r7, r1
 800b87c:	223f      	movs	r2, #63	; 0x3f
 800b87e:	801a      	strh	r2, [r3, #0]
  rq.ocf = 0x083;
 800b880:	187b      	adds	r3, r7, r1
 800b882:	2283      	movs	r2, #131	; 0x83
 800b884:	805a      	strh	r2, [r3, #2]
  rq.cparam = cmd_buffer;
 800b886:	187b      	adds	r3, r7, r1
 800b888:	240c      	movs	r4, #12
 800b88a:	193a      	adds	r2, r7, r4
 800b88c:	609a      	str	r2, [r3, #8]
  rq.clen = index_input;
 800b88e:	197b      	adds	r3, r7, r5
 800b890:	781a      	ldrb	r2, [r3, #0]
 800b892:	187b      	adds	r3, r7, r1
 800b894:	60da      	str	r2, [r3, #12]
  rq.rparam = &status;
 800b896:	187b      	adds	r3, r7, r1
 800b898:	220b      	movs	r2, #11
 800b89a:	18ba      	adds	r2, r7, r2
 800b89c:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 800b89e:	187b      	adds	r3, r7, r1
 800b8a0:	2201      	movs	r2, #1
 800b8a2:	615a      	str	r2, [r3, #20]
  if (hci_send_req(&rq, FALSE) < 0)
 800b8a4:	187b      	adds	r3, r7, r1
 800b8a6:	2100      	movs	r1, #0
 800b8a8:	0018      	movs	r0, r3
 800b8aa:	f001 fc3d 	bl	800d128 <hci_send_req>
 800b8ae:	1e03      	subs	r3, r0, #0
 800b8b0:	da01      	bge.n	800b8b6 <aci_gap_set_discoverable+0x2ba>
    return BLE_STATUS_TIMEOUT;
 800b8b2:	23ff      	movs	r3, #255	; 0xff
 800b8b4:	e00d      	b.n	800b8d2 <aci_gap_set_discoverable+0x2d6>
  if (status) {
 800b8b6:	4b0d      	ldr	r3, [pc, #52]	; (800b8ec <aci_gap_set_discoverable+0x2f0>)
 800b8b8:	229c      	movs	r2, #156	; 0x9c
 800b8ba:	0052      	lsls	r2, r2, #1
 800b8bc:	189b      	adds	r3, r3, r2
 800b8be:	19db      	adds	r3, r3, r7
 800b8c0:	781b      	ldrb	r3, [r3, #0]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d004      	beq.n	800b8d0 <aci_gap_set_discoverable+0x2d4>
    return status;
 800b8c6:	4b09      	ldr	r3, [pc, #36]	; (800b8ec <aci_gap_set_discoverable+0x2f0>)
 800b8c8:	189b      	adds	r3, r3, r2
 800b8ca:	19db      	adds	r3, r3, r7
 800b8cc:	781b      	ldrb	r3, [r3, #0]
 800b8ce:	e000      	b.n	800b8d2 <aci_gap_set_discoverable+0x2d6>
  }
  return BLE_STATUS_SUCCESS;
 800b8d0:	2300      	movs	r3, #0
}
 800b8d2:	0018      	movs	r0, r3
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	b04f      	add	sp, #316	; 0x13c
 800b8d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8da:	46c0      	nop			; (mov r8, r8)
 800b8dc:	fffffecf 	.word	0xfffffecf
 800b8e0:	fffffecc 	.word	0xfffffecc
 800b8e4:	fffffeca 	.word	0xfffffeca
 800b8e8:	fffffece 	.word	0xfffffece
 800b8ec:	fffffed3 	.word	0xfffffed3

0800b8f0 <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 800b8f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8f2:	b0cf      	sub	sp, #316	; 0x13c
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	0004      	movs	r4, r0
 800b8f8:	0008      	movs	r0, r1
 800b8fa:	0011      	movs	r1, r2
 800b8fc:	603b      	str	r3, [r7, #0]
 800b8fe:	4b54      	ldr	r3, [pc, #336]	; (800ba50 <aci_gap_init+0x160>)
 800b900:	259c      	movs	r5, #156	; 0x9c
 800b902:	006d      	lsls	r5, r5, #1
 800b904:	195b      	adds	r3, r3, r5
 800b906:	19db      	adds	r3, r3, r7
 800b908:	1c22      	adds	r2, r4, #0
 800b90a:	701a      	strb	r2, [r3, #0]
 800b90c:	4b51      	ldr	r3, [pc, #324]	; (800ba54 <aci_gap_init+0x164>)
 800b90e:	195b      	adds	r3, r3, r5
 800b910:	19db      	adds	r3, r3, r7
 800b912:	1c02      	adds	r2, r0, #0
 800b914:	701a      	strb	r2, [r3, #0]
 800b916:	4b50      	ldr	r3, [pc, #320]	; (800ba58 <aci_gap_init+0x168>)
 800b918:	195b      	adds	r3, r3, r5
 800b91a:	19db      	adds	r3, r3, r7
 800b91c:	1c0a      	adds	r2, r1, #0
 800b91e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800b920:	2314      	movs	r3, #20
 800b922:	18fb      	adds	r3, r7, r3
 800b924:	269a      	movs	r6, #154	; 0x9a
 800b926:	0076      	lsls	r6, r6, #1
 800b928:	19b9      	adds	r1, r7, r6
 800b92a:	600b      	str	r3, [r1, #0]
  aci_gap_init_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800b92c:	210c      	movs	r1, #12
 800b92e:	187b      	adds	r3, r7, r1
 800b930:	2207      	movs	r2, #7
 800b932:	2100      	movs	r1, #0
 800b934:	0018      	movs	r0, r3
 800b936:	f002 fe43 	bl	800e5c0 <memset>
  uint8_t index_input = 0;
 800b93a:	2434      	movs	r4, #52	; 0x34
 800b93c:	34ff      	adds	r4, #255	; 0xff
 800b93e:	193b      	adds	r3, r7, r4
 800b940:	2200      	movs	r2, #0
 800b942:	701a      	strb	r2, [r3, #0]
  cp0->Role = htob(Role, 1);
 800b944:	0031      	movs	r1, r6
 800b946:	1878      	adds	r0, r7, r1
 800b948:	6803      	ldr	r3, [r0, #0]
 800b94a:	4a41      	ldr	r2, [pc, #260]	; (800ba50 <aci_gap_init+0x160>)
 800b94c:	1950      	adds	r0, r2, r5
 800b94e:	19c2      	adds	r2, r0, r7
 800b950:	7812      	ldrb	r2, [r2, #0]
 800b952:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b954:	193b      	adds	r3, r7, r4
 800b956:	193a      	adds	r2, r7, r4
 800b958:	7812      	ldrb	r2, [r2, #0]
 800b95a:	3201      	adds	r2, #1
 800b95c:	701a      	strb	r2, [r3, #0]
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 800b95e:	1878      	adds	r0, r7, r1
 800b960:	6803      	ldr	r3, [r0, #0]
 800b962:	4a3c      	ldr	r2, [pc, #240]	; (800ba54 <aci_gap_init+0x164>)
 800b964:	1950      	adds	r0, r2, r5
 800b966:	19c2      	adds	r2, r0, r7
 800b968:	7812      	ldrb	r2, [r2, #0]
 800b96a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b96c:	193b      	adds	r3, r7, r4
 800b96e:	193a      	adds	r2, r7, r4
 800b970:	7812      	ldrb	r2, [r2, #0]
 800b972:	3201      	adds	r2, #1
 800b974:	701a      	strb	r2, [r3, #0]
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 800b976:	1878      	adds	r0, r7, r1
 800b978:	6803      	ldr	r3, [r0, #0]
 800b97a:	4a37      	ldr	r2, [pc, #220]	; (800ba58 <aci_gap_init+0x168>)
 800b97c:	1950      	adds	r0, r2, r5
 800b97e:	19c2      	adds	r2, r0, r7
 800b980:	7812      	ldrb	r2, [r2, #0]
 800b982:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800b984:	193b      	adds	r3, r7, r4
 800b986:	193a      	adds	r2, r7, r4
 800b988:	7812      	ldrb	r2, [r2, #0]
 800b98a:	3201      	adds	r2, #1
 800b98c:	701a      	strb	r2, [r3, #0]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800b98e:	258c      	movs	r5, #140	; 0x8c
 800b990:	006d      	lsls	r5, r5, #1
 800b992:	197b      	adds	r3, r7, r5
 800b994:	2218      	movs	r2, #24
 800b996:	2100      	movs	r1, #0
 800b998:	0018      	movs	r0, r3
 800b99a:	f002 fe11 	bl	800e5c0 <memset>
  rq.ogf = 0x3f;
 800b99e:	0029      	movs	r1, r5
 800b9a0:	187b      	adds	r3, r7, r1
 800b9a2:	223f      	movs	r2, #63	; 0x3f
 800b9a4:	801a      	strh	r2, [r3, #0]
  rq.ocf = 0x08a;
 800b9a6:	187b      	adds	r3, r7, r1
 800b9a8:	228a      	movs	r2, #138	; 0x8a
 800b9aa:	805a      	strh	r2, [r3, #2]
  rq.cparam = cmd_buffer;
 800b9ac:	187b      	adds	r3, r7, r1
 800b9ae:	2214      	movs	r2, #20
 800b9b0:	18ba      	adds	r2, r7, r2
 800b9b2:	609a      	str	r2, [r3, #8]
  rq.clen = index_input;
 800b9b4:	193b      	adds	r3, r7, r4
 800b9b6:	781a      	ldrb	r2, [r3, #0]
 800b9b8:	187b      	adds	r3, r7, r1
 800b9ba:	60da      	str	r2, [r3, #12]
  rq.rparam = &resp;
 800b9bc:	187b      	adds	r3, r7, r1
 800b9be:	220c      	movs	r2, #12
 800b9c0:	18ba      	adds	r2, r7, r2
 800b9c2:	611a      	str	r2, [r3, #16]
  rq.rlen = sizeof(resp);
 800b9c4:	187b      	adds	r3, r7, r1
 800b9c6:	2207      	movs	r2, #7
 800b9c8:	615a      	str	r2, [r3, #20]
  if (hci_send_req(&rq, FALSE) < 0)
 800b9ca:	187b      	adds	r3, r7, r1
 800b9cc:	2100      	movs	r1, #0
 800b9ce:	0018      	movs	r0, r3
 800b9d0:	f001 fbaa 	bl	800d128 <hci_send_req>
 800b9d4:	1e03      	subs	r3, r0, #0
 800b9d6:	da01      	bge.n	800b9dc <aci_gap_init+0xec>
    return BLE_STATUS_TIMEOUT;
 800b9d8:	23ff      	movs	r3, #255	; 0xff
 800b9da:	e034      	b.n	800ba46 <aci_gap_init+0x156>
  if (resp.Status) {
 800b9dc:	4b1f      	ldr	r3, [pc, #124]	; (800ba5c <aci_gap_init+0x16c>)
 800b9de:	229c      	movs	r2, #156	; 0x9c
 800b9e0:	0052      	lsls	r2, r2, #1
 800b9e2:	189b      	adds	r3, r3, r2
 800b9e4:	19db      	adds	r3, r3, r7
 800b9e6:	781b      	ldrb	r3, [r3, #0]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d004      	beq.n	800b9f6 <aci_gap_init+0x106>
    return resp.Status;
 800b9ec:	4b1b      	ldr	r3, [pc, #108]	; (800ba5c <aci_gap_init+0x16c>)
 800b9ee:	189b      	adds	r3, r3, r2
 800b9f0:	19db      	adds	r3, r3, r7
 800b9f2:	781b      	ldrb	r3, [r3, #0]
 800b9f4:	e027      	b.n	800ba46 <aci_gap_init+0x156>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800b9f6:	4b19      	ldr	r3, [pc, #100]	; (800ba5c <aci_gap_init+0x16c>)
 800b9f8:	219c      	movs	r1, #156	; 0x9c
 800b9fa:	0049      	lsls	r1, r1, #1
 800b9fc:	185b      	adds	r3, r3, r1
 800b9fe:	19db      	adds	r3, r3, r7
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	021b      	lsls	r3, r3, #8
 800ba04:	0c1b      	lsrs	r3, r3, #16
 800ba06:	b29a      	uxth	r2, r3
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 800ba0c:	4b13      	ldr	r3, [pc, #76]	; (800ba5c <aci_gap_init+0x16c>)
 800ba0e:	185b      	adds	r3, r3, r1
 800ba10:	19db      	adds	r3, r3, r7
 800ba12:	78da      	ldrb	r2, [r3, #3]
 800ba14:	791b      	ldrb	r3, [r3, #4]
 800ba16:	021b      	lsls	r3, r3, #8
 800ba18:	4313      	orrs	r3, r2
 800ba1a:	b29a      	uxth	r2, r3
 800ba1c:	23a4      	movs	r3, #164	; 0xa4
 800ba1e:	005b      	lsls	r3, r3, #1
 800ba20:	2008      	movs	r0, #8
 800ba22:	181b      	adds	r3, r3, r0
 800ba24:	19db      	adds	r3, r3, r7
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 800ba2a:	4b0c      	ldr	r3, [pc, #48]	; (800ba5c <aci_gap_init+0x16c>)
 800ba2c:	185b      	adds	r3, r3, r1
 800ba2e:	19db      	adds	r3, r3, r7
 800ba30:	685b      	ldr	r3, [r3, #4]
 800ba32:	021b      	lsls	r3, r3, #8
 800ba34:	0c1b      	lsrs	r3, r3, #16
 800ba36:	b29a      	uxth	r2, r3
 800ba38:	23a6      	movs	r3, #166	; 0xa6
 800ba3a:	005b      	lsls	r3, r3, #1
 800ba3c:	181b      	adds	r3, r3, r0
 800ba3e:	19db      	adds	r3, r3, r7
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800ba44:	2300      	movs	r3, #0
}
 800ba46:	0018      	movs	r0, r3
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	b04f      	add	sp, #316	; 0x13c
 800ba4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba4e:	46c0      	nop			; (mov r8, r8)
 800ba50:	fffffecf 	.word	0xfffffecf
 800ba54:	fffffece 	.word	0xfffffece
 800ba58:	fffffecd 	.word	0xfffffecd
 800ba5c:	fffffed4 	.word	0xfffffed4

0800ba60 <aci_gap_start_general_discovery_proc>:
}
tBleStatus aci_gap_start_general_discovery_proc(uint16_t LE_Scan_Interval,
                                                uint16_t LE_Scan_Window,
                                                uint8_t Own_Address_Type,
                                                uint8_t Filter_Duplicates)
{
 800ba60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba62:	b0cd      	sub	sp, #308	; 0x134
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	0005      	movs	r5, r0
 800ba68:	000c      	movs	r4, r1
 800ba6a:	0010      	movs	r0, r2
 800ba6c:	0019      	movs	r1, r3
 800ba6e:	4b59      	ldr	r3, [pc, #356]	; (800bbd4 <aci_gap_start_general_discovery_proc+0x174>)
 800ba70:	2698      	movs	r6, #152	; 0x98
 800ba72:	0076      	lsls	r6, r6, #1
 800ba74:	199b      	adds	r3, r3, r6
 800ba76:	19db      	adds	r3, r3, r7
 800ba78:	1c2a      	adds	r2, r5, #0
 800ba7a:	801a      	strh	r2, [r3, #0]
 800ba7c:	4b56      	ldr	r3, [pc, #344]	; (800bbd8 <aci_gap_start_general_discovery_proc+0x178>)
 800ba7e:	199b      	adds	r3, r3, r6
 800ba80:	19db      	adds	r3, r3, r7
 800ba82:	1c22      	adds	r2, r4, #0
 800ba84:	801a      	strh	r2, [r3, #0]
 800ba86:	4b55      	ldr	r3, [pc, #340]	; (800bbdc <aci_gap_start_general_discovery_proc+0x17c>)
 800ba88:	199b      	adds	r3, r3, r6
 800ba8a:	19db      	adds	r3, r3, r7
 800ba8c:	1c02      	adds	r2, r0, #0
 800ba8e:	701a      	strb	r2, [r3, #0]
 800ba90:	4b53      	ldr	r3, [pc, #332]	; (800bbe0 <aci_gap_start_general_discovery_proc+0x180>)
 800ba92:	199b      	adds	r3, r3, r6
 800ba94:	19db      	adds	r3, r3, r7
 800ba96:	1c0a      	adds	r2, r1, #0
 800ba98:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_start_general_discovery_proc_cp0 *cp0 = (aci_gap_start_general_discovery_proc_cp0*)(cmd_buffer);
 800ba9a:	230c      	movs	r3, #12
 800ba9c:	18fb      	adds	r3, r7, r3
 800ba9e:	2196      	movs	r1, #150	; 0x96
 800baa0:	0049      	lsls	r1, r1, #1
 800baa2:	1878      	adds	r0, r7, r1
 800baa4:	6003      	str	r3, [r0, #0]
  tBleStatus status = 0;
 800baa6:	4b4f      	ldr	r3, [pc, #316]	; (800bbe4 <aci_gap_start_general_discovery_proc+0x184>)
 800baa8:	1998      	adds	r0, r3, r6
 800baaa:	19c3      	adds	r3, r0, r7
 800baac:	2200      	movs	r2, #0
 800baae:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800bab0:	252c      	movs	r5, #44	; 0x2c
 800bab2:	35ff      	adds	r5, #255	; 0xff
 800bab4:	197b      	adds	r3, r7, r5
 800bab6:	2200      	movs	r2, #0
 800bab8:	701a      	strb	r2, [r3, #0]
  cp0->LE_Scan_Interval = htob(LE_Scan_Interval, 2);
 800baba:	1878      	adds	r0, r7, r1
 800babc:	6803      	ldr	r3, [r0, #0]
 800babe:	4a45      	ldr	r2, [pc, #276]	; (800bbd4 <aci_gap_start_general_discovery_proc+0x174>)
 800bac0:	1990      	adds	r0, r2, r6
 800bac2:	19c2      	adds	r2, r0, r7
 800bac4:	7814      	ldrb	r4, [r2, #0]
 800bac6:	7819      	ldrb	r1, [r3, #0]
 800bac8:	2000      	movs	r0, #0
 800baca:	4001      	ands	r1, r0
 800bacc:	1c08      	adds	r0, r1, #0
 800bace:	1c21      	adds	r1, r4, #0
 800bad0:	4301      	orrs	r1, r0
 800bad2:	7019      	strb	r1, [r3, #0]
 800bad4:	7850      	ldrb	r0, [r2, #1]
 800bad6:	785a      	ldrb	r2, [r3, #1]
 800bad8:	2100      	movs	r1, #0
 800bada:	400a      	ands	r2, r1
 800badc:	1c11      	adds	r1, r2, #0
 800bade:	1c02      	adds	r2, r0, #0
 800bae0:	430a      	orrs	r2, r1
 800bae2:	705a      	strb	r2, [r3, #1]
  index_input += 2;
 800bae4:	197b      	adds	r3, r7, r5
 800bae6:	197a      	adds	r2, r7, r5
 800bae8:	7812      	ldrb	r2, [r2, #0]
 800baea:	3202      	adds	r2, #2
 800baec:	701a      	strb	r2, [r3, #0]
  cp0->LE_Scan_Window = htob(LE_Scan_Window, 2);
 800baee:	2196      	movs	r1, #150	; 0x96
 800baf0:	0049      	lsls	r1, r1, #1
 800baf2:	1878      	adds	r0, r7, r1
 800baf4:	6803      	ldr	r3, [r0, #0]
 800baf6:	4a38      	ldr	r2, [pc, #224]	; (800bbd8 <aci_gap_start_general_discovery_proc+0x178>)
 800baf8:	1990      	adds	r0, r2, r6
 800bafa:	19c2      	adds	r2, r0, r7
 800bafc:	7814      	ldrb	r4, [r2, #0]
 800bafe:	7899      	ldrb	r1, [r3, #2]
 800bb00:	2000      	movs	r0, #0
 800bb02:	4001      	ands	r1, r0
 800bb04:	1c08      	adds	r0, r1, #0
 800bb06:	1c21      	adds	r1, r4, #0
 800bb08:	4301      	orrs	r1, r0
 800bb0a:	7099      	strb	r1, [r3, #2]
 800bb0c:	7850      	ldrb	r0, [r2, #1]
 800bb0e:	78da      	ldrb	r2, [r3, #3]
 800bb10:	2100      	movs	r1, #0
 800bb12:	400a      	ands	r2, r1
 800bb14:	1c11      	adds	r1, r2, #0
 800bb16:	1c02      	adds	r2, r0, #0
 800bb18:	430a      	orrs	r2, r1
 800bb1a:	70da      	strb	r2, [r3, #3]
  index_input += 2;
 800bb1c:	002c      	movs	r4, r5
 800bb1e:	193b      	adds	r3, r7, r4
 800bb20:	193a      	adds	r2, r7, r4
 800bb22:	7812      	ldrb	r2, [r2, #0]
 800bb24:	3202      	adds	r2, #2
 800bb26:	701a      	strb	r2, [r3, #0]
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 800bb28:	2196      	movs	r1, #150	; 0x96
 800bb2a:	0049      	lsls	r1, r1, #1
 800bb2c:	1878      	adds	r0, r7, r1
 800bb2e:	6803      	ldr	r3, [r0, #0]
 800bb30:	4a2a      	ldr	r2, [pc, #168]	; (800bbdc <aci_gap_start_general_discovery_proc+0x17c>)
 800bb32:	1990      	adds	r0, r2, r6
 800bb34:	19c2      	adds	r2, r0, r7
 800bb36:	7812      	ldrb	r2, [r2, #0]
 800bb38:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800bb3a:	193b      	adds	r3, r7, r4
 800bb3c:	193a      	adds	r2, r7, r4
 800bb3e:	7812      	ldrb	r2, [r2, #0]
 800bb40:	3201      	adds	r2, #1
 800bb42:	701a      	strb	r2, [r3, #0]
  cp0->Filter_Duplicates = htob(Filter_Duplicates, 1);
 800bb44:	1879      	adds	r1, r7, r1
 800bb46:	680b      	ldr	r3, [r1, #0]
 800bb48:	4a25      	ldr	r2, [pc, #148]	; (800bbe0 <aci_gap_start_general_discovery_proc+0x180>)
 800bb4a:	1991      	adds	r1, r2, r6
 800bb4c:	19ca      	adds	r2, r1, r7
 800bb4e:	7812      	ldrb	r2, [r2, #0]
 800bb50:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800bb52:	193b      	adds	r3, r7, r4
 800bb54:	193a      	adds	r2, r7, r4
 800bb56:	7812      	ldrb	r2, [r2, #0]
 800bb58:	3201      	adds	r2, #1
 800bb5a:	701a      	strb	r2, [r3, #0]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800bb5c:	2588      	movs	r5, #136	; 0x88
 800bb5e:	006d      	lsls	r5, r5, #1
 800bb60:	197b      	adds	r3, r7, r5
 800bb62:	2218      	movs	r2, #24
 800bb64:	2100      	movs	r1, #0
 800bb66:	0018      	movs	r0, r3
 800bb68:	f002 fd2a 	bl	800e5c0 <memset>
  rq.ogf = 0x3f;
 800bb6c:	0029      	movs	r1, r5
 800bb6e:	187b      	adds	r3, r7, r1
 800bb70:	223f      	movs	r2, #63	; 0x3f
 800bb72:	801a      	strh	r2, [r3, #0]
  rq.ocf = 0x097;
 800bb74:	187b      	adds	r3, r7, r1
 800bb76:	2297      	movs	r2, #151	; 0x97
 800bb78:	805a      	strh	r2, [r3, #2]
  rq.event = 0x0F;
 800bb7a:	187b      	adds	r3, r7, r1
 800bb7c:	220f      	movs	r2, #15
 800bb7e:	605a      	str	r2, [r3, #4]
  rq.cparam = cmd_buffer;
 800bb80:	187b      	adds	r3, r7, r1
 800bb82:	220c      	movs	r2, #12
 800bb84:	18ba      	adds	r2, r7, r2
 800bb86:	609a      	str	r2, [r3, #8]
  rq.clen = index_input;
 800bb88:	193b      	adds	r3, r7, r4
 800bb8a:	781a      	ldrb	r2, [r3, #0]
 800bb8c:	187b      	adds	r3, r7, r1
 800bb8e:	60da      	str	r2, [r3, #12]
  rq.rparam = &status;
 800bb90:	187b      	adds	r3, r7, r1
 800bb92:	220b      	movs	r2, #11
 800bb94:	18ba      	adds	r2, r7, r2
 800bb96:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 800bb98:	187b      	adds	r3, r7, r1
 800bb9a:	2201      	movs	r2, #1
 800bb9c:	615a      	str	r2, [r3, #20]
  if (hci_send_req(&rq, FALSE) < 0)
 800bb9e:	187b      	adds	r3, r7, r1
 800bba0:	2100      	movs	r1, #0
 800bba2:	0018      	movs	r0, r3
 800bba4:	f001 fac0 	bl	800d128 <hci_send_req>
 800bba8:	1e03      	subs	r3, r0, #0
 800bbaa:	da01      	bge.n	800bbb0 <aci_gap_start_general_discovery_proc+0x150>
    return BLE_STATUS_TIMEOUT;
 800bbac:	23ff      	movs	r3, #255	; 0xff
 800bbae:	e00d      	b.n	800bbcc <aci_gap_start_general_discovery_proc+0x16c>
  if (status) {
 800bbb0:	4b0c      	ldr	r3, [pc, #48]	; (800bbe4 <aci_gap_start_general_discovery_proc+0x184>)
 800bbb2:	2298      	movs	r2, #152	; 0x98
 800bbb4:	0052      	lsls	r2, r2, #1
 800bbb6:	189b      	adds	r3, r3, r2
 800bbb8:	19db      	adds	r3, r3, r7
 800bbba:	781b      	ldrb	r3, [r3, #0]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d004      	beq.n	800bbca <aci_gap_start_general_discovery_proc+0x16a>
    return status;
 800bbc0:	4b08      	ldr	r3, [pc, #32]	; (800bbe4 <aci_gap_start_general_discovery_proc+0x184>)
 800bbc2:	189b      	adds	r3, r3, r2
 800bbc4:	19db      	adds	r3, r3, r7
 800bbc6:	781b      	ldrb	r3, [r3, #0]
 800bbc8:	e000      	b.n	800bbcc <aci_gap_start_general_discovery_proc+0x16c>
  }
  return BLE_STATUS_SUCCESS;
 800bbca:	2300      	movs	r3, #0
}
 800bbcc:	0018      	movs	r0, r3
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	b04d      	add	sp, #308	; 0x134
 800bbd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbd4:	fffffed6 	.word	0xfffffed6
 800bbd8:	fffffed4 	.word	0xfffffed4
 800bbdc:	fffffed3 	.word	0xfffffed3
 800bbe0:	fffffed2 	.word	0xfffffed2
 800bbe4:	fffffedb 	.word	0xfffffedb

0800bbe8 <aci_gap_create_connection>:
                                     uint16_t Conn_Interval_Max,
                                     uint16_t Conn_Latency,
                                     uint16_t Supervision_Timeout,
                                     uint16_t Minimum_CE_Length,
                                     uint16_t Maximum_CE_Length)
{
 800bbe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbea:	b0cf      	sub	sp, #316	; 0x13c
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	0004      	movs	r4, r0
 800bbf0:	0008      	movs	r0, r1
 800bbf2:	0011      	movs	r1, r2
 800bbf4:	607b      	str	r3, [r7, #4]
 800bbf6:	4bb3      	ldr	r3, [pc, #716]	; (800bec4 <aci_gap_create_connection+0x2dc>)
 800bbf8:	259c      	movs	r5, #156	; 0x9c
 800bbfa:	006d      	lsls	r5, r5, #1
 800bbfc:	195b      	adds	r3, r3, r5
 800bbfe:	19db      	adds	r3, r3, r7
 800bc00:	1c22      	adds	r2, r4, #0
 800bc02:	801a      	strh	r2, [r3, #0]
 800bc04:	4bb0      	ldr	r3, [pc, #704]	; (800bec8 <aci_gap_create_connection+0x2e0>)
 800bc06:	002c      	movs	r4, r5
 800bc08:	191b      	adds	r3, r3, r4
 800bc0a:	19db      	adds	r3, r3, r7
 800bc0c:	1c02      	adds	r2, r0, #0
 800bc0e:	801a      	strh	r2, [r3, #0]
 800bc10:	4bae      	ldr	r3, [pc, #696]	; (800becc <aci_gap_create_connection+0x2e4>)
 800bc12:	0020      	movs	r0, r4
 800bc14:	181b      	adds	r3, r3, r0
 800bc16:	19db      	adds	r3, r3, r7
 800bc18:	1c0a      	adds	r2, r1, #0
 800bc1a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_create_connection_cp0 *cp0 = (aci_gap_create_connection_cp0*)(cmd_buffer);
 800bc1c:	2314      	movs	r3, #20
 800bc1e:	18fb      	adds	r3, r7, r3
 800bc20:	269a      	movs	r6, #154	; 0x9a
 800bc22:	0076      	lsls	r6, r6, #1
 800bc24:	19b9      	adds	r1, r7, r6
 800bc26:	600b      	str	r3, [r1, #0]
  tBleStatus status = 0;
 800bc28:	4ba9      	ldr	r3, [pc, #676]	; (800bed0 <aci_gap_create_connection+0x2e8>)
 800bc2a:	0001      	movs	r1, r0
 800bc2c:	1858      	adds	r0, r3, r1
 800bc2e:	19c3      	adds	r3, r0, r7
 800bc30:	2200      	movs	r2, #0
 800bc32:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800bc34:	2534      	movs	r5, #52	; 0x34
 800bc36:	35ff      	adds	r5, #255	; 0xff
 800bc38:	197b      	adds	r3, r7, r5
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	701a      	strb	r2, [r3, #0]
  cp0->LE_Scan_Interval = htob(LE_Scan_Interval, 2);
 800bc3e:	19b8      	adds	r0, r7, r6
 800bc40:	6803      	ldr	r3, [r0, #0]
 800bc42:	4aa0      	ldr	r2, [pc, #640]	; (800bec4 <aci_gap_create_connection+0x2dc>)
 800bc44:	1850      	adds	r0, r2, r1
 800bc46:	19c2      	adds	r2, r0, r7
 800bc48:	7814      	ldrb	r4, [r2, #0]
 800bc4a:	7819      	ldrb	r1, [r3, #0]
 800bc4c:	2000      	movs	r0, #0
 800bc4e:	4001      	ands	r1, r0
 800bc50:	1c08      	adds	r0, r1, #0
 800bc52:	1c21      	adds	r1, r4, #0
 800bc54:	4301      	orrs	r1, r0
 800bc56:	7019      	strb	r1, [r3, #0]
 800bc58:	7850      	ldrb	r0, [r2, #1]
 800bc5a:	785a      	ldrb	r2, [r3, #1]
 800bc5c:	2100      	movs	r1, #0
 800bc5e:	400a      	ands	r2, r1
 800bc60:	1c11      	adds	r1, r2, #0
 800bc62:	1c02      	adds	r2, r0, #0
 800bc64:	430a      	orrs	r2, r1
 800bc66:	705a      	strb	r2, [r3, #1]
  index_input += 2;
 800bc68:	197b      	adds	r3, r7, r5
 800bc6a:	197a      	adds	r2, r7, r5
 800bc6c:	7812      	ldrb	r2, [r2, #0]
 800bc6e:	3202      	adds	r2, #2
 800bc70:	701a      	strb	r2, [r3, #0]
  cp0->LE_Scan_Window = htob(LE_Scan_Window, 2);
 800bc72:	19b8      	adds	r0, r7, r6
 800bc74:	6803      	ldr	r3, [r0, #0]
 800bc76:	4a94      	ldr	r2, [pc, #592]	; (800bec8 <aci_gap_create_connection+0x2e0>)
 800bc78:	219c      	movs	r1, #156	; 0x9c
 800bc7a:	0049      	lsls	r1, r1, #1
 800bc7c:	1850      	adds	r0, r2, r1
 800bc7e:	19c2      	adds	r2, r0, r7
 800bc80:	7814      	ldrb	r4, [r2, #0]
 800bc82:	7899      	ldrb	r1, [r3, #2]
 800bc84:	2000      	movs	r0, #0
 800bc86:	4001      	ands	r1, r0
 800bc88:	1c08      	adds	r0, r1, #0
 800bc8a:	1c21      	adds	r1, r4, #0
 800bc8c:	4301      	orrs	r1, r0
 800bc8e:	7099      	strb	r1, [r3, #2]
 800bc90:	7850      	ldrb	r0, [r2, #1]
 800bc92:	78da      	ldrb	r2, [r3, #3]
 800bc94:	2100      	movs	r1, #0
 800bc96:	400a      	ands	r2, r1
 800bc98:	1c11      	adds	r1, r2, #0
 800bc9a:	1c02      	adds	r2, r0, #0
 800bc9c:	430a      	orrs	r2, r1
 800bc9e:	70da      	strb	r2, [r3, #3]
  index_input += 2;
 800bca0:	197b      	adds	r3, r7, r5
 800bca2:	197a      	adds	r2, r7, r5
 800bca4:	7812      	ldrb	r2, [r2, #0]
 800bca6:	3202      	adds	r2, #2
 800bca8:	701a      	strb	r2, [r3, #0]
  cp0->Peer_Address_Type = htob(Peer_Address_Type, 1);
 800bcaa:	19b8      	adds	r0, r7, r6
 800bcac:	6803      	ldr	r3, [r0, #0]
 800bcae:	4a87      	ldr	r2, [pc, #540]	; (800becc <aci_gap_create_connection+0x2e4>)
 800bcb0:	219c      	movs	r1, #156	; 0x9c
 800bcb2:	0049      	lsls	r1, r1, #1
 800bcb4:	1851      	adds	r1, r2, r1
 800bcb6:	19ca      	adds	r2, r1, r7
 800bcb8:	7812      	ldrb	r2, [r2, #0]
 800bcba:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800bcbc:	197b      	adds	r3, r7, r5
 800bcbe:	197a      	adds	r2, r7, r5
 800bcc0:	7812      	ldrb	r2, [r2, #0]
 800bcc2:	3201      	adds	r2, #1
 800bcc4:	701a      	strb	r2, [r3, #0]
  BLUENRG_memcpy((void *) &cp0->Peer_Address, (const void *) Peer_Address, 6);
 800bcc6:	19b9      	adds	r1, r7, r6
 800bcc8:	680b      	ldr	r3, [r1, #0]
 800bcca:	3305      	adds	r3, #5
 800bccc:	6879      	ldr	r1, [r7, #4]
 800bcce:	2206      	movs	r2, #6
 800bcd0:	0018      	movs	r0, r3
 800bcd2:	f002 fd07 	bl	800e6e4 <memcpy>
  index_input += 6;
 800bcd6:	197b      	adds	r3, r7, r5
 800bcd8:	197a      	adds	r2, r7, r5
 800bcda:	7812      	ldrb	r2, [r2, #0]
 800bcdc:	3206      	adds	r2, #6
 800bcde:	701a      	strb	r2, [r3, #0]
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 800bce0:	19b9      	adds	r1, r7, r6
 800bce2:	680a      	ldr	r2, [r1, #0]
 800bce4:	21a4      	movs	r1, #164	; 0xa4
 800bce6:	0049      	lsls	r1, r1, #1
 800bce8:	2008      	movs	r0, #8
 800bcea:	180b      	adds	r3, r1, r0
 800bcec:	19db      	adds	r3, r3, r7
 800bcee:	781b      	ldrb	r3, [r3, #0]
 800bcf0:	72d3      	strb	r3, [r2, #11]
  index_input += 1;
 800bcf2:	197b      	adds	r3, r7, r5
 800bcf4:	197a      	adds	r2, r7, r5
 800bcf6:	7812      	ldrb	r2, [r2, #0]
 800bcf8:	3201      	adds	r2, #1
 800bcfa:	701a      	strb	r2, [r3, #0]
  cp0->Conn_Interval_Min = htob(Conn_Interval_Min, 2);
 800bcfc:	19b9      	adds	r1, r7, r6
 800bcfe:	680b      	ldr	r3, [r1, #0]
 800bd00:	21a6      	movs	r1, #166	; 0xa6
 800bd02:	0049      	lsls	r1, r1, #1
 800bd04:	1809      	adds	r1, r1, r0
 800bd06:	19ca      	adds	r2, r1, r7
 800bd08:	7814      	ldrb	r4, [r2, #0]
 800bd0a:	7b19      	ldrb	r1, [r3, #12]
 800bd0c:	2000      	movs	r0, #0
 800bd0e:	4001      	ands	r1, r0
 800bd10:	1c08      	adds	r0, r1, #0
 800bd12:	1c21      	adds	r1, r4, #0
 800bd14:	4301      	orrs	r1, r0
 800bd16:	7319      	strb	r1, [r3, #12]
 800bd18:	7850      	ldrb	r0, [r2, #1]
 800bd1a:	7b5a      	ldrb	r2, [r3, #13]
 800bd1c:	2100      	movs	r1, #0
 800bd1e:	400a      	ands	r2, r1
 800bd20:	1c11      	adds	r1, r2, #0
 800bd22:	1c02      	adds	r2, r0, #0
 800bd24:	430a      	orrs	r2, r1
 800bd26:	735a      	strb	r2, [r3, #13]
  index_input += 2;
 800bd28:	197b      	adds	r3, r7, r5
 800bd2a:	197a      	adds	r2, r7, r5
 800bd2c:	7812      	ldrb	r2, [r2, #0]
 800bd2e:	3202      	adds	r2, #2
 800bd30:	701a      	strb	r2, [r3, #0]
  cp0->Conn_Interval_Max = htob(Conn_Interval_Max, 2);
 800bd32:	19b9      	adds	r1, r7, r6
 800bd34:	680b      	ldr	r3, [r1, #0]
 800bd36:	21a8      	movs	r1, #168	; 0xa8
 800bd38:	0049      	lsls	r1, r1, #1
 800bd3a:	2208      	movs	r2, #8
 800bd3c:	1889      	adds	r1, r1, r2
 800bd3e:	19ca      	adds	r2, r1, r7
 800bd40:	7814      	ldrb	r4, [r2, #0]
 800bd42:	7b99      	ldrb	r1, [r3, #14]
 800bd44:	2000      	movs	r0, #0
 800bd46:	4001      	ands	r1, r0
 800bd48:	1c08      	adds	r0, r1, #0
 800bd4a:	1c21      	adds	r1, r4, #0
 800bd4c:	4301      	orrs	r1, r0
 800bd4e:	7399      	strb	r1, [r3, #14]
 800bd50:	7850      	ldrb	r0, [r2, #1]
 800bd52:	7bda      	ldrb	r2, [r3, #15]
 800bd54:	2100      	movs	r1, #0
 800bd56:	400a      	ands	r2, r1
 800bd58:	1c11      	adds	r1, r2, #0
 800bd5a:	1c02      	adds	r2, r0, #0
 800bd5c:	430a      	orrs	r2, r1
 800bd5e:	73da      	strb	r2, [r3, #15]
  index_input += 2;
 800bd60:	197b      	adds	r3, r7, r5
 800bd62:	197a      	adds	r2, r7, r5
 800bd64:	7812      	ldrb	r2, [r2, #0]
 800bd66:	3202      	adds	r2, #2
 800bd68:	701a      	strb	r2, [r3, #0]
  cp0->Conn_Latency = htob(Conn_Latency, 2);
 800bd6a:	19b9      	adds	r1, r7, r6
 800bd6c:	680b      	ldr	r3, [r1, #0]
 800bd6e:	21aa      	movs	r1, #170	; 0xaa
 800bd70:	0049      	lsls	r1, r1, #1
 800bd72:	2208      	movs	r2, #8
 800bd74:	1889      	adds	r1, r1, r2
 800bd76:	19ca      	adds	r2, r1, r7
 800bd78:	7814      	ldrb	r4, [r2, #0]
 800bd7a:	7c19      	ldrb	r1, [r3, #16]
 800bd7c:	2000      	movs	r0, #0
 800bd7e:	4001      	ands	r1, r0
 800bd80:	1c08      	adds	r0, r1, #0
 800bd82:	1c21      	adds	r1, r4, #0
 800bd84:	4301      	orrs	r1, r0
 800bd86:	7419      	strb	r1, [r3, #16]
 800bd88:	7850      	ldrb	r0, [r2, #1]
 800bd8a:	7c5a      	ldrb	r2, [r3, #17]
 800bd8c:	2100      	movs	r1, #0
 800bd8e:	400a      	ands	r2, r1
 800bd90:	1c11      	adds	r1, r2, #0
 800bd92:	1c02      	adds	r2, r0, #0
 800bd94:	430a      	orrs	r2, r1
 800bd96:	745a      	strb	r2, [r3, #17]
  index_input += 2;
 800bd98:	197b      	adds	r3, r7, r5
 800bd9a:	197a      	adds	r2, r7, r5
 800bd9c:	7812      	ldrb	r2, [r2, #0]
 800bd9e:	3202      	adds	r2, #2
 800bda0:	701a      	strb	r2, [r3, #0]
  cp0->Supervision_Timeout = htob(Supervision_Timeout, 2);
 800bda2:	19b9      	adds	r1, r7, r6
 800bda4:	680b      	ldr	r3, [r1, #0]
 800bda6:	21ac      	movs	r1, #172	; 0xac
 800bda8:	0049      	lsls	r1, r1, #1
 800bdaa:	2208      	movs	r2, #8
 800bdac:	1889      	adds	r1, r1, r2
 800bdae:	19ca      	adds	r2, r1, r7
 800bdb0:	7814      	ldrb	r4, [r2, #0]
 800bdb2:	7c99      	ldrb	r1, [r3, #18]
 800bdb4:	2000      	movs	r0, #0
 800bdb6:	4001      	ands	r1, r0
 800bdb8:	1c08      	adds	r0, r1, #0
 800bdba:	1c21      	adds	r1, r4, #0
 800bdbc:	4301      	orrs	r1, r0
 800bdbe:	7499      	strb	r1, [r3, #18]
 800bdc0:	7850      	ldrb	r0, [r2, #1]
 800bdc2:	7cda      	ldrb	r2, [r3, #19]
 800bdc4:	2100      	movs	r1, #0
 800bdc6:	400a      	ands	r2, r1
 800bdc8:	1c11      	adds	r1, r2, #0
 800bdca:	1c02      	adds	r2, r0, #0
 800bdcc:	430a      	orrs	r2, r1
 800bdce:	74da      	strb	r2, [r3, #19]
  index_input += 2;
 800bdd0:	197b      	adds	r3, r7, r5
 800bdd2:	197a      	adds	r2, r7, r5
 800bdd4:	7812      	ldrb	r2, [r2, #0]
 800bdd6:	3202      	adds	r2, #2
 800bdd8:	701a      	strb	r2, [r3, #0]
  cp0->Minimum_CE_Length = htob(Minimum_CE_Length, 2);
 800bdda:	19b9      	adds	r1, r7, r6
 800bddc:	680b      	ldr	r3, [r1, #0]
 800bdde:	21ae      	movs	r1, #174	; 0xae
 800bde0:	0049      	lsls	r1, r1, #1
 800bde2:	2208      	movs	r2, #8
 800bde4:	1889      	adds	r1, r1, r2
 800bde6:	19ca      	adds	r2, r1, r7
 800bde8:	7814      	ldrb	r4, [r2, #0]
 800bdea:	7d19      	ldrb	r1, [r3, #20]
 800bdec:	2000      	movs	r0, #0
 800bdee:	4001      	ands	r1, r0
 800bdf0:	1c08      	adds	r0, r1, #0
 800bdf2:	1c21      	adds	r1, r4, #0
 800bdf4:	4301      	orrs	r1, r0
 800bdf6:	7519      	strb	r1, [r3, #20]
 800bdf8:	7850      	ldrb	r0, [r2, #1]
 800bdfa:	7d5a      	ldrb	r2, [r3, #21]
 800bdfc:	2100      	movs	r1, #0
 800bdfe:	400a      	ands	r2, r1
 800be00:	1c11      	adds	r1, r2, #0
 800be02:	1c02      	adds	r2, r0, #0
 800be04:	430a      	orrs	r2, r1
 800be06:	755a      	strb	r2, [r3, #21]
  index_input += 2;
 800be08:	197b      	adds	r3, r7, r5
 800be0a:	197a      	adds	r2, r7, r5
 800be0c:	7812      	ldrb	r2, [r2, #0]
 800be0e:	3202      	adds	r2, #2
 800be10:	701a      	strb	r2, [r3, #0]
  cp0->Maximum_CE_Length = htob(Maximum_CE_Length, 2);
 800be12:	19b9      	adds	r1, r7, r6
 800be14:	680b      	ldr	r3, [r1, #0]
 800be16:	21b0      	movs	r1, #176	; 0xb0
 800be18:	0049      	lsls	r1, r1, #1
 800be1a:	2208      	movs	r2, #8
 800be1c:	188a      	adds	r2, r1, r2
 800be1e:	19d2      	adds	r2, r2, r7
 800be20:	7814      	ldrb	r4, [r2, #0]
 800be22:	7d99      	ldrb	r1, [r3, #22]
 800be24:	2000      	movs	r0, #0
 800be26:	4001      	ands	r1, r0
 800be28:	1c08      	adds	r0, r1, #0
 800be2a:	1c21      	adds	r1, r4, #0
 800be2c:	4301      	orrs	r1, r0
 800be2e:	7599      	strb	r1, [r3, #22]
 800be30:	7850      	ldrb	r0, [r2, #1]
 800be32:	7dda      	ldrb	r2, [r3, #23]
 800be34:	2100      	movs	r1, #0
 800be36:	400a      	ands	r2, r1
 800be38:	1c11      	adds	r1, r2, #0
 800be3a:	1c02      	adds	r2, r0, #0
 800be3c:	430a      	orrs	r2, r1
 800be3e:	75da      	strb	r2, [r3, #23]
  index_input += 2;
 800be40:	197b      	adds	r3, r7, r5
 800be42:	197a      	adds	r2, r7, r5
 800be44:	7812      	ldrb	r2, [r2, #0]
 800be46:	3202      	adds	r2, #2
 800be48:	701a      	strb	r2, [r3, #0]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800be4a:	248c      	movs	r4, #140	; 0x8c
 800be4c:	0064      	lsls	r4, r4, #1
 800be4e:	193b      	adds	r3, r7, r4
 800be50:	2218      	movs	r2, #24
 800be52:	2100      	movs	r1, #0
 800be54:	0018      	movs	r0, r3
 800be56:	f002 fbb3 	bl	800e5c0 <memset>
  rq.ogf = 0x3f;
 800be5a:	0021      	movs	r1, r4
 800be5c:	187b      	adds	r3, r7, r1
 800be5e:	223f      	movs	r2, #63	; 0x3f
 800be60:	801a      	strh	r2, [r3, #0]
  rq.ocf = 0x09c;
 800be62:	187b      	adds	r3, r7, r1
 800be64:	229c      	movs	r2, #156	; 0x9c
 800be66:	805a      	strh	r2, [r3, #2]
  rq.event = 0x0F;
 800be68:	187b      	adds	r3, r7, r1
 800be6a:	220f      	movs	r2, #15
 800be6c:	605a      	str	r2, [r3, #4]
  rq.cparam = cmd_buffer;
 800be6e:	187b      	adds	r3, r7, r1
 800be70:	2214      	movs	r2, #20
 800be72:	18ba      	adds	r2, r7, r2
 800be74:	609a      	str	r2, [r3, #8]
  rq.clen = index_input;
 800be76:	197b      	adds	r3, r7, r5
 800be78:	781a      	ldrb	r2, [r3, #0]
 800be7a:	187b      	adds	r3, r7, r1
 800be7c:	60da      	str	r2, [r3, #12]
  rq.rparam = &status;
 800be7e:	187b      	adds	r3, r7, r1
 800be80:	2213      	movs	r2, #19
 800be82:	18ba      	adds	r2, r7, r2
 800be84:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 800be86:	187b      	adds	r3, r7, r1
 800be88:	2201      	movs	r2, #1
 800be8a:	615a      	str	r2, [r3, #20]
  if (hci_send_req(&rq, FALSE) < 0)
 800be8c:	187b      	adds	r3, r7, r1
 800be8e:	2100      	movs	r1, #0
 800be90:	0018      	movs	r0, r3
 800be92:	f001 f949 	bl	800d128 <hci_send_req>
 800be96:	1e03      	subs	r3, r0, #0
 800be98:	da01      	bge.n	800be9e <aci_gap_create_connection+0x2b6>
    return BLE_STATUS_TIMEOUT;
 800be9a:	23ff      	movs	r3, #255	; 0xff
 800be9c:	e00d      	b.n	800beba <aci_gap_create_connection+0x2d2>
  if (status) {
 800be9e:	4b0c      	ldr	r3, [pc, #48]	; (800bed0 <aci_gap_create_connection+0x2e8>)
 800bea0:	229c      	movs	r2, #156	; 0x9c
 800bea2:	0052      	lsls	r2, r2, #1
 800bea4:	189b      	adds	r3, r3, r2
 800bea6:	19db      	adds	r3, r3, r7
 800bea8:	781b      	ldrb	r3, [r3, #0]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d004      	beq.n	800beb8 <aci_gap_create_connection+0x2d0>
    return status;
 800beae:	4b08      	ldr	r3, [pc, #32]	; (800bed0 <aci_gap_create_connection+0x2e8>)
 800beb0:	189b      	adds	r3, r3, r2
 800beb2:	19db      	adds	r3, r3, r7
 800beb4:	781b      	ldrb	r3, [r3, #0]
 800beb6:	e000      	b.n	800beba <aci_gap_create_connection+0x2d2>
  }
  return BLE_STATUS_SUCCESS;
 800beb8:	2300      	movs	r3, #0
}
 800beba:	0018      	movs	r0, r3
 800bebc:	46bd      	mov	sp, r7
 800bebe:	b04f      	add	sp, #316	; 0x13c
 800bec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bec2:	46c0      	nop			; (mov r8, r8)
 800bec4:	fffffed6 	.word	0xfffffed6
 800bec8:	fffffed4 	.word	0xfffffed4
 800becc:	fffffed3 	.word	0xfffffed3
 800bed0:	fffffedb 	.word	0xfffffedb

0800bed4 <aci_gap_terminate_gap_proc>:
tBleStatus aci_gap_terminate_gap_proc(uint8_t Procedure_Code)
{
 800bed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bed6:	b0cd      	sub	sp, #308	; 0x134
 800bed8:	af00      	add	r7, sp, #0
 800beda:	0002      	movs	r2, r0
 800bedc:	4b2c      	ldr	r3, [pc, #176]	; (800bf90 <aci_gap_terminate_gap_proc+0xbc>)
 800bede:	2198      	movs	r1, #152	; 0x98
 800bee0:	0049      	lsls	r1, r1, #1
 800bee2:	185b      	adds	r3, r3, r1
 800bee4:	19db      	adds	r3, r3, r7
 800bee6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_terminate_gap_proc_cp0 *cp0 = (aci_gap_terminate_gap_proc_cp0*)(cmd_buffer);
 800bee8:	260c      	movs	r6, #12
 800beea:	19bb      	adds	r3, r7, r6
 800beec:	2096      	movs	r0, #150	; 0x96
 800beee:	0040      	lsls	r0, r0, #1
 800bef0:	183a      	adds	r2, r7, r0
 800bef2:	6013      	str	r3, [r2, #0]
  tBleStatus status = 0;
 800bef4:	4b27      	ldr	r3, [pc, #156]	; (800bf94 <aci_gap_terminate_gap_proc+0xc0>)
 800bef6:	185b      	adds	r3, r3, r1
 800bef8:	19db      	adds	r3, r3, r7
 800befa:	2200      	movs	r2, #0
 800befc:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800befe:	252c      	movs	r5, #44	; 0x2c
 800bf00:	35ff      	adds	r5, #255	; 0xff
 800bf02:	197b      	adds	r3, r7, r5
 800bf04:	2200      	movs	r2, #0
 800bf06:	701a      	strb	r2, [r3, #0]
  cp0->Procedure_Code = htob(Procedure_Code, 1);
 800bf08:	183b      	adds	r3, r7, r0
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	4a20      	ldr	r2, [pc, #128]	; (800bf90 <aci_gap_terminate_gap_proc+0xbc>)
 800bf0e:	1852      	adds	r2, r2, r1
 800bf10:	19d2      	adds	r2, r2, r7
 800bf12:	7812      	ldrb	r2, [r2, #0]
 800bf14:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800bf16:	197b      	adds	r3, r7, r5
 800bf18:	197a      	adds	r2, r7, r5
 800bf1a:	7812      	ldrb	r2, [r2, #0]
 800bf1c:	3201      	adds	r2, #1
 800bf1e:	701a      	strb	r2, [r3, #0]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800bf20:	2488      	movs	r4, #136	; 0x88
 800bf22:	0064      	lsls	r4, r4, #1
 800bf24:	193b      	adds	r3, r7, r4
 800bf26:	2218      	movs	r2, #24
 800bf28:	2100      	movs	r1, #0
 800bf2a:	0018      	movs	r0, r3
 800bf2c:	f002 fb48 	bl	800e5c0 <memset>
  rq.ogf = 0x3f;
 800bf30:	0021      	movs	r1, r4
 800bf32:	187b      	adds	r3, r7, r1
 800bf34:	223f      	movs	r2, #63	; 0x3f
 800bf36:	801a      	strh	r2, [r3, #0]
  rq.ocf = 0x09d;
 800bf38:	187b      	adds	r3, r7, r1
 800bf3a:	229d      	movs	r2, #157	; 0x9d
 800bf3c:	805a      	strh	r2, [r3, #2]
  rq.cparam = cmd_buffer;
 800bf3e:	187b      	adds	r3, r7, r1
 800bf40:	19ba      	adds	r2, r7, r6
 800bf42:	609a      	str	r2, [r3, #8]
  rq.clen = index_input;
 800bf44:	197b      	adds	r3, r7, r5
 800bf46:	781a      	ldrb	r2, [r3, #0]
 800bf48:	187b      	adds	r3, r7, r1
 800bf4a:	60da      	str	r2, [r3, #12]
  rq.rparam = &status;
 800bf4c:	187b      	adds	r3, r7, r1
 800bf4e:	220b      	movs	r2, #11
 800bf50:	18ba      	adds	r2, r7, r2
 800bf52:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 800bf54:	187b      	adds	r3, r7, r1
 800bf56:	2201      	movs	r2, #1
 800bf58:	615a      	str	r2, [r3, #20]
  if (hci_send_req(&rq, FALSE) < 0)
 800bf5a:	187b      	adds	r3, r7, r1
 800bf5c:	2100      	movs	r1, #0
 800bf5e:	0018      	movs	r0, r3
 800bf60:	f001 f8e2 	bl	800d128 <hci_send_req>
 800bf64:	1e03      	subs	r3, r0, #0
 800bf66:	da01      	bge.n	800bf6c <aci_gap_terminate_gap_proc+0x98>
    return BLE_STATUS_TIMEOUT;
 800bf68:	23ff      	movs	r3, #255	; 0xff
 800bf6a:	e00d      	b.n	800bf88 <aci_gap_terminate_gap_proc+0xb4>
  if (status) {
 800bf6c:	4b09      	ldr	r3, [pc, #36]	; (800bf94 <aci_gap_terminate_gap_proc+0xc0>)
 800bf6e:	2298      	movs	r2, #152	; 0x98
 800bf70:	0052      	lsls	r2, r2, #1
 800bf72:	189b      	adds	r3, r3, r2
 800bf74:	19db      	adds	r3, r3, r7
 800bf76:	781b      	ldrb	r3, [r3, #0]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d004      	beq.n	800bf86 <aci_gap_terminate_gap_proc+0xb2>
    return status;
 800bf7c:	4b05      	ldr	r3, [pc, #20]	; (800bf94 <aci_gap_terminate_gap_proc+0xc0>)
 800bf7e:	189b      	adds	r3, r3, r2
 800bf80:	19db      	adds	r3, r3, r7
 800bf82:	781b      	ldrb	r3, [r3, #0]
 800bf84:	e000      	b.n	800bf88 <aci_gap_terminate_gap_proc+0xb4>
  }
  return BLE_STATUS_SUCCESS;
 800bf86:	2300      	movs	r3, #0
}
 800bf88:	0018      	movs	r0, r3
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	b04d      	add	sp, #308	; 0x134
 800bf8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf90:	fffffed7 	.word	0xfffffed7
 800bf94:	fffffedb 	.word	0xfffffedb

0800bf98 <aci_gatt_init>:
  ******************************************************************************
  */
#include "ble_types.h"
#include "bluenrg1_gatt_aci.h"
tBleStatus aci_gatt_init(void)
{
 800bf98:	b590      	push	{r4, r7, lr}
 800bf9a:	b089      	sub	sp, #36	; 0x24
 800bf9c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800bf9e:	1dfb      	adds	r3, r7, #7
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	701a      	strb	r2, [r3, #0]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800bfa4:	2408      	movs	r4, #8
 800bfa6:	193b      	adds	r3, r7, r4
 800bfa8:	2218      	movs	r2, #24
 800bfaa:	2100      	movs	r1, #0
 800bfac:	0018      	movs	r0, r3
 800bfae:	f002 fb07 	bl	800e5c0 <memset>
  rq.ogf = 0x3f;
 800bfb2:	0021      	movs	r1, r4
 800bfb4:	187b      	adds	r3, r7, r1
 800bfb6:	223f      	movs	r2, #63	; 0x3f
 800bfb8:	801a      	strh	r2, [r3, #0]
  rq.ocf = 0x101;
 800bfba:	187b      	adds	r3, r7, r1
 800bfbc:	2202      	movs	r2, #2
 800bfbe:	32ff      	adds	r2, #255	; 0xff
 800bfc0:	805a      	strh	r2, [r3, #2]
  rq.rparam = &status;
 800bfc2:	187b      	adds	r3, r7, r1
 800bfc4:	1dfa      	adds	r2, r7, #7
 800bfc6:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 800bfc8:	187b      	adds	r3, r7, r1
 800bfca:	2201      	movs	r2, #1
 800bfcc:	615a      	str	r2, [r3, #20]
  if (hci_send_req(&rq, FALSE) < 0)
 800bfce:	187b      	adds	r3, r7, r1
 800bfd0:	2100      	movs	r1, #0
 800bfd2:	0018      	movs	r0, r3
 800bfd4:	f001 f8a8 	bl	800d128 <hci_send_req>
 800bfd8:	1e03      	subs	r3, r0, #0
 800bfda:	da01      	bge.n	800bfe0 <aci_gatt_init+0x48>
    return BLE_STATUS_TIMEOUT;
 800bfdc:	23ff      	movs	r3, #255	; 0xff
 800bfde:	e007      	b.n	800bff0 <aci_gatt_init+0x58>
  if (status) {
 800bfe0:	1dfb      	adds	r3, r7, #7
 800bfe2:	781b      	ldrb	r3, [r3, #0]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d002      	beq.n	800bfee <aci_gatt_init+0x56>
    return status;
 800bfe8:	1dfb      	adds	r3, r7, #7
 800bfea:	781b      	ldrb	r3, [r3, #0]
 800bfec:	e000      	b.n	800bff0 <aci_gatt_init+0x58>
  }
  return BLE_STATUS_SUCCESS;
 800bfee:	2300      	movs	r3, #0
}
 800bff0:	0018      	movs	r0, r3
 800bff2:	46bd      	mov	sp, r7
 800bff4:	b009      	add	sp, #36	; 0x24
 800bff6:	bd90      	pop	{r4, r7, pc}

0800bff8 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 800bff8:	b5b0      	push	{r4, r5, r7, lr}
 800bffa:	b0ce      	sub	sp, #312	; 0x138
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	0004      	movs	r4, r0
 800c000:	6039      	str	r1, [r7, #0]
 800c002:	0010      	movs	r0, r2
 800c004:	0019      	movs	r1, r3
 800c006:	4b6f      	ldr	r3, [pc, #444]	; (800c1c4 <aci_gatt_add_service+0x1cc>)
 800c008:	259c      	movs	r5, #156	; 0x9c
 800c00a:	006d      	lsls	r5, r5, #1
 800c00c:	195b      	adds	r3, r3, r5
 800c00e:	19db      	adds	r3, r3, r7
 800c010:	1c22      	adds	r2, r4, #0
 800c012:	701a      	strb	r2, [r3, #0]
 800c014:	4b6c      	ldr	r3, [pc, #432]	; (800c1c8 <aci_gatt_add_service+0x1d0>)
 800c016:	002c      	movs	r4, r5
 800c018:	191b      	adds	r3, r3, r4
 800c01a:	19db      	adds	r3, r3, r7
 800c01c:	1c02      	adds	r2, r0, #0
 800c01e:	701a      	strb	r2, [r3, #0]
 800c020:	4b6a      	ldr	r3, [pc, #424]	; (800c1cc <aci_gatt_add_service+0x1d4>)
 800c022:	0020      	movs	r0, r4
 800c024:	181b      	adds	r3, r3, r0
 800c026:	19db      	adds	r3, r3, r7
 800c028:	1c0a      	adds	r2, r1, #0
 800c02a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800c02c:	230c      	movs	r3, #12
 800c02e:	18fb      	adds	r3, r7, r3
 800c030:	2298      	movs	r2, #152	; 0x98
 800c032:	0052      	lsls	r2, r2, #1
 800c034:	18ba      	adds	r2, r7, r2
 800c036:	6013      	str	r3, [r2, #0]
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800c038:	4b62      	ldr	r3, [pc, #392]	; (800c1c4 <aci_gatt_add_service+0x1cc>)
 800c03a:	181b      	adds	r3, r3, r0
 800c03c:	19db      	adds	r3, r3, r7
 800c03e:	781b      	ldrb	r3, [r3, #0]
 800c040:	2b01      	cmp	r3, #1
 800c042:	d009      	beq.n	800c058 <aci_gatt_add_service+0x60>
 800c044:	4b5f      	ldr	r3, [pc, #380]	; (800c1c4 <aci_gatt_add_service+0x1cc>)
 800c046:	181b      	adds	r3, r3, r0
 800c048:	19db      	adds	r3, r3, r7
 800c04a:	781b      	ldrb	r3, [r3, #0]
 800c04c:	2b02      	cmp	r3, #2
 800c04e:	d101      	bne.n	800c054 <aci_gatt_add_service+0x5c>
 800c050:	2311      	movs	r3, #17
 800c052:	e002      	b.n	800c05a <aci_gatt_add_service+0x62>
 800c054:	2301      	movs	r3, #1
 800c056:	e000      	b.n	800c05a <aci_gatt_add_service+0x62>
 800c058:	2303      	movs	r3, #3
 800c05a:	220c      	movs	r2, #12
 800c05c:	18ba      	adds	r2, r7, r2
 800c05e:	18d3      	adds	r3, r2, r3
 800c060:	2296      	movs	r2, #150	; 0x96
 800c062:	0052      	lsls	r2, r2, #1
 800c064:	18ba      	adds	r2, r7, r2
 800c066:	6013      	str	r3, [r2, #0]
  aci_gatt_add_service_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800c068:	2308      	movs	r3, #8
 800c06a:	18fb      	adds	r3, r7, r3
 800c06c:	2203      	movs	r2, #3
 800c06e:	2100      	movs	r1, #0
 800c070:	0018      	movs	r0, r3
 800c072:	f002 faa5 	bl	800e5c0 <memset>
  uint8_t index_input = 0;
 800c076:	212c      	movs	r1, #44	; 0x2c
 800c078:	31ff      	adds	r1, #255	; 0xff
 800c07a:	187b      	adds	r3, r7, r1
 800c07c:	2200      	movs	r2, #0
 800c07e:	701a      	strb	r2, [r3, #0]
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 800c080:	2398      	movs	r3, #152	; 0x98
 800c082:	005b      	lsls	r3, r3, #1
 800c084:	18fb      	adds	r3, r7, r3
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	4a4e      	ldr	r2, [pc, #312]	; (800c1c4 <aci_gatt_add_service+0x1cc>)
 800c08a:	209c      	movs	r0, #156	; 0x9c
 800c08c:	0040      	lsls	r0, r0, #1
 800c08e:	1812      	adds	r2, r2, r0
 800c090:	19d2      	adds	r2, r2, r7
 800c092:	7812      	ldrb	r2, [r2, #0]
 800c094:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c096:	187b      	adds	r3, r7, r1
 800c098:	187a      	adds	r2, r7, r1
 800c09a:	7812      	ldrb	r2, [r2, #0]
 800c09c:	3201      	adds	r2, #1
 800c09e:	701a      	strb	r2, [r3, #0]
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 800c0a0:	4b48      	ldr	r3, [pc, #288]	; (800c1c4 <aci_gatt_add_service+0x1cc>)
 800c0a2:	181b      	adds	r3, r3, r0
 800c0a4:	19db      	adds	r3, r3, r7
 800c0a6:	781b      	ldrb	r3, [r3, #0]
 800c0a8:	2b01      	cmp	r3, #1
 800c0aa:	d002      	beq.n	800c0b2 <aci_gatt_add_service+0xba>
 800c0ac:	2b02      	cmp	r3, #2
 800c0ae:	d006      	beq.n	800c0be <aci_gatt_add_service+0xc6>
 800c0b0:	e00b      	b.n	800c0ca <aci_gatt_add_service+0xd2>
      case 1: size = 2; break;
 800c0b2:	2338      	movs	r3, #56	; 0x38
 800c0b4:	33ff      	adds	r3, #255	; 0xff
 800c0b6:	18fb      	adds	r3, r7, r3
 800c0b8:	2202      	movs	r2, #2
 800c0ba:	701a      	strb	r2, [r3, #0]
 800c0bc:	e007      	b.n	800c0ce <aci_gatt_add_service+0xd6>
      case 2: size = 16; break;
 800c0be:	2338      	movs	r3, #56	; 0x38
 800c0c0:	33ff      	adds	r3, #255	; 0xff
 800c0c2:	18fb      	adds	r3, r7, r3
 800c0c4:	2210      	movs	r2, #16
 800c0c6:	701a      	strb	r2, [r3, #0]
 800c0c8:	e001      	b.n	800c0ce <aci_gatt_add_service+0xd6>
      default: return BLE_STATUS_ERROR;
 800c0ca:	2347      	movs	r3, #71	; 0x47
 800c0cc:	e076      	b.n	800c1bc <aci_gatt_add_service+0x1c4>
    }
    BLUENRG_memcpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 800c0ce:	2398      	movs	r3, #152	; 0x98
 800c0d0:	005b      	lsls	r3, r3, #1
 800c0d2:	18fb      	adds	r3, r7, r3
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	1c58      	adds	r0, r3, #1
 800c0d8:	2438      	movs	r4, #56	; 0x38
 800c0da:	34ff      	adds	r4, #255	; 0xff
 800c0dc:	193b      	adds	r3, r7, r4
 800c0de:	781a      	ldrb	r2, [r3, #0]
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	0019      	movs	r1, r3
 800c0e4:	f002 fafe 	bl	800e6e4 <memcpy>
    index_input += size;
 800c0e8:	202c      	movs	r0, #44	; 0x2c
 800c0ea:	30ff      	adds	r0, #255	; 0xff
 800c0ec:	183b      	adds	r3, r7, r0
 800c0ee:	1839      	adds	r1, r7, r0
 800c0f0:	193a      	adds	r2, r7, r4
 800c0f2:	7809      	ldrb	r1, [r1, #0]
 800c0f4:	7812      	ldrb	r2, [r2, #0]
 800c0f6:	188a      	adds	r2, r1, r2
 800c0f8:	701a      	strb	r2, [r3, #0]
    {
      cp1->Service_Type = htob(Service_Type, 1);
 800c0fa:	2196      	movs	r1, #150	; 0x96
 800c0fc:	0049      	lsls	r1, r1, #1
 800c0fe:	187b      	adds	r3, r7, r1
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	4a31      	ldr	r2, [pc, #196]	; (800c1c8 <aci_gatt_add_service+0x1d0>)
 800c104:	249c      	movs	r4, #156	; 0x9c
 800c106:	0064      	lsls	r4, r4, #1
 800c108:	1912      	adds	r2, r2, r4
 800c10a:	19d2      	adds	r2, r2, r7
 800c10c:	7812      	ldrb	r2, [r2, #0]
 800c10e:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800c110:	183b      	adds	r3, r7, r0
 800c112:	183a      	adds	r2, r7, r0
 800c114:	7812      	ldrb	r2, [r2, #0]
 800c116:	3201      	adds	r2, #1
 800c118:	701a      	strb	r2, [r3, #0]
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 800c11a:	187b      	adds	r3, r7, r1
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	4a2b      	ldr	r2, [pc, #172]	; (800c1cc <aci_gatt_add_service+0x1d4>)
 800c120:	1912      	adds	r2, r2, r4
 800c122:	19d2      	adds	r2, r2, r7
 800c124:	7812      	ldrb	r2, [r2, #0]
 800c126:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800c128:	183b      	adds	r3, r7, r0
 800c12a:	0005      	movs	r5, r0
 800c12c:	183a      	adds	r2, r7, r0
 800c12e:	7812      	ldrb	r2, [r2, #0]
 800c130:	3201      	adds	r2, #1
 800c132:	701a      	strb	r2, [r3, #0]
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800c134:	2488      	movs	r4, #136	; 0x88
 800c136:	0064      	lsls	r4, r4, #1
 800c138:	193b      	adds	r3, r7, r4
 800c13a:	2218      	movs	r2, #24
 800c13c:	2100      	movs	r1, #0
 800c13e:	0018      	movs	r0, r3
 800c140:	f002 fa3e 	bl	800e5c0 <memset>
  rq.ogf = 0x3f;
 800c144:	0021      	movs	r1, r4
 800c146:	187b      	adds	r3, r7, r1
 800c148:	223f      	movs	r2, #63	; 0x3f
 800c14a:	801a      	strh	r2, [r3, #0]
  rq.ocf = 0x102;
 800c14c:	187b      	adds	r3, r7, r1
 800c14e:	2281      	movs	r2, #129	; 0x81
 800c150:	0052      	lsls	r2, r2, #1
 800c152:	805a      	strh	r2, [r3, #2]
  rq.cparam = cmd_buffer;
 800c154:	187b      	adds	r3, r7, r1
 800c156:	220c      	movs	r2, #12
 800c158:	18ba      	adds	r2, r7, r2
 800c15a:	609a      	str	r2, [r3, #8]
  rq.clen = index_input;
 800c15c:	197b      	adds	r3, r7, r5
 800c15e:	781a      	ldrb	r2, [r3, #0]
 800c160:	187b      	adds	r3, r7, r1
 800c162:	60da      	str	r2, [r3, #12]
  rq.rparam = &resp;
 800c164:	187b      	adds	r3, r7, r1
 800c166:	2208      	movs	r2, #8
 800c168:	18ba      	adds	r2, r7, r2
 800c16a:	611a      	str	r2, [r3, #16]
  rq.rlen = sizeof(resp);
 800c16c:	187b      	adds	r3, r7, r1
 800c16e:	2203      	movs	r2, #3
 800c170:	615a      	str	r2, [r3, #20]
  if (hci_send_req(&rq, FALSE) < 0)
 800c172:	187b      	adds	r3, r7, r1
 800c174:	2100      	movs	r1, #0
 800c176:	0018      	movs	r0, r3
 800c178:	f000 ffd6 	bl	800d128 <hci_send_req>
 800c17c:	1e03      	subs	r3, r0, #0
 800c17e:	da01      	bge.n	800c184 <aci_gatt_add_service+0x18c>
    return BLE_STATUS_TIMEOUT;
 800c180:	23ff      	movs	r3, #255	; 0xff
 800c182:	e01b      	b.n	800c1bc <aci_gatt_add_service+0x1c4>
  if (resp.Status) {
 800c184:	4b12      	ldr	r3, [pc, #72]	; (800c1d0 <aci_gatt_add_service+0x1d8>)
 800c186:	229c      	movs	r2, #156	; 0x9c
 800c188:	0052      	lsls	r2, r2, #1
 800c18a:	189b      	adds	r3, r3, r2
 800c18c:	19db      	adds	r3, r3, r7
 800c18e:	781b      	ldrb	r3, [r3, #0]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d004      	beq.n	800c19e <aci_gatt_add_service+0x1a6>
    return resp.Status;
 800c194:	4b0e      	ldr	r3, [pc, #56]	; (800c1d0 <aci_gatt_add_service+0x1d8>)
 800c196:	189b      	adds	r3, r3, r2
 800c198:	19db      	adds	r3, r3, r7
 800c19a:	781b      	ldrb	r3, [r3, #0]
 800c19c:	e00e      	b.n	800c1bc <aci_gatt_add_service+0x1c4>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800c19e:	4b0c      	ldr	r3, [pc, #48]	; (800c1d0 <aci_gatt_add_service+0x1d8>)
 800c1a0:	229c      	movs	r2, #156	; 0x9c
 800c1a2:	0052      	lsls	r2, r2, #1
 800c1a4:	189b      	adds	r3, r3, r2
 800c1a6:	19db      	adds	r3, r3, r7
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	021b      	lsls	r3, r3, #8
 800c1ac:	0c1b      	lsrs	r3, r3, #16
 800c1ae:	b29a      	uxth	r2, r3
 800c1b0:	23a4      	movs	r3, #164	; 0xa4
 800c1b2:	005b      	lsls	r3, r3, #1
 800c1b4:	18fb      	adds	r3, r7, r3
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800c1ba:	2300      	movs	r3, #0
}
 800c1bc:	0018      	movs	r0, r3
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	b04e      	add	sp, #312	; 0x138
 800c1c2:	bdb0      	pop	{r4, r5, r7, pc}
 800c1c4:	fffffecf 	.word	0xfffffecf
 800c1c8:	fffffece 	.word	0xfffffece
 800c1cc:	fffffecd 	.word	0xfffffecd
 800c1d0:	fffffed0 	.word	0xfffffed0

0800c1d4 <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 800c1d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1d6:	b0d1      	sub	sp, #324	; 0x144
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	0004      	movs	r4, r0
 800c1dc:	0008      	movs	r0, r1
 800c1de:	60ba      	str	r2, [r7, #8]
 800c1e0:	0019      	movs	r1, r3
 800c1e2:	4ba1      	ldr	r3, [pc, #644]	; (800c468 <aci_gatt_add_char+0x294>)
 800c1e4:	25a0      	movs	r5, #160	; 0xa0
 800c1e6:	006d      	lsls	r5, r5, #1
 800c1e8:	195b      	adds	r3, r3, r5
 800c1ea:	19db      	adds	r3, r3, r7
 800c1ec:	1c22      	adds	r2, r4, #0
 800c1ee:	801a      	strh	r2, [r3, #0]
 800c1f0:	4b9e      	ldr	r3, [pc, #632]	; (800c46c <aci_gatt_add_char+0x298>)
 800c1f2:	002c      	movs	r4, r5
 800c1f4:	191b      	adds	r3, r3, r4
 800c1f6:	19db      	adds	r3, r3, r7
 800c1f8:	1c02      	adds	r2, r0, #0
 800c1fa:	701a      	strb	r2, [r3, #0]
 800c1fc:	4b9c      	ldr	r3, [pc, #624]	; (800c470 <aci_gatt_add_char+0x29c>)
 800c1fe:	0020      	movs	r0, r4
 800c200:	181b      	adds	r3, r3, r0
 800c202:	19db      	adds	r3, r3, r7
 800c204:	1c0a      	adds	r2, r1, #0
 800c206:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800c208:	2314      	movs	r3, #20
 800c20a:	18fb      	adds	r3, r7, r3
 800c20c:	229c      	movs	r2, #156	; 0x9c
 800c20e:	0052      	lsls	r2, r2, #1
 800c210:	18ba      	adds	r2, r7, r2
 800c212:	6013      	str	r3, [r2, #0]
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800c214:	4b95      	ldr	r3, [pc, #596]	; (800c46c <aci_gatt_add_char+0x298>)
 800c216:	181b      	adds	r3, r3, r0
 800c218:	19db      	adds	r3, r3, r7
 800c21a:	781b      	ldrb	r3, [r3, #0]
 800c21c:	2b01      	cmp	r3, #1
 800c21e:	d009      	beq.n	800c234 <aci_gatt_add_char+0x60>
 800c220:	4b92      	ldr	r3, [pc, #584]	; (800c46c <aci_gatt_add_char+0x298>)
 800c222:	181b      	adds	r3, r3, r0
 800c224:	19db      	adds	r3, r3, r7
 800c226:	781b      	ldrb	r3, [r3, #0]
 800c228:	2b02      	cmp	r3, #2
 800c22a:	d101      	bne.n	800c230 <aci_gatt_add_char+0x5c>
 800c22c:	2313      	movs	r3, #19
 800c22e:	e002      	b.n	800c236 <aci_gatt_add_char+0x62>
 800c230:	2303      	movs	r3, #3
 800c232:	e000      	b.n	800c236 <aci_gatt_add_char+0x62>
 800c234:	2305      	movs	r3, #5
 800c236:	2214      	movs	r2, #20
 800c238:	18ba      	adds	r2, r7, r2
 800c23a:	18d3      	adds	r3, r2, r3
 800c23c:	229a      	movs	r2, #154	; 0x9a
 800c23e:	0052      	lsls	r2, r2, #1
 800c240:	18ba      	adds	r2, r7, r2
 800c242:	6013      	str	r3, [r2, #0]
  aci_gatt_add_char_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800c244:	2310      	movs	r3, #16
 800c246:	18fb      	adds	r3, r7, r3
 800c248:	2203      	movs	r2, #3
 800c24a:	2100      	movs	r1, #0
 800c24c:	0018      	movs	r0, r3
 800c24e:	f002 f9b7 	bl	800e5c0 <memset>
  uint8_t index_input = 0;
 800c252:	2534      	movs	r5, #52	; 0x34
 800c254:	35ff      	adds	r5, #255	; 0xff
 800c256:	197b      	adds	r3, r7, r5
 800c258:	2200      	movs	r2, #0
 800c25a:	701a      	strb	r2, [r3, #0]
  cp0->Service_Handle = htob(Service_Handle, 2);
 800c25c:	239c      	movs	r3, #156	; 0x9c
 800c25e:	005b      	lsls	r3, r3, #1
 800c260:	18fa      	adds	r2, r7, r3
 800c262:	6813      	ldr	r3, [r2, #0]
 800c264:	4a80      	ldr	r2, [pc, #512]	; (800c468 <aci_gatt_add_char+0x294>)
 800c266:	26a0      	movs	r6, #160	; 0xa0
 800c268:	0076      	lsls	r6, r6, #1
 800c26a:	1992      	adds	r2, r2, r6
 800c26c:	19d2      	adds	r2, r2, r7
 800c26e:	7814      	ldrb	r4, [r2, #0]
 800c270:	7819      	ldrb	r1, [r3, #0]
 800c272:	2000      	movs	r0, #0
 800c274:	4001      	ands	r1, r0
 800c276:	1c08      	adds	r0, r1, #0
 800c278:	1c21      	adds	r1, r4, #0
 800c27a:	4301      	orrs	r1, r0
 800c27c:	7019      	strb	r1, [r3, #0]
 800c27e:	7850      	ldrb	r0, [r2, #1]
 800c280:	785a      	ldrb	r2, [r3, #1]
 800c282:	2100      	movs	r1, #0
 800c284:	400a      	ands	r2, r1
 800c286:	1c11      	adds	r1, r2, #0
 800c288:	1c02      	adds	r2, r0, #0
 800c28a:	430a      	orrs	r2, r1
 800c28c:	705a      	strb	r2, [r3, #1]
  index_input += 2;
 800c28e:	197b      	adds	r3, r7, r5
 800c290:	197a      	adds	r2, r7, r5
 800c292:	7812      	ldrb	r2, [r2, #0]
 800c294:	3202      	adds	r2, #2
 800c296:	701a      	strb	r2, [r3, #0]
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 800c298:	239c      	movs	r3, #156	; 0x9c
 800c29a:	005b      	lsls	r3, r3, #1
 800c29c:	18fb      	adds	r3, r7, r3
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	4a72      	ldr	r2, [pc, #456]	; (800c46c <aci_gatt_add_char+0x298>)
 800c2a2:	1992      	adds	r2, r2, r6
 800c2a4:	19d2      	adds	r2, r2, r7
 800c2a6:	7812      	ldrb	r2, [r2, #0]
 800c2a8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800c2aa:	197b      	adds	r3, r7, r5
 800c2ac:	197a      	adds	r2, r7, r5
 800c2ae:	7812      	ldrb	r2, [r2, #0]
 800c2b0:	3201      	adds	r2, #1
 800c2b2:	701a      	strb	r2, [r3, #0]
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_UUID_Type) {
 800c2b4:	4b6d      	ldr	r3, [pc, #436]	; (800c46c <aci_gatt_add_char+0x298>)
 800c2b6:	199b      	adds	r3, r3, r6
 800c2b8:	19db      	adds	r3, r3, r7
 800c2ba:	781b      	ldrb	r3, [r3, #0]
 800c2bc:	2b01      	cmp	r3, #1
 800c2be:	d002      	beq.n	800c2c6 <aci_gatt_add_char+0xf2>
 800c2c0:	2b02      	cmp	r3, #2
 800c2c2:	d006      	beq.n	800c2d2 <aci_gatt_add_char+0xfe>
 800c2c4:	e00b      	b.n	800c2de <aci_gatt_add_char+0x10a>
      case 1: size = 2; break;
 800c2c6:	2340      	movs	r3, #64	; 0x40
 800c2c8:	33ff      	adds	r3, #255	; 0xff
 800c2ca:	18fb      	adds	r3, r7, r3
 800c2cc:	2202      	movs	r2, #2
 800c2ce:	701a      	strb	r2, [r3, #0]
 800c2d0:	e007      	b.n	800c2e2 <aci_gatt_add_char+0x10e>
      case 2: size = 16; break;
 800c2d2:	2340      	movs	r3, #64	; 0x40
 800c2d4:	33ff      	adds	r3, #255	; 0xff
 800c2d6:	18fb      	adds	r3, r7, r3
 800c2d8:	2210      	movs	r2, #16
 800c2da:	701a      	strb	r2, [r3, #0]
 800c2dc:	e001      	b.n	800c2e2 <aci_gatt_add_char+0x10e>
      default: return BLE_STATUS_ERROR;
 800c2de:	2347      	movs	r3, #71	; 0x47
 800c2e0:	e0bd      	b.n	800c45e <aci_gatt_add_char+0x28a>
    }
    BLUENRG_memcpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 800c2e2:	239c      	movs	r3, #156	; 0x9c
 800c2e4:	005b      	lsls	r3, r3, #1
 800c2e6:	18fb      	adds	r3, r7, r3
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	1cd8      	adds	r0, r3, #3
 800c2ec:	2440      	movs	r4, #64	; 0x40
 800c2ee:	34ff      	adds	r4, #255	; 0xff
 800c2f0:	193b      	adds	r3, r7, r4
 800c2f2:	781a      	ldrb	r2, [r3, #0]
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	0019      	movs	r1, r3
 800c2f8:	f002 f9f4 	bl	800e6e4 <memcpy>
    index_input += size;
 800c2fc:	2534      	movs	r5, #52	; 0x34
 800c2fe:	35ff      	adds	r5, #255	; 0xff
 800c300:	197b      	adds	r3, r7, r5
 800c302:	1979      	adds	r1, r7, r5
 800c304:	193a      	adds	r2, r7, r4
 800c306:	7809      	ldrb	r1, [r1, #0]
 800c308:	7812      	ldrb	r2, [r2, #0]
 800c30a:	188a      	adds	r2, r1, r2
 800c30c:	701a      	strb	r2, [r3, #0]
    {
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 800c30e:	269a      	movs	r6, #154	; 0x9a
 800c310:	0076      	lsls	r6, r6, #1
 800c312:	19bb      	adds	r3, r7, r6
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	4a56      	ldr	r2, [pc, #344]	; (800c470 <aci_gatt_add_char+0x29c>)
 800c318:	21a0      	movs	r1, #160	; 0xa0
 800c31a:	0049      	lsls	r1, r1, #1
 800c31c:	1852      	adds	r2, r2, r1
 800c31e:	19d2      	adds	r2, r2, r7
 800c320:	7814      	ldrb	r4, [r2, #0]
 800c322:	7819      	ldrb	r1, [r3, #0]
 800c324:	2000      	movs	r0, #0
 800c326:	4001      	ands	r1, r0
 800c328:	1c08      	adds	r0, r1, #0
 800c32a:	1c21      	adds	r1, r4, #0
 800c32c:	4301      	orrs	r1, r0
 800c32e:	7019      	strb	r1, [r3, #0]
 800c330:	7850      	ldrb	r0, [r2, #1]
 800c332:	785a      	ldrb	r2, [r3, #1]
 800c334:	2100      	movs	r1, #0
 800c336:	400a      	ands	r2, r1
 800c338:	1c11      	adds	r1, r2, #0
 800c33a:	1c02      	adds	r2, r0, #0
 800c33c:	430a      	orrs	r2, r1
 800c33e:	705a      	strb	r2, [r3, #1]
    }
    index_input += 2;
 800c340:	002c      	movs	r4, r5
 800c342:	193b      	adds	r3, r7, r4
 800c344:	193a      	adds	r2, r7, r4
 800c346:	7812      	ldrb	r2, [r2, #0]
 800c348:	3202      	adds	r2, #2
 800c34a:	701a      	strb	r2, [r3, #0]
    {
      cp1->Char_Properties = htob(Char_Properties, 1);
 800c34c:	0031      	movs	r1, r6
 800c34e:	187b      	adds	r3, r7, r1
 800c350:	681a      	ldr	r2, [r3, #0]
 800c352:	23a8      	movs	r3, #168	; 0xa8
 800c354:	005b      	lsls	r3, r3, #1
 800c356:	2008      	movs	r0, #8
 800c358:	181b      	adds	r3, r3, r0
 800c35a:	19db      	adds	r3, r3, r7
 800c35c:	781b      	ldrb	r3, [r3, #0]
 800c35e:	7093      	strb	r3, [r2, #2]
    }
    index_input += 1;
 800c360:	193b      	adds	r3, r7, r4
 800c362:	193a      	adds	r2, r7, r4
 800c364:	7812      	ldrb	r2, [r2, #0]
 800c366:	3201      	adds	r2, #1
 800c368:	701a      	strb	r2, [r3, #0]
    {
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 800c36a:	187b      	adds	r3, r7, r1
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	22aa      	movs	r2, #170	; 0xaa
 800c370:	0052      	lsls	r2, r2, #1
 800c372:	1812      	adds	r2, r2, r0
 800c374:	19d2      	adds	r2, r2, r7
 800c376:	7812      	ldrb	r2, [r2, #0]
 800c378:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800c37a:	193b      	adds	r3, r7, r4
 800c37c:	193a      	adds	r2, r7, r4
 800c37e:	7812      	ldrb	r2, [r2, #0]
 800c380:	3201      	adds	r2, #1
 800c382:	701a      	strb	r2, [r3, #0]
    {
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 800c384:	187b      	adds	r3, r7, r1
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	22ac      	movs	r2, #172	; 0xac
 800c38a:	0052      	lsls	r2, r2, #1
 800c38c:	1812      	adds	r2, r2, r0
 800c38e:	19d2      	adds	r2, r2, r7
 800c390:	7812      	ldrb	r2, [r2, #0]
 800c392:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800c394:	193b      	adds	r3, r7, r4
 800c396:	193a      	adds	r2, r7, r4
 800c398:	7812      	ldrb	r2, [r2, #0]
 800c39a:	3201      	adds	r2, #1
 800c39c:	701a      	strb	r2, [r3, #0]
    {
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 800c39e:	187b      	adds	r3, r7, r1
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	22ae      	movs	r2, #174	; 0xae
 800c3a4:	0052      	lsls	r2, r2, #1
 800c3a6:	1812      	adds	r2, r2, r0
 800c3a8:	19d2      	adds	r2, r2, r7
 800c3aa:	7812      	ldrb	r2, [r2, #0]
 800c3ac:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800c3ae:	193b      	adds	r3, r7, r4
 800c3b0:	193a      	adds	r2, r7, r4
 800c3b2:	7812      	ldrb	r2, [r2, #0]
 800c3b4:	3201      	adds	r2, #1
 800c3b6:	701a      	strb	r2, [r3, #0]
    {
      cp1->Is_Variable = htob(Is_Variable, 1);
 800c3b8:	187b      	adds	r3, r7, r1
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	22b0      	movs	r2, #176	; 0xb0
 800c3be:	0052      	lsls	r2, r2, #1
 800c3c0:	1812      	adds	r2, r2, r0
 800c3c2:	19d2      	adds	r2, r2, r7
 800c3c4:	7812      	ldrb	r2, [r2, #0]
 800c3c6:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800c3c8:	193b      	adds	r3, r7, r4
 800c3ca:	193a      	adds	r2, r7, r4
 800c3cc:	7812      	ldrb	r2, [r2, #0]
 800c3ce:	3201      	adds	r2, #1
 800c3d0:	701a      	strb	r2, [r3, #0]
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800c3d2:	258c      	movs	r5, #140	; 0x8c
 800c3d4:	006d      	lsls	r5, r5, #1
 800c3d6:	197b      	adds	r3, r7, r5
 800c3d8:	2218      	movs	r2, #24
 800c3da:	2100      	movs	r1, #0
 800c3dc:	0018      	movs	r0, r3
 800c3de:	f002 f8ef 	bl	800e5c0 <memset>
  rq.ogf = 0x3f;
 800c3e2:	0029      	movs	r1, r5
 800c3e4:	187b      	adds	r3, r7, r1
 800c3e6:	223f      	movs	r2, #63	; 0x3f
 800c3e8:	801a      	strh	r2, [r3, #0]
  rq.ocf = 0x104;
 800c3ea:	187b      	adds	r3, r7, r1
 800c3ec:	2282      	movs	r2, #130	; 0x82
 800c3ee:	0052      	lsls	r2, r2, #1
 800c3f0:	805a      	strh	r2, [r3, #2]
  rq.cparam = cmd_buffer;
 800c3f2:	187b      	adds	r3, r7, r1
 800c3f4:	2214      	movs	r2, #20
 800c3f6:	18ba      	adds	r2, r7, r2
 800c3f8:	609a      	str	r2, [r3, #8]
  rq.clen = index_input;
 800c3fa:	193b      	adds	r3, r7, r4
 800c3fc:	781a      	ldrb	r2, [r3, #0]
 800c3fe:	187b      	adds	r3, r7, r1
 800c400:	60da      	str	r2, [r3, #12]
  rq.rparam = &resp;
 800c402:	187b      	adds	r3, r7, r1
 800c404:	2210      	movs	r2, #16
 800c406:	18ba      	adds	r2, r7, r2
 800c408:	611a      	str	r2, [r3, #16]
  rq.rlen = sizeof(resp);
 800c40a:	187b      	adds	r3, r7, r1
 800c40c:	2203      	movs	r2, #3
 800c40e:	615a      	str	r2, [r3, #20]
  if (hci_send_req(&rq, FALSE) < 0)
 800c410:	187b      	adds	r3, r7, r1
 800c412:	2100      	movs	r1, #0
 800c414:	0018      	movs	r0, r3
 800c416:	f000 fe87 	bl	800d128 <hci_send_req>
 800c41a:	1e03      	subs	r3, r0, #0
 800c41c:	da01      	bge.n	800c422 <aci_gatt_add_char+0x24e>
    return BLE_STATUS_TIMEOUT;
 800c41e:	23ff      	movs	r3, #255	; 0xff
 800c420:	e01d      	b.n	800c45e <aci_gatt_add_char+0x28a>
  if (resp.Status) {
 800c422:	4b14      	ldr	r3, [pc, #80]	; (800c474 <aci_gatt_add_char+0x2a0>)
 800c424:	22a0      	movs	r2, #160	; 0xa0
 800c426:	0052      	lsls	r2, r2, #1
 800c428:	189b      	adds	r3, r3, r2
 800c42a:	19db      	adds	r3, r3, r7
 800c42c:	781b      	ldrb	r3, [r3, #0]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d004      	beq.n	800c43c <aci_gatt_add_char+0x268>
    return resp.Status;
 800c432:	4b10      	ldr	r3, [pc, #64]	; (800c474 <aci_gatt_add_char+0x2a0>)
 800c434:	189b      	adds	r3, r3, r2
 800c436:	19db      	adds	r3, r3, r7
 800c438:	781b      	ldrb	r3, [r3, #0]
 800c43a:	e010      	b.n	800c45e <aci_gatt_add_char+0x28a>
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
 800c43c:	4b0d      	ldr	r3, [pc, #52]	; (800c474 <aci_gatt_add_char+0x2a0>)
 800c43e:	22a0      	movs	r2, #160	; 0xa0
 800c440:	0052      	lsls	r2, r2, #1
 800c442:	189b      	adds	r3, r3, r2
 800c444:	19db      	adds	r3, r3, r7
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	021b      	lsls	r3, r3, #8
 800c44a:	0c1b      	lsrs	r3, r3, #16
 800c44c:	b29a      	uxth	r2, r3
 800c44e:	23b2      	movs	r3, #178	; 0xb2
 800c450:	005b      	lsls	r3, r3, #1
 800c452:	2108      	movs	r1, #8
 800c454:	185b      	adds	r3, r3, r1
 800c456:	19db      	adds	r3, r3, r7
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800c45c:	2300      	movs	r3, #0
}
 800c45e:	0018      	movs	r0, r3
 800c460:	46bd      	mov	sp, r7
 800c462:	b051      	add	sp, #324	; 0x144
 800c464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c466:	46c0      	nop			; (mov r8, r8)
 800c468:	fffffece 	.word	0xfffffece
 800c46c:	fffffecd 	.word	0xfffffecd
 800c470:	fffffec6 	.word	0xfffffec6
 800c474:	fffffed0 	.word	0xfffffed0

0800c478 <aci_gatt_exchange_config>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gatt_exchange_config(uint16_t Connection_Handle)
{
 800c478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c47a:	b0cd      	sub	sp, #308	; 0x134
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	0002      	movs	r2, r0
 800c480:	4b35      	ldr	r3, [pc, #212]	; (800c558 <aci_gatt_exchange_config+0xe0>)
 800c482:	2198      	movs	r1, #152	; 0x98
 800c484:	0049      	lsls	r1, r1, #1
 800c486:	185b      	adds	r3, r3, r1
 800c488:	19db      	adds	r3, r3, r7
 800c48a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_exchange_config_cp0 *cp0 = (aci_gatt_exchange_config_cp0*)(cmd_buffer);
 800c48c:	260c      	movs	r6, #12
 800c48e:	19bb      	adds	r3, r7, r6
 800c490:	2096      	movs	r0, #150	; 0x96
 800c492:	0040      	lsls	r0, r0, #1
 800c494:	183a      	adds	r2, r7, r0
 800c496:	6013      	str	r3, [r2, #0]
  tBleStatus status = 0;
 800c498:	4b30      	ldr	r3, [pc, #192]	; (800c55c <aci_gatt_exchange_config+0xe4>)
 800c49a:	185b      	adds	r3, r3, r1
 800c49c:	19db      	adds	r3, r3, r7
 800c49e:	2200      	movs	r2, #0
 800c4a0:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800c4a2:	252c      	movs	r5, #44	; 0x2c
 800c4a4:	35ff      	adds	r5, #255	; 0xff
 800c4a6:	197b      	adds	r3, r7, r5
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	701a      	strb	r2, [r3, #0]
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800c4ac:	183b      	adds	r3, r7, r0
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	4a29      	ldr	r2, [pc, #164]	; (800c558 <aci_gatt_exchange_config+0xe0>)
 800c4b2:	1852      	adds	r2, r2, r1
 800c4b4:	19d2      	adds	r2, r2, r7
 800c4b6:	7814      	ldrb	r4, [r2, #0]
 800c4b8:	7819      	ldrb	r1, [r3, #0]
 800c4ba:	2000      	movs	r0, #0
 800c4bc:	4001      	ands	r1, r0
 800c4be:	1c08      	adds	r0, r1, #0
 800c4c0:	1c21      	adds	r1, r4, #0
 800c4c2:	4301      	orrs	r1, r0
 800c4c4:	7019      	strb	r1, [r3, #0]
 800c4c6:	7850      	ldrb	r0, [r2, #1]
 800c4c8:	785a      	ldrb	r2, [r3, #1]
 800c4ca:	2100      	movs	r1, #0
 800c4cc:	400a      	ands	r2, r1
 800c4ce:	1c11      	adds	r1, r2, #0
 800c4d0:	1c02      	adds	r2, r0, #0
 800c4d2:	430a      	orrs	r2, r1
 800c4d4:	705a      	strb	r2, [r3, #1]
  index_input += 2;
 800c4d6:	197b      	adds	r3, r7, r5
 800c4d8:	197a      	adds	r2, r7, r5
 800c4da:	7812      	ldrb	r2, [r2, #0]
 800c4dc:	3202      	adds	r2, #2
 800c4de:	701a      	strb	r2, [r3, #0]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800c4e0:	2488      	movs	r4, #136	; 0x88
 800c4e2:	0064      	lsls	r4, r4, #1
 800c4e4:	193b      	adds	r3, r7, r4
 800c4e6:	2218      	movs	r2, #24
 800c4e8:	2100      	movs	r1, #0
 800c4ea:	0018      	movs	r0, r3
 800c4ec:	f002 f868 	bl	800e5c0 <memset>
  rq.ogf = 0x3f;
 800c4f0:	0021      	movs	r1, r4
 800c4f2:	187b      	adds	r3, r7, r1
 800c4f4:	223f      	movs	r2, #63	; 0x3f
 800c4f6:	801a      	strh	r2, [r3, #0]
  rq.ocf = 0x10b;
 800c4f8:	187b      	adds	r3, r7, r1
 800c4fa:	220c      	movs	r2, #12
 800c4fc:	32ff      	adds	r2, #255	; 0xff
 800c4fe:	805a      	strh	r2, [r3, #2]
  rq.event = 0x0F;
 800c500:	187b      	adds	r3, r7, r1
 800c502:	220f      	movs	r2, #15
 800c504:	605a      	str	r2, [r3, #4]
  rq.cparam = cmd_buffer;
 800c506:	187b      	adds	r3, r7, r1
 800c508:	19ba      	adds	r2, r7, r6
 800c50a:	609a      	str	r2, [r3, #8]
  rq.clen = index_input;
 800c50c:	197b      	adds	r3, r7, r5
 800c50e:	781a      	ldrb	r2, [r3, #0]
 800c510:	187b      	adds	r3, r7, r1
 800c512:	60da      	str	r2, [r3, #12]
  rq.rparam = &status;
 800c514:	187b      	adds	r3, r7, r1
 800c516:	220b      	movs	r2, #11
 800c518:	18ba      	adds	r2, r7, r2
 800c51a:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 800c51c:	187b      	adds	r3, r7, r1
 800c51e:	2201      	movs	r2, #1
 800c520:	615a      	str	r2, [r3, #20]
  if (hci_send_req(&rq, FALSE) < 0)
 800c522:	187b      	adds	r3, r7, r1
 800c524:	2100      	movs	r1, #0
 800c526:	0018      	movs	r0, r3
 800c528:	f000 fdfe 	bl	800d128 <hci_send_req>
 800c52c:	1e03      	subs	r3, r0, #0
 800c52e:	da01      	bge.n	800c534 <aci_gatt_exchange_config+0xbc>
    return BLE_STATUS_TIMEOUT;
 800c530:	23ff      	movs	r3, #255	; 0xff
 800c532:	e00d      	b.n	800c550 <aci_gatt_exchange_config+0xd8>
  if (status) {
 800c534:	4b09      	ldr	r3, [pc, #36]	; (800c55c <aci_gatt_exchange_config+0xe4>)
 800c536:	2298      	movs	r2, #152	; 0x98
 800c538:	0052      	lsls	r2, r2, #1
 800c53a:	189b      	adds	r3, r3, r2
 800c53c:	19db      	adds	r3, r3, r7
 800c53e:	781b      	ldrb	r3, [r3, #0]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d004      	beq.n	800c54e <aci_gatt_exchange_config+0xd6>
    return status;
 800c544:	4b05      	ldr	r3, [pc, #20]	; (800c55c <aci_gatt_exchange_config+0xe4>)
 800c546:	189b      	adds	r3, r3, r2
 800c548:	19db      	adds	r3, r3, r7
 800c54a:	781b      	ldrb	r3, [r3, #0]
 800c54c:	e000      	b.n	800c550 <aci_gatt_exchange_config+0xd8>
  }
  return BLE_STATUS_SUCCESS;
 800c54e:	2300      	movs	r3, #0
}
 800c550:	0018      	movs	r0, r3
 800c552:	46bd      	mov	sp, r7
 800c554:	b04d      	add	sp, #308	; 0x134
 800c556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c558:	fffffed6 	.word	0xfffffed6
 800c55c:	fffffedb 	.word	0xfffffedb

0800c560 <aci_gatt_disc_char_by_uuid>:
tBleStatus aci_gatt_disc_char_by_uuid(uint16_t Connection_Handle,
                                      uint16_t Start_Handle,
                                      uint16_t End_Handle,
                                      uint8_t UUID_Type,
                                      UUID_t *UUID)
{
 800c560:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c562:	b0cf      	sub	sp, #316	; 0x13c
 800c564:	af00      	add	r7, sp, #0
 800c566:	0005      	movs	r5, r0
 800c568:	000c      	movs	r4, r1
 800c56a:	0010      	movs	r0, r2
 800c56c:	0019      	movs	r1, r3
 800c56e:	4b7b      	ldr	r3, [pc, #492]	; (800c75c <aci_gatt_disc_char_by_uuid+0x1fc>)
 800c570:	269c      	movs	r6, #156	; 0x9c
 800c572:	0076      	lsls	r6, r6, #1
 800c574:	199b      	adds	r3, r3, r6
 800c576:	19db      	adds	r3, r3, r7
 800c578:	1c2a      	adds	r2, r5, #0
 800c57a:	801a      	strh	r2, [r3, #0]
 800c57c:	4b78      	ldr	r3, [pc, #480]	; (800c760 <aci_gatt_disc_char_by_uuid+0x200>)
 800c57e:	0035      	movs	r5, r6
 800c580:	195b      	adds	r3, r3, r5
 800c582:	19db      	adds	r3, r3, r7
 800c584:	1c22      	adds	r2, r4, #0
 800c586:	801a      	strh	r2, [r3, #0]
 800c588:	4b76      	ldr	r3, [pc, #472]	; (800c764 <aci_gatt_disc_char_by_uuid+0x204>)
 800c58a:	195b      	adds	r3, r3, r5
 800c58c:	19db      	adds	r3, r3, r7
 800c58e:	1c02      	adds	r2, r0, #0
 800c590:	801a      	strh	r2, [r3, #0]
 800c592:	4b75      	ldr	r3, [pc, #468]	; (800c768 <aci_gatt_disc_char_by_uuid+0x208>)
 800c594:	195b      	adds	r3, r3, r5
 800c596:	19db      	adds	r3, r3, r7
 800c598:	1c0a      	adds	r2, r1, #0
 800c59a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_disc_char_by_uuid_cp0 *cp0 = (aci_gatt_disc_char_by_uuid_cp0*)(cmd_buffer);
 800c59c:	2310      	movs	r3, #16
 800c59e:	18fb      	adds	r3, r7, r3
 800c5a0:	2198      	movs	r1, #152	; 0x98
 800c5a2:	0049      	lsls	r1, r1, #1
 800c5a4:	187a      	adds	r2, r7, r1
 800c5a6:	6013      	str	r3, [r2, #0]
  tBleStatus status = 0;
 800c5a8:	4b70      	ldr	r3, [pc, #448]	; (800c76c <aci_gatt_disc_char_by_uuid+0x20c>)
 800c5aa:	195b      	adds	r3, r3, r5
 800c5ac:	19db      	adds	r3, r3, r7
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800c5b2:	2630      	movs	r6, #48	; 0x30
 800c5b4:	36ff      	adds	r6, #255	; 0xff
 800c5b6:	19bb      	adds	r3, r7, r6
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	701a      	strb	r2, [r3, #0]
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800c5bc:	187b      	adds	r3, r7, r1
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	4a66      	ldr	r2, [pc, #408]	; (800c75c <aci_gatt_disc_char_by_uuid+0x1fc>)
 800c5c2:	1952      	adds	r2, r2, r5
 800c5c4:	19d2      	adds	r2, r2, r7
 800c5c6:	7814      	ldrb	r4, [r2, #0]
 800c5c8:	7819      	ldrb	r1, [r3, #0]
 800c5ca:	2000      	movs	r0, #0
 800c5cc:	4001      	ands	r1, r0
 800c5ce:	1c08      	adds	r0, r1, #0
 800c5d0:	1c21      	adds	r1, r4, #0
 800c5d2:	4301      	orrs	r1, r0
 800c5d4:	7019      	strb	r1, [r3, #0]
 800c5d6:	7850      	ldrb	r0, [r2, #1]
 800c5d8:	785a      	ldrb	r2, [r3, #1]
 800c5da:	2100      	movs	r1, #0
 800c5dc:	400a      	ands	r2, r1
 800c5de:	1c11      	adds	r1, r2, #0
 800c5e0:	1c02      	adds	r2, r0, #0
 800c5e2:	430a      	orrs	r2, r1
 800c5e4:	705a      	strb	r2, [r3, #1]
  index_input += 2;
 800c5e6:	19bb      	adds	r3, r7, r6
 800c5e8:	19ba      	adds	r2, r7, r6
 800c5ea:	7812      	ldrb	r2, [r2, #0]
 800c5ec:	3202      	adds	r2, #2
 800c5ee:	701a      	strb	r2, [r3, #0]
  cp0->Start_Handle = htob(Start_Handle, 2);
 800c5f0:	2198      	movs	r1, #152	; 0x98
 800c5f2:	0049      	lsls	r1, r1, #1
 800c5f4:	187b      	adds	r3, r7, r1
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	4a59      	ldr	r2, [pc, #356]	; (800c760 <aci_gatt_disc_char_by_uuid+0x200>)
 800c5fa:	1952      	adds	r2, r2, r5
 800c5fc:	19d2      	adds	r2, r2, r7
 800c5fe:	7814      	ldrb	r4, [r2, #0]
 800c600:	7899      	ldrb	r1, [r3, #2]
 800c602:	2000      	movs	r0, #0
 800c604:	4001      	ands	r1, r0
 800c606:	1c08      	adds	r0, r1, #0
 800c608:	1c21      	adds	r1, r4, #0
 800c60a:	4301      	orrs	r1, r0
 800c60c:	7099      	strb	r1, [r3, #2]
 800c60e:	7850      	ldrb	r0, [r2, #1]
 800c610:	78da      	ldrb	r2, [r3, #3]
 800c612:	2100      	movs	r1, #0
 800c614:	400a      	ands	r2, r1
 800c616:	1c11      	adds	r1, r2, #0
 800c618:	1c02      	adds	r2, r0, #0
 800c61a:	430a      	orrs	r2, r1
 800c61c:	70da      	strb	r2, [r3, #3]
  index_input += 2;
 800c61e:	19bb      	adds	r3, r7, r6
 800c620:	19ba      	adds	r2, r7, r6
 800c622:	7812      	ldrb	r2, [r2, #0]
 800c624:	3202      	adds	r2, #2
 800c626:	701a      	strb	r2, [r3, #0]
  cp0->End_Handle = htob(End_Handle, 2);
 800c628:	2198      	movs	r1, #152	; 0x98
 800c62a:	0049      	lsls	r1, r1, #1
 800c62c:	187b      	adds	r3, r7, r1
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	4a4c      	ldr	r2, [pc, #304]	; (800c764 <aci_gatt_disc_char_by_uuid+0x204>)
 800c632:	1952      	adds	r2, r2, r5
 800c634:	19d2      	adds	r2, r2, r7
 800c636:	7814      	ldrb	r4, [r2, #0]
 800c638:	7919      	ldrb	r1, [r3, #4]
 800c63a:	2000      	movs	r0, #0
 800c63c:	4001      	ands	r1, r0
 800c63e:	1c08      	adds	r0, r1, #0
 800c640:	1c21      	adds	r1, r4, #0
 800c642:	4301      	orrs	r1, r0
 800c644:	7119      	strb	r1, [r3, #4]
 800c646:	7850      	ldrb	r0, [r2, #1]
 800c648:	795a      	ldrb	r2, [r3, #5]
 800c64a:	2100      	movs	r1, #0
 800c64c:	400a      	ands	r2, r1
 800c64e:	1c11      	adds	r1, r2, #0
 800c650:	1c02      	adds	r2, r0, #0
 800c652:	430a      	orrs	r2, r1
 800c654:	715a      	strb	r2, [r3, #5]
  index_input += 2;
 800c656:	19bb      	adds	r3, r7, r6
 800c658:	19ba      	adds	r2, r7, r6
 800c65a:	7812      	ldrb	r2, [r2, #0]
 800c65c:	3202      	adds	r2, #2
 800c65e:	701a      	strb	r2, [r3, #0]
  cp0->UUID_Type = htob(UUID_Type, 1);
 800c660:	2198      	movs	r1, #152	; 0x98
 800c662:	0049      	lsls	r1, r1, #1
 800c664:	187b      	adds	r3, r7, r1
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	4a3f      	ldr	r2, [pc, #252]	; (800c768 <aci_gatt_disc_char_by_uuid+0x208>)
 800c66a:	1952      	adds	r2, r2, r5
 800c66c:	19d2      	adds	r2, r2, r7
 800c66e:	7812      	ldrb	r2, [r2, #0]
 800c670:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800c672:	19bb      	adds	r3, r7, r6
 800c674:	19ba      	adds	r2, r7, r6
 800c676:	7812      	ldrb	r2, [r2, #0]
 800c678:	3201      	adds	r2, #1
 800c67a:	701a      	strb	r2, [r3, #0]
  /* var_len_data input */
  {
    uint8_t size;
    switch (UUID_Type) {
 800c67c:	4b3a      	ldr	r3, [pc, #232]	; (800c768 <aci_gatt_disc_char_by_uuid+0x208>)
 800c67e:	195b      	adds	r3, r3, r5
 800c680:	19db      	adds	r3, r3, r7
 800c682:	781b      	ldrb	r3, [r3, #0]
 800c684:	2b01      	cmp	r3, #1
 800c686:	d002      	beq.n	800c68e <aci_gatt_disc_char_by_uuid+0x12e>
 800c688:	2b02      	cmp	r3, #2
 800c68a:	d006      	beq.n	800c69a <aci_gatt_disc_char_by_uuid+0x13a>
 800c68c:	e00b      	b.n	800c6a6 <aci_gatt_disc_char_by_uuid+0x146>
      case 1: size = 2; break;
 800c68e:	2338      	movs	r3, #56	; 0x38
 800c690:	33ff      	adds	r3, #255	; 0xff
 800c692:	18fb      	adds	r3, r7, r3
 800c694:	2202      	movs	r2, #2
 800c696:	701a      	strb	r2, [r3, #0]
 800c698:	e007      	b.n	800c6aa <aci_gatt_disc_char_by_uuid+0x14a>
      case 2: size = 16; break;
 800c69a:	2338      	movs	r3, #56	; 0x38
 800c69c:	33ff      	adds	r3, #255	; 0xff
 800c69e:	18fb      	adds	r3, r7, r3
 800c6a0:	2210      	movs	r2, #16
 800c6a2:	701a      	strb	r2, [r3, #0]
 800c6a4:	e001      	b.n	800c6aa <aci_gatt_disc_char_by_uuid+0x14a>
      default: return BLE_STATUS_ERROR;
 800c6a6:	2347      	movs	r3, #71	; 0x47
 800c6a8:	e053      	b.n	800c752 <aci_gatt_disc_char_by_uuid+0x1f2>
    }
    BLUENRG_memcpy((void *) &cp0->UUID, (const void *) UUID, size);
 800c6aa:	2398      	movs	r3, #152	; 0x98
 800c6ac:	005b      	lsls	r3, r3, #1
 800c6ae:	18fb      	adds	r3, r7, r3
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	1dd8      	adds	r0, r3, #7
 800c6b4:	2438      	movs	r4, #56	; 0x38
 800c6b6:	34ff      	adds	r4, #255	; 0xff
 800c6b8:	193b      	adds	r3, r7, r4
 800c6ba:	781a      	ldrb	r2, [r3, #0]
 800c6bc:	23a4      	movs	r3, #164	; 0xa4
 800c6be:	005b      	lsls	r3, r3, #1
 800c6c0:	2108      	movs	r1, #8
 800c6c2:	185b      	adds	r3, r3, r1
 800c6c4:	19db      	adds	r3, r3, r7
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	0019      	movs	r1, r3
 800c6ca:	f002 f80b 	bl	800e6e4 <memcpy>
    index_input += size;
 800c6ce:	2530      	movs	r5, #48	; 0x30
 800c6d0:	35ff      	adds	r5, #255	; 0xff
 800c6d2:	197b      	adds	r3, r7, r5
 800c6d4:	1979      	adds	r1, r7, r5
 800c6d6:	193a      	adds	r2, r7, r4
 800c6d8:	7809      	ldrb	r1, [r1, #0]
 800c6da:	7812      	ldrb	r2, [r2, #0]
 800c6dc:	188a      	adds	r2, r1, r2
 800c6de:	701a      	strb	r2, [r3, #0]
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800c6e0:	248a      	movs	r4, #138	; 0x8a
 800c6e2:	0064      	lsls	r4, r4, #1
 800c6e4:	193b      	adds	r3, r7, r4
 800c6e6:	2218      	movs	r2, #24
 800c6e8:	2100      	movs	r1, #0
 800c6ea:	0018      	movs	r0, r3
 800c6ec:	f001 ff68 	bl	800e5c0 <memset>
  rq.ogf = 0x3f;
 800c6f0:	0021      	movs	r1, r4
 800c6f2:	187b      	adds	r3, r7, r1
 800c6f4:	223f      	movs	r2, #63	; 0x3f
 800c6f6:	801a      	strh	r2, [r3, #0]
  rq.ocf = 0x116;
 800c6f8:	187b      	adds	r3, r7, r1
 800c6fa:	228b      	movs	r2, #139	; 0x8b
 800c6fc:	0052      	lsls	r2, r2, #1
 800c6fe:	805a      	strh	r2, [r3, #2]
  rq.event = 0x0F;
 800c700:	187b      	adds	r3, r7, r1
 800c702:	220f      	movs	r2, #15
 800c704:	605a      	str	r2, [r3, #4]
  rq.cparam = cmd_buffer;
 800c706:	187b      	adds	r3, r7, r1
 800c708:	2210      	movs	r2, #16
 800c70a:	18ba      	adds	r2, r7, r2
 800c70c:	609a      	str	r2, [r3, #8]
  rq.clen = index_input;
 800c70e:	197b      	adds	r3, r7, r5
 800c710:	781a      	ldrb	r2, [r3, #0]
 800c712:	187b      	adds	r3, r7, r1
 800c714:	60da      	str	r2, [r3, #12]
  rq.rparam = &status;
 800c716:	187b      	adds	r3, r7, r1
 800c718:	220f      	movs	r2, #15
 800c71a:	18ba      	adds	r2, r7, r2
 800c71c:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 800c71e:	187b      	adds	r3, r7, r1
 800c720:	2201      	movs	r2, #1
 800c722:	615a      	str	r2, [r3, #20]
  if (hci_send_req(&rq, FALSE) < 0)
 800c724:	187b      	adds	r3, r7, r1
 800c726:	2100      	movs	r1, #0
 800c728:	0018      	movs	r0, r3
 800c72a:	f000 fcfd 	bl	800d128 <hci_send_req>
 800c72e:	1e03      	subs	r3, r0, #0
 800c730:	da01      	bge.n	800c736 <aci_gatt_disc_char_by_uuid+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800c732:	23ff      	movs	r3, #255	; 0xff
 800c734:	e00d      	b.n	800c752 <aci_gatt_disc_char_by_uuid+0x1f2>
  if (status) {
 800c736:	4b0d      	ldr	r3, [pc, #52]	; (800c76c <aci_gatt_disc_char_by_uuid+0x20c>)
 800c738:	229c      	movs	r2, #156	; 0x9c
 800c73a:	0052      	lsls	r2, r2, #1
 800c73c:	189b      	adds	r3, r3, r2
 800c73e:	19db      	adds	r3, r3, r7
 800c740:	781b      	ldrb	r3, [r3, #0]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d004      	beq.n	800c750 <aci_gatt_disc_char_by_uuid+0x1f0>
    return status;
 800c746:	4b09      	ldr	r3, [pc, #36]	; (800c76c <aci_gatt_disc_char_by_uuid+0x20c>)
 800c748:	189b      	adds	r3, r3, r2
 800c74a:	19db      	adds	r3, r3, r7
 800c74c:	781b      	ldrb	r3, [r3, #0]
 800c74e:	e000      	b.n	800c752 <aci_gatt_disc_char_by_uuid+0x1f2>
  }
  return BLE_STATUS_SUCCESS;
 800c750:	2300      	movs	r3, #0
}
 800c752:	0018      	movs	r0, r3
 800c754:	46bd      	mov	sp, r7
 800c756:	b04f      	add	sp, #316	; 0x13c
 800c758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c75a:	46c0      	nop			; (mov r8, r8)
 800c75c:	fffffece 	.word	0xfffffece
 800c760:	fffffecc 	.word	0xfffffecc
 800c764:	fffffeca 	.word	0xfffffeca
 800c768:	fffffec9 	.word	0xfffffec9
 800c76c:	fffffed7 	.word	0xfffffed7

0800c770 <aci_gatt_write_char_desc>:
}
tBleStatus aci_gatt_write_char_desc(uint16_t Connection_Handle,
                                    uint16_t Attr_Handle,
                                    uint8_t Attribute_Val_Length,
                                    uint8_t Attribute_Val[])
{
 800c770:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c772:	b0cf      	sub	sp, #316	; 0x13c
 800c774:	af00      	add	r7, sp, #0
 800c776:	0004      	movs	r4, r0
 800c778:	0008      	movs	r0, r1
 800c77a:	0011      	movs	r1, r2
 800c77c:	607b      	str	r3, [r7, #4]
 800c77e:	4b5b      	ldr	r3, [pc, #364]	; (800c8ec <aci_gatt_write_char_desc+0x17c>)
 800c780:	269c      	movs	r6, #156	; 0x9c
 800c782:	0076      	lsls	r6, r6, #1
 800c784:	199b      	adds	r3, r3, r6
 800c786:	19db      	adds	r3, r3, r7
 800c788:	1c22      	adds	r2, r4, #0
 800c78a:	801a      	strh	r2, [r3, #0]
 800c78c:	4b58      	ldr	r3, [pc, #352]	; (800c8f0 <aci_gatt_write_char_desc+0x180>)
 800c78e:	199b      	adds	r3, r3, r6
 800c790:	19db      	adds	r3, r3, r7
 800c792:	1c02      	adds	r2, r0, #0
 800c794:	801a      	strh	r2, [r3, #0]
 800c796:	4b57      	ldr	r3, [pc, #348]	; (800c8f4 <aci_gatt_write_char_desc+0x184>)
 800c798:	199b      	adds	r3, r3, r6
 800c79a:	19db      	adds	r3, r3, r7
 800c79c:	1c0a      	adds	r2, r1, #0
 800c79e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_write_char_desc_cp0 *cp0 = (aci_gatt_write_char_desc_cp0*)(cmd_buffer);
 800c7a0:	2314      	movs	r3, #20
 800c7a2:	18fb      	adds	r3, r7, r3
 800c7a4:	219a      	movs	r1, #154	; 0x9a
 800c7a6:	0049      	lsls	r1, r1, #1
 800c7a8:	1878      	adds	r0, r7, r1
 800c7aa:	6003      	str	r3, [r0, #0]
  tBleStatus status = 0;
 800c7ac:	4b52      	ldr	r3, [pc, #328]	; (800c8f8 <aci_gatt_write_char_desc+0x188>)
 800c7ae:	1998      	adds	r0, r3, r6
 800c7b0:	19c3      	adds	r3, r0, r7
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800c7b6:	2534      	movs	r5, #52	; 0x34
 800c7b8:	35ff      	adds	r5, #255	; 0xff
 800c7ba:	197b      	adds	r3, r7, r5
 800c7bc:	2200      	movs	r2, #0
 800c7be:	701a      	strb	r2, [r3, #0]
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800c7c0:	1878      	adds	r0, r7, r1
 800c7c2:	6803      	ldr	r3, [r0, #0]
 800c7c4:	4a49      	ldr	r2, [pc, #292]	; (800c8ec <aci_gatt_write_char_desc+0x17c>)
 800c7c6:	1990      	adds	r0, r2, r6
 800c7c8:	19c2      	adds	r2, r0, r7
 800c7ca:	7814      	ldrb	r4, [r2, #0]
 800c7cc:	7819      	ldrb	r1, [r3, #0]
 800c7ce:	2000      	movs	r0, #0
 800c7d0:	4001      	ands	r1, r0
 800c7d2:	1c08      	adds	r0, r1, #0
 800c7d4:	1c21      	adds	r1, r4, #0
 800c7d6:	4301      	orrs	r1, r0
 800c7d8:	7019      	strb	r1, [r3, #0]
 800c7da:	7850      	ldrb	r0, [r2, #1]
 800c7dc:	785a      	ldrb	r2, [r3, #1]
 800c7de:	2100      	movs	r1, #0
 800c7e0:	400a      	ands	r2, r1
 800c7e2:	1c11      	adds	r1, r2, #0
 800c7e4:	1c02      	adds	r2, r0, #0
 800c7e6:	430a      	orrs	r2, r1
 800c7e8:	705a      	strb	r2, [r3, #1]
  index_input += 2;
 800c7ea:	197b      	adds	r3, r7, r5
 800c7ec:	197a      	adds	r2, r7, r5
 800c7ee:	7812      	ldrb	r2, [r2, #0]
 800c7f0:	3202      	adds	r2, #2
 800c7f2:	701a      	strb	r2, [r3, #0]
  cp0->Attr_Handle = htob(Attr_Handle, 2);
 800c7f4:	219a      	movs	r1, #154	; 0x9a
 800c7f6:	0049      	lsls	r1, r1, #1
 800c7f8:	1878      	adds	r0, r7, r1
 800c7fa:	6803      	ldr	r3, [r0, #0]
 800c7fc:	4a3c      	ldr	r2, [pc, #240]	; (800c8f0 <aci_gatt_write_char_desc+0x180>)
 800c7fe:	1990      	adds	r0, r2, r6
 800c800:	19c2      	adds	r2, r0, r7
 800c802:	7814      	ldrb	r4, [r2, #0]
 800c804:	7899      	ldrb	r1, [r3, #2]
 800c806:	2000      	movs	r0, #0
 800c808:	4001      	ands	r1, r0
 800c80a:	1c08      	adds	r0, r1, #0
 800c80c:	1c21      	adds	r1, r4, #0
 800c80e:	4301      	orrs	r1, r0
 800c810:	7099      	strb	r1, [r3, #2]
 800c812:	7850      	ldrb	r0, [r2, #1]
 800c814:	78da      	ldrb	r2, [r3, #3]
 800c816:	2100      	movs	r1, #0
 800c818:	400a      	ands	r2, r1
 800c81a:	1c11      	adds	r1, r2, #0
 800c81c:	1c02      	adds	r2, r0, #0
 800c81e:	430a      	orrs	r2, r1
 800c820:	70da      	strb	r2, [r3, #3]
  index_input += 2;
 800c822:	002c      	movs	r4, r5
 800c824:	193b      	adds	r3, r7, r4
 800c826:	193a      	adds	r2, r7, r4
 800c828:	7812      	ldrb	r2, [r2, #0]
 800c82a:	3202      	adds	r2, #2
 800c82c:	701a      	strb	r2, [r3, #0]
  cp0->Attribute_Val_Length = htob(Attribute_Val_Length, 1);
 800c82e:	219a      	movs	r1, #154	; 0x9a
 800c830:	0049      	lsls	r1, r1, #1
 800c832:	1878      	adds	r0, r7, r1
 800c834:	6803      	ldr	r3, [r0, #0]
 800c836:	4a2f      	ldr	r2, [pc, #188]	; (800c8f4 <aci_gatt_write_char_desc+0x184>)
 800c838:	1990      	adds	r0, r2, r6
 800c83a:	19c2      	adds	r2, r0, r7
 800c83c:	7812      	ldrb	r2, [r2, #0]
 800c83e:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800c840:	193b      	adds	r3, r7, r4
 800c842:	193a      	adds	r2, r7, r4
 800c844:	7812      	ldrb	r2, [r2, #0]
 800c846:	3201      	adds	r2, #1
 800c848:	701a      	strb	r2, [r3, #0]
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Attribute_Val, (const void *) Attribute_Val, Attribute_Val_Length*sizeof(uint8_t));
 800c84a:	1879      	adds	r1, r7, r1
 800c84c:	680b      	ldr	r3, [r1, #0]
 800c84e:	1d58      	adds	r0, r3, #5
 800c850:	4b28      	ldr	r3, [pc, #160]	; (800c8f4 <aci_gatt_write_char_desc+0x184>)
 800c852:	1999      	adds	r1, r3, r6
 800c854:	19cb      	adds	r3, r1, r7
 800c856:	781a      	ldrb	r2, [r3, #0]
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	0019      	movs	r1, r3
 800c85c:	f001 ff42 	bl	800e6e4 <memcpy>
    index_input += Attribute_Val_Length*sizeof(uint8_t);
 800c860:	193b      	adds	r3, r7, r4
 800c862:	1939      	adds	r1, r7, r4
 800c864:	4a23      	ldr	r2, [pc, #140]	; (800c8f4 <aci_gatt_write_char_desc+0x184>)
 800c866:	1990      	adds	r0, r2, r6
 800c868:	19c2      	adds	r2, r0, r7
 800c86a:	7809      	ldrb	r1, [r1, #0]
 800c86c:	7812      	ldrb	r2, [r2, #0]
 800c86e:	188a      	adds	r2, r1, r2
 800c870:	701a      	strb	r2, [r3, #0]
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800c872:	258c      	movs	r5, #140	; 0x8c
 800c874:	006d      	lsls	r5, r5, #1
 800c876:	197b      	adds	r3, r7, r5
 800c878:	2218      	movs	r2, #24
 800c87a:	2100      	movs	r1, #0
 800c87c:	0018      	movs	r0, r3
 800c87e:	f001 fe9f 	bl	800e5c0 <memset>
  rq.ogf = 0x3f;
 800c882:	0029      	movs	r1, r5
 800c884:	187b      	adds	r3, r7, r1
 800c886:	223f      	movs	r2, #63	; 0x3f
 800c888:	801a      	strh	r2, [r3, #0]
  rq.ocf = 0x121;
 800c88a:	187b      	adds	r3, r7, r1
 800c88c:	2222      	movs	r2, #34	; 0x22
 800c88e:	32ff      	adds	r2, #255	; 0xff
 800c890:	805a      	strh	r2, [r3, #2]
  rq.event = 0x0F;
 800c892:	187b      	adds	r3, r7, r1
 800c894:	220f      	movs	r2, #15
 800c896:	605a      	str	r2, [r3, #4]
  rq.cparam = cmd_buffer;
 800c898:	187b      	adds	r3, r7, r1
 800c89a:	2214      	movs	r2, #20
 800c89c:	18ba      	adds	r2, r7, r2
 800c89e:	609a      	str	r2, [r3, #8]
  rq.clen = index_input;
 800c8a0:	193b      	adds	r3, r7, r4
 800c8a2:	781a      	ldrb	r2, [r3, #0]
 800c8a4:	187b      	adds	r3, r7, r1
 800c8a6:	60da      	str	r2, [r3, #12]
  rq.rparam = &status;
 800c8a8:	187b      	adds	r3, r7, r1
 800c8aa:	2213      	movs	r2, #19
 800c8ac:	18ba      	adds	r2, r7, r2
 800c8ae:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 800c8b0:	187b      	adds	r3, r7, r1
 800c8b2:	2201      	movs	r2, #1
 800c8b4:	615a      	str	r2, [r3, #20]
  if (hci_send_req(&rq, FALSE) < 0)
 800c8b6:	187b      	adds	r3, r7, r1
 800c8b8:	2100      	movs	r1, #0
 800c8ba:	0018      	movs	r0, r3
 800c8bc:	f000 fc34 	bl	800d128 <hci_send_req>
 800c8c0:	1e03      	subs	r3, r0, #0
 800c8c2:	da01      	bge.n	800c8c8 <aci_gatt_write_char_desc+0x158>
    return BLE_STATUS_TIMEOUT;
 800c8c4:	23ff      	movs	r3, #255	; 0xff
 800c8c6:	e00d      	b.n	800c8e4 <aci_gatt_write_char_desc+0x174>
  if (status) {
 800c8c8:	4b0b      	ldr	r3, [pc, #44]	; (800c8f8 <aci_gatt_write_char_desc+0x188>)
 800c8ca:	229c      	movs	r2, #156	; 0x9c
 800c8cc:	0052      	lsls	r2, r2, #1
 800c8ce:	189b      	adds	r3, r3, r2
 800c8d0:	19db      	adds	r3, r3, r7
 800c8d2:	781b      	ldrb	r3, [r3, #0]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d004      	beq.n	800c8e2 <aci_gatt_write_char_desc+0x172>
    return status;
 800c8d8:	4b07      	ldr	r3, [pc, #28]	; (800c8f8 <aci_gatt_write_char_desc+0x188>)
 800c8da:	189b      	adds	r3, r3, r2
 800c8dc:	19db      	adds	r3, r3, r7
 800c8de:	781b      	ldrb	r3, [r3, #0]
 800c8e0:	e000      	b.n	800c8e4 <aci_gatt_write_char_desc+0x174>
  }
  return BLE_STATUS_SUCCESS;
 800c8e2:	2300      	movs	r3, #0
}
 800c8e4:	0018      	movs	r0, r3
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	b04f      	add	sp, #316	; 0x13c
 800c8ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8ec:	fffffed6 	.word	0xfffffed6
 800c8f0:	fffffed4 	.word	0xfffffed4
 800c8f4:	fffffed3 	.word	0xfffffed3
 800c8f8:	fffffedb 	.word	0xfffffedb

0800c8fc <aci_gatt_write_without_resp>:
}
tBleStatus aci_gatt_write_without_resp(uint16_t Connection_Handle,
                                       uint16_t Attr_Handle,
                                       uint8_t Attribute_Val_Length,
                                       uint8_t Attribute_Val[])
{
 800c8fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8fe:	b0cf      	sub	sp, #316	; 0x13c
 800c900:	af00      	add	r7, sp, #0
 800c902:	0004      	movs	r4, r0
 800c904:	0008      	movs	r0, r1
 800c906:	0011      	movs	r1, r2
 800c908:	607b      	str	r3, [r7, #4]
 800c90a:	4b5a      	ldr	r3, [pc, #360]	; (800ca74 <aci_gatt_write_without_resp+0x178>)
 800c90c:	269c      	movs	r6, #156	; 0x9c
 800c90e:	0076      	lsls	r6, r6, #1
 800c910:	199b      	adds	r3, r3, r6
 800c912:	19db      	adds	r3, r3, r7
 800c914:	1c22      	adds	r2, r4, #0
 800c916:	801a      	strh	r2, [r3, #0]
 800c918:	4b57      	ldr	r3, [pc, #348]	; (800ca78 <aci_gatt_write_without_resp+0x17c>)
 800c91a:	199b      	adds	r3, r3, r6
 800c91c:	19db      	adds	r3, r3, r7
 800c91e:	1c02      	adds	r2, r0, #0
 800c920:	801a      	strh	r2, [r3, #0]
 800c922:	4b56      	ldr	r3, [pc, #344]	; (800ca7c <aci_gatt_write_without_resp+0x180>)
 800c924:	199b      	adds	r3, r3, r6
 800c926:	19db      	adds	r3, r3, r7
 800c928:	1c0a      	adds	r2, r1, #0
 800c92a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_write_without_resp_cp0 *cp0 = (aci_gatt_write_without_resp_cp0*)(cmd_buffer);
 800c92c:	2314      	movs	r3, #20
 800c92e:	18fb      	adds	r3, r7, r3
 800c930:	219a      	movs	r1, #154	; 0x9a
 800c932:	0049      	lsls	r1, r1, #1
 800c934:	1878      	adds	r0, r7, r1
 800c936:	6003      	str	r3, [r0, #0]
  tBleStatus status = 0;
 800c938:	4b51      	ldr	r3, [pc, #324]	; (800ca80 <aci_gatt_write_without_resp+0x184>)
 800c93a:	1998      	adds	r0, r3, r6
 800c93c:	19c3      	adds	r3, r0, r7
 800c93e:	2200      	movs	r2, #0
 800c940:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800c942:	2534      	movs	r5, #52	; 0x34
 800c944:	35ff      	adds	r5, #255	; 0xff
 800c946:	197b      	adds	r3, r7, r5
 800c948:	2200      	movs	r2, #0
 800c94a:	701a      	strb	r2, [r3, #0]
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800c94c:	1878      	adds	r0, r7, r1
 800c94e:	6803      	ldr	r3, [r0, #0]
 800c950:	4a48      	ldr	r2, [pc, #288]	; (800ca74 <aci_gatt_write_without_resp+0x178>)
 800c952:	1990      	adds	r0, r2, r6
 800c954:	19c2      	adds	r2, r0, r7
 800c956:	7814      	ldrb	r4, [r2, #0]
 800c958:	7819      	ldrb	r1, [r3, #0]
 800c95a:	2000      	movs	r0, #0
 800c95c:	4001      	ands	r1, r0
 800c95e:	1c08      	adds	r0, r1, #0
 800c960:	1c21      	adds	r1, r4, #0
 800c962:	4301      	orrs	r1, r0
 800c964:	7019      	strb	r1, [r3, #0]
 800c966:	7850      	ldrb	r0, [r2, #1]
 800c968:	785a      	ldrb	r2, [r3, #1]
 800c96a:	2100      	movs	r1, #0
 800c96c:	400a      	ands	r2, r1
 800c96e:	1c11      	adds	r1, r2, #0
 800c970:	1c02      	adds	r2, r0, #0
 800c972:	430a      	orrs	r2, r1
 800c974:	705a      	strb	r2, [r3, #1]
  index_input += 2;
 800c976:	197b      	adds	r3, r7, r5
 800c978:	197a      	adds	r2, r7, r5
 800c97a:	7812      	ldrb	r2, [r2, #0]
 800c97c:	3202      	adds	r2, #2
 800c97e:	701a      	strb	r2, [r3, #0]
  cp0->Attr_Handle = htob(Attr_Handle, 2);
 800c980:	219a      	movs	r1, #154	; 0x9a
 800c982:	0049      	lsls	r1, r1, #1
 800c984:	1878      	adds	r0, r7, r1
 800c986:	6803      	ldr	r3, [r0, #0]
 800c988:	4a3b      	ldr	r2, [pc, #236]	; (800ca78 <aci_gatt_write_without_resp+0x17c>)
 800c98a:	1990      	adds	r0, r2, r6
 800c98c:	19c2      	adds	r2, r0, r7
 800c98e:	7814      	ldrb	r4, [r2, #0]
 800c990:	7899      	ldrb	r1, [r3, #2]
 800c992:	2000      	movs	r0, #0
 800c994:	4001      	ands	r1, r0
 800c996:	1c08      	adds	r0, r1, #0
 800c998:	1c21      	adds	r1, r4, #0
 800c99a:	4301      	orrs	r1, r0
 800c99c:	7099      	strb	r1, [r3, #2]
 800c99e:	7850      	ldrb	r0, [r2, #1]
 800c9a0:	78da      	ldrb	r2, [r3, #3]
 800c9a2:	2100      	movs	r1, #0
 800c9a4:	400a      	ands	r2, r1
 800c9a6:	1c11      	adds	r1, r2, #0
 800c9a8:	1c02      	adds	r2, r0, #0
 800c9aa:	430a      	orrs	r2, r1
 800c9ac:	70da      	strb	r2, [r3, #3]
  index_input += 2;
 800c9ae:	002c      	movs	r4, r5
 800c9b0:	193b      	adds	r3, r7, r4
 800c9b2:	193a      	adds	r2, r7, r4
 800c9b4:	7812      	ldrb	r2, [r2, #0]
 800c9b6:	3202      	adds	r2, #2
 800c9b8:	701a      	strb	r2, [r3, #0]
  cp0->Attribute_Val_Length = htob(Attribute_Val_Length, 1);
 800c9ba:	219a      	movs	r1, #154	; 0x9a
 800c9bc:	0049      	lsls	r1, r1, #1
 800c9be:	1878      	adds	r0, r7, r1
 800c9c0:	6803      	ldr	r3, [r0, #0]
 800c9c2:	4a2e      	ldr	r2, [pc, #184]	; (800ca7c <aci_gatt_write_without_resp+0x180>)
 800c9c4:	1990      	adds	r0, r2, r6
 800c9c6:	19c2      	adds	r2, r0, r7
 800c9c8:	7812      	ldrb	r2, [r2, #0]
 800c9ca:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800c9cc:	193b      	adds	r3, r7, r4
 800c9ce:	193a      	adds	r2, r7, r4
 800c9d0:	7812      	ldrb	r2, [r2, #0]
 800c9d2:	3201      	adds	r2, #1
 800c9d4:	701a      	strb	r2, [r3, #0]
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Attribute_Val, (const void *) Attribute_Val, Attribute_Val_Length*sizeof(uint8_t));
 800c9d6:	1879      	adds	r1, r7, r1
 800c9d8:	680b      	ldr	r3, [r1, #0]
 800c9da:	1d58      	adds	r0, r3, #5
 800c9dc:	4b27      	ldr	r3, [pc, #156]	; (800ca7c <aci_gatt_write_without_resp+0x180>)
 800c9de:	1999      	adds	r1, r3, r6
 800c9e0:	19cb      	adds	r3, r1, r7
 800c9e2:	781a      	ldrb	r2, [r3, #0]
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	0019      	movs	r1, r3
 800c9e8:	f001 fe7c 	bl	800e6e4 <memcpy>
    index_input += Attribute_Val_Length*sizeof(uint8_t);
 800c9ec:	193b      	adds	r3, r7, r4
 800c9ee:	1939      	adds	r1, r7, r4
 800c9f0:	4a22      	ldr	r2, [pc, #136]	; (800ca7c <aci_gatt_write_without_resp+0x180>)
 800c9f2:	1990      	adds	r0, r2, r6
 800c9f4:	19c2      	adds	r2, r0, r7
 800c9f6:	7809      	ldrb	r1, [r1, #0]
 800c9f8:	7812      	ldrb	r2, [r2, #0]
 800c9fa:	188a      	adds	r2, r1, r2
 800c9fc:	701a      	strb	r2, [r3, #0]
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800c9fe:	258c      	movs	r5, #140	; 0x8c
 800ca00:	006d      	lsls	r5, r5, #1
 800ca02:	197b      	adds	r3, r7, r5
 800ca04:	2218      	movs	r2, #24
 800ca06:	2100      	movs	r1, #0
 800ca08:	0018      	movs	r0, r3
 800ca0a:	f001 fdd9 	bl	800e5c0 <memset>
  rq.ogf = 0x3f;
 800ca0e:	0029      	movs	r1, r5
 800ca10:	187b      	adds	r3, r7, r1
 800ca12:	223f      	movs	r2, #63	; 0x3f
 800ca14:	801a      	strh	r2, [r3, #0]
  rq.ocf = 0x123;
 800ca16:	187b      	adds	r3, r7, r1
 800ca18:	2224      	movs	r2, #36	; 0x24
 800ca1a:	32ff      	adds	r2, #255	; 0xff
 800ca1c:	805a      	strh	r2, [r3, #2]
  rq.cparam = cmd_buffer;
 800ca1e:	187b      	adds	r3, r7, r1
 800ca20:	2214      	movs	r2, #20
 800ca22:	18ba      	adds	r2, r7, r2
 800ca24:	609a      	str	r2, [r3, #8]
  rq.clen = index_input;
 800ca26:	193b      	adds	r3, r7, r4
 800ca28:	781a      	ldrb	r2, [r3, #0]
 800ca2a:	187b      	adds	r3, r7, r1
 800ca2c:	60da      	str	r2, [r3, #12]
  rq.rparam = &status;
 800ca2e:	187b      	adds	r3, r7, r1
 800ca30:	2213      	movs	r2, #19
 800ca32:	18ba      	adds	r2, r7, r2
 800ca34:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 800ca36:	187b      	adds	r3, r7, r1
 800ca38:	2201      	movs	r2, #1
 800ca3a:	615a      	str	r2, [r3, #20]
  if (hci_send_req(&rq, FALSE) < 0)
 800ca3c:	187b      	adds	r3, r7, r1
 800ca3e:	2100      	movs	r1, #0
 800ca40:	0018      	movs	r0, r3
 800ca42:	f000 fb71 	bl	800d128 <hci_send_req>
 800ca46:	1e03      	subs	r3, r0, #0
 800ca48:	da01      	bge.n	800ca4e <aci_gatt_write_without_resp+0x152>
    return BLE_STATUS_TIMEOUT;
 800ca4a:	23ff      	movs	r3, #255	; 0xff
 800ca4c:	e00d      	b.n	800ca6a <aci_gatt_write_without_resp+0x16e>
  if (status) {
 800ca4e:	4b0c      	ldr	r3, [pc, #48]	; (800ca80 <aci_gatt_write_without_resp+0x184>)
 800ca50:	229c      	movs	r2, #156	; 0x9c
 800ca52:	0052      	lsls	r2, r2, #1
 800ca54:	189b      	adds	r3, r3, r2
 800ca56:	19db      	adds	r3, r3, r7
 800ca58:	781b      	ldrb	r3, [r3, #0]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d004      	beq.n	800ca68 <aci_gatt_write_without_resp+0x16c>
    return status;
 800ca5e:	4b08      	ldr	r3, [pc, #32]	; (800ca80 <aci_gatt_write_without_resp+0x184>)
 800ca60:	189b      	adds	r3, r3, r2
 800ca62:	19db      	adds	r3, r3, r7
 800ca64:	781b      	ldrb	r3, [r3, #0]
 800ca66:	e000      	b.n	800ca6a <aci_gatt_write_without_resp+0x16e>
  }
  return BLE_STATUS_SUCCESS;
 800ca68:	2300      	movs	r3, #0
}
 800ca6a:	0018      	movs	r0, r3
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	b04f      	add	sp, #316	; 0x13c
 800ca70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca72:	46c0      	nop			; (mov r8, r8)
 800ca74:	fffffed6 	.word	0xfffffed6
 800ca78:	fffffed4 	.word	0xfffffed4
 800ca7c:	fffffed3 	.word	0xfffffed3
 800ca80:	fffffedb 	.word	0xfffffedb

0800ca84 <aci_gatt_update_char_value_ext>:
                                          uint8_t Update_Type,
                                          uint16_t Char_Length,
                                          uint16_t Value_Offset,
                                          uint8_t Value_Length,
                                          uint8_t Value[])
{
 800ca84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca86:	b0cd      	sub	sp, #308	; 0x134
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	0005      	movs	r5, r0
 800ca8c:	000c      	movs	r4, r1
 800ca8e:	0010      	movs	r0, r2
 800ca90:	0019      	movs	r1, r3
 800ca92:	4b91      	ldr	r3, [pc, #580]	; (800ccd8 <aci_gatt_update_char_value_ext+0x254>)
 800ca94:	2698      	movs	r6, #152	; 0x98
 800ca96:	0076      	lsls	r6, r6, #1
 800ca98:	199b      	adds	r3, r3, r6
 800ca9a:	19db      	adds	r3, r3, r7
 800ca9c:	1c2a      	adds	r2, r5, #0
 800ca9e:	801a      	strh	r2, [r3, #0]
 800caa0:	4b8e      	ldr	r3, [pc, #568]	; (800ccdc <aci_gatt_update_char_value_ext+0x258>)
 800caa2:	199b      	adds	r3, r3, r6
 800caa4:	19db      	adds	r3, r3, r7
 800caa6:	1c22      	adds	r2, r4, #0
 800caa8:	801a      	strh	r2, [r3, #0]
 800caaa:	4b8d      	ldr	r3, [pc, #564]	; (800cce0 <aci_gatt_update_char_value_ext+0x25c>)
 800caac:	199b      	adds	r3, r3, r6
 800caae:	19db      	adds	r3, r3, r7
 800cab0:	1c02      	adds	r2, r0, #0
 800cab2:	801a      	strh	r2, [r3, #0]
 800cab4:	4b8b      	ldr	r3, [pc, #556]	; (800cce4 <aci_gatt_update_char_value_ext+0x260>)
 800cab6:	199b      	adds	r3, r3, r6
 800cab8:	19db      	adds	r3, r3, r7
 800caba:	1c0a      	adds	r2, r1, #0
 800cabc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_update_char_value_ext_cp0 *cp0 = (aci_gatt_update_char_value_ext_cp0*)(cmd_buffer);
 800cabe:	230c      	movs	r3, #12
 800cac0:	18fb      	adds	r3, r7, r3
 800cac2:	2196      	movs	r1, #150	; 0x96
 800cac4:	0049      	lsls	r1, r1, #1
 800cac6:	1878      	adds	r0, r7, r1
 800cac8:	6003      	str	r3, [r0, #0]
  tBleStatus status = 0;
 800caca:	4b87      	ldr	r3, [pc, #540]	; (800cce8 <aci_gatt_update_char_value_ext+0x264>)
 800cacc:	1998      	adds	r0, r3, r6
 800cace:	19c3      	adds	r3, r0, r7
 800cad0:	2200      	movs	r2, #0
 800cad2:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800cad4:	252c      	movs	r5, #44	; 0x2c
 800cad6:	35ff      	adds	r5, #255	; 0xff
 800cad8:	197b      	adds	r3, r7, r5
 800cada:	2200      	movs	r2, #0
 800cadc:	701a      	strb	r2, [r3, #0]
  cp0->Conn_Handle_To_Notify = htob(Conn_Handle_To_Notify, 2);
 800cade:	1878      	adds	r0, r7, r1
 800cae0:	6803      	ldr	r3, [r0, #0]
 800cae2:	4a7d      	ldr	r2, [pc, #500]	; (800ccd8 <aci_gatt_update_char_value_ext+0x254>)
 800cae4:	1990      	adds	r0, r2, r6
 800cae6:	19c2      	adds	r2, r0, r7
 800cae8:	7814      	ldrb	r4, [r2, #0]
 800caea:	7819      	ldrb	r1, [r3, #0]
 800caec:	2000      	movs	r0, #0
 800caee:	4001      	ands	r1, r0
 800caf0:	1c08      	adds	r0, r1, #0
 800caf2:	1c21      	adds	r1, r4, #0
 800caf4:	4301      	orrs	r1, r0
 800caf6:	7019      	strb	r1, [r3, #0]
 800caf8:	7850      	ldrb	r0, [r2, #1]
 800cafa:	785a      	ldrb	r2, [r3, #1]
 800cafc:	2100      	movs	r1, #0
 800cafe:	400a      	ands	r2, r1
 800cb00:	1c11      	adds	r1, r2, #0
 800cb02:	1c02      	adds	r2, r0, #0
 800cb04:	430a      	orrs	r2, r1
 800cb06:	705a      	strb	r2, [r3, #1]
  index_input += 2;
 800cb08:	197b      	adds	r3, r7, r5
 800cb0a:	197a      	adds	r2, r7, r5
 800cb0c:	7812      	ldrb	r2, [r2, #0]
 800cb0e:	3202      	adds	r2, #2
 800cb10:	701a      	strb	r2, [r3, #0]
  cp0->Service_Handle = htob(Service_Handle, 2);
 800cb12:	2196      	movs	r1, #150	; 0x96
 800cb14:	0049      	lsls	r1, r1, #1
 800cb16:	1878      	adds	r0, r7, r1
 800cb18:	6803      	ldr	r3, [r0, #0]
 800cb1a:	4a70      	ldr	r2, [pc, #448]	; (800ccdc <aci_gatt_update_char_value_ext+0x258>)
 800cb1c:	1990      	adds	r0, r2, r6
 800cb1e:	19c2      	adds	r2, r0, r7
 800cb20:	7814      	ldrb	r4, [r2, #0]
 800cb22:	7899      	ldrb	r1, [r3, #2]
 800cb24:	2000      	movs	r0, #0
 800cb26:	4001      	ands	r1, r0
 800cb28:	1c08      	adds	r0, r1, #0
 800cb2a:	1c21      	adds	r1, r4, #0
 800cb2c:	4301      	orrs	r1, r0
 800cb2e:	7099      	strb	r1, [r3, #2]
 800cb30:	7850      	ldrb	r0, [r2, #1]
 800cb32:	78da      	ldrb	r2, [r3, #3]
 800cb34:	2100      	movs	r1, #0
 800cb36:	400a      	ands	r2, r1
 800cb38:	1c11      	adds	r1, r2, #0
 800cb3a:	1c02      	adds	r2, r0, #0
 800cb3c:	430a      	orrs	r2, r1
 800cb3e:	70da      	strb	r2, [r3, #3]
  index_input += 2;
 800cb40:	197b      	adds	r3, r7, r5
 800cb42:	197a      	adds	r2, r7, r5
 800cb44:	7812      	ldrb	r2, [r2, #0]
 800cb46:	3202      	adds	r2, #2
 800cb48:	701a      	strb	r2, [r3, #0]
  cp0->Char_Handle = htob(Char_Handle, 2);
 800cb4a:	2196      	movs	r1, #150	; 0x96
 800cb4c:	0049      	lsls	r1, r1, #1
 800cb4e:	1878      	adds	r0, r7, r1
 800cb50:	6803      	ldr	r3, [r0, #0]
 800cb52:	4a63      	ldr	r2, [pc, #396]	; (800cce0 <aci_gatt_update_char_value_ext+0x25c>)
 800cb54:	1990      	adds	r0, r2, r6
 800cb56:	19c2      	adds	r2, r0, r7
 800cb58:	7814      	ldrb	r4, [r2, #0]
 800cb5a:	7919      	ldrb	r1, [r3, #4]
 800cb5c:	2000      	movs	r0, #0
 800cb5e:	4001      	ands	r1, r0
 800cb60:	1c08      	adds	r0, r1, #0
 800cb62:	1c21      	adds	r1, r4, #0
 800cb64:	4301      	orrs	r1, r0
 800cb66:	7119      	strb	r1, [r3, #4]
 800cb68:	7850      	ldrb	r0, [r2, #1]
 800cb6a:	795a      	ldrb	r2, [r3, #5]
 800cb6c:	2100      	movs	r1, #0
 800cb6e:	400a      	ands	r2, r1
 800cb70:	1c11      	adds	r1, r2, #0
 800cb72:	1c02      	adds	r2, r0, #0
 800cb74:	430a      	orrs	r2, r1
 800cb76:	715a      	strb	r2, [r3, #5]
  index_input += 2;
 800cb78:	197b      	adds	r3, r7, r5
 800cb7a:	197a      	adds	r2, r7, r5
 800cb7c:	7812      	ldrb	r2, [r2, #0]
 800cb7e:	3202      	adds	r2, #2
 800cb80:	701a      	strb	r2, [r3, #0]
  cp0->Update_Type = htob(Update_Type, 1);
 800cb82:	2196      	movs	r1, #150	; 0x96
 800cb84:	0049      	lsls	r1, r1, #1
 800cb86:	1878      	adds	r0, r7, r1
 800cb88:	6803      	ldr	r3, [r0, #0]
 800cb8a:	4a56      	ldr	r2, [pc, #344]	; (800cce4 <aci_gatt_update_char_value_ext+0x260>)
 800cb8c:	1990      	adds	r0, r2, r6
 800cb8e:	19c2      	adds	r2, r0, r7
 800cb90:	7812      	ldrb	r2, [r2, #0]
 800cb92:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800cb94:	197b      	adds	r3, r7, r5
 800cb96:	197a      	adds	r2, r7, r5
 800cb98:	7812      	ldrb	r2, [r2, #0]
 800cb9a:	3201      	adds	r2, #1
 800cb9c:	701a      	strb	r2, [r3, #0]
  cp0->Char_Length = htob(Char_Length, 2);
 800cb9e:	000e      	movs	r6, r1
 800cba0:	19b9      	adds	r1, r7, r6
 800cba2:	680b      	ldr	r3, [r1, #0]
 800cba4:	21a0      	movs	r1, #160	; 0xa0
 800cba6:	0049      	lsls	r1, r1, #1
 800cba8:	2208      	movs	r2, #8
 800cbaa:	1889      	adds	r1, r1, r2
 800cbac:	19ca      	adds	r2, r1, r7
 800cbae:	3307      	adds	r3, #7
 800cbb0:	7814      	ldrb	r4, [r2, #0]
 800cbb2:	7819      	ldrb	r1, [r3, #0]
 800cbb4:	2000      	movs	r0, #0
 800cbb6:	4001      	ands	r1, r0
 800cbb8:	1c08      	adds	r0, r1, #0
 800cbba:	1c21      	adds	r1, r4, #0
 800cbbc:	4301      	orrs	r1, r0
 800cbbe:	7019      	strb	r1, [r3, #0]
 800cbc0:	7850      	ldrb	r0, [r2, #1]
 800cbc2:	785a      	ldrb	r2, [r3, #1]
 800cbc4:	2100      	movs	r1, #0
 800cbc6:	400a      	ands	r2, r1
 800cbc8:	1c11      	adds	r1, r2, #0
 800cbca:	1c02      	adds	r2, r0, #0
 800cbcc:	430a      	orrs	r2, r1
 800cbce:	705a      	strb	r2, [r3, #1]
  index_input += 2;
 800cbd0:	197b      	adds	r3, r7, r5
 800cbd2:	197a      	adds	r2, r7, r5
 800cbd4:	7812      	ldrb	r2, [r2, #0]
 800cbd6:	3202      	adds	r2, #2
 800cbd8:	701a      	strb	r2, [r3, #0]
  cp0->Value_Offset = htob(Value_Offset, 2);
 800cbda:	19b9      	adds	r1, r7, r6
 800cbdc:	680b      	ldr	r3, [r1, #0]
 800cbde:	21a2      	movs	r1, #162	; 0xa2
 800cbe0:	0049      	lsls	r1, r1, #1
 800cbe2:	2208      	movs	r2, #8
 800cbe4:	1889      	adds	r1, r1, r2
 800cbe6:	19ca      	adds	r2, r1, r7
 800cbe8:	3309      	adds	r3, #9
 800cbea:	7814      	ldrb	r4, [r2, #0]
 800cbec:	7819      	ldrb	r1, [r3, #0]
 800cbee:	2000      	movs	r0, #0
 800cbf0:	4001      	ands	r1, r0
 800cbf2:	1c08      	adds	r0, r1, #0
 800cbf4:	1c21      	adds	r1, r4, #0
 800cbf6:	4301      	orrs	r1, r0
 800cbf8:	7019      	strb	r1, [r3, #0]
 800cbfa:	7850      	ldrb	r0, [r2, #1]
 800cbfc:	785a      	ldrb	r2, [r3, #1]
 800cbfe:	2100      	movs	r1, #0
 800cc00:	400a      	ands	r2, r1
 800cc02:	1c11      	adds	r1, r2, #0
 800cc04:	1c02      	adds	r2, r0, #0
 800cc06:	430a      	orrs	r2, r1
 800cc08:	705a      	strb	r2, [r3, #1]
  index_input += 2;
 800cc0a:	002c      	movs	r4, r5
 800cc0c:	193b      	adds	r3, r7, r4
 800cc0e:	193a      	adds	r2, r7, r4
 800cc10:	7812      	ldrb	r2, [r2, #0]
 800cc12:	3202      	adds	r2, #2
 800cc14:	701a      	strb	r2, [r3, #0]
  cp0->Value_Length = htob(Value_Length, 1);
 800cc16:	19b9      	adds	r1, r7, r6
 800cc18:	680b      	ldr	r3, [r1, #0]
 800cc1a:	21a4      	movs	r1, #164	; 0xa4
 800cc1c:	0049      	lsls	r1, r1, #1
 800cc1e:	2208      	movs	r2, #8
 800cc20:	1888      	adds	r0, r1, r2
 800cc22:	19c2      	adds	r2, r0, r7
 800cc24:	7812      	ldrb	r2, [r2, #0]
 800cc26:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800cc28:	193b      	adds	r3, r7, r4
 800cc2a:	193a      	adds	r2, r7, r4
 800cc2c:	7812      	ldrb	r2, [r2, #0]
 800cc2e:	3201      	adds	r2, #1
 800cc30:	701a      	strb	r2, [r3, #0]
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Value, (const void *) Value, Value_Length*sizeof(uint8_t));
 800cc32:	19b8      	adds	r0, r7, r6
 800cc34:	6803      	ldr	r3, [r0, #0]
 800cc36:	0018      	movs	r0, r3
 800cc38:	300c      	adds	r0, #12
 800cc3a:	000d      	movs	r5, r1
 800cc3c:	2608      	movs	r6, #8
 800cc3e:	198b      	adds	r3, r1, r6
 800cc40:	19db      	adds	r3, r3, r7
 800cc42:	781a      	ldrb	r2, [r3, #0]
 800cc44:	21a6      	movs	r1, #166	; 0xa6
 800cc46:	0049      	lsls	r1, r1, #1
 800cc48:	198b      	adds	r3, r1, r6
 800cc4a:	19d9      	adds	r1, r3, r7
 800cc4c:	680b      	ldr	r3, [r1, #0]
 800cc4e:	0019      	movs	r1, r3
 800cc50:	f001 fd48 	bl	800e6e4 <memcpy>
    index_input += Value_Length*sizeof(uint8_t);
 800cc54:	193b      	adds	r3, r7, r4
 800cc56:	1939      	adds	r1, r7, r4
 800cc58:	19aa      	adds	r2, r5, r6
 800cc5a:	19d2      	adds	r2, r2, r7
 800cc5c:	7809      	ldrb	r1, [r1, #0]
 800cc5e:	7812      	ldrb	r2, [r2, #0]
 800cc60:	188a      	adds	r2, r1, r2
 800cc62:	701a      	strb	r2, [r3, #0]
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800cc64:	2588      	movs	r5, #136	; 0x88
 800cc66:	006d      	lsls	r5, r5, #1
 800cc68:	197b      	adds	r3, r7, r5
 800cc6a:	2218      	movs	r2, #24
 800cc6c:	2100      	movs	r1, #0
 800cc6e:	0018      	movs	r0, r3
 800cc70:	f001 fca6 	bl	800e5c0 <memset>
  rq.ogf = 0x3f;
 800cc74:	0029      	movs	r1, r5
 800cc76:	187b      	adds	r3, r7, r1
 800cc78:	223f      	movs	r2, #63	; 0x3f
 800cc7a:	801a      	strh	r2, [r3, #0]
  rq.ocf = 0x12c;
 800cc7c:	187b      	adds	r3, r7, r1
 800cc7e:	2296      	movs	r2, #150	; 0x96
 800cc80:	0052      	lsls	r2, r2, #1
 800cc82:	805a      	strh	r2, [r3, #2]
  rq.cparam = cmd_buffer;
 800cc84:	187b      	adds	r3, r7, r1
 800cc86:	220c      	movs	r2, #12
 800cc88:	18ba      	adds	r2, r7, r2
 800cc8a:	609a      	str	r2, [r3, #8]
  rq.clen = index_input;
 800cc8c:	193b      	adds	r3, r7, r4
 800cc8e:	781a      	ldrb	r2, [r3, #0]
 800cc90:	187b      	adds	r3, r7, r1
 800cc92:	60da      	str	r2, [r3, #12]
  rq.rparam = &status;
 800cc94:	187b      	adds	r3, r7, r1
 800cc96:	220b      	movs	r2, #11
 800cc98:	18ba      	adds	r2, r7, r2
 800cc9a:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 800cc9c:	187b      	adds	r3, r7, r1
 800cc9e:	2201      	movs	r2, #1
 800cca0:	615a      	str	r2, [r3, #20]
  if (hci_send_req(&rq, FALSE) < 0)
 800cca2:	187b      	adds	r3, r7, r1
 800cca4:	2100      	movs	r1, #0
 800cca6:	0018      	movs	r0, r3
 800cca8:	f000 fa3e 	bl	800d128 <hci_send_req>
 800ccac:	1e03      	subs	r3, r0, #0
 800ccae:	da01      	bge.n	800ccb4 <aci_gatt_update_char_value_ext+0x230>
    return BLE_STATUS_TIMEOUT;
 800ccb0:	23ff      	movs	r3, #255	; 0xff
 800ccb2:	e00d      	b.n	800ccd0 <aci_gatt_update_char_value_ext+0x24c>
  if (status) {
 800ccb4:	4b0c      	ldr	r3, [pc, #48]	; (800cce8 <aci_gatt_update_char_value_ext+0x264>)
 800ccb6:	2298      	movs	r2, #152	; 0x98
 800ccb8:	0052      	lsls	r2, r2, #1
 800ccba:	189b      	adds	r3, r3, r2
 800ccbc:	19db      	adds	r3, r3, r7
 800ccbe:	781b      	ldrb	r3, [r3, #0]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d004      	beq.n	800ccce <aci_gatt_update_char_value_ext+0x24a>
    return status;
 800ccc4:	4b08      	ldr	r3, [pc, #32]	; (800cce8 <aci_gatt_update_char_value_ext+0x264>)
 800ccc6:	189b      	adds	r3, r3, r2
 800ccc8:	19db      	adds	r3, r3, r7
 800ccca:	781b      	ldrb	r3, [r3, #0]
 800cccc:	e000      	b.n	800ccd0 <aci_gatt_update_char_value_ext+0x24c>
  }
  return BLE_STATUS_SUCCESS;
 800ccce:	2300      	movs	r3, #0
}
 800ccd0:	0018      	movs	r0, r3
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	b04d      	add	sp, #308	; 0x134
 800ccd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccd8:	fffffed6 	.word	0xfffffed6
 800ccdc:	fffffed4 	.word	0xfffffed4
 800cce0:	fffffed2 	.word	0xfffffed2
 800cce4:	fffffed1 	.word	0xfffffed1
 800cce8:	fffffedb 	.word	0xfffffedb

0800ccec <aci_hal_write_config_data>:
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 800ccec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccee:	b0cd      	sub	sp, #308	; 0x134
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	603a      	str	r2, [r7, #0]
 800ccf4:	4b41      	ldr	r3, [pc, #260]	; (800cdfc <aci_hal_write_config_data+0x110>)
 800ccf6:	2498      	movs	r4, #152	; 0x98
 800ccf8:	0064      	lsls	r4, r4, #1
 800ccfa:	191b      	adds	r3, r3, r4
 800ccfc:	19db      	adds	r3, r3, r7
 800ccfe:	1c02      	adds	r2, r0, #0
 800cd00:	701a      	strb	r2, [r3, #0]
 800cd02:	4b3f      	ldr	r3, [pc, #252]	; (800ce00 <aci_hal_write_config_data+0x114>)
 800cd04:	0020      	movs	r0, r4
 800cd06:	181b      	adds	r3, r3, r0
 800cd08:	19db      	adds	r3, r3, r7
 800cd0a:	1c0a      	adds	r2, r1, #0
 800cd0c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800cd0e:	260c      	movs	r6, #12
 800cd10:	19bb      	adds	r3, r7, r6
 800cd12:	2596      	movs	r5, #150	; 0x96
 800cd14:	006d      	lsls	r5, r5, #1
 800cd16:	197a      	adds	r2, r7, r5
 800cd18:	6013      	str	r3, [r2, #0]
  tBleStatus status = 0;
 800cd1a:	4b3a      	ldr	r3, [pc, #232]	; (800ce04 <aci_hal_write_config_data+0x118>)
 800cd1c:	0001      	movs	r1, r0
 800cd1e:	185b      	adds	r3, r3, r1
 800cd20:	19db      	adds	r3, r3, r7
 800cd22:	2200      	movs	r2, #0
 800cd24:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800cd26:	242c      	movs	r4, #44	; 0x2c
 800cd28:	34ff      	adds	r4, #255	; 0xff
 800cd2a:	193b      	adds	r3, r7, r4
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	701a      	strb	r2, [r3, #0]
  cp0->Offset = htob(Offset, 1);
 800cd30:	0028      	movs	r0, r5
 800cd32:	183b      	adds	r3, r7, r0
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	4a31      	ldr	r2, [pc, #196]	; (800cdfc <aci_hal_write_config_data+0x110>)
 800cd38:	1852      	adds	r2, r2, r1
 800cd3a:	19d2      	adds	r2, r2, r7
 800cd3c:	7812      	ldrb	r2, [r2, #0]
 800cd3e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800cd40:	193b      	adds	r3, r7, r4
 800cd42:	193a      	adds	r2, r7, r4
 800cd44:	7812      	ldrb	r2, [r2, #0]
 800cd46:	3201      	adds	r2, #1
 800cd48:	701a      	strb	r2, [r3, #0]
  cp0->Length = htob(Length, 1);
 800cd4a:	183b      	adds	r3, r7, r0
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	4a2c      	ldr	r2, [pc, #176]	; (800ce00 <aci_hal_write_config_data+0x114>)
 800cd50:	1852      	adds	r2, r2, r1
 800cd52:	19d2      	adds	r2, r2, r7
 800cd54:	7812      	ldrb	r2, [r2, #0]
 800cd56:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800cd58:	193b      	adds	r3, r7, r4
 800cd5a:	193a      	adds	r2, r7, r4
 800cd5c:	7812      	ldrb	r2, [r2, #0]
 800cd5e:	3201      	adds	r2, #1
 800cd60:	701a      	strb	r2, [r3, #0]
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Value, (const void *) Value, Length*sizeof(uint8_t));
 800cd62:	183b      	adds	r3, r7, r0
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	1c98      	adds	r0, r3, #2
 800cd68:	4b25      	ldr	r3, [pc, #148]	; (800ce00 <aci_hal_write_config_data+0x114>)
 800cd6a:	000d      	movs	r5, r1
 800cd6c:	185b      	adds	r3, r3, r1
 800cd6e:	19db      	adds	r3, r3, r7
 800cd70:	781a      	ldrb	r2, [r3, #0]
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	0019      	movs	r1, r3
 800cd76:	f001 fcb5 	bl	800e6e4 <memcpy>
    index_input += Length*sizeof(uint8_t);
 800cd7a:	193b      	adds	r3, r7, r4
 800cd7c:	1939      	adds	r1, r7, r4
 800cd7e:	4a20      	ldr	r2, [pc, #128]	; (800ce00 <aci_hal_write_config_data+0x114>)
 800cd80:	1952      	adds	r2, r2, r5
 800cd82:	19d2      	adds	r2, r2, r7
 800cd84:	7809      	ldrb	r1, [r1, #0]
 800cd86:	7812      	ldrb	r2, [r2, #0]
 800cd88:	188a      	adds	r2, r1, r2
 800cd8a:	701a      	strb	r2, [r3, #0]
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800cd8c:	2588      	movs	r5, #136	; 0x88
 800cd8e:	006d      	lsls	r5, r5, #1
 800cd90:	197b      	adds	r3, r7, r5
 800cd92:	2218      	movs	r2, #24
 800cd94:	2100      	movs	r1, #0
 800cd96:	0018      	movs	r0, r3
 800cd98:	f001 fc12 	bl	800e5c0 <memset>
  rq.ogf = 0x3f;
 800cd9c:	0029      	movs	r1, r5
 800cd9e:	187b      	adds	r3, r7, r1
 800cda0:	223f      	movs	r2, #63	; 0x3f
 800cda2:	801a      	strh	r2, [r3, #0]
  rq.ocf = 0x00c;
 800cda4:	187b      	adds	r3, r7, r1
 800cda6:	220c      	movs	r2, #12
 800cda8:	805a      	strh	r2, [r3, #2]
  rq.cparam = cmd_buffer;
 800cdaa:	187b      	adds	r3, r7, r1
 800cdac:	19ba      	adds	r2, r7, r6
 800cdae:	609a      	str	r2, [r3, #8]
  rq.clen = index_input;
 800cdb0:	193b      	adds	r3, r7, r4
 800cdb2:	781a      	ldrb	r2, [r3, #0]
 800cdb4:	187b      	adds	r3, r7, r1
 800cdb6:	60da      	str	r2, [r3, #12]
  rq.rparam = &status;
 800cdb8:	187b      	adds	r3, r7, r1
 800cdba:	220b      	movs	r2, #11
 800cdbc:	18ba      	adds	r2, r7, r2
 800cdbe:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 800cdc0:	187b      	adds	r3, r7, r1
 800cdc2:	2201      	movs	r2, #1
 800cdc4:	615a      	str	r2, [r3, #20]
  if (hci_send_req(&rq, FALSE) < 0)
 800cdc6:	187b      	adds	r3, r7, r1
 800cdc8:	2100      	movs	r1, #0
 800cdca:	0018      	movs	r0, r3
 800cdcc:	f000 f9ac 	bl	800d128 <hci_send_req>
 800cdd0:	1e03      	subs	r3, r0, #0
 800cdd2:	da01      	bge.n	800cdd8 <aci_hal_write_config_data+0xec>
    return BLE_STATUS_TIMEOUT;
 800cdd4:	23ff      	movs	r3, #255	; 0xff
 800cdd6:	e00d      	b.n	800cdf4 <aci_hal_write_config_data+0x108>
  if (status) {
 800cdd8:	4b0a      	ldr	r3, [pc, #40]	; (800ce04 <aci_hal_write_config_data+0x118>)
 800cdda:	2298      	movs	r2, #152	; 0x98
 800cddc:	0052      	lsls	r2, r2, #1
 800cdde:	189b      	adds	r3, r3, r2
 800cde0:	19db      	adds	r3, r3, r7
 800cde2:	781b      	ldrb	r3, [r3, #0]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d004      	beq.n	800cdf2 <aci_hal_write_config_data+0x106>
    return status;
 800cde8:	4b06      	ldr	r3, [pc, #24]	; (800ce04 <aci_hal_write_config_data+0x118>)
 800cdea:	189b      	adds	r3, r3, r2
 800cdec:	19db      	adds	r3, r3, r7
 800cdee:	781b      	ldrb	r3, [r3, #0]
 800cdf0:	e000      	b.n	800cdf4 <aci_hal_write_config_data+0x108>
  }
  return BLE_STATUS_SUCCESS;
 800cdf2:	2300      	movs	r3, #0
}
 800cdf4:	0018      	movs	r0, r3
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	b04d      	add	sp, #308	; 0x134
 800cdfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdfc:	fffffed7 	.word	0xfffffed7
 800ce00:	fffffed6 	.word	0xfffffed6
 800ce04:	fffffedb 	.word	0xfffffedb

0800ce08 <aci_hal_set_tx_power_level>:
  BLUENRG_memcpy((void *) Data, (const void *) resp.Data, *Data_Length*sizeof(uint8_t));
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 800ce08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce0a:	b0cd      	sub	sp, #308	; 0x134
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	0002      	movs	r2, r0
 800ce10:	4b36      	ldr	r3, [pc, #216]	; (800ceec <aci_hal_set_tx_power_level+0xe4>)
 800ce12:	2098      	movs	r0, #152	; 0x98
 800ce14:	0040      	lsls	r0, r0, #1
 800ce16:	181b      	adds	r3, r3, r0
 800ce18:	19db      	adds	r3, r3, r7
 800ce1a:	701a      	strb	r2, [r3, #0]
 800ce1c:	4b34      	ldr	r3, [pc, #208]	; (800cef0 <aci_hal_set_tx_power_level+0xe8>)
 800ce1e:	181b      	adds	r3, r3, r0
 800ce20:	19db      	adds	r3, r3, r7
 800ce22:	1c0a      	adds	r2, r1, #0
 800ce24:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800ce26:	260c      	movs	r6, #12
 800ce28:	19bb      	adds	r3, r7, r6
 800ce2a:	2496      	movs	r4, #150	; 0x96
 800ce2c:	0064      	lsls	r4, r4, #1
 800ce2e:	193a      	adds	r2, r7, r4
 800ce30:	6013      	str	r3, [r2, #0]
  tBleStatus status = 0;
 800ce32:	4b30      	ldr	r3, [pc, #192]	; (800cef4 <aci_hal_set_tx_power_level+0xec>)
 800ce34:	0001      	movs	r1, r0
 800ce36:	185b      	adds	r3, r3, r1
 800ce38:	19db      	adds	r3, r3, r7
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800ce3e:	252c      	movs	r5, #44	; 0x2c
 800ce40:	35ff      	adds	r5, #255	; 0xff
 800ce42:	197b      	adds	r3, r7, r5
 800ce44:	2200      	movs	r2, #0
 800ce46:	701a      	strb	r2, [r3, #0]
  cp0->En_High_Power = htob(En_High_Power, 1);
 800ce48:	0020      	movs	r0, r4
 800ce4a:	183b      	adds	r3, r7, r0
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	4a27      	ldr	r2, [pc, #156]	; (800ceec <aci_hal_set_tx_power_level+0xe4>)
 800ce50:	1852      	adds	r2, r2, r1
 800ce52:	19d2      	adds	r2, r2, r7
 800ce54:	7812      	ldrb	r2, [r2, #0]
 800ce56:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ce58:	197b      	adds	r3, r7, r5
 800ce5a:	197a      	adds	r2, r7, r5
 800ce5c:	7812      	ldrb	r2, [r2, #0]
 800ce5e:	3201      	adds	r2, #1
 800ce60:	701a      	strb	r2, [r3, #0]
  cp0->PA_Level = htob(PA_Level, 1);
 800ce62:	183b      	adds	r3, r7, r0
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	4a22      	ldr	r2, [pc, #136]	; (800cef0 <aci_hal_set_tx_power_level+0xe8>)
 800ce68:	1852      	adds	r2, r2, r1
 800ce6a:	19d2      	adds	r2, r2, r7
 800ce6c:	7812      	ldrb	r2, [r2, #0]
 800ce6e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800ce70:	197b      	adds	r3, r7, r5
 800ce72:	197a      	adds	r2, r7, r5
 800ce74:	7812      	ldrb	r2, [r2, #0]
 800ce76:	3201      	adds	r2, #1
 800ce78:	701a      	strb	r2, [r3, #0]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ce7a:	2488      	movs	r4, #136	; 0x88
 800ce7c:	0064      	lsls	r4, r4, #1
 800ce7e:	193b      	adds	r3, r7, r4
 800ce80:	2218      	movs	r2, #24
 800ce82:	2100      	movs	r1, #0
 800ce84:	0018      	movs	r0, r3
 800ce86:	f001 fb9b 	bl	800e5c0 <memset>
  rq.ogf = 0x3f;
 800ce8a:	0021      	movs	r1, r4
 800ce8c:	187b      	adds	r3, r7, r1
 800ce8e:	223f      	movs	r2, #63	; 0x3f
 800ce90:	801a      	strh	r2, [r3, #0]
  rq.ocf = 0x00f;
 800ce92:	187b      	adds	r3, r7, r1
 800ce94:	220f      	movs	r2, #15
 800ce96:	805a      	strh	r2, [r3, #2]
  rq.cparam = cmd_buffer;
 800ce98:	187b      	adds	r3, r7, r1
 800ce9a:	19ba      	adds	r2, r7, r6
 800ce9c:	609a      	str	r2, [r3, #8]
  rq.clen = index_input;
 800ce9e:	197b      	adds	r3, r7, r5
 800cea0:	781a      	ldrb	r2, [r3, #0]
 800cea2:	187b      	adds	r3, r7, r1
 800cea4:	60da      	str	r2, [r3, #12]
  rq.rparam = &status;
 800cea6:	187b      	adds	r3, r7, r1
 800cea8:	220b      	movs	r2, #11
 800ceaa:	18ba      	adds	r2, r7, r2
 800ceac:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 800ceae:	187b      	adds	r3, r7, r1
 800ceb0:	2201      	movs	r2, #1
 800ceb2:	615a      	str	r2, [r3, #20]
  if (hci_send_req(&rq, FALSE) < 0)
 800ceb4:	187b      	adds	r3, r7, r1
 800ceb6:	2100      	movs	r1, #0
 800ceb8:	0018      	movs	r0, r3
 800ceba:	f000 f935 	bl	800d128 <hci_send_req>
 800cebe:	1e03      	subs	r3, r0, #0
 800cec0:	da01      	bge.n	800cec6 <aci_hal_set_tx_power_level+0xbe>
    return BLE_STATUS_TIMEOUT;
 800cec2:	23ff      	movs	r3, #255	; 0xff
 800cec4:	e00d      	b.n	800cee2 <aci_hal_set_tx_power_level+0xda>
  if (status) {
 800cec6:	4b0b      	ldr	r3, [pc, #44]	; (800cef4 <aci_hal_set_tx_power_level+0xec>)
 800cec8:	2298      	movs	r2, #152	; 0x98
 800ceca:	0052      	lsls	r2, r2, #1
 800cecc:	189b      	adds	r3, r3, r2
 800cece:	19db      	adds	r3, r3, r7
 800ced0:	781b      	ldrb	r3, [r3, #0]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d004      	beq.n	800cee0 <aci_hal_set_tx_power_level+0xd8>
    return status;
 800ced6:	4b07      	ldr	r3, [pc, #28]	; (800cef4 <aci_hal_set_tx_power_level+0xec>)
 800ced8:	189b      	adds	r3, r3, r2
 800ceda:	19db      	adds	r3, r3, r7
 800cedc:	781b      	ldrb	r3, [r3, #0]
 800cede:	e000      	b.n	800cee2 <aci_hal_set_tx_power_level+0xda>
  }
  return BLE_STATUS_SUCCESS;
 800cee0:	2300      	movs	r3, #0
}
 800cee2:	0018      	movs	r0, r3
 800cee4:	46bd      	mov	sp, r7
 800cee6:	b04d      	add	sp, #308	; 0x134
 800cee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ceea:	46c0      	nop			; (mov r8, r8)
 800ceec:	fffffed7 	.word	0xfffffed7
 800cef0:	fffffed6 	.word	0xfffffed6
 800cef4:	fffffedb 	.word	0xfffffedb

0800cef8 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b084      	sub	sp, #16
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	3308      	adds	r3, #8
 800cf04:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	781b      	ldrb	r3, [r3, #0]
 800cf0a:	2b04      	cmp	r3, #4
 800cf0c:	d001      	beq.n	800cf12 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 800cf0e:	2301      	movs	r3, #1
 800cf10:	e00c      	b.n	800cf2c <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	3302      	adds	r3, #2
 800cf16:	781b      	ldrb	r3, [r3, #0]
 800cf18:	0019      	movs	r1, r3
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2288      	movs	r2, #136	; 0x88
 800cf1e:	5c9b      	ldrb	r3, [r3, r2]
 800cf20:	3b03      	subs	r3, #3
 800cf22:	4299      	cmp	r1, r3
 800cf24:	d001      	beq.n	800cf2a <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 800cf26:	2302      	movs	r3, #2
 800cf28:	e000      	b.n	800cf2c <verify_packet+0x34>
  
  return 0;      
 800cf2a:	2300      	movs	r3, #0
}
 800cf2c:	0018      	movs	r0, r3
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	b004      	add	sp, #16
 800cf32:	bd80      	pop	{r7, pc}

0800cf34 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 800cf34:	b5b0      	push	{r4, r5, r7, lr}
 800cf36:	b0a6      	sub	sp, #152	; 0x98
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	0004      	movs	r4, r0
 800cf3c:	0008      	movs	r0, r1
 800cf3e:	0011      	movs	r1, r2
 800cf40:	607b      	str	r3, [r7, #4]
 800cf42:	250e      	movs	r5, #14
 800cf44:	197b      	adds	r3, r7, r5
 800cf46:	1c22      	adds	r2, r4, #0
 800cf48:	801a      	strh	r2, [r3, #0]
 800cf4a:	240c      	movs	r4, #12
 800cf4c:	193b      	adds	r3, r7, r4
 800cf4e:	1c02      	adds	r2, r0, #0
 800cf50:	801a      	strh	r2, [r3, #0]
 800cf52:	200b      	movs	r0, #11
 800cf54:	183b      	adds	r3, r7, r0
 800cf56:	1c0a      	adds	r2, r1, #0
 800cf58:	701a      	strb	r2, [r3, #0]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800cf5a:	193b      	adds	r3, r7, r4
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	5e9b      	ldrsh	r3, [r3, r2]
 800cf60:	059b      	lsls	r3, r3, #22
 800cf62:	0d9b      	lsrs	r3, r3, #22
 800cf64:	b21a      	sxth	r2, r3
 800cf66:	197b      	adds	r3, r7, r5
 800cf68:	881b      	ldrh	r3, [r3, #0]
 800cf6a:	029b      	lsls	r3, r3, #10
 800cf6c:	b21b      	sxth	r3, r3
 800cf6e:	4313      	orrs	r3, r2
 800cf70:	b21b      	sxth	r3, r3
 800cf72:	b29a      	uxth	r2, r3
 800cf74:	2114      	movs	r1, #20
 800cf76:	187b      	adds	r3, r7, r1
 800cf78:	801a      	strh	r2, [r3, #0]
  hc.plen = plen;
 800cf7a:	187b      	adds	r3, r7, r1
 800cf7c:	0004      	movs	r4, r0
 800cf7e:	183a      	adds	r2, r7, r0
 800cf80:	7812      	ldrb	r2, [r2, #0]
 800cf82:	709a      	strb	r2, [r3, #2]

  payload[0] = HCI_COMMAND_PKT;
 800cf84:	2518      	movs	r5, #24
 800cf86:	197b      	adds	r3, r7, r5
 800cf88:	2201      	movs	r2, #1
 800cf8a:	701a      	strb	r2, [r3, #0]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800cf8c:	197b      	adds	r3, r7, r5
 800cf8e:	3301      	adds	r3, #1
 800cf90:	187a      	adds	r2, r7, r1
 800cf92:	0018      	movs	r0, r3
 800cf94:	0011      	movs	r1, r2
 800cf96:	2303      	movs	r3, #3
 800cf98:	001a      	movs	r2, r3
 800cf9a:	f001 fba3 	bl	800e6e4 <memcpy>
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800cf9e:	197b      	adds	r3, r7, r5
 800cfa0:	3304      	adds	r3, #4
 800cfa2:	193a      	adds	r2, r7, r4
 800cfa4:	7812      	ldrb	r2, [r2, #0]
 800cfa6:	6879      	ldr	r1, [r7, #4]
 800cfa8:	0018      	movs	r0, r3
 800cfaa:	f001 fb9b 	bl	800e6e4 <memcpy>
  
  if (hciContext.io.Send)
 800cfae:	4b09      	ldr	r3, [pc, #36]	; (800cfd4 <send_cmd+0xa0>)
 800cfb0:	691b      	ldr	r3, [r3, #16]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d009      	beq.n	800cfca <send_cmd+0x96>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 800cfb6:	4b07      	ldr	r3, [pc, #28]	; (800cfd4 <send_cmd+0xa0>)
 800cfb8:	691b      	ldr	r3, [r3, #16]
 800cfba:	193a      	adds	r2, r7, r4
 800cfbc:	7812      	ldrb	r2, [r2, #0]
 800cfbe:	b292      	uxth	r2, r2
 800cfc0:	3204      	adds	r2, #4
 800cfc2:	b291      	uxth	r1, r2
 800cfc4:	197a      	adds	r2, r7, r5
 800cfc6:	0010      	movs	r0, r2
 800cfc8:	4798      	blx	r3
  }
}
 800cfca:	46c0      	nop			; (mov r8, r8)
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	b026      	add	sp, #152	; 0x98
 800cfd0:	bdb0      	pop	{r4, r5, r7, pc}
 800cfd2:	46c0      	nop			; (mov r8, r8)
 800cfd4:	20000b7c 	.word	0x20000b7c

0800cfd8 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b084      	sub	sp, #16
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
 800cfe0:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 800cfe2:	e00c      	b.n	800cffe <move_list+0x26>
  {
    list_remove_tail(src_list, &tmp_node);
 800cfe4:	230c      	movs	r3, #12
 800cfe6:	18fa      	adds	r2, r7, r3
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	0011      	movs	r1, r2
 800cfec:	0018      	movs	r0, r3
 800cfee:	f000 fb0f 	bl	800d610 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 800cff2:	68fa      	ldr	r2, [r7, #12]
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	0011      	movs	r1, r2
 800cff8:	0018      	movs	r0, r3
 800cffa:	f000 fa7b 	bl	800d4f4 <list_insert_head>
  while (!list_is_empty(src_list))
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	0018      	movs	r0, r3
 800d002:	f000 fa51 	bl	800d4a8 <list_is_empty>
 800d006:	1e03      	subs	r3, r0, #0
 800d008:	d0ec      	beq.n	800cfe4 <move_list+0xc>
  }
}
 800d00a:	46c0      	nop			; (mov r8, r8)
 800d00c:	46c0      	nop			; (mov r8, r8)
 800d00e:	46bd      	mov	sp, r7
 800d010:	b004      	add	sp, #16
 800d012:	bd80      	pop	{r7, pc}

0800d014 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b082      	sub	sp, #8
 800d018:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800d01a:	e00b      	b.n	800d034 <free_event_list+0x20>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800d01c:	1d3a      	adds	r2, r7, #4
 800d01e:	4b0b      	ldr	r3, [pc, #44]	; (800d04c <free_event_list+0x38>)
 800d020:	0011      	movs	r1, r2
 800d022:	0018      	movs	r0, r3
 800d024:	f000 facd 	bl	800d5c2 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800d028:	687a      	ldr	r2, [r7, #4]
 800d02a:	4b09      	ldr	r3, [pc, #36]	; (800d050 <free_event_list+0x3c>)
 800d02c:	0011      	movs	r1, r2
 800d02e:	0018      	movs	r0, r3
 800d030:	f000 fa84 	bl	800d53c <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800d034:	4b06      	ldr	r3, [pc, #24]	; (800d050 <free_event_list+0x3c>)
 800d036:	0018      	movs	r0, r3
 800d038:	f000 fb11 	bl	800d65e <list_get_size>
 800d03c:	0003      	movs	r3, r0
 800d03e:	2b04      	cmp	r3, #4
 800d040:	ddec      	ble.n	800d01c <free_event_list+0x8>
  }
}
 800d042:	46c0      	nop			; (mov r8, r8)
 800d044:	46c0      	nop			; (mov r8, r8)
 800d046:	46bd      	mov	sp, r7
 800d048:	b002      	add	sp, #8
 800d04a:	bd80      	pop	{r7, pc}
 800d04c:	200005fc 	.word	0x200005fc
 800d050:	200005f4 	.word	0x200005f4

0800d054 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800d054:	b590      	push	{r4, r7, lr}
 800d056:	b085      	sub	sp, #20
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
 800d05c:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d002      	beq.n	800d06a <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 800d064:	4b1d      	ldr	r3, [pc, #116]	; (800d0dc <hci_init+0x88>)
 800d066:	687a      	ldr	r2, [r7, #4]
 800d068:	61da      	str	r2, [r3, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800d06a:	4b1d      	ldr	r3, [pc, #116]	; (800d0e0 <hci_init+0x8c>)
 800d06c:	0018      	movs	r0, r3
 800d06e:	f000 fa0d 	bl	800d48c <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800d072:	4b1c      	ldr	r3, [pc, #112]	; (800d0e4 <hci_init+0x90>)
 800d074:	0018      	movs	r0, r3
 800d076:	f000 fa09 	bl	800d48c <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800d07a:	f7f6 fbed 	bl	8003858 <hci_tl_lowlevel_init>

  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800d07e:	230f      	movs	r3, #15
 800d080:	18fb      	adds	r3, r7, r3
 800d082:	2200      	movs	r2, #0
 800d084:	701a      	strb	r2, [r3, #0]
 800d086:	e010      	b.n	800d0aa <hci_init+0x56>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800d088:	240f      	movs	r4, #15
 800d08a:	193b      	adds	r3, r7, r4
 800d08c:	781b      	ldrb	r3, [r3, #0]
 800d08e:	228c      	movs	r2, #140	; 0x8c
 800d090:	435a      	muls	r2, r3
 800d092:	4b15      	ldr	r3, [pc, #84]	; (800d0e8 <hci_init+0x94>)
 800d094:	18d2      	adds	r2, r2, r3
 800d096:	4b12      	ldr	r3, [pc, #72]	; (800d0e0 <hci_init+0x8c>)
 800d098:	0011      	movs	r1, r2
 800d09a:	0018      	movs	r0, r3
 800d09c:	f000 fa4e 	bl	800d53c <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800d0a0:	193b      	adds	r3, r7, r4
 800d0a2:	781a      	ldrb	r2, [r3, #0]
 800d0a4:	193b      	adds	r3, r7, r4
 800d0a6:	3201      	adds	r2, #1
 800d0a8:	701a      	strb	r2, [r3, #0]
 800d0aa:	230f      	movs	r3, #15
 800d0ac:	18fb      	adds	r3, r7, r3
 800d0ae:	781b      	ldrb	r3, [r3, #0]
 800d0b0:	2b09      	cmp	r3, #9
 800d0b2:	d9e9      	bls.n	800d088 <hci_init+0x34>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800d0b4:	4b09      	ldr	r3, [pc, #36]	; (800d0dc <hci_init+0x88>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d003      	beq.n	800d0c4 <hci_init+0x70>
 800d0bc:	4b07      	ldr	r3, [pc, #28]	; (800d0dc <hci_init+0x88>)
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	2000      	movs	r0, #0
 800d0c2:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 800d0c4:	4b05      	ldr	r3, [pc, #20]	; (800d0dc <hci_init+0x88>)
 800d0c6:	689b      	ldr	r3, [r3, #8]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d002      	beq.n	800d0d2 <hci_init+0x7e>
 800d0cc:	4b03      	ldr	r3, [pc, #12]	; (800d0dc <hci_init+0x88>)
 800d0ce:	689b      	ldr	r3, [r3, #8]
 800d0d0:	4798      	blx	r3
}
 800d0d2:	46c0      	nop			; (mov r8, r8)
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	b005      	add	sp, #20
 800d0d8:	bd90      	pop	{r4, r7, pc}
 800d0da:	46c0      	nop			; (mov r8, r8)
 800d0dc:	20000b7c 	.word	0x20000b7c
 800d0e0:	200005f4 	.word	0x200005f4
 800d0e4:	200005fc 	.word	0x200005fc
 800d0e8:	20000604 	.word	0x20000604

0800d0ec <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b082      	sub	sp, #8
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681a      	ldr	r2, [r3, #0]
 800d0f8:	4b0a      	ldr	r3, [pc, #40]	; (800d124 <hci_register_io_bus+0x38>)
 800d0fa:	601a      	str	r2, [r3, #0]
  hciContext.io.Receive = fops->Receive;  
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	68da      	ldr	r2, [r3, #12]
 800d100:	4b08      	ldr	r3, [pc, #32]	; (800d124 <hci_register_io_bus+0x38>)
 800d102:	60da      	str	r2, [r3, #12]
  hciContext.io.Send    = fops->Send;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	691a      	ldr	r2, [r3, #16]
 800d108:	4b06      	ldr	r3, [pc, #24]	; (800d124 <hci_register_io_bus+0x38>)
 800d10a:	611a      	str	r2, [r3, #16]
  hciContext.io.GetTick = fops->GetTick;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	699a      	ldr	r2, [r3, #24]
 800d110:	4b04      	ldr	r3, [pc, #16]	; (800d124 <hci_register_io_bus+0x38>)
 800d112:	619a      	str	r2, [r3, #24]
  hciContext.io.Reset   = fops->Reset;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	689a      	ldr	r2, [r3, #8]
 800d118:	4b02      	ldr	r3, [pc, #8]	; (800d124 <hci_register_io_bus+0x38>)
 800d11a:	609a      	str	r2, [r3, #8]
}
 800d11c:	46c0      	nop			; (mov r8, r8)
 800d11e:	46bd      	mov	sp, r7
 800d120:	b002      	add	sp, #8
 800d122:	bd80      	pop	{r7, pc}
 800d124:	20000b7c 	.word	0x20000b7c

0800d128 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b08e      	sub	sp, #56	; 0x38
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
 800d130:	000a      	movs	r2, r1
 800d132:	1cfb      	adds	r3, r7, #3
 800d134:	701a      	strb	r2, [r3, #0]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	885b      	ldrh	r3, [r3, #2]
 800d13a:	b21b      	sxth	r3, r3
 800d13c:	059b      	lsls	r3, r3, #22
 800d13e:	0d9b      	lsrs	r3, r3, #22
 800d140:	b21a      	sxth	r2, r3
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	881b      	ldrh	r3, [r3, #0]
 800d146:	029b      	lsls	r3, r3, #10
 800d148:	b21b      	sxth	r3, r3
 800d14a:	4313      	orrs	r3, r2
 800d14c:	b21a      	sxth	r2, r3
 800d14e:	2336      	movs	r3, #54	; 0x36
 800d150:	18fb      	adds	r3, r7, r3
 800d152:	801a      	strh	r2, [r3, #0]
  hci_event_pckt *event_pckt;
  hci_spi_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800d154:	2300      	movs	r3, #0
 800d156:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800d158:	2308      	movs	r3, #8
 800d15a:	18fb      	adds	r3, r7, r3
 800d15c:	0018      	movs	r0, r3
 800d15e:	f000 f995 	bl	800d48c <list_init_head>

  free_event_list();
 800d162:	f7ff ff57 	bl	800d014 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	8818      	ldrh	r0, [r3, #0]
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	8859      	ldrh	r1, [r3, #2]
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	68db      	ldr	r3, [r3, #12]
 800d172:	b2da      	uxtb	r2, r3
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	689b      	ldr	r3, [r3, #8]
 800d178:	f7ff fedc 	bl	800cf34 <send_cmd>
  
  if (async)
 800d17c:	1cfb      	adds	r3, r7, #3
 800d17e:	781b      	ldrb	r3, [r3, #0]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d001      	beq.n	800d188 <hci_send_req+0x60>
  {
    return 0;
 800d184:	2300      	movs	r3, #0
 800d186:	e0f5      	b.n	800d374 <hci_send_req+0x24c>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 800d188:	f7f7 fd08 	bl	8004b9c <HAL_GetTick>
 800d18c:	0003      	movs	r3, r0
 800d18e:	633b      	str	r3, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800d190:	f7f7 fd04 	bl	8004b9c <HAL_GetTick>
 800d194:	0002      	movs	r2, r0
 800d196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d198:	1ad2      	subs	r2, r2, r3
 800d19a:	23fa      	movs	r3, #250	; 0xfa
 800d19c:	009b      	lsls	r3, r3, #2
 800d19e:	429a      	cmp	r2, r3
 800d1a0:	d900      	bls.n	800d1a4 <hci_send_req+0x7c>
 800d1a2:	e0bf      	b.n	800d324 <hci_send_req+0x1fc>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800d1a4:	4b75      	ldr	r3, [pc, #468]	; (800d37c <hci_send_req+0x254>)
 800d1a6:	0018      	movs	r0, r3
 800d1a8:	f000 f97e 	bl	800d4a8 <list_is_empty>
 800d1ac:	1e03      	subs	r3, r0, #0
 800d1ae:	d000      	beq.n	800d1b2 <hci_send_req+0x8a>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800d1b0:	e7ee      	b.n	800d190 <hci_send_req+0x68>
      {
        break;
 800d1b2:	46c0      	nop			; (mov r8, r8)
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800d1b4:	2310      	movs	r3, #16
 800d1b6:	18fa      	adds	r2, r7, r3
 800d1b8:	4b70      	ldr	r3, [pc, #448]	; (800d37c <hci_send_req+0x254>)
 800d1ba:	0011      	movs	r1, r2
 800d1bc:	0018      	movs	r0, r3
 800d1be:	f000 fa00 	bl	800d5c2 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800d1c2:	693b      	ldr	r3, [r7, #16]
 800d1c4:	3308      	adds	r3, #8
 800d1c6:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800d1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ca:	781b      	ldrb	r3, [r3, #0]
 800d1cc:	2b04      	cmp	r3, #4
 800d1ce:	d000      	beq.n	800d1d2 <hci_send_req+0xaa>
 800d1d0:	e089      	b.n	800d2e6 <hci_send_req+0x1be>
    {
      event_pckt = (void *)(hci_hdr->data);
 800d1d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1d4:	3301      	adds	r3, #1
 800d1d6:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800d1d8:	693b      	ldr	r3, [r7, #16]
 800d1da:	3308      	adds	r3, #8
 800d1dc:	3303      	adds	r3, #3
 800d1de:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800d1e0:	693b      	ldr	r3, [r7, #16]
 800d1e2:	2288      	movs	r2, #136	; 0x88
 800d1e4:	5c9b      	ldrb	r3, [r3, r2]
 800d1e6:	3b03      	subs	r3, #3
 800d1e8:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800d1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ec:	781b      	ldrb	r3, [r3, #0]
 800d1ee:	2b3e      	cmp	r3, #62	; 0x3e
 800d1f0:	d056      	beq.n	800d2a0 <hci_send_req+0x178>
 800d1f2:	dd00      	ble.n	800d1f6 <hci_send_req+0xce>
 800d1f4:	e072      	b.n	800d2dc <hci_send_req+0x1b4>
 800d1f6:	2b10      	cmp	r3, #16
 800d1f8:	d100      	bne.n	800d1fc <hci_send_req+0xd4>
 800d1fa:	e095      	b.n	800d328 <hci_send_req+0x200>
 800d1fc:	dd00      	ble.n	800d200 <hci_send_req+0xd8>
 800d1fe:	e06d      	b.n	800d2dc <hci_send_req+0x1b4>
 800d200:	2b0e      	cmp	r3, #14
 800d202:	d029      	beq.n	800d258 <hci_send_req+0x130>
 800d204:	2b0f      	cmp	r3, #15
 800d206:	d169      	bne.n	800d2dc <hci_send_req+0x1b4>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 800d208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d20a:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 800d20c:	69bb      	ldr	r3, [r7, #24]
 800d20e:	789a      	ldrb	r2, [r3, #2]
 800d210:	78db      	ldrb	r3, [r3, #3]
 800d212:	021b      	lsls	r3, r3, #8
 800d214:	4313      	orrs	r3, r2
 800d216:	b29b      	uxth	r3, r3
 800d218:	2236      	movs	r2, #54	; 0x36
 800d21a:	18ba      	adds	r2, r7, r2
 800d21c:	8812      	ldrh	r2, [r2, #0]
 800d21e:	429a      	cmp	r2, r3
 800d220:	d000      	beq.n	800d224 <hci_send_req+0xfc>
 800d222:	e083      	b.n	800d32c <hci_send_req+0x204>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	685b      	ldr	r3, [r3, #4]
 800d228:	2b0f      	cmp	r3, #15
 800d22a:	d004      	beq.n	800d236 <hci_send_req+0x10e>
          if (cs->status) {
 800d22c:	69bb      	ldr	r3, [r7, #24]
 800d22e:	781b      	ldrb	r3, [r3, #0]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d055      	beq.n	800d2e0 <hci_send_req+0x1b8>
            goto failed;
 800d234:	e07d      	b.n	800d332 <hci_send_req+0x20a>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	695a      	ldr	r2, [r3, #20]
 800d23a:	6a3b      	ldr	r3, [r7, #32]
 800d23c:	4293      	cmp	r3, r2
 800d23e:	d900      	bls.n	800d242 <hci_send_req+0x11a>
 800d240:	0013      	movs	r3, r2
 800d242:	687a      	ldr	r2, [r7, #4]
 800d244:	6153      	str	r3, [r2, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	6918      	ldr	r0, [r3, #16]
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	695a      	ldr	r2, [r3, #20]
 800d24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d250:	0019      	movs	r1, r3
 800d252:	f001 fa47 	bl	800e6e4 <memcpy>
        goto done;
 800d256:	e07f      	b.n	800d358 <hci_send_req+0x230>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 800d258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d25a:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 800d25c:	697b      	ldr	r3, [r7, #20]
 800d25e:	785a      	ldrb	r2, [r3, #1]
 800d260:	789b      	ldrb	r3, [r3, #2]
 800d262:	021b      	lsls	r3, r3, #8
 800d264:	4313      	orrs	r3, r2
 800d266:	b29b      	uxth	r3, r3
 800d268:	2236      	movs	r2, #54	; 0x36
 800d26a:	18ba      	adds	r2, r7, r2
 800d26c:	8812      	ldrh	r2, [r2, #0]
 800d26e:	429a      	cmp	r2, r3
 800d270:	d15e      	bne.n	800d330 <hci_send_req+0x208>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 800d272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d274:	3303      	adds	r3, #3
 800d276:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 800d278:	6a3b      	ldr	r3, [r7, #32]
 800d27a:	3b03      	subs	r3, #3
 800d27c:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	695a      	ldr	r2, [r3, #20]
 800d282:	6a3b      	ldr	r3, [r7, #32]
 800d284:	4293      	cmp	r3, r2
 800d286:	d900      	bls.n	800d28a <hci_send_req+0x162>
 800d288:	0013      	movs	r3, r2
 800d28a:	687a      	ldr	r2, [r7, #4]
 800d28c:	6153      	str	r3, [r2, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	6918      	ldr	r0, [r3, #16]
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	695a      	ldr	r2, [r3, #20]
 800d296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d298:	0019      	movs	r1, r3
 800d29a:	f001 fa23 	bl	800e6e4 <memcpy>
        goto done;
 800d29e:	e05b      	b.n	800d358 <hci_send_req+0x230>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 800d2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2a2:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 800d2a4:	69fb      	ldr	r3, [r7, #28]
 800d2a6:	781b      	ldrb	r3, [r3, #0]
 800d2a8:	001a      	movs	r2, r3
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	685b      	ldr	r3, [r3, #4]
 800d2ae:	429a      	cmp	r2, r3
 800d2b0:	d118      	bne.n	800d2e4 <hci_send_req+0x1bc>
          break;
      
        len -= 1;
 800d2b2:	6a3b      	ldr	r3, [r7, #32]
 800d2b4:	3b01      	subs	r3, #1
 800d2b6:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	695a      	ldr	r2, [r3, #20]
 800d2bc:	6a3b      	ldr	r3, [r7, #32]
 800d2be:	4293      	cmp	r3, r2
 800d2c0:	d900      	bls.n	800d2c4 <hci_send_req+0x19c>
 800d2c2:	0013      	movs	r3, r2
 800d2c4:	687a      	ldr	r2, [r7, #4]
 800d2c6:	6153      	str	r3, [r2, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	6918      	ldr	r0, [r3, #16]
 800d2cc:	69fb      	ldr	r3, [r7, #28]
 800d2ce:	1c59      	adds	r1, r3, #1
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	695b      	ldr	r3, [r3, #20]
 800d2d4:	001a      	movs	r2, r3
 800d2d6:	f001 fa05 	bl	800e6e4 <memcpy>
        goto done;
 800d2da:	e03d      	b.n	800d358 <hci_send_req+0x230>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 800d2dc:	46c0      	nop			; (mov r8, r8)
 800d2de:	e002      	b.n	800d2e6 <hci_send_req+0x1be>
          break;
 800d2e0:	46c0      	nop			; (mov r8, r8)
 800d2e2:	e000      	b.n	800d2e6 <hci_send_req+0x1be>
          break;
 800d2e4:	46c0      	nop			; (mov r8, r8)
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800d2e6:	4b26      	ldr	r3, [pc, #152]	; (800d380 <hci_send_req+0x258>)
 800d2e8:	0018      	movs	r0, r3
 800d2ea:	f000 f8dd 	bl	800d4a8 <list_is_empty>
 800d2ee:	1e03      	subs	r3, r0, #0
 800d2f0:	d00e      	beq.n	800d310 <hci_send_req+0x1e8>
 800d2f2:	4b22      	ldr	r3, [pc, #136]	; (800d37c <hci_send_req+0x254>)
 800d2f4:	0018      	movs	r0, r3
 800d2f6:	f000 f8d7 	bl	800d4a8 <list_is_empty>
 800d2fa:	1e03      	subs	r3, r0, #0
 800d2fc:	d008      	beq.n	800d310 <hci_send_req+0x1e8>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800d2fe:	693a      	ldr	r2, [r7, #16]
 800d300:	4b1f      	ldr	r3, [pc, #124]	; (800d380 <hci_send_req+0x258>)
 800d302:	0011      	movs	r1, r2
 800d304:	0018      	movs	r0, r3
 800d306:	f000 f919 	bl	800d53c <list_insert_tail>
      hciReadPacket=NULL;
 800d30a:	2300      	movs	r3, #0
 800d30c:	613b      	str	r3, [r7, #16]
 800d30e:	e008      	b.n	800d322 <hci_send_req+0x1fa>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800d310:	693a      	ldr	r2, [r7, #16]
 800d312:	2308      	movs	r3, #8
 800d314:	18fb      	adds	r3, r7, r3
 800d316:	0011      	movs	r1, r2
 800d318:	0018      	movs	r0, r3
 800d31a:	f000 f90f 	bl	800d53c <list_insert_tail>
      hciReadPacket=NULL;
 800d31e:	2300      	movs	r3, #0
 800d320:	613b      	str	r3, [r7, #16]
  {
 800d322:	e731      	b.n	800d188 <hci_send_req+0x60>
        goto failed;
 800d324:	46c0      	nop			; (mov r8, r8)
 800d326:	e004      	b.n	800d332 <hci_send_req+0x20a>
        goto failed;
 800d328:	46c0      	nop			; (mov r8, r8)
 800d32a:	e002      	b.n	800d332 <hci_send_req+0x20a>
          goto failed;
 800d32c:	46c0      	nop			; (mov r8, r8)
 800d32e:	e000      	b.n	800d332 <hci_send_req+0x20a>
          goto failed;
 800d330:	46c0      	nop			; (mov r8, r8)
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800d332:	693b      	ldr	r3, [r7, #16]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d005      	beq.n	800d344 <hci_send_req+0x21c>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800d338:	693a      	ldr	r2, [r7, #16]
 800d33a:	4b11      	ldr	r3, [pc, #68]	; (800d380 <hci_send_req+0x258>)
 800d33c:	0011      	movs	r1, r2
 800d33e:	0018      	movs	r0, r3
 800d340:	f000 f8d8 	bl	800d4f4 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800d344:	2308      	movs	r3, #8
 800d346:	18fa      	adds	r2, r7, r3
 800d348:	4b0c      	ldr	r3, [pc, #48]	; (800d37c <hci_send_req+0x254>)
 800d34a:	0011      	movs	r1, r2
 800d34c:	0018      	movs	r0, r3
 800d34e:	f7ff fe43 	bl	800cfd8 <move_list>

  return -1;
 800d352:	2301      	movs	r3, #1
 800d354:	425b      	negs	r3, r3
 800d356:	e00d      	b.n	800d374 <hci_send_req+0x24c>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800d358:	693a      	ldr	r2, [r7, #16]
 800d35a:	4b09      	ldr	r3, [pc, #36]	; (800d380 <hci_send_req+0x258>)
 800d35c:	0011      	movs	r1, r2
 800d35e:	0018      	movs	r0, r3
 800d360:	f000 f8c8 	bl	800d4f4 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800d364:	2308      	movs	r3, #8
 800d366:	18fa      	adds	r2, r7, r3
 800d368:	4b04      	ldr	r3, [pc, #16]	; (800d37c <hci_send_req+0x254>)
 800d36a:	0011      	movs	r1, r2
 800d36c:	0018      	movs	r0, r3
 800d36e:	f7ff fe33 	bl	800cfd8 <move_list>

  return 0;
 800d372:	2300      	movs	r3, #0
}
 800d374:	0018      	movs	r0, r3
 800d376:	46bd      	mov	sp, r7
 800d378:	b00e      	add	sp, #56	; 0x38
 800d37a:	bd80      	pop	{r7, pc}
 800d37c:	200005fc 	.word	0x200005fc
 800d380:	200005f4 	.word	0x200005f4

0800d384 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b082      	sub	sp, #8
 800d388:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 800d38a:	2300      	movs	r3, #0
 800d38c:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800d38e:	e015      	b.n	800d3bc <hci_user_evt_proc+0x38>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800d390:	1d3a      	adds	r2, r7, #4
 800d392:	4b10      	ldr	r3, [pc, #64]	; (800d3d4 <hci_user_evt_proc+0x50>)
 800d394:	0011      	movs	r1, r2
 800d396:	0018      	movs	r0, r3
 800d398:	f000 f913 	bl	800d5c2 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800d39c:	4b0e      	ldr	r3, [pc, #56]	; (800d3d8 <hci_user_evt_proc+0x54>)
 800d39e:	69db      	ldr	r3, [r3, #28]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d005      	beq.n	800d3b0 <hci_user_evt_proc+0x2c>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800d3a4:	4b0c      	ldr	r3, [pc, #48]	; (800d3d8 <hci_user_evt_proc+0x54>)
 800d3a6:	69db      	ldr	r3, [r3, #28]
 800d3a8:	687a      	ldr	r2, [r7, #4]
 800d3aa:	3208      	adds	r2, #8
 800d3ac:	0010      	movs	r0, r2
 800d3ae:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800d3b0:	687a      	ldr	r2, [r7, #4]
 800d3b2:	4b0a      	ldr	r3, [pc, #40]	; (800d3dc <hci_user_evt_proc+0x58>)
 800d3b4:	0011      	movs	r1, r2
 800d3b6:	0018      	movs	r0, r3
 800d3b8:	f000 f8c0 	bl	800d53c <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800d3bc:	4b05      	ldr	r3, [pc, #20]	; (800d3d4 <hci_user_evt_proc+0x50>)
 800d3be:	0018      	movs	r0, r3
 800d3c0:	f000 f872 	bl	800d4a8 <list_is_empty>
 800d3c4:	1e03      	subs	r3, r0, #0
 800d3c6:	d0e3      	beq.n	800d390 <hci_user_evt_proc+0xc>
  }
}
 800d3c8:	46c0      	nop			; (mov r8, r8)
 800d3ca:	46c0      	nop			; (mov r8, r8)
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	b002      	add	sp, #8
 800d3d0:	bd80      	pop	{r7, pc}
 800d3d2:	46c0      	nop			; (mov r8, r8)
 800d3d4:	200005fc 	.word	0x200005fc
 800d3d8:	20000b7c 	.word	0x20000b7c
 800d3dc:	200005f4 	.word	0x200005f4

0800d3e0 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b086      	sub	sp, #24
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800d3f0:	4b23      	ldr	r3, [pc, #140]	; (800d480 <hci_notify_asynch_evt+0xa0>)
 800d3f2:	0018      	movs	r0, r3
 800d3f4:	f000 f858 	bl	800d4a8 <list_is_empty>
 800d3f8:	1e03      	subs	r3, r0, #0
 800d3fa:	d13a      	bne.n	800d472 <hci_notify_asynch_evt+0x92>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800d3fc:	230c      	movs	r3, #12
 800d3fe:	18fa      	adds	r2, r7, r3
 800d400:	4b1f      	ldr	r3, [pc, #124]	; (800d480 <hci_notify_asynch_evt+0xa0>)
 800d402:	0011      	movs	r1, r2
 800d404:	0018      	movs	r0, r3
 800d406:	f000 f8dc 	bl	800d5c2 <list_remove_head>
    
    if (hciContext.io.Receive)
 800d40a:	4b1e      	ldr	r3, [pc, #120]	; (800d484 <hci_notify_asynch_evt+0xa4>)
 800d40c:	68db      	ldr	r3, [r3, #12]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d031      	beq.n	800d476 <hci_notify_asynch_evt+0x96>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800d412:	4b1c      	ldr	r3, [pc, #112]	; (800d484 <hci_notify_asynch_evt+0xa4>)
 800d414:	68db      	ldr	r3, [r3, #12]
 800d416:	68fa      	ldr	r2, [r7, #12]
 800d418:	3208      	adds	r2, #8
 800d41a:	2180      	movs	r1, #128	; 0x80
 800d41c:	0010      	movs	r0, r2
 800d41e:	4798      	blx	r3
 800d420:	0002      	movs	r2, r0
 800d422:	2113      	movs	r1, #19
 800d424:	187b      	adds	r3, r7, r1
 800d426:	701a      	strb	r2, [r3, #0]
      if (data_len > 0)
 800d428:	000a      	movs	r2, r1
 800d42a:	18bb      	adds	r3, r7, r2
 800d42c:	781b      	ldrb	r3, [r3, #0]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d018      	beq.n	800d464 <hci_notify_asynch_evt+0x84>
      {                    
        hciReadPacket->data_len = data_len;
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	18ba      	adds	r2, r7, r2
 800d436:	2188      	movs	r1, #136	; 0x88
 800d438:	7812      	ldrb	r2, [r2, #0]
 800d43a:	545a      	strb	r2, [r3, r1]
        if (verify_packet(hciReadPacket) == 0)
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	0018      	movs	r0, r3
 800d440:	f7ff fd5a 	bl	800cef8 <verify_packet>
 800d444:	1e03      	subs	r3, r0, #0
 800d446:	d106      	bne.n	800d456 <hci_notify_asynch_evt+0x76>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800d448:	68fa      	ldr	r2, [r7, #12]
 800d44a:	4b0f      	ldr	r3, [pc, #60]	; (800d488 <hci_notify_asynch_evt+0xa8>)
 800d44c:	0011      	movs	r1, r2
 800d44e:	0018      	movs	r0, r3
 800d450:	f000 f874 	bl	800d53c <list_insert_tail>
 800d454:	e00f      	b.n	800d476 <hci_notify_asynch_evt+0x96>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800d456:	68fa      	ldr	r2, [r7, #12]
 800d458:	4b09      	ldr	r3, [pc, #36]	; (800d480 <hci_notify_asynch_evt+0xa0>)
 800d45a:	0011      	movs	r1, r2
 800d45c:	0018      	movs	r0, r3
 800d45e:	f000 f849 	bl	800d4f4 <list_insert_head>
 800d462:	e008      	b.n	800d476 <hci_notify_asynch_evt+0x96>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800d464:	68fa      	ldr	r2, [r7, #12]
 800d466:	4b06      	ldr	r3, [pc, #24]	; (800d480 <hci_notify_asynch_evt+0xa0>)
 800d468:	0011      	movs	r1, r2
 800d46a:	0018      	movs	r0, r3
 800d46c:	f000 f842 	bl	800d4f4 <list_insert_head>
 800d470:	e001      	b.n	800d476 <hci_notify_asynch_evt+0x96>
      }
    }
  }
  else 
  {
    ret = 1;
 800d472:	2301      	movs	r3, #1
 800d474:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800d476:	697b      	ldr	r3, [r7, #20]
  
}
 800d478:	0018      	movs	r0, r3
 800d47a:	46bd      	mov	sp, r7
 800d47c:	b006      	add	sp, #24
 800d47e:	bd80      	pop	{r7, pc}
 800d480:	200005f4 	.word	0x200005f4
 800d484:	20000b7c 	.word	0x20000b7c
 800d488:	200005fc 	.word	0x200005fc

0800d48c <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b082      	sub	sp, #8
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	687a      	ldr	r2, [r7, #4]
 800d498:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	687a      	ldr	r2, [r7, #4]
 800d49e:	605a      	str	r2, [r3, #4]
}
 800d4a0:	46c0      	nop			; (mov r8, r8)
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	b002      	add	sp, #8
 800d4a6:	bd80      	pop	{r7, pc}

0800d4a8 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b086      	sub	sp, #24
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d4b0:	f3ef 8310 	mrs	r3, PRIMASK
 800d4b4:	60fb      	str	r3, [r7, #12]
  return(result);
 800d4b6:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d4b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800d4ba:	b672      	cpsid	i
}
 800d4bc:	46c0      	nop			; (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	687a      	ldr	r2, [r7, #4]
 800d4c4:	429a      	cmp	r2, r3
 800d4c6:	d104      	bne.n	800d4d2 <list_is_empty+0x2a>
  {
    return_value = 1;
 800d4c8:	2317      	movs	r3, #23
 800d4ca:	18fb      	adds	r3, r7, r3
 800d4cc:	2201      	movs	r2, #1
 800d4ce:	701a      	strb	r2, [r3, #0]
 800d4d0:	e003      	b.n	800d4da <list_is_empty+0x32>
  }
  else
  {
    return_value = 0;
 800d4d2:	2317      	movs	r3, #23
 800d4d4:	18fb      	adds	r3, r7, r3
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	701a      	strb	r2, [r3, #0]
 800d4da:	693b      	ldr	r3, [r7, #16]
 800d4dc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d4de:	68bb      	ldr	r3, [r7, #8]
 800d4e0:	f383 8810 	msr	PRIMASK, r3
}
 800d4e4:	46c0      	nop			; (mov r8, r8)
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800d4e6:	2317      	movs	r3, #23
 800d4e8:	18fb      	adds	r3, r7, r3
 800d4ea:	781b      	ldrb	r3, [r3, #0]
}
 800d4ec:	0018      	movs	r0, r3
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	b006      	add	sp, #24
 800d4f2:	bd80      	pop	{r7, pc}

0800d4f4 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b086      	sub	sp, #24
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
 800d4fc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d4fe:	f3ef 8310 	mrs	r3, PRIMASK
 800d502:	60fb      	str	r3, [r7, #12]
  return(result);
 800d504:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d506:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d508:	b672      	cpsid	i
}
 800d50a:	46c0      	nop			; (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681a      	ldr	r2, [r3, #0]
 800d510:	683b      	ldr	r3, [r7, #0]
 800d512:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	687a      	ldr	r2, [r7, #4]
 800d518:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	683a      	ldr	r2, [r7, #0]
 800d51e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	683a      	ldr	r2, [r7, #0]
 800d526:	605a      	str	r2, [r3, #4]
 800d528:	697b      	ldr	r3, [r7, #20]
 800d52a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d52c:	693b      	ldr	r3, [r7, #16]
 800d52e:	f383 8810 	msr	PRIMASK, r3
}
 800d532:	46c0      	nop			; (mov r8, r8)
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800d534:	46c0      	nop			; (mov r8, r8)
 800d536:	46bd      	mov	sp, r7
 800d538:	b006      	add	sp, #24
 800d53a:	bd80      	pop	{r7, pc}

0800d53c <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b086      	sub	sp, #24
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
 800d544:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d546:	f3ef 8310 	mrs	r3, PRIMASK
 800d54a:	60fb      	str	r3, [r7, #12]
  return(result);
 800d54c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d54e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d550:	b672      	cpsid	i
}
 800d552:	46c0      	nop			; (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800d554:	683b      	ldr	r3, [r7, #0]
 800d556:	687a      	ldr	r2, [r7, #4]
 800d558:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	685a      	ldr	r2, [r3, #4]
 800d55e:	683b      	ldr	r3, [r7, #0]
 800d560:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	683a      	ldr	r2, [r7, #0]
 800d566:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	685b      	ldr	r3, [r3, #4]
 800d56c:	683a      	ldr	r2, [r7, #0]
 800d56e:	601a      	str	r2, [r3, #0]
 800d570:	697b      	ldr	r3, [r7, #20]
 800d572:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d574:	693b      	ldr	r3, [r7, #16]
 800d576:	f383 8810 	msr	PRIMASK, r3
}
 800d57a:	46c0      	nop			; (mov r8, r8)
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800d57c:	46c0      	nop			; (mov r8, r8)
 800d57e:	46bd      	mov	sp, r7
 800d580:	b006      	add	sp, #24
 800d582:	bd80      	pop	{r7, pc}

0800d584 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b086      	sub	sp, #24
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d58c:	f3ef 8310 	mrs	r3, PRIMASK
 800d590:	60fb      	str	r3, [r7, #12]
  return(result);
 800d592:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d594:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d596:	b672      	cpsid	i
}
 800d598:	46c0      	nop			; (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	685b      	ldr	r3, [r3, #4]
 800d59e:	687a      	ldr	r2, [r7, #4]
 800d5a0:	6812      	ldr	r2, [r2, #0]
 800d5a2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	687a      	ldr	r2, [r7, #4]
 800d5aa:	6852      	ldr	r2, [r2, #4]
 800d5ac:	605a      	str	r2, [r3, #4]
 800d5ae:	697b      	ldr	r3, [r7, #20]
 800d5b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d5b2:	693b      	ldr	r3, [r7, #16]
 800d5b4:	f383 8810 	msr	PRIMASK, r3
}
 800d5b8:	46c0      	nop			; (mov r8, r8)
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800d5ba:	46c0      	nop			; (mov r8, r8)
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	b006      	add	sp, #24
 800d5c0:	bd80      	pop	{r7, pc}

0800d5c2 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800d5c2:	b580      	push	{r7, lr}
 800d5c4:	b086      	sub	sp, #24
 800d5c6:	af00      	add	r7, sp, #0
 800d5c8:	6078      	str	r0, [r7, #4]
 800d5ca:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d5cc:	f3ef 8310 	mrs	r3, PRIMASK
 800d5d0:	60fb      	str	r3, [r7, #12]
  return(result);
 800d5d2:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d5d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d5d6:	b672      	cpsid	i
}
 800d5d8:	46c0      	nop			; (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681a      	ldr	r2, [r3, #0]
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	0018      	movs	r0, r3
 800d5e8:	f7ff ffcc 	bl	800d584 <list_remove_node>
  (*node)->next = NULL;
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800d5f4:	683b      	ldr	r3, [r7, #0]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	605a      	str	r2, [r3, #4]
 800d5fc:	697b      	ldr	r3, [r7, #20]
 800d5fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d600:	693b      	ldr	r3, [r7, #16]
 800d602:	f383 8810 	msr	PRIMASK, r3
}
 800d606:	46c0      	nop			; (mov r8, r8)
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800d608:	46c0      	nop			; (mov r8, r8)
 800d60a:	46bd      	mov	sp, r7
 800d60c:	b006      	add	sp, #24
 800d60e:	bd80      	pop	{r7, pc}

0800d610 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b086      	sub	sp, #24
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
 800d618:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d61a:	f3ef 8310 	mrs	r3, PRIMASK
 800d61e:	60fb      	str	r3, [r7, #12]
  return(result);
 800d620:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d622:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d624:	b672      	cpsid	i
}
 800d626:	46c0      	nop			; (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	685a      	ldr	r2, [r3, #4]
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	685b      	ldr	r3, [r3, #4]
 800d634:	0018      	movs	r0, r3
 800d636:	f7ff ffa5 	bl	800d584 <list_remove_node>
  (*node)->next = NULL;
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	2200      	movs	r2, #0
 800d640:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	2200      	movs	r2, #0
 800d648:	605a      	str	r2, [r3, #4]
 800d64a:	697b      	ldr	r3, [r7, #20]
 800d64c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d64e:	693b      	ldr	r3, [r7, #16]
 800d650:	f383 8810 	msr	PRIMASK, r3
}
 800d654:	46c0      	nop			; (mov r8, r8)
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800d656:	46c0      	nop			; (mov r8, r8)
 800d658:	46bd      	mov	sp, r7
 800d65a:	b006      	add	sp, #24
 800d65c:	bd80      	pop	{r7, pc}

0800d65e <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800d65e:	b580      	push	{r7, lr}
 800d660:	b088      	sub	sp, #32
 800d662:	af00      	add	r7, sp, #0
 800d664:	6078      	str	r0, [r7, #4]
  int size = 0;
 800d666:	2300      	movs	r3, #0
 800d668:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d66a:	f3ef 8310 	mrs	r3, PRIMASK
 800d66e:	613b      	str	r3, [r7, #16]
  return(result);
 800d670:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d672:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d674:	b672      	cpsid	i
}
 800d676:	46c0      	nop			; (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800d67e:	e005      	b.n	800d68c <list_get_size+0x2e>
  {
    size++;
 800d680:	69fb      	ldr	r3, [r7, #28]
 800d682:	3301      	adds	r3, #1
 800d684:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800d686:	69bb      	ldr	r3, [r7, #24]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800d68c:	69ba      	ldr	r2, [r7, #24]
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	429a      	cmp	r2, r3
 800d692:	d1f5      	bne.n	800d680 <list_get_size+0x22>
 800d694:	697b      	ldr	r3, [r7, #20]
 800d696:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	f383 8810 	msr	PRIMASK, r3
}
 800d69e:	46c0      	nop			; (mov r8, r8)
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 800d6a0:	69fb      	ldr	r3, [r7, #28]
}
 800d6a2:	0018      	movs	r0, r3
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	b008      	add	sp, #32
 800d6a8:	bd80      	pop	{r7, pc}

0800d6aa <__cvt>:
 800d6aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6ac:	001e      	movs	r6, r3
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	0014      	movs	r4, r2
 800d6b2:	b08b      	sub	sp, #44	; 0x2c
 800d6b4:	429e      	cmp	r6, r3
 800d6b6:	da04      	bge.n	800d6c2 <__cvt+0x18>
 800d6b8:	2180      	movs	r1, #128	; 0x80
 800d6ba:	0609      	lsls	r1, r1, #24
 800d6bc:	1873      	adds	r3, r6, r1
 800d6be:	001e      	movs	r6, r3
 800d6c0:	232d      	movs	r3, #45	; 0x2d
 800d6c2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d6c4:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800d6c6:	7013      	strb	r3, [r2, #0]
 800d6c8:	2320      	movs	r3, #32
 800d6ca:	2203      	movs	r2, #3
 800d6cc:	439f      	bics	r7, r3
 800d6ce:	2f46      	cmp	r7, #70	; 0x46
 800d6d0:	d007      	beq.n	800d6e2 <__cvt+0x38>
 800d6d2:	003b      	movs	r3, r7
 800d6d4:	3b45      	subs	r3, #69	; 0x45
 800d6d6:	4259      	negs	r1, r3
 800d6d8:	414b      	adcs	r3, r1
 800d6da:	9910      	ldr	r1, [sp, #64]	; 0x40
 800d6dc:	3a01      	subs	r2, #1
 800d6de:	18cb      	adds	r3, r1, r3
 800d6e0:	9310      	str	r3, [sp, #64]	; 0x40
 800d6e2:	ab09      	add	r3, sp, #36	; 0x24
 800d6e4:	9304      	str	r3, [sp, #16]
 800d6e6:	ab08      	add	r3, sp, #32
 800d6e8:	9303      	str	r3, [sp, #12]
 800d6ea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d6ec:	9200      	str	r2, [sp, #0]
 800d6ee:	9302      	str	r3, [sp, #8]
 800d6f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d6f2:	0022      	movs	r2, r4
 800d6f4:	9301      	str	r3, [sp, #4]
 800d6f6:	0033      	movs	r3, r6
 800d6f8:	f001 f88c 	bl	800e814 <_dtoa_r>
 800d6fc:	0005      	movs	r5, r0
 800d6fe:	2f47      	cmp	r7, #71	; 0x47
 800d700:	d102      	bne.n	800d708 <__cvt+0x5e>
 800d702:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d704:	07db      	lsls	r3, r3, #31
 800d706:	d528      	bpl.n	800d75a <__cvt+0xb0>
 800d708:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d70a:	18eb      	adds	r3, r5, r3
 800d70c:	9307      	str	r3, [sp, #28]
 800d70e:	2f46      	cmp	r7, #70	; 0x46
 800d710:	d114      	bne.n	800d73c <__cvt+0x92>
 800d712:	782b      	ldrb	r3, [r5, #0]
 800d714:	2b30      	cmp	r3, #48	; 0x30
 800d716:	d10c      	bne.n	800d732 <__cvt+0x88>
 800d718:	2200      	movs	r2, #0
 800d71a:	2300      	movs	r3, #0
 800d71c:	0020      	movs	r0, r4
 800d71e:	0031      	movs	r1, r6
 800d720:	f7f2 fe90 	bl	8000444 <__aeabi_dcmpeq>
 800d724:	2800      	cmp	r0, #0
 800d726:	d104      	bne.n	800d732 <__cvt+0x88>
 800d728:	2301      	movs	r3, #1
 800d72a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d72c:	1a9b      	subs	r3, r3, r2
 800d72e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d730:	6013      	str	r3, [r2, #0]
 800d732:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d734:	9a07      	ldr	r2, [sp, #28]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	18d3      	adds	r3, r2, r3
 800d73a:	9307      	str	r3, [sp, #28]
 800d73c:	2200      	movs	r2, #0
 800d73e:	2300      	movs	r3, #0
 800d740:	0020      	movs	r0, r4
 800d742:	0031      	movs	r1, r6
 800d744:	f7f2 fe7e 	bl	8000444 <__aeabi_dcmpeq>
 800d748:	2800      	cmp	r0, #0
 800d74a:	d001      	beq.n	800d750 <__cvt+0xa6>
 800d74c:	9b07      	ldr	r3, [sp, #28]
 800d74e:	9309      	str	r3, [sp, #36]	; 0x24
 800d750:	2230      	movs	r2, #48	; 0x30
 800d752:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d754:	9907      	ldr	r1, [sp, #28]
 800d756:	428b      	cmp	r3, r1
 800d758:	d306      	bcc.n	800d768 <__cvt+0xbe>
 800d75a:	0028      	movs	r0, r5
 800d75c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d75e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d760:	1b5b      	subs	r3, r3, r5
 800d762:	6013      	str	r3, [r2, #0]
 800d764:	b00b      	add	sp, #44	; 0x2c
 800d766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d768:	1c59      	adds	r1, r3, #1
 800d76a:	9109      	str	r1, [sp, #36]	; 0x24
 800d76c:	701a      	strb	r2, [r3, #0]
 800d76e:	e7f0      	b.n	800d752 <__cvt+0xa8>

0800d770 <__exponent>:
 800d770:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d772:	1c83      	adds	r3, r0, #2
 800d774:	b087      	sub	sp, #28
 800d776:	9303      	str	r3, [sp, #12]
 800d778:	0005      	movs	r5, r0
 800d77a:	000c      	movs	r4, r1
 800d77c:	232b      	movs	r3, #43	; 0x2b
 800d77e:	7002      	strb	r2, [r0, #0]
 800d780:	2900      	cmp	r1, #0
 800d782:	da01      	bge.n	800d788 <__exponent+0x18>
 800d784:	424c      	negs	r4, r1
 800d786:	3302      	adds	r3, #2
 800d788:	706b      	strb	r3, [r5, #1]
 800d78a:	2c09      	cmp	r4, #9
 800d78c:	dd2f      	ble.n	800d7ee <__exponent+0x7e>
 800d78e:	270a      	movs	r7, #10
 800d790:	ab04      	add	r3, sp, #16
 800d792:	1dde      	adds	r6, r3, #7
 800d794:	0020      	movs	r0, r4
 800d796:	0039      	movs	r1, r7
 800d798:	9601      	str	r6, [sp, #4]
 800d79a:	f7f2 fe3d 	bl	8000418 <__aeabi_idivmod>
 800d79e:	3e01      	subs	r6, #1
 800d7a0:	3130      	adds	r1, #48	; 0x30
 800d7a2:	0020      	movs	r0, r4
 800d7a4:	7031      	strb	r1, [r6, #0]
 800d7a6:	0039      	movs	r1, r7
 800d7a8:	9402      	str	r4, [sp, #8]
 800d7aa:	f7f2 fd4f 	bl	800024c <__divsi3>
 800d7ae:	9b02      	ldr	r3, [sp, #8]
 800d7b0:	0004      	movs	r4, r0
 800d7b2:	2b63      	cmp	r3, #99	; 0x63
 800d7b4:	dcee      	bgt.n	800d794 <__exponent+0x24>
 800d7b6:	9b01      	ldr	r3, [sp, #4]
 800d7b8:	3430      	adds	r4, #48	; 0x30
 800d7ba:	1e9a      	subs	r2, r3, #2
 800d7bc:	0013      	movs	r3, r2
 800d7be:	9903      	ldr	r1, [sp, #12]
 800d7c0:	7014      	strb	r4, [r2, #0]
 800d7c2:	a804      	add	r0, sp, #16
 800d7c4:	3007      	adds	r0, #7
 800d7c6:	4298      	cmp	r0, r3
 800d7c8:	d80c      	bhi.n	800d7e4 <__exponent+0x74>
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	4282      	cmp	r2, r0
 800d7ce:	d804      	bhi.n	800d7da <__exponent+0x6a>
 800d7d0:	aa04      	add	r2, sp, #16
 800d7d2:	3309      	adds	r3, #9
 800d7d4:	189b      	adds	r3, r3, r2
 800d7d6:	9a01      	ldr	r2, [sp, #4]
 800d7d8:	1a9b      	subs	r3, r3, r2
 800d7da:	9a03      	ldr	r2, [sp, #12]
 800d7dc:	18d3      	adds	r3, r2, r3
 800d7de:	1b58      	subs	r0, r3, r5
 800d7e0:	b007      	add	sp, #28
 800d7e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7e4:	7818      	ldrb	r0, [r3, #0]
 800d7e6:	3301      	adds	r3, #1
 800d7e8:	7008      	strb	r0, [r1, #0]
 800d7ea:	3101      	adds	r1, #1
 800d7ec:	e7e9      	b.n	800d7c2 <__exponent+0x52>
 800d7ee:	2330      	movs	r3, #48	; 0x30
 800d7f0:	3430      	adds	r4, #48	; 0x30
 800d7f2:	70ab      	strb	r3, [r5, #2]
 800d7f4:	70ec      	strb	r4, [r5, #3]
 800d7f6:	1d2b      	adds	r3, r5, #4
 800d7f8:	e7f1      	b.n	800d7de <__exponent+0x6e>
	...

0800d7fc <_printf_float>:
 800d7fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7fe:	b095      	sub	sp, #84	; 0x54
 800d800:	000c      	movs	r4, r1
 800d802:	9208      	str	r2, [sp, #32]
 800d804:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800d806:	9309      	str	r3, [sp, #36]	; 0x24
 800d808:	0007      	movs	r7, r0
 800d80a:	f000 fee1 	bl	800e5d0 <_localeconv_r>
 800d80e:	6803      	ldr	r3, [r0, #0]
 800d810:	0018      	movs	r0, r3
 800d812:	930c      	str	r3, [sp, #48]	; 0x30
 800d814:	f7f2 fc74 	bl	8000100 <strlen>
 800d818:	2300      	movs	r3, #0
 800d81a:	9312      	str	r3, [sp, #72]	; 0x48
 800d81c:	7e23      	ldrb	r3, [r4, #24]
 800d81e:	2207      	movs	r2, #7
 800d820:	930a      	str	r3, [sp, #40]	; 0x28
 800d822:	6823      	ldr	r3, [r4, #0]
 800d824:	900d      	str	r0, [sp, #52]	; 0x34
 800d826:	930b      	str	r3, [sp, #44]	; 0x2c
 800d828:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d82a:	682b      	ldr	r3, [r5, #0]
 800d82c:	05c9      	lsls	r1, r1, #23
 800d82e:	d547      	bpl.n	800d8c0 <_printf_float+0xc4>
 800d830:	189b      	adds	r3, r3, r2
 800d832:	4393      	bics	r3, r2
 800d834:	001a      	movs	r2, r3
 800d836:	3208      	adds	r2, #8
 800d838:	602a      	str	r2, [r5, #0]
 800d83a:	681e      	ldr	r6, [r3, #0]
 800d83c:	685d      	ldr	r5, [r3, #4]
 800d83e:	0032      	movs	r2, r6
 800d840:	002b      	movs	r3, r5
 800d842:	64a2      	str	r2, [r4, #72]	; 0x48
 800d844:	64e3      	str	r3, [r4, #76]	; 0x4c
 800d846:	2201      	movs	r2, #1
 800d848:	006b      	lsls	r3, r5, #1
 800d84a:	085b      	lsrs	r3, r3, #1
 800d84c:	930e      	str	r3, [sp, #56]	; 0x38
 800d84e:	0030      	movs	r0, r6
 800d850:	4bab      	ldr	r3, [pc, #684]	; (800db00 <_printf_float+0x304>)
 800d852:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d854:	4252      	negs	r2, r2
 800d856:	f7f4 fbc1 	bl	8001fdc <__aeabi_dcmpun>
 800d85a:	2800      	cmp	r0, #0
 800d85c:	d132      	bne.n	800d8c4 <_printf_float+0xc8>
 800d85e:	2201      	movs	r2, #1
 800d860:	0030      	movs	r0, r6
 800d862:	4ba7      	ldr	r3, [pc, #668]	; (800db00 <_printf_float+0x304>)
 800d864:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d866:	4252      	negs	r2, r2
 800d868:	f7f2 fdfc 	bl	8000464 <__aeabi_dcmple>
 800d86c:	2800      	cmp	r0, #0
 800d86e:	d129      	bne.n	800d8c4 <_printf_float+0xc8>
 800d870:	2200      	movs	r2, #0
 800d872:	2300      	movs	r3, #0
 800d874:	0030      	movs	r0, r6
 800d876:	0029      	movs	r1, r5
 800d878:	f7f2 fdea 	bl	8000450 <__aeabi_dcmplt>
 800d87c:	2800      	cmp	r0, #0
 800d87e:	d003      	beq.n	800d888 <_printf_float+0x8c>
 800d880:	0023      	movs	r3, r4
 800d882:	222d      	movs	r2, #45	; 0x2d
 800d884:	3343      	adds	r3, #67	; 0x43
 800d886:	701a      	strb	r2, [r3, #0]
 800d888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d88a:	4d9e      	ldr	r5, [pc, #632]	; (800db04 <_printf_float+0x308>)
 800d88c:	2b47      	cmp	r3, #71	; 0x47
 800d88e:	d900      	bls.n	800d892 <_printf_float+0x96>
 800d890:	4d9d      	ldr	r5, [pc, #628]	; (800db08 <_printf_float+0x30c>)
 800d892:	2303      	movs	r3, #3
 800d894:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d896:	6123      	str	r3, [r4, #16]
 800d898:	3301      	adds	r3, #1
 800d89a:	439a      	bics	r2, r3
 800d89c:	2300      	movs	r3, #0
 800d89e:	6022      	str	r2, [r4, #0]
 800d8a0:	930b      	str	r3, [sp, #44]	; 0x2c
 800d8a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8a4:	0021      	movs	r1, r4
 800d8a6:	9300      	str	r3, [sp, #0]
 800d8a8:	0038      	movs	r0, r7
 800d8aa:	9b08      	ldr	r3, [sp, #32]
 800d8ac:	aa13      	add	r2, sp, #76	; 0x4c
 800d8ae:	f000 f9fb 	bl	800dca8 <_printf_common>
 800d8b2:	3001      	adds	r0, #1
 800d8b4:	d000      	beq.n	800d8b8 <_printf_float+0xbc>
 800d8b6:	e0a3      	b.n	800da00 <_printf_float+0x204>
 800d8b8:	2001      	movs	r0, #1
 800d8ba:	4240      	negs	r0, r0
 800d8bc:	b015      	add	sp, #84	; 0x54
 800d8be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8c0:	3307      	adds	r3, #7
 800d8c2:	e7b6      	b.n	800d832 <_printf_float+0x36>
 800d8c4:	0032      	movs	r2, r6
 800d8c6:	002b      	movs	r3, r5
 800d8c8:	0030      	movs	r0, r6
 800d8ca:	0029      	movs	r1, r5
 800d8cc:	f7f4 fb86 	bl	8001fdc <__aeabi_dcmpun>
 800d8d0:	2800      	cmp	r0, #0
 800d8d2:	d00b      	beq.n	800d8ec <_printf_float+0xf0>
 800d8d4:	2d00      	cmp	r5, #0
 800d8d6:	da03      	bge.n	800d8e0 <_printf_float+0xe4>
 800d8d8:	0023      	movs	r3, r4
 800d8da:	222d      	movs	r2, #45	; 0x2d
 800d8dc:	3343      	adds	r3, #67	; 0x43
 800d8de:	701a      	strb	r2, [r3, #0]
 800d8e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8e2:	4d8a      	ldr	r5, [pc, #552]	; (800db0c <_printf_float+0x310>)
 800d8e4:	2b47      	cmp	r3, #71	; 0x47
 800d8e6:	d9d4      	bls.n	800d892 <_printf_float+0x96>
 800d8e8:	4d89      	ldr	r5, [pc, #548]	; (800db10 <_printf_float+0x314>)
 800d8ea:	e7d2      	b.n	800d892 <_printf_float+0x96>
 800d8ec:	2220      	movs	r2, #32
 800d8ee:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d8f0:	6863      	ldr	r3, [r4, #4]
 800d8f2:	4391      	bics	r1, r2
 800d8f4:	910e      	str	r1, [sp, #56]	; 0x38
 800d8f6:	1c5a      	adds	r2, r3, #1
 800d8f8:	d14a      	bne.n	800d990 <_printf_float+0x194>
 800d8fa:	3307      	adds	r3, #7
 800d8fc:	6063      	str	r3, [r4, #4]
 800d8fe:	2380      	movs	r3, #128	; 0x80
 800d900:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d902:	00db      	lsls	r3, r3, #3
 800d904:	4313      	orrs	r3, r2
 800d906:	2200      	movs	r2, #0
 800d908:	9206      	str	r2, [sp, #24]
 800d90a:	aa12      	add	r2, sp, #72	; 0x48
 800d90c:	9205      	str	r2, [sp, #20]
 800d90e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d910:	6023      	str	r3, [r4, #0]
 800d912:	9204      	str	r2, [sp, #16]
 800d914:	aa11      	add	r2, sp, #68	; 0x44
 800d916:	9203      	str	r2, [sp, #12]
 800d918:	2223      	movs	r2, #35	; 0x23
 800d91a:	a908      	add	r1, sp, #32
 800d91c:	9301      	str	r3, [sp, #4]
 800d91e:	6863      	ldr	r3, [r4, #4]
 800d920:	1852      	adds	r2, r2, r1
 800d922:	9202      	str	r2, [sp, #8]
 800d924:	9300      	str	r3, [sp, #0]
 800d926:	0032      	movs	r2, r6
 800d928:	002b      	movs	r3, r5
 800d92a:	0038      	movs	r0, r7
 800d92c:	f7ff febd 	bl	800d6aa <__cvt>
 800d930:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d932:	0005      	movs	r5, r0
 800d934:	2b47      	cmp	r3, #71	; 0x47
 800d936:	d109      	bne.n	800d94c <_printf_float+0x150>
 800d938:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d93a:	1cda      	adds	r2, r3, #3
 800d93c:	db02      	blt.n	800d944 <_printf_float+0x148>
 800d93e:	6862      	ldr	r2, [r4, #4]
 800d940:	4293      	cmp	r3, r2
 800d942:	dd49      	ble.n	800d9d8 <_printf_float+0x1dc>
 800d944:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d946:	3b02      	subs	r3, #2
 800d948:	b2db      	uxtb	r3, r3
 800d94a:	930a      	str	r3, [sp, #40]	; 0x28
 800d94c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d94e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d950:	2b65      	cmp	r3, #101	; 0x65
 800d952:	d824      	bhi.n	800d99e <_printf_float+0x1a2>
 800d954:	0020      	movs	r0, r4
 800d956:	001a      	movs	r2, r3
 800d958:	3901      	subs	r1, #1
 800d95a:	3050      	adds	r0, #80	; 0x50
 800d95c:	9111      	str	r1, [sp, #68]	; 0x44
 800d95e:	f7ff ff07 	bl	800d770 <__exponent>
 800d962:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d964:	900b      	str	r0, [sp, #44]	; 0x2c
 800d966:	1813      	adds	r3, r2, r0
 800d968:	6123      	str	r3, [r4, #16]
 800d96a:	2a01      	cmp	r2, #1
 800d96c:	dc02      	bgt.n	800d974 <_printf_float+0x178>
 800d96e:	6822      	ldr	r2, [r4, #0]
 800d970:	07d2      	lsls	r2, r2, #31
 800d972:	d501      	bpl.n	800d978 <_printf_float+0x17c>
 800d974:	3301      	adds	r3, #1
 800d976:	6123      	str	r3, [r4, #16]
 800d978:	2323      	movs	r3, #35	; 0x23
 800d97a:	aa08      	add	r2, sp, #32
 800d97c:	189b      	adds	r3, r3, r2
 800d97e:	781b      	ldrb	r3, [r3, #0]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d100      	bne.n	800d986 <_printf_float+0x18a>
 800d984:	e78d      	b.n	800d8a2 <_printf_float+0xa6>
 800d986:	0023      	movs	r3, r4
 800d988:	222d      	movs	r2, #45	; 0x2d
 800d98a:	3343      	adds	r3, #67	; 0x43
 800d98c:	701a      	strb	r2, [r3, #0]
 800d98e:	e788      	b.n	800d8a2 <_printf_float+0xa6>
 800d990:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d992:	2a47      	cmp	r2, #71	; 0x47
 800d994:	d1b3      	bne.n	800d8fe <_printf_float+0x102>
 800d996:	2b00      	cmp	r3, #0
 800d998:	d1b1      	bne.n	800d8fe <_printf_float+0x102>
 800d99a:	3301      	adds	r3, #1
 800d99c:	e7ae      	b.n	800d8fc <_printf_float+0x100>
 800d99e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9a0:	2b66      	cmp	r3, #102	; 0x66
 800d9a2:	d11b      	bne.n	800d9dc <_printf_float+0x1e0>
 800d9a4:	6863      	ldr	r3, [r4, #4]
 800d9a6:	2900      	cmp	r1, #0
 800d9a8:	dd09      	ble.n	800d9be <_printf_float+0x1c2>
 800d9aa:	6121      	str	r1, [r4, #16]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d102      	bne.n	800d9b6 <_printf_float+0x1ba>
 800d9b0:	6822      	ldr	r2, [r4, #0]
 800d9b2:	07d2      	lsls	r2, r2, #31
 800d9b4:	d50b      	bpl.n	800d9ce <_printf_float+0x1d2>
 800d9b6:	3301      	adds	r3, #1
 800d9b8:	185b      	adds	r3, r3, r1
 800d9ba:	6123      	str	r3, [r4, #16]
 800d9bc:	e007      	b.n	800d9ce <_printf_float+0x1d2>
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d103      	bne.n	800d9ca <_printf_float+0x1ce>
 800d9c2:	2201      	movs	r2, #1
 800d9c4:	6821      	ldr	r1, [r4, #0]
 800d9c6:	4211      	tst	r1, r2
 800d9c8:	d000      	beq.n	800d9cc <_printf_float+0x1d0>
 800d9ca:	1c9a      	adds	r2, r3, #2
 800d9cc:	6122      	str	r2, [r4, #16]
 800d9ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d9d0:	65a3      	str	r3, [r4, #88]	; 0x58
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	930b      	str	r3, [sp, #44]	; 0x2c
 800d9d6:	e7cf      	b.n	800d978 <_printf_float+0x17c>
 800d9d8:	2367      	movs	r3, #103	; 0x67
 800d9da:	930a      	str	r3, [sp, #40]	; 0x28
 800d9dc:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d9de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d9e0:	4299      	cmp	r1, r3
 800d9e2:	db06      	blt.n	800d9f2 <_printf_float+0x1f6>
 800d9e4:	6823      	ldr	r3, [r4, #0]
 800d9e6:	6121      	str	r1, [r4, #16]
 800d9e8:	07db      	lsls	r3, r3, #31
 800d9ea:	d5f0      	bpl.n	800d9ce <_printf_float+0x1d2>
 800d9ec:	3101      	adds	r1, #1
 800d9ee:	6121      	str	r1, [r4, #16]
 800d9f0:	e7ed      	b.n	800d9ce <_printf_float+0x1d2>
 800d9f2:	2201      	movs	r2, #1
 800d9f4:	2900      	cmp	r1, #0
 800d9f6:	dc01      	bgt.n	800d9fc <_printf_float+0x200>
 800d9f8:	1892      	adds	r2, r2, r2
 800d9fa:	1a52      	subs	r2, r2, r1
 800d9fc:	189b      	adds	r3, r3, r2
 800d9fe:	e7dc      	b.n	800d9ba <_printf_float+0x1be>
 800da00:	6822      	ldr	r2, [r4, #0]
 800da02:	0553      	lsls	r3, r2, #21
 800da04:	d408      	bmi.n	800da18 <_printf_float+0x21c>
 800da06:	6923      	ldr	r3, [r4, #16]
 800da08:	002a      	movs	r2, r5
 800da0a:	0038      	movs	r0, r7
 800da0c:	9908      	ldr	r1, [sp, #32]
 800da0e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800da10:	47a8      	blx	r5
 800da12:	3001      	adds	r0, #1
 800da14:	d12a      	bne.n	800da6c <_printf_float+0x270>
 800da16:	e74f      	b.n	800d8b8 <_printf_float+0xbc>
 800da18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da1a:	2b65      	cmp	r3, #101	; 0x65
 800da1c:	d800      	bhi.n	800da20 <_printf_float+0x224>
 800da1e:	e0ec      	b.n	800dbfa <_printf_float+0x3fe>
 800da20:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800da22:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800da24:	2200      	movs	r2, #0
 800da26:	2300      	movs	r3, #0
 800da28:	f7f2 fd0c 	bl	8000444 <__aeabi_dcmpeq>
 800da2c:	2800      	cmp	r0, #0
 800da2e:	d034      	beq.n	800da9a <_printf_float+0x29e>
 800da30:	2301      	movs	r3, #1
 800da32:	0038      	movs	r0, r7
 800da34:	4a37      	ldr	r2, [pc, #220]	; (800db14 <_printf_float+0x318>)
 800da36:	9908      	ldr	r1, [sp, #32]
 800da38:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800da3a:	47a8      	blx	r5
 800da3c:	3001      	adds	r0, #1
 800da3e:	d100      	bne.n	800da42 <_printf_float+0x246>
 800da40:	e73a      	b.n	800d8b8 <_printf_float+0xbc>
 800da42:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800da44:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800da46:	429a      	cmp	r2, r3
 800da48:	db02      	blt.n	800da50 <_printf_float+0x254>
 800da4a:	6823      	ldr	r3, [r4, #0]
 800da4c:	07db      	lsls	r3, r3, #31
 800da4e:	d50d      	bpl.n	800da6c <_printf_float+0x270>
 800da50:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800da52:	0038      	movs	r0, r7
 800da54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800da58:	9908      	ldr	r1, [sp, #32]
 800da5a:	47a8      	blx	r5
 800da5c:	2500      	movs	r5, #0
 800da5e:	3001      	adds	r0, #1
 800da60:	d100      	bne.n	800da64 <_printf_float+0x268>
 800da62:	e729      	b.n	800d8b8 <_printf_float+0xbc>
 800da64:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800da66:	3b01      	subs	r3, #1
 800da68:	42ab      	cmp	r3, r5
 800da6a:	dc0a      	bgt.n	800da82 <_printf_float+0x286>
 800da6c:	6823      	ldr	r3, [r4, #0]
 800da6e:	079b      	lsls	r3, r3, #30
 800da70:	d500      	bpl.n	800da74 <_printf_float+0x278>
 800da72:	e116      	b.n	800dca2 <_printf_float+0x4a6>
 800da74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800da76:	68e0      	ldr	r0, [r4, #12]
 800da78:	4298      	cmp	r0, r3
 800da7a:	db00      	blt.n	800da7e <_printf_float+0x282>
 800da7c:	e71e      	b.n	800d8bc <_printf_float+0xc0>
 800da7e:	0018      	movs	r0, r3
 800da80:	e71c      	b.n	800d8bc <_printf_float+0xc0>
 800da82:	0022      	movs	r2, r4
 800da84:	2301      	movs	r3, #1
 800da86:	0038      	movs	r0, r7
 800da88:	9908      	ldr	r1, [sp, #32]
 800da8a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800da8c:	321a      	adds	r2, #26
 800da8e:	47b0      	blx	r6
 800da90:	3001      	adds	r0, #1
 800da92:	d100      	bne.n	800da96 <_printf_float+0x29a>
 800da94:	e710      	b.n	800d8b8 <_printf_float+0xbc>
 800da96:	3501      	adds	r5, #1
 800da98:	e7e4      	b.n	800da64 <_printf_float+0x268>
 800da9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	dc3b      	bgt.n	800db18 <_printf_float+0x31c>
 800daa0:	2301      	movs	r3, #1
 800daa2:	0038      	movs	r0, r7
 800daa4:	4a1b      	ldr	r2, [pc, #108]	; (800db14 <_printf_float+0x318>)
 800daa6:	9908      	ldr	r1, [sp, #32]
 800daa8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800daaa:	47b0      	blx	r6
 800daac:	3001      	adds	r0, #1
 800daae:	d100      	bne.n	800dab2 <_printf_float+0x2b6>
 800dab0:	e702      	b.n	800d8b8 <_printf_float+0xbc>
 800dab2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dab4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dab6:	4313      	orrs	r3, r2
 800dab8:	d102      	bne.n	800dac0 <_printf_float+0x2c4>
 800daba:	6823      	ldr	r3, [r4, #0]
 800dabc:	07db      	lsls	r3, r3, #31
 800dabe:	d5d5      	bpl.n	800da6c <_printf_float+0x270>
 800dac0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dac2:	0038      	movs	r0, r7
 800dac4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dac6:	9908      	ldr	r1, [sp, #32]
 800dac8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800daca:	47b0      	blx	r6
 800dacc:	2300      	movs	r3, #0
 800dace:	3001      	adds	r0, #1
 800dad0:	d100      	bne.n	800dad4 <_printf_float+0x2d8>
 800dad2:	e6f1      	b.n	800d8b8 <_printf_float+0xbc>
 800dad4:	930a      	str	r3, [sp, #40]	; 0x28
 800dad6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dad8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dada:	425b      	negs	r3, r3
 800dadc:	4293      	cmp	r3, r2
 800dade:	dc01      	bgt.n	800dae4 <_printf_float+0x2e8>
 800dae0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dae2:	e791      	b.n	800da08 <_printf_float+0x20c>
 800dae4:	0022      	movs	r2, r4
 800dae6:	2301      	movs	r3, #1
 800dae8:	0038      	movs	r0, r7
 800daea:	9908      	ldr	r1, [sp, #32]
 800daec:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800daee:	321a      	adds	r2, #26
 800daf0:	47b0      	blx	r6
 800daf2:	3001      	adds	r0, #1
 800daf4:	d100      	bne.n	800daf8 <_printf_float+0x2fc>
 800daf6:	e6df      	b.n	800d8b8 <_printf_float+0xbc>
 800daf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dafa:	3301      	adds	r3, #1
 800dafc:	e7ea      	b.n	800dad4 <_printf_float+0x2d8>
 800dafe:	46c0      	nop			; (mov r8, r8)
 800db00:	7fefffff 	.word	0x7fefffff
 800db04:	080114f8 	.word	0x080114f8
 800db08:	080114fc 	.word	0x080114fc
 800db0c:	08011500 	.word	0x08011500
 800db10:	08011504 	.word	0x08011504
 800db14:	08011508 	.word	0x08011508
 800db18:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800db1a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800db1c:	920a      	str	r2, [sp, #40]	; 0x28
 800db1e:	429a      	cmp	r2, r3
 800db20:	dd00      	ble.n	800db24 <_printf_float+0x328>
 800db22:	930a      	str	r3, [sp, #40]	; 0x28
 800db24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db26:	2b00      	cmp	r3, #0
 800db28:	dc3d      	bgt.n	800dba6 <_printf_float+0x3aa>
 800db2a:	2300      	movs	r3, #0
 800db2c:	930e      	str	r3, [sp, #56]	; 0x38
 800db2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db30:	43db      	mvns	r3, r3
 800db32:	17db      	asrs	r3, r3, #31
 800db34:	930f      	str	r3, [sp, #60]	; 0x3c
 800db36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800db38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800db3a:	930b      	str	r3, [sp, #44]	; 0x2c
 800db3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800db3e:	4013      	ands	r3, r2
 800db40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800db42:	1ad3      	subs	r3, r2, r3
 800db44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800db46:	4293      	cmp	r3, r2
 800db48:	dc36      	bgt.n	800dbb8 <_printf_float+0x3bc>
 800db4a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800db4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800db4e:	429a      	cmp	r2, r3
 800db50:	db40      	blt.n	800dbd4 <_printf_float+0x3d8>
 800db52:	6823      	ldr	r3, [r4, #0]
 800db54:	07db      	lsls	r3, r3, #31
 800db56:	d43d      	bmi.n	800dbd4 <_printf_float+0x3d8>
 800db58:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800db5a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800db5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db5e:	1af3      	subs	r3, r6, r3
 800db60:	1ab6      	subs	r6, r6, r2
 800db62:	429e      	cmp	r6, r3
 800db64:	dd00      	ble.n	800db68 <_printf_float+0x36c>
 800db66:	001e      	movs	r6, r3
 800db68:	2e00      	cmp	r6, #0
 800db6a:	dc3c      	bgt.n	800dbe6 <_printf_float+0x3ea>
 800db6c:	2300      	movs	r3, #0
 800db6e:	930a      	str	r3, [sp, #40]	; 0x28
 800db70:	43f3      	mvns	r3, r6
 800db72:	17db      	asrs	r3, r3, #31
 800db74:	930b      	str	r3, [sp, #44]	; 0x2c
 800db76:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800db78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800db7a:	1a9b      	subs	r3, r3, r2
 800db7c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800db7e:	4032      	ands	r2, r6
 800db80:	1a9b      	subs	r3, r3, r2
 800db82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800db84:	4293      	cmp	r3, r2
 800db86:	dc00      	bgt.n	800db8a <_printf_float+0x38e>
 800db88:	e770      	b.n	800da6c <_printf_float+0x270>
 800db8a:	0022      	movs	r2, r4
 800db8c:	2301      	movs	r3, #1
 800db8e:	0038      	movs	r0, r7
 800db90:	9908      	ldr	r1, [sp, #32]
 800db92:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800db94:	321a      	adds	r2, #26
 800db96:	47a8      	blx	r5
 800db98:	3001      	adds	r0, #1
 800db9a:	d100      	bne.n	800db9e <_printf_float+0x3a2>
 800db9c:	e68c      	b.n	800d8b8 <_printf_float+0xbc>
 800db9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dba0:	3301      	adds	r3, #1
 800dba2:	930a      	str	r3, [sp, #40]	; 0x28
 800dba4:	e7e7      	b.n	800db76 <_printf_float+0x37a>
 800dba6:	002a      	movs	r2, r5
 800dba8:	0038      	movs	r0, r7
 800dbaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dbac:	9908      	ldr	r1, [sp, #32]
 800dbae:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800dbb0:	47b0      	blx	r6
 800dbb2:	3001      	adds	r0, #1
 800dbb4:	d1b9      	bne.n	800db2a <_printf_float+0x32e>
 800dbb6:	e67f      	b.n	800d8b8 <_printf_float+0xbc>
 800dbb8:	0022      	movs	r2, r4
 800dbba:	2301      	movs	r3, #1
 800dbbc:	0038      	movs	r0, r7
 800dbbe:	9908      	ldr	r1, [sp, #32]
 800dbc0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800dbc2:	321a      	adds	r2, #26
 800dbc4:	47b0      	blx	r6
 800dbc6:	3001      	adds	r0, #1
 800dbc8:	d100      	bne.n	800dbcc <_printf_float+0x3d0>
 800dbca:	e675      	b.n	800d8b8 <_printf_float+0xbc>
 800dbcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dbce:	3301      	adds	r3, #1
 800dbd0:	930e      	str	r3, [sp, #56]	; 0x38
 800dbd2:	e7b0      	b.n	800db36 <_printf_float+0x33a>
 800dbd4:	0038      	movs	r0, r7
 800dbd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dbd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dbda:	9908      	ldr	r1, [sp, #32]
 800dbdc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800dbde:	47b0      	blx	r6
 800dbe0:	3001      	adds	r0, #1
 800dbe2:	d1b9      	bne.n	800db58 <_printf_float+0x35c>
 800dbe4:	e668      	b.n	800d8b8 <_printf_float+0xbc>
 800dbe6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dbe8:	0038      	movs	r0, r7
 800dbea:	18ea      	adds	r2, r5, r3
 800dbec:	9908      	ldr	r1, [sp, #32]
 800dbee:	0033      	movs	r3, r6
 800dbf0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800dbf2:	47a8      	blx	r5
 800dbf4:	3001      	adds	r0, #1
 800dbf6:	d1b9      	bne.n	800db6c <_printf_float+0x370>
 800dbf8:	e65e      	b.n	800d8b8 <_printf_float+0xbc>
 800dbfa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dbfc:	2b01      	cmp	r3, #1
 800dbfe:	dc02      	bgt.n	800dc06 <_printf_float+0x40a>
 800dc00:	2301      	movs	r3, #1
 800dc02:	421a      	tst	r2, r3
 800dc04:	d03a      	beq.n	800dc7c <_printf_float+0x480>
 800dc06:	2301      	movs	r3, #1
 800dc08:	002a      	movs	r2, r5
 800dc0a:	0038      	movs	r0, r7
 800dc0c:	9908      	ldr	r1, [sp, #32]
 800dc0e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800dc10:	47b0      	blx	r6
 800dc12:	3001      	adds	r0, #1
 800dc14:	d100      	bne.n	800dc18 <_printf_float+0x41c>
 800dc16:	e64f      	b.n	800d8b8 <_printf_float+0xbc>
 800dc18:	0038      	movs	r0, r7
 800dc1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dc1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dc1e:	9908      	ldr	r1, [sp, #32]
 800dc20:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800dc22:	47b0      	blx	r6
 800dc24:	3001      	adds	r0, #1
 800dc26:	d100      	bne.n	800dc2a <_printf_float+0x42e>
 800dc28:	e646      	b.n	800d8b8 <_printf_float+0xbc>
 800dc2a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800dc2c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800dc2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dc30:	2200      	movs	r2, #0
 800dc32:	001e      	movs	r6, r3
 800dc34:	2300      	movs	r3, #0
 800dc36:	f7f2 fc05 	bl	8000444 <__aeabi_dcmpeq>
 800dc3a:	2800      	cmp	r0, #0
 800dc3c:	d11c      	bne.n	800dc78 <_printf_float+0x47c>
 800dc3e:	0033      	movs	r3, r6
 800dc40:	1c6a      	adds	r2, r5, #1
 800dc42:	3b01      	subs	r3, #1
 800dc44:	0038      	movs	r0, r7
 800dc46:	9908      	ldr	r1, [sp, #32]
 800dc48:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800dc4a:	47a8      	blx	r5
 800dc4c:	3001      	adds	r0, #1
 800dc4e:	d10f      	bne.n	800dc70 <_printf_float+0x474>
 800dc50:	e632      	b.n	800d8b8 <_printf_float+0xbc>
 800dc52:	0022      	movs	r2, r4
 800dc54:	2301      	movs	r3, #1
 800dc56:	0038      	movs	r0, r7
 800dc58:	9908      	ldr	r1, [sp, #32]
 800dc5a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800dc5c:	321a      	adds	r2, #26
 800dc5e:	47b0      	blx	r6
 800dc60:	3001      	adds	r0, #1
 800dc62:	d100      	bne.n	800dc66 <_printf_float+0x46a>
 800dc64:	e628      	b.n	800d8b8 <_printf_float+0xbc>
 800dc66:	3501      	adds	r5, #1
 800dc68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dc6a:	3b01      	subs	r3, #1
 800dc6c:	42ab      	cmp	r3, r5
 800dc6e:	dcf0      	bgt.n	800dc52 <_printf_float+0x456>
 800dc70:	0022      	movs	r2, r4
 800dc72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc74:	3250      	adds	r2, #80	; 0x50
 800dc76:	e6c8      	b.n	800da0a <_printf_float+0x20e>
 800dc78:	2500      	movs	r5, #0
 800dc7a:	e7f5      	b.n	800dc68 <_printf_float+0x46c>
 800dc7c:	002a      	movs	r2, r5
 800dc7e:	e7e1      	b.n	800dc44 <_printf_float+0x448>
 800dc80:	0022      	movs	r2, r4
 800dc82:	2301      	movs	r3, #1
 800dc84:	0038      	movs	r0, r7
 800dc86:	9908      	ldr	r1, [sp, #32]
 800dc88:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800dc8a:	3219      	adds	r2, #25
 800dc8c:	47b0      	blx	r6
 800dc8e:	3001      	adds	r0, #1
 800dc90:	d100      	bne.n	800dc94 <_printf_float+0x498>
 800dc92:	e611      	b.n	800d8b8 <_printf_float+0xbc>
 800dc94:	3501      	adds	r5, #1
 800dc96:	68e3      	ldr	r3, [r4, #12]
 800dc98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800dc9a:	1a9b      	subs	r3, r3, r2
 800dc9c:	42ab      	cmp	r3, r5
 800dc9e:	dcef      	bgt.n	800dc80 <_printf_float+0x484>
 800dca0:	e6e8      	b.n	800da74 <_printf_float+0x278>
 800dca2:	2500      	movs	r5, #0
 800dca4:	e7f7      	b.n	800dc96 <_printf_float+0x49a>
 800dca6:	46c0      	nop			; (mov r8, r8)

0800dca8 <_printf_common>:
 800dca8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dcaa:	0016      	movs	r6, r2
 800dcac:	9301      	str	r3, [sp, #4]
 800dcae:	688a      	ldr	r2, [r1, #8]
 800dcb0:	690b      	ldr	r3, [r1, #16]
 800dcb2:	000c      	movs	r4, r1
 800dcb4:	9000      	str	r0, [sp, #0]
 800dcb6:	4293      	cmp	r3, r2
 800dcb8:	da00      	bge.n	800dcbc <_printf_common+0x14>
 800dcba:	0013      	movs	r3, r2
 800dcbc:	0022      	movs	r2, r4
 800dcbe:	6033      	str	r3, [r6, #0]
 800dcc0:	3243      	adds	r2, #67	; 0x43
 800dcc2:	7812      	ldrb	r2, [r2, #0]
 800dcc4:	2a00      	cmp	r2, #0
 800dcc6:	d001      	beq.n	800dccc <_printf_common+0x24>
 800dcc8:	3301      	adds	r3, #1
 800dcca:	6033      	str	r3, [r6, #0]
 800dccc:	6823      	ldr	r3, [r4, #0]
 800dcce:	069b      	lsls	r3, r3, #26
 800dcd0:	d502      	bpl.n	800dcd8 <_printf_common+0x30>
 800dcd2:	6833      	ldr	r3, [r6, #0]
 800dcd4:	3302      	adds	r3, #2
 800dcd6:	6033      	str	r3, [r6, #0]
 800dcd8:	6822      	ldr	r2, [r4, #0]
 800dcda:	2306      	movs	r3, #6
 800dcdc:	0015      	movs	r5, r2
 800dcde:	401d      	ands	r5, r3
 800dce0:	421a      	tst	r2, r3
 800dce2:	d027      	beq.n	800dd34 <_printf_common+0x8c>
 800dce4:	0023      	movs	r3, r4
 800dce6:	3343      	adds	r3, #67	; 0x43
 800dce8:	781b      	ldrb	r3, [r3, #0]
 800dcea:	1e5a      	subs	r2, r3, #1
 800dcec:	4193      	sbcs	r3, r2
 800dcee:	6822      	ldr	r2, [r4, #0]
 800dcf0:	0692      	lsls	r2, r2, #26
 800dcf2:	d430      	bmi.n	800dd56 <_printf_common+0xae>
 800dcf4:	0022      	movs	r2, r4
 800dcf6:	9901      	ldr	r1, [sp, #4]
 800dcf8:	9800      	ldr	r0, [sp, #0]
 800dcfa:	9d08      	ldr	r5, [sp, #32]
 800dcfc:	3243      	adds	r2, #67	; 0x43
 800dcfe:	47a8      	blx	r5
 800dd00:	3001      	adds	r0, #1
 800dd02:	d025      	beq.n	800dd50 <_printf_common+0xa8>
 800dd04:	2206      	movs	r2, #6
 800dd06:	6823      	ldr	r3, [r4, #0]
 800dd08:	2500      	movs	r5, #0
 800dd0a:	4013      	ands	r3, r2
 800dd0c:	2b04      	cmp	r3, #4
 800dd0e:	d105      	bne.n	800dd1c <_printf_common+0x74>
 800dd10:	6833      	ldr	r3, [r6, #0]
 800dd12:	68e5      	ldr	r5, [r4, #12]
 800dd14:	1aed      	subs	r5, r5, r3
 800dd16:	43eb      	mvns	r3, r5
 800dd18:	17db      	asrs	r3, r3, #31
 800dd1a:	401d      	ands	r5, r3
 800dd1c:	68a3      	ldr	r3, [r4, #8]
 800dd1e:	6922      	ldr	r2, [r4, #16]
 800dd20:	4293      	cmp	r3, r2
 800dd22:	dd01      	ble.n	800dd28 <_printf_common+0x80>
 800dd24:	1a9b      	subs	r3, r3, r2
 800dd26:	18ed      	adds	r5, r5, r3
 800dd28:	2600      	movs	r6, #0
 800dd2a:	42b5      	cmp	r5, r6
 800dd2c:	d120      	bne.n	800dd70 <_printf_common+0xc8>
 800dd2e:	2000      	movs	r0, #0
 800dd30:	e010      	b.n	800dd54 <_printf_common+0xac>
 800dd32:	3501      	adds	r5, #1
 800dd34:	68e3      	ldr	r3, [r4, #12]
 800dd36:	6832      	ldr	r2, [r6, #0]
 800dd38:	1a9b      	subs	r3, r3, r2
 800dd3a:	42ab      	cmp	r3, r5
 800dd3c:	ddd2      	ble.n	800dce4 <_printf_common+0x3c>
 800dd3e:	0022      	movs	r2, r4
 800dd40:	2301      	movs	r3, #1
 800dd42:	9901      	ldr	r1, [sp, #4]
 800dd44:	9800      	ldr	r0, [sp, #0]
 800dd46:	9f08      	ldr	r7, [sp, #32]
 800dd48:	3219      	adds	r2, #25
 800dd4a:	47b8      	blx	r7
 800dd4c:	3001      	adds	r0, #1
 800dd4e:	d1f0      	bne.n	800dd32 <_printf_common+0x8a>
 800dd50:	2001      	movs	r0, #1
 800dd52:	4240      	negs	r0, r0
 800dd54:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dd56:	2030      	movs	r0, #48	; 0x30
 800dd58:	18e1      	adds	r1, r4, r3
 800dd5a:	3143      	adds	r1, #67	; 0x43
 800dd5c:	7008      	strb	r0, [r1, #0]
 800dd5e:	0021      	movs	r1, r4
 800dd60:	1c5a      	adds	r2, r3, #1
 800dd62:	3145      	adds	r1, #69	; 0x45
 800dd64:	7809      	ldrb	r1, [r1, #0]
 800dd66:	18a2      	adds	r2, r4, r2
 800dd68:	3243      	adds	r2, #67	; 0x43
 800dd6a:	3302      	adds	r3, #2
 800dd6c:	7011      	strb	r1, [r2, #0]
 800dd6e:	e7c1      	b.n	800dcf4 <_printf_common+0x4c>
 800dd70:	0022      	movs	r2, r4
 800dd72:	2301      	movs	r3, #1
 800dd74:	9901      	ldr	r1, [sp, #4]
 800dd76:	9800      	ldr	r0, [sp, #0]
 800dd78:	9f08      	ldr	r7, [sp, #32]
 800dd7a:	321a      	adds	r2, #26
 800dd7c:	47b8      	blx	r7
 800dd7e:	3001      	adds	r0, #1
 800dd80:	d0e6      	beq.n	800dd50 <_printf_common+0xa8>
 800dd82:	3601      	adds	r6, #1
 800dd84:	e7d1      	b.n	800dd2a <_printf_common+0x82>
	...

0800dd88 <_printf_i>:
 800dd88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd8a:	b08b      	sub	sp, #44	; 0x2c
 800dd8c:	9206      	str	r2, [sp, #24]
 800dd8e:	000a      	movs	r2, r1
 800dd90:	3243      	adds	r2, #67	; 0x43
 800dd92:	9307      	str	r3, [sp, #28]
 800dd94:	9005      	str	r0, [sp, #20]
 800dd96:	9204      	str	r2, [sp, #16]
 800dd98:	7e0a      	ldrb	r2, [r1, #24]
 800dd9a:	000c      	movs	r4, r1
 800dd9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dd9e:	2a78      	cmp	r2, #120	; 0x78
 800dda0:	d809      	bhi.n	800ddb6 <_printf_i+0x2e>
 800dda2:	2a62      	cmp	r2, #98	; 0x62
 800dda4:	d80b      	bhi.n	800ddbe <_printf_i+0x36>
 800dda6:	2a00      	cmp	r2, #0
 800dda8:	d100      	bne.n	800ddac <_printf_i+0x24>
 800ddaa:	e0be      	b.n	800df2a <_printf_i+0x1a2>
 800ddac:	497c      	ldr	r1, [pc, #496]	; (800dfa0 <_printf_i+0x218>)
 800ddae:	9103      	str	r1, [sp, #12]
 800ddb0:	2a58      	cmp	r2, #88	; 0x58
 800ddb2:	d100      	bne.n	800ddb6 <_printf_i+0x2e>
 800ddb4:	e093      	b.n	800dede <_printf_i+0x156>
 800ddb6:	0026      	movs	r6, r4
 800ddb8:	3642      	adds	r6, #66	; 0x42
 800ddba:	7032      	strb	r2, [r6, #0]
 800ddbc:	e022      	b.n	800de04 <_printf_i+0x7c>
 800ddbe:	0010      	movs	r0, r2
 800ddc0:	3863      	subs	r0, #99	; 0x63
 800ddc2:	2815      	cmp	r0, #21
 800ddc4:	d8f7      	bhi.n	800ddb6 <_printf_i+0x2e>
 800ddc6:	f7f2 f9ad 	bl	8000124 <__gnu_thumb1_case_shi>
 800ddca:	0016      	.short	0x0016
 800ddcc:	fff6001f 	.word	0xfff6001f
 800ddd0:	fff6fff6 	.word	0xfff6fff6
 800ddd4:	001ffff6 	.word	0x001ffff6
 800ddd8:	fff6fff6 	.word	0xfff6fff6
 800dddc:	fff6fff6 	.word	0xfff6fff6
 800dde0:	003600a3 	.word	0x003600a3
 800dde4:	fff60083 	.word	0xfff60083
 800dde8:	00b4fff6 	.word	0x00b4fff6
 800ddec:	0036fff6 	.word	0x0036fff6
 800ddf0:	fff6fff6 	.word	0xfff6fff6
 800ddf4:	0087      	.short	0x0087
 800ddf6:	0026      	movs	r6, r4
 800ddf8:	681a      	ldr	r2, [r3, #0]
 800ddfa:	3642      	adds	r6, #66	; 0x42
 800ddfc:	1d11      	adds	r1, r2, #4
 800ddfe:	6019      	str	r1, [r3, #0]
 800de00:	6813      	ldr	r3, [r2, #0]
 800de02:	7033      	strb	r3, [r6, #0]
 800de04:	2301      	movs	r3, #1
 800de06:	e0a2      	b.n	800df4e <_printf_i+0x1c6>
 800de08:	6818      	ldr	r0, [r3, #0]
 800de0a:	6809      	ldr	r1, [r1, #0]
 800de0c:	1d02      	adds	r2, r0, #4
 800de0e:	060d      	lsls	r5, r1, #24
 800de10:	d50b      	bpl.n	800de2a <_printf_i+0xa2>
 800de12:	6805      	ldr	r5, [r0, #0]
 800de14:	601a      	str	r2, [r3, #0]
 800de16:	2d00      	cmp	r5, #0
 800de18:	da03      	bge.n	800de22 <_printf_i+0x9a>
 800de1a:	232d      	movs	r3, #45	; 0x2d
 800de1c:	9a04      	ldr	r2, [sp, #16]
 800de1e:	426d      	negs	r5, r5
 800de20:	7013      	strb	r3, [r2, #0]
 800de22:	4b5f      	ldr	r3, [pc, #380]	; (800dfa0 <_printf_i+0x218>)
 800de24:	270a      	movs	r7, #10
 800de26:	9303      	str	r3, [sp, #12]
 800de28:	e01b      	b.n	800de62 <_printf_i+0xda>
 800de2a:	6805      	ldr	r5, [r0, #0]
 800de2c:	601a      	str	r2, [r3, #0]
 800de2e:	0649      	lsls	r1, r1, #25
 800de30:	d5f1      	bpl.n	800de16 <_printf_i+0x8e>
 800de32:	b22d      	sxth	r5, r5
 800de34:	e7ef      	b.n	800de16 <_printf_i+0x8e>
 800de36:	680d      	ldr	r5, [r1, #0]
 800de38:	6819      	ldr	r1, [r3, #0]
 800de3a:	1d08      	adds	r0, r1, #4
 800de3c:	6018      	str	r0, [r3, #0]
 800de3e:	062e      	lsls	r6, r5, #24
 800de40:	d501      	bpl.n	800de46 <_printf_i+0xbe>
 800de42:	680d      	ldr	r5, [r1, #0]
 800de44:	e003      	b.n	800de4e <_printf_i+0xc6>
 800de46:	066d      	lsls	r5, r5, #25
 800de48:	d5fb      	bpl.n	800de42 <_printf_i+0xba>
 800de4a:	680d      	ldr	r5, [r1, #0]
 800de4c:	b2ad      	uxth	r5, r5
 800de4e:	4b54      	ldr	r3, [pc, #336]	; (800dfa0 <_printf_i+0x218>)
 800de50:	2708      	movs	r7, #8
 800de52:	9303      	str	r3, [sp, #12]
 800de54:	2a6f      	cmp	r2, #111	; 0x6f
 800de56:	d000      	beq.n	800de5a <_printf_i+0xd2>
 800de58:	3702      	adds	r7, #2
 800de5a:	0023      	movs	r3, r4
 800de5c:	2200      	movs	r2, #0
 800de5e:	3343      	adds	r3, #67	; 0x43
 800de60:	701a      	strb	r2, [r3, #0]
 800de62:	6863      	ldr	r3, [r4, #4]
 800de64:	60a3      	str	r3, [r4, #8]
 800de66:	2b00      	cmp	r3, #0
 800de68:	db03      	blt.n	800de72 <_printf_i+0xea>
 800de6a:	2104      	movs	r1, #4
 800de6c:	6822      	ldr	r2, [r4, #0]
 800de6e:	438a      	bics	r2, r1
 800de70:	6022      	str	r2, [r4, #0]
 800de72:	2d00      	cmp	r5, #0
 800de74:	d102      	bne.n	800de7c <_printf_i+0xf4>
 800de76:	9e04      	ldr	r6, [sp, #16]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d00c      	beq.n	800de96 <_printf_i+0x10e>
 800de7c:	9e04      	ldr	r6, [sp, #16]
 800de7e:	0028      	movs	r0, r5
 800de80:	0039      	movs	r1, r7
 800de82:	f7f2 f9df 	bl	8000244 <__aeabi_uidivmod>
 800de86:	9b03      	ldr	r3, [sp, #12]
 800de88:	3e01      	subs	r6, #1
 800de8a:	5c5b      	ldrb	r3, [r3, r1]
 800de8c:	7033      	strb	r3, [r6, #0]
 800de8e:	002b      	movs	r3, r5
 800de90:	0005      	movs	r5, r0
 800de92:	429f      	cmp	r7, r3
 800de94:	d9f3      	bls.n	800de7e <_printf_i+0xf6>
 800de96:	2f08      	cmp	r7, #8
 800de98:	d109      	bne.n	800deae <_printf_i+0x126>
 800de9a:	6823      	ldr	r3, [r4, #0]
 800de9c:	07db      	lsls	r3, r3, #31
 800de9e:	d506      	bpl.n	800deae <_printf_i+0x126>
 800dea0:	6862      	ldr	r2, [r4, #4]
 800dea2:	6923      	ldr	r3, [r4, #16]
 800dea4:	429a      	cmp	r2, r3
 800dea6:	dc02      	bgt.n	800deae <_printf_i+0x126>
 800dea8:	2330      	movs	r3, #48	; 0x30
 800deaa:	3e01      	subs	r6, #1
 800deac:	7033      	strb	r3, [r6, #0]
 800deae:	9b04      	ldr	r3, [sp, #16]
 800deb0:	1b9b      	subs	r3, r3, r6
 800deb2:	6123      	str	r3, [r4, #16]
 800deb4:	9b07      	ldr	r3, [sp, #28]
 800deb6:	0021      	movs	r1, r4
 800deb8:	9300      	str	r3, [sp, #0]
 800deba:	9805      	ldr	r0, [sp, #20]
 800debc:	9b06      	ldr	r3, [sp, #24]
 800debe:	aa09      	add	r2, sp, #36	; 0x24
 800dec0:	f7ff fef2 	bl	800dca8 <_printf_common>
 800dec4:	3001      	adds	r0, #1
 800dec6:	d147      	bne.n	800df58 <_printf_i+0x1d0>
 800dec8:	2001      	movs	r0, #1
 800deca:	4240      	negs	r0, r0
 800decc:	b00b      	add	sp, #44	; 0x2c
 800dece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ded0:	2220      	movs	r2, #32
 800ded2:	6809      	ldr	r1, [r1, #0]
 800ded4:	430a      	orrs	r2, r1
 800ded6:	6022      	str	r2, [r4, #0]
 800ded8:	2278      	movs	r2, #120	; 0x78
 800deda:	4932      	ldr	r1, [pc, #200]	; (800dfa4 <_printf_i+0x21c>)
 800dedc:	9103      	str	r1, [sp, #12]
 800dede:	0021      	movs	r1, r4
 800dee0:	3145      	adds	r1, #69	; 0x45
 800dee2:	700a      	strb	r2, [r1, #0]
 800dee4:	6819      	ldr	r1, [r3, #0]
 800dee6:	6822      	ldr	r2, [r4, #0]
 800dee8:	c920      	ldmia	r1!, {r5}
 800deea:	0610      	lsls	r0, r2, #24
 800deec:	d402      	bmi.n	800def4 <_printf_i+0x16c>
 800deee:	0650      	lsls	r0, r2, #25
 800def0:	d500      	bpl.n	800def4 <_printf_i+0x16c>
 800def2:	b2ad      	uxth	r5, r5
 800def4:	6019      	str	r1, [r3, #0]
 800def6:	07d3      	lsls	r3, r2, #31
 800def8:	d502      	bpl.n	800df00 <_printf_i+0x178>
 800defa:	2320      	movs	r3, #32
 800defc:	4313      	orrs	r3, r2
 800defe:	6023      	str	r3, [r4, #0]
 800df00:	2710      	movs	r7, #16
 800df02:	2d00      	cmp	r5, #0
 800df04:	d1a9      	bne.n	800de5a <_printf_i+0xd2>
 800df06:	2220      	movs	r2, #32
 800df08:	6823      	ldr	r3, [r4, #0]
 800df0a:	4393      	bics	r3, r2
 800df0c:	6023      	str	r3, [r4, #0]
 800df0e:	e7a4      	b.n	800de5a <_printf_i+0xd2>
 800df10:	681a      	ldr	r2, [r3, #0]
 800df12:	680d      	ldr	r5, [r1, #0]
 800df14:	1d10      	adds	r0, r2, #4
 800df16:	6949      	ldr	r1, [r1, #20]
 800df18:	6018      	str	r0, [r3, #0]
 800df1a:	6813      	ldr	r3, [r2, #0]
 800df1c:	062e      	lsls	r6, r5, #24
 800df1e:	d501      	bpl.n	800df24 <_printf_i+0x19c>
 800df20:	6019      	str	r1, [r3, #0]
 800df22:	e002      	b.n	800df2a <_printf_i+0x1a2>
 800df24:	066d      	lsls	r5, r5, #25
 800df26:	d5fb      	bpl.n	800df20 <_printf_i+0x198>
 800df28:	8019      	strh	r1, [r3, #0]
 800df2a:	2300      	movs	r3, #0
 800df2c:	9e04      	ldr	r6, [sp, #16]
 800df2e:	6123      	str	r3, [r4, #16]
 800df30:	e7c0      	b.n	800deb4 <_printf_i+0x12c>
 800df32:	681a      	ldr	r2, [r3, #0]
 800df34:	1d11      	adds	r1, r2, #4
 800df36:	6019      	str	r1, [r3, #0]
 800df38:	6816      	ldr	r6, [r2, #0]
 800df3a:	2100      	movs	r1, #0
 800df3c:	0030      	movs	r0, r6
 800df3e:	6862      	ldr	r2, [r4, #4]
 800df40:	f000 fbc5 	bl	800e6ce <memchr>
 800df44:	2800      	cmp	r0, #0
 800df46:	d001      	beq.n	800df4c <_printf_i+0x1c4>
 800df48:	1b80      	subs	r0, r0, r6
 800df4a:	6060      	str	r0, [r4, #4]
 800df4c:	6863      	ldr	r3, [r4, #4]
 800df4e:	6123      	str	r3, [r4, #16]
 800df50:	2300      	movs	r3, #0
 800df52:	9a04      	ldr	r2, [sp, #16]
 800df54:	7013      	strb	r3, [r2, #0]
 800df56:	e7ad      	b.n	800deb4 <_printf_i+0x12c>
 800df58:	0032      	movs	r2, r6
 800df5a:	6923      	ldr	r3, [r4, #16]
 800df5c:	9906      	ldr	r1, [sp, #24]
 800df5e:	9805      	ldr	r0, [sp, #20]
 800df60:	9d07      	ldr	r5, [sp, #28]
 800df62:	47a8      	blx	r5
 800df64:	3001      	adds	r0, #1
 800df66:	d0af      	beq.n	800dec8 <_printf_i+0x140>
 800df68:	6823      	ldr	r3, [r4, #0]
 800df6a:	079b      	lsls	r3, r3, #30
 800df6c:	d415      	bmi.n	800df9a <_printf_i+0x212>
 800df6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df70:	68e0      	ldr	r0, [r4, #12]
 800df72:	4298      	cmp	r0, r3
 800df74:	daaa      	bge.n	800decc <_printf_i+0x144>
 800df76:	0018      	movs	r0, r3
 800df78:	e7a8      	b.n	800decc <_printf_i+0x144>
 800df7a:	0022      	movs	r2, r4
 800df7c:	2301      	movs	r3, #1
 800df7e:	9906      	ldr	r1, [sp, #24]
 800df80:	9805      	ldr	r0, [sp, #20]
 800df82:	9e07      	ldr	r6, [sp, #28]
 800df84:	3219      	adds	r2, #25
 800df86:	47b0      	blx	r6
 800df88:	3001      	adds	r0, #1
 800df8a:	d09d      	beq.n	800dec8 <_printf_i+0x140>
 800df8c:	3501      	adds	r5, #1
 800df8e:	68e3      	ldr	r3, [r4, #12]
 800df90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df92:	1a9b      	subs	r3, r3, r2
 800df94:	42ab      	cmp	r3, r5
 800df96:	dcf0      	bgt.n	800df7a <_printf_i+0x1f2>
 800df98:	e7e9      	b.n	800df6e <_printf_i+0x1e6>
 800df9a:	2500      	movs	r5, #0
 800df9c:	e7f7      	b.n	800df8e <_printf_i+0x206>
 800df9e:	46c0      	nop			; (mov r8, r8)
 800dfa0:	0801150a 	.word	0x0801150a
 800dfa4:	0801151b 	.word	0x0801151b

0800dfa8 <__sflush_r>:
 800dfa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dfaa:	898b      	ldrh	r3, [r1, #12]
 800dfac:	0005      	movs	r5, r0
 800dfae:	000c      	movs	r4, r1
 800dfb0:	071a      	lsls	r2, r3, #28
 800dfb2:	d45c      	bmi.n	800e06e <__sflush_r+0xc6>
 800dfb4:	684a      	ldr	r2, [r1, #4]
 800dfb6:	2a00      	cmp	r2, #0
 800dfb8:	dc04      	bgt.n	800dfc4 <__sflush_r+0x1c>
 800dfba:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800dfbc:	2a00      	cmp	r2, #0
 800dfbe:	dc01      	bgt.n	800dfc4 <__sflush_r+0x1c>
 800dfc0:	2000      	movs	r0, #0
 800dfc2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dfc4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800dfc6:	2f00      	cmp	r7, #0
 800dfc8:	d0fa      	beq.n	800dfc0 <__sflush_r+0x18>
 800dfca:	2200      	movs	r2, #0
 800dfcc:	2080      	movs	r0, #128	; 0x80
 800dfce:	682e      	ldr	r6, [r5, #0]
 800dfd0:	602a      	str	r2, [r5, #0]
 800dfd2:	001a      	movs	r2, r3
 800dfd4:	0140      	lsls	r0, r0, #5
 800dfd6:	6a21      	ldr	r1, [r4, #32]
 800dfd8:	4002      	ands	r2, r0
 800dfda:	4203      	tst	r3, r0
 800dfdc:	d034      	beq.n	800e048 <__sflush_r+0xa0>
 800dfde:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dfe0:	89a3      	ldrh	r3, [r4, #12]
 800dfe2:	075b      	lsls	r3, r3, #29
 800dfe4:	d506      	bpl.n	800dff4 <__sflush_r+0x4c>
 800dfe6:	6863      	ldr	r3, [r4, #4]
 800dfe8:	1ac0      	subs	r0, r0, r3
 800dfea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d001      	beq.n	800dff4 <__sflush_r+0x4c>
 800dff0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dff2:	1ac0      	subs	r0, r0, r3
 800dff4:	0002      	movs	r2, r0
 800dff6:	2300      	movs	r3, #0
 800dff8:	0028      	movs	r0, r5
 800dffa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800dffc:	6a21      	ldr	r1, [r4, #32]
 800dffe:	47b8      	blx	r7
 800e000:	89a2      	ldrh	r2, [r4, #12]
 800e002:	1c43      	adds	r3, r0, #1
 800e004:	d106      	bne.n	800e014 <__sflush_r+0x6c>
 800e006:	6829      	ldr	r1, [r5, #0]
 800e008:	291d      	cmp	r1, #29
 800e00a:	d82c      	bhi.n	800e066 <__sflush_r+0xbe>
 800e00c:	4b2a      	ldr	r3, [pc, #168]	; (800e0b8 <__sflush_r+0x110>)
 800e00e:	410b      	asrs	r3, r1
 800e010:	07db      	lsls	r3, r3, #31
 800e012:	d428      	bmi.n	800e066 <__sflush_r+0xbe>
 800e014:	2300      	movs	r3, #0
 800e016:	6063      	str	r3, [r4, #4]
 800e018:	6923      	ldr	r3, [r4, #16]
 800e01a:	6023      	str	r3, [r4, #0]
 800e01c:	04d2      	lsls	r2, r2, #19
 800e01e:	d505      	bpl.n	800e02c <__sflush_r+0x84>
 800e020:	1c43      	adds	r3, r0, #1
 800e022:	d102      	bne.n	800e02a <__sflush_r+0x82>
 800e024:	682b      	ldr	r3, [r5, #0]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d100      	bne.n	800e02c <__sflush_r+0x84>
 800e02a:	6560      	str	r0, [r4, #84]	; 0x54
 800e02c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e02e:	602e      	str	r6, [r5, #0]
 800e030:	2900      	cmp	r1, #0
 800e032:	d0c5      	beq.n	800dfc0 <__sflush_r+0x18>
 800e034:	0023      	movs	r3, r4
 800e036:	3344      	adds	r3, #68	; 0x44
 800e038:	4299      	cmp	r1, r3
 800e03a:	d002      	beq.n	800e042 <__sflush_r+0x9a>
 800e03c:	0028      	movs	r0, r5
 800e03e:	f001 f9f7 	bl	800f430 <_free_r>
 800e042:	2000      	movs	r0, #0
 800e044:	6360      	str	r0, [r4, #52]	; 0x34
 800e046:	e7bc      	b.n	800dfc2 <__sflush_r+0x1a>
 800e048:	2301      	movs	r3, #1
 800e04a:	0028      	movs	r0, r5
 800e04c:	47b8      	blx	r7
 800e04e:	1c43      	adds	r3, r0, #1
 800e050:	d1c6      	bne.n	800dfe0 <__sflush_r+0x38>
 800e052:	682b      	ldr	r3, [r5, #0]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d0c3      	beq.n	800dfe0 <__sflush_r+0x38>
 800e058:	2b1d      	cmp	r3, #29
 800e05a:	d001      	beq.n	800e060 <__sflush_r+0xb8>
 800e05c:	2b16      	cmp	r3, #22
 800e05e:	d101      	bne.n	800e064 <__sflush_r+0xbc>
 800e060:	602e      	str	r6, [r5, #0]
 800e062:	e7ad      	b.n	800dfc0 <__sflush_r+0x18>
 800e064:	89a2      	ldrh	r2, [r4, #12]
 800e066:	2340      	movs	r3, #64	; 0x40
 800e068:	4313      	orrs	r3, r2
 800e06a:	81a3      	strh	r3, [r4, #12]
 800e06c:	e7a9      	b.n	800dfc2 <__sflush_r+0x1a>
 800e06e:	690e      	ldr	r6, [r1, #16]
 800e070:	2e00      	cmp	r6, #0
 800e072:	d0a5      	beq.n	800dfc0 <__sflush_r+0x18>
 800e074:	680f      	ldr	r7, [r1, #0]
 800e076:	600e      	str	r6, [r1, #0]
 800e078:	1bba      	subs	r2, r7, r6
 800e07a:	9201      	str	r2, [sp, #4]
 800e07c:	2200      	movs	r2, #0
 800e07e:	079b      	lsls	r3, r3, #30
 800e080:	d100      	bne.n	800e084 <__sflush_r+0xdc>
 800e082:	694a      	ldr	r2, [r1, #20]
 800e084:	60a2      	str	r2, [r4, #8]
 800e086:	9b01      	ldr	r3, [sp, #4]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	dd99      	ble.n	800dfc0 <__sflush_r+0x18>
 800e08c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e08e:	0032      	movs	r2, r6
 800e090:	001f      	movs	r7, r3
 800e092:	0028      	movs	r0, r5
 800e094:	9b01      	ldr	r3, [sp, #4]
 800e096:	6a21      	ldr	r1, [r4, #32]
 800e098:	47b8      	blx	r7
 800e09a:	2800      	cmp	r0, #0
 800e09c:	dc06      	bgt.n	800e0ac <__sflush_r+0x104>
 800e09e:	2340      	movs	r3, #64	; 0x40
 800e0a0:	2001      	movs	r0, #1
 800e0a2:	89a2      	ldrh	r2, [r4, #12]
 800e0a4:	4240      	negs	r0, r0
 800e0a6:	4313      	orrs	r3, r2
 800e0a8:	81a3      	strh	r3, [r4, #12]
 800e0aa:	e78a      	b.n	800dfc2 <__sflush_r+0x1a>
 800e0ac:	9b01      	ldr	r3, [sp, #4]
 800e0ae:	1836      	adds	r6, r6, r0
 800e0b0:	1a1b      	subs	r3, r3, r0
 800e0b2:	9301      	str	r3, [sp, #4]
 800e0b4:	e7e7      	b.n	800e086 <__sflush_r+0xde>
 800e0b6:	46c0      	nop			; (mov r8, r8)
 800e0b8:	dfbffffe 	.word	0xdfbffffe

0800e0bc <_fflush_r>:
 800e0bc:	690b      	ldr	r3, [r1, #16]
 800e0be:	b570      	push	{r4, r5, r6, lr}
 800e0c0:	0005      	movs	r5, r0
 800e0c2:	000c      	movs	r4, r1
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d102      	bne.n	800e0ce <_fflush_r+0x12>
 800e0c8:	2500      	movs	r5, #0
 800e0ca:	0028      	movs	r0, r5
 800e0cc:	bd70      	pop	{r4, r5, r6, pc}
 800e0ce:	2800      	cmp	r0, #0
 800e0d0:	d004      	beq.n	800e0dc <_fflush_r+0x20>
 800e0d2:	6a03      	ldr	r3, [r0, #32]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d101      	bne.n	800e0dc <_fflush_r+0x20>
 800e0d8:	f000 f8c4 	bl	800e264 <__sinit>
 800e0dc:	220c      	movs	r2, #12
 800e0de:	5ea3      	ldrsh	r3, [r4, r2]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d0f1      	beq.n	800e0c8 <_fflush_r+0xc>
 800e0e4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e0e6:	07d2      	lsls	r2, r2, #31
 800e0e8:	d404      	bmi.n	800e0f4 <_fflush_r+0x38>
 800e0ea:	059b      	lsls	r3, r3, #22
 800e0ec:	d402      	bmi.n	800e0f4 <_fflush_r+0x38>
 800e0ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e0f0:	f000 faeb 	bl	800e6ca <__retarget_lock_acquire_recursive>
 800e0f4:	0028      	movs	r0, r5
 800e0f6:	0021      	movs	r1, r4
 800e0f8:	f7ff ff56 	bl	800dfa8 <__sflush_r>
 800e0fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e0fe:	0005      	movs	r5, r0
 800e100:	07db      	lsls	r3, r3, #31
 800e102:	d4e2      	bmi.n	800e0ca <_fflush_r+0xe>
 800e104:	89a3      	ldrh	r3, [r4, #12]
 800e106:	059b      	lsls	r3, r3, #22
 800e108:	d4df      	bmi.n	800e0ca <_fflush_r+0xe>
 800e10a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e10c:	f000 fade 	bl	800e6cc <__retarget_lock_release_recursive>
 800e110:	e7db      	b.n	800e0ca <_fflush_r+0xe>
	...

0800e114 <fflush>:
 800e114:	0001      	movs	r1, r0
 800e116:	b510      	push	{r4, lr}
 800e118:	2800      	cmp	r0, #0
 800e11a:	d105      	bne.n	800e128 <fflush+0x14>
 800e11c:	4a05      	ldr	r2, [pc, #20]	; (800e134 <fflush+0x20>)
 800e11e:	4906      	ldr	r1, [pc, #24]	; (800e138 <fflush+0x24>)
 800e120:	4806      	ldr	r0, [pc, #24]	; (800e13c <fflush+0x28>)
 800e122:	f000 f8b7 	bl	800e294 <_fwalk_sglue>
 800e126:	bd10      	pop	{r4, pc}
 800e128:	4b05      	ldr	r3, [pc, #20]	; (800e140 <fflush+0x2c>)
 800e12a:	6818      	ldr	r0, [r3, #0]
 800e12c:	f7ff ffc6 	bl	800e0bc <_fflush_r>
 800e130:	e7f9      	b.n	800e126 <fflush+0x12>
 800e132:	46c0      	nop			; (mov r8, r8)
 800e134:	20000040 	.word	0x20000040
 800e138:	0800e0bd 	.word	0x0800e0bd
 800e13c:	2000004c 	.word	0x2000004c
 800e140:	20000098 	.word	0x20000098

0800e144 <std>:
 800e144:	2300      	movs	r3, #0
 800e146:	b510      	push	{r4, lr}
 800e148:	0004      	movs	r4, r0
 800e14a:	6003      	str	r3, [r0, #0]
 800e14c:	6043      	str	r3, [r0, #4]
 800e14e:	6083      	str	r3, [r0, #8]
 800e150:	8181      	strh	r1, [r0, #12]
 800e152:	6643      	str	r3, [r0, #100]	; 0x64
 800e154:	81c2      	strh	r2, [r0, #14]
 800e156:	6103      	str	r3, [r0, #16]
 800e158:	6143      	str	r3, [r0, #20]
 800e15a:	6183      	str	r3, [r0, #24]
 800e15c:	0019      	movs	r1, r3
 800e15e:	2208      	movs	r2, #8
 800e160:	305c      	adds	r0, #92	; 0x5c
 800e162:	f000 fa2d 	bl	800e5c0 <memset>
 800e166:	4b0b      	ldr	r3, [pc, #44]	; (800e194 <std+0x50>)
 800e168:	6224      	str	r4, [r4, #32]
 800e16a:	6263      	str	r3, [r4, #36]	; 0x24
 800e16c:	4b0a      	ldr	r3, [pc, #40]	; (800e198 <std+0x54>)
 800e16e:	62a3      	str	r3, [r4, #40]	; 0x28
 800e170:	4b0a      	ldr	r3, [pc, #40]	; (800e19c <std+0x58>)
 800e172:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e174:	4b0a      	ldr	r3, [pc, #40]	; (800e1a0 <std+0x5c>)
 800e176:	6323      	str	r3, [r4, #48]	; 0x30
 800e178:	4b0a      	ldr	r3, [pc, #40]	; (800e1a4 <std+0x60>)
 800e17a:	429c      	cmp	r4, r3
 800e17c:	d005      	beq.n	800e18a <std+0x46>
 800e17e:	4b0a      	ldr	r3, [pc, #40]	; (800e1a8 <std+0x64>)
 800e180:	429c      	cmp	r4, r3
 800e182:	d002      	beq.n	800e18a <std+0x46>
 800e184:	4b09      	ldr	r3, [pc, #36]	; (800e1ac <std+0x68>)
 800e186:	429c      	cmp	r4, r3
 800e188:	d103      	bne.n	800e192 <std+0x4e>
 800e18a:	0020      	movs	r0, r4
 800e18c:	3058      	adds	r0, #88	; 0x58
 800e18e:	f000 fa9b 	bl	800e6c8 <__retarget_lock_init_recursive>
 800e192:	bd10      	pop	{r4, pc}
 800e194:	0800e3c1 	.word	0x0800e3c1
 800e198:	0800e3e9 	.word	0x0800e3e9
 800e19c:	0800e421 	.word	0x0800e421
 800e1a0:	0800e44d 	.word	0x0800e44d
 800e1a4:	20000b9c 	.word	0x20000b9c
 800e1a8:	20000c04 	.word	0x20000c04
 800e1ac:	20000c6c 	.word	0x20000c6c

0800e1b0 <stdio_exit_handler>:
 800e1b0:	b510      	push	{r4, lr}
 800e1b2:	4a03      	ldr	r2, [pc, #12]	; (800e1c0 <stdio_exit_handler+0x10>)
 800e1b4:	4903      	ldr	r1, [pc, #12]	; (800e1c4 <stdio_exit_handler+0x14>)
 800e1b6:	4804      	ldr	r0, [pc, #16]	; (800e1c8 <stdio_exit_handler+0x18>)
 800e1b8:	f000 f86c 	bl	800e294 <_fwalk_sglue>
 800e1bc:	bd10      	pop	{r4, pc}
 800e1be:	46c0      	nop			; (mov r8, r8)
 800e1c0:	20000040 	.word	0x20000040
 800e1c4:	0800e0bd 	.word	0x0800e0bd
 800e1c8:	2000004c 	.word	0x2000004c

0800e1cc <cleanup_stdio>:
 800e1cc:	6841      	ldr	r1, [r0, #4]
 800e1ce:	4b0b      	ldr	r3, [pc, #44]	; (800e1fc <cleanup_stdio+0x30>)
 800e1d0:	b510      	push	{r4, lr}
 800e1d2:	0004      	movs	r4, r0
 800e1d4:	4299      	cmp	r1, r3
 800e1d6:	d001      	beq.n	800e1dc <cleanup_stdio+0x10>
 800e1d8:	f7ff ff70 	bl	800e0bc <_fflush_r>
 800e1dc:	68a1      	ldr	r1, [r4, #8]
 800e1de:	4b08      	ldr	r3, [pc, #32]	; (800e200 <cleanup_stdio+0x34>)
 800e1e0:	4299      	cmp	r1, r3
 800e1e2:	d002      	beq.n	800e1ea <cleanup_stdio+0x1e>
 800e1e4:	0020      	movs	r0, r4
 800e1e6:	f7ff ff69 	bl	800e0bc <_fflush_r>
 800e1ea:	68e1      	ldr	r1, [r4, #12]
 800e1ec:	4b05      	ldr	r3, [pc, #20]	; (800e204 <cleanup_stdio+0x38>)
 800e1ee:	4299      	cmp	r1, r3
 800e1f0:	d002      	beq.n	800e1f8 <cleanup_stdio+0x2c>
 800e1f2:	0020      	movs	r0, r4
 800e1f4:	f7ff ff62 	bl	800e0bc <_fflush_r>
 800e1f8:	bd10      	pop	{r4, pc}
 800e1fa:	46c0      	nop			; (mov r8, r8)
 800e1fc:	20000b9c 	.word	0x20000b9c
 800e200:	20000c04 	.word	0x20000c04
 800e204:	20000c6c 	.word	0x20000c6c

0800e208 <global_stdio_init.part.0>:
 800e208:	b510      	push	{r4, lr}
 800e20a:	4b09      	ldr	r3, [pc, #36]	; (800e230 <global_stdio_init.part.0+0x28>)
 800e20c:	4a09      	ldr	r2, [pc, #36]	; (800e234 <global_stdio_init.part.0+0x2c>)
 800e20e:	2104      	movs	r1, #4
 800e210:	601a      	str	r2, [r3, #0]
 800e212:	4809      	ldr	r0, [pc, #36]	; (800e238 <global_stdio_init.part.0+0x30>)
 800e214:	2200      	movs	r2, #0
 800e216:	f7ff ff95 	bl	800e144 <std>
 800e21a:	2201      	movs	r2, #1
 800e21c:	2109      	movs	r1, #9
 800e21e:	4807      	ldr	r0, [pc, #28]	; (800e23c <global_stdio_init.part.0+0x34>)
 800e220:	f7ff ff90 	bl	800e144 <std>
 800e224:	2202      	movs	r2, #2
 800e226:	2112      	movs	r1, #18
 800e228:	4805      	ldr	r0, [pc, #20]	; (800e240 <global_stdio_init.part.0+0x38>)
 800e22a:	f7ff ff8b 	bl	800e144 <std>
 800e22e:	bd10      	pop	{r4, pc}
 800e230:	20000cd4 	.word	0x20000cd4
 800e234:	0800e1b1 	.word	0x0800e1b1
 800e238:	20000b9c 	.word	0x20000b9c
 800e23c:	20000c04 	.word	0x20000c04
 800e240:	20000c6c 	.word	0x20000c6c

0800e244 <__sfp_lock_acquire>:
 800e244:	b510      	push	{r4, lr}
 800e246:	4802      	ldr	r0, [pc, #8]	; (800e250 <__sfp_lock_acquire+0xc>)
 800e248:	f000 fa3f 	bl	800e6ca <__retarget_lock_acquire_recursive>
 800e24c:	bd10      	pop	{r4, pc}
 800e24e:	46c0      	nop			; (mov r8, r8)
 800e250:	20000cdd 	.word	0x20000cdd

0800e254 <__sfp_lock_release>:
 800e254:	b510      	push	{r4, lr}
 800e256:	4802      	ldr	r0, [pc, #8]	; (800e260 <__sfp_lock_release+0xc>)
 800e258:	f000 fa38 	bl	800e6cc <__retarget_lock_release_recursive>
 800e25c:	bd10      	pop	{r4, pc}
 800e25e:	46c0      	nop			; (mov r8, r8)
 800e260:	20000cdd 	.word	0x20000cdd

0800e264 <__sinit>:
 800e264:	b510      	push	{r4, lr}
 800e266:	0004      	movs	r4, r0
 800e268:	f7ff ffec 	bl	800e244 <__sfp_lock_acquire>
 800e26c:	6a23      	ldr	r3, [r4, #32]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d002      	beq.n	800e278 <__sinit+0x14>
 800e272:	f7ff ffef 	bl	800e254 <__sfp_lock_release>
 800e276:	bd10      	pop	{r4, pc}
 800e278:	4b04      	ldr	r3, [pc, #16]	; (800e28c <__sinit+0x28>)
 800e27a:	6223      	str	r3, [r4, #32]
 800e27c:	4b04      	ldr	r3, [pc, #16]	; (800e290 <__sinit+0x2c>)
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d1f6      	bne.n	800e272 <__sinit+0xe>
 800e284:	f7ff ffc0 	bl	800e208 <global_stdio_init.part.0>
 800e288:	e7f3      	b.n	800e272 <__sinit+0xe>
 800e28a:	46c0      	nop			; (mov r8, r8)
 800e28c:	0800e1cd 	.word	0x0800e1cd
 800e290:	20000cd4 	.word	0x20000cd4

0800e294 <_fwalk_sglue>:
 800e294:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e296:	0014      	movs	r4, r2
 800e298:	2600      	movs	r6, #0
 800e29a:	9000      	str	r0, [sp, #0]
 800e29c:	9101      	str	r1, [sp, #4]
 800e29e:	68a5      	ldr	r5, [r4, #8]
 800e2a0:	6867      	ldr	r7, [r4, #4]
 800e2a2:	3f01      	subs	r7, #1
 800e2a4:	d504      	bpl.n	800e2b0 <_fwalk_sglue+0x1c>
 800e2a6:	6824      	ldr	r4, [r4, #0]
 800e2a8:	2c00      	cmp	r4, #0
 800e2aa:	d1f8      	bne.n	800e29e <_fwalk_sglue+0xa>
 800e2ac:	0030      	movs	r0, r6
 800e2ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e2b0:	89ab      	ldrh	r3, [r5, #12]
 800e2b2:	2b01      	cmp	r3, #1
 800e2b4:	d908      	bls.n	800e2c8 <_fwalk_sglue+0x34>
 800e2b6:	220e      	movs	r2, #14
 800e2b8:	5eab      	ldrsh	r3, [r5, r2]
 800e2ba:	3301      	adds	r3, #1
 800e2bc:	d004      	beq.n	800e2c8 <_fwalk_sglue+0x34>
 800e2be:	0029      	movs	r1, r5
 800e2c0:	9800      	ldr	r0, [sp, #0]
 800e2c2:	9b01      	ldr	r3, [sp, #4]
 800e2c4:	4798      	blx	r3
 800e2c6:	4306      	orrs	r6, r0
 800e2c8:	3568      	adds	r5, #104	; 0x68
 800e2ca:	e7ea      	b.n	800e2a2 <_fwalk_sglue+0xe>

0800e2cc <iprintf>:
 800e2cc:	b40f      	push	{r0, r1, r2, r3}
 800e2ce:	b507      	push	{r0, r1, r2, lr}
 800e2d0:	4905      	ldr	r1, [pc, #20]	; (800e2e8 <iprintf+0x1c>)
 800e2d2:	ab04      	add	r3, sp, #16
 800e2d4:	6808      	ldr	r0, [r1, #0]
 800e2d6:	cb04      	ldmia	r3!, {r2}
 800e2d8:	6881      	ldr	r1, [r0, #8]
 800e2da:	9301      	str	r3, [sp, #4]
 800e2dc:	f001 fd72 	bl	800fdc4 <_vfiprintf_r>
 800e2e0:	b003      	add	sp, #12
 800e2e2:	bc08      	pop	{r3}
 800e2e4:	b004      	add	sp, #16
 800e2e6:	4718      	bx	r3
 800e2e8:	20000098 	.word	0x20000098

0800e2ec <putchar>:
 800e2ec:	b510      	push	{r4, lr}
 800e2ee:	4b03      	ldr	r3, [pc, #12]	; (800e2fc <putchar+0x10>)
 800e2f0:	0001      	movs	r1, r0
 800e2f2:	6818      	ldr	r0, [r3, #0]
 800e2f4:	6882      	ldr	r2, [r0, #8]
 800e2f6:	f001 fee7 	bl	80100c8 <_putc_r>
 800e2fa:	bd10      	pop	{r4, pc}
 800e2fc:	20000098 	.word	0x20000098

0800e300 <_puts_r>:
 800e300:	6a03      	ldr	r3, [r0, #32]
 800e302:	b570      	push	{r4, r5, r6, lr}
 800e304:	0005      	movs	r5, r0
 800e306:	000e      	movs	r6, r1
 800e308:	6884      	ldr	r4, [r0, #8]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d101      	bne.n	800e312 <_puts_r+0x12>
 800e30e:	f7ff ffa9 	bl	800e264 <__sinit>
 800e312:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e314:	07db      	lsls	r3, r3, #31
 800e316:	d405      	bmi.n	800e324 <_puts_r+0x24>
 800e318:	89a3      	ldrh	r3, [r4, #12]
 800e31a:	059b      	lsls	r3, r3, #22
 800e31c:	d402      	bmi.n	800e324 <_puts_r+0x24>
 800e31e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e320:	f000 f9d3 	bl	800e6ca <__retarget_lock_acquire_recursive>
 800e324:	89a3      	ldrh	r3, [r4, #12]
 800e326:	071b      	lsls	r3, r3, #28
 800e328:	d502      	bpl.n	800e330 <_puts_r+0x30>
 800e32a:	6923      	ldr	r3, [r4, #16]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d11f      	bne.n	800e370 <_puts_r+0x70>
 800e330:	0021      	movs	r1, r4
 800e332:	0028      	movs	r0, r5
 800e334:	f000 f8d2 	bl	800e4dc <__swsetup_r>
 800e338:	2800      	cmp	r0, #0
 800e33a:	d019      	beq.n	800e370 <_puts_r+0x70>
 800e33c:	2501      	movs	r5, #1
 800e33e:	426d      	negs	r5, r5
 800e340:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e342:	07db      	lsls	r3, r3, #31
 800e344:	d405      	bmi.n	800e352 <_puts_r+0x52>
 800e346:	89a3      	ldrh	r3, [r4, #12]
 800e348:	059b      	lsls	r3, r3, #22
 800e34a:	d402      	bmi.n	800e352 <_puts_r+0x52>
 800e34c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e34e:	f000 f9bd 	bl	800e6cc <__retarget_lock_release_recursive>
 800e352:	0028      	movs	r0, r5
 800e354:	bd70      	pop	{r4, r5, r6, pc}
 800e356:	3601      	adds	r6, #1
 800e358:	60a3      	str	r3, [r4, #8]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	da04      	bge.n	800e368 <_puts_r+0x68>
 800e35e:	69a2      	ldr	r2, [r4, #24]
 800e360:	429a      	cmp	r2, r3
 800e362:	dc16      	bgt.n	800e392 <_puts_r+0x92>
 800e364:	290a      	cmp	r1, #10
 800e366:	d014      	beq.n	800e392 <_puts_r+0x92>
 800e368:	6823      	ldr	r3, [r4, #0]
 800e36a:	1c5a      	adds	r2, r3, #1
 800e36c:	6022      	str	r2, [r4, #0]
 800e36e:	7019      	strb	r1, [r3, #0]
 800e370:	68a3      	ldr	r3, [r4, #8]
 800e372:	7831      	ldrb	r1, [r6, #0]
 800e374:	3b01      	subs	r3, #1
 800e376:	2900      	cmp	r1, #0
 800e378:	d1ed      	bne.n	800e356 <_puts_r+0x56>
 800e37a:	60a3      	str	r3, [r4, #8]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	da0f      	bge.n	800e3a0 <_puts_r+0xa0>
 800e380:	0028      	movs	r0, r5
 800e382:	0022      	movs	r2, r4
 800e384:	310a      	adds	r1, #10
 800e386:	f000 f867 	bl	800e458 <__swbuf_r>
 800e38a:	250a      	movs	r5, #10
 800e38c:	3001      	adds	r0, #1
 800e38e:	d1d7      	bne.n	800e340 <_puts_r+0x40>
 800e390:	e7d4      	b.n	800e33c <_puts_r+0x3c>
 800e392:	0022      	movs	r2, r4
 800e394:	0028      	movs	r0, r5
 800e396:	f000 f85f 	bl	800e458 <__swbuf_r>
 800e39a:	3001      	adds	r0, #1
 800e39c:	d1e8      	bne.n	800e370 <_puts_r+0x70>
 800e39e:	e7cd      	b.n	800e33c <_puts_r+0x3c>
 800e3a0:	250a      	movs	r5, #10
 800e3a2:	6823      	ldr	r3, [r4, #0]
 800e3a4:	1c5a      	adds	r2, r3, #1
 800e3a6:	6022      	str	r2, [r4, #0]
 800e3a8:	701d      	strb	r5, [r3, #0]
 800e3aa:	e7c9      	b.n	800e340 <_puts_r+0x40>

0800e3ac <puts>:
 800e3ac:	b510      	push	{r4, lr}
 800e3ae:	4b03      	ldr	r3, [pc, #12]	; (800e3bc <puts+0x10>)
 800e3b0:	0001      	movs	r1, r0
 800e3b2:	6818      	ldr	r0, [r3, #0]
 800e3b4:	f7ff ffa4 	bl	800e300 <_puts_r>
 800e3b8:	bd10      	pop	{r4, pc}
 800e3ba:	46c0      	nop			; (mov r8, r8)
 800e3bc:	20000098 	.word	0x20000098

0800e3c0 <__sread>:
 800e3c0:	b570      	push	{r4, r5, r6, lr}
 800e3c2:	000c      	movs	r4, r1
 800e3c4:	250e      	movs	r5, #14
 800e3c6:	5f49      	ldrsh	r1, [r1, r5]
 800e3c8:	f000 f92c 	bl	800e624 <_read_r>
 800e3cc:	2800      	cmp	r0, #0
 800e3ce:	db03      	blt.n	800e3d8 <__sread+0x18>
 800e3d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800e3d2:	181b      	adds	r3, r3, r0
 800e3d4:	6563      	str	r3, [r4, #84]	; 0x54
 800e3d6:	bd70      	pop	{r4, r5, r6, pc}
 800e3d8:	89a3      	ldrh	r3, [r4, #12]
 800e3da:	4a02      	ldr	r2, [pc, #8]	; (800e3e4 <__sread+0x24>)
 800e3dc:	4013      	ands	r3, r2
 800e3de:	81a3      	strh	r3, [r4, #12]
 800e3e0:	e7f9      	b.n	800e3d6 <__sread+0x16>
 800e3e2:	46c0      	nop			; (mov r8, r8)
 800e3e4:	ffffefff 	.word	0xffffefff

0800e3e8 <__swrite>:
 800e3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3ea:	001f      	movs	r7, r3
 800e3ec:	898b      	ldrh	r3, [r1, #12]
 800e3ee:	0005      	movs	r5, r0
 800e3f0:	000c      	movs	r4, r1
 800e3f2:	0016      	movs	r6, r2
 800e3f4:	05db      	lsls	r3, r3, #23
 800e3f6:	d505      	bpl.n	800e404 <__swrite+0x1c>
 800e3f8:	230e      	movs	r3, #14
 800e3fa:	5ec9      	ldrsh	r1, [r1, r3]
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	2302      	movs	r3, #2
 800e400:	f000 f8fc 	bl	800e5fc <_lseek_r>
 800e404:	89a3      	ldrh	r3, [r4, #12]
 800e406:	4a05      	ldr	r2, [pc, #20]	; (800e41c <__swrite+0x34>)
 800e408:	0028      	movs	r0, r5
 800e40a:	4013      	ands	r3, r2
 800e40c:	81a3      	strh	r3, [r4, #12]
 800e40e:	0032      	movs	r2, r6
 800e410:	230e      	movs	r3, #14
 800e412:	5ee1      	ldrsh	r1, [r4, r3]
 800e414:	003b      	movs	r3, r7
 800e416:	f000 f919 	bl	800e64c <_write_r>
 800e41a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e41c:	ffffefff 	.word	0xffffefff

0800e420 <__sseek>:
 800e420:	b570      	push	{r4, r5, r6, lr}
 800e422:	000c      	movs	r4, r1
 800e424:	250e      	movs	r5, #14
 800e426:	5f49      	ldrsh	r1, [r1, r5]
 800e428:	f000 f8e8 	bl	800e5fc <_lseek_r>
 800e42c:	89a3      	ldrh	r3, [r4, #12]
 800e42e:	1c42      	adds	r2, r0, #1
 800e430:	d103      	bne.n	800e43a <__sseek+0x1a>
 800e432:	4a05      	ldr	r2, [pc, #20]	; (800e448 <__sseek+0x28>)
 800e434:	4013      	ands	r3, r2
 800e436:	81a3      	strh	r3, [r4, #12]
 800e438:	bd70      	pop	{r4, r5, r6, pc}
 800e43a:	2280      	movs	r2, #128	; 0x80
 800e43c:	0152      	lsls	r2, r2, #5
 800e43e:	4313      	orrs	r3, r2
 800e440:	81a3      	strh	r3, [r4, #12]
 800e442:	6560      	str	r0, [r4, #84]	; 0x54
 800e444:	e7f8      	b.n	800e438 <__sseek+0x18>
 800e446:	46c0      	nop			; (mov r8, r8)
 800e448:	ffffefff 	.word	0xffffefff

0800e44c <__sclose>:
 800e44c:	b510      	push	{r4, lr}
 800e44e:	230e      	movs	r3, #14
 800e450:	5ec9      	ldrsh	r1, [r1, r3]
 800e452:	f000 f8c1 	bl	800e5d8 <_close_r>
 800e456:	bd10      	pop	{r4, pc}

0800e458 <__swbuf_r>:
 800e458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e45a:	0006      	movs	r6, r0
 800e45c:	000d      	movs	r5, r1
 800e45e:	0014      	movs	r4, r2
 800e460:	2800      	cmp	r0, #0
 800e462:	d004      	beq.n	800e46e <__swbuf_r+0x16>
 800e464:	6a03      	ldr	r3, [r0, #32]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d101      	bne.n	800e46e <__swbuf_r+0x16>
 800e46a:	f7ff fefb 	bl	800e264 <__sinit>
 800e46e:	69a3      	ldr	r3, [r4, #24]
 800e470:	60a3      	str	r3, [r4, #8]
 800e472:	89a3      	ldrh	r3, [r4, #12]
 800e474:	071b      	lsls	r3, r3, #28
 800e476:	d528      	bpl.n	800e4ca <__swbuf_r+0x72>
 800e478:	6923      	ldr	r3, [r4, #16]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d025      	beq.n	800e4ca <__swbuf_r+0x72>
 800e47e:	6923      	ldr	r3, [r4, #16]
 800e480:	6820      	ldr	r0, [r4, #0]
 800e482:	b2ef      	uxtb	r7, r5
 800e484:	1ac0      	subs	r0, r0, r3
 800e486:	6963      	ldr	r3, [r4, #20]
 800e488:	b2ed      	uxtb	r5, r5
 800e48a:	4283      	cmp	r3, r0
 800e48c:	dc05      	bgt.n	800e49a <__swbuf_r+0x42>
 800e48e:	0021      	movs	r1, r4
 800e490:	0030      	movs	r0, r6
 800e492:	f7ff fe13 	bl	800e0bc <_fflush_r>
 800e496:	2800      	cmp	r0, #0
 800e498:	d11d      	bne.n	800e4d6 <__swbuf_r+0x7e>
 800e49a:	68a3      	ldr	r3, [r4, #8]
 800e49c:	3001      	adds	r0, #1
 800e49e:	3b01      	subs	r3, #1
 800e4a0:	60a3      	str	r3, [r4, #8]
 800e4a2:	6823      	ldr	r3, [r4, #0]
 800e4a4:	1c5a      	adds	r2, r3, #1
 800e4a6:	6022      	str	r2, [r4, #0]
 800e4a8:	701f      	strb	r7, [r3, #0]
 800e4aa:	6963      	ldr	r3, [r4, #20]
 800e4ac:	4283      	cmp	r3, r0
 800e4ae:	d004      	beq.n	800e4ba <__swbuf_r+0x62>
 800e4b0:	89a3      	ldrh	r3, [r4, #12]
 800e4b2:	07db      	lsls	r3, r3, #31
 800e4b4:	d507      	bpl.n	800e4c6 <__swbuf_r+0x6e>
 800e4b6:	2d0a      	cmp	r5, #10
 800e4b8:	d105      	bne.n	800e4c6 <__swbuf_r+0x6e>
 800e4ba:	0021      	movs	r1, r4
 800e4bc:	0030      	movs	r0, r6
 800e4be:	f7ff fdfd 	bl	800e0bc <_fflush_r>
 800e4c2:	2800      	cmp	r0, #0
 800e4c4:	d107      	bne.n	800e4d6 <__swbuf_r+0x7e>
 800e4c6:	0028      	movs	r0, r5
 800e4c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4ca:	0021      	movs	r1, r4
 800e4cc:	0030      	movs	r0, r6
 800e4ce:	f000 f805 	bl	800e4dc <__swsetup_r>
 800e4d2:	2800      	cmp	r0, #0
 800e4d4:	d0d3      	beq.n	800e47e <__swbuf_r+0x26>
 800e4d6:	2501      	movs	r5, #1
 800e4d8:	426d      	negs	r5, r5
 800e4da:	e7f4      	b.n	800e4c6 <__swbuf_r+0x6e>

0800e4dc <__swsetup_r>:
 800e4dc:	4b30      	ldr	r3, [pc, #192]	; (800e5a0 <__swsetup_r+0xc4>)
 800e4de:	b570      	push	{r4, r5, r6, lr}
 800e4e0:	0005      	movs	r5, r0
 800e4e2:	6818      	ldr	r0, [r3, #0]
 800e4e4:	000c      	movs	r4, r1
 800e4e6:	2800      	cmp	r0, #0
 800e4e8:	d004      	beq.n	800e4f4 <__swsetup_r+0x18>
 800e4ea:	6a03      	ldr	r3, [r0, #32]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d101      	bne.n	800e4f4 <__swsetup_r+0x18>
 800e4f0:	f7ff feb8 	bl	800e264 <__sinit>
 800e4f4:	230c      	movs	r3, #12
 800e4f6:	5ee2      	ldrsh	r2, [r4, r3]
 800e4f8:	b293      	uxth	r3, r2
 800e4fa:	0711      	lsls	r1, r2, #28
 800e4fc:	d423      	bmi.n	800e546 <__swsetup_r+0x6a>
 800e4fe:	06d9      	lsls	r1, r3, #27
 800e500:	d407      	bmi.n	800e512 <__swsetup_r+0x36>
 800e502:	2309      	movs	r3, #9
 800e504:	2001      	movs	r0, #1
 800e506:	602b      	str	r3, [r5, #0]
 800e508:	3337      	adds	r3, #55	; 0x37
 800e50a:	4313      	orrs	r3, r2
 800e50c:	81a3      	strh	r3, [r4, #12]
 800e50e:	4240      	negs	r0, r0
 800e510:	bd70      	pop	{r4, r5, r6, pc}
 800e512:	075b      	lsls	r3, r3, #29
 800e514:	d513      	bpl.n	800e53e <__swsetup_r+0x62>
 800e516:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e518:	2900      	cmp	r1, #0
 800e51a:	d008      	beq.n	800e52e <__swsetup_r+0x52>
 800e51c:	0023      	movs	r3, r4
 800e51e:	3344      	adds	r3, #68	; 0x44
 800e520:	4299      	cmp	r1, r3
 800e522:	d002      	beq.n	800e52a <__swsetup_r+0x4e>
 800e524:	0028      	movs	r0, r5
 800e526:	f000 ff83 	bl	800f430 <_free_r>
 800e52a:	2300      	movs	r3, #0
 800e52c:	6363      	str	r3, [r4, #52]	; 0x34
 800e52e:	2224      	movs	r2, #36	; 0x24
 800e530:	89a3      	ldrh	r3, [r4, #12]
 800e532:	4393      	bics	r3, r2
 800e534:	81a3      	strh	r3, [r4, #12]
 800e536:	2300      	movs	r3, #0
 800e538:	6063      	str	r3, [r4, #4]
 800e53a:	6923      	ldr	r3, [r4, #16]
 800e53c:	6023      	str	r3, [r4, #0]
 800e53e:	2308      	movs	r3, #8
 800e540:	89a2      	ldrh	r2, [r4, #12]
 800e542:	4313      	orrs	r3, r2
 800e544:	81a3      	strh	r3, [r4, #12]
 800e546:	6923      	ldr	r3, [r4, #16]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d10b      	bne.n	800e564 <__swsetup_r+0x88>
 800e54c:	21a0      	movs	r1, #160	; 0xa0
 800e54e:	2280      	movs	r2, #128	; 0x80
 800e550:	89a3      	ldrh	r3, [r4, #12]
 800e552:	0089      	lsls	r1, r1, #2
 800e554:	0092      	lsls	r2, r2, #2
 800e556:	400b      	ands	r3, r1
 800e558:	4293      	cmp	r3, r2
 800e55a:	d003      	beq.n	800e564 <__swsetup_r+0x88>
 800e55c:	0021      	movs	r1, r4
 800e55e:	0028      	movs	r0, r5
 800e560:	f001 fd74 	bl	801004c <__smakebuf_r>
 800e564:	220c      	movs	r2, #12
 800e566:	5ea3      	ldrsh	r3, [r4, r2]
 800e568:	2001      	movs	r0, #1
 800e56a:	001a      	movs	r2, r3
 800e56c:	b299      	uxth	r1, r3
 800e56e:	4002      	ands	r2, r0
 800e570:	4203      	tst	r3, r0
 800e572:	d00f      	beq.n	800e594 <__swsetup_r+0xb8>
 800e574:	2200      	movs	r2, #0
 800e576:	60a2      	str	r2, [r4, #8]
 800e578:	6962      	ldr	r2, [r4, #20]
 800e57a:	4252      	negs	r2, r2
 800e57c:	61a2      	str	r2, [r4, #24]
 800e57e:	2000      	movs	r0, #0
 800e580:	6922      	ldr	r2, [r4, #16]
 800e582:	4282      	cmp	r2, r0
 800e584:	d1c4      	bne.n	800e510 <__swsetup_r+0x34>
 800e586:	0609      	lsls	r1, r1, #24
 800e588:	d5c2      	bpl.n	800e510 <__swsetup_r+0x34>
 800e58a:	2240      	movs	r2, #64	; 0x40
 800e58c:	4313      	orrs	r3, r2
 800e58e:	81a3      	strh	r3, [r4, #12]
 800e590:	3801      	subs	r0, #1
 800e592:	e7bd      	b.n	800e510 <__swsetup_r+0x34>
 800e594:	0788      	lsls	r0, r1, #30
 800e596:	d400      	bmi.n	800e59a <__swsetup_r+0xbe>
 800e598:	6962      	ldr	r2, [r4, #20]
 800e59a:	60a2      	str	r2, [r4, #8]
 800e59c:	e7ef      	b.n	800e57e <__swsetup_r+0xa2>
 800e59e:	46c0      	nop			; (mov r8, r8)
 800e5a0:	20000098 	.word	0x20000098

0800e5a4 <memcmp>:
 800e5a4:	b530      	push	{r4, r5, lr}
 800e5a6:	2400      	movs	r4, #0
 800e5a8:	3901      	subs	r1, #1
 800e5aa:	42a2      	cmp	r2, r4
 800e5ac:	d101      	bne.n	800e5b2 <memcmp+0xe>
 800e5ae:	2000      	movs	r0, #0
 800e5b0:	e005      	b.n	800e5be <memcmp+0x1a>
 800e5b2:	5d03      	ldrb	r3, [r0, r4]
 800e5b4:	3401      	adds	r4, #1
 800e5b6:	5d0d      	ldrb	r5, [r1, r4]
 800e5b8:	42ab      	cmp	r3, r5
 800e5ba:	d0f6      	beq.n	800e5aa <memcmp+0x6>
 800e5bc:	1b58      	subs	r0, r3, r5
 800e5be:	bd30      	pop	{r4, r5, pc}

0800e5c0 <memset>:
 800e5c0:	0003      	movs	r3, r0
 800e5c2:	1882      	adds	r2, r0, r2
 800e5c4:	4293      	cmp	r3, r2
 800e5c6:	d100      	bne.n	800e5ca <memset+0xa>
 800e5c8:	4770      	bx	lr
 800e5ca:	7019      	strb	r1, [r3, #0]
 800e5cc:	3301      	adds	r3, #1
 800e5ce:	e7f9      	b.n	800e5c4 <memset+0x4>

0800e5d0 <_localeconv_r>:
 800e5d0:	4800      	ldr	r0, [pc, #0]	; (800e5d4 <_localeconv_r+0x4>)
 800e5d2:	4770      	bx	lr
 800e5d4:	2000018c 	.word	0x2000018c

0800e5d8 <_close_r>:
 800e5d8:	2300      	movs	r3, #0
 800e5da:	b570      	push	{r4, r5, r6, lr}
 800e5dc:	4d06      	ldr	r5, [pc, #24]	; (800e5f8 <_close_r+0x20>)
 800e5de:	0004      	movs	r4, r0
 800e5e0:	0008      	movs	r0, r1
 800e5e2:	602b      	str	r3, [r5, #0]
 800e5e4:	f7f5 ff4b 	bl	800447e <_close>
 800e5e8:	1c43      	adds	r3, r0, #1
 800e5ea:	d103      	bne.n	800e5f4 <_close_r+0x1c>
 800e5ec:	682b      	ldr	r3, [r5, #0]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d000      	beq.n	800e5f4 <_close_r+0x1c>
 800e5f2:	6023      	str	r3, [r4, #0]
 800e5f4:	bd70      	pop	{r4, r5, r6, pc}
 800e5f6:	46c0      	nop			; (mov r8, r8)
 800e5f8:	20000cd8 	.word	0x20000cd8

0800e5fc <_lseek_r>:
 800e5fc:	b570      	push	{r4, r5, r6, lr}
 800e5fe:	0004      	movs	r4, r0
 800e600:	0008      	movs	r0, r1
 800e602:	0011      	movs	r1, r2
 800e604:	001a      	movs	r2, r3
 800e606:	2300      	movs	r3, #0
 800e608:	4d05      	ldr	r5, [pc, #20]	; (800e620 <_lseek_r+0x24>)
 800e60a:	602b      	str	r3, [r5, #0]
 800e60c:	f7f5 ff58 	bl	80044c0 <_lseek>
 800e610:	1c43      	adds	r3, r0, #1
 800e612:	d103      	bne.n	800e61c <_lseek_r+0x20>
 800e614:	682b      	ldr	r3, [r5, #0]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d000      	beq.n	800e61c <_lseek_r+0x20>
 800e61a:	6023      	str	r3, [r4, #0]
 800e61c:	bd70      	pop	{r4, r5, r6, pc}
 800e61e:	46c0      	nop			; (mov r8, r8)
 800e620:	20000cd8 	.word	0x20000cd8

0800e624 <_read_r>:
 800e624:	b570      	push	{r4, r5, r6, lr}
 800e626:	0004      	movs	r4, r0
 800e628:	0008      	movs	r0, r1
 800e62a:	0011      	movs	r1, r2
 800e62c:	001a      	movs	r2, r3
 800e62e:	2300      	movs	r3, #0
 800e630:	4d05      	ldr	r5, [pc, #20]	; (800e648 <_read_r+0x24>)
 800e632:	602b      	str	r3, [r5, #0]
 800e634:	f7f5 feea 	bl	800440c <_read>
 800e638:	1c43      	adds	r3, r0, #1
 800e63a:	d103      	bne.n	800e644 <_read_r+0x20>
 800e63c:	682b      	ldr	r3, [r5, #0]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d000      	beq.n	800e644 <_read_r+0x20>
 800e642:	6023      	str	r3, [r4, #0]
 800e644:	bd70      	pop	{r4, r5, r6, pc}
 800e646:	46c0      	nop			; (mov r8, r8)
 800e648:	20000cd8 	.word	0x20000cd8

0800e64c <_write_r>:
 800e64c:	b570      	push	{r4, r5, r6, lr}
 800e64e:	0004      	movs	r4, r0
 800e650:	0008      	movs	r0, r1
 800e652:	0011      	movs	r1, r2
 800e654:	001a      	movs	r2, r3
 800e656:	2300      	movs	r3, #0
 800e658:	4d05      	ldr	r5, [pc, #20]	; (800e670 <_write_r+0x24>)
 800e65a:	602b      	str	r3, [r5, #0]
 800e65c:	f7f5 fef3 	bl	8004446 <_write>
 800e660:	1c43      	adds	r3, r0, #1
 800e662:	d103      	bne.n	800e66c <_write_r+0x20>
 800e664:	682b      	ldr	r3, [r5, #0]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d000      	beq.n	800e66c <_write_r+0x20>
 800e66a:	6023      	str	r3, [r4, #0]
 800e66c:	bd70      	pop	{r4, r5, r6, pc}
 800e66e:	46c0      	nop			; (mov r8, r8)
 800e670:	20000cd8 	.word	0x20000cd8

0800e674 <__errno>:
 800e674:	4b01      	ldr	r3, [pc, #4]	; (800e67c <__errno+0x8>)
 800e676:	6818      	ldr	r0, [r3, #0]
 800e678:	4770      	bx	lr
 800e67a:	46c0      	nop			; (mov r8, r8)
 800e67c:	20000098 	.word	0x20000098

0800e680 <__libc_init_array>:
 800e680:	b570      	push	{r4, r5, r6, lr}
 800e682:	2600      	movs	r6, #0
 800e684:	4c0c      	ldr	r4, [pc, #48]	; (800e6b8 <__libc_init_array+0x38>)
 800e686:	4d0d      	ldr	r5, [pc, #52]	; (800e6bc <__libc_init_array+0x3c>)
 800e688:	1b64      	subs	r4, r4, r5
 800e68a:	10a4      	asrs	r4, r4, #2
 800e68c:	42a6      	cmp	r6, r4
 800e68e:	d109      	bne.n	800e6a4 <__libc_init_array+0x24>
 800e690:	2600      	movs	r6, #0
 800e692:	f001 fe51 	bl	8010338 <_init>
 800e696:	4c0a      	ldr	r4, [pc, #40]	; (800e6c0 <__libc_init_array+0x40>)
 800e698:	4d0a      	ldr	r5, [pc, #40]	; (800e6c4 <__libc_init_array+0x44>)
 800e69a:	1b64      	subs	r4, r4, r5
 800e69c:	10a4      	asrs	r4, r4, #2
 800e69e:	42a6      	cmp	r6, r4
 800e6a0:	d105      	bne.n	800e6ae <__libc_init_array+0x2e>
 800e6a2:	bd70      	pop	{r4, r5, r6, pc}
 800e6a4:	00b3      	lsls	r3, r6, #2
 800e6a6:	58eb      	ldr	r3, [r5, r3]
 800e6a8:	4798      	blx	r3
 800e6aa:	3601      	adds	r6, #1
 800e6ac:	e7ee      	b.n	800e68c <__libc_init_array+0xc>
 800e6ae:	00b3      	lsls	r3, r6, #2
 800e6b0:	58eb      	ldr	r3, [r5, r3]
 800e6b2:	4798      	blx	r3
 800e6b4:	3601      	adds	r6, #1
 800e6b6:	e7f2      	b.n	800e69e <__libc_init_array+0x1e>
 800e6b8:	0801186c 	.word	0x0801186c
 800e6bc:	0801186c 	.word	0x0801186c
 800e6c0:	08011870 	.word	0x08011870
 800e6c4:	0801186c 	.word	0x0801186c

0800e6c8 <__retarget_lock_init_recursive>:
 800e6c8:	4770      	bx	lr

0800e6ca <__retarget_lock_acquire_recursive>:
 800e6ca:	4770      	bx	lr

0800e6cc <__retarget_lock_release_recursive>:
 800e6cc:	4770      	bx	lr

0800e6ce <memchr>:
 800e6ce:	b2c9      	uxtb	r1, r1
 800e6d0:	1882      	adds	r2, r0, r2
 800e6d2:	4290      	cmp	r0, r2
 800e6d4:	d101      	bne.n	800e6da <memchr+0xc>
 800e6d6:	2000      	movs	r0, #0
 800e6d8:	4770      	bx	lr
 800e6da:	7803      	ldrb	r3, [r0, #0]
 800e6dc:	428b      	cmp	r3, r1
 800e6de:	d0fb      	beq.n	800e6d8 <memchr+0xa>
 800e6e0:	3001      	adds	r0, #1
 800e6e2:	e7f6      	b.n	800e6d2 <memchr+0x4>

0800e6e4 <memcpy>:
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	b510      	push	{r4, lr}
 800e6e8:	429a      	cmp	r2, r3
 800e6ea:	d100      	bne.n	800e6ee <memcpy+0xa>
 800e6ec:	bd10      	pop	{r4, pc}
 800e6ee:	5ccc      	ldrb	r4, [r1, r3]
 800e6f0:	54c4      	strb	r4, [r0, r3]
 800e6f2:	3301      	adds	r3, #1
 800e6f4:	e7f8      	b.n	800e6e8 <memcpy+0x4>

0800e6f6 <quorem>:
 800e6f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6f8:	6902      	ldr	r2, [r0, #16]
 800e6fa:	690b      	ldr	r3, [r1, #16]
 800e6fc:	b089      	sub	sp, #36	; 0x24
 800e6fe:	0007      	movs	r7, r0
 800e700:	9104      	str	r1, [sp, #16]
 800e702:	2000      	movs	r0, #0
 800e704:	429a      	cmp	r2, r3
 800e706:	db69      	blt.n	800e7dc <quorem+0xe6>
 800e708:	3b01      	subs	r3, #1
 800e70a:	009c      	lsls	r4, r3, #2
 800e70c:	9301      	str	r3, [sp, #4]
 800e70e:	000b      	movs	r3, r1
 800e710:	3314      	adds	r3, #20
 800e712:	9306      	str	r3, [sp, #24]
 800e714:	191b      	adds	r3, r3, r4
 800e716:	9305      	str	r3, [sp, #20]
 800e718:	003b      	movs	r3, r7
 800e71a:	3314      	adds	r3, #20
 800e71c:	9303      	str	r3, [sp, #12]
 800e71e:	191c      	adds	r4, r3, r4
 800e720:	9b05      	ldr	r3, [sp, #20]
 800e722:	6826      	ldr	r6, [r4, #0]
 800e724:	681d      	ldr	r5, [r3, #0]
 800e726:	0030      	movs	r0, r6
 800e728:	3501      	adds	r5, #1
 800e72a:	0029      	movs	r1, r5
 800e72c:	f7f1 fd04 	bl	8000138 <__udivsi3>
 800e730:	9002      	str	r0, [sp, #8]
 800e732:	42ae      	cmp	r6, r5
 800e734:	d329      	bcc.n	800e78a <quorem+0x94>
 800e736:	9b06      	ldr	r3, [sp, #24]
 800e738:	2600      	movs	r6, #0
 800e73a:	469c      	mov	ip, r3
 800e73c:	9d03      	ldr	r5, [sp, #12]
 800e73e:	9606      	str	r6, [sp, #24]
 800e740:	4662      	mov	r2, ip
 800e742:	ca08      	ldmia	r2!, {r3}
 800e744:	6828      	ldr	r0, [r5, #0]
 800e746:	4694      	mov	ip, r2
 800e748:	9a02      	ldr	r2, [sp, #8]
 800e74a:	b299      	uxth	r1, r3
 800e74c:	4351      	muls	r1, r2
 800e74e:	0c1b      	lsrs	r3, r3, #16
 800e750:	4353      	muls	r3, r2
 800e752:	1989      	adds	r1, r1, r6
 800e754:	0c0a      	lsrs	r2, r1, #16
 800e756:	189b      	adds	r3, r3, r2
 800e758:	9307      	str	r3, [sp, #28]
 800e75a:	0c1e      	lsrs	r6, r3, #16
 800e75c:	9b06      	ldr	r3, [sp, #24]
 800e75e:	b282      	uxth	r2, r0
 800e760:	18d2      	adds	r2, r2, r3
 800e762:	466b      	mov	r3, sp
 800e764:	b289      	uxth	r1, r1
 800e766:	8b9b      	ldrh	r3, [r3, #28]
 800e768:	1a52      	subs	r2, r2, r1
 800e76a:	0c01      	lsrs	r1, r0, #16
 800e76c:	1ac9      	subs	r1, r1, r3
 800e76e:	1413      	asrs	r3, r2, #16
 800e770:	18cb      	adds	r3, r1, r3
 800e772:	1419      	asrs	r1, r3, #16
 800e774:	b292      	uxth	r2, r2
 800e776:	041b      	lsls	r3, r3, #16
 800e778:	4313      	orrs	r3, r2
 800e77a:	c508      	stmia	r5!, {r3}
 800e77c:	9b05      	ldr	r3, [sp, #20]
 800e77e:	9106      	str	r1, [sp, #24]
 800e780:	4563      	cmp	r3, ip
 800e782:	d2dd      	bcs.n	800e740 <quorem+0x4a>
 800e784:	6823      	ldr	r3, [r4, #0]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d030      	beq.n	800e7ec <quorem+0xf6>
 800e78a:	0038      	movs	r0, r7
 800e78c:	9904      	ldr	r1, [sp, #16]
 800e78e:	f001 f9dd 	bl	800fb4c <__mcmp>
 800e792:	2800      	cmp	r0, #0
 800e794:	db21      	blt.n	800e7da <quorem+0xe4>
 800e796:	0038      	movs	r0, r7
 800e798:	2600      	movs	r6, #0
 800e79a:	9b02      	ldr	r3, [sp, #8]
 800e79c:	9c04      	ldr	r4, [sp, #16]
 800e79e:	3301      	adds	r3, #1
 800e7a0:	9302      	str	r3, [sp, #8]
 800e7a2:	3014      	adds	r0, #20
 800e7a4:	3414      	adds	r4, #20
 800e7a6:	6803      	ldr	r3, [r0, #0]
 800e7a8:	cc02      	ldmia	r4!, {r1}
 800e7aa:	b29d      	uxth	r5, r3
 800e7ac:	19ad      	adds	r5, r5, r6
 800e7ae:	b28a      	uxth	r2, r1
 800e7b0:	1aaa      	subs	r2, r5, r2
 800e7b2:	0c09      	lsrs	r1, r1, #16
 800e7b4:	0c1b      	lsrs	r3, r3, #16
 800e7b6:	1a5b      	subs	r3, r3, r1
 800e7b8:	1411      	asrs	r1, r2, #16
 800e7ba:	185b      	adds	r3, r3, r1
 800e7bc:	141e      	asrs	r6, r3, #16
 800e7be:	b292      	uxth	r2, r2
 800e7c0:	041b      	lsls	r3, r3, #16
 800e7c2:	4313      	orrs	r3, r2
 800e7c4:	c008      	stmia	r0!, {r3}
 800e7c6:	9b05      	ldr	r3, [sp, #20]
 800e7c8:	42a3      	cmp	r3, r4
 800e7ca:	d2ec      	bcs.n	800e7a6 <quorem+0xb0>
 800e7cc:	9b01      	ldr	r3, [sp, #4]
 800e7ce:	9a03      	ldr	r2, [sp, #12]
 800e7d0:	009b      	lsls	r3, r3, #2
 800e7d2:	18d3      	adds	r3, r2, r3
 800e7d4:	681a      	ldr	r2, [r3, #0]
 800e7d6:	2a00      	cmp	r2, #0
 800e7d8:	d015      	beq.n	800e806 <quorem+0x110>
 800e7da:	9802      	ldr	r0, [sp, #8]
 800e7dc:	b009      	add	sp, #36	; 0x24
 800e7de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7e0:	6823      	ldr	r3, [r4, #0]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d106      	bne.n	800e7f4 <quorem+0xfe>
 800e7e6:	9b01      	ldr	r3, [sp, #4]
 800e7e8:	3b01      	subs	r3, #1
 800e7ea:	9301      	str	r3, [sp, #4]
 800e7ec:	9b03      	ldr	r3, [sp, #12]
 800e7ee:	3c04      	subs	r4, #4
 800e7f0:	42a3      	cmp	r3, r4
 800e7f2:	d3f5      	bcc.n	800e7e0 <quorem+0xea>
 800e7f4:	9b01      	ldr	r3, [sp, #4]
 800e7f6:	613b      	str	r3, [r7, #16]
 800e7f8:	e7c7      	b.n	800e78a <quorem+0x94>
 800e7fa:	681a      	ldr	r2, [r3, #0]
 800e7fc:	2a00      	cmp	r2, #0
 800e7fe:	d106      	bne.n	800e80e <quorem+0x118>
 800e800:	9a01      	ldr	r2, [sp, #4]
 800e802:	3a01      	subs	r2, #1
 800e804:	9201      	str	r2, [sp, #4]
 800e806:	9a03      	ldr	r2, [sp, #12]
 800e808:	3b04      	subs	r3, #4
 800e80a:	429a      	cmp	r2, r3
 800e80c:	d3f5      	bcc.n	800e7fa <quorem+0x104>
 800e80e:	9b01      	ldr	r3, [sp, #4]
 800e810:	613b      	str	r3, [r7, #16]
 800e812:	e7e2      	b.n	800e7da <quorem+0xe4>

0800e814 <_dtoa_r>:
 800e814:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e816:	0014      	movs	r4, r2
 800e818:	001d      	movs	r5, r3
 800e81a:	69c6      	ldr	r6, [r0, #28]
 800e81c:	b09d      	sub	sp, #116	; 0x74
 800e81e:	9408      	str	r4, [sp, #32]
 800e820:	9509      	str	r5, [sp, #36]	; 0x24
 800e822:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800e824:	9004      	str	r0, [sp, #16]
 800e826:	2e00      	cmp	r6, #0
 800e828:	d10f      	bne.n	800e84a <_dtoa_r+0x36>
 800e82a:	2010      	movs	r0, #16
 800e82c:	f000 fe4a 	bl	800f4c4 <malloc>
 800e830:	9b04      	ldr	r3, [sp, #16]
 800e832:	1e02      	subs	r2, r0, #0
 800e834:	61d8      	str	r0, [r3, #28]
 800e836:	d104      	bne.n	800e842 <_dtoa_r+0x2e>
 800e838:	21ef      	movs	r1, #239	; 0xef
 800e83a:	4bc6      	ldr	r3, [pc, #792]	; (800eb54 <_dtoa_r+0x340>)
 800e83c:	48c6      	ldr	r0, [pc, #792]	; (800eb58 <_dtoa_r+0x344>)
 800e83e:	f001 fcaf 	bl	80101a0 <__assert_func>
 800e842:	6046      	str	r6, [r0, #4]
 800e844:	6086      	str	r6, [r0, #8]
 800e846:	6006      	str	r6, [r0, #0]
 800e848:	60c6      	str	r6, [r0, #12]
 800e84a:	9b04      	ldr	r3, [sp, #16]
 800e84c:	69db      	ldr	r3, [r3, #28]
 800e84e:	6819      	ldr	r1, [r3, #0]
 800e850:	2900      	cmp	r1, #0
 800e852:	d00b      	beq.n	800e86c <_dtoa_r+0x58>
 800e854:	685a      	ldr	r2, [r3, #4]
 800e856:	2301      	movs	r3, #1
 800e858:	4093      	lsls	r3, r2
 800e85a:	604a      	str	r2, [r1, #4]
 800e85c:	608b      	str	r3, [r1, #8]
 800e85e:	9804      	ldr	r0, [sp, #16]
 800e860:	f000 ff32 	bl	800f6c8 <_Bfree>
 800e864:	2200      	movs	r2, #0
 800e866:	9b04      	ldr	r3, [sp, #16]
 800e868:	69db      	ldr	r3, [r3, #28]
 800e86a:	601a      	str	r2, [r3, #0]
 800e86c:	2d00      	cmp	r5, #0
 800e86e:	da1e      	bge.n	800e8ae <_dtoa_r+0x9a>
 800e870:	2301      	movs	r3, #1
 800e872:	603b      	str	r3, [r7, #0]
 800e874:	006b      	lsls	r3, r5, #1
 800e876:	085b      	lsrs	r3, r3, #1
 800e878:	9309      	str	r3, [sp, #36]	; 0x24
 800e87a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e87c:	4bb7      	ldr	r3, [pc, #732]	; (800eb5c <_dtoa_r+0x348>)
 800e87e:	4ab7      	ldr	r2, [pc, #732]	; (800eb5c <_dtoa_r+0x348>)
 800e880:	403b      	ands	r3, r7
 800e882:	4293      	cmp	r3, r2
 800e884:	d116      	bne.n	800e8b4 <_dtoa_r+0xa0>
 800e886:	4bb6      	ldr	r3, [pc, #728]	; (800eb60 <_dtoa_r+0x34c>)
 800e888:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800e88a:	6013      	str	r3, [r2, #0]
 800e88c:	033b      	lsls	r3, r7, #12
 800e88e:	0b1b      	lsrs	r3, r3, #12
 800e890:	4323      	orrs	r3, r4
 800e892:	d101      	bne.n	800e898 <_dtoa_r+0x84>
 800e894:	f000 fdb5 	bl	800f402 <_dtoa_r+0xbee>
 800e898:	4bb2      	ldr	r3, [pc, #712]	; (800eb64 <_dtoa_r+0x350>)
 800e89a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800e89c:	9306      	str	r3, [sp, #24]
 800e89e:	2a00      	cmp	r2, #0
 800e8a0:	d002      	beq.n	800e8a8 <_dtoa_r+0x94>
 800e8a2:	4bb1      	ldr	r3, [pc, #708]	; (800eb68 <_dtoa_r+0x354>)
 800e8a4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800e8a6:	6013      	str	r3, [r2, #0]
 800e8a8:	9806      	ldr	r0, [sp, #24]
 800e8aa:	b01d      	add	sp, #116	; 0x74
 800e8ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	603b      	str	r3, [r7, #0]
 800e8b2:	e7e2      	b.n	800e87a <_dtoa_r+0x66>
 800e8b4:	9a08      	ldr	r2, [sp, #32]
 800e8b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8b8:	9210      	str	r2, [sp, #64]	; 0x40
 800e8ba:	9311      	str	r3, [sp, #68]	; 0x44
 800e8bc:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e8be:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	f7f1 fdbe 	bl	8000444 <__aeabi_dcmpeq>
 800e8c8:	1e06      	subs	r6, r0, #0
 800e8ca:	d009      	beq.n	800e8e0 <_dtoa_r+0xcc>
 800e8cc:	2301      	movs	r3, #1
 800e8ce:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800e8d0:	6013      	str	r3, [r2, #0]
 800e8d2:	4ba6      	ldr	r3, [pc, #664]	; (800eb6c <_dtoa_r+0x358>)
 800e8d4:	9306      	str	r3, [sp, #24]
 800e8d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d0e5      	beq.n	800e8a8 <_dtoa_r+0x94>
 800e8dc:	4ba4      	ldr	r3, [pc, #656]	; (800eb70 <_dtoa_r+0x35c>)
 800e8de:	e7e1      	b.n	800e8a4 <_dtoa_r+0x90>
 800e8e0:	ab1a      	add	r3, sp, #104	; 0x68
 800e8e2:	9301      	str	r3, [sp, #4]
 800e8e4:	ab1b      	add	r3, sp, #108	; 0x6c
 800e8e6:	9300      	str	r3, [sp, #0]
 800e8e8:	9804      	ldr	r0, [sp, #16]
 800e8ea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e8ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e8ee:	f001 f9e1 	bl	800fcb4 <__d2b>
 800e8f2:	007a      	lsls	r2, r7, #1
 800e8f4:	9005      	str	r0, [sp, #20]
 800e8f6:	0d52      	lsrs	r2, r2, #21
 800e8f8:	d100      	bne.n	800e8fc <_dtoa_r+0xe8>
 800e8fa:	e07b      	b.n	800e9f4 <_dtoa_r+0x1e0>
 800e8fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e8fe:	9617      	str	r6, [sp, #92]	; 0x5c
 800e900:	0319      	lsls	r1, r3, #12
 800e902:	4b9c      	ldr	r3, [pc, #624]	; (800eb74 <_dtoa_r+0x360>)
 800e904:	0b09      	lsrs	r1, r1, #12
 800e906:	430b      	orrs	r3, r1
 800e908:	499b      	ldr	r1, [pc, #620]	; (800eb78 <_dtoa_r+0x364>)
 800e90a:	1857      	adds	r7, r2, r1
 800e90c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e90e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e910:	0019      	movs	r1, r3
 800e912:	2200      	movs	r2, #0
 800e914:	4b99      	ldr	r3, [pc, #612]	; (800eb7c <_dtoa_r+0x368>)
 800e916:	f7f2 ffdf 	bl	80018d8 <__aeabi_dsub>
 800e91a:	4a99      	ldr	r2, [pc, #612]	; (800eb80 <_dtoa_r+0x36c>)
 800e91c:	4b99      	ldr	r3, [pc, #612]	; (800eb84 <_dtoa_r+0x370>)
 800e91e:	f7f2 fd19 	bl	8001354 <__aeabi_dmul>
 800e922:	4a99      	ldr	r2, [pc, #612]	; (800eb88 <_dtoa_r+0x374>)
 800e924:	4b99      	ldr	r3, [pc, #612]	; (800eb8c <_dtoa_r+0x378>)
 800e926:	f7f1 fdbb 	bl	80004a0 <__aeabi_dadd>
 800e92a:	0004      	movs	r4, r0
 800e92c:	0038      	movs	r0, r7
 800e92e:	000d      	movs	r5, r1
 800e930:	f7f3 fba8 	bl	8002084 <__aeabi_i2d>
 800e934:	4a96      	ldr	r2, [pc, #600]	; (800eb90 <_dtoa_r+0x37c>)
 800e936:	4b97      	ldr	r3, [pc, #604]	; (800eb94 <_dtoa_r+0x380>)
 800e938:	f7f2 fd0c 	bl	8001354 <__aeabi_dmul>
 800e93c:	0002      	movs	r2, r0
 800e93e:	000b      	movs	r3, r1
 800e940:	0020      	movs	r0, r4
 800e942:	0029      	movs	r1, r5
 800e944:	f7f1 fdac 	bl	80004a0 <__aeabi_dadd>
 800e948:	0004      	movs	r4, r0
 800e94a:	000d      	movs	r5, r1
 800e94c:	f7f3 fb64 	bl	8002018 <__aeabi_d2iz>
 800e950:	2200      	movs	r2, #0
 800e952:	9003      	str	r0, [sp, #12]
 800e954:	2300      	movs	r3, #0
 800e956:	0020      	movs	r0, r4
 800e958:	0029      	movs	r1, r5
 800e95a:	f7f1 fd79 	bl	8000450 <__aeabi_dcmplt>
 800e95e:	2800      	cmp	r0, #0
 800e960:	d00b      	beq.n	800e97a <_dtoa_r+0x166>
 800e962:	9803      	ldr	r0, [sp, #12]
 800e964:	f7f3 fb8e 	bl	8002084 <__aeabi_i2d>
 800e968:	002b      	movs	r3, r5
 800e96a:	0022      	movs	r2, r4
 800e96c:	f7f1 fd6a 	bl	8000444 <__aeabi_dcmpeq>
 800e970:	4243      	negs	r3, r0
 800e972:	4158      	adcs	r0, r3
 800e974:	9b03      	ldr	r3, [sp, #12]
 800e976:	1a1b      	subs	r3, r3, r0
 800e978:	9303      	str	r3, [sp, #12]
 800e97a:	2301      	movs	r3, #1
 800e97c:	9316      	str	r3, [sp, #88]	; 0x58
 800e97e:	9b03      	ldr	r3, [sp, #12]
 800e980:	2b16      	cmp	r3, #22
 800e982:	d810      	bhi.n	800e9a6 <_dtoa_r+0x192>
 800e984:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e986:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e988:	9a03      	ldr	r2, [sp, #12]
 800e98a:	4b83      	ldr	r3, [pc, #524]	; (800eb98 <_dtoa_r+0x384>)
 800e98c:	00d2      	lsls	r2, r2, #3
 800e98e:	189b      	adds	r3, r3, r2
 800e990:	681a      	ldr	r2, [r3, #0]
 800e992:	685b      	ldr	r3, [r3, #4]
 800e994:	f7f1 fd5c 	bl	8000450 <__aeabi_dcmplt>
 800e998:	2800      	cmp	r0, #0
 800e99a:	d047      	beq.n	800ea2c <_dtoa_r+0x218>
 800e99c:	9b03      	ldr	r3, [sp, #12]
 800e99e:	3b01      	subs	r3, #1
 800e9a0:	9303      	str	r3, [sp, #12]
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	9316      	str	r3, [sp, #88]	; 0x58
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e9aa:	920a      	str	r2, [sp, #40]	; 0x28
 800e9ac:	1bdb      	subs	r3, r3, r7
 800e9ae:	1e5a      	subs	r2, r3, #1
 800e9b0:	d53e      	bpl.n	800ea30 <_dtoa_r+0x21c>
 800e9b2:	2201      	movs	r2, #1
 800e9b4:	1ad3      	subs	r3, r2, r3
 800e9b6:	930a      	str	r3, [sp, #40]	; 0x28
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	930c      	str	r3, [sp, #48]	; 0x30
 800e9bc:	9b03      	ldr	r3, [sp, #12]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	db38      	blt.n	800ea34 <_dtoa_r+0x220>
 800e9c2:	9a03      	ldr	r2, [sp, #12]
 800e9c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e9c6:	4694      	mov	ip, r2
 800e9c8:	4463      	add	r3, ip
 800e9ca:	930c      	str	r3, [sp, #48]	; 0x30
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	9213      	str	r2, [sp, #76]	; 0x4c
 800e9d0:	930d      	str	r3, [sp, #52]	; 0x34
 800e9d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e9d4:	2401      	movs	r4, #1
 800e9d6:	2b09      	cmp	r3, #9
 800e9d8:	d867      	bhi.n	800eaaa <_dtoa_r+0x296>
 800e9da:	2b05      	cmp	r3, #5
 800e9dc:	dd02      	ble.n	800e9e4 <_dtoa_r+0x1d0>
 800e9de:	2400      	movs	r4, #0
 800e9e0:	3b04      	subs	r3, #4
 800e9e2:	9322      	str	r3, [sp, #136]	; 0x88
 800e9e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e9e6:	1e98      	subs	r0, r3, #2
 800e9e8:	2803      	cmp	r0, #3
 800e9ea:	d867      	bhi.n	800eabc <_dtoa_r+0x2a8>
 800e9ec:	f7f1 fb90 	bl	8000110 <__gnu_thumb1_case_uqi>
 800e9f0:	5b383a2b 	.word	0x5b383a2b
 800e9f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e9f6:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800e9f8:	18f6      	adds	r6, r6, r3
 800e9fa:	4b68      	ldr	r3, [pc, #416]	; (800eb9c <_dtoa_r+0x388>)
 800e9fc:	18f2      	adds	r2, r6, r3
 800e9fe:	2a20      	cmp	r2, #32
 800ea00:	dd0f      	ble.n	800ea22 <_dtoa_r+0x20e>
 800ea02:	2340      	movs	r3, #64	; 0x40
 800ea04:	1a9b      	subs	r3, r3, r2
 800ea06:	409f      	lsls	r7, r3
 800ea08:	4b65      	ldr	r3, [pc, #404]	; (800eba0 <_dtoa_r+0x38c>)
 800ea0a:	0038      	movs	r0, r7
 800ea0c:	18f3      	adds	r3, r6, r3
 800ea0e:	40dc      	lsrs	r4, r3
 800ea10:	4320      	orrs	r0, r4
 800ea12:	f7f3 fb67 	bl	80020e4 <__aeabi_ui2d>
 800ea16:	2201      	movs	r2, #1
 800ea18:	4b62      	ldr	r3, [pc, #392]	; (800eba4 <_dtoa_r+0x390>)
 800ea1a:	1e77      	subs	r7, r6, #1
 800ea1c:	18cb      	adds	r3, r1, r3
 800ea1e:	9217      	str	r2, [sp, #92]	; 0x5c
 800ea20:	e776      	b.n	800e910 <_dtoa_r+0xfc>
 800ea22:	2320      	movs	r3, #32
 800ea24:	0020      	movs	r0, r4
 800ea26:	1a9b      	subs	r3, r3, r2
 800ea28:	4098      	lsls	r0, r3
 800ea2a:	e7f2      	b.n	800ea12 <_dtoa_r+0x1fe>
 800ea2c:	9016      	str	r0, [sp, #88]	; 0x58
 800ea2e:	e7ba      	b.n	800e9a6 <_dtoa_r+0x192>
 800ea30:	920c      	str	r2, [sp, #48]	; 0x30
 800ea32:	e7c3      	b.n	800e9bc <_dtoa_r+0x1a8>
 800ea34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea36:	9a03      	ldr	r2, [sp, #12]
 800ea38:	1a9b      	subs	r3, r3, r2
 800ea3a:	930a      	str	r3, [sp, #40]	; 0x28
 800ea3c:	4253      	negs	r3, r2
 800ea3e:	930d      	str	r3, [sp, #52]	; 0x34
 800ea40:	2300      	movs	r3, #0
 800ea42:	9313      	str	r3, [sp, #76]	; 0x4c
 800ea44:	e7c5      	b.n	800e9d2 <_dtoa_r+0x1be>
 800ea46:	2300      	movs	r3, #0
 800ea48:	930f      	str	r3, [sp, #60]	; 0x3c
 800ea4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ea4c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ea4e:	9307      	str	r3, [sp, #28]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	dc13      	bgt.n	800ea7c <_dtoa_r+0x268>
 800ea54:	2301      	movs	r3, #1
 800ea56:	001a      	movs	r2, r3
 800ea58:	930b      	str	r3, [sp, #44]	; 0x2c
 800ea5a:	9307      	str	r3, [sp, #28]
 800ea5c:	9223      	str	r2, [sp, #140]	; 0x8c
 800ea5e:	e00d      	b.n	800ea7c <_dtoa_r+0x268>
 800ea60:	2301      	movs	r3, #1
 800ea62:	e7f1      	b.n	800ea48 <_dtoa_r+0x234>
 800ea64:	2300      	movs	r3, #0
 800ea66:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800ea68:	930f      	str	r3, [sp, #60]	; 0x3c
 800ea6a:	4694      	mov	ip, r2
 800ea6c:	9b03      	ldr	r3, [sp, #12]
 800ea6e:	4463      	add	r3, ip
 800ea70:	930b      	str	r3, [sp, #44]	; 0x2c
 800ea72:	3301      	adds	r3, #1
 800ea74:	9307      	str	r3, [sp, #28]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	dc00      	bgt.n	800ea7c <_dtoa_r+0x268>
 800ea7a:	2301      	movs	r3, #1
 800ea7c:	9a04      	ldr	r2, [sp, #16]
 800ea7e:	2100      	movs	r1, #0
 800ea80:	69d0      	ldr	r0, [r2, #28]
 800ea82:	2204      	movs	r2, #4
 800ea84:	0015      	movs	r5, r2
 800ea86:	3514      	adds	r5, #20
 800ea88:	429d      	cmp	r5, r3
 800ea8a:	d91b      	bls.n	800eac4 <_dtoa_r+0x2b0>
 800ea8c:	6041      	str	r1, [r0, #4]
 800ea8e:	9804      	ldr	r0, [sp, #16]
 800ea90:	f000 fdd6 	bl	800f640 <_Balloc>
 800ea94:	9006      	str	r0, [sp, #24]
 800ea96:	2800      	cmp	r0, #0
 800ea98:	d117      	bne.n	800eaca <_dtoa_r+0x2b6>
 800ea9a:	21b0      	movs	r1, #176	; 0xb0
 800ea9c:	4b42      	ldr	r3, [pc, #264]	; (800eba8 <_dtoa_r+0x394>)
 800ea9e:	482e      	ldr	r0, [pc, #184]	; (800eb58 <_dtoa_r+0x344>)
 800eaa0:	9a06      	ldr	r2, [sp, #24]
 800eaa2:	31ff      	adds	r1, #255	; 0xff
 800eaa4:	e6cb      	b.n	800e83e <_dtoa_r+0x2a>
 800eaa6:	2301      	movs	r3, #1
 800eaa8:	e7dd      	b.n	800ea66 <_dtoa_r+0x252>
 800eaaa:	2300      	movs	r3, #0
 800eaac:	940f      	str	r4, [sp, #60]	; 0x3c
 800eaae:	9322      	str	r3, [sp, #136]	; 0x88
 800eab0:	3b01      	subs	r3, #1
 800eab2:	930b      	str	r3, [sp, #44]	; 0x2c
 800eab4:	9307      	str	r3, [sp, #28]
 800eab6:	2200      	movs	r2, #0
 800eab8:	3313      	adds	r3, #19
 800eaba:	e7cf      	b.n	800ea5c <_dtoa_r+0x248>
 800eabc:	2301      	movs	r3, #1
 800eabe:	930f      	str	r3, [sp, #60]	; 0x3c
 800eac0:	3b02      	subs	r3, #2
 800eac2:	e7f6      	b.n	800eab2 <_dtoa_r+0x29e>
 800eac4:	3101      	adds	r1, #1
 800eac6:	0052      	lsls	r2, r2, #1
 800eac8:	e7dc      	b.n	800ea84 <_dtoa_r+0x270>
 800eaca:	9b04      	ldr	r3, [sp, #16]
 800eacc:	9a06      	ldr	r2, [sp, #24]
 800eace:	69db      	ldr	r3, [r3, #28]
 800ead0:	601a      	str	r2, [r3, #0]
 800ead2:	9b07      	ldr	r3, [sp, #28]
 800ead4:	2b0e      	cmp	r3, #14
 800ead6:	d900      	bls.n	800eada <_dtoa_r+0x2c6>
 800ead8:	e0e5      	b.n	800eca6 <_dtoa_r+0x492>
 800eada:	2c00      	cmp	r4, #0
 800eadc:	d100      	bne.n	800eae0 <_dtoa_r+0x2cc>
 800eade:	e0e2      	b.n	800eca6 <_dtoa_r+0x492>
 800eae0:	9b03      	ldr	r3, [sp, #12]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	dd64      	ble.n	800ebb0 <_dtoa_r+0x39c>
 800eae6:	210f      	movs	r1, #15
 800eae8:	9a03      	ldr	r2, [sp, #12]
 800eaea:	4b2b      	ldr	r3, [pc, #172]	; (800eb98 <_dtoa_r+0x384>)
 800eaec:	400a      	ands	r2, r1
 800eaee:	00d2      	lsls	r2, r2, #3
 800eaf0:	189b      	adds	r3, r3, r2
 800eaf2:	681e      	ldr	r6, [r3, #0]
 800eaf4:	685f      	ldr	r7, [r3, #4]
 800eaf6:	9b03      	ldr	r3, [sp, #12]
 800eaf8:	2402      	movs	r4, #2
 800eafa:	111d      	asrs	r5, r3, #4
 800eafc:	05db      	lsls	r3, r3, #23
 800eafe:	d50a      	bpl.n	800eb16 <_dtoa_r+0x302>
 800eb00:	4b2a      	ldr	r3, [pc, #168]	; (800ebac <_dtoa_r+0x398>)
 800eb02:	400d      	ands	r5, r1
 800eb04:	6a1a      	ldr	r2, [r3, #32]
 800eb06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb08:	9810      	ldr	r0, [sp, #64]	; 0x40
 800eb0a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800eb0c:	f7f2 f828 	bl	8000b60 <__aeabi_ddiv>
 800eb10:	9008      	str	r0, [sp, #32]
 800eb12:	9109      	str	r1, [sp, #36]	; 0x24
 800eb14:	3401      	adds	r4, #1
 800eb16:	4b25      	ldr	r3, [pc, #148]	; (800ebac <_dtoa_r+0x398>)
 800eb18:	930e      	str	r3, [sp, #56]	; 0x38
 800eb1a:	2d00      	cmp	r5, #0
 800eb1c:	d108      	bne.n	800eb30 <_dtoa_r+0x31c>
 800eb1e:	9808      	ldr	r0, [sp, #32]
 800eb20:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eb22:	0032      	movs	r2, r6
 800eb24:	003b      	movs	r3, r7
 800eb26:	f7f2 f81b 	bl	8000b60 <__aeabi_ddiv>
 800eb2a:	9008      	str	r0, [sp, #32]
 800eb2c:	9109      	str	r1, [sp, #36]	; 0x24
 800eb2e:	e05a      	b.n	800ebe6 <_dtoa_r+0x3d2>
 800eb30:	2301      	movs	r3, #1
 800eb32:	421d      	tst	r5, r3
 800eb34:	d009      	beq.n	800eb4a <_dtoa_r+0x336>
 800eb36:	18e4      	adds	r4, r4, r3
 800eb38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eb3a:	0030      	movs	r0, r6
 800eb3c:	681a      	ldr	r2, [r3, #0]
 800eb3e:	685b      	ldr	r3, [r3, #4]
 800eb40:	0039      	movs	r1, r7
 800eb42:	f7f2 fc07 	bl	8001354 <__aeabi_dmul>
 800eb46:	0006      	movs	r6, r0
 800eb48:	000f      	movs	r7, r1
 800eb4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eb4c:	106d      	asrs	r5, r5, #1
 800eb4e:	3308      	adds	r3, #8
 800eb50:	e7e2      	b.n	800eb18 <_dtoa_r+0x304>
 800eb52:	46c0      	nop			; (mov r8, r8)
 800eb54:	08011539 	.word	0x08011539
 800eb58:	08011550 	.word	0x08011550
 800eb5c:	7ff00000 	.word	0x7ff00000
 800eb60:	0000270f 	.word	0x0000270f
 800eb64:	08011535 	.word	0x08011535
 800eb68:	08011538 	.word	0x08011538
 800eb6c:	08011508 	.word	0x08011508
 800eb70:	08011509 	.word	0x08011509
 800eb74:	3ff00000 	.word	0x3ff00000
 800eb78:	fffffc01 	.word	0xfffffc01
 800eb7c:	3ff80000 	.word	0x3ff80000
 800eb80:	636f4361 	.word	0x636f4361
 800eb84:	3fd287a7 	.word	0x3fd287a7
 800eb88:	8b60c8b3 	.word	0x8b60c8b3
 800eb8c:	3fc68a28 	.word	0x3fc68a28
 800eb90:	509f79fb 	.word	0x509f79fb
 800eb94:	3fd34413 	.word	0x3fd34413
 800eb98:	08011640 	.word	0x08011640
 800eb9c:	00000432 	.word	0x00000432
 800eba0:	00000412 	.word	0x00000412
 800eba4:	fe100000 	.word	0xfe100000
 800eba8:	080115a8 	.word	0x080115a8
 800ebac:	08011618 	.word	0x08011618
 800ebb0:	9b03      	ldr	r3, [sp, #12]
 800ebb2:	2402      	movs	r4, #2
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d016      	beq.n	800ebe6 <_dtoa_r+0x3d2>
 800ebb8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ebba:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ebbc:	220f      	movs	r2, #15
 800ebbe:	425d      	negs	r5, r3
 800ebc0:	402a      	ands	r2, r5
 800ebc2:	4bdd      	ldr	r3, [pc, #884]	; (800ef38 <_dtoa_r+0x724>)
 800ebc4:	00d2      	lsls	r2, r2, #3
 800ebc6:	189b      	adds	r3, r3, r2
 800ebc8:	681a      	ldr	r2, [r3, #0]
 800ebca:	685b      	ldr	r3, [r3, #4]
 800ebcc:	f7f2 fbc2 	bl	8001354 <__aeabi_dmul>
 800ebd0:	2701      	movs	r7, #1
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	9008      	str	r0, [sp, #32]
 800ebd6:	9109      	str	r1, [sp, #36]	; 0x24
 800ebd8:	4ed8      	ldr	r6, [pc, #864]	; (800ef3c <_dtoa_r+0x728>)
 800ebda:	112d      	asrs	r5, r5, #4
 800ebdc:	2d00      	cmp	r5, #0
 800ebde:	d000      	beq.n	800ebe2 <_dtoa_r+0x3ce>
 800ebe0:	e091      	b.n	800ed06 <_dtoa_r+0x4f2>
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d1a1      	bne.n	800eb2a <_dtoa_r+0x316>
 800ebe6:	9e08      	ldr	r6, [sp, #32]
 800ebe8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ebea:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d100      	bne.n	800ebf2 <_dtoa_r+0x3de>
 800ebf0:	e094      	b.n	800ed1c <_dtoa_r+0x508>
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	0030      	movs	r0, r6
 800ebf6:	0039      	movs	r1, r7
 800ebf8:	4bd1      	ldr	r3, [pc, #836]	; (800ef40 <_dtoa_r+0x72c>)
 800ebfa:	f7f1 fc29 	bl	8000450 <__aeabi_dcmplt>
 800ebfe:	2800      	cmp	r0, #0
 800ec00:	d100      	bne.n	800ec04 <_dtoa_r+0x3f0>
 800ec02:	e08b      	b.n	800ed1c <_dtoa_r+0x508>
 800ec04:	9b07      	ldr	r3, [sp, #28]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d100      	bne.n	800ec0c <_dtoa_r+0x3f8>
 800ec0a:	e087      	b.n	800ed1c <_dtoa_r+0x508>
 800ec0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	dd45      	ble.n	800ec9e <_dtoa_r+0x48a>
 800ec12:	9b03      	ldr	r3, [sp, #12]
 800ec14:	2200      	movs	r2, #0
 800ec16:	3b01      	subs	r3, #1
 800ec18:	930e      	str	r3, [sp, #56]	; 0x38
 800ec1a:	0030      	movs	r0, r6
 800ec1c:	4bc9      	ldr	r3, [pc, #804]	; (800ef44 <_dtoa_r+0x730>)
 800ec1e:	0039      	movs	r1, r7
 800ec20:	f7f2 fb98 	bl	8001354 <__aeabi_dmul>
 800ec24:	9008      	str	r0, [sp, #32]
 800ec26:	9109      	str	r1, [sp, #36]	; 0x24
 800ec28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec2a:	3401      	adds	r4, #1
 800ec2c:	0020      	movs	r0, r4
 800ec2e:	9e08      	ldr	r6, [sp, #32]
 800ec30:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ec32:	9312      	str	r3, [sp, #72]	; 0x48
 800ec34:	f7f3 fa26 	bl	8002084 <__aeabi_i2d>
 800ec38:	0032      	movs	r2, r6
 800ec3a:	003b      	movs	r3, r7
 800ec3c:	f7f2 fb8a 	bl	8001354 <__aeabi_dmul>
 800ec40:	2200      	movs	r2, #0
 800ec42:	4bc1      	ldr	r3, [pc, #772]	; (800ef48 <_dtoa_r+0x734>)
 800ec44:	f7f1 fc2c 	bl	80004a0 <__aeabi_dadd>
 800ec48:	4ac0      	ldr	r2, [pc, #768]	; (800ef4c <_dtoa_r+0x738>)
 800ec4a:	9014      	str	r0, [sp, #80]	; 0x50
 800ec4c:	9115      	str	r1, [sp, #84]	; 0x54
 800ec4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ec50:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800ec52:	4694      	mov	ip, r2
 800ec54:	9308      	str	r3, [sp, #32]
 800ec56:	9409      	str	r4, [sp, #36]	; 0x24
 800ec58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ec5a:	4463      	add	r3, ip
 800ec5c:	9318      	str	r3, [sp, #96]	; 0x60
 800ec5e:	9309      	str	r3, [sp, #36]	; 0x24
 800ec60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d15e      	bne.n	800ed24 <_dtoa_r+0x510>
 800ec66:	2200      	movs	r2, #0
 800ec68:	4bb9      	ldr	r3, [pc, #740]	; (800ef50 <_dtoa_r+0x73c>)
 800ec6a:	0030      	movs	r0, r6
 800ec6c:	0039      	movs	r1, r7
 800ec6e:	f7f2 fe33 	bl	80018d8 <__aeabi_dsub>
 800ec72:	9a08      	ldr	r2, [sp, #32]
 800ec74:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ec76:	0004      	movs	r4, r0
 800ec78:	000d      	movs	r5, r1
 800ec7a:	f7f1 fbfd 	bl	8000478 <__aeabi_dcmpgt>
 800ec7e:	2800      	cmp	r0, #0
 800ec80:	d000      	beq.n	800ec84 <_dtoa_r+0x470>
 800ec82:	e2b3      	b.n	800f1ec <_dtoa_r+0x9d8>
 800ec84:	48b3      	ldr	r0, [pc, #716]	; (800ef54 <_dtoa_r+0x740>)
 800ec86:	9915      	ldr	r1, [sp, #84]	; 0x54
 800ec88:	4684      	mov	ip, r0
 800ec8a:	4461      	add	r1, ip
 800ec8c:	000b      	movs	r3, r1
 800ec8e:	0020      	movs	r0, r4
 800ec90:	0029      	movs	r1, r5
 800ec92:	9a08      	ldr	r2, [sp, #32]
 800ec94:	f7f1 fbdc 	bl	8000450 <__aeabi_dcmplt>
 800ec98:	2800      	cmp	r0, #0
 800ec9a:	d000      	beq.n	800ec9e <_dtoa_r+0x48a>
 800ec9c:	e2a3      	b.n	800f1e6 <_dtoa_r+0x9d2>
 800ec9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eca0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800eca2:	9308      	str	r3, [sp, #32]
 800eca4:	9409      	str	r4, [sp, #36]	; 0x24
 800eca6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	da00      	bge.n	800ecae <_dtoa_r+0x49a>
 800ecac:	e179      	b.n	800efa2 <_dtoa_r+0x78e>
 800ecae:	9a03      	ldr	r2, [sp, #12]
 800ecb0:	2a0e      	cmp	r2, #14
 800ecb2:	dd00      	ble.n	800ecb6 <_dtoa_r+0x4a2>
 800ecb4:	e175      	b.n	800efa2 <_dtoa_r+0x78e>
 800ecb6:	4ba0      	ldr	r3, [pc, #640]	; (800ef38 <_dtoa_r+0x724>)
 800ecb8:	00d2      	lsls	r2, r2, #3
 800ecba:	189b      	adds	r3, r3, r2
 800ecbc:	681e      	ldr	r6, [r3, #0]
 800ecbe:	685f      	ldr	r7, [r3, #4]
 800ecc0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	db00      	blt.n	800ecc8 <_dtoa_r+0x4b4>
 800ecc6:	e0e5      	b.n	800ee94 <_dtoa_r+0x680>
 800ecc8:	9b07      	ldr	r3, [sp, #28]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	dd00      	ble.n	800ecd0 <_dtoa_r+0x4bc>
 800ecce:	e0e1      	b.n	800ee94 <_dtoa_r+0x680>
 800ecd0:	d000      	beq.n	800ecd4 <_dtoa_r+0x4c0>
 800ecd2:	e288      	b.n	800f1e6 <_dtoa_r+0x9d2>
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	0030      	movs	r0, r6
 800ecd8:	0039      	movs	r1, r7
 800ecda:	4b9d      	ldr	r3, [pc, #628]	; (800ef50 <_dtoa_r+0x73c>)
 800ecdc:	f7f2 fb3a 	bl	8001354 <__aeabi_dmul>
 800ece0:	9a08      	ldr	r2, [sp, #32]
 800ece2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ece4:	f7f1 fbd2 	bl	800048c <__aeabi_dcmpge>
 800ece8:	9e07      	ldr	r6, [sp, #28]
 800ecea:	0037      	movs	r7, r6
 800ecec:	2800      	cmp	r0, #0
 800ecee:	d000      	beq.n	800ecf2 <_dtoa_r+0x4de>
 800ecf0:	e25f      	b.n	800f1b2 <_dtoa_r+0x99e>
 800ecf2:	9b06      	ldr	r3, [sp, #24]
 800ecf4:	9a06      	ldr	r2, [sp, #24]
 800ecf6:	3301      	adds	r3, #1
 800ecf8:	9308      	str	r3, [sp, #32]
 800ecfa:	2331      	movs	r3, #49	; 0x31
 800ecfc:	7013      	strb	r3, [r2, #0]
 800ecfe:	9b03      	ldr	r3, [sp, #12]
 800ed00:	3301      	adds	r3, #1
 800ed02:	9303      	str	r3, [sp, #12]
 800ed04:	e25a      	b.n	800f1bc <_dtoa_r+0x9a8>
 800ed06:	423d      	tst	r5, r7
 800ed08:	d005      	beq.n	800ed16 <_dtoa_r+0x502>
 800ed0a:	6832      	ldr	r2, [r6, #0]
 800ed0c:	6873      	ldr	r3, [r6, #4]
 800ed0e:	f7f2 fb21 	bl	8001354 <__aeabi_dmul>
 800ed12:	003b      	movs	r3, r7
 800ed14:	3401      	adds	r4, #1
 800ed16:	106d      	asrs	r5, r5, #1
 800ed18:	3608      	adds	r6, #8
 800ed1a:	e75f      	b.n	800ebdc <_dtoa_r+0x3c8>
 800ed1c:	9b03      	ldr	r3, [sp, #12]
 800ed1e:	930e      	str	r3, [sp, #56]	; 0x38
 800ed20:	9b07      	ldr	r3, [sp, #28]
 800ed22:	e783      	b.n	800ec2c <_dtoa_r+0x418>
 800ed24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ed26:	4b84      	ldr	r3, [pc, #528]	; (800ef38 <_dtoa_r+0x724>)
 800ed28:	3a01      	subs	r2, #1
 800ed2a:	00d2      	lsls	r2, r2, #3
 800ed2c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ed2e:	189b      	adds	r3, r3, r2
 800ed30:	9c08      	ldr	r4, [sp, #32]
 800ed32:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ed34:	681a      	ldr	r2, [r3, #0]
 800ed36:	685b      	ldr	r3, [r3, #4]
 800ed38:	2900      	cmp	r1, #0
 800ed3a:	d051      	beq.n	800ede0 <_dtoa_r+0x5cc>
 800ed3c:	2000      	movs	r0, #0
 800ed3e:	4986      	ldr	r1, [pc, #536]	; (800ef58 <_dtoa_r+0x744>)
 800ed40:	f7f1 ff0e 	bl	8000b60 <__aeabi_ddiv>
 800ed44:	0022      	movs	r2, r4
 800ed46:	002b      	movs	r3, r5
 800ed48:	f7f2 fdc6 	bl	80018d8 <__aeabi_dsub>
 800ed4c:	9a06      	ldr	r2, [sp, #24]
 800ed4e:	0004      	movs	r4, r0
 800ed50:	4694      	mov	ip, r2
 800ed52:	000d      	movs	r5, r1
 800ed54:	9b06      	ldr	r3, [sp, #24]
 800ed56:	9314      	str	r3, [sp, #80]	; 0x50
 800ed58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ed5a:	4463      	add	r3, ip
 800ed5c:	9318      	str	r3, [sp, #96]	; 0x60
 800ed5e:	0039      	movs	r1, r7
 800ed60:	0030      	movs	r0, r6
 800ed62:	f7f3 f959 	bl	8002018 <__aeabi_d2iz>
 800ed66:	9012      	str	r0, [sp, #72]	; 0x48
 800ed68:	f7f3 f98c 	bl	8002084 <__aeabi_i2d>
 800ed6c:	0002      	movs	r2, r0
 800ed6e:	000b      	movs	r3, r1
 800ed70:	0030      	movs	r0, r6
 800ed72:	0039      	movs	r1, r7
 800ed74:	f7f2 fdb0 	bl	80018d8 <__aeabi_dsub>
 800ed78:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ed7a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ed7c:	3301      	adds	r3, #1
 800ed7e:	9308      	str	r3, [sp, #32]
 800ed80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ed82:	0006      	movs	r6, r0
 800ed84:	3330      	adds	r3, #48	; 0x30
 800ed86:	7013      	strb	r3, [r2, #0]
 800ed88:	0022      	movs	r2, r4
 800ed8a:	002b      	movs	r3, r5
 800ed8c:	000f      	movs	r7, r1
 800ed8e:	f7f1 fb5f 	bl	8000450 <__aeabi_dcmplt>
 800ed92:	2800      	cmp	r0, #0
 800ed94:	d174      	bne.n	800ee80 <_dtoa_r+0x66c>
 800ed96:	0032      	movs	r2, r6
 800ed98:	003b      	movs	r3, r7
 800ed9a:	2000      	movs	r0, #0
 800ed9c:	4968      	ldr	r1, [pc, #416]	; (800ef40 <_dtoa_r+0x72c>)
 800ed9e:	f7f2 fd9b 	bl	80018d8 <__aeabi_dsub>
 800eda2:	0022      	movs	r2, r4
 800eda4:	002b      	movs	r3, r5
 800eda6:	f7f1 fb53 	bl	8000450 <__aeabi_dcmplt>
 800edaa:	2800      	cmp	r0, #0
 800edac:	d000      	beq.n	800edb0 <_dtoa_r+0x59c>
 800edae:	e0d7      	b.n	800ef60 <_dtoa_r+0x74c>
 800edb0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800edb2:	9a08      	ldr	r2, [sp, #32]
 800edb4:	4293      	cmp	r3, r2
 800edb6:	d100      	bne.n	800edba <_dtoa_r+0x5a6>
 800edb8:	e771      	b.n	800ec9e <_dtoa_r+0x48a>
 800edba:	2200      	movs	r2, #0
 800edbc:	0020      	movs	r0, r4
 800edbe:	0029      	movs	r1, r5
 800edc0:	4b60      	ldr	r3, [pc, #384]	; (800ef44 <_dtoa_r+0x730>)
 800edc2:	f7f2 fac7 	bl	8001354 <__aeabi_dmul>
 800edc6:	4b5f      	ldr	r3, [pc, #380]	; (800ef44 <_dtoa_r+0x730>)
 800edc8:	0004      	movs	r4, r0
 800edca:	000d      	movs	r5, r1
 800edcc:	0030      	movs	r0, r6
 800edce:	0039      	movs	r1, r7
 800edd0:	2200      	movs	r2, #0
 800edd2:	f7f2 fabf 	bl	8001354 <__aeabi_dmul>
 800edd6:	9b08      	ldr	r3, [sp, #32]
 800edd8:	0006      	movs	r6, r0
 800edda:	000f      	movs	r7, r1
 800eddc:	9314      	str	r3, [sp, #80]	; 0x50
 800edde:	e7be      	b.n	800ed5e <_dtoa_r+0x54a>
 800ede0:	0020      	movs	r0, r4
 800ede2:	0029      	movs	r1, r5
 800ede4:	f7f2 fab6 	bl	8001354 <__aeabi_dmul>
 800ede8:	9a06      	ldr	r2, [sp, #24]
 800edea:	9b06      	ldr	r3, [sp, #24]
 800edec:	4694      	mov	ip, r2
 800edee:	9308      	str	r3, [sp, #32]
 800edf0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800edf2:	9014      	str	r0, [sp, #80]	; 0x50
 800edf4:	9115      	str	r1, [sp, #84]	; 0x54
 800edf6:	4463      	add	r3, ip
 800edf8:	9319      	str	r3, [sp, #100]	; 0x64
 800edfa:	0030      	movs	r0, r6
 800edfc:	0039      	movs	r1, r7
 800edfe:	f7f3 f90b 	bl	8002018 <__aeabi_d2iz>
 800ee02:	9018      	str	r0, [sp, #96]	; 0x60
 800ee04:	f7f3 f93e 	bl	8002084 <__aeabi_i2d>
 800ee08:	0002      	movs	r2, r0
 800ee0a:	000b      	movs	r3, r1
 800ee0c:	0030      	movs	r0, r6
 800ee0e:	0039      	movs	r1, r7
 800ee10:	f7f2 fd62 	bl	80018d8 <__aeabi_dsub>
 800ee14:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800ee16:	9b08      	ldr	r3, [sp, #32]
 800ee18:	3630      	adds	r6, #48	; 0x30
 800ee1a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ee1c:	701e      	strb	r6, [r3, #0]
 800ee1e:	3301      	adds	r3, #1
 800ee20:	0004      	movs	r4, r0
 800ee22:	000d      	movs	r5, r1
 800ee24:	9308      	str	r3, [sp, #32]
 800ee26:	4293      	cmp	r3, r2
 800ee28:	d12d      	bne.n	800ee86 <_dtoa_r+0x672>
 800ee2a:	9814      	ldr	r0, [sp, #80]	; 0x50
 800ee2c:	9915      	ldr	r1, [sp, #84]	; 0x54
 800ee2e:	9a06      	ldr	r2, [sp, #24]
 800ee30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ee32:	4694      	mov	ip, r2
 800ee34:	4463      	add	r3, ip
 800ee36:	2200      	movs	r2, #0
 800ee38:	9308      	str	r3, [sp, #32]
 800ee3a:	4b47      	ldr	r3, [pc, #284]	; (800ef58 <_dtoa_r+0x744>)
 800ee3c:	f7f1 fb30 	bl	80004a0 <__aeabi_dadd>
 800ee40:	0002      	movs	r2, r0
 800ee42:	000b      	movs	r3, r1
 800ee44:	0020      	movs	r0, r4
 800ee46:	0029      	movs	r1, r5
 800ee48:	f7f1 fb16 	bl	8000478 <__aeabi_dcmpgt>
 800ee4c:	2800      	cmp	r0, #0
 800ee4e:	d000      	beq.n	800ee52 <_dtoa_r+0x63e>
 800ee50:	e086      	b.n	800ef60 <_dtoa_r+0x74c>
 800ee52:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ee54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ee56:	2000      	movs	r0, #0
 800ee58:	493f      	ldr	r1, [pc, #252]	; (800ef58 <_dtoa_r+0x744>)
 800ee5a:	f7f2 fd3d 	bl	80018d8 <__aeabi_dsub>
 800ee5e:	0002      	movs	r2, r0
 800ee60:	000b      	movs	r3, r1
 800ee62:	0020      	movs	r0, r4
 800ee64:	0029      	movs	r1, r5
 800ee66:	f7f1 faf3 	bl	8000450 <__aeabi_dcmplt>
 800ee6a:	2800      	cmp	r0, #0
 800ee6c:	d100      	bne.n	800ee70 <_dtoa_r+0x65c>
 800ee6e:	e716      	b.n	800ec9e <_dtoa_r+0x48a>
 800ee70:	9b08      	ldr	r3, [sp, #32]
 800ee72:	001a      	movs	r2, r3
 800ee74:	3a01      	subs	r2, #1
 800ee76:	9208      	str	r2, [sp, #32]
 800ee78:	7812      	ldrb	r2, [r2, #0]
 800ee7a:	2a30      	cmp	r2, #48	; 0x30
 800ee7c:	d0f8      	beq.n	800ee70 <_dtoa_r+0x65c>
 800ee7e:	9308      	str	r3, [sp, #32]
 800ee80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ee82:	9303      	str	r3, [sp, #12]
 800ee84:	e046      	b.n	800ef14 <_dtoa_r+0x700>
 800ee86:	2200      	movs	r2, #0
 800ee88:	4b2e      	ldr	r3, [pc, #184]	; (800ef44 <_dtoa_r+0x730>)
 800ee8a:	f7f2 fa63 	bl	8001354 <__aeabi_dmul>
 800ee8e:	0006      	movs	r6, r0
 800ee90:	000f      	movs	r7, r1
 800ee92:	e7b2      	b.n	800edfa <_dtoa_r+0x5e6>
 800ee94:	9b06      	ldr	r3, [sp, #24]
 800ee96:	9a06      	ldr	r2, [sp, #24]
 800ee98:	930a      	str	r3, [sp, #40]	; 0x28
 800ee9a:	9b07      	ldr	r3, [sp, #28]
 800ee9c:	9c08      	ldr	r4, [sp, #32]
 800ee9e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800eea0:	3b01      	subs	r3, #1
 800eea2:	189b      	adds	r3, r3, r2
 800eea4:	930b      	str	r3, [sp, #44]	; 0x2c
 800eea6:	0032      	movs	r2, r6
 800eea8:	003b      	movs	r3, r7
 800eeaa:	0020      	movs	r0, r4
 800eeac:	0029      	movs	r1, r5
 800eeae:	f7f1 fe57 	bl	8000b60 <__aeabi_ddiv>
 800eeb2:	f7f3 f8b1 	bl	8002018 <__aeabi_d2iz>
 800eeb6:	9007      	str	r0, [sp, #28]
 800eeb8:	f7f3 f8e4 	bl	8002084 <__aeabi_i2d>
 800eebc:	0032      	movs	r2, r6
 800eebe:	003b      	movs	r3, r7
 800eec0:	f7f2 fa48 	bl	8001354 <__aeabi_dmul>
 800eec4:	0002      	movs	r2, r0
 800eec6:	000b      	movs	r3, r1
 800eec8:	0020      	movs	r0, r4
 800eeca:	0029      	movs	r1, r5
 800eecc:	f7f2 fd04 	bl	80018d8 <__aeabi_dsub>
 800eed0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eed2:	001a      	movs	r2, r3
 800eed4:	3201      	adds	r2, #1
 800eed6:	920a      	str	r2, [sp, #40]	; 0x28
 800eed8:	9208      	str	r2, [sp, #32]
 800eeda:	9a07      	ldr	r2, [sp, #28]
 800eedc:	3230      	adds	r2, #48	; 0x30
 800eede:	701a      	strb	r2, [r3, #0]
 800eee0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800eee2:	429a      	cmp	r2, r3
 800eee4:	d14f      	bne.n	800ef86 <_dtoa_r+0x772>
 800eee6:	0002      	movs	r2, r0
 800eee8:	000b      	movs	r3, r1
 800eeea:	f7f1 fad9 	bl	80004a0 <__aeabi_dadd>
 800eeee:	0032      	movs	r2, r6
 800eef0:	003b      	movs	r3, r7
 800eef2:	0004      	movs	r4, r0
 800eef4:	000d      	movs	r5, r1
 800eef6:	f7f1 fabf 	bl	8000478 <__aeabi_dcmpgt>
 800eefa:	2800      	cmp	r0, #0
 800eefc:	d12e      	bne.n	800ef5c <_dtoa_r+0x748>
 800eefe:	0032      	movs	r2, r6
 800ef00:	003b      	movs	r3, r7
 800ef02:	0020      	movs	r0, r4
 800ef04:	0029      	movs	r1, r5
 800ef06:	f7f1 fa9d 	bl	8000444 <__aeabi_dcmpeq>
 800ef0a:	2800      	cmp	r0, #0
 800ef0c:	d002      	beq.n	800ef14 <_dtoa_r+0x700>
 800ef0e:	9b07      	ldr	r3, [sp, #28]
 800ef10:	07de      	lsls	r6, r3, #31
 800ef12:	d423      	bmi.n	800ef5c <_dtoa_r+0x748>
 800ef14:	9905      	ldr	r1, [sp, #20]
 800ef16:	9804      	ldr	r0, [sp, #16]
 800ef18:	f000 fbd6 	bl	800f6c8 <_Bfree>
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	9a08      	ldr	r2, [sp, #32]
 800ef20:	7013      	strb	r3, [r2, #0]
 800ef22:	9b03      	ldr	r3, [sp, #12]
 800ef24:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ef26:	3301      	adds	r3, #1
 800ef28:	6013      	str	r3, [r2, #0]
 800ef2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d100      	bne.n	800ef32 <_dtoa_r+0x71e>
 800ef30:	e4ba      	b.n	800e8a8 <_dtoa_r+0x94>
 800ef32:	9a08      	ldr	r2, [sp, #32]
 800ef34:	601a      	str	r2, [r3, #0]
 800ef36:	e4b7      	b.n	800e8a8 <_dtoa_r+0x94>
 800ef38:	08011640 	.word	0x08011640
 800ef3c:	08011618 	.word	0x08011618
 800ef40:	3ff00000 	.word	0x3ff00000
 800ef44:	40240000 	.word	0x40240000
 800ef48:	401c0000 	.word	0x401c0000
 800ef4c:	fcc00000 	.word	0xfcc00000
 800ef50:	40140000 	.word	0x40140000
 800ef54:	7cc00000 	.word	0x7cc00000
 800ef58:	3fe00000 	.word	0x3fe00000
 800ef5c:	9b03      	ldr	r3, [sp, #12]
 800ef5e:	930e      	str	r3, [sp, #56]	; 0x38
 800ef60:	9b08      	ldr	r3, [sp, #32]
 800ef62:	9308      	str	r3, [sp, #32]
 800ef64:	3b01      	subs	r3, #1
 800ef66:	781a      	ldrb	r2, [r3, #0]
 800ef68:	2a39      	cmp	r2, #57	; 0x39
 800ef6a:	d108      	bne.n	800ef7e <_dtoa_r+0x76a>
 800ef6c:	9a06      	ldr	r2, [sp, #24]
 800ef6e:	429a      	cmp	r2, r3
 800ef70:	d1f7      	bne.n	800ef62 <_dtoa_r+0x74e>
 800ef72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ef74:	9906      	ldr	r1, [sp, #24]
 800ef76:	3201      	adds	r2, #1
 800ef78:	920e      	str	r2, [sp, #56]	; 0x38
 800ef7a:	2230      	movs	r2, #48	; 0x30
 800ef7c:	700a      	strb	r2, [r1, #0]
 800ef7e:	781a      	ldrb	r2, [r3, #0]
 800ef80:	3201      	adds	r2, #1
 800ef82:	701a      	strb	r2, [r3, #0]
 800ef84:	e77c      	b.n	800ee80 <_dtoa_r+0x66c>
 800ef86:	2200      	movs	r2, #0
 800ef88:	4ba9      	ldr	r3, [pc, #676]	; (800f230 <_dtoa_r+0xa1c>)
 800ef8a:	f7f2 f9e3 	bl	8001354 <__aeabi_dmul>
 800ef8e:	2200      	movs	r2, #0
 800ef90:	2300      	movs	r3, #0
 800ef92:	0004      	movs	r4, r0
 800ef94:	000d      	movs	r5, r1
 800ef96:	f7f1 fa55 	bl	8000444 <__aeabi_dcmpeq>
 800ef9a:	2800      	cmp	r0, #0
 800ef9c:	d100      	bne.n	800efa0 <_dtoa_r+0x78c>
 800ef9e:	e782      	b.n	800eea6 <_dtoa_r+0x692>
 800efa0:	e7b8      	b.n	800ef14 <_dtoa_r+0x700>
 800efa2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800efa4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800efa6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800efa8:	2f00      	cmp	r7, #0
 800efaa:	d012      	beq.n	800efd2 <_dtoa_r+0x7be>
 800efac:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800efae:	2a01      	cmp	r2, #1
 800efb0:	dc6e      	bgt.n	800f090 <_dtoa_r+0x87c>
 800efb2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800efb4:	2a00      	cmp	r2, #0
 800efb6:	d065      	beq.n	800f084 <_dtoa_r+0x870>
 800efb8:	4a9e      	ldr	r2, [pc, #632]	; (800f234 <_dtoa_r+0xa20>)
 800efba:	189b      	adds	r3, r3, r2
 800efbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800efbe:	2101      	movs	r1, #1
 800efc0:	18d2      	adds	r2, r2, r3
 800efc2:	920a      	str	r2, [sp, #40]	; 0x28
 800efc4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800efc6:	9804      	ldr	r0, [sp, #16]
 800efc8:	18d3      	adds	r3, r2, r3
 800efca:	930c      	str	r3, [sp, #48]	; 0x30
 800efcc:	f000 fc2c 	bl	800f828 <__i2b>
 800efd0:	0007      	movs	r7, r0
 800efd2:	2c00      	cmp	r4, #0
 800efd4:	d00e      	beq.n	800eff4 <_dtoa_r+0x7e0>
 800efd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800efd8:	2b00      	cmp	r3, #0
 800efda:	dd0b      	ble.n	800eff4 <_dtoa_r+0x7e0>
 800efdc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800efde:	0023      	movs	r3, r4
 800efe0:	4294      	cmp	r4, r2
 800efe2:	dd00      	ble.n	800efe6 <_dtoa_r+0x7d2>
 800efe4:	0013      	movs	r3, r2
 800efe6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800efe8:	1ae4      	subs	r4, r4, r3
 800efea:	1ad2      	subs	r2, r2, r3
 800efec:	920a      	str	r2, [sp, #40]	; 0x28
 800efee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800eff0:	1ad3      	subs	r3, r2, r3
 800eff2:	930c      	str	r3, [sp, #48]	; 0x30
 800eff4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d01e      	beq.n	800f038 <_dtoa_r+0x824>
 800effa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800effc:	2b00      	cmp	r3, #0
 800effe:	d05c      	beq.n	800f0ba <_dtoa_r+0x8a6>
 800f000:	2d00      	cmp	r5, #0
 800f002:	dd10      	ble.n	800f026 <_dtoa_r+0x812>
 800f004:	0039      	movs	r1, r7
 800f006:	002a      	movs	r2, r5
 800f008:	9804      	ldr	r0, [sp, #16]
 800f00a:	f000 fcd5 	bl	800f9b8 <__pow5mult>
 800f00e:	9a05      	ldr	r2, [sp, #20]
 800f010:	0001      	movs	r1, r0
 800f012:	0007      	movs	r7, r0
 800f014:	9804      	ldr	r0, [sp, #16]
 800f016:	f000 fc1f 	bl	800f858 <__multiply>
 800f01a:	0006      	movs	r6, r0
 800f01c:	9905      	ldr	r1, [sp, #20]
 800f01e:	9804      	ldr	r0, [sp, #16]
 800f020:	f000 fb52 	bl	800f6c8 <_Bfree>
 800f024:	9605      	str	r6, [sp, #20]
 800f026:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f028:	1b5a      	subs	r2, r3, r5
 800f02a:	42ab      	cmp	r3, r5
 800f02c:	d004      	beq.n	800f038 <_dtoa_r+0x824>
 800f02e:	9905      	ldr	r1, [sp, #20]
 800f030:	9804      	ldr	r0, [sp, #16]
 800f032:	f000 fcc1 	bl	800f9b8 <__pow5mult>
 800f036:	9005      	str	r0, [sp, #20]
 800f038:	2101      	movs	r1, #1
 800f03a:	9804      	ldr	r0, [sp, #16]
 800f03c:	f000 fbf4 	bl	800f828 <__i2b>
 800f040:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f042:	0006      	movs	r6, r0
 800f044:	2b00      	cmp	r3, #0
 800f046:	dd3a      	ble.n	800f0be <_dtoa_r+0x8aa>
 800f048:	001a      	movs	r2, r3
 800f04a:	0001      	movs	r1, r0
 800f04c:	9804      	ldr	r0, [sp, #16]
 800f04e:	f000 fcb3 	bl	800f9b8 <__pow5mult>
 800f052:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f054:	0006      	movs	r6, r0
 800f056:	2500      	movs	r5, #0
 800f058:	2b01      	cmp	r3, #1
 800f05a:	dc38      	bgt.n	800f0ce <_dtoa_r+0x8ba>
 800f05c:	2500      	movs	r5, #0
 800f05e:	9b08      	ldr	r3, [sp, #32]
 800f060:	42ab      	cmp	r3, r5
 800f062:	d130      	bne.n	800f0c6 <_dtoa_r+0x8b2>
 800f064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f066:	031b      	lsls	r3, r3, #12
 800f068:	42ab      	cmp	r3, r5
 800f06a:	d12c      	bne.n	800f0c6 <_dtoa_r+0x8b2>
 800f06c:	4b72      	ldr	r3, [pc, #456]	; (800f238 <_dtoa_r+0xa24>)
 800f06e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f070:	4213      	tst	r3, r2
 800f072:	d028      	beq.n	800f0c6 <_dtoa_r+0x8b2>
 800f074:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f076:	3501      	adds	r5, #1
 800f078:	3301      	adds	r3, #1
 800f07a:	930a      	str	r3, [sp, #40]	; 0x28
 800f07c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f07e:	3301      	adds	r3, #1
 800f080:	930c      	str	r3, [sp, #48]	; 0x30
 800f082:	e020      	b.n	800f0c6 <_dtoa_r+0x8b2>
 800f084:	2336      	movs	r3, #54	; 0x36
 800f086:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f088:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800f08a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f08c:	1a9b      	subs	r3, r3, r2
 800f08e:	e795      	b.n	800efbc <_dtoa_r+0x7a8>
 800f090:	9b07      	ldr	r3, [sp, #28]
 800f092:	1e5d      	subs	r5, r3, #1
 800f094:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f096:	42ab      	cmp	r3, r5
 800f098:	db07      	blt.n	800f0aa <_dtoa_r+0x896>
 800f09a:	1b5d      	subs	r5, r3, r5
 800f09c:	9b07      	ldr	r3, [sp, #28]
 800f09e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	da8b      	bge.n	800efbc <_dtoa_r+0x7a8>
 800f0a4:	1ae4      	subs	r4, r4, r3
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	e788      	b.n	800efbc <_dtoa_r+0x7a8>
 800f0aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f0ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f0ae:	1aeb      	subs	r3, r5, r3
 800f0b0:	18d3      	adds	r3, r2, r3
 800f0b2:	950d      	str	r5, [sp, #52]	; 0x34
 800f0b4:	9313      	str	r3, [sp, #76]	; 0x4c
 800f0b6:	2500      	movs	r5, #0
 800f0b8:	e7f0      	b.n	800f09c <_dtoa_r+0x888>
 800f0ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f0bc:	e7b7      	b.n	800f02e <_dtoa_r+0x81a>
 800f0be:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f0c0:	2500      	movs	r5, #0
 800f0c2:	2b01      	cmp	r3, #1
 800f0c4:	ddca      	ble.n	800f05c <_dtoa_r+0x848>
 800f0c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f0c8:	2001      	movs	r0, #1
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d008      	beq.n	800f0e0 <_dtoa_r+0x8cc>
 800f0ce:	6933      	ldr	r3, [r6, #16]
 800f0d0:	3303      	adds	r3, #3
 800f0d2:	009b      	lsls	r3, r3, #2
 800f0d4:	18f3      	adds	r3, r6, r3
 800f0d6:	6858      	ldr	r0, [r3, #4]
 800f0d8:	f000 fb5e 	bl	800f798 <__hi0bits>
 800f0dc:	2320      	movs	r3, #32
 800f0de:	1a18      	subs	r0, r3, r0
 800f0e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f0e2:	1818      	adds	r0, r3, r0
 800f0e4:	0002      	movs	r2, r0
 800f0e6:	231f      	movs	r3, #31
 800f0e8:	401a      	ands	r2, r3
 800f0ea:	4218      	tst	r0, r3
 800f0ec:	d047      	beq.n	800f17e <_dtoa_r+0x96a>
 800f0ee:	3301      	adds	r3, #1
 800f0f0:	1a9b      	subs	r3, r3, r2
 800f0f2:	2b04      	cmp	r3, #4
 800f0f4:	dd3f      	ble.n	800f176 <_dtoa_r+0x962>
 800f0f6:	231c      	movs	r3, #28
 800f0f8:	1a9b      	subs	r3, r3, r2
 800f0fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f0fc:	18e4      	adds	r4, r4, r3
 800f0fe:	18d2      	adds	r2, r2, r3
 800f100:	920a      	str	r2, [sp, #40]	; 0x28
 800f102:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f104:	18d3      	adds	r3, r2, r3
 800f106:	930c      	str	r3, [sp, #48]	; 0x30
 800f108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	dd05      	ble.n	800f11a <_dtoa_r+0x906>
 800f10e:	001a      	movs	r2, r3
 800f110:	9905      	ldr	r1, [sp, #20]
 800f112:	9804      	ldr	r0, [sp, #16]
 800f114:	f000 fcac 	bl	800fa70 <__lshift>
 800f118:	9005      	str	r0, [sp, #20]
 800f11a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	dd05      	ble.n	800f12c <_dtoa_r+0x918>
 800f120:	0031      	movs	r1, r6
 800f122:	001a      	movs	r2, r3
 800f124:	9804      	ldr	r0, [sp, #16]
 800f126:	f000 fca3 	bl	800fa70 <__lshift>
 800f12a:	0006      	movs	r6, r0
 800f12c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d027      	beq.n	800f182 <_dtoa_r+0x96e>
 800f132:	0031      	movs	r1, r6
 800f134:	9805      	ldr	r0, [sp, #20]
 800f136:	f000 fd09 	bl	800fb4c <__mcmp>
 800f13a:	2800      	cmp	r0, #0
 800f13c:	da21      	bge.n	800f182 <_dtoa_r+0x96e>
 800f13e:	9b03      	ldr	r3, [sp, #12]
 800f140:	220a      	movs	r2, #10
 800f142:	3b01      	subs	r3, #1
 800f144:	9303      	str	r3, [sp, #12]
 800f146:	9905      	ldr	r1, [sp, #20]
 800f148:	2300      	movs	r3, #0
 800f14a:	9804      	ldr	r0, [sp, #16]
 800f14c:	f000 fae0 	bl	800f710 <__multadd>
 800f150:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f152:	9005      	str	r0, [sp, #20]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d100      	bne.n	800f15a <_dtoa_r+0x946>
 800f158:	e15d      	b.n	800f416 <_dtoa_r+0xc02>
 800f15a:	2300      	movs	r3, #0
 800f15c:	0039      	movs	r1, r7
 800f15e:	220a      	movs	r2, #10
 800f160:	9804      	ldr	r0, [sp, #16]
 800f162:	f000 fad5 	bl	800f710 <__multadd>
 800f166:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f168:	0007      	movs	r7, r0
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	dc49      	bgt.n	800f202 <_dtoa_r+0x9ee>
 800f16e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f170:	2b02      	cmp	r3, #2
 800f172:	dc0e      	bgt.n	800f192 <_dtoa_r+0x97e>
 800f174:	e045      	b.n	800f202 <_dtoa_r+0x9ee>
 800f176:	2b04      	cmp	r3, #4
 800f178:	d0c6      	beq.n	800f108 <_dtoa_r+0x8f4>
 800f17a:	331c      	adds	r3, #28
 800f17c:	e7bd      	b.n	800f0fa <_dtoa_r+0x8e6>
 800f17e:	0013      	movs	r3, r2
 800f180:	e7fb      	b.n	800f17a <_dtoa_r+0x966>
 800f182:	9b07      	ldr	r3, [sp, #28]
 800f184:	2b00      	cmp	r3, #0
 800f186:	dc36      	bgt.n	800f1f6 <_dtoa_r+0x9e2>
 800f188:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f18a:	2b02      	cmp	r3, #2
 800f18c:	dd33      	ble.n	800f1f6 <_dtoa_r+0x9e2>
 800f18e:	9b07      	ldr	r3, [sp, #28]
 800f190:	930b      	str	r3, [sp, #44]	; 0x2c
 800f192:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f194:	2b00      	cmp	r3, #0
 800f196:	d10c      	bne.n	800f1b2 <_dtoa_r+0x99e>
 800f198:	0031      	movs	r1, r6
 800f19a:	2205      	movs	r2, #5
 800f19c:	9804      	ldr	r0, [sp, #16]
 800f19e:	f000 fab7 	bl	800f710 <__multadd>
 800f1a2:	0006      	movs	r6, r0
 800f1a4:	0001      	movs	r1, r0
 800f1a6:	9805      	ldr	r0, [sp, #20]
 800f1a8:	f000 fcd0 	bl	800fb4c <__mcmp>
 800f1ac:	2800      	cmp	r0, #0
 800f1ae:	dd00      	ble.n	800f1b2 <_dtoa_r+0x99e>
 800f1b0:	e59f      	b.n	800ecf2 <_dtoa_r+0x4de>
 800f1b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f1b4:	43db      	mvns	r3, r3
 800f1b6:	9303      	str	r3, [sp, #12]
 800f1b8:	9b06      	ldr	r3, [sp, #24]
 800f1ba:	9308      	str	r3, [sp, #32]
 800f1bc:	2500      	movs	r5, #0
 800f1be:	0031      	movs	r1, r6
 800f1c0:	9804      	ldr	r0, [sp, #16]
 800f1c2:	f000 fa81 	bl	800f6c8 <_Bfree>
 800f1c6:	2f00      	cmp	r7, #0
 800f1c8:	d100      	bne.n	800f1cc <_dtoa_r+0x9b8>
 800f1ca:	e6a3      	b.n	800ef14 <_dtoa_r+0x700>
 800f1cc:	2d00      	cmp	r5, #0
 800f1ce:	d005      	beq.n	800f1dc <_dtoa_r+0x9c8>
 800f1d0:	42bd      	cmp	r5, r7
 800f1d2:	d003      	beq.n	800f1dc <_dtoa_r+0x9c8>
 800f1d4:	0029      	movs	r1, r5
 800f1d6:	9804      	ldr	r0, [sp, #16]
 800f1d8:	f000 fa76 	bl	800f6c8 <_Bfree>
 800f1dc:	0039      	movs	r1, r7
 800f1de:	9804      	ldr	r0, [sp, #16]
 800f1e0:	f000 fa72 	bl	800f6c8 <_Bfree>
 800f1e4:	e696      	b.n	800ef14 <_dtoa_r+0x700>
 800f1e6:	2600      	movs	r6, #0
 800f1e8:	0037      	movs	r7, r6
 800f1ea:	e7e2      	b.n	800f1b2 <_dtoa_r+0x99e>
 800f1ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f1ee:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800f1f0:	9303      	str	r3, [sp, #12]
 800f1f2:	0037      	movs	r7, r6
 800f1f4:	e57d      	b.n	800ecf2 <_dtoa_r+0x4de>
 800f1f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d100      	bne.n	800f1fe <_dtoa_r+0x9ea>
 800f1fc:	e0c3      	b.n	800f386 <_dtoa_r+0xb72>
 800f1fe:	9b07      	ldr	r3, [sp, #28]
 800f200:	930b      	str	r3, [sp, #44]	; 0x2c
 800f202:	2c00      	cmp	r4, #0
 800f204:	dd05      	ble.n	800f212 <_dtoa_r+0x9fe>
 800f206:	0039      	movs	r1, r7
 800f208:	0022      	movs	r2, r4
 800f20a:	9804      	ldr	r0, [sp, #16]
 800f20c:	f000 fc30 	bl	800fa70 <__lshift>
 800f210:	0007      	movs	r7, r0
 800f212:	0038      	movs	r0, r7
 800f214:	2d00      	cmp	r5, #0
 800f216:	d024      	beq.n	800f262 <_dtoa_r+0xa4e>
 800f218:	6879      	ldr	r1, [r7, #4]
 800f21a:	9804      	ldr	r0, [sp, #16]
 800f21c:	f000 fa10 	bl	800f640 <_Balloc>
 800f220:	1e04      	subs	r4, r0, #0
 800f222:	d111      	bne.n	800f248 <_dtoa_r+0xa34>
 800f224:	0022      	movs	r2, r4
 800f226:	4b05      	ldr	r3, [pc, #20]	; (800f23c <_dtoa_r+0xa28>)
 800f228:	4805      	ldr	r0, [pc, #20]	; (800f240 <_dtoa_r+0xa2c>)
 800f22a:	4906      	ldr	r1, [pc, #24]	; (800f244 <_dtoa_r+0xa30>)
 800f22c:	f7ff fb07 	bl	800e83e <_dtoa_r+0x2a>
 800f230:	40240000 	.word	0x40240000
 800f234:	00000433 	.word	0x00000433
 800f238:	7ff00000 	.word	0x7ff00000
 800f23c:	080115a8 	.word	0x080115a8
 800f240:	08011550 	.word	0x08011550
 800f244:	000002ef 	.word	0x000002ef
 800f248:	0039      	movs	r1, r7
 800f24a:	693a      	ldr	r2, [r7, #16]
 800f24c:	310c      	adds	r1, #12
 800f24e:	3202      	adds	r2, #2
 800f250:	0092      	lsls	r2, r2, #2
 800f252:	300c      	adds	r0, #12
 800f254:	f7ff fa46 	bl	800e6e4 <memcpy>
 800f258:	2201      	movs	r2, #1
 800f25a:	0021      	movs	r1, r4
 800f25c:	9804      	ldr	r0, [sp, #16]
 800f25e:	f000 fc07 	bl	800fa70 <__lshift>
 800f262:	9b06      	ldr	r3, [sp, #24]
 800f264:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f266:	9307      	str	r3, [sp, #28]
 800f268:	3b01      	subs	r3, #1
 800f26a:	189b      	adds	r3, r3, r2
 800f26c:	2201      	movs	r2, #1
 800f26e:	003d      	movs	r5, r7
 800f270:	0007      	movs	r7, r0
 800f272:	930e      	str	r3, [sp, #56]	; 0x38
 800f274:	9b08      	ldr	r3, [sp, #32]
 800f276:	4013      	ands	r3, r2
 800f278:	930d      	str	r3, [sp, #52]	; 0x34
 800f27a:	0031      	movs	r1, r6
 800f27c:	9805      	ldr	r0, [sp, #20]
 800f27e:	f7ff fa3a 	bl	800e6f6 <quorem>
 800f282:	0029      	movs	r1, r5
 800f284:	0004      	movs	r4, r0
 800f286:	900b      	str	r0, [sp, #44]	; 0x2c
 800f288:	9805      	ldr	r0, [sp, #20]
 800f28a:	f000 fc5f 	bl	800fb4c <__mcmp>
 800f28e:	003a      	movs	r2, r7
 800f290:	900c      	str	r0, [sp, #48]	; 0x30
 800f292:	0031      	movs	r1, r6
 800f294:	9804      	ldr	r0, [sp, #16]
 800f296:	f000 fc75 	bl	800fb84 <__mdiff>
 800f29a:	2201      	movs	r2, #1
 800f29c:	68c3      	ldr	r3, [r0, #12]
 800f29e:	3430      	adds	r4, #48	; 0x30
 800f2a0:	9008      	str	r0, [sp, #32]
 800f2a2:	920a      	str	r2, [sp, #40]	; 0x28
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d104      	bne.n	800f2b2 <_dtoa_r+0xa9e>
 800f2a8:	0001      	movs	r1, r0
 800f2aa:	9805      	ldr	r0, [sp, #20]
 800f2ac:	f000 fc4e 	bl	800fb4c <__mcmp>
 800f2b0:	900a      	str	r0, [sp, #40]	; 0x28
 800f2b2:	9908      	ldr	r1, [sp, #32]
 800f2b4:	9804      	ldr	r0, [sp, #16]
 800f2b6:	f000 fa07 	bl	800f6c8 <_Bfree>
 800f2ba:	9b07      	ldr	r3, [sp, #28]
 800f2bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f2be:	3301      	adds	r3, #1
 800f2c0:	9308      	str	r3, [sp, #32]
 800f2c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f2c4:	4313      	orrs	r3, r2
 800f2c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f2c8:	4313      	orrs	r3, r2
 800f2ca:	d109      	bne.n	800f2e0 <_dtoa_r+0xacc>
 800f2cc:	2c39      	cmp	r4, #57	; 0x39
 800f2ce:	d022      	beq.n	800f316 <_dtoa_r+0xb02>
 800f2d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	dd01      	ble.n	800f2da <_dtoa_r+0xac6>
 800f2d6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800f2d8:	3431      	adds	r4, #49	; 0x31
 800f2da:	9b07      	ldr	r3, [sp, #28]
 800f2dc:	701c      	strb	r4, [r3, #0]
 800f2de:	e76e      	b.n	800f1be <_dtoa_r+0x9aa>
 800f2e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	db04      	blt.n	800f2f0 <_dtoa_r+0xadc>
 800f2e6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f2e8:	4313      	orrs	r3, r2
 800f2ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f2ec:	4313      	orrs	r3, r2
 800f2ee:	d11e      	bne.n	800f32e <_dtoa_r+0xb1a>
 800f2f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	ddf1      	ble.n	800f2da <_dtoa_r+0xac6>
 800f2f6:	9905      	ldr	r1, [sp, #20]
 800f2f8:	2201      	movs	r2, #1
 800f2fa:	9804      	ldr	r0, [sp, #16]
 800f2fc:	f000 fbb8 	bl	800fa70 <__lshift>
 800f300:	0031      	movs	r1, r6
 800f302:	9005      	str	r0, [sp, #20]
 800f304:	f000 fc22 	bl	800fb4c <__mcmp>
 800f308:	2800      	cmp	r0, #0
 800f30a:	dc02      	bgt.n	800f312 <_dtoa_r+0xafe>
 800f30c:	d1e5      	bne.n	800f2da <_dtoa_r+0xac6>
 800f30e:	07e3      	lsls	r3, r4, #31
 800f310:	d5e3      	bpl.n	800f2da <_dtoa_r+0xac6>
 800f312:	2c39      	cmp	r4, #57	; 0x39
 800f314:	d1df      	bne.n	800f2d6 <_dtoa_r+0xac2>
 800f316:	2339      	movs	r3, #57	; 0x39
 800f318:	9a07      	ldr	r2, [sp, #28]
 800f31a:	7013      	strb	r3, [r2, #0]
 800f31c:	9b08      	ldr	r3, [sp, #32]
 800f31e:	9308      	str	r3, [sp, #32]
 800f320:	3b01      	subs	r3, #1
 800f322:	781a      	ldrb	r2, [r3, #0]
 800f324:	2a39      	cmp	r2, #57	; 0x39
 800f326:	d063      	beq.n	800f3f0 <_dtoa_r+0xbdc>
 800f328:	3201      	adds	r2, #1
 800f32a:	701a      	strb	r2, [r3, #0]
 800f32c:	e747      	b.n	800f1be <_dtoa_r+0x9aa>
 800f32e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f330:	2b00      	cmp	r3, #0
 800f332:	dd03      	ble.n	800f33c <_dtoa_r+0xb28>
 800f334:	2c39      	cmp	r4, #57	; 0x39
 800f336:	d0ee      	beq.n	800f316 <_dtoa_r+0xb02>
 800f338:	3401      	adds	r4, #1
 800f33a:	e7ce      	b.n	800f2da <_dtoa_r+0xac6>
 800f33c:	9b07      	ldr	r3, [sp, #28]
 800f33e:	9a07      	ldr	r2, [sp, #28]
 800f340:	701c      	strb	r4, [r3, #0]
 800f342:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f344:	4293      	cmp	r3, r2
 800f346:	d03e      	beq.n	800f3c6 <_dtoa_r+0xbb2>
 800f348:	2300      	movs	r3, #0
 800f34a:	220a      	movs	r2, #10
 800f34c:	9905      	ldr	r1, [sp, #20]
 800f34e:	9804      	ldr	r0, [sp, #16]
 800f350:	f000 f9de 	bl	800f710 <__multadd>
 800f354:	2300      	movs	r3, #0
 800f356:	9005      	str	r0, [sp, #20]
 800f358:	220a      	movs	r2, #10
 800f35a:	0029      	movs	r1, r5
 800f35c:	9804      	ldr	r0, [sp, #16]
 800f35e:	42bd      	cmp	r5, r7
 800f360:	d106      	bne.n	800f370 <_dtoa_r+0xb5c>
 800f362:	f000 f9d5 	bl	800f710 <__multadd>
 800f366:	0005      	movs	r5, r0
 800f368:	0007      	movs	r7, r0
 800f36a:	9b08      	ldr	r3, [sp, #32]
 800f36c:	9307      	str	r3, [sp, #28]
 800f36e:	e784      	b.n	800f27a <_dtoa_r+0xa66>
 800f370:	f000 f9ce 	bl	800f710 <__multadd>
 800f374:	0039      	movs	r1, r7
 800f376:	0005      	movs	r5, r0
 800f378:	2300      	movs	r3, #0
 800f37a:	220a      	movs	r2, #10
 800f37c:	9804      	ldr	r0, [sp, #16]
 800f37e:	f000 f9c7 	bl	800f710 <__multadd>
 800f382:	0007      	movs	r7, r0
 800f384:	e7f1      	b.n	800f36a <_dtoa_r+0xb56>
 800f386:	9b07      	ldr	r3, [sp, #28]
 800f388:	930b      	str	r3, [sp, #44]	; 0x2c
 800f38a:	2500      	movs	r5, #0
 800f38c:	0031      	movs	r1, r6
 800f38e:	9805      	ldr	r0, [sp, #20]
 800f390:	f7ff f9b1 	bl	800e6f6 <quorem>
 800f394:	9b06      	ldr	r3, [sp, #24]
 800f396:	3030      	adds	r0, #48	; 0x30
 800f398:	5558      	strb	r0, [r3, r5]
 800f39a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f39c:	3501      	adds	r5, #1
 800f39e:	0004      	movs	r4, r0
 800f3a0:	42ab      	cmp	r3, r5
 800f3a2:	dd07      	ble.n	800f3b4 <_dtoa_r+0xba0>
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	220a      	movs	r2, #10
 800f3a8:	9905      	ldr	r1, [sp, #20]
 800f3aa:	9804      	ldr	r0, [sp, #16]
 800f3ac:	f000 f9b0 	bl	800f710 <__multadd>
 800f3b0:	9005      	str	r0, [sp, #20]
 800f3b2:	e7eb      	b.n	800f38c <_dtoa_r+0xb78>
 800f3b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f3b6:	2301      	movs	r3, #1
 800f3b8:	2a00      	cmp	r2, #0
 800f3ba:	dd00      	ble.n	800f3be <_dtoa_r+0xbaa>
 800f3bc:	0013      	movs	r3, r2
 800f3be:	2500      	movs	r5, #0
 800f3c0:	9a06      	ldr	r2, [sp, #24]
 800f3c2:	18d3      	adds	r3, r2, r3
 800f3c4:	9308      	str	r3, [sp, #32]
 800f3c6:	9905      	ldr	r1, [sp, #20]
 800f3c8:	2201      	movs	r2, #1
 800f3ca:	9804      	ldr	r0, [sp, #16]
 800f3cc:	f000 fb50 	bl	800fa70 <__lshift>
 800f3d0:	0031      	movs	r1, r6
 800f3d2:	9005      	str	r0, [sp, #20]
 800f3d4:	f000 fbba 	bl	800fb4c <__mcmp>
 800f3d8:	2800      	cmp	r0, #0
 800f3da:	dc9f      	bgt.n	800f31c <_dtoa_r+0xb08>
 800f3dc:	d101      	bne.n	800f3e2 <_dtoa_r+0xbce>
 800f3de:	07e4      	lsls	r4, r4, #31
 800f3e0:	d49c      	bmi.n	800f31c <_dtoa_r+0xb08>
 800f3e2:	9b08      	ldr	r3, [sp, #32]
 800f3e4:	9308      	str	r3, [sp, #32]
 800f3e6:	3b01      	subs	r3, #1
 800f3e8:	781a      	ldrb	r2, [r3, #0]
 800f3ea:	2a30      	cmp	r2, #48	; 0x30
 800f3ec:	d0fa      	beq.n	800f3e4 <_dtoa_r+0xbd0>
 800f3ee:	e6e6      	b.n	800f1be <_dtoa_r+0x9aa>
 800f3f0:	9a06      	ldr	r2, [sp, #24]
 800f3f2:	429a      	cmp	r2, r3
 800f3f4:	d193      	bne.n	800f31e <_dtoa_r+0xb0a>
 800f3f6:	9b03      	ldr	r3, [sp, #12]
 800f3f8:	3301      	adds	r3, #1
 800f3fa:	9303      	str	r3, [sp, #12]
 800f3fc:	2331      	movs	r3, #49	; 0x31
 800f3fe:	7013      	strb	r3, [r2, #0]
 800f400:	e6dd      	b.n	800f1be <_dtoa_r+0x9aa>
 800f402:	4b09      	ldr	r3, [pc, #36]	; (800f428 <_dtoa_r+0xc14>)
 800f404:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800f406:	9306      	str	r3, [sp, #24]
 800f408:	4b08      	ldr	r3, [pc, #32]	; (800f42c <_dtoa_r+0xc18>)
 800f40a:	2a00      	cmp	r2, #0
 800f40c:	d001      	beq.n	800f412 <_dtoa_r+0xbfe>
 800f40e:	f7ff fa49 	bl	800e8a4 <_dtoa_r+0x90>
 800f412:	f7ff fa49 	bl	800e8a8 <_dtoa_r+0x94>
 800f416:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f418:	2b00      	cmp	r3, #0
 800f41a:	dcb6      	bgt.n	800f38a <_dtoa_r+0xb76>
 800f41c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f41e:	2b02      	cmp	r3, #2
 800f420:	dd00      	ble.n	800f424 <_dtoa_r+0xc10>
 800f422:	e6b6      	b.n	800f192 <_dtoa_r+0x97e>
 800f424:	e7b1      	b.n	800f38a <_dtoa_r+0xb76>
 800f426:	46c0      	nop			; (mov r8, r8)
 800f428:	0801152c 	.word	0x0801152c
 800f42c:	08011534 	.word	0x08011534

0800f430 <_free_r>:
 800f430:	b570      	push	{r4, r5, r6, lr}
 800f432:	0005      	movs	r5, r0
 800f434:	2900      	cmp	r1, #0
 800f436:	d010      	beq.n	800f45a <_free_r+0x2a>
 800f438:	1f0c      	subs	r4, r1, #4
 800f43a:	6823      	ldr	r3, [r4, #0]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	da00      	bge.n	800f442 <_free_r+0x12>
 800f440:	18e4      	adds	r4, r4, r3
 800f442:	0028      	movs	r0, r5
 800f444:	f000 f8ec 	bl	800f620 <__malloc_lock>
 800f448:	4a1d      	ldr	r2, [pc, #116]	; (800f4c0 <_free_r+0x90>)
 800f44a:	6813      	ldr	r3, [r2, #0]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d105      	bne.n	800f45c <_free_r+0x2c>
 800f450:	6063      	str	r3, [r4, #4]
 800f452:	6014      	str	r4, [r2, #0]
 800f454:	0028      	movs	r0, r5
 800f456:	f000 f8eb 	bl	800f630 <__malloc_unlock>
 800f45a:	bd70      	pop	{r4, r5, r6, pc}
 800f45c:	42a3      	cmp	r3, r4
 800f45e:	d908      	bls.n	800f472 <_free_r+0x42>
 800f460:	6820      	ldr	r0, [r4, #0]
 800f462:	1821      	adds	r1, r4, r0
 800f464:	428b      	cmp	r3, r1
 800f466:	d1f3      	bne.n	800f450 <_free_r+0x20>
 800f468:	6819      	ldr	r1, [r3, #0]
 800f46a:	685b      	ldr	r3, [r3, #4]
 800f46c:	1809      	adds	r1, r1, r0
 800f46e:	6021      	str	r1, [r4, #0]
 800f470:	e7ee      	b.n	800f450 <_free_r+0x20>
 800f472:	001a      	movs	r2, r3
 800f474:	685b      	ldr	r3, [r3, #4]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d001      	beq.n	800f47e <_free_r+0x4e>
 800f47a:	42a3      	cmp	r3, r4
 800f47c:	d9f9      	bls.n	800f472 <_free_r+0x42>
 800f47e:	6811      	ldr	r1, [r2, #0]
 800f480:	1850      	adds	r0, r2, r1
 800f482:	42a0      	cmp	r0, r4
 800f484:	d10b      	bne.n	800f49e <_free_r+0x6e>
 800f486:	6820      	ldr	r0, [r4, #0]
 800f488:	1809      	adds	r1, r1, r0
 800f48a:	1850      	adds	r0, r2, r1
 800f48c:	6011      	str	r1, [r2, #0]
 800f48e:	4283      	cmp	r3, r0
 800f490:	d1e0      	bne.n	800f454 <_free_r+0x24>
 800f492:	6818      	ldr	r0, [r3, #0]
 800f494:	685b      	ldr	r3, [r3, #4]
 800f496:	1841      	adds	r1, r0, r1
 800f498:	6011      	str	r1, [r2, #0]
 800f49a:	6053      	str	r3, [r2, #4]
 800f49c:	e7da      	b.n	800f454 <_free_r+0x24>
 800f49e:	42a0      	cmp	r0, r4
 800f4a0:	d902      	bls.n	800f4a8 <_free_r+0x78>
 800f4a2:	230c      	movs	r3, #12
 800f4a4:	602b      	str	r3, [r5, #0]
 800f4a6:	e7d5      	b.n	800f454 <_free_r+0x24>
 800f4a8:	6820      	ldr	r0, [r4, #0]
 800f4aa:	1821      	adds	r1, r4, r0
 800f4ac:	428b      	cmp	r3, r1
 800f4ae:	d103      	bne.n	800f4b8 <_free_r+0x88>
 800f4b0:	6819      	ldr	r1, [r3, #0]
 800f4b2:	685b      	ldr	r3, [r3, #4]
 800f4b4:	1809      	adds	r1, r1, r0
 800f4b6:	6021      	str	r1, [r4, #0]
 800f4b8:	6063      	str	r3, [r4, #4]
 800f4ba:	6054      	str	r4, [r2, #4]
 800f4bc:	e7ca      	b.n	800f454 <_free_r+0x24>
 800f4be:	46c0      	nop			; (mov r8, r8)
 800f4c0:	20000ce0 	.word	0x20000ce0

0800f4c4 <malloc>:
 800f4c4:	b510      	push	{r4, lr}
 800f4c6:	4b03      	ldr	r3, [pc, #12]	; (800f4d4 <malloc+0x10>)
 800f4c8:	0001      	movs	r1, r0
 800f4ca:	6818      	ldr	r0, [r3, #0]
 800f4cc:	f000 f826 	bl	800f51c <_malloc_r>
 800f4d0:	bd10      	pop	{r4, pc}
 800f4d2:	46c0      	nop			; (mov r8, r8)
 800f4d4:	20000098 	.word	0x20000098

0800f4d8 <sbrk_aligned>:
 800f4d8:	b570      	push	{r4, r5, r6, lr}
 800f4da:	4e0f      	ldr	r6, [pc, #60]	; (800f518 <sbrk_aligned+0x40>)
 800f4dc:	000d      	movs	r5, r1
 800f4de:	6831      	ldr	r1, [r6, #0]
 800f4e0:	0004      	movs	r4, r0
 800f4e2:	2900      	cmp	r1, #0
 800f4e4:	d102      	bne.n	800f4ec <sbrk_aligned+0x14>
 800f4e6:	f000 fe49 	bl	801017c <_sbrk_r>
 800f4ea:	6030      	str	r0, [r6, #0]
 800f4ec:	0029      	movs	r1, r5
 800f4ee:	0020      	movs	r0, r4
 800f4f0:	f000 fe44 	bl	801017c <_sbrk_r>
 800f4f4:	1c43      	adds	r3, r0, #1
 800f4f6:	d00a      	beq.n	800f50e <sbrk_aligned+0x36>
 800f4f8:	2303      	movs	r3, #3
 800f4fa:	1cc5      	adds	r5, r0, #3
 800f4fc:	439d      	bics	r5, r3
 800f4fe:	42a8      	cmp	r0, r5
 800f500:	d007      	beq.n	800f512 <sbrk_aligned+0x3a>
 800f502:	1a29      	subs	r1, r5, r0
 800f504:	0020      	movs	r0, r4
 800f506:	f000 fe39 	bl	801017c <_sbrk_r>
 800f50a:	3001      	adds	r0, #1
 800f50c:	d101      	bne.n	800f512 <sbrk_aligned+0x3a>
 800f50e:	2501      	movs	r5, #1
 800f510:	426d      	negs	r5, r5
 800f512:	0028      	movs	r0, r5
 800f514:	bd70      	pop	{r4, r5, r6, pc}
 800f516:	46c0      	nop			; (mov r8, r8)
 800f518:	20000ce4 	.word	0x20000ce4

0800f51c <_malloc_r>:
 800f51c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f51e:	2203      	movs	r2, #3
 800f520:	1ccb      	adds	r3, r1, #3
 800f522:	4393      	bics	r3, r2
 800f524:	3308      	adds	r3, #8
 800f526:	0006      	movs	r6, r0
 800f528:	001f      	movs	r7, r3
 800f52a:	2b0c      	cmp	r3, #12
 800f52c:	d238      	bcs.n	800f5a0 <_malloc_r+0x84>
 800f52e:	270c      	movs	r7, #12
 800f530:	42b9      	cmp	r1, r7
 800f532:	d837      	bhi.n	800f5a4 <_malloc_r+0x88>
 800f534:	0030      	movs	r0, r6
 800f536:	f000 f873 	bl	800f620 <__malloc_lock>
 800f53a:	4b38      	ldr	r3, [pc, #224]	; (800f61c <_malloc_r+0x100>)
 800f53c:	9300      	str	r3, [sp, #0]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	001c      	movs	r4, r3
 800f542:	2c00      	cmp	r4, #0
 800f544:	d133      	bne.n	800f5ae <_malloc_r+0x92>
 800f546:	0039      	movs	r1, r7
 800f548:	0030      	movs	r0, r6
 800f54a:	f7ff ffc5 	bl	800f4d8 <sbrk_aligned>
 800f54e:	0004      	movs	r4, r0
 800f550:	1c43      	adds	r3, r0, #1
 800f552:	d15e      	bne.n	800f612 <_malloc_r+0xf6>
 800f554:	9b00      	ldr	r3, [sp, #0]
 800f556:	681c      	ldr	r4, [r3, #0]
 800f558:	0025      	movs	r5, r4
 800f55a:	2d00      	cmp	r5, #0
 800f55c:	d14e      	bne.n	800f5fc <_malloc_r+0xe0>
 800f55e:	2c00      	cmp	r4, #0
 800f560:	d051      	beq.n	800f606 <_malloc_r+0xea>
 800f562:	6823      	ldr	r3, [r4, #0]
 800f564:	0029      	movs	r1, r5
 800f566:	18e3      	adds	r3, r4, r3
 800f568:	0030      	movs	r0, r6
 800f56a:	9301      	str	r3, [sp, #4]
 800f56c:	f000 fe06 	bl	801017c <_sbrk_r>
 800f570:	9b01      	ldr	r3, [sp, #4]
 800f572:	4283      	cmp	r3, r0
 800f574:	d147      	bne.n	800f606 <_malloc_r+0xea>
 800f576:	6823      	ldr	r3, [r4, #0]
 800f578:	0030      	movs	r0, r6
 800f57a:	1aff      	subs	r7, r7, r3
 800f57c:	0039      	movs	r1, r7
 800f57e:	f7ff ffab 	bl	800f4d8 <sbrk_aligned>
 800f582:	3001      	adds	r0, #1
 800f584:	d03f      	beq.n	800f606 <_malloc_r+0xea>
 800f586:	6823      	ldr	r3, [r4, #0]
 800f588:	19db      	adds	r3, r3, r7
 800f58a:	6023      	str	r3, [r4, #0]
 800f58c:	9b00      	ldr	r3, [sp, #0]
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	2b00      	cmp	r3, #0
 800f592:	d040      	beq.n	800f616 <_malloc_r+0xfa>
 800f594:	685a      	ldr	r2, [r3, #4]
 800f596:	42a2      	cmp	r2, r4
 800f598:	d133      	bne.n	800f602 <_malloc_r+0xe6>
 800f59a:	2200      	movs	r2, #0
 800f59c:	605a      	str	r2, [r3, #4]
 800f59e:	e014      	b.n	800f5ca <_malloc_r+0xae>
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	dac5      	bge.n	800f530 <_malloc_r+0x14>
 800f5a4:	230c      	movs	r3, #12
 800f5a6:	2500      	movs	r5, #0
 800f5a8:	6033      	str	r3, [r6, #0]
 800f5aa:	0028      	movs	r0, r5
 800f5ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f5ae:	6821      	ldr	r1, [r4, #0]
 800f5b0:	1bc9      	subs	r1, r1, r7
 800f5b2:	d420      	bmi.n	800f5f6 <_malloc_r+0xda>
 800f5b4:	290b      	cmp	r1, #11
 800f5b6:	d918      	bls.n	800f5ea <_malloc_r+0xce>
 800f5b8:	19e2      	adds	r2, r4, r7
 800f5ba:	6027      	str	r7, [r4, #0]
 800f5bc:	42a3      	cmp	r3, r4
 800f5be:	d112      	bne.n	800f5e6 <_malloc_r+0xca>
 800f5c0:	9b00      	ldr	r3, [sp, #0]
 800f5c2:	601a      	str	r2, [r3, #0]
 800f5c4:	6863      	ldr	r3, [r4, #4]
 800f5c6:	6011      	str	r1, [r2, #0]
 800f5c8:	6053      	str	r3, [r2, #4]
 800f5ca:	0030      	movs	r0, r6
 800f5cc:	0025      	movs	r5, r4
 800f5ce:	f000 f82f 	bl	800f630 <__malloc_unlock>
 800f5d2:	2207      	movs	r2, #7
 800f5d4:	350b      	adds	r5, #11
 800f5d6:	1d23      	adds	r3, r4, #4
 800f5d8:	4395      	bics	r5, r2
 800f5da:	1aea      	subs	r2, r5, r3
 800f5dc:	429d      	cmp	r5, r3
 800f5de:	d0e4      	beq.n	800f5aa <_malloc_r+0x8e>
 800f5e0:	1b5b      	subs	r3, r3, r5
 800f5e2:	50a3      	str	r3, [r4, r2]
 800f5e4:	e7e1      	b.n	800f5aa <_malloc_r+0x8e>
 800f5e6:	605a      	str	r2, [r3, #4]
 800f5e8:	e7ec      	b.n	800f5c4 <_malloc_r+0xa8>
 800f5ea:	6862      	ldr	r2, [r4, #4]
 800f5ec:	42a3      	cmp	r3, r4
 800f5ee:	d1d5      	bne.n	800f59c <_malloc_r+0x80>
 800f5f0:	9b00      	ldr	r3, [sp, #0]
 800f5f2:	601a      	str	r2, [r3, #0]
 800f5f4:	e7e9      	b.n	800f5ca <_malloc_r+0xae>
 800f5f6:	0023      	movs	r3, r4
 800f5f8:	6864      	ldr	r4, [r4, #4]
 800f5fa:	e7a2      	b.n	800f542 <_malloc_r+0x26>
 800f5fc:	002c      	movs	r4, r5
 800f5fe:	686d      	ldr	r5, [r5, #4]
 800f600:	e7ab      	b.n	800f55a <_malloc_r+0x3e>
 800f602:	0013      	movs	r3, r2
 800f604:	e7c4      	b.n	800f590 <_malloc_r+0x74>
 800f606:	230c      	movs	r3, #12
 800f608:	0030      	movs	r0, r6
 800f60a:	6033      	str	r3, [r6, #0]
 800f60c:	f000 f810 	bl	800f630 <__malloc_unlock>
 800f610:	e7cb      	b.n	800f5aa <_malloc_r+0x8e>
 800f612:	6027      	str	r7, [r4, #0]
 800f614:	e7d9      	b.n	800f5ca <_malloc_r+0xae>
 800f616:	605b      	str	r3, [r3, #4]
 800f618:	deff      	udf	#255	; 0xff
 800f61a:	46c0      	nop			; (mov r8, r8)
 800f61c:	20000ce0 	.word	0x20000ce0

0800f620 <__malloc_lock>:
 800f620:	b510      	push	{r4, lr}
 800f622:	4802      	ldr	r0, [pc, #8]	; (800f62c <__malloc_lock+0xc>)
 800f624:	f7ff f851 	bl	800e6ca <__retarget_lock_acquire_recursive>
 800f628:	bd10      	pop	{r4, pc}
 800f62a:	46c0      	nop			; (mov r8, r8)
 800f62c:	20000cdc 	.word	0x20000cdc

0800f630 <__malloc_unlock>:
 800f630:	b510      	push	{r4, lr}
 800f632:	4802      	ldr	r0, [pc, #8]	; (800f63c <__malloc_unlock+0xc>)
 800f634:	f7ff f84a 	bl	800e6cc <__retarget_lock_release_recursive>
 800f638:	bd10      	pop	{r4, pc}
 800f63a:	46c0      	nop			; (mov r8, r8)
 800f63c:	20000cdc 	.word	0x20000cdc

0800f640 <_Balloc>:
 800f640:	b570      	push	{r4, r5, r6, lr}
 800f642:	69c5      	ldr	r5, [r0, #28]
 800f644:	0006      	movs	r6, r0
 800f646:	000c      	movs	r4, r1
 800f648:	2d00      	cmp	r5, #0
 800f64a:	d10e      	bne.n	800f66a <_Balloc+0x2a>
 800f64c:	2010      	movs	r0, #16
 800f64e:	f7ff ff39 	bl	800f4c4 <malloc>
 800f652:	1e02      	subs	r2, r0, #0
 800f654:	61f0      	str	r0, [r6, #28]
 800f656:	d104      	bne.n	800f662 <_Balloc+0x22>
 800f658:	216b      	movs	r1, #107	; 0x6b
 800f65a:	4b19      	ldr	r3, [pc, #100]	; (800f6c0 <_Balloc+0x80>)
 800f65c:	4819      	ldr	r0, [pc, #100]	; (800f6c4 <_Balloc+0x84>)
 800f65e:	f000 fd9f 	bl	80101a0 <__assert_func>
 800f662:	6045      	str	r5, [r0, #4]
 800f664:	6085      	str	r5, [r0, #8]
 800f666:	6005      	str	r5, [r0, #0]
 800f668:	60c5      	str	r5, [r0, #12]
 800f66a:	69f5      	ldr	r5, [r6, #28]
 800f66c:	68eb      	ldr	r3, [r5, #12]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d013      	beq.n	800f69a <_Balloc+0x5a>
 800f672:	69f3      	ldr	r3, [r6, #28]
 800f674:	00a2      	lsls	r2, r4, #2
 800f676:	68db      	ldr	r3, [r3, #12]
 800f678:	189b      	adds	r3, r3, r2
 800f67a:	6818      	ldr	r0, [r3, #0]
 800f67c:	2800      	cmp	r0, #0
 800f67e:	d118      	bne.n	800f6b2 <_Balloc+0x72>
 800f680:	2101      	movs	r1, #1
 800f682:	000d      	movs	r5, r1
 800f684:	40a5      	lsls	r5, r4
 800f686:	1d6a      	adds	r2, r5, #5
 800f688:	0030      	movs	r0, r6
 800f68a:	0092      	lsls	r2, r2, #2
 800f68c:	f000 fda6 	bl	80101dc <_calloc_r>
 800f690:	2800      	cmp	r0, #0
 800f692:	d00c      	beq.n	800f6ae <_Balloc+0x6e>
 800f694:	6044      	str	r4, [r0, #4]
 800f696:	6085      	str	r5, [r0, #8]
 800f698:	e00d      	b.n	800f6b6 <_Balloc+0x76>
 800f69a:	2221      	movs	r2, #33	; 0x21
 800f69c:	2104      	movs	r1, #4
 800f69e:	0030      	movs	r0, r6
 800f6a0:	f000 fd9c 	bl	80101dc <_calloc_r>
 800f6a4:	69f3      	ldr	r3, [r6, #28]
 800f6a6:	60e8      	str	r0, [r5, #12]
 800f6a8:	68db      	ldr	r3, [r3, #12]
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d1e1      	bne.n	800f672 <_Balloc+0x32>
 800f6ae:	2000      	movs	r0, #0
 800f6b0:	bd70      	pop	{r4, r5, r6, pc}
 800f6b2:	6802      	ldr	r2, [r0, #0]
 800f6b4:	601a      	str	r2, [r3, #0]
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	6103      	str	r3, [r0, #16]
 800f6ba:	60c3      	str	r3, [r0, #12]
 800f6bc:	e7f8      	b.n	800f6b0 <_Balloc+0x70>
 800f6be:	46c0      	nop			; (mov r8, r8)
 800f6c0:	08011539 	.word	0x08011539
 800f6c4:	080115b9 	.word	0x080115b9

0800f6c8 <_Bfree>:
 800f6c8:	b570      	push	{r4, r5, r6, lr}
 800f6ca:	69c6      	ldr	r6, [r0, #28]
 800f6cc:	0005      	movs	r5, r0
 800f6ce:	000c      	movs	r4, r1
 800f6d0:	2e00      	cmp	r6, #0
 800f6d2:	d10e      	bne.n	800f6f2 <_Bfree+0x2a>
 800f6d4:	2010      	movs	r0, #16
 800f6d6:	f7ff fef5 	bl	800f4c4 <malloc>
 800f6da:	1e02      	subs	r2, r0, #0
 800f6dc:	61e8      	str	r0, [r5, #28]
 800f6de:	d104      	bne.n	800f6ea <_Bfree+0x22>
 800f6e0:	218f      	movs	r1, #143	; 0x8f
 800f6e2:	4b09      	ldr	r3, [pc, #36]	; (800f708 <_Bfree+0x40>)
 800f6e4:	4809      	ldr	r0, [pc, #36]	; (800f70c <_Bfree+0x44>)
 800f6e6:	f000 fd5b 	bl	80101a0 <__assert_func>
 800f6ea:	6046      	str	r6, [r0, #4]
 800f6ec:	6086      	str	r6, [r0, #8]
 800f6ee:	6006      	str	r6, [r0, #0]
 800f6f0:	60c6      	str	r6, [r0, #12]
 800f6f2:	2c00      	cmp	r4, #0
 800f6f4:	d007      	beq.n	800f706 <_Bfree+0x3e>
 800f6f6:	69eb      	ldr	r3, [r5, #28]
 800f6f8:	6862      	ldr	r2, [r4, #4]
 800f6fa:	68db      	ldr	r3, [r3, #12]
 800f6fc:	0092      	lsls	r2, r2, #2
 800f6fe:	189b      	adds	r3, r3, r2
 800f700:	681a      	ldr	r2, [r3, #0]
 800f702:	6022      	str	r2, [r4, #0]
 800f704:	601c      	str	r4, [r3, #0]
 800f706:	bd70      	pop	{r4, r5, r6, pc}
 800f708:	08011539 	.word	0x08011539
 800f70c:	080115b9 	.word	0x080115b9

0800f710 <__multadd>:
 800f710:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f712:	000e      	movs	r6, r1
 800f714:	9001      	str	r0, [sp, #4]
 800f716:	000c      	movs	r4, r1
 800f718:	001d      	movs	r5, r3
 800f71a:	2000      	movs	r0, #0
 800f71c:	690f      	ldr	r7, [r1, #16]
 800f71e:	3614      	adds	r6, #20
 800f720:	6833      	ldr	r3, [r6, #0]
 800f722:	3001      	adds	r0, #1
 800f724:	b299      	uxth	r1, r3
 800f726:	4351      	muls	r1, r2
 800f728:	0c1b      	lsrs	r3, r3, #16
 800f72a:	4353      	muls	r3, r2
 800f72c:	1949      	adds	r1, r1, r5
 800f72e:	0c0d      	lsrs	r5, r1, #16
 800f730:	195b      	adds	r3, r3, r5
 800f732:	0c1d      	lsrs	r5, r3, #16
 800f734:	b289      	uxth	r1, r1
 800f736:	041b      	lsls	r3, r3, #16
 800f738:	185b      	adds	r3, r3, r1
 800f73a:	c608      	stmia	r6!, {r3}
 800f73c:	4287      	cmp	r7, r0
 800f73e:	dcef      	bgt.n	800f720 <__multadd+0x10>
 800f740:	2d00      	cmp	r5, #0
 800f742:	d022      	beq.n	800f78a <__multadd+0x7a>
 800f744:	68a3      	ldr	r3, [r4, #8]
 800f746:	42bb      	cmp	r3, r7
 800f748:	dc19      	bgt.n	800f77e <__multadd+0x6e>
 800f74a:	6861      	ldr	r1, [r4, #4]
 800f74c:	9801      	ldr	r0, [sp, #4]
 800f74e:	3101      	adds	r1, #1
 800f750:	f7ff ff76 	bl	800f640 <_Balloc>
 800f754:	1e06      	subs	r6, r0, #0
 800f756:	d105      	bne.n	800f764 <__multadd+0x54>
 800f758:	0032      	movs	r2, r6
 800f75a:	21ba      	movs	r1, #186	; 0xba
 800f75c:	4b0c      	ldr	r3, [pc, #48]	; (800f790 <__multadd+0x80>)
 800f75e:	480d      	ldr	r0, [pc, #52]	; (800f794 <__multadd+0x84>)
 800f760:	f000 fd1e 	bl	80101a0 <__assert_func>
 800f764:	0021      	movs	r1, r4
 800f766:	6922      	ldr	r2, [r4, #16]
 800f768:	310c      	adds	r1, #12
 800f76a:	3202      	adds	r2, #2
 800f76c:	0092      	lsls	r2, r2, #2
 800f76e:	300c      	adds	r0, #12
 800f770:	f7fe ffb8 	bl	800e6e4 <memcpy>
 800f774:	0021      	movs	r1, r4
 800f776:	9801      	ldr	r0, [sp, #4]
 800f778:	f7ff ffa6 	bl	800f6c8 <_Bfree>
 800f77c:	0034      	movs	r4, r6
 800f77e:	1d3b      	adds	r3, r7, #4
 800f780:	009b      	lsls	r3, r3, #2
 800f782:	18e3      	adds	r3, r4, r3
 800f784:	605d      	str	r5, [r3, #4]
 800f786:	1c7b      	adds	r3, r7, #1
 800f788:	6123      	str	r3, [r4, #16]
 800f78a:	0020      	movs	r0, r4
 800f78c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f78e:	46c0      	nop			; (mov r8, r8)
 800f790:	080115a8 	.word	0x080115a8
 800f794:	080115b9 	.word	0x080115b9

0800f798 <__hi0bits>:
 800f798:	0003      	movs	r3, r0
 800f79a:	0c02      	lsrs	r2, r0, #16
 800f79c:	2000      	movs	r0, #0
 800f79e:	4282      	cmp	r2, r0
 800f7a0:	d101      	bne.n	800f7a6 <__hi0bits+0xe>
 800f7a2:	041b      	lsls	r3, r3, #16
 800f7a4:	3010      	adds	r0, #16
 800f7a6:	0e1a      	lsrs	r2, r3, #24
 800f7a8:	d101      	bne.n	800f7ae <__hi0bits+0x16>
 800f7aa:	3008      	adds	r0, #8
 800f7ac:	021b      	lsls	r3, r3, #8
 800f7ae:	0f1a      	lsrs	r2, r3, #28
 800f7b0:	d101      	bne.n	800f7b6 <__hi0bits+0x1e>
 800f7b2:	3004      	adds	r0, #4
 800f7b4:	011b      	lsls	r3, r3, #4
 800f7b6:	0f9a      	lsrs	r2, r3, #30
 800f7b8:	d101      	bne.n	800f7be <__hi0bits+0x26>
 800f7ba:	3002      	adds	r0, #2
 800f7bc:	009b      	lsls	r3, r3, #2
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	db03      	blt.n	800f7ca <__hi0bits+0x32>
 800f7c2:	3001      	adds	r0, #1
 800f7c4:	005b      	lsls	r3, r3, #1
 800f7c6:	d400      	bmi.n	800f7ca <__hi0bits+0x32>
 800f7c8:	2020      	movs	r0, #32
 800f7ca:	4770      	bx	lr

0800f7cc <__lo0bits>:
 800f7cc:	6803      	ldr	r3, [r0, #0]
 800f7ce:	0001      	movs	r1, r0
 800f7d0:	2207      	movs	r2, #7
 800f7d2:	0018      	movs	r0, r3
 800f7d4:	4010      	ands	r0, r2
 800f7d6:	4213      	tst	r3, r2
 800f7d8:	d00d      	beq.n	800f7f6 <__lo0bits+0x2a>
 800f7da:	3a06      	subs	r2, #6
 800f7dc:	2000      	movs	r0, #0
 800f7de:	4213      	tst	r3, r2
 800f7e0:	d105      	bne.n	800f7ee <__lo0bits+0x22>
 800f7e2:	3002      	adds	r0, #2
 800f7e4:	4203      	tst	r3, r0
 800f7e6:	d003      	beq.n	800f7f0 <__lo0bits+0x24>
 800f7e8:	40d3      	lsrs	r3, r2
 800f7ea:	0010      	movs	r0, r2
 800f7ec:	600b      	str	r3, [r1, #0]
 800f7ee:	4770      	bx	lr
 800f7f0:	089b      	lsrs	r3, r3, #2
 800f7f2:	600b      	str	r3, [r1, #0]
 800f7f4:	e7fb      	b.n	800f7ee <__lo0bits+0x22>
 800f7f6:	b29a      	uxth	r2, r3
 800f7f8:	2a00      	cmp	r2, #0
 800f7fa:	d101      	bne.n	800f800 <__lo0bits+0x34>
 800f7fc:	2010      	movs	r0, #16
 800f7fe:	0c1b      	lsrs	r3, r3, #16
 800f800:	b2da      	uxtb	r2, r3
 800f802:	2a00      	cmp	r2, #0
 800f804:	d101      	bne.n	800f80a <__lo0bits+0x3e>
 800f806:	3008      	adds	r0, #8
 800f808:	0a1b      	lsrs	r3, r3, #8
 800f80a:	071a      	lsls	r2, r3, #28
 800f80c:	d101      	bne.n	800f812 <__lo0bits+0x46>
 800f80e:	3004      	adds	r0, #4
 800f810:	091b      	lsrs	r3, r3, #4
 800f812:	079a      	lsls	r2, r3, #30
 800f814:	d101      	bne.n	800f81a <__lo0bits+0x4e>
 800f816:	3002      	adds	r0, #2
 800f818:	089b      	lsrs	r3, r3, #2
 800f81a:	07da      	lsls	r2, r3, #31
 800f81c:	d4e9      	bmi.n	800f7f2 <__lo0bits+0x26>
 800f81e:	3001      	adds	r0, #1
 800f820:	085b      	lsrs	r3, r3, #1
 800f822:	d1e6      	bne.n	800f7f2 <__lo0bits+0x26>
 800f824:	2020      	movs	r0, #32
 800f826:	e7e2      	b.n	800f7ee <__lo0bits+0x22>

0800f828 <__i2b>:
 800f828:	b510      	push	{r4, lr}
 800f82a:	000c      	movs	r4, r1
 800f82c:	2101      	movs	r1, #1
 800f82e:	f7ff ff07 	bl	800f640 <_Balloc>
 800f832:	2800      	cmp	r0, #0
 800f834:	d107      	bne.n	800f846 <__i2b+0x1e>
 800f836:	2146      	movs	r1, #70	; 0x46
 800f838:	4c05      	ldr	r4, [pc, #20]	; (800f850 <__i2b+0x28>)
 800f83a:	0002      	movs	r2, r0
 800f83c:	4b05      	ldr	r3, [pc, #20]	; (800f854 <__i2b+0x2c>)
 800f83e:	0020      	movs	r0, r4
 800f840:	31ff      	adds	r1, #255	; 0xff
 800f842:	f000 fcad 	bl	80101a0 <__assert_func>
 800f846:	2301      	movs	r3, #1
 800f848:	6144      	str	r4, [r0, #20]
 800f84a:	6103      	str	r3, [r0, #16]
 800f84c:	bd10      	pop	{r4, pc}
 800f84e:	46c0      	nop			; (mov r8, r8)
 800f850:	080115b9 	.word	0x080115b9
 800f854:	080115a8 	.word	0x080115a8

0800f858 <__multiply>:
 800f858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f85a:	0015      	movs	r5, r2
 800f85c:	690a      	ldr	r2, [r1, #16]
 800f85e:	692b      	ldr	r3, [r5, #16]
 800f860:	000c      	movs	r4, r1
 800f862:	b08b      	sub	sp, #44	; 0x2c
 800f864:	429a      	cmp	r2, r3
 800f866:	da01      	bge.n	800f86c <__multiply+0x14>
 800f868:	002c      	movs	r4, r5
 800f86a:	000d      	movs	r5, r1
 800f86c:	6927      	ldr	r7, [r4, #16]
 800f86e:	692e      	ldr	r6, [r5, #16]
 800f870:	6861      	ldr	r1, [r4, #4]
 800f872:	19bb      	adds	r3, r7, r6
 800f874:	9303      	str	r3, [sp, #12]
 800f876:	68a3      	ldr	r3, [r4, #8]
 800f878:	19ba      	adds	r2, r7, r6
 800f87a:	4293      	cmp	r3, r2
 800f87c:	da00      	bge.n	800f880 <__multiply+0x28>
 800f87e:	3101      	adds	r1, #1
 800f880:	f7ff fede 	bl	800f640 <_Balloc>
 800f884:	9002      	str	r0, [sp, #8]
 800f886:	2800      	cmp	r0, #0
 800f888:	d106      	bne.n	800f898 <__multiply+0x40>
 800f88a:	21b1      	movs	r1, #177	; 0xb1
 800f88c:	4b48      	ldr	r3, [pc, #288]	; (800f9b0 <__multiply+0x158>)
 800f88e:	4849      	ldr	r0, [pc, #292]	; (800f9b4 <__multiply+0x15c>)
 800f890:	9a02      	ldr	r2, [sp, #8]
 800f892:	0049      	lsls	r1, r1, #1
 800f894:	f000 fc84 	bl	80101a0 <__assert_func>
 800f898:	9b02      	ldr	r3, [sp, #8]
 800f89a:	2200      	movs	r2, #0
 800f89c:	3314      	adds	r3, #20
 800f89e:	469c      	mov	ip, r3
 800f8a0:	19bb      	adds	r3, r7, r6
 800f8a2:	009b      	lsls	r3, r3, #2
 800f8a4:	4463      	add	r3, ip
 800f8a6:	9304      	str	r3, [sp, #16]
 800f8a8:	4663      	mov	r3, ip
 800f8aa:	9904      	ldr	r1, [sp, #16]
 800f8ac:	428b      	cmp	r3, r1
 800f8ae:	d32a      	bcc.n	800f906 <__multiply+0xae>
 800f8b0:	0023      	movs	r3, r4
 800f8b2:	00bf      	lsls	r7, r7, #2
 800f8b4:	3314      	adds	r3, #20
 800f8b6:	3514      	adds	r5, #20
 800f8b8:	9308      	str	r3, [sp, #32]
 800f8ba:	00b6      	lsls	r6, r6, #2
 800f8bc:	19db      	adds	r3, r3, r7
 800f8be:	9305      	str	r3, [sp, #20]
 800f8c0:	19ab      	adds	r3, r5, r6
 800f8c2:	9309      	str	r3, [sp, #36]	; 0x24
 800f8c4:	2304      	movs	r3, #4
 800f8c6:	9306      	str	r3, [sp, #24]
 800f8c8:	0023      	movs	r3, r4
 800f8ca:	9a05      	ldr	r2, [sp, #20]
 800f8cc:	3315      	adds	r3, #21
 800f8ce:	9501      	str	r5, [sp, #4]
 800f8d0:	429a      	cmp	r2, r3
 800f8d2:	d305      	bcc.n	800f8e0 <__multiply+0x88>
 800f8d4:	1b13      	subs	r3, r2, r4
 800f8d6:	3b15      	subs	r3, #21
 800f8d8:	089b      	lsrs	r3, r3, #2
 800f8da:	3301      	adds	r3, #1
 800f8dc:	009b      	lsls	r3, r3, #2
 800f8de:	9306      	str	r3, [sp, #24]
 800f8e0:	9b01      	ldr	r3, [sp, #4]
 800f8e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f8e4:	4293      	cmp	r3, r2
 800f8e6:	d310      	bcc.n	800f90a <__multiply+0xb2>
 800f8e8:	9b03      	ldr	r3, [sp, #12]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	dd05      	ble.n	800f8fa <__multiply+0xa2>
 800f8ee:	9b04      	ldr	r3, [sp, #16]
 800f8f0:	3b04      	subs	r3, #4
 800f8f2:	9304      	str	r3, [sp, #16]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d056      	beq.n	800f9a8 <__multiply+0x150>
 800f8fa:	9b02      	ldr	r3, [sp, #8]
 800f8fc:	9a03      	ldr	r2, [sp, #12]
 800f8fe:	0018      	movs	r0, r3
 800f900:	611a      	str	r2, [r3, #16]
 800f902:	b00b      	add	sp, #44	; 0x2c
 800f904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f906:	c304      	stmia	r3!, {r2}
 800f908:	e7cf      	b.n	800f8aa <__multiply+0x52>
 800f90a:	9b01      	ldr	r3, [sp, #4]
 800f90c:	6818      	ldr	r0, [r3, #0]
 800f90e:	b280      	uxth	r0, r0
 800f910:	2800      	cmp	r0, #0
 800f912:	d01e      	beq.n	800f952 <__multiply+0xfa>
 800f914:	4667      	mov	r7, ip
 800f916:	2500      	movs	r5, #0
 800f918:	9e08      	ldr	r6, [sp, #32]
 800f91a:	ce02      	ldmia	r6!, {r1}
 800f91c:	683b      	ldr	r3, [r7, #0]
 800f91e:	9307      	str	r3, [sp, #28]
 800f920:	b28b      	uxth	r3, r1
 800f922:	4343      	muls	r3, r0
 800f924:	001a      	movs	r2, r3
 800f926:	466b      	mov	r3, sp
 800f928:	8b9b      	ldrh	r3, [r3, #28]
 800f92a:	18d3      	adds	r3, r2, r3
 800f92c:	195b      	adds	r3, r3, r5
 800f92e:	0c0d      	lsrs	r5, r1, #16
 800f930:	4345      	muls	r5, r0
 800f932:	9a07      	ldr	r2, [sp, #28]
 800f934:	0c11      	lsrs	r1, r2, #16
 800f936:	1869      	adds	r1, r5, r1
 800f938:	0c1a      	lsrs	r2, r3, #16
 800f93a:	188a      	adds	r2, r1, r2
 800f93c:	b29b      	uxth	r3, r3
 800f93e:	0c15      	lsrs	r5, r2, #16
 800f940:	0412      	lsls	r2, r2, #16
 800f942:	431a      	orrs	r2, r3
 800f944:	9b05      	ldr	r3, [sp, #20]
 800f946:	c704      	stmia	r7!, {r2}
 800f948:	42b3      	cmp	r3, r6
 800f94a:	d8e6      	bhi.n	800f91a <__multiply+0xc2>
 800f94c:	4663      	mov	r3, ip
 800f94e:	9a06      	ldr	r2, [sp, #24]
 800f950:	509d      	str	r5, [r3, r2]
 800f952:	9b01      	ldr	r3, [sp, #4]
 800f954:	6818      	ldr	r0, [r3, #0]
 800f956:	0c00      	lsrs	r0, r0, #16
 800f958:	d020      	beq.n	800f99c <__multiply+0x144>
 800f95a:	4663      	mov	r3, ip
 800f95c:	0025      	movs	r5, r4
 800f95e:	4661      	mov	r1, ip
 800f960:	2700      	movs	r7, #0
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	3514      	adds	r5, #20
 800f966:	682a      	ldr	r2, [r5, #0]
 800f968:	680e      	ldr	r6, [r1, #0]
 800f96a:	b292      	uxth	r2, r2
 800f96c:	4342      	muls	r2, r0
 800f96e:	0c36      	lsrs	r6, r6, #16
 800f970:	1992      	adds	r2, r2, r6
 800f972:	19d2      	adds	r2, r2, r7
 800f974:	0416      	lsls	r6, r2, #16
 800f976:	b29b      	uxth	r3, r3
 800f978:	431e      	orrs	r6, r3
 800f97a:	600e      	str	r6, [r1, #0]
 800f97c:	cd40      	ldmia	r5!, {r6}
 800f97e:	684b      	ldr	r3, [r1, #4]
 800f980:	0c36      	lsrs	r6, r6, #16
 800f982:	4346      	muls	r6, r0
 800f984:	b29b      	uxth	r3, r3
 800f986:	0c12      	lsrs	r2, r2, #16
 800f988:	18f3      	adds	r3, r6, r3
 800f98a:	189b      	adds	r3, r3, r2
 800f98c:	9a05      	ldr	r2, [sp, #20]
 800f98e:	0c1f      	lsrs	r7, r3, #16
 800f990:	3104      	adds	r1, #4
 800f992:	42aa      	cmp	r2, r5
 800f994:	d8e7      	bhi.n	800f966 <__multiply+0x10e>
 800f996:	4662      	mov	r2, ip
 800f998:	9906      	ldr	r1, [sp, #24]
 800f99a:	5053      	str	r3, [r2, r1]
 800f99c:	9b01      	ldr	r3, [sp, #4]
 800f99e:	3304      	adds	r3, #4
 800f9a0:	9301      	str	r3, [sp, #4]
 800f9a2:	2304      	movs	r3, #4
 800f9a4:	449c      	add	ip, r3
 800f9a6:	e79b      	b.n	800f8e0 <__multiply+0x88>
 800f9a8:	9b03      	ldr	r3, [sp, #12]
 800f9aa:	3b01      	subs	r3, #1
 800f9ac:	9303      	str	r3, [sp, #12]
 800f9ae:	e79b      	b.n	800f8e8 <__multiply+0x90>
 800f9b0:	080115a8 	.word	0x080115a8
 800f9b4:	080115b9 	.word	0x080115b9

0800f9b8 <__pow5mult>:
 800f9b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f9ba:	2303      	movs	r3, #3
 800f9bc:	0015      	movs	r5, r2
 800f9be:	0007      	movs	r7, r0
 800f9c0:	000e      	movs	r6, r1
 800f9c2:	401a      	ands	r2, r3
 800f9c4:	421d      	tst	r5, r3
 800f9c6:	d008      	beq.n	800f9da <__pow5mult+0x22>
 800f9c8:	4925      	ldr	r1, [pc, #148]	; (800fa60 <__pow5mult+0xa8>)
 800f9ca:	3a01      	subs	r2, #1
 800f9cc:	0092      	lsls	r2, r2, #2
 800f9ce:	5852      	ldr	r2, [r2, r1]
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	0031      	movs	r1, r6
 800f9d4:	f7ff fe9c 	bl	800f710 <__multadd>
 800f9d8:	0006      	movs	r6, r0
 800f9da:	10ad      	asrs	r5, r5, #2
 800f9dc:	d03d      	beq.n	800fa5a <__pow5mult+0xa2>
 800f9de:	69fc      	ldr	r4, [r7, #28]
 800f9e0:	2c00      	cmp	r4, #0
 800f9e2:	d10f      	bne.n	800fa04 <__pow5mult+0x4c>
 800f9e4:	2010      	movs	r0, #16
 800f9e6:	f7ff fd6d 	bl	800f4c4 <malloc>
 800f9ea:	1e02      	subs	r2, r0, #0
 800f9ec:	61f8      	str	r0, [r7, #28]
 800f9ee:	d105      	bne.n	800f9fc <__pow5mult+0x44>
 800f9f0:	21b4      	movs	r1, #180	; 0xb4
 800f9f2:	4b1c      	ldr	r3, [pc, #112]	; (800fa64 <__pow5mult+0xac>)
 800f9f4:	481c      	ldr	r0, [pc, #112]	; (800fa68 <__pow5mult+0xb0>)
 800f9f6:	31ff      	adds	r1, #255	; 0xff
 800f9f8:	f000 fbd2 	bl	80101a0 <__assert_func>
 800f9fc:	6044      	str	r4, [r0, #4]
 800f9fe:	6084      	str	r4, [r0, #8]
 800fa00:	6004      	str	r4, [r0, #0]
 800fa02:	60c4      	str	r4, [r0, #12]
 800fa04:	69fb      	ldr	r3, [r7, #28]
 800fa06:	689c      	ldr	r4, [r3, #8]
 800fa08:	9301      	str	r3, [sp, #4]
 800fa0a:	2c00      	cmp	r4, #0
 800fa0c:	d108      	bne.n	800fa20 <__pow5mult+0x68>
 800fa0e:	0038      	movs	r0, r7
 800fa10:	4916      	ldr	r1, [pc, #88]	; (800fa6c <__pow5mult+0xb4>)
 800fa12:	f7ff ff09 	bl	800f828 <__i2b>
 800fa16:	9b01      	ldr	r3, [sp, #4]
 800fa18:	0004      	movs	r4, r0
 800fa1a:	6098      	str	r0, [r3, #8]
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	6003      	str	r3, [r0, #0]
 800fa20:	2301      	movs	r3, #1
 800fa22:	421d      	tst	r5, r3
 800fa24:	d00a      	beq.n	800fa3c <__pow5mult+0x84>
 800fa26:	0031      	movs	r1, r6
 800fa28:	0022      	movs	r2, r4
 800fa2a:	0038      	movs	r0, r7
 800fa2c:	f7ff ff14 	bl	800f858 <__multiply>
 800fa30:	0031      	movs	r1, r6
 800fa32:	9001      	str	r0, [sp, #4]
 800fa34:	0038      	movs	r0, r7
 800fa36:	f7ff fe47 	bl	800f6c8 <_Bfree>
 800fa3a:	9e01      	ldr	r6, [sp, #4]
 800fa3c:	106d      	asrs	r5, r5, #1
 800fa3e:	d00c      	beq.n	800fa5a <__pow5mult+0xa2>
 800fa40:	6820      	ldr	r0, [r4, #0]
 800fa42:	2800      	cmp	r0, #0
 800fa44:	d107      	bne.n	800fa56 <__pow5mult+0x9e>
 800fa46:	0022      	movs	r2, r4
 800fa48:	0021      	movs	r1, r4
 800fa4a:	0038      	movs	r0, r7
 800fa4c:	f7ff ff04 	bl	800f858 <__multiply>
 800fa50:	2300      	movs	r3, #0
 800fa52:	6020      	str	r0, [r4, #0]
 800fa54:	6003      	str	r3, [r0, #0]
 800fa56:	0004      	movs	r4, r0
 800fa58:	e7e2      	b.n	800fa20 <__pow5mult+0x68>
 800fa5a:	0030      	movs	r0, r6
 800fa5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fa5e:	46c0      	nop			; (mov r8, r8)
 800fa60:	08011708 	.word	0x08011708
 800fa64:	08011539 	.word	0x08011539
 800fa68:	080115b9 	.word	0x080115b9
 800fa6c:	00000271 	.word	0x00000271

0800fa70 <__lshift>:
 800fa70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa72:	000c      	movs	r4, r1
 800fa74:	0017      	movs	r7, r2
 800fa76:	6923      	ldr	r3, [r4, #16]
 800fa78:	1155      	asrs	r5, r2, #5
 800fa7a:	b087      	sub	sp, #28
 800fa7c:	18eb      	adds	r3, r5, r3
 800fa7e:	9302      	str	r3, [sp, #8]
 800fa80:	3301      	adds	r3, #1
 800fa82:	9301      	str	r3, [sp, #4]
 800fa84:	6849      	ldr	r1, [r1, #4]
 800fa86:	68a3      	ldr	r3, [r4, #8]
 800fa88:	9004      	str	r0, [sp, #16]
 800fa8a:	9a01      	ldr	r2, [sp, #4]
 800fa8c:	4293      	cmp	r3, r2
 800fa8e:	db10      	blt.n	800fab2 <__lshift+0x42>
 800fa90:	9804      	ldr	r0, [sp, #16]
 800fa92:	f7ff fdd5 	bl	800f640 <_Balloc>
 800fa96:	2300      	movs	r3, #0
 800fa98:	0002      	movs	r2, r0
 800fa9a:	0006      	movs	r6, r0
 800fa9c:	0019      	movs	r1, r3
 800fa9e:	3214      	adds	r2, #20
 800faa0:	4298      	cmp	r0, r3
 800faa2:	d10c      	bne.n	800fabe <__lshift+0x4e>
 800faa4:	31df      	adds	r1, #223	; 0xdf
 800faa6:	0032      	movs	r2, r6
 800faa8:	4b26      	ldr	r3, [pc, #152]	; (800fb44 <__lshift+0xd4>)
 800faaa:	4827      	ldr	r0, [pc, #156]	; (800fb48 <__lshift+0xd8>)
 800faac:	31ff      	adds	r1, #255	; 0xff
 800faae:	f000 fb77 	bl	80101a0 <__assert_func>
 800fab2:	3101      	adds	r1, #1
 800fab4:	005b      	lsls	r3, r3, #1
 800fab6:	e7e8      	b.n	800fa8a <__lshift+0x1a>
 800fab8:	0098      	lsls	r0, r3, #2
 800faba:	5011      	str	r1, [r2, r0]
 800fabc:	3301      	adds	r3, #1
 800fabe:	42ab      	cmp	r3, r5
 800fac0:	dbfa      	blt.n	800fab8 <__lshift+0x48>
 800fac2:	43eb      	mvns	r3, r5
 800fac4:	17db      	asrs	r3, r3, #31
 800fac6:	401d      	ands	r5, r3
 800fac8:	211f      	movs	r1, #31
 800faca:	0023      	movs	r3, r4
 800facc:	0038      	movs	r0, r7
 800face:	00ad      	lsls	r5, r5, #2
 800fad0:	1955      	adds	r5, r2, r5
 800fad2:	6922      	ldr	r2, [r4, #16]
 800fad4:	3314      	adds	r3, #20
 800fad6:	0092      	lsls	r2, r2, #2
 800fad8:	4008      	ands	r0, r1
 800fada:	4684      	mov	ip, r0
 800fadc:	189a      	adds	r2, r3, r2
 800fade:	420f      	tst	r7, r1
 800fae0:	d02a      	beq.n	800fb38 <__lshift+0xc8>
 800fae2:	3101      	adds	r1, #1
 800fae4:	1a09      	subs	r1, r1, r0
 800fae6:	9105      	str	r1, [sp, #20]
 800fae8:	2100      	movs	r1, #0
 800faea:	9503      	str	r5, [sp, #12]
 800faec:	4667      	mov	r7, ip
 800faee:	6818      	ldr	r0, [r3, #0]
 800faf0:	40b8      	lsls	r0, r7
 800faf2:	4308      	orrs	r0, r1
 800faf4:	9903      	ldr	r1, [sp, #12]
 800faf6:	c101      	stmia	r1!, {r0}
 800faf8:	9103      	str	r1, [sp, #12]
 800fafa:	9805      	ldr	r0, [sp, #20]
 800fafc:	cb02      	ldmia	r3!, {r1}
 800fafe:	40c1      	lsrs	r1, r0
 800fb00:	429a      	cmp	r2, r3
 800fb02:	d8f3      	bhi.n	800faec <__lshift+0x7c>
 800fb04:	0020      	movs	r0, r4
 800fb06:	3015      	adds	r0, #21
 800fb08:	2304      	movs	r3, #4
 800fb0a:	4282      	cmp	r2, r0
 800fb0c:	d304      	bcc.n	800fb18 <__lshift+0xa8>
 800fb0e:	1b13      	subs	r3, r2, r4
 800fb10:	3b15      	subs	r3, #21
 800fb12:	089b      	lsrs	r3, r3, #2
 800fb14:	3301      	adds	r3, #1
 800fb16:	009b      	lsls	r3, r3, #2
 800fb18:	50e9      	str	r1, [r5, r3]
 800fb1a:	2900      	cmp	r1, #0
 800fb1c:	d002      	beq.n	800fb24 <__lshift+0xb4>
 800fb1e:	9b02      	ldr	r3, [sp, #8]
 800fb20:	3302      	adds	r3, #2
 800fb22:	9301      	str	r3, [sp, #4]
 800fb24:	9b01      	ldr	r3, [sp, #4]
 800fb26:	9804      	ldr	r0, [sp, #16]
 800fb28:	3b01      	subs	r3, #1
 800fb2a:	0021      	movs	r1, r4
 800fb2c:	6133      	str	r3, [r6, #16]
 800fb2e:	f7ff fdcb 	bl	800f6c8 <_Bfree>
 800fb32:	0030      	movs	r0, r6
 800fb34:	b007      	add	sp, #28
 800fb36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb38:	cb02      	ldmia	r3!, {r1}
 800fb3a:	c502      	stmia	r5!, {r1}
 800fb3c:	429a      	cmp	r2, r3
 800fb3e:	d8fb      	bhi.n	800fb38 <__lshift+0xc8>
 800fb40:	e7f0      	b.n	800fb24 <__lshift+0xb4>
 800fb42:	46c0      	nop			; (mov r8, r8)
 800fb44:	080115a8 	.word	0x080115a8
 800fb48:	080115b9 	.word	0x080115b9

0800fb4c <__mcmp>:
 800fb4c:	b530      	push	{r4, r5, lr}
 800fb4e:	690b      	ldr	r3, [r1, #16]
 800fb50:	6904      	ldr	r4, [r0, #16]
 800fb52:	0002      	movs	r2, r0
 800fb54:	1ae0      	subs	r0, r4, r3
 800fb56:	429c      	cmp	r4, r3
 800fb58:	d10e      	bne.n	800fb78 <__mcmp+0x2c>
 800fb5a:	3214      	adds	r2, #20
 800fb5c:	009b      	lsls	r3, r3, #2
 800fb5e:	3114      	adds	r1, #20
 800fb60:	0014      	movs	r4, r2
 800fb62:	18c9      	adds	r1, r1, r3
 800fb64:	18d2      	adds	r2, r2, r3
 800fb66:	3a04      	subs	r2, #4
 800fb68:	3904      	subs	r1, #4
 800fb6a:	6815      	ldr	r5, [r2, #0]
 800fb6c:	680b      	ldr	r3, [r1, #0]
 800fb6e:	429d      	cmp	r5, r3
 800fb70:	d003      	beq.n	800fb7a <__mcmp+0x2e>
 800fb72:	2001      	movs	r0, #1
 800fb74:	429d      	cmp	r5, r3
 800fb76:	d303      	bcc.n	800fb80 <__mcmp+0x34>
 800fb78:	bd30      	pop	{r4, r5, pc}
 800fb7a:	4294      	cmp	r4, r2
 800fb7c:	d3f3      	bcc.n	800fb66 <__mcmp+0x1a>
 800fb7e:	e7fb      	b.n	800fb78 <__mcmp+0x2c>
 800fb80:	4240      	negs	r0, r0
 800fb82:	e7f9      	b.n	800fb78 <__mcmp+0x2c>

0800fb84 <__mdiff>:
 800fb84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb86:	000e      	movs	r6, r1
 800fb88:	0007      	movs	r7, r0
 800fb8a:	0011      	movs	r1, r2
 800fb8c:	0030      	movs	r0, r6
 800fb8e:	b087      	sub	sp, #28
 800fb90:	0014      	movs	r4, r2
 800fb92:	f7ff ffdb 	bl	800fb4c <__mcmp>
 800fb96:	1e05      	subs	r5, r0, #0
 800fb98:	d110      	bne.n	800fbbc <__mdiff+0x38>
 800fb9a:	0001      	movs	r1, r0
 800fb9c:	0038      	movs	r0, r7
 800fb9e:	f7ff fd4f 	bl	800f640 <_Balloc>
 800fba2:	1e02      	subs	r2, r0, #0
 800fba4:	d104      	bne.n	800fbb0 <__mdiff+0x2c>
 800fba6:	4b3f      	ldr	r3, [pc, #252]	; (800fca4 <__mdiff+0x120>)
 800fba8:	483f      	ldr	r0, [pc, #252]	; (800fca8 <__mdiff+0x124>)
 800fbaa:	4940      	ldr	r1, [pc, #256]	; (800fcac <__mdiff+0x128>)
 800fbac:	f000 faf8 	bl	80101a0 <__assert_func>
 800fbb0:	2301      	movs	r3, #1
 800fbb2:	6145      	str	r5, [r0, #20]
 800fbb4:	6103      	str	r3, [r0, #16]
 800fbb6:	0010      	movs	r0, r2
 800fbb8:	b007      	add	sp, #28
 800fbba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbbc:	2301      	movs	r3, #1
 800fbbe:	9301      	str	r3, [sp, #4]
 800fbc0:	2800      	cmp	r0, #0
 800fbc2:	db04      	blt.n	800fbce <__mdiff+0x4a>
 800fbc4:	0023      	movs	r3, r4
 800fbc6:	0034      	movs	r4, r6
 800fbc8:	001e      	movs	r6, r3
 800fbca:	2300      	movs	r3, #0
 800fbcc:	9301      	str	r3, [sp, #4]
 800fbce:	0038      	movs	r0, r7
 800fbd0:	6861      	ldr	r1, [r4, #4]
 800fbd2:	f7ff fd35 	bl	800f640 <_Balloc>
 800fbd6:	1e02      	subs	r2, r0, #0
 800fbd8:	d103      	bne.n	800fbe2 <__mdiff+0x5e>
 800fbda:	4b32      	ldr	r3, [pc, #200]	; (800fca4 <__mdiff+0x120>)
 800fbdc:	4832      	ldr	r0, [pc, #200]	; (800fca8 <__mdiff+0x124>)
 800fbde:	4934      	ldr	r1, [pc, #208]	; (800fcb0 <__mdiff+0x12c>)
 800fbe0:	e7e4      	b.n	800fbac <__mdiff+0x28>
 800fbe2:	9b01      	ldr	r3, [sp, #4]
 800fbe4:	2700      	movs	r7, #0
 800fbe6:	60c3      	str	r3, [r0, #12]
 800fbe8:	6920      	ldr	r0, [r4, #16]
 800fbea:	3414      	adds	r4, #20
 800fbec:	0083      	lsls	r3, r0, #2
 800fbee:	18e3      	adds	r3, r4, r3
 800fbf0:	0021      	movs	r1, r4
 800fbf2:	9401      	str	r4, [sp, #4]
 800fbf4:	0034      	movs	r4, r6
 800fbf6:	9302      	str	r3, [sp, #8]
 800fbf8:	6933      	ldr	r3, [r6, #16]
 800fbfa:	3414      	adds	r4, #20
 800fbfc:	009b      	lsls	r3, r3, #2
 800fbfe:	18e3      	adds	r3, r4, r3
 800fc00:	9303      	str	r3, [sp, #12]
 800fc02:	0013      	movs	r3, r2
 800fc04:	3314      	adds	r3, #20
 800fc06:	469c      	mov	ip, r3
 800fc08:	9305      	str	r3, [sp, #20]
 800fc0a:	9104      	str	r1, [sp, #16]
 800fc0c:	9b04      	ldr	r3, [sp, #16]
 800fc0e:	cc02      	ldmia	r4!, {r1}
 800fc10:	cb20      	ldmia	r3!, {r5}
 800fc12:	9304      	str	r3, [sp, #16]
 800fc14:	b2ab      	uxth	r3, r5
 800fc16:	19df      	adds	r7, r3, r7
 800fc18:	b28b      	uxth	r3, r1
 800fc1a:	1afb      	subs	r3, r7, r3
 800fc1c:	0c09      	lsrs	r1, r1, #16
 800fc1e:	0c2d      	lsrs	r5, r5, #16
 800fc20:	1a6d      	subs	r5, r5, r1
 800fc22:	1419      	asrs	r1, r3, #16
 800fc24:	1869      	adds	r1, r5, r1
 800fc26:	b29b      	uxth	r3, r3
 800fc28:	140f      	asrs	r7, r1, #16
 800fc2a:	0409      	lsls	r1, r1, #16
 800fc2c:	4319      	orrs	r1, r3
 800fc2e:	4663      	mov	r3, ip
 800fc30:	c302      	stmia	r3!, {r1}
 800fc32:	469c      	mov	ip, r3
 800fc34:	9b03      	ldr	r3, [sp, #12]
 800fc36:	42a3      	cmp	r3, r4
 800fc38:	d8e8      	bhi.n	800fc0c <__mdiff+0x88>
 800fc3a:	0031      	movs	r1, r6
 800fc3c:	9c03      	ldr	r4, [sp, #12]
 800fc3e:	3115      	adds	r1, #21
 800fc40:	2304      	movs	r3, #4
 800fc42:	428c      	cmp	r4, r1
 800fc44:	d304      	bcc.n	800fc50 <__mdiff+0xcc>
 800fc46:	1ba3      	subs	r3, r4, r6
 800fc48:	3b15      	subs	r3, #21
 800fc4a:	089b      	lsrs	r3, r3, #2
 800fc4c:	3301      	adds	r3, #1
 800fc4e:	009b      	lsls	r3, r3, #2
 800fc50:	9901      	ldr	r1, [sp, #4]
 800fc52:	18cd      	adds	r5, r1, r3
 800fc54:	9905      	ldr	r1, [sp, #20]
 800fc56:	002e      	movs	r6, r5
 800fc58:	18cb      	adds	r3, r1, r3
 800fc5a:	469c      	mov	ip, r3
 800fc5c:	9902      	ldr	r1, [sp, #8]
 800fc5e:	428e      	cmp	r6, r1
 800fc60:	d310      	bcc.n	800fc84 <__mdiff+0x100>
 800fc62:	9e02      	ldr	r6, [sp, #8]
 800fc64:	1ee9      	subs	r1, r5, #3
 800fc66:	2400      	movs	r4, #0
 800fc68:	428e      	cmp	r6, r1
 800fc6a:	d304      	bcc.n	800fc76 <__mdiff+0xf2>
 800fc6c:	0031      	movs	r1, r6
 800fc6e:	3103      	adds	r1, #3
 800fc70:	1b49      	subs	r1, r1, r5
 800fc72:	0889      	lsrs	r1, r1, #2
 800fc74:	008c      	lsls	r4, r1, #2
 800fc76:	191b      	adds	r3, r3, r4
 800fc78:	3b04      	subs	r3, #4
 800fc7a:	6819      	ldr	r1, [r3, #0]
 800fc7c:	2900      	cmp	r1, #0
 800fc7e:	d00f      	beq.n	800fca0 <__mdiff+0x11c>
 800fc80:	6110      	str	r0, [r2, #16]
 800fc82:	e798      	b.n	800fbb6 <__mdiff+0x32>
 800fc84:	ce02      	ldmia	r6!, {r1}
 800fc86:	b28c      	uxth	r4, r1
 800fc88:	19e4      	adds	r4, r4, r7
 800fc8a:	0c0f      	lsrs	r7, r1, #16
 800fc8c:	1421      	asrs	r1, r4, #16
 800fc8e:	1879      	adds	r1, r7, r1
 800fc90:	b2a4      	uxth	r4, r4
 800fc92:	140f      	asrs	r7, r1, #16
 800fc94:	0409      	lsls	r1, r1, #16
 800fc96:	4321      	orrs	r1, r4
 800fc98:	4664      	mov	r4, ip
 800fc9a:	c402      	stmia	r4!, {r1}
 800fc9c:	46a4      	mov	ip, r4
 800fc9e:	e7dd      	b.n	800fc5c <__mdiff+0xd8>
 800fca0:	3801      	subs	r0, #1
 800fca2:	e7e9      	b.n	800fc78 <__mdiff+0xf4>
 800fca4:	080115a8 	.word	0x080115a8
 800fca8:	080115b9 	.word	0x080115b9
 800fcac:	00000237 	.word	0x00000237
 800fcb0:	00000245 	.word	0x00000245

0800fcb4 <__d2b>:
 800fcb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fcb6:	2101      	movs	r1, #1
 800fcb8:	0014      	movs	r4, r2
 800fcba:	001d      	movs	r5, r3
 800fcbc:	9f08      	ldr	r7, [sp, #32]
 800fcbe:	f7ff fcbf 	bl	800f640 <_Balloc>
 800fcc2:	1e06      	subs	r6, r0, #0
 800fcc4:	d105      	bne.n	800fcd2 <__d2b+0x1e>
 800fcc6:	0032      	movs	r2, r6
 800fcc8:	4b24      	ldr	r3, [pc, #144]	; (800fd5c <__d2b+0xa8>)
 800fcca:	4825      	ldr	r0, [pc, #148]	; (800fd60 <__d2b+0xac>)
 800fccc:	4925      	ldr	r1, [pc, #148]	; (800fd64 <__d2b+0xb0>)
 800fcce:	f000 fa67 	bl	80101a0 <__assert_func>
 800fcd2:	032b      	lsls	r3, r5, #12
 800fcd4:	006d      	lsls	r5, r5, #1
 800fcd6:	0b1b      	lsrs	r3, r3, #12
 800fcd8:	0d6d      	lsrs	r5, r5, #21
 800fcda:	d125      	bne.n	800fd28 <__d2b+0x74>
 800fcdc:	9301      	str	r3, [sp, #4]
 800fcde:	2c00      	cmp	r4, #0
 800fce0:	d028      	beq.n	800fd34 <__d2b+0x80>
 800fce2:	4668      	mov	r0, sp
 800fce4:	9400      	str	r4, [sp, #0]
 800fce6:	f7ff fd71 	bl	800f7cc <__lo0bits>
 800fcea:	9b01      	ldr	r3, [sp, #4]
 800fcec:	9900      	ldr	r1, [sp, #0]
 800fcee:	2800      	cmp	r0, #0
 800fcf0:	d01e      	beq.n	800fd30 <__d2b+0x7c>
 800fcf2:	2220      	movs	r2, #32
 800fcf4:	001c      	movs	r4, r3
 800fcf6:	1a12      	subs	r2, r2, r0
 800fcf8:	4094      	lsls	r4, r2
 800fcfa:	0022      	movs	r2, r4
 800fcfc:	40c3      	lsrs	r3, r0
 800fcfe:	430a      	orrs	r2, r1
 800fd00:	6172      	str	r2, [r6, #20]
 800fd02:	9301      	str	r3, [sp, #4]
 800fd04:	9c01      	ldr	r4, [sp, #4]
 800fd06:	61b4      	str	r4, [r6, #24]
 800fd08:	1e63      	subs	r3, r4, #1
 800fd0a:	419c      	sbcs	r4, r3
 800fd0c:	3401      	adds	r4, #1
 800fd0e:	6134      	str	r4, [r6, #16]
 800fd10:	2d00      	cmp	r5, #0
 800fd12:	d017      	beq.n	800fd44 <__d2b+0x90>
 800fd14:	2435      	movs	r4, #53	; 0x35
 800fd16:	4b14      	ldr	r3, [pc, #80]	; (800fd68 <__d2b+0xb4>)
 800fd18:	18ed      	adds	r5, r5, r3
 800fd1a:	182d      	adds	r5, r5, r0
 800fd1c:	603d      	str	r5, [r7, #0]
 800fd1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd20:	1a24      	subs	r4, r4, r0
 800fd22:	601c      	str	r4, [r3, #0]
 800fd24:	0030      	movs	r0, r6
 800fd26:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fd28:	2280      	movs	r2, #128	; 0x80
 800fd2a:	0352      	lsls	r2, r2, #13
 800fd2c:	4313      	orrs	r3, r2
 800fd2e:	e7d5      	b.n	800fcdc <__d2b+0x28>
 800fd30:	6171      	str	r1, [r6, #20]
 800fd32:	e7e7      	b.n	800fd04 <__d2b+0x50>
 800fd34:	a801      	add	r0, sp, #4
 800fd36:	f7ff fd49 	bl	800f7cc <__lo0bits>
 800fd3a:	9b01      	ldr	r3, [sp, #4]
 800fd3c:	2401      	movs	r4, #1
 800fd3e:	6173      	str	r3, [r6, #20]
 800fd40:	3020      	adds	r0, #32
 800fd42:	e7e4      	b.n	800fd0e <__d2b+0x5a>
 800fd44:	4b09      	ldr	r3, [pc, #36]	; (800fd6c <__d2b+0xb8>)
 800fd46:	18c0      	adds	r0, r0, r3
 800fd48:	4b09      	ldr	r3, [pc, #36]	; (800fd70 <__d2b+0xbc>)
 800fd4a:	6038      	str	r0, [r7, #0]
 800fd4c:	18e3      	adds	r3, r4, r3
 800fd4e:	009b      	lsls	r3, r3, #2
 800fd50:	18f3      	adds	r3, r6, r3
 800fd52:	6958      	ldr	r0, [r3, #20]
 800fd54:	f7ff fd20 	bl	800f798 <__hi0bits>
 800fd58:	0164      	lsls	r4, r4, #5
 800fd5a:	e7e0      	b.n	800fd1e <__d2b+0x6a>
 800fd5c:	080115a8 	.word	0x080115a8
 800fd60:	080115b9 	.word	0x080115b9
 800fd64:	0000030f 	.word	0x0000030f
 800fd68:	fffffbcd 	.word	0xfffffbcd
 800fd6c:	fffffbce 	.word	0xfffffbce
 800fd70:	3fffffff 	.word	0x3fffffff

0800fd74 <__sfputc_r>:
 800fd74:	6893      	ldr	r3, [r2, #8]
 800fd76:	b510      	push	{r4, lr}
 800fd78:	3b01      	subs	r3, #1
 800fd7a:	6093      	str	r3, [r2, #8]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	da04      	bge.n	800fd8a <__sfputc_r+0x16>
 800fd80:	6994      	ldr	r4, [r2, #24]
 800fd82:	42a3      	cmp	r3, r4
 800fd84:	db07      	blt.n	800fd96 <__sfputc_r+0x22>
 800fd86:	290a      	cmp	r1, #10
 800fd88:	d005      	beq.n	800fd96 <__sfputc_r+0x22>
 800fd8a:	6813      	ldr	r3, [r2, #0]
 800fd8c:	1c58      	adds	r0, r3, #1
 800fd8e:	6010      	str	r0, [r2, #0]
 800fd90:	7019      	strb	r1, [r3, #0]
 800fd92:	0008      	movs	r0, r1
 800fd94:	bd10      	pop	{r4, pc}
 800fd96:	f7fe fb5f 	bl	800e458 <__swbuf_r>
 800fd9a:	0001      	movs	r1, r0
 800fd9c:	e7f9      	b.n	800fd92 <__sfputc_r+0x1e>

0800fd9e <__sfputs_r>:
 800fd9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fda0:	0006      	movs	r6, r0
 800fda2:	000f      	movs	r7, r1
 800fda4:	0014      	movs	r4, r2
 800fda6:	18d5      	adds	r5, r2, r3
 800fda8:	42ac      	cmp	r4, r5
 800fdaa:	d101      	bne.n	800fdb0 <__sfputs_r+0x12>
 800fdac:	2000      	movs	r0, #0
 800fdae:	e007      	b.n	800fdc0 <__sfputs_r+0x22>
 800fdb0:	7821      	ldrb	r1, [r4, #0]
 800fdb2:	003a      	movs	r2, r7
 800fdb4:	0030      	movs	r0, r6
 800fdb6:	f7ff ffdd 	bl	800fd74 <__sfputc_r>
 800fdba:	3401      	adds	r4, #1
 800fdbc:	1c43      	adds	r3, r0, #1
 800fdbe:	d1f3      	bne.n	800fda8 <__sfputs_r+0xa>
 800fdc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fdc4 <_vfiprintf_r>:
 800fdc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fdc6:	b0a1      	sub	sp, #132	; 0x84
 800fdc8:	000f      	movs	r7, r1
 800fdca:	0015      	movs	r5, r2
 800fdcc:	001e      	movs	r6, r3
 800fdce:	9003      	str	r0, [sp, #12]
 800fdd0:	2800      	cmp	r0, #0
 800fdd2:	d004      	beq.n	800fdde <_vfiprintf_r+0x1a>
 800fdd4:	6a03      	ldr	r3, [r0, #32]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d101      	bne.n	800fdde <_vfiprintf_r+0x1a>
 800fdda:	f7fe fa43 	bl	800e264 <__sinit>
 800fdde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fde0:	07db      	lsls	r3, r3, #31
 800fde2:	d405      	bmi.n	800fdf0 <_vfiprintf_r+0x2c>
 800fde4:	89bb      	ldrh	r3, [r7, #12]
 800fde6:	059b      	lsls	r3, r3, #22
 800fde8:	d402      	bmi.n	800fdf0 <_vfiprintf_r+0x2c>
 800fdea:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800fdec:	f7fe fc6d 	bl	800e6ca <__retarget_lock_acquire_recursive>
 800fdf0:	89bb      	ldrh	r3, [r7, #12]
 800fdf2:	071b      	lsls	r3, r3, #28
 800fdf4:	d502      	bpl.n	800fdfc <_vfiprintf_r+0x38>
 800fdf6:	693b      	ldr	r3, [r7, #16]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d113      	bne.n	800fe24 <_vfiprintf_r+0x60>
 800fdfc:	0039      	movs	r1, r7
 800fdfe:	9803      	ldr	r0, [sp, #12]
 800fe00:	f7fe fb6c 	bl	800e4dc <__swsetup_r>
 800fe04:	2800      	cmp	r0, #0
 800fe06:	d00d      	beq.n	800fe24 <_vfiprintf_r+0x60>
 800fe08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fe0a:	07db      	lsls	r3, r3, #31
 800fe0c:	d503      	bpl.n	800fe16 <_vfiprintf_r+0x52>
 800fe0e:	2001      	movs	r0, #1
 800fe10:	4240      	negs	r0, r0
 800fe12:	b021      	add	sp, #132	; 0x84
 800fe14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe16:	89bb      	ldrh	r3, [r7, #12]
 800fe18:	059b      	lsls	r3, r3, #22
 800fe1a:	d4f8      	bmi.n	800fe0e <_vfiprintf_r+0x4a>
 800fe1c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800fe1e:	f7fe fc55 	bl	800e6cc <__retarget_lock_release_recursive>
 800fe22:	e7f4      	b.n	800fe0e <_vfiprintf_r+0x4a>
 800fe24:	2300      	movs	r3, #0
 800fe26:	ac08      	add	r4, sp, #32
 800fe28:	6163      	str	r3, [r4, #20]
 800fe2a:	3320      	adds	r3, #32
 800fe2c:	7663      	strb	r3, [r4, #25]
 800fe2e:	3310      	adds	r3, #16
 800fe30:	76a3      	strb	r3, [r4, #26]
 800fe32:	9607      	str	r6, [sp, #28]
 800fe34:	002e      	movs	r6, r5
 800fe36:	7833      	ldrb	r3, [r6, #0]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d001      	beq.n	800fe40 <_vfiprintf_r+0x7c>
 800fe3c:	2b25      	cmp	r3, #37	; 0x25
 800fe3e:	d148      	bne.n	800fed2 <_vfiprintf_r+0x10e>
 800fe40:	1b73      	subs	r3, r6, r5
 800fe42:	9305      	str	r3, [sp, #20]
 800fe44:	42ae      	cmp	r6, r5
 800fe46:	d00b      	beq.n	800fe60 <_vfiprintf_r+0x9c>
 800fe48:	002a      	movs	r2, r5
 800fe4a:	0039      	movs	r1, r7
 800fe4c:	9803      	ldr	r0, [sp, #12]
 800fe4e:	f7ff ffa6 	bl	800fd9e <__sfputs_r>
 800fe52:	3001      	adds	r0, #1
 800fe54:	d100      	bne.n	800fe58 <_vfiprintf_r+0x94>
 800fe56:	e0af      	b.n	800ffb8 <_vfiprintf_r+0x1f4>
 800fe58:	6963      	ldr	r3, [r4, #20]
 800fe5a:	9a05      	ldr	r2, [sp, #20]
 800fe5c:	189b      	adds	r3, r3, r2
 800fe5e:	6163      	str	r3, [r4, #20]
 800fe60:	7833      	ldrb	r3, [r6, #0]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d100      	bne.n	800fe68 <_vfiprintf_r+0xa4>
 800fe66:	e0a7      	b.n	800ffb8 <_vfiprintf_r+0x1f4>
 800fe68:	2201      	movs	r2, #1
 800fe6a:	2300      	movs	r3, #0
 800fe6c:	4252      	negs	r2, r2
 800fe6e:	6062      	str	r2, [r4, #4]
 800fe70:	a904      	add	r1, sp, #16
 800fe72:	3254      	adds	r2, #84	; 0x54
 800fe74:	1852      	adds	r2, r2, r1
 800fe76:	1c75      	adds	r5, r6, #1
 800fe78:	6023      	str	r3, [r4, #0]
 800fe7a:	60e3      	str	r3, [r4, #12]
 800fe7c:	60a3      	str	r3, [r4, #8]
 800fe7e:	7013      	strb	r3, [r2, #0]
 800fe80:	65a3      	str	r3, [r4, #88]	; 0x58
 800fe82:	4b59      	ldr	r3, [pc, #356]	; (800ffe8 <_vfiprintf_r+0x224>)
 800fe84:	2205      	movs	r2, #5
 800fe86:	0018      	movs	r0, r3
 800fe88:	7829      	ldrb	r1, [r5, #0]
 800fe8a:	9305      	str	r3, [sp, #20]
 800fe8c:	f7fe fc1f 	bl	800e6ce <memchr>
 800fe90:	1c6e      	adds	r6, r5, #1
 800fe92:	2800      	cmp	r0, #0
 800fe94:	d11f      	bne.n	800fed6 <_vfiprintf_r+0x112>
 800fe96:	6822      	ldr	r2, [r4, #0]
 800fe98:	06d3      	lsls	r3, r2, #27
 800fe9a:	d504      	bpl.n	800fea6 <_vfiprintf_r+0xe2>
 800fe9c:	2353      	movs	r3, #83	; 0x53
 800fe9e:	a904      	add	r1, sp, #16
 800fea0:	185b      	adds	r3, r3, r1
 800fea2:	2120      	movs	r1, #32
 800fea4:	7019      	strb	r1, [r3, #0]
 800fea6:	0713      	lsls	r3, r2, #28
 800fea8:	d504      	bpl.n	800feb4 <_vfiprintf_r+0xf0>
 800feaa:	2353      	movs	r3, #83	; 0x53
 800feac:	a904      	add	r1, sp, #16
 800feae:	185b      	adds	r3, r3, r1
 800feb0:	212b      	movs	r1, #43	; 0x2b
 800feb2:	7019      	strb	r1, [r3, #0]
 800feb4:	782b      	ldrb	r3, [r5, #0]
 800feb6:	2b2a      	cmp	r3, #42	; 0x2a
 800feb8:	d016      	beq.n	800fee8 <_vfiprintf_r+0x124>
 800feba:	002e      	movs	r6, r5
 800febc:	2100      	movs	r1, #0
 800febe:	200a      	movs	r0, #10
 800fec0:	68e3      	ldr	r3, [r4, #12]
 800fec2:	7832      	ldrb	r2, [r6, #0]
 800fec4:	1c75      	adds	r5, r6, #1
 800fec6:	3a30      	subs	r2, #48	; 0x30
 800fec8:	2a09      	cmp	r2, #9
 800feca:	d94e      	bls.n	800ff6a <_vfiprintf_r+0x1a6>
 800fecc:	2900      	cmp	r1, #0
 800fece:	d111      	bne.n	800fef4 <_vfiprintf_r+0x130>
 800fed0:	e017      	b.n	800ff02 <_vfiprintf_r+0x13e>
 800fed2:	3601      	adds	r6, #1
 800fed4:	e7af      	b.n	800fe36 <_vfiprintf_r+0x72>
 800fed6:	9b05      	ldr	r3, [sp, #20]
 800fed8:	6822      	ldr	r2, [r4, #0]
 800feda:	1ac0      	subs	r0, r0, r3
 800fedc:	2301      	movs	r3, #1
 800fede:	4083      	lsls	r3, r0
 800fee0:	4313      	orrs	r3, r2
 800fee2:	0035      	movs	r5, r6
 800fee4:	6023      	str	r3, [r4, #0]
 800fee6:	e7cc      	b.n	800fe82 <_vfiprintf_r+0xbe>
 800fee8:	9b07      	ldr	r3, [sp, #28]
 800feea:	1d19      	adds	r1, r3, #4
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	9107      	str	r1, [sp, #28]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	db01      	blt.n	800fef8 <_vfiprintf_r+0x134>
 800fef4:	930b      	str	r3, [sp, #44]	; 0x2c
 800fef6:	e004      	b.n	800ff02 <_vfiprintf_r+0x13e>
 800fef8:	425b      	negs	r3, r3
 800fefa:	60e3      	str	r3, [r4, #12]
 800fefc:	2302      	movs	r3, #2
 800fefe:	4313      	orrs	r3, r2
 800ff00:	6023      	str	r3, [r4, #0]
 800ff02:	7833      	ldrb	r3, [r6, #0]
 800ff04:	2b2e      	cmp	r3, #46	; 0x2e
 800ff06:	d10a      	bne.n	800ff1e <_vfiprintf_r+0x15a>
 800ff08:	7873      	ldrb	r3, [r6, #1]
 800ff0a:	2b2a      	cmp	r3, #42	; 0x2a
 800ff0c:	d135      	bne.n	800ff7a <_vfiprintf_r+0x1b6>
 800ff0e:	9b07      	ldr	r3, [sp, #28]
 800ff10:	3602      	adds	r6, #2
 800ff12:	1d1a      	adds	r2, r3, #4
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	9207      	str	r2, [sp, #28]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	db2b      	blt.n	800ff74 <_vfiprintf_r+0x1b0>
 800ff1c:	9309      	str	r3, [sp, #36]	; 0x24
 800ff1e:	4d33      	ldr	r5, [pc, #204]	; (800ffec <_vfiprintf_r+0x228>)
 800ff20:	2203      	movs	r2, #3
 800ff22:	0028      	movs	r0, r5
 800ff24:	7831      	ldrb	r1, [r6, #0]
 800ff26:	f7fe fbd2 	bl	800e6ce <memchr>
 800ff2a:	2800      	cmp	r0, #0
 800ff2c:	d006      	beq.n	800ff3c <_vfiprintf_r+0x178>
 800ff2e:	2340      	movs	r3, #64	; 0x40
 800ff30:	1b40      	subs	r0, r0, r5
 800ff32:	4083      	lsls	r3, r0
 800ff34:	6822      	ldr	r2, [r4, #0]
 800ff36:	3601      	adds	r6, #1
 800ff38:	4313      	orrs	r3, r2
 800ff3a:	6023      	str	r3, [r4, #0]
 800ff3c:	7831      	ldrb	r1, [r6, #0]
 800ff3e:	2206      	movs	r2, #6
 800ff40:	482b      	ldr	r0, [pc, #172]	; (800fff0 <_vfiprintf_r+0x22c>)
 800ff42:	1c75      	adds	r5, r6, #1
 800ff44:	7621      	strb	r1, [r4, #24]
 800ff46:	f7fe fbc2 	bl	800e6ce <memchr>
 800ff4a:	2800      	cmp	r0, #0
 800ff4c:	d043      	beq.n	800ffd6 <_vfiprintf_r+0x212>
 800ff4e:	4b29      	ldr	r3, [pc, #164]	; (800fff4 <_vfiprintf_r+0x230>)
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d125      	bne.n	800ffa0 <_vfiprintf_r+0x1dc>
 800ff54:	2207      	movs	r2, #7
 800ff56:	9b07      	ldr	r3, [sp, #28]
 800ff58:	3307      	adds	r3, #7
 800ff5a:	4393      	bics	r3, r2
 800ff5c:	3308      	adds	r3, #8
 800ff5e:	9307      	str	r3, [sp, #28]
 800ff60:	6963      	ldr	r3, [r4, #20]
 800ff62:	9a04      	ldr	r2, [sp, #16]
 800ff64:	189b      	adds	r3, r3, r2
 800ff66:	6163      	str	r3, [r4, #20]
 800ff68:	e764      	b.n	800fe34 <_vfiprintf_r+0x70>
 800ff6a:	4343      	muls	r3, r0
 800ff6c:	002e      	movs	r6, r5
 800ff6e:	2101      	movs	r1, #1
 800ff70:	189b      	adds	r3, r3, r2
 800ff72:	e7a6      	b.n	800fec2 <_vfiprintf_r+0xfe>
 800ff74:	2301      	movs	r3, #1
 800ff76:	425b      	negs	r3, r3
 800ff78:	e7d0      	b.n	800ff1c <_vfiprintf_r+0x158>
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	200a      	movs	r0, #10
 800ff7e:	001a      	movs	r2, r3
 800ff80:	3601      	adds	r6, #1
 800ff82:	6063      	str	r3, [r4, #4]
 800ff84:	7831      	ldrb	r1, [r6, #0]
 800ff86:	1c75      	adds	r5, r6, #1
 800ff88:	3930      	subs	r1, #48	; 0x30
 800ff8a:	2909      	cmp	r1, #9
 800ff8c:	d903      	bls.n	800ff96 <_vfiprintf_r+0x1d2>
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d0c5      	beq.n	800ff1e <_vfiprintf_r+0x15a>
 800ff92:	9209      	str	r2, [sp, #36]	; 0x24
 800ff94:	e7c3      	b.n	800ff1e <_vfiprintf_r+0x15a>
 800ff96:	4342      	muls	r2, r0
 800ff98:	002e      	movs	r6, r5
 800ff9a:	2301      	movs	r3, #1
 800ff9c:	1852      	adds	r2, r2, r1
 800ff9e:	e7f1      	b.n	800ff84 <_vfiprintf_r+0x1c0>
 800ffa0:	aa07      	add	r2, sp, #28
 800ffa2:	9200      	str	r2, [sp, #0]
 800ffa4:	0021      	movs	r1, r4
 800ffa6:	003a      	movs	r2, r7
 800ffa8:	4b13      	ldr	r3, [pc, #76]	; (800fff8 <_vfiprintf_r+0x234>)
 800ffaa:	9803      	ldr	r0, [sp, #12]
 800ffac:	f7fd fc26 	bl	800d7fc <_printf_float>
 800ffb0:	9004      	str	r0, [sp, #16]
 800ffb2:	9b04      	ldr	r3, [sp, #16]
 800ffb4:	3301      	adds	r3, #1
 800ffb6:	d1d3      	bne.n	800ff60 <_vfiprintf_r+0x19c>
 800ffb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ffba:	07db      	lsls	r3, r3, #31
 800ffbc:	d405      	bmi.n	800ffca <_vfiprintf_r+0x206>
 800ffbe:	89bb      	ldrh	r3, [r7, #12]
 800ffc0:	059b      	lsls	r3, r3, #22
 800ffc2:	d402      	bmi.n	800ffca <_vfiprintf_r+0x206>
 800ffc4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800ffc6:	f7fe fb81 	bl	800e6cc <__retarget_lock_release_recursive>
 800ffca:	89bb      	ldrh	r3, [r7, #12]
 800ffcc:	065b      	lsls	r3, r3, #25
 800ffce:	d500      	bpl.n	800ffd2 <_vfiprintf_r+0x20e>
 800ffd0:	e71d      	b.n	800fe0e <_vfiprintf_r+0x4a>
 800ffd2:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ffd4:	e71d      	b.n	800fe12 <_vfiprintf_r+0x4e>
 800ffd6:	aa07      	add	r2, sp, #28
 800ffd8:	9200      	str	r2, [sp, #0]
 800ffda:	0021      	movs	r1, r4
 800ffdc:	003a      	movs	r2, r7
 800ffde:	4b06      	ldr	r3, [pc, #24]	; (800fff8 <_vfiprintf_r+0x234>)
 800ffe0:	9803      	ldr	r0, [sp, #12]
 800ffe2:	f7fd fed1 	bl	800dd88 <_printf_i>
 800ffe6:	e7e3      	b.n	800ffb0 <_vfiprintf_r+0x1ec>
 800ffe8:	08011714 	.word	0x08011714
 800ffec:	0801171a 	.word	0x0801171a
 800fff0:	0801171e 	.word	0x0801171e
 800fff4:	0800d7fd 	.word	0x0800d7fd
 800fff8:	0800fd9f 	.word	0x0800fd9f

0800fffc <__swhatbuf_r>:
 800fffc:	b570      	push	{r4, r5, r6, lr}
 800fffe:	000e      	movs	r6, r1
 8010000:	001d      	movs	r5, r3
 8010002:	230e      	movs	r3, #14
 8010004:	5ec9      	ldrsh	r1, [r1, r3]
 8010006:	0014      	movs	r4, r2
 8010008:	b096      	sub	sp, #88	; 0x58
 801000a:	2900      	cmp	r1, #0
 801000c:	da0c      	bge.n	8010028 <__swhatbuf_r+0x2c>
 801000e:	89b2      	ldrh	r2, [r6, #12]
 8010010:	2380      	movs	r3, #128	; 0x80
 8010012:	0011      	movs	r1, r2
 8010014:	4019      	ands	r1, r3
 8010016:	421a      	tst	r2, r3
 8010018:	d013      	beq.n	8010042 <__swhatbuf_r+0x46>
 801001a:	2100      	movs	r1, #0
 801001c:	3b40      	subs	r3, #64	; 0x40
 801001e:	2000      	movs	r0, #0
 8010020:	6029      	str	r1, [r5, #0]
 8010022:	6023      	str	r3, [r4, #0]
 8010024:	b016      	add	sp, #88	; 0x58
 8010026:	bd70      	pop	{r4, r5, r6, pc}
 8010028:	466a      	mov	r2, sp
 801002a:	f000 f883 	bl	8010134 <_fstat_r>
 801002e:	2800      	cmp	r0, #0
 8010030:	dbed      	blt.n	801000e <__swhatbuf_r+0x12>
 8010032:	23f0      	movs	r3, #240	; 0xf0
 8010034:	9901      	ldr	r1, [sp, #4]
 8010036:	021b      	lsls	r3, r3, #8
 8010038:	4019      	ands	r1, r3
 801003a:	4b03      	ldr	r3, [pc, #12]	; (8010048 <__swhatbuf_r+0x4c>)
 801003c:	18c9      	adds	r1, r1, r3
 801003e:	424b      	negs	r3, r1
 8010040:	4159      	adcs	r1, r3
 8010042:	2380      	movs	r3, #128	; 0x80
 8010044:	00db      	lsls	r3, r3, #3
 8010046:	e7ea      	b.n	801001e <__swhatbuf_r+0x22>
 8010048:	ffffe000 	.word	0xffffe000

0801004c <__smakebuf_r>:
 801004c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801004e:	2602      	movs	r6, #2
 8010050:	898b      	ldrh	r3, [r1, #12]
 8010052:	0005      	movs	r5, r0
 8010054:	000c      	movs	r4, r1
 8010056:	4233      	tst	r3, r6
 8010058:	d006      	beq.n	8010068 <__smakebuf_r+0x1c>
 801005a:	0023      	movs	r3, r4
 801005c:	3347      	adds	r3, #71	; 0x47
 801005e:	6023      	str	r3, [r4, #0]
 8010060:	6123      	str	r3, [r4, #16]
 8010062:	2301      	movs	r3, #1
 8010064:	6163      	str	r3, [r4, #20]
 8010066:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8010068:	466a      	mov	r2, sp
 801006a:	ab01      	add	r3, sp, #4
 801006c:	f7ff ffc6 	bl	800fffc <__swhatbuf_r>
 8010070:	9900      	ldr	r1, [sp, #0]
 8010072:	0007      	movs	r7, r0
 8010074:	0028      	movs	r0, r5
 8010076:	f7ff fa51 	bl	800f51c <_malloc_r>
 801007a:	2800      	cmp	r0, #0
 801007c:	d108      	bne.n	8010090 <__smakebuf_r+0x44>
 801007e:	220c      	movs	r2, #12
 8010080:	5ea3      	ldrsh	r3, [r4, r2]
 8010082:	059a      	lsls	r2, r3, #22
 8010084:	d4ef      	bmi.n	8010066 <__smakebuf_r+0x1a>
 8010086:	2203      	movs	r2, #3
 8010088:	4393      	bics	r3, r2
 801008a:	431e      	orrs	r6, r3
 801008c:	81a6      	strh	r6, [r4, #12]
 801008e:	e7e4      	b.n	801005a <__smakebuf_r+0xe>
 8010090:	2380      	movs	r3, #128	; 0x80
 8010092:	89a2      	ldrh	r2, [r4, #12]
 8010094:	6020      	str	r0, [r4, #0]
 8010096:	4313      	orrs	r3, r2
 8010098:	81a3      	strh	r3, [r4, #12]
 801009a:	9b00      	ldr	r3, [sp, #0]
 801009c:	6120      	str	r0, [r4, #16]
 801009e:	6163      	str	r3, [r4, #20]
 80100a0:	9b01      	ldr	r3, [sp, #4]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d00c      	beq.n	80100c0 <__smakebuf_r+0x74>
 80100a6:	0028      	movs	r0, r5
 80100a8:	230e      	movs	r3, #14
 80100aa:	5ee1      	ldrsh	r1, [r4, r3]
 80100ac:	f000 f854 	bl	8010158 <_isatty_r>
 80100b0:	2800      	cmp	r0, #0
 80100b2:	d005      	beq.n	80100c0 <__smakebuf_r+0x74>
 80100b4:	2303      	movs	r3, #3
 80100b6:	89a2      	ldrh	r2, [r4, #12]
 80100b8:	439a      	bics	r2, r3
 80100ba:	3b02      	subs	r3, #2
 80100bc:	4313      	orrs	r3, r2
 80100be:	81a3      	strh	r3, [r4, #12]
 80100c0:	89a3      	ldrh	r3, [r4, #12]
 80100c2:	433b      	orrs	r3, r7
 80100c4:	81a3      	strh	r3, [r4, #12]
 80100c6:	e7ce      	b.n	8010066 <__smakebuf_r+0x1a>

080100c8 <_putc_r>:
 80100c8:	b570      	push	{r4, r5, r6, lr}
 80100ca:	0006      	movs	r6, r0
 80100cc:	000d      	movs	r5, r1
 80100ce:	0014      	movs	r4, r2
 80100d0:	2800      	cmp	r0, #0
 80100d2:	d004      	beq.n	80100de <_putc_r+0x16>
 80100d4:	6a03      	ldr	r3, [r0, #32]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d101      	bne.n	80100de <_putc_r+0x16>
 80100da:	f7fe f8c3 	bl	800e264 <__sinit>
 80100de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80100e0:	07db      	lsls	r3, r3, #31
 80100e2:	d405      	bmi.n	80100f0 <_putc_r+0x28>
 80100e4:	89a3      	ldrh	r3, [r4, #12]
 80100e6:	059b      	lsls	r3, r3, #22
 80100e8:	d402      	bmi.n	80100f0 <_putc_r+0x28>
 80100ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80100ec:	f7fe faed 	bl	800e6ca <__retarget_lock_acquire_recursive>
 80100f0:	68a3      	ldr	r3, [r4, #8]
 80100f2:	3b01      	subs	r3, #1
 80100f4:	60a3      	str	r3, [r4, #8]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	da05      	bge.n	8010106 <_putc_r+0x3e>
 80100fa:	69a2      	ldr	r2, [r4, #24]
 80100fc:	4293      	cmp	r3, r2
 80100fe:	db12      	blt.n	8010126 <_putc_r+0x5e>
 8010100:	b2eb      	uxtb	r3, r5
 8010102:	2b0a      	cmp	r3, #10
 8010104:	d00f      	beq.n	8010126 <_putc_r+0x5e>
 8010106:	6823      	ldr	r3, [r4, #0]
 8010108:	1c5a      	adds	r2, r3, #1
 801010a:	6022      	str	r2, [r4, #0]
 801010c:	701d      	strb	r5, [r3, #0]
 801010e:	b2ed      	uxtb	r5, r5
 8010110:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010112:	07db      	lsls	r3, r3, #31
 8010114:	d405      	bmi.n	8010122 <_putc_r+0x5a>
 8010116:	89a3      	ldrh	r3, [r4, #12]
 8010118:	059b      	lsls	r3, r3, #22
 801011a:	d402      	bmi.n	8010122 <_putc_r+0x5a>
 801011c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801011e:	f7fe fad5 	bl	800e6cc <__retarget_lock_release_recursive>
 8010122:	0028      	movs	r0, r5
 8010124:	bd70      	pop	{r4, r5, r6, pc}
 8010126:	0029      	movs	r1, r5
 8010128:	0022      	movs	r2, r4
 801012a:	0030      	movs	r0, r6
 801012c:	f7fe f994 	bl	800e458 <__swbuf_r>
 8010130:	0005      	movs	r5, r0
 8010132:	e7ed      	b.n	8010110 <_putc_r+0x48>

08010134 <_fstat_r>:
 8010134:	2300      	movs	r3, #0
 8010136:	b570      	push	{r4, r5, r6, lr}
 8010138:	4d06      	ldr	r5, [pc, #24]	; (8010154 <_fstat_r+0x20>)
 801013a:	0004      	movs	r4, r0
 801013c:	0008      	movs	r0, r1
 801013e:	0011      	movs	r1, r2
 8010140:	602b      	str	r3, [r5, #0]
 8010142:	f7f4 f9a6 	bl	8004492 <_fstat>
 8010146:	1c43      	adds	r3, r0, #1
 8010148:	d103      	bne.n	8010152 <_fstat_r+0x1e>
 801014a:	682b      	ldr	r3, [r5, #0]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d000      	beq.n	8010152 <_fstat_r+0x1e>
 8010150:	6023      	str	r3, [r4, #0]
 8010152:	bd70      	pop	{r4, r5, r6, pc}
 8010154:	20000cd8 	.word	0x20000cd8

08010158 <_isatty_r>:
 8010158:	2300      	movs	r3, #0
 801015a:	b570      	push	{r4, r5, r6, lr}
 801015c:	4d06      	ldr	r5, [pc, #24]	; (8010178 <_isatty_r+0x20>)
 801015e:	0004      	movs	r4, r0
 8010160:	0008      	movs	r0, r1
 8010162:	602b      	str	r3, [r5, #0]
 8010164:	f7f4 f9a3 	bl	80044ae <_isatty>
 8010168:	1c43      	adds	r3, r0, #1
 801016a:	d103      	bne.n	8010174 <_isatty_r+0x1c>
 801016c:	682b      	ldr	r3, [r5, #0]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d000      	beq.n	8010174 <_isatty_r+0x1c>
 8010172:	6023      	str	r3, [r4, #0]
 8010174:	bd70      	pop	{r4, r5, r6, pc}
 8010176:	46c0      	nop			; (mov r8, r8)
 8010178:	20000cd8 	.word	0x20000cd8

0801017c <_sbrk_r>:
 801017c:	2300      	movs	r3, #0
 801017e:	b570      	push	{r4, r5, r6, lr}
 8010180:	4d06      	ldr	r5, [pc, #24]	; (801019c <_sbrk_r+0x20>)
 8010182:	0004      	movs	r4, r0
 8010184:	0008      	movs	r0, r1
 8010186:	602b      	str	r3, [r5, #0]
 8010188:	f7f4 f9a6 	bl	80044d8 <_sbrk>
 801018c:	1c43      	adds	r3, r0, #1
 801018e:	d103      	bne.n	8010198 <_sbrk_r+0x1c>
 8010190:	682b      	ldr	r3, [r5, #0]
 8010192:	2b00      	cmp	r3, #0
 8010194:	d000      	beq.n	8010198 <_sbrk_r+0x1c>
 8010196:	6023      	str	r3, [r4, #0]
 8010198:	bd70      	pop	{r4, r5, r6, pc}
 801019a:	46c0      	nop			; (mov r8, r8)
 801019c:	20000cd8 	.word	0x20000cd8

080101a0 <__assert_func>:
 80101a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80101a2:	0014      	movs	r4, r2
 80101a4:	001a      	movs	r2, r3
 80101a6:	4b09      	ldr	r3, [pc, #36]	; (80101cc <__assert_func+0x2c>)
 80101a8:	0005      	movs	r5, r0
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	000e      	movs	r6, r1
 80101ae:	68d8      	ldr	r0, [r3, #12]
 80101b0:	4b07      	ldr	r3, [pc, #28]	; (80101d0 <__assert_func+0x30>)
 80101b2:	2c00      	cmp	r4, #0
 80101b4:	d101      	bne.n	80101ba <__assert_func+0x1a>
 80101b6:	4b07      	ldr	r3, [pc, #28]	; (80101d4 <__assert_func+0x34>)
 80101b8:	001c      	movs	r4, r3
 80101ba:	4907      	ldr	r1, [pc, #28]	; (80101d8 <__assert_func+0x38>)
 80101bc:	9301      	str	r3, [sp, #4]
 80101be:	9402      	str	r4, [sp, #8]
 80101c0:	002b      	movs	r3, r5
 80101c2:	9600      	str	r6, [sp, #0]
 80101c4:	f000 f856 	bl	8010274 <fiprintf>
 80101c8:	f000 f864 	bl	8010294 <abort>
 80101cc:	20000098 	.word	0x20000098
 80101d0:	0801172f 	.word	0x0801172f
 80101d4:	0801176a 	.word	0x0801176a
 80101d8:	0801173c 	.word	0x0801173c

080101dc <_calloc_r>:
 80101dc:	b570      	push	{r4, r5, r6, lr}
 80101de:	0c0b      	lsrs	r3, r1, #16
 80101e0:	0c15      	lsrs	r5, r2, #16
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d11e      	bne.n	8010224 <_calloc_r+0x48>
 80101e6:	2d00      	cmp	r5, #0
 80101e8:	d10c      	bne.n	8010204 <_calloc_r+0x28>
 80101ea:	b289      	uxth	r1, r1
 80101ec:	b294      	uxth	r4, r2
 80101ee:	434c      	muls	r4, r1
 80101f0:	0021      	movs	r1, r4
 80101f2:	f7ff f993 	bl	800f51c <_malloc_r>
 80101f6:	1e05      	subs	r5, r0, #0
 80101f8:	d01b      	beq.n	8010232 <_calloc_r+0x56>
 80101fa:	0022      	movs	r2, r4
 80101fc:	2100      	movs	r1, #0
 80101fe:	f7fe f9df 	bl	800e5c0 <memset>
 8010202:	e016      	b.n	8010232 <_calloc_r+0x56>
 8010204:	1c2b      	adds	r3, r5, #0
 8010206:	1c0c      	adds	r4, r1, #0
 8010208:	b289      	uxth	r1, r1
 801020a:	b292      	uxth	r2, r2
 801020c:	434a      	muls	r2, r1
 801020e:	b2a1      	uxth	r1, r4
 8010210:	b29c      	uxth	r4, r3
 8010212:	434c      	muls	r4, r1
 8010214:	0c13      	lsrs	r3, r2, #16
 8010216:	18e4      	adds	r4, r4, r3
 8010218:	0c23      	lsrs	r3, r4, #16
 801021a:	d107      	bne.n	801022c <_calloc_r+0x50>
 801021c:	0424      	lsls	r4, r4, #16
 801021e:	b292      	uxth	r2, r2
 8010220:	4314      	orrs	r4, r2
 8010222:	e7e5      	b.n	80101f0 <_calloc_r+0x14>
 8010224:	2d00      	cmp	r5, #0
 8010226:	d101      	bne.n	801022c <_calloc_r+0x50>
 8010228:	1c14      	adds	r4, r2, #0
 801022a:	e7ed      	b.n	8010208 <_calloc_r+0x2c>
 801022c:	230c      	movs	r3, #12
 801022e:	2500      	movs	r5, #0
 8010230:	6003      	str	r3, [r0, #0]
 8010232:	0028      	movs	r0, r5
 8010234:	bd70      	pop	{r4, r5, r6, pc}

08010236 <__ascii_mbtowc>:
 8010236:	b082      	sub	sp, #8
 8010238:	2900      	cmp	r1, #0
 801023a:	d100      	bne.n	801023e <__ascii_mbtowc+0x8>
 801023c:	a901      	add	r1, sp, #4
 801023e:	1e10      	subs	r0, r2, #0
 8010240:	d006      	beq.n	8010250 <__ascii_mbtowc+0x1a>
 8010242:	2b00      	cmp	r3, #0
 8010244:	d006      	beq.n	8010254 <__ascii_mbtowc+0x1e>
 8010246:	7813      	ldrb	r3, [r2, #0]
 8010248:	600b      	str	r3, [r1, #0]
 801024a:	7810      	ldrb	r0, [r2, #0]
 801024c:	1e43      	subs	r3, r0, #1
 801024e:	4198      	sbcs	r0, r3
 8010250:	b002      	add	sp, #8
 8010252:	4770      	bx	lr
 8010254:	2002      	movs	r0, #2
 8010256:	4240      	negs	r0, r0
 8010258:	e7fa      	b.n	8010250 <__ascii_mbtowc+0x1a>

0801025a <__ascii_wctomb>:
 801025a:	0003      	movs	r3, r0
 801025c:	1e08      	subs	r0, r1, #0
 801025e:	d005      	beq.n	801026c <__ascii_wctomb+0x12>
 8010260:	2aff      	cmp	r2, #255	; 0xff
 8010262:	d904      	bls.n	801026e <__ascii_wctomb+0x14>
 8010264:	228a      	movs	r2, #138	; 0x8a
 8010266:	2001      	movs	r0, #1
 8010268:	601a      	str	r2, [r3, #0]
 801026a:	4240      	negs	r0, r0
 801026c:	4770      	bx	lr
 801026e:	2001      	movs	r0, #1
 8010270:	700a      	strb	r2, [r1, #0]
 8010272:	e7fb      	b.n	801026c <__ascii_wctomb+0x12>

08010274 <fiprintf>:
 8010274:	b40e      	push	{r1, r2, r3}
 8010276:	b517      	push	{r0, r1, r2, r4, lr}
 8010278:	4c05      	ldr	r4, [pc, #20]	; (8010290 <fiprintf+0x1c>)
 801027a:	ab05      	add	r3, sp, #20
 801027c:	cb04      	ldmia	r3!, {r2}
 801027e:	0001      	movs	r1, r0
 8010280:	6820      	ldr	r0, [r4, #0]
 8010282:	9301      	str	r3, [sp, #4]
 8010284:	f7ff fd9e 	bl	800fdc4 <_vfiprintf_r>
 8010288:	bc1e      	pop	{r1, r2, r3, r4}
 801028a:	bc08      	pop	{r3}
 801028c:	b003      	add	sp, #12
 801028e:	4718      	bx	r3
 8010290:	20000098 	.word	0x20000098

08010294 <abort>:
 8010294:	2006      	movs	r0, #6
 8010296:	b510      	push	{r4, lr}
 8010298:	f000 f82e 	bl	80102f8 <raise>
 801029c:	2001      	movs	r0, #1
 801029e:	f7f4 f8a9 	bl	80043f4 <_exit>

080102a2 <_raise_r>:
 80102a2:	b570      	push	{r4, r5, r6, lr}
 80102a4:	0004      	movs	r4, r0
 80102a6:	000d      	movs	r5, r1
 80102a8:	291f      	cmp	r1, #31
 80102aa:	d904      	bls.n	80102b6 <_raise_r+0x14>
 80102ac:	2316      	movs	r3, #22
 80102ae:	6003      	str	r3, [r0, #0]
 80102b0:	2001      	movs	r0, #1
 80102b2:	4240      	negs	r0, r0
 80102b4:	bd70      	pop	{r4, r5, r6, pc}
 80102b6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d004      	beq.n	80102c6 <_raise_r+0x24>
 80102bc:	008a      	lsls	r2, r1, #2
 80102be:	189b      	adds	r3, r3, r2
 80102c0:	681a      	ldr	r2, [r3, #0]
 80102c2:	2a00      	cmp	r2, #0
 80102c4:	d108      	bne.n	80102d8 <_raise_r+0x36>
 80102c6:	0020      	movs	r0, r4
 80102c8:	f000 f832 	bl	8010330 <_getpid_r>
 80102cc:	002a      	movs	r2, r5
 80102ce:	0001      	movs	r1, r0
 80102d0:	0020      	movs	r0, r4
 80102d2:	f000 f81b 	bl	801030c <_kill_r>
 80102d6:	e7ed      	b.n	80102b4 <_raise_r+0x12>
 80102d8:	2000      	movs	r0, #0
 80102da:	2a01      	cmp	r2, #1
 80102dc:	d0ea      	beq.n	80102b4 <_raise_r+0x12>
 80102de:	1c51      	adds	r1, r2, #1
 80102e0:	d103      	bne.n	80102ea <_raise_r+0x48>
 80102e2:	2316      	movs	r3, #22
 80102e4:	3001      	adds	r0, #1
 80102e6:	6023      	str	r3, [r4, #0]
 80102e8:	e7e4      	b.n	80102b4 <_raise_r+0x12>
 80102ea:	2400      	movs	r4, #0
 80102ec:	0028      	movs	r0, r5
 80102ee:	601c      	str	r4, [r3, #0]
 80102f0:	4790      	blx	r2
 80102f2:	0020      	movs	r0, r4
 80102f4:	e7de      	b.n	80102b4 <_raise_r+0x12>
	...

080102f8 <raise>:
 80102f8:	b510      	push	{r4, lr}
 80102fa:	4b03      	ldr	r3, [pc, #12]	; (8010308 <raise+0x10>)
 80102fc:	0001      	movs	r1, r0
 80102fe:	6818      	ldr	r0, [r3, #0]
 8010300:	f7ff ffcf 	bl	80102a2 <_raise_r>
 8010304:	bd10      	pop	{r4, pc}
 8010306:	46c0      	nop			; (mov r8, r8)
 8010308:	20000098 	.word	0x20000098

0801030c <_kill_r>:
 801030c:	2300      	movs	r3, #0
 801030e:	b570      	push	{r4, r5, r6, lr}
 8010310:	4d06      	ldr	r5, [pc, #24]	; (801032c <_kill_r+0x20>)
 8010312:	0004      	movs	r4, r0
 8010314:	0008      	movs	r0, r1
 8010316:	0011      	movs	r1, r2
 8010318:	602b      	str	r3, [r5, #0]
 801031a:	f7f4 f85b 	bl	80043d4 <_kill>
 801031e:	1c43      	adds	r3, r0, #1
 8010320:	d103      	bne.n	801032a <_kill_r+0x1e>
 8010322:	682b      	ldr	r3, [r5, #0]
 8010324:	2b00      	cmp	r3, #0
 8010326:	d000      	beq.n	801032a <_kill_r+0x1e>
 8010328:	6023      	str	r3, [r4, #0]
 801032a:	bd70      	pop	{r4, r5, r6, pc}
 801032c:	20000cd8 	.word	0x20000cd8

08010330 <_getpid_r>:
 8010330:	b510      	push	{r4, lr}
 8010332:	f7f4 f849 	bl	80043c8 <_getpid>
 8010336:	bd10      	pop	{r4, pc}

08010338 <_init>:
 8010338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801033a:	46c0      	nop			; (mov r8, r8)
 801033c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801033e:	bc08      	pop	{r3}
 8010340:	469e      	mov	lr, r3
 8010342:	4770      	bx	lr

08010344 <_fini>:
 8010344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010346:	46c0      	nop			; (mov r8, r8)
 8010348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801034a:	bc08      	pop	{r3}
 801034c:	469e      	mov	lr, r3
 801034e:	4770      	bx	lr
