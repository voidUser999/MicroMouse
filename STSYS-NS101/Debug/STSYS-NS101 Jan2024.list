
STSYS-NS101 Jan2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f4a0  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000155c  0800f558  0800f558  00010558  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010ab4  08010ab4  00012204  2**0
                  CONTENTS
  4 .ARM          00000000  08010ab4  08010ab4  00012204  2**0
                  CONTENTS
  5 .preinit_array 00000000  08010ab4  08010ab4  00012204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010ab4  08010ab4  00011ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010ab8  08010ab8  00011ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  08010abc  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b3c  20000204  08010cc0  00012204  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d40  08010cc0  00012d40  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00012204  2**0
                  CONTENTS, READONLY
 12 .debug_info   000273d9  00000000  00000000  0001222c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a4c  00000000  00000000  00039605  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002038  00000000  00000000  0003e058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001961  00000000  00000000  00040090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d1a0  00000000  00000000  000419f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025242  00000000  00000000  0005eb91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aa441  00000000  00000000  00083dd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012e214  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008a0c  00000000  00000000  0012e258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00136c64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000204 	.word	0x20000204
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800f540 	.word	0x0800f540

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000208 	.word	0x20000208
 80000fc:	0800f540 	.word	0x0800f540

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_uqi>:
 8000110:	b402      	push	{r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	5c09      	ldrb	r1, [r1, r0]
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	448e      	add	lr, r1
 800011e:	bc02      	pop	{r1}
 8000120:	4770      	bx	lr
 8000122:	46c0      	nop			@ (mov r8, r8)

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__udivsi3>:
 8000138:	2200      	movs	r2, #0
 800013a:	0843      	lsrs	r3, r0, #1
 800013c:	428b      	cmp	r3, r1
 800013e:	d374      	bcc.n	800022a <__udivsi3+0xf2>
 8000140:	0903      	lsrs	r3, r0, #4
 8000142:	428b      	cmp	r3, r1
 8000144:	d35f      	bcc.n	8000206 <__udivsi3+0xce>
 8000146:	0a03      	lsrs	r3, r0, #8
 8000148:	428b      	cmp	r3, r1
 800014a:	d344      	bcc.n	80001d6 <__udivsi3+0x9e>
 800014c:	0b03      	lsrs	r3, r0, #12
 800014e:	428b      	cmp	r3, r1
 8000150:	d328      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d30d      	bcc.n	8000174 <__udivsi3+0x3c>
 8000158:	22ff      	movs	r2, #255	@ 0xff
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	ba12      	rev	r2, r2
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d302      	bcc.n	800016a <__udivsi3+0x32>
 8000164:	1212      	asrs	r2, r2, #8
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	d065      	beq.n	8000236 <__udivsi3+0xfe>
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d319      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000170:	e000      	b.n	8000174 <__udivsi3+0x3c>
 8000172:	0a09      	lsrs	r1, r1, #8
 8000174:	0bc3      	lsrs	r3, r0, #15
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x46>
 800017a:	03cb      	lsls	r3, r1, #15
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b83      	lsrs	r3, r0, #14
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x52>
 8000186:	038b      	lsls	r3, r1, #14
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b43      	lsrs	r3, r0, #13
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x5e>
 8000192:	034b      	lsls	r3, r1, #13
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b03      	lsrs	r3, r0, #12
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x6a>
 800019e:	030b      	lsls	r3, r1, #12
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0ac3      	lsrs	r3, r0, #11
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x76>
 80001aa:	02cb      	lsls	r3, r1, #11
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a83      	lsrs	r3, r0, #10
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x82>
 80001b6:	028b      	lsls	r3, r1, #10
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a43      	lsrs	r3, r0, #9
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x8e>
 80001c2:	024b      	lsls	r3, r1, #9
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a03      	lsrs	r3, r0, #8
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x9a>
 80001ce:	020b      	lsls	r3, r1, #8
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	d2cd      	bcs.n	8000172 <__udivsi3+0x3a>
 80001d6:	09c3      	lsrs	r3, r0, #7
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xa8>
 80001dc:	01cb      	lsls	r3, r1, #7
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0983      	lsrs	r3, r0, #6
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xb4>
 80001e8:	018b      	lsls	r3, r1, #6
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0943      	lsrs	r3, r0, #5
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xc0>
 80001f4:	014b      	lsls	r3, r1, #5
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0903      	lsrs	r3, r0, #4
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xcc>
 8000200:	010b      	lsls	r3, r1, #4
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	08c3      	lsrs	r3, r0, #3
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xd8>
 800020c:	00cb      	lsls	r3, r1, #3
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0883      	lsrs	r3, r0, #2
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xe4>
 8000218:	008b      	lsls	r3, r1, #2
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0843      	lsrs	r3, r0, #1
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xf0>
 8000224:	004b      	lsls	r3, r1, #1
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	1a41      	subs	r1, r0, r1
 800022c:	d200      	bcs.n	8000230 <__udivsi3+0xf8>
 800022e:	4601      	mov	r1, r0
 8000230:	4152      	adcs	r2, r2
 8000232:	4610      	mov	r0, r2
 8000234:	4770      	bx	lr
 8000236:	e7ff      	b.n	8000238 <__udivsi3+0x100>
 8000238:	b501      	push	{r0, lr}
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f8f0 	bl	8000420 <__aeabi_idiv0>
 8000240:	bd02      	pop	{r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uidivmod>:
 8000244:	2900      	cmp	r1, #0
 8000246:	d0f7      	beq.n	8000238 <__udivsi3+0x100>
 8000248:	e776      	b.n	8000138 <__udivsi3>
 800024a:	4770      	bx	lr

0800024c <__divsi3>:
 800024c:	4603      	mov	r3, r0
 800024e:	430b      	orrs	r3, r1
 8000250:	d47f      	bmi.n	8000352 <__divsi3+0x106>
 8000252:	2200      	movs	r2, #0
 8000254:	0843      	lsrs	r3, r0, #1
 8000256:	428b      	cmp	r3, r1
 8000258:	d374      	bcc.n	8000344 <__divsi3+0xf8>
 800025a:	0903      	lsrs	r3, r0, #4
 800025c:	428b      	cmp	r3, r1
 800025e:	d35f      	bcc.n	8000320 <__divsi3+0xd4>
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d344      	bcc.n	80002f0 <__divsi3+0xa4>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d328      	bcc.n	80002be <__divsi3+0x72>
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d30d      	bcc.n	800028e <__divsi3+0x42>
 8000272:	22ff      	movs	r2, #255	@ 0xff
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	ba12      	rev	r2, r2
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__divsi3+0x38>
 800027e:	1212      	asrs	r2, r2, #8
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	d065      	beq.n	8000350 <__divsi3+0x104>
 8000284:	0b03      	lsrs	r3, r0, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d319      	bcc.n	80002be <__divsi3+0x72>
 800028a:	e000      	b.n	800028e <__divsi3+0x42>
 800028c:	0a09      	lsrs	r1, r1, #8
 800028e:	0bc3      	lsrs	r3, r0, #15
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x4c>
 8000294:	03cb      	lsls	r3, r1, #15
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b83      	lsrs	r3, r0, #14
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x58>
 80002a0:	038b      	lsls	r3, r1, #14
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b43      	lsrs	r3, r0, #13
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x64>
 80002ac:	034b      	lsls	r3, r1, #13
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b03      	lsrs	r3, r0, #12
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x70>
 80002b8:	030b      	lsls	r3, r1, #12
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0ac3      	lsrs	r3, r0, #11
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x7c>
 80002c4:	02cb      	lsls	r3, r1, #11
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a83      	lsrs	r3, r0, #10
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x88>
 80002d0:	028b      	lsls	r3, r1, #10
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a43      	lsrs	r3, r0, #9
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x94>
 80002dc:	024b      	lsls	r3, r1, #9
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a03      	lsrs	r3, r0, #8
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0xa0>
 80002e8:	020b      	lsls	r3, r1, #8
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	d2cd      	bcs.n	800028c <__divsi3+0x40>
 80002f0:	09c3      	lsrs	r3, r0, #7
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xae>
 80002f6:	01cb      	lsls	r3, r1, #7
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0983      	lsrs	r3, r0, #6
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xba>
 8000302:	018b      	lsls	r3, r1, #6
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0943      	lsrs	r3, r0, #5
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xc6>
 800030e:	014b      	lsls	r3, r1, #5
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xd2>
 800031a:	010b      	lsls	r3, r1, #4
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	08c3      	lsrs	r3, r0, #3
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xde>
 8000326:	00cb      	lsls	r3, r1, #3
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0883      	lsrs	r3, r0, #2
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xea>
 8000332:	008b      	lsls	r3, r1, #2
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0843      	lsrs	r3, r0, #1
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xf6>
 800033e:	004b      	lsls	r3, r1, #1
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	1a41      	subs	r1, r0, r1
 8000346:	d200      	bcs.n	800034a <__divsi3+0xfe>
 8000348:	4601      	mov	r1, r0
 800034a:	4152      	adcs	r2, r2
 800034c:	4610      	mov	r0, r2
 800034e:	4770      	bx	lr
 8000350:	e05d      	b.n	800040e <__divsi3+0x1c2>
 8000352:	0fca      	lsrs	r2, r1, #31
 8000354:	d000      	beq.n	8000358 <__divsi3+0x10c>
 8000356:	4249      	negs	r1, r1
 8000358:	1003      	asrs	r3, r0, #32
 800035a:	d300      	bcc.n	800035e <__divsi3+0x112>
 800035c:	4240      	negs	r0, r0
 800035e:	4053      	eors	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	469c      	mov	ip, r3
 8000364:	0903      	lsrs	r3, r0, #4
 8000366:	428b      	cmp	r3, r1
 8000368:	d32d      	bcc.n	80003c6 <__divsi3+0x17a>
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d312      	bcc.n	8000396 <__divsi3+0x14a>
 8000370:	22fc      	movs	r2, #252	@ 0xfc
 8000372:	0189      	lsls	r1, r1, #6
 8000374:	ba12      	rev	r2, r2
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d30c      	bcc.n	8000396 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d308      	bcc.n	8000396 <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d304      	bcc.n	8000396 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	d03a      	beq.n	8000406 <__divsi3+0x1ba>
 8000390:	1192      	asrs	r2, r2, #6
 8000392:	e000      	b.n	8000396 <__divsi3+0x14a>
 8000394:	0989      	lsrs	r1, r1, #6
 8000396:	09c3      	lsrs	r3, r0, #7
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x154>
 800039c:	01cb      	lsls	r3, r1, #7
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0983      	lsrs	r3, r0, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x160>
 80003a8:	018b      	lsls	r3, r1, #6
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0943      	lsrs	r3, r0, #5
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x16c>
 80003b4:	014b      	lsls	r3, r1, #5
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0903      	lsrs	r3, r0, #4
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x178>
 80003c0:	010b      	lsls	r3, r1, #4
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	08c3      	lsrs	r3, r0, #3
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x184>
 80003cc:	00cb      	lsls	r3, r1, #3
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0883      	lsrs	r3, r0, #2
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x190>
 80003d8:	008b      	lsls	r3, r1, #2
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	d2d9      	bcs.n	8000394 <__divsi3+0x148>
 80003e0:	0843      	lsrs	r3, r0, #1
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d301      	bcc.n	80003ea <__divsi3+0x19e>
 80003e6:	004b      	lsls	r3, r1, #1
 80003e8:	1ac0      	subs	r0, r0, r3
 80003ea:	4152      	adcs	r2, r2
 80003ec:	1a41      	subs	r1, r0, r1
 80003ee:	d200      	bcs.n	80003f2 <__divsi3+0x1a6>
 80003f0:	4601      	mov	r1, r0
 80003f2:	4663      	mov	r3, ip
 80003f4:	4152      	adcs	r2, r2
 80003f6:	105b      	asrs	r3, r3, #1
 80003f8:	4610      	mov	r0, r2
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x1b4>
 80003fc:	4240      	negs	r0, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d500      	bpl.n	8000404 <__divsi3+0x1b8>
 8000402:	4249      	negs	r1, r1
 8000404:	4770      	bx	lr
 8000406:	4663      	mov	r3, ip
 8000408:	105b      	asrs	r3, r3, #1
 800040a:	d300      	bcc.n	800040e <__divsi3+0x1c2>
 800040c:	4240      	negs	r0, r0
 800040e:	b501      	push	{r0, lr}
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f805 	bl	8000420 <__aeabi_idiv0>
 8000416:	bd02      	pop	{r1, pc}

08000418 <__aeabi_idivmod>:
 8000418:	2900      	cmp	r1, #0
 800041a:	d0f8      	beq.n	800040e <__divsi3+0x1c2>
 800041c:	e716      	b.n	800024c <__divsi3>
 800041e:	4770      	bx	lr

08000420 <__aeabi_idiv0>:
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			@ (mov r8, r8)

08000424 <__aeabi_cdrcmple>:
 8000424:	4684      	mov	ip, r0
 8000426:	0010      	movs	r0, r2
 8000428:	4662      	mov	r2, ip
 800042a:	468c      	mov	ip, r1
 800042c:	0019      	movs	r1, r3
 800042e:	4663      	mov	r3, ip
 8000430:	e000      	b.n	8000434 <__aeabi_cdcmpeq>
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__aeabi_cdcmpeq>:
 8000434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000436:	f000 ffc5 	bl	80013c4 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	d401      	bmi.n	8000442 <__aeabi_cdcmpeq+0xe>
 800043e:	2100      	movs	r1, #0
 8000440:	42c8      	cmn	r0, r1
 8000442:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000444 <__aeabi_dcmpeq>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 ff09 	bl	800125c <__eqdf2>
 800044a:	4240      	negs	r0, r0
 800044c:	3001      	adds	r0, #1
 800044e:	bd10      	pop	{r4, pc}

08000450 <__aeabi_dcmplt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 ffb7 	bl	80013c4 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	db01      	blt.n	800045e <__aeabi_dcmplt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_dcmple>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f000 ffad 	bl	80013c4 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dd01      	ble.n	8000472 <__aeabi_dcmple+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			@ (mov r8, r8)

08000478 <__aeabi_dcmpgt>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f000 ff33 	bl	80012e4 <__gedf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dc01      	bgt.n	8000486 <__aeabi_dcmpgt+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			@ (mov r8, r8)

0800048c <__aeabi_dcmpge>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f000 ff29 	bl	80012e4 <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	da01      	bge.n	800049a <__aeabi_dcmpge+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_dadd>:
 80004a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a2:	464f      	mov	r7, r9
 80004a4:	4646      	mov	r6, r8
 80004a6:	46d6      	mov	lr, sl
 80004a8:	b5c0      	push	{r6, r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	9000      	str	r0, [sp, #0]
 80004ae:	9101      	str	r1, [sp, #4]
 80004b0:	030e      	lsls	r6, r1, #12
 80004b2:	004c      	lsls	r4, r1, #1
 80004b4:	0fcd      	lsrs	r5, r1, #31
 80004b6:	0a71      	lsrs	r1, r6, #9
 80004b8:	9e00      	ldr	r6, [sp, #0]
 80004ba:	005f      	lsls	r7, r3, #1
 80004bc:	0f76      	lsrs	r6, r6, #29
 80004be:	430e      	orrs	r6, r1
 80004c0:	9900      	ldr	r1, [sp, #0]
 80004c2:	9200      	str	r2, [sp, #0]
 80004c4:	9301      	str	r3, [sp, #4]
 80004c6:	00c9      	lsls	r1, r1, #3
 80004c8:	4689      	mov	r9, r1
 80004ca:	0319      	lsls	r1, r3, #12
 80004cc:	0d7b      	lsrs	r3, r7, #21
 80004ce:	4698      	mov	r8, r3
 80004d0:	9b01      	ldr	r3, [sp, #4]
 80004d2:	0a49      	lsrs	r1, r1, #9
 80004d4:	0fdb      	lsrs	r3, r3, #31
 80004d6:	469c      	mov	ip, r3
 80004d8:	9b00      	ldr	r3, [sp, #0]
 80004da:	9a00      	ldr	r2, [sp, #0]
 80004dc:	0f5b      	lsrs	r3, r3, #29
 80004de:	430b      	orrs	r3, r1
 80004e0:	4641      	mov	r1, r8
 80004e2:	0d64      	lsrs	r4, r4, #21
 80004e4:	00d2      	lsls	r2, r2, #3
 80004e6:	1a61      	subs	r1, r4, r1
 80004e8:	4565      	cmp	r5, ip
 80004ea:	d100      	bne.n	80004ee <__aeabi_dadd+0x4e>
 80004ec:	e0a6      	b.n	800063c <__aeabi_dadd+0x19c>
 80004ee:	2900      	cmp	r1, #0
 80004f0:	dd72      	ble.n	80005d8 <__aeabi_dadd+0x138>
 80004f2:	4647      	mov	r7, r8
 80004f4:	2f00      	cmp	r7, #0
 80004f6:	d100      	bne.n	80004fa <__aeabi_dadd+0x5a>
 80004f8:	e0dd      	b.n	80006b6 <__aeabi_dadd+0x216>
 80004fa:	4fcc      	ldr	r7, [pc, #816]	@ (800082c <__aeabi_dadd+0x38c>)
 80004fc:	42bc      	cmp	r4, r7
 80004fe:	d100      	bne.n	8000502 <__aeabi_dadd+0x62>
 8000500:	e19a      	b.n	8000838 <__aeabi_dadd+0x398>
 8000502:	2701      	movs	r7, #1
 8000504:	2938      	cmp	r1, #56	@ 0x38
 8000506:	dc17      	bgt.n	8000538 <__aeabi_dadd+0x98>
 8000508:	2780      	movs	r7, #128	@ 0x80
 800050a:	043f      	lsls	r7, r7, #16
 800050c:	433b      	orrs	r3, r7
 800050e:	291f      	cmp	r1, #31
 8000510:	dd00      	ble.n	8000514 <__aeabi_dadd+0x74>
 8000512:	e1dd      	b.n	80008d0 <__aeabi_dadd+0x430>
 8000514:	2720      	movs	r7, #32
 8000516:	1a78      	subs	r0, r7, r1
 8000518:	001f      	movs	r7, r3
 800051a:	4087      	lsls	r7, r0
 800051c:	46ba      	mov	sl, r7
 800051e:	0017      	movs	r7, r2
 8000520:	40cf      	lsrs	r7, r1
 8000522:	4684      	mov	ip, r0
 8000524:	0038      	movs	r0, r7
 8000526:	4657      	mov	r7, sl
 8000528:	4307      	orrs	r7, r0
 800052a:	4660      	mov	r0, ip
 800052c:	4082      	lsls	r2, r0
 800052e:	40cb      	lsrs	r3, r1
 8000530:	1e50      	subs	r0, r2, #1
 8000532:	4182      	sbcs	r2, r0
 8000534:	1af6      	subs	r6, r6, r3
 8000536:	4317      	orrs	r7, r2
 8000538:	464b      	mov	r3, r9
 800053a:	1bdf      	subs	r7, r3, r7
 800053c:	45b9      	cmp	r9, r7
 800053e:	4180      	sbcs	r0, r0
 8000540:	4240      	negs	r0, r0
 8000542:	1a36      	subs	r6, r6, r0
 8000544:	0233      	lsls	r3, r6, #8
 8000546:	d400      	bmi.n	800054a <__aeabi_dadd+0xaa>
 8000548:	e0ff      	b.n	800074a <__aeabi_dadd+0x2aa>
 800054a:	0276      	lsls	r6, r6, #9
 800054c:	0a76      	lsrs	r6, r6, #9
 800054e:	2e00      	cmp	r6, #0
 8000550:	d100      	bne.n	8000554 <__aeabi_dadd+0xb4>
 8000552:	e13c      	b.n	80007ce <__aeabi_dadd+0x32e>
 8000554:	0030      	movs	r0, r6
 8000556:	f001 ff43 	bl	80023e0 <__clzsi2>
 800055a:	0003      	movs	r3, r0
 800055c:	3b08      	subs	r3, #8
 800055e:	2120      	movs	r1, #32
 8000560:	0038      	movs	r0, r7
 8000562:	1aca      	subs	r2, r1, r3
 8000564:	40d0      	lsrs	r0, r2
 8000566:	409e      	lsls	r6, r3
 8000568:	0002      	movs	r2, r0
 800056a:	409f      	lsls	r7, r3
 800056c:	4332      	orrs	r2, r6
 800056e:	429c      	cmp	r4, r3
 8000570:	dd00      	ble.n	8000574 <__aeabi_dadd+0xd4>
 8000572:	e1a6      	b.n	80008c2 <__aeabi_dadd+0x422>
 8000574:	1b18      	subs	r0, r3, r4
 8000576:	3001      	adds	r0, #1
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	003e      	movs	r6, r7
 800057c:	408f      	lsls	r7, r1
 800057e:	40c6      	lsrs	r6, r0
 8000580:	1e7b      	subs	r3, r7, #1
 8000582:	419f      	sbcs	r7, r3
 8000584:	0013      	movs	r3, r2
 8000586:	408b      	lsls	r3, r1
 8000588:	4337      	orrs	r7, r6
 800058a:	431f      	orrs	r7, r3
 800058c:	40c2      	lsrs	r2, r0
 800058e:	003b      	movs	r3, r7
 8000590:	0016      	movs	r6, r2
 8000592:	2400      	movs	r4, #0
 8000594:	4313      	orrs	r3, r2
 8000596:	d100      	bne.n	800059a <__aeabi_dadd+0xfa>
 8000598:	e1df      	b.n	800095a <__aeabi_dadd+0x4ba>
 800059a:	077b      	lsls	r3, r7, #29
 800059c:	d100      	bne.n	80005a0 <__aeabi_dadd+0x100>
 800059e:	e332      	b.n	8000c06 <__aeabi_dadd+0x766>
 80005a0:	230f      	movs	r3, #15
 80005a2:	003a      	movs	r2, r7
 80005a4:	403b      	ands	r3, r7
 80005a6:	2b04      	cmp	r3, #4
 80005a8:	d004      	beq.n	80005b4 <__aeabi_dadd+0x114>
 80005aa:	1d3a      	adds	r2, r7, #4
 80005ac:	42ba      	cmp	r2, r7
 80005ae:	41bf      	sbcs	r7, r7
 80005b0:	427f      	negs	r7, r7
 80005b2:	19f6      	adds	r6, r6, r7
 80005b4:	0233      	lsls	r3, r6, #8
 80005b6:	d400      	bmi.n	80005ba <__aeabi_dadd+0x11a>
 80005b8:	e323      	b.n	8000c02 <__aeabi_dadd+0x762>
 80005ba:	4b9c      	ldr	r3, [pc, #624]	@ (800082c <__aeabi_dadd+0x38c>)
 80005bc:	3401      	adds	r4, #1
 80005be:	429c      	cmp	r4, r3
 80005c0:	d100      	bne.n	80005c4 <__aeabi_dadd+0x124>
 80005c2:	e0b4      	b.n	800072e <__aeabi_dadd+0x28e>
 80005c4:	4b9a      	ldr	r3, [pc, #616]	@ (8000830 <__aeabi_dadd+0x390>)
 80005c6:	0564      	lsls	r4, r4, #21
 80005c8:	401e      	ands	r6, r3
 80005ca:	0d64      	lsrs	r4, r4, #21
 80005cc:	0777      	lsls	r7, r6, #29
 80005ce:	08d2      	lsrs	r2, r2, #3
 80005d0:	0276      	lsls	r6, r6, #9
 80005d2:	4317      	orrs	r7, r2
 80005d4:	0b36      	lsrs	r6, r6, #12
 80005d6:	e0ac      	b.n	8000732 <__aeabi_dadd+0x292>
 80005d8:	2900      	cmp	r1, #0
 80005da:	d100      	bne.n	80005de <__aeabi_dadd+0x13e>
 80005dc:	e07e      	b.n	80006dc <__aeabi_dadd+0x23c>
 80005de:	4641      	mov	r1, r8
 80005e0:	1b09      	subs	r1, r1, r4
 80005e2:	2c00      	cmp	r4, #0
 80005e4:	d000      	beq.n	80005e8 <__aeabi_dadd+0x148>
 80005e6:	e160      	b.n	80008aa <__aeabi_dadd+0x40a>
 80005e8:	0034      	movs	r4, r6
 80005ea:	4648      	mov	r0, r9
 80005ec:	4304      	orrs	r4, r0
 80005ee:	d100      	bne.n	80005f2 <__aeabi_dadd+0x152>
 80005f0:	e1c9      	b.n	8000986 <__aeabi_dadd+0x4e6>
 80005f2:	1e4c      	subs	r4, r1, #1
 80005f4:	2901      	cmp	r1, #1
 80005f6:	d100      	bne.n	80005fa <__aeabi_dadd+0x15a>
 80005f8:	e22e      	b.n	8000a58 <__aeabi_dadd+0x5b8>
 80005fa:	4d8c      	ldr	r5, [pc, #560]	@ (800082c <__aeabi_dadd+0x38c>)
 80005fc:	42a9      	cmp	r1, r5
 80005fe:	d100      	bne.n	8000602 <__aeabi_dadd+0x162>
 8000600:	e224      	b.n	8000a4c <__aeabi_dadd+0x5ac>
 8000602:	2701      	movs	r7, #1
 8000604:	2c38      	cmp	r4, #56	@ 0x38
 8000606:	dc11      	bgt.n	800062c <__aeabi_dadd+0x18c>
 8000608:	0021      	movs	r1, r4
 800060a:	291f      	cmp	r1, #31
 800060c:	dd00      	ble.n	8000610 <__aeabi_dadd+0x170>
 800060e:	e20b      	b.n	8000a28 <__aeabi_dadd+0x588>
 8000610:	2420      	movs	r4, #32
 8000612:	0037      	movs	r7, r6
 8000614:	4648      	mov	r0, r9
 8000616:	1a64      	subs	r4, r4, r1
 8000618:	40a7      	lsls	r7, r4
 800061a:	40c8      	lsrs	r0, r1
 800061c:	4307      	orrs	r7, r0
 800061e:	4648      	mov	r0, r9
 8000620:	40a0      	lsls	r0, r4
 8000622:	40ce      	lsrs	r6, r1
 8000624:	1e44      	subs	r4, r0, #1
 8000626:	41a0      	sbcs	r0, r4
 8000628:	1b9b      	subs	r3, r3, r6
 800062a:	4307      	orrs	r7, r0
 800062c:	1bd7      	subs	r7, r2, r7
 800062e:	42ba      	cmp	r2, r7
 8000630:	4192      	sbcs	r2, r2
 8000632:	4252      	negs	r2, r2
 8000634:	4665      	mov	r5, ip
 8000636:	4644      	mov	r4, r8
 8000638:	1a9e      	subs	r6, r3, r2
 800063a:	e783      	b.n	8000544 <__aeabi_dadd+0xa4>
 800063c:	2900      	cmp	r1, #0
 800063e:	dc00      	bgt.n	8000642 <__aeabi_dadd+0x1a2>
 8000640:	e09c      	b.n	800077c <__aeabi_dadd+0x2dc>
 8000642:	4647      	mov	r7, r8
 8000644:	2f00      	cmp	r7, #0
 8000646:	d167      	bne.n	8000718 <__aeabi_dadd+0x278>
 8000648:	001f      	movs	r7, r3
 800064a:	4317      	orrs	r7, r2
 800064c:	d100      	bne.n	8000650 <__aeabi_dadd+0x1b0>
 800064e:	e0e4      	b.n	800081a <__aeabi_dadd+0x37a>
 8000650:	1e48      	subs	r0, r1, #1
 8000652:	2901      	cmp	r1, #1
 8000654:	d100      	bne.n	8000658 <__aeabi_dadd+0x1b8>
 8000656:	e19b      	b.n	8000990 <__aeabi_dadd+0x4f0>
 8000658:	4f74      	ldr	r7, [pc, #464]	@ (800082c <__aeabi_dadd+0x38c>)
 800065a:	42b9      	cmp	r1, r7
 800065c:	d100      	bne.n	8000660 <__aeabi_dadd+0x1c0>
 800065e:	e0eb      	b.n	8000838 <__aeabi_dadd+0x398>
 8000660:	2701      	movs	r7, #1
 8000662:	0001      	movs	r1, r0
 8000664:	2838      	cmp	r0, #56	@ 0x38
 8000666:	dc11      	bgt.n	800068c <__aeabi_dadd+0x1ec>
 8000668:	291f      	cmp	r1, #31
 800066a:	dd00      	ble.n	800066e <__aeabi_dadd+0x1ce>
 800066c:	e1c7      	b.n	80009fe <__aeabi_dadd+0x55e>
 800066e:	2720      	movs	r7, #32
 8000670:	1a78      	subs	r0, r7, r1
 8000672:	001f      	movs	r7, r3
 8000674:	4684      	mov	ip, r0
 8000676:	4087      	lsls	r7, r0
 8000678:	0010      	movs	r0, r2
 800067a:	40c8      	lsrs	r0, r1
 800067c:	4307      	orrs	r7, r0
 800067e:	4660      	mov	r0, ip
 8000680:	4082      	lsls	r2, r0
 8000682:	40cb      	lsrs	r3, r1
 8000684:	1e50      	subs	r0, r2, #1
 8000686:	4182      	sbcs	r2, r0
 8000688:	18f6      	adds	r6, r6, r3
 800068a:	4317      	orrs	r7, r2
 800068c:	444f      	add	r7, r9
 800068e:	454f      	cmp	r7, r9
 8000690:	4180      	sbcs	r0, r0
 8000692:	4240      	negs	r0, r0
 8000694:	1836      	adds	r6, r6, r0
 8000696:	0233      	lsls	r3, r6, #8
 8000698:	d557      	bpl.n	800074a <__aeabi_dadd+0x2aa>
 800069a:	4b64      	ldr	r3, [pc, #400]	@ (800082c <__aeabi_dadd+0x38c>)
 800069c:	3401      	adds	r4, #1
 800069e:	429c      	cmp	r4, r3
 80006a0:	d045      	beq.n	800072e <__aeabi_dadd+0x28e>
 80006a2:	2101      	movs	r1, #1
 80006a4:	4b62      	ldr	r3, [pc, #392]	@ (8000830 <__aeabi_dadd+0x390>)
 80006a6:	087a      	lsrs	r2, r7, #1
 80006a8:	401e      	ands	r6, r3
 80006aa:	4039      	ands	r1, r7
 80006ac:	430a      	orrs	r2, r1
 80006ae:	07f7      	lsls	r7, r6, #31
 80006b0:	4317      	orrs	r7, r2
 80006b2:	0876      	lsrs	r6, r6, #1
 80006b4:	e771      	b.n	800059a <__aeabi_dadd+0xfa>
 80006b6:	001f      	movs	r7, r3
 80006b8:	4317      	orrs	r7, r2
 80006ba:	d100      	bne.n	80006be <__aeabi_dadd+0x21e>
 80006bc:	e0ad      	b.n	800081a <__aeabi_dadd+0x37a>
 80006be:	1e4f      	subs	r7, r1, #1
 80006c0:	46bc      	mov	ip, r7
 80006c2:	2901      	cmp	r1, #1
 80006c4:	d100      	bne.n	80006c8 <__aeabi_dadd+0x228>
 80006c6:	e182      	b.n	80009ce <__aeabi_dadd+0x52e>
 80006c8:	4f58      	ldr	r7, [pc, #352]	@ (800082c <__aeabi_dadd+0x38c>)
 80006ca:	42b9      	cmp	r1, r7
 80006cc:	d100      	bne.n	80006d0 <__aeabi_dadd+0x230>
 80006ce:	e190      	b.n	80009f2 <__aeabi_dadd+0x552>
 80006d0:	4661      	mov	r1, ip
 80006d2:	2701      	movs	r7, #1
 80006d4:	2938      	cmp	r1, #56	@ 0x38
 80006d6:	dd00      	ble.n	80006da <__aeabi_dadd+0x23a>
 80006d8:	e72e      	b.n	8000538 <__aeabi_dadd+0x98>
 80006da:	e718      	b.n	800050e <__aeabi_dadd+0x6e>
 80006dc:	4f55      	ldr	r7, [pc, #340]	@ (8000834 <__aeabi_dadd+0x394>)
 80006de:	1c61      	adds	r1, r4, #1
 80006e0:	4239      	tst	r1, r7
 80006e2:	d000      	beq.n	80006e6 <__aeabi_dadd+0x246>
 80006e4:	e0d0      	b.n	8000888 <__aeabi_dadd+0x3e8>
 80006e6:	0031      	movs	r1, r6
 80006e8:	4648      	mov	r0, r9
 80006ea:	001f      	movs	r7, r3
 80006ec:	4301      	orrs	r1, r0
 80006ee:	4317      	orrs	r7, r2
 80006f0:	2c00      	cmp	r4, #0
 80006f2:	d000      	beq.n	80006f6 <__aeabi_dadd+0x256>
 80006f4:	e13d      	b.n	8000972 <__aeabi_dadd+0x4d2>
 80006f6:	2900      	cmp	r1, #0
 80006f8:	d100      	bne.n	80006fc <__aeabi_dadd+0x25c>
 80006fa:	e1bc      	b.n	8000a76 <__aeabi_dadd+0x5d6>
 80006fc:	2f00      	cmp	r7, #0
 80006fe:	d000      	beq.n	8000702 <__aeabi_dadd+0x262>
 8000700:	e1bf      	b.n	8000a82 <__aeabi_dadd+0x5e2>
 8000702:	464b      	mov	r3, r9
 8000704:	2100      	movs	r1, #0
 8000706:	08d8      	lsrs	r0, r3, #3
 8000708:	0777      	lsls	r7, r6, #29
 800070a:	4307      	orrs	r7, r0
 800070c:	08f0      	lsrs	r0, r6, #3
 800070e:	0306      	lsls	r6, r0, #12
 8000710:	054c      	lsls	r4, r1, #21
 8000712:	0b36      	lsrs	r6, r6, #12
 8000714:	0d64      	lsrs	r4, r4, #21
 8000716:	e00c      	b.n	8000732 <__aeabi_dadd+0x292>
 8000718:	4f44      	ldr	r7, [pc, #272]	@ (800082c <__aeabi_dadd+0x38c>)
 800071a:	42bc      	cmp	r4, r7
 800071c:	d100      	bne.n	8000720 <__aeabi_dadd+0x280>
 800071e:	e08b      	b.n	8000838 <__aeabi_dadd+0x398>
 8000720:	2701      	movs	r7, #1
 8000722:	2938      	cmp	r1, #56	@ 0x38
 8000724:	dcb2      	bgt.n	800068c <__aeabi_dadd+0x1ec>
 8000726:	2780      	movs	r7, #128	@ 0x80
 8000728:	043f      	lsls	r7, r7, #16
 800072a:	433b      	orrs	r3, r7
 800072c:	e79c      	b.n	8000668 <__aeabi_dadd+0x1c8>
 800072e:	2600      	movs	r6, #0
 8000730:	2700      	movs	r7, #0
 8000732:	0524      	lsls	r4, r4, #20
 8000734:	4334      	orrs	r4, r6
 8000736:	07ed      	lsls	r5, r5, #31
 8000738:	432c      	orrs	r4, r5
 800073a:	0038      	movs	r0, r7
 800073c:	0021      	movs	r1, r4
 800073e:	b002      	add	sp, #8
 8000740:	bce0      	pop	{r5, r6, r7}
 8000742:	46ba      	mov	sl, r7
 8000744:	46b1      	mov	r9, r6
 8000746:	46a8      	mov	r8, r5
 8000748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800074a:	077b      	lsls	r3, r7, #29
 800074c:	d004      	beq.n	8000758 <__aeabi_dadd+0x2b8>
 800074e:	230f      	movs	r3, #15
 8000750:	403b      	ands	r3, r7
 8000752:	2b04      	cmp	r3, #4
 8000754:	d000      	beq.n	8000758 <__aeabi_dadd+0x2b8>
 8000756:	e728      	b.n	80005aa <__aeabi_dadd+0x10a>
 8000758:	08f8      	lsrs	r0, r7, #3
 800075a:	4b34      	ldr	r3, [pc, #208]	@ (800082c <__aeabi_dadd+0x38c>)
 800075c:	0777      	lsls	r7, r6, #29
 800075e:	4307      	orrs	r7, r0
 8000760:	08f0      	lsrs	r0, r6, #3
 8000762:	429c      	cmp	r4, r3
 8000764:	d000      	beq.n	8000768 <__aeabi_dadd+0x2c8>
 8000766:	e24a      	b.n	8000bfe <__aeabi_dadd+0x75e>
 8000768:	003b      	movs	r3, r7
 800076a:	4303      	orrs	r3, r0
 800076c:	d059      	beq.n	8000822 <__aeabi_dadd+0x382>
 800076e:	2680      	movs	r6, #128	@ 0x80
 8000770:	0336      	lsls	r6, r6, #12
 8000772:	4306      	orrs	r6, r0
 8000774:	0336      	lsls	r6, r6, #12
 8000776:	4c2d      	ldr	r4, [pc, #180]	@ (800082c <__aeabi_dadd+0x38c>)
 8000778:	0b36      	lsrs	r6, r6, #12
 800077a:	e7da      	b.n	8000732 <__aeabi_dadd+0x292>
 800077c:	2900      	cmp	r1, #0
 800077e:	d061      	beq.n	8000844 <__aeabi_dadd+0x3a4>
 8000780:	4641      	mov	r1, r8
 8000782:	1b09      	subs	r1, r1, r4
 8000784:	2c00      	cmp	r4, #0
 8000786:	d100      	bne.n	800078a <__aeabi_dadd+0x2ea>
 8000788:	e0b9      	b.n	80008fe <__aeabi_dadd+0x45e>
 800078a:	4c28      	ldr	r4, [pc, #160]	@ (800082c <__aeabi_dadd+0x38c>)
 800078c:	45a0      	cmp	r8, r4
 800078e:	d100      	bne.n	8000792 <__aeabi_dadd+0x2f2>
 8000790:	e1a5      	b.n	8000ade <__aeabi_dadd+0x63e>
 8000792:	2701      	movs	r7, #1
 8000794:	2938      	cmp	r1, #56	@ 0x38
 8000796:	dc13      	bgt.n	80007c0 <__aeabi_dadd+0x320>
 8000798:	2480      	movs	r4, #128	@ 0x80
 800079a:	0424      	lsls	r4, r4, #16
 800079c:	4326      	orrs	r6, r4
 800079e:	291f      	cmp	r1, #31
 80007a0:	dd00      	ble.n	80007a4 <__aeabi_dadd+0x304>
 80007a2:	e1c8      	b.n	8000b36 <__aeabi_dadd+0x696>
 80007a4:	2420      	movs	r4, #32
 80007a6:	0037      	movs	r7, r6
 80007a8:	4648      	mov	r0, r9
 80007aa:	1a64      	subs	r4, r4, r1
 80007ac:	40a7      	lsls	r7, r4
 80007ae:	40c8      	lsrs	r0, r1
 80007b0:	4307      	orrs	r7, r0
 80007b2:	4648      	mov	r0, r9
 80007b4:	40a0      	lsls	r0, r4
 80007b6:	40ce      	lsrs	r6, r1
 80007b8:	1e44      	subs	r4, r0, #1
 80007ba:	41a0      	sbcs	r0, r4
 80007bc:	199b      	adds	r3, r3, r6
 80007be:	4307      	orrs	r7, r0
 80007c0:	18bf      	adds	r7, r7, r2
 80007c2:	4297      	cmp	r7, r2
 80007c4:	4192      	sbcs	r2, r2
 80007c6:	4252      	negs	r2, r2
 80007c8:	4644      	mov	r4, r8
 80007ca:	18d6      	adds	r6, r2, r3
 80007cc:	e763      	b.n	8000696 <__aeabi_dadd+0x1f6>
 80007ce:	0038      	movs	r0, r7
 80007d0:	f001 fe06 	bl	80023e0 <__clzsi2>
 80007d4:	0003      	movs	r3, r0
 80007d6:	3318      	adds	r3, #24
 80007d8:	2b1f      	cmp	r3, #31
 80007da:	dc00      	bgt.n	80007de <__aeabi_dadd+0x33e>
 80007dc:	e6bf      	b.n	800055e <__aeabi_dadd+0xbe>
 80007de:	003a      	movs	r2, r7
 80007e0:	3808      	subs	r0, #8
 80007e2:	4082      	lsls	r2, r0
 80007e4:	429c      	cmp	r4, r3
 80007e6:	dd00      	ble.n	80007ea <__aeabi_dadd+0x34a>
 80007e8:	e083      	b.n	80008f2 <__aeabi_dadd+0x452>
 80007ea:	1b1b      	subs	r3, r3, r4
 80007ec:	1c58      	adds	r0, r3, #1
 80007ee:	281f      	cmp	r0, #31
 80007f0:	dc00      	bgt.n	80007f4 <__aeabi_dadd+0x354>
 80007f2:	e1b4      	b.n	8000b5e <__aeabi_dadd+0x6be>
 80007f4:	0017      	movs	r7, r2
 80007f6:	3b1f      	subs	r3, #31
 80007f8:	40df      	lsrs	r7, r3
 80007fa:	2820      	cmp	r0, #32
 80007fc:	d005      	beq.n	800080a <__aeabi_dadd+0x36a>
 80007fe:	2340      	movs	r3, #64	@ 0x40
 8000800:	1a1b      	subs	r3, r3, r0
 8000802:	409a      	lsls	r2, r3
 8000804:	1e53      	subs	r3, r2, #1
 8000806:	419a      	sbcs	r2, r3
 8000808:	4317      	orrs	r7, r2
 800080a:	2400      	movs	r4, #0
 800080c:	2f00      	cmp	r7, #0
 800080e:	d00a      	beq.n	8000826 <__aeabi_dadd+0x386>
 8000810:	077b      	lsls	r3, r7, #29
 8000812:	d000      	beq.n	8000816 <__aeabi_dadd+0x376>
 8000814:	e6c4      	b.n	80005a0 <__aeabi_dadd+0x100>
 8000816:	0026      	movs	r6, r4
 8000818:	e79e      	b.n	8000758 <__aeabi_dadd+0x2b8>
 800081a:	464b      	mov	r3, r9
 800081c:	000c      	movs	r4, r1
 800081e:	08d8      	lsrs	r0, r3, #3
 8000820:	e79b      	b.n	800075a <__aeabi_dadd+0x2ba>
 8000822:	2700      	movs	r7, #0
 8000824:	4c01      	ldr	r4, [pc, #4]	@ (800082c <__aeabi_dadd+0x38c>)
 8000826:	2600      	movs	r6, #0
 8000828:	e783      	b.n	8000732 <__aeabi_dadd+0x292>
 800082a:	46c0      	nop			@ (mov r8, r8)
 800082c:	000007ff 	.word	0x000007ff
 8000830:	ff7fffff 	.word	0xff7fffff
 8000834:	000007fe 	.word	0x000007fe
 8000838:	464b      	mov	r3, r9
 800083a:	0777      	lsls	r7, r6, #29
 800083c:	08d8      	lsrs	r0, r3, #3
 800083e:	4307      	orrs	r7, r0
 8000840:	08f0      	lsrs	r0, r6, #3
 8000842:	e791      	b.n	8000768 <__aeabi_dadd+0x2c8>
 8000844:	4fcd      	ldr	r7, [pc, #820]	@ (8000b7c <__aeabi_dadd+0x6dc>)
 8000846:	1c61      	adds	r1, r4, #1
 8000848:	4239      	tst	r1, r7
 800084a:	d16b      	bne.n	8000924 <__aeabi_dadd+0x484>
 800084c:	0031      	movs	r1, r6
 800084e:	4648      	mov	r0, r9
 8000850:	4301      	orrs	r1, r0
 8000852:	2c00      	cmp	r4, #0
 8000854:	d000      	beq.n	8000858 <__aeabi_dadd+0x3b8>
 8000856:	e14b      	b.n	8000af0 <__aeabi_dadd+0x650>
 8000858:	001f      	movs	r7, r3
 800085a:	4317      	orrs	r7, r2
 800085c:	2900      	cmp	r1, #0
 800085e:	d100      	bne.n	8000862 <__aeabi_dadd+0x3c2>
 8000860:	e181      	b.n	8000b66 <__aeabi_dadd+0x6c6>
 8000862:	2f00      	cmp	r7, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0x3c8>
 8000866:	e74c      	b.n	8000702 <__aeabi_dadd+0x262>
 8000868:	444a      	add	r2, r9
 800086a:	454a      	cmp	r2, r9
 800086c:	4180      	sbcs	r0, r0
 800086e:	18f6      	adds	r6, r6, r3
 8000870:	4240      	negs	r0, r0
 8000872:	1836      	adds	r6, r6, r0
 8000874:	0233      	lsls	r3, r6, #8
 8000876:	d500      	bpl.n	800087a <__aeabi_dadd+0x3da>
 8000878:	e1b0      	b.n	8000bdc <__aeabi_dadd+0x73c>
 800087a:	0017      	movs	r7, r2
 800087c:	4691      	mov	r9, r2
 800087e:	4337      	orrs	r7, r6
 8000880:	d000      	beq.n	8000884 <__aeabi_dadd+0x3e4>
 8000882:	e73e      	b.n	8000702 <__aeabi_dadd+0x262>
 8000884:	2600      	movs	r6, #0
 8000886:	e754      	b.n	8000732 <__aeabi_dadd+0x292>
 8000888:	4649      	mov	r1, r9
 800088a:	1a89      	subs	r1, r1, r2
 800088c:	4688      	mov	r8, r1
 800088e:	45c1      	cmp	r9, r8
 8000890:	41bf      	sbcs	r7, r7
 8000892:	1af1      	subs	r1, r6, r3
 8000894:	427f      	negs	r7, r7
 8000896:	1bc9      	subs	r1, r1, r7
 8000898:	020f      	lsls	r7, r1, #8
 800089a:	d461      	bmi.n	8000960 <__aeabi_dadd+0x4c0>
 800089c:	4647      	mov	r7, r8
 800089e:	430f      	orrs	r7, r1
 80008a0:	d100      	bne.n	80008a4 <__aeabi_dadd+0x404>
 80008a2:	e0bd      	b.n	8000a20 <__aeabi_dadd+0x580>
 80008a4:	000e      	movs	r6, r1
 80008a6:	4647      	mov	r7, r8
 80008a8:	e651      	b.n	800054e <__aeabi_dadd+0xae>
 80008aa:	4cb5      	ldr	r4, [pc, #724]	@ (8000b80 <__aeabi_dadd+0x6e0>)
 80008ac:	45a0      	cmp	r8, r4
 80008ae:	d100      	bne.n	80008b2 <__aeabi_dadd+0x412>
 80008b0:	e100      	b.n	8000ab4 <__aeabi_dadd+0x614>
 80008b2:	2701      	movs	r7, #1
 80008b4:	2938      	cmp	r1, #56	@ 0x38
 80008b6:	dd00      	ble.n	80008ba <__aeabi_dadd+0x41a>
 80008b8:	e6b8      	b.n	800062c <__aeabi_dadd+0x18c>
 80008ba:	2480      	movs	r4, #128	@ 0x80
 80008bc:	0424      	lsls	r4, r4, #16
 80008be:	4326      	orrs	r6, r4
 80008c0:	e6a3      	b.n	800060a <__aeabi_dadd+0x16a>
 80008c2:	4eb0      	ldr	r6, [pc, #704]	@ (8000b84 <__aeabi_dadd+0x6e4>)
 80008c4:	1ae4      	subs	r4, r4, r3
 80008c6:	4016      	ands	r6, r2
 80008c8:	077b      	lsls	r3, r7, #29
 80008ca:	d000      	beq.n	80008ce <__aeabi_dadd+0x42e>
 80008cc:	e73f      	b.n	800074e <__aeabi_dadd+0x2ae>
 80008ce:	e743      	b.n	8000758 <__aeabi_dadd+0x2b8>
 80008d0:	000f      	movs	r7, r1
 80008d2:	0018      	movs	r0, r3
 80008d4:	3f20      	subs	r7, #32
 80008d6:	40f8      	lsrs	r0, r7
 80008d8:	4684      	mov	ip, r0
 80008da:	2920      	cmp	r1, #32
 80008dc:	d003      	beq.n	80008e6 <__aeabi_dadd+0x446>
 80008de:	2740      	movs	r7, #64	@ 0x40
 80008e0:	1a79      	subs	r1, r7, r1
 80008e2:	408b      	lsls	r3, r1
 80008e4:	431a      	orrs	r2, r3
 80008e6:	1e53      	subs	r3, r2, #1
 80008e8:	419a      	sbcs	r2, r3
 80008ea:	4663      	mov	r3, ip
 80008ec:	0017      	movs	r7, r2
 80008ee:	431f      	orrs	r7, r3
 80008f0:	e622      	b.n	8000538 <__aeabi_dadd+0x98>
 80008f2:	48a4      	ldr	r0, [pc, #656]	@ (8000b84 <__aeabi_dadd+0x6e4>)
 80008f4:	1ae1      	subs	r1, r4, r3
 80008f6:	4010      	ands	r0, r2
 80008f8:	0747      	lsls	r7, r0, #29
 80008fa:	08c0      	lsrs	r0, r0, #3
 80008fc:	e707      	b.n	800070e <__aeabi_dadd+0x26e>
 80008fe:	0034      	movs	r4, r6
 8000900:	4648      	mov	r0, r9
 8000902:	4304      	orrs	r4, r0
 8000904:	d100      	bne.n	8000908 <__aeabi_dadd+0x468>
 8000906:	e0fa      	b.n	8000afe <__aeabi_dadd+0x65e>
 8000908:	1e4c      	subs	r4, r1, #1
 800090a:	2901      	cmp	r1, #1
 800090c:	d100      	bne.n	8000910 <__aeabi_dadd+0x470>
 800090e:	e0d7      	b.n	8000ac0 <__aeabi_dadd+0x620>
 8000910:	4f9b      	ldr	r7, [pc, #620]	@ (8000b80 <__aeabi_dadd+0x6e0>)
 8000912:	42b9      	cmp	r1, r7
 8000914:	d100      	bne.n	8000918 <__aeabi_dadd+0x478>
 8000916:	e0e2      	b.n	8000ade <__aeabi_dadd+0x63e>
 8000918:	2701      	movs	r7, #1
 800091a:	2c38      	cmp	r4, #56	@ 0x38
 800091c:	dd00      	ble.n	8000920 <__aeabi_dadd+0x480>
 800091e:	e74f      	b.n	80007c0 <__aeabi_dadd+0x320>
 8000920:	0021      	movs	r1, r4
 8000922:	e73c      	b.n	800079e <__aeabi_dadd+0x2fe>
 8000924:	4c96      	ldr	r4, [pc, #600]	@ (8000b80 <__aeabi_dadd+0x6e0>)
 8000926:	42a1      	cmp	r1, r4
 8000928:	d100      	bne.n	800092c <__aeabi_dadd+0x48c>
 800092a:	e0dd      	b.n	8000ae8 <__aeabi_dadd+0x648>
 800092c:	444a      	add	r2, r9
 800092e:	454a      	cmp	r2, r9
 8000930:	4180      	sbcs	r0, r0
 8000932:	18f3      	adds	r3, r6, r3
 8000934:	4240      	negs	r0, r0
 8000936:	1818      	adds	r0, r3, r0
 8000938:	07c7      	lsls	r7, r0, #31
 800093a:	0852      	lsrs	r2, r2, #1
 800093c:	4317      	orrs	r7, r2
 800093e:	0846      	lsrs	r6, r0, #1
 8000940:	0752      	lsls	r2, r2, #29
 8000942:	d005      	beq.n	8000950 <__aeabi_dadd+0x4b0>
 8000944:	220f      	movs	r2, #15
 8000946:	000c      	movs	r4, r1
 8000948:	403a      	ands	r2, r7
 800094a:	2a04      	cmp	r2, #4
 800094c:	d000      	beq.n	8000950 <__aeabi_dadd+0x4b0>
 800094e:	e62c      	b.n	80005aa <__aeabi_dadd+0x10a>
 8000950:	0776      	lsls	r6, r6, #29
 8000952:	08ff      	lsrs	r7, r7, #3
 8000954:	4337      	orrs	r7, r6
 8000956:	0900      	lsrs	r0, r0, #4
 8000958:	e6d9      	b.n	800070e <__aeabi_dadd+0x26e>
 800095a:	2700      	movs	r7, #0
 800095c:	2600      	movs	r6, #0
 800095e:	e6e8      	b.n	8000732 <__aeabi_dadd+0x292>
 8000960:	4649      	mov	r1, r9
 8000962:	1a57      	subs	r7, r2, r1
 8000964:	42ba      	cmp	r2, r7
 8000966:	4192      	sbcs	r2, r2
 8000968:	1b9e      	subs	r6, r3, r6
 800096a:	4252      	negs	r2, r2
 800096c:	4665      	mov	r5, ip
 800096e:	1ab6      	subs	r6, r6, r2
 8000970:	e5ed      	b.n	800054e <__aeabi_dadd+0xae>
 8000972:	2900      	cmp	r1, #0
 8000974:	d000      	beq.n	8000978 <__aeabi_dadd+0x4d8>
 8000976:	e0c6      	b.n	8000b06 <__aeabi_dadd+0x666>
 8000978:	2f00      	cmp	r7, #0
 800097a:	d167      	bne.n	8000a4c <__aeabi_dadd+0x5ac>
 800097c:	2680      	movs	r6, #128	@ 0x80
 800097e:	2500      	movs	r5, #0
 8000980:	4c7f      	ldr	r4, [pc, #508]	@ (8000b80 <__aeabi_dadd+0x6e0>)
 8000982:	0336      	lsls	r6, r6, #12
 8000984:	e6d5      	b.n	8000732 <__aeabi_dadd+0x292>
 8000986:	4665      	mov	r5, ip
 8000988:	000c      	movs	r4, r1
 800098a:	001e      	movs	r6, r3
 800098c:	08d0      	lsrs	r0, r2, #3
 800098e:	e6e4      	b.n	800075a <__aeabi_dadd+0x2ba>
 8000990:	444a      	add	r2, r9
 8000992:	454a      	cmp	r2, r9
 8000994:	4180      	sbcs	r0, r0
 8000996:	18f3      	adds	r3, r6, r3
 8000998:	4240      	negs	r0, r0
 800099a:	1818      	adds	r0, r3, r0
 800099c:	0011      	movs	r1, r2
 800099e:	0203      	lsls	r3, r0, #8
 80009a0:	d400      	bmi.n	80009a4 <__aeabi_dadd+0x504>
 80009a2:	e096      	b.n	8000ad2 <__aeabi_dadd+0x632>
 80009a4:	4b77      	ldr	r3, [pc, #476]	@ (8000b84 <__aeabi_dadd+0x6e4>)
 80009a6:	0849      	lsrs	r1, r1, #1
 80009a8:	4018      	ands	r0, r3
 80009aa:	07c3      	lsls	r3, r0, #31
 80009ac:	430b      	orrs	r3, r1
 80009ae:	0844      	lsrs	r4, r0, #1
 80009b0:	0749      	lsls	r1, r1, #29
 80009b2:	d100      	bne.n	80009b6 <__aeabi_dadd+0x516>
 80009b4:	e129      	b.n	8000c0a <__aeabi_dadd+0x76a>
 80009b6:	220f      	movs	r2, #15
 80009b8:	401a      	ands	r2, r3
 80009ba:	2a04      	cmp	r2, #4
 80009bc:	d100      	bne.n	80009c0 <__aeabi_dadd+0x520>
 80009be:	e0ea      	b.n	8000b96 <__aeabi_dadd+0x6f6>
 80009c0:	1d1f      	adds	r7, r3, #4
 80009c2:	429f      	cmp	r7, r3
 80009c4:	41b6      	sbcs	r6, r6
 80009c6:	4276      	negs	r6, r6
 80009c8:	1936      	adds	r6, r6, r4
 80009ca:	2402      	movs	r4, #2
 80009cc:	e6c4      	b.n	8000758 <__aeabi_dadd+0x2b8>
 80009ce:	4649      	mov	r1, r9
 80009d0:	1a8f      	subs	r7, r1, r2
 80009d2:	45b9      	cmp	r9, r7
 80009d4:	4180      	sbcs	r0, r0
 80009d6:	1af6      	subs	r6, r6, r3
 80009d8:	4240      	negs	r0, r0
 80009da:	1a36      	subs	r6, r6, r0
 80009dc:	0233      	lsls	r3, r6, #8
 80009de:	d406      	bmi.n	80009ee <__aeabi_dadd+0x54e>
 80009e0:	0773      	lsls	r3, r6, #29
 80009e2:	08ff      	lsrs	r7, r7, #3
 80009e4:	2101      	movs	r1, #1
 80009e6:	431f      	orrs	r7, r3
 80009e8:	08f0      	lsrs	r0, r6, #3
 80009ea:	e690      	b.n	800070e <__aeabi_dadd+0x26e>
 80009ec:	4665      	mov	r5, ip
 80009ee:	2401      	movs	r4, #1
 80009f0:	e5ab      	b.n	800054a <__aeabi_dadd+0xaa>
 80009f2:	464b      	mov	r3, r9
 80009f4:	0777      	lsls	r7, r6, #29
 80009f6:	08d8      	lsrs	r0, r3, #3
 80009f8:	4307      	orrs	r7, r0
 80009fa:	08f0      	lsrs	r0, r6, #3
 80009fc:	e6b4      	b.n	8000768 <__aeabi_dadd+0x2c8>
 80009fe:	000f      	movs	r7, r1
 8000a00:	0018      	movs	r0, r3
 8000a02:	3f20      	subs	r7, #32
 8000a04:	40f8      	lsrs	r0, r7
 8000a06:	4684      	mov	ip, r0
 8000a08:	2920      	cmp	r1, #32
 8000a0a:	d003      	beq.n	8000a14 <__aeabi_dadd+0x574>
 8000a0c:	2740      	movs	r7, #64	@ 0x40
 8000a0e:	1a79      	subs	r1, r7, r1
 8000a10:	408b      	lsls	r3, r1
 8000a12:	431a      	orrs	r2, r3
 8000a14:	1e53      	subs	r3, r2, #1
 8000a16:	419a      	sbcs	r2, r3
 8000a18:	4663      	mov	r3, ip
 8000a1a:	0017      	movs	r7, r2
 8000a1c:	431f      	orrs	r7, r3
 8000a1e:	e635      	b.n	800068c <__aeabi_dadd+0x1ec>
 8000a20:	2500      	movs	r5, #0
 8000a22:	2400      	movs	r4, #0
 8000a24:	2600      	movs	r6, #0
 8000a26:	e684      	b.n	8000732 <__aeabi_dadd+0x292>
 8000a28:	000c      	movs	r4, r1
 8000a2a:	0035      	movs	r5, r6
 8000a2c:	3c20      	subs	r4, #32
 8000a2e:	40e5      	lsrs	r5, r4
 8000a30:	2920      	cmp	r1, #32
 8000a32:	d005      	beq.n	8000a40 <__aeabi_dadd+0x5a0>
 8000a34:	2440      	movs	r4, #64	@ 0x40
 8000a36:	1a61      	subs	r1, r4, r1
 8000a38:	408e      	lsls	r6, r1
 8000a3a:	4649      	mov	r1, r9
 8000a3c:	4331      	orrs	r1, r6
 8000a3e:	4689      	mov	r9, r1
 8000a40:	4648      	mov	r0, r9
 8000a42:	1e41      	subs	r1, r0, #1
 8000a44:	4188      	sbcs	r0, r1
 8000a46:	0007      	movs	r7, r0
 8000a48:	432f      	orrs	r7, r5
 8000a4a:	e5ef      	b.n	800062c <__aeabi_dadd+0x18c>
 8000a4c:	08d2      	lsrs	r2, r2, #3
 8000a4e:	075f      	lsls	r7, r3, #29
 8000a50:	4665      	mov	r5, ip
 8000a52:	4317      	orrs	r7, r2
 8000a54:	08d8      	lsrs	r0, r3, #3
 8000a56:	e687      	b.n	8000768 <__aeabi_dadd+0x2c8>
 8000a58:	1a17      	subs	r7, r2, r0
 8000a5a:	42ba      	cmp	r2, r7
 8000a5c:	4192      	sbcs	r2, r2
 8000a5e:	1b9e      	subs	r6, r3, r6
 8000a60:	4252      	negs	r2, r2
 8000a62:	1ab6      	subs	r6, r6, r2
 8000a64:	0233      	lsls	r3, r6, #8
 8000a66:	d4c1      	bmi.n	80009ec <__aeabi_dadd+0x54c>
 8000a68:	0773      	lsls	r3, r6, #29
 8000a6a:	08ff      	lsrs	r7, r7, #3
 8000a6c:	4665      	mov	r5, ip
 8000a6e:	2101      	movs	r1, #1
 8000a70:	431f      	orrs	r7, r3
 8000a72:	08f0      	lsrs	r0, r6, #3
 8000a74:	e64b      	b.n	800070e <__aeabi_dadd+0x26e>
 8000a76:	2f00      	cmp	r7, #0
 8000a78:	d07b      	beq.n	8000b72 <__aeabi_dadd+0x6d2>
 8000a7a:	4665      	mov	r5, ip
 8000a7c:	001e      	movs	r6, r3
 8000a7e:	4691      	mov	r9, r2
 8000a80:	e63f      	b.n	8000702 <__aeabi_dadd+0x262>
 8000a82:	1a81      	subs	r1, r0, r2
 8000a84:	4688      	mov	r8, r1
 8000a86:	45c1      	cmp	r9, r8
 8000a88:	41a4      	sbcs	r4, r4
 8000a8a:	1af1      	subs	r1, r6, r3
 8000a8c:	4264      	negs	r4, r4
 8000a8e:	1b09      	subs	r1, r1, r4
 8000a90:	2480      	movs	r4, #128	@ 0x80
 8000a92:	0424      	lsls	r4, r4, #16
 8000a94:	4221      	tst	r1, r4
 8000a96:	d077      	beq.n	8000b88 <__aeabi_dadd+0x6e8>
 8000a98:	1a10      	subs	r0, r2, r0
 8000a9a:	4282      	cmp	r2, r0
 8000a9c:	4192      	sbcs	r2, r2
 8000a9e:	0007      	movs	r7, r0
 8000aa0:	1b9e      	subs	r6, r3, r6
 8000aa2:	4252      	negs	r2, r2
 8000aa4:	1ab6      	subs	r6, r6, r2
 8000aa6:	4337      	orrs	r7, r6
 8000aa8:	d000      	beq.n	8000aac <__aeabi_dadd+0x60c>
 8000aaa:	e0a0      	b.n	8000bee <__aeabi_dadd+0x74e>
 8000aac:	4665      	mov	r5, ip
 8000aae:	2400      	movs	r4, #0
 8000ab0:	2600      	movs	r6, #0
 8000ab2:	e63e      	b.n	8000732 <__aeabi_dadd+0x292>
 8000ab4:	075f      	lsls	r7, r3, #29
 8000ab6:	08d2      	lsrs	r2, r2, #3
 8000ab8:	4665      	mov	r5, ip
 8000aba:	4317      	orrs	r7, r2
 8000abc:	08d8      	lsrs	r0, r3, #3
 8000abe:	e653      	b.n	8000768 <__aeabi_dadd+0x2c8>
 8000ac0:	1881      	adds	r1, r0, r2
 8000ac2:	4291      	cmp	r1, r2
 8000ac4:	4192      	sbcs	r2, r2
 8000ac6:	18f0      	adds	r0, r6, r3
 8000ac8:	4252      	negs	r2, r2
 8000aca:	1880      	adds	r0, r0, r2
 8000acc:	0203      	lsls	r3, r0, #8
 8000ace:	d500      	bpl.n	8000ad2 <__aeabi_dadd+0x632>
 8000ad0:	e768      	b.n	80009a4 <__aeabi_dadd+0x504>
 8000ad2:	0747      	lsls	r7, r0, #29
 8000ad4:	08c9      	lsrs	r1, r1, #3
 8000ad6:	430f      	orrs	r7, r1
 8000ad8:	08c0      	lsrs	r0, r0, #3
 8000ada:	2101      	movs	r1, #1
 8000adc:	e617      	b.n	800070e <__aeabi_dadd+0x26e>
 8000ade:	08d2      	lsrs	r2, r2, #3
 8000ae0:	075f      	lsls	r7, r3, #29
 8000ae2:	4317      	orrs	r7, r2
 8000ae4:	08d8      	lsrs	r0, r3, #3
 8000ae6:	e63f      	b.n	8000768 <__aeabi_dadd+0x2c8>
 8000ae8:	000c      	movs	r4, r1
 8000aea:	2600      	movs	r6, #0
 8000aec:	2700      	movs	r7, #0
 8000aee:	e620      	b.n	8000732 <__aeabi_dadd+0x292>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	d156      	bne.n	8000ba2 <__aeabi_dadd+0x702>
 8000af4:	075f      	lsls	r7, r3, #29
 8000af6:	08d2      	lsrs	r2, r2, #3
 8000af8:	4317      	orrs	r7, r2
 8000afa:	08d8      	lsrs	r0, r3, #3
 8000afc:	e634      	b.n	8000768 <__aeabi_dadd+0x2c8>
 8000afe:	000c      	movs	r4, r1
 8000b00:	001e      	movs	r6, r3
 8000b02:	08d0      	lsrs	r0, r2, #3
 8000b04:	e629      	b.n	800075a <__aeabi_dadd+0x2ba>
 8000b06:	08c1      	lsrs	r1, r0, #3
 8000b08:	0770      	lsls	r0, r6, #29
 8000b0a:	4301      	orrs	r1, r0
 8000b0c:	08f0      	lsrs	r0, r6, #3
 8000b0e:	2f00      	cmp	r7, #0
 8000b10:	d062      	beq.n	8000bd8 <__aeabi_dadd+0x738>
 8000b12:	2480      	movs	r4, #128	@ 0x80
 8000b14:	0324      	lsls	r4, r4, #12
 8000b16:	4220      	tst	r0, r4
 8000b18:	d007      	beq.n	8000b2a <__aeabi_dadd+0x68a>
 8000b1a:	08de      	lsrs	r6, r3, #3
 8000b1c:	4226      	tst	r6, r4
 8000b1e:	d104      	bne.n	8000b2a <__aeabi_dadd+0x68a>
 8000b20:	4665      	mov	r5, ip
 8000b22:	0030      	movs	r0, r6
 8000b24:	08d1      	lsrs	r1, r2, #3
 8000b26:	075b      	lsls	r3, r3, #29
 8000b28:	4319      	orrs	r1, r3
 8000b2a:	0f4f      	lsrs	r7, r1, #29
 8000b2c:	00c9      	lsls	r1, r1, #3
 8000b2e:	08c9      	lsrs	r1, r1, #3
 8000b30:	077f      	lsls	r7, r7, #29
 8000b32:	430f      	orrs	r7, r1
 8000b34:	e618      	b.n	8000768 <__aeabi_dadd+0x2c8>
 8000b36:	000c      	movs	r4, r1
 8000b38:	0030      	movs	r0, r6
 8000b3a:	3c20      	subs	r4, #32
 8000b3c:	40e0      	lsrs	r0, r4
 8000b3e:	4684      	mov	ip, r0
 8000b40:	2920      	cmp	r1, #32
 8000b42:	d005      	beq.n	8000b50 <__aeabi_dadd+0x6b0>
 8000b44:	2440      	movs	r4, #64	@ 0x40
 8000b46:	1a61      	subs	r1, r4, r1
 8000b48:	408e      	lsls	r6, r1
 8000b4a:	4649      	mov	r1, r9
 8000b4c:	4331      	orrs	r1, r6
 8000b4e:	4689      	mov	r9, r1
 8000b50:	4648      	mov	r0, r9
 8000b52:	1e41      	subs	r1, r0, #1
 8000b54:	4188      	sbcs	r0, r1
 8000b56:	4661      	mov	r1, ip
 8000b58:	0007      	movs	r7, r0
 8000b5a:	430f      	orrs	r7, r1
 8000b5c:	e630      	b.n	80007c0 <__aeabi_dadd+0x320>
 8000b5e:	2120      	movs	r1, #32
 8000b60:	2700      	movs	r7, #0
 8000b62:	1a09      	subs	r1, r1, r0
 8000b64:	e50e      	b.n	8000584 <__aeabi_dadd+0xe4>
 8000b66:	001e      	movs	r6, r3
 8000b68:	2f00      	cmp	r7, #0
 8000b6a:	d000      	beq.n	8000b6e <__aeabi_dadd+0x6ce>
 8000b6c:	e522      	b.n	80005b4 <__aeabi_dadd+0x114>
 8000b6e:	2400      	movs	r4, #0
 8000b70:	e758      	b.n	8000a24 <__aeabi_dadd+0x584>
 8000b72:	2500      	movs	r5, #0
 8000b74:	2400      	movs	r4, #0
 8000b76:	2600      	movs	r6, #0
 8000b78:	e5db      	b.n	8000732 <__aeabi_dadd+0x292>
 8000b7a:	46c0      	nop			@ (mov r8, r8)
 8000b7c:	000007fe 	.word	0x000007fe
 8000b80:	000007ff 	.word	0x000007ff
 8000b84:	ff7fffff 	.word	0xff7fffff
 8000b88:	4647      	mov	r7, r8
 8000b8a:	430f      	orrs	r7, r1
 8000b8c:	d100      	bne.n	8000b90 <__aeabi_dadd+0x6f0>
 8000b8e:	e747      	b.n	8000a20 <__aeabi_dadd+0x580>
 8000b90:	000e      	movs	r6, r1
 8000b92:	46c1      	mov	r9, r8
 8000b94:	e5b5      	b.n	8000702 <__aeabi_dadd+0x262>
 8000b96:	08df      	lsrs	r7, r3, #3
 8000b98:	0764      	lsls	r4, r4, #29
 8000b9a:	2102      	movs	r1, #2
 8000b9c:	4327      	orrs	r7, r4
 8000b9e:	0900      	lsrs	r0, r0, #4
 8000ba0:	e5b5      	b.n	800070e <__aeabi_dadd+0x26e>
 8000ba2:	0019      	movs	r1, r3
 8000ba4:	08c0      	lsrs	r0, r0, #3
 8000ba6:	0777      	lsls	r7, r6, #29
 8000ba8:	4307      	orrs	r7, r0
 8000baa:	4311      	orrs	r1, r2
 8000bac:	08f0      	lsrs	r0, r6, #3
 8000bae:	2900      	cmp	r1, #0
 8000bb0:	d100      	bne.n	8000bb4 <__aeabi_dadd+0x714>
 8000bb2:	e5d9      	b.n	8000768 <__aeabi_dadd+0x2c8>
 8000bb4:	2180      	movs	r1, #128	@ 0x80
 8000bb6:	0309      	lsls	r1, r1, #12
 8000bb8:	4208      	tst	r0, r1
 8000bba:	d007      	beq.n	8000bcc <__aeabi_dadd+0x72c>
 8000bbc:	08dc      	lsrs	r4, r3, #3
 8000bbe:	420c      	tst	r4, r1
 8000bc0:	d104      	bne.n	8000bcc <__aeabi_dadd+0x72c>
 8000bc2:	08d2      	lsrs	r2, r2, #3
 8000bc4:	075b      	lsls	r3, r3, #29
 8000bc6:	431a      	orrs	r2, r3
 8000bc8:	0017      	movs	r7, r2
 8000bca:	0020      	movs	r0, r4
 8000bcc:	0f7b      	lsrs	r3, r7, #29
 8000bce:	00ff      	lsls	r7, r7, #3
 8000bd0:	08ff      	lsrs	r7, r7, #3
 8000bd2:	075b      	lsls	r3, r3, #29
 8000bd4:	431f      	orrs	r7, r3
 8000bd6:	e5c7      	b.n	8000768 <__aeabi_dadd+0x2c8>
 8000bd8:	000f      	movs	r7, r1
 8000bda:	e5c5      	b.n	8000768 <__aeabi_dadd+0x2c8>
 8000bdc:	4b12      	ldr	r3, [pc, #72]	@ (8000c28 <__aeabi_dadd+0x788>)
 8000bde:	08d2      	lsrs	r2, r2, #3
 8000be0:	4033      	ands	r3, r6
 8000be2:	075f      	lsls	r7, r3, #29
 8000be4:	025b      	lsls	r3, r3, #9
 8000be6:	2401      	movs	r4, #1
 8000be8:	4317      	orrs	r7, r2
 8000bea:	0b1e      	lsrs	r6, r3, #12
 8000bec:	e5a1      	b.n	8000732 <__aeabi_dadd+0x292>
 8000bee:	4226      	tst	r6, r4
 8000bf0:	d012      	beq.n	8000c18 <__aeabi_dadd+0x778>
 8000bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8000c28 <__aeabi_dadd+0x788>)
 8000bf4:	4665      	mov	r5, ip
 8000bf6:	0002      	movs	r2, r0
 8000bf8:	2401      	movs	r4, #1
 8000bfa:	401e      	ands	r6, r3
 8000bfc:	e4e6      	b.n	80005cc <__aeabi_dadd+0x12c>
 8000bfe:	0021      	movs	r1, r4
 8000c00:	e585      	b.n	800070e <__aeabi_dadd+0x26e>
 8000c02:	0017      	movs	r7, r2
 8000c04:	e5a8      	b.n	8000758 <__aeabi_dadd+0x2b8>
 8000c06:	003a      	movs	r2, r7
 8000c08:	e4d4      	b.n	80005b4 <__aeabi_dadd+0x114>
 8000c0a:	08db      	lsrs	r3, r3, #3
 8000c0c:	0764      	lsls	r4, r4, #29
 8000c0e:	431c      	orrs	r4, r3
 8000c10:	0027      	movs	r7, r4
 8000c12:	2102      	movs	r1, #2
 8000c14:	0900      	lsrs	r0, r0, #4
 8000c16:	e57a      	b.n	800070e <__aeabi_dadd+0x26e>
 8000c18:	08c0      	lsrs	r0, r0, #3
 8000c1a:	0777      	lsls	r7, r6, #29
 8000c1c:	4307      	orrs	r7, r0
 8000c1e:	4665      	mov	r5, ip
 8000c20:	2100      	movs	r1, #0
 8000c22:	08f0      	lsrs	r0, r6, #3
 8000c24:	e573      	b.n	800070e <__aeabi_dadd+0x26e>
 8000c26:	46c0      	nop			@ (mov r8, r8)
 8000c28:	ff7fffff 	.word	0xff7fffff

08000c2c <__aeabi_ddiv>:
 8000c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c2e:	46de      	mov	lr, fp
 8000c30:	4645      	mov	r5, r8
 8000c32:	4657      	mov	r7, sl
 8000c34:	464e      	mov	r6, r9
 8000c36:	b5e0      	push	{r5, r6, r7, lr}
 8000c38:	b087      	sub	sp, #28
 8000c3a:	9200      	str	r2, [sp, #0]
 8000c3c:	9301      	str	r3, [sp, #4]
 8000c3e:	030b      	lsls	r3, r1, #12
 8000c40:	0b1b      	lsrs	r3, r3, #12
 8000c42:	469b      	mov	fp, r3
 8000c44:	0fca      	lsrs	r2, r1, #31
 8000c46:	004b      	lsls	r3, r1, #1
 8000c48:	0004      	movs	r4, r0
 8000c4a:	4680      	mov	r8, r0
 8000c4c:	0d5b      	lsrs	r3, r3, #21
 8000c4e:	9202      	str	r2, [sp, #8]
 8000c50:	d100      	bne.n	8000c54 <__aeabi_ddiv+0x28>
 8000c52:	e098      	b.n	8000d86 <__aeabi_ddiv+0x15a>
 8000c54:	4a7c      	ldr	r2, [pc, #496]	@ (8000e48 <__aeabi_ddiv+0x21c>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d037      	beq.n	8000cca <__aeabi_ddiv+0x9e>
 8000c5a:	4659      	mov	r1, fp
 8000c5c:	0f42      	lsrs	r2, r0, #29
 8000c5e:	00c9      	lsls	r1, r1, #3
 8000c60:	430a      	orrs	r2, r1
 8000c62:	2180      	movs	r1, #128	@ 0x80
 8000c64:	0409      	lsls	r1, r1, #16
 8000c66:	4311      	orrs	r1, r2
 8000c68:	00c2      	lsls	r2, r0, #3
 8000c6a:	4690      	mov	r8, r2
 8000c6c:	4a77      	ldr	r2, [pc, #476]	@ (8000e4c <__aeabi_ddiv+0x220>)
 8000c6e:	4689      	mov	r9, r1
 8000c70:	4692      	mov	sl, r2
 8000c72:	449a      	add	sl, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	2400      	movs	r4, #0
 8000c78:	9303      	str	r3, [sp, #12]
 8000c7a:	9e00      	ldr	r6, [sp, #0]
 8000c7c:	9f01      	ldr	r7, [sp, #4]
 8000c7e:	033b      	lsls	r3, r7, #12
 8000c80:	0b1b      	lsrs	r3, r3, #12
 8000c82:	469b      	mov	fp, r3
 8000c84:	007b      	lsls	r3, r7, #1
 8000c86:	0030      	movs	r0, r6
 8000c88:	0d5b      	lsrs	r3, r3, #21
 8000c8a:	0ffd      	lsrs	r5, r7, #31
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d059      	beq.n	8000d44 <__aeabi_ddiv+0x118>
 8000c90:	4a6d      	ldr	r2, [pc, #436]	@ (8000e48 <__aeabi_ddiv+0x21c>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d048      	beq.n	8000d28 <__aeabi_ddiv+0xfc>
 8000c96:	4659      	mov	r1, fp
 8000c98:	0f72      	lsrs	r2, r6, #29
 8000c9a:	00c9      	lsls	r1, r1, #3
 8000c9c:	430a      	orrs	r2, r1
 8000c9e:	2180      	movs	r1, #128	@ 0x80
 8000ca0:	0409      	lsls	r1, r1, #16
 8000ca2:	4311      	orrs	r1, r2
 8000ca4:	468b      	mov	fp, r1
 8000ca6:	4969      	ldr	r1, [pc, #420]	@ (8000e4c <__aeabi_ddiv+0x220>)
 8000ca8:	00f2      	lsls	r2, r6, #3
 8000caa:	468c      	mov	ip, r1
 8000cac:	4651      	mov	r1, sl
 8000cae:	4463      	add	r3, ip
 8000cb0:	1acb      	subs	r3, r1, r3
 8000cb2:	469a      	mov	sl, r3
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	9e02      	ldr	r6, [sp, #8]
 8000cb8:	406e      	eors	r6, r5
 8000cba:	b2f6      	uxtb	r6, r6
 8000cbc:	2c0f      	cmp	r4, #15
 8000cbe:	d900      	bls.n	8000cc2 <__aeabi_ddiv+0x96>
 8000cc0:	e0ce      	b.n	8000e60 <__aeabi_ddiv+0x234>
 8000cc2:	4b63      	ldr	r3, [pc, #396]	@ (8000e50 <__aeabi_ddiv+0x224>)
 8000cc4:	00a4      	lsls	r4, r4, #2
 8000cc6:	591b      	ldr	r3, [r3, r4]
 8000cc8:	469f      	mov	pc, r3
 8000cca:	465a      	mov	r2, fp
 8000ccc:	4302      	orrs	r2, r0
 8000cce:	4691      	mov	r9, r2
 8000cd0:	d000      	beq.n	8000cd4 <__aeabi_ddiv+0xa8>
 8000cd2:	e090      	b.n	8000df6 <__aeabi_ddiv+0x1ca>
 8000cd4:	469a      	mov	sl, r3
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	4690      	mov	r8, r2
 8000cda:	2408      	movs	r4, #8
 8000cdc:	9303      	str	r3, [sp, #12]
 8000cde:	e7cc      	b.n	8000c7a <__aeabi_ddiv+0x4e>
 8000ce0:	46cb      	mov	fp, r9
 8000ce2:	4642      	mov	r2, r8
 8000ce4:	9d02      	ldr	r5, [sp, #8]
 8000ce6:	9903      	ldr	r1, [sp, #12]
 8000ce8:	2902      	cmp	r1, #2
 8000cea:	d100      	bne.n	8000cee <__aeabi_ddiv+0xc2>
 8000cec:	e1de      	b.n	80010ac <__aeabi_ddiv+0x480>
 8000cee:	2903      	cmp	r1, #3
 8000cf0:	d100      	bne.n	8000cf4 <__aeabi_ddiv+0xc8>
 8000cf2:	e08d      	b.n	8000e10 <__aeabi_ddiv+0x1e4>
 8000cf4:	2901      	cmp	r1, #1
 8000cf6:	d000      	beq.n	8000cfa <__aeabi_ddiv+0xce>
 8000cf8:	e179      	b.n	8000fee <__aeabi_ddiv+0x3c2>
 8000cfa:	002e      	movs	r6, r5
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2300      	movs	r3, #0
 8000d00:	2400      	movs	r4, #0
 8000d02:	4690      	mov	r8, r2
 8000d04:	051b      	lsls	r3, r3, #20
 8000d06:	4323      	orrs	r3, r4
 8000d08:	07f6      	lsls	r6, r6, #31
 8000d0a:	4333      	orrs	r3, r6
 8000d0c:	4640      	mov	r0, r8
 8000d0e:	0019      	movs	r1, r3
 8000d10:	b007      	add	sp, #28
 8000d12:	bcf0      	pop	{r4, r5, r6, r7}
 8000d14:	46bb      	mov	fp, r7
 8000d16:	46b2      	mov	sl, r6
 8000d18:	46a9      	mov	r9, r5
 8000d1a:	46a0      	mov	r8, r4
 8000d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2400      	movs	r4, #0
 8000d22:	4690      	mov	r8, r2
 8000d24:	4b48      	ldr	r3, [pc, #288]	@ (8000e48 <__aeabi_ddiv+0x21c>)
 8000d26:	e7ed      	b.n	8000d04 <__aeabi_ddiv+0xd8>
 8000d28:	465a      	mov	r2, fp
 8000d2a:	9b00      	ldr	r3, [sp, #0]
 8000d2c:	431a      	orrs	r2, r3
 8000d2e:	4b49      	ldr	r3, [pc, #292]	@ (8000e54 <__aeabi_ddiv+0x228>)
 8000d30:	469c      	mov	ip, r3
 8000d32:	44e2      	add	sl, ip
 8000d34:	2a00      	cmp	r2, #0
 8000d36:	d159      	bne.n	8000dec <__aeabi_ddiv+0x1c0>
 8000d38:	2302      	movs	r3, #2
 8000d3a:	431c      	orrs	r4, r3
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	2102      	movs	r1, #2
 8000d40:	469b      	mov	fp, r3
 8000d42:	e7b8      	b.n	8000cb6 <__aeabi_ddiv+0x8a>
 8000d44:	465a      	mov	r2, fp
 8000d46:	9b00      	ldr	r3, [sp, #0]
 8000d48:	431a      	orrs	r2, r3
 8000d4a:	d049      	beq.n	8000de0 <__aeabi_ddiv+0x1b4>
 8000d4c:	465b      	mov	r3, fp
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d100      	bne.n	8000d54 <__aeabi_ddiv+0x128>
 8000d52:	e19c      	b.n	800108e <__aeabi_ddiv+0x462>
 8000d54:	4658      	mov	r0, fp
 8000d56:	f001 fb43 	bl	80023e0 <__clzsi2>
 8000d5a:	0002      	movs	r2, r0
 8000d5c:	0003      	movs	r3, r0
 8000d5e:	3a0b      	subs	r2, #11
 8000d60:	271d      	movs	r7, #29
 8000d62:	9e00      	ldr	r6, [sp, #0]
 8000d64:	1aba      	subs	r2, r7, r2
 8000d66:	0019      	movs	r1, r3
 8000d68:	4658      	mov	r0, fp
 8000d6a:	40d6      	lsrs	r6, r2
 8000d6c:	3908      	subs	r1, #8
 8000d6e:	4088      	lsls	r0, r1
 8000d70:	0032      	movs	r2, r6
 8000d72:	4302      	orrs	r2, r0
 8000d74:	4693      	mov	fp, r2
 8000d76:	9a00      	ldr	r2, [sp, #0]
 8000d78:	408a      	lsls	r2, r1
 8000d7a:	4937      	ldr	r1, [pc, #220]	@ (8000e58 <__aeabi_ddiv+0x22c>)
 8000d7c:	4453      	add	r3, sl
 8000d7e:	468a      	mov	sl, r1
 8000d80:	2100      	movs	r1, #0
 8000d82:	449a      	add	sl, r3
 8000d84:	e797      	b.n	8000cb6 <__aeabi_ddiv+0x8a>
 8000d86:	465b      	mov	r3, fp
 8000d88:	4303      	orrs	r3, r0
 8000d8a:	4699      	mov	r9, r3
 8000d8c:	d021      	beq.n	8000dd2 <__aeabi_ddiv+0x1a6>
 8000d8e:	465b      	mov	r3, fp
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d100      	bne.n	8000d96 <__aeabi_ddiv+0x16a>
 8000d94:	e169      	b.n	800106a <__aeabi_ddiv+0x43e>
 8000d96:	4658      	mov	r0, fp
 8000d98:	f001 fb22 	bl	80023e0 <__clzsi2>
 8000d9c:	230b      	movs	r3, #11
 8000d9e:	425b      	negs	r3, r3
 8000da0:	469c      	mov	ip, r3
 8000da2:	0002      	movs	r2, r0
 8000da4:	4484      	add	ip, r0
 8000da6:	4666      	mov	r6, ip
 8000da8:	231d      	movs	r3, #29
 8000daa:	1b9b      	subs	r3, r3, r6
 8000dac:	0026      	movs	r6, r4
 8000dae:	0011      	movs	r1, r2
 8000db0:	4658      	mov	r0, fp
 8000db2:	40de      	lsrs	r6, r3
 8000db4:	3908      	subs	r1, #8
 8000db6:	4088      	lsls	r0, r1
 8000db8:	0033      	movs	r3, r6
 8000dba:	4303      	orrs	r3, r0
 8000dbc:	4699      	mov	r9, r3
 8000dbe:	0023      	movs	r3, r4
 8000dc0:	408b      	lsls	r3, r1
 8000dc2:	4698      	mov	r8, r3
 8000dc4:	4b25      	ldr	r3, [pc, #148]	@ (8000e5c <__aeabi_ddiv+0x230>)
 8000dc6:	2400      	movs	r4, #0
 8000dc8:	1a9b      	subs	r3, r3, r2
 8000dca:	469a      	mov	sl, r3
 8000dcc:	2300      	movs	r3, #0
 8000dce:	9303      	str	r3, [sp, #12]
 8000dd0:	e753      	b.n	8000c7a <__aeabi_ddiv+0x4e>
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	4698      	mov	r8, r3
 8000dd6:	469a      	mov	sl, r3
 8000dd8:	3301      	adds	r3, #1
 8000dda:	2404      	movs	r4, #4
 8000ddc:	9303      	str	r3, [sp, #12]
 8000dde:	e74c      	b.n	8000c7a <__aeabi_ddiv+0x4e>
 8000de0:	2301      	movs	r3, #1
 8000de2:	431c      	orrs	r4, r3
 8000de4:	2300      	movs	r3, #0
 8000de6:	2101      	movs	r1, #1
 8000de8:	469b      	mov	fp, r3
 8000dea:	e764      	b.n	8000cb6 <__aeabi_ddiv+0x8a>
 8000dec:	2303      	movs	r3, #3
 8000dee:	0032      	movs	r2, r6
 8000df0:	2103      	movs	r1, #3
 8000df2:	431c      	orrs	r4, r3
 8000df4:	e75f      	b.n	8000cb6 <__aeabi_ddiv+0x8a>
 8000df6:	469a      	mov	sl, r3
 8000df8:	2303      	movs	r3, #3
 8000dfa:	46d9      	mov	r9, fp
 8000dfc:	240c      	movs	r4, #12
 8000dfe:	9303      	str	r3, [sp, #12]
 8000e00:	e73b      	b.n	8000c7a <__aeabi_ddiv+0x4e>
 8000e02:	2300      	movs	r3, #0
 8000e04:	2480      	movs	r4, #128	@ 0x80
 8000e06:	4698      	mov	r8, r3
 8000e08:	2600      	movs	r6, #0
 8000e0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e48 <__aeabi_ddiv+0x21c>)
 8000e0c:	0324      	lsls	r4, r4, #12
 8000e0e:	e779      	b.n	8000d04 <__aeabi_ddiv+0xd8>
 8000e10:	2480      	movs	r4, #128	@ 0x80
 8000e12:	465b      	mov	r3, fp
 8000e14:	0324      	lsls	r4, r4, #12
 8000e16:	431c      	orrs	r4, r3
 8000e18:	0324      	lsls	r4, r4, #12
 8000e1a:	002e      	movs	r6, r5
 8000e1c:	4690      	mov	r8, r2
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e48 <__aeabi_ddiv+0x21c>)
 8000e20:	0b24      	lsrs	r4, r4, #12
 8000e22:	e76f      	b.n	8000d04 <__aeabi_ddiv+0xd8>
 8000e24:	2480      	movs	r4, #128	@ 0x80
 8000e26:	464b      	mov	r3, r9
 8000e28:	0324      	lsls	r4, r4, #12
 8000e2a:	4223      	tst	r3, r4
 8000e2c:	d002      	beq.n	8000e34 <__aeabi_ddiv+0x208>
 8000e2e:	465b      	mov	r3, fp
 8000e30:	4223      	tst	r3, r4
 8000e32:	d0f0      	beq.n	8000e16 <__aeabi_ddiv+0x1ea>
 8000e34:	2480      	movs	r4, #128	@ 0x80
 8000e36:	464b      	mov	r3, r9
 8000e38:	0324      	lsls	r4, r4, #12
 8000e3a:	431c      	orrs	r4, r3
 8000e3c:	0324      	lsls	r4, r4, #12
 8000e3e:	9e02      	ldr	r6, [sp, #8]
 8000e40:	4b01      	ldr	r3, [pc, #4]	@ (8000e48 <__aeabi_ddiv+0x21c>)
 8000e42:	0b24      	lsrs	r4, r4, #12
 8000e44:	e75e      	b.n	8000d04 <__aeabi_ddiv+0xd8>
 8000e46:	46c0      	nop			@ (mov r8, r8)
 8000e48:	000007ff 	.word	0x000007ff
 8000e4c:	fffffc01 	.word	0xfffffc01
 8000e50:	08010360 	.word	0x08010360
 8000e54:	fffff801 	.word	0xfffff801
 8000e58:	000003f3 	.word	0x000003f3
 8000e5c:	fffffc0d 	.word	0xfffffc0d
 8000e60:	45cb      	cmp	fp, r9
 8000e62:	d200      	bcs.n	8000e66 <__aeabi_ddiv+0x23a>
 8000e64:	e0f8      	b.n	8001058 <__aeabi_ddiv+0x42c>
 8000e66:	d100      	bne.n	8000e6a <__aeabi_ddiv+0x23e>
 8000e68:	e0f3      	b.n	8001052 <__aeabi_ddiv+0x426>
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	425b      	negs	r3, r3
 8000e6e:	469c      	mov	ip, r3
 8000e70:	4644      	mov	r4, r8
 8000e72:	4648      	mov	r0, r9
 8000e74:	2500      	movs	r5, #0
 8000e76:	44e2      	add	sl, ip
 8000e78:	465b      	mov	r3, fp
 8000e7a:	0e17      	lsrs	r7, r2, #24
 8000e7c:	021b      	lsls	r3, r3, #8
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	0c19      	lsrs	r1, r3, #16
 8000e82:	043b      	lsls	r3, r7, #16
 8000e84:	0212      	lsls	r2, r2, #8
 8000e86:	9700      	str	r7, [sp, #0]
 8000e88:	0c1f      	lsrs	r7, r3, #16
 8000e8a:	4691      	mov	r9, r2
 8000e8c:	9102      	str	r1, [sp, #8]
 8000e8e:	9703      	str	r7, [sp, #12]
 8000e90:	f7ff f9d8 	bl	8000244 <__aeabi_uidivmod>
 8000e94:	0002      	movs	r2, r0
 8000e96:	437a      	muls	r2, r7
 8000e98:	040b      	lsls	r3, r1, #16
 8000e9a:	0c21      	lsrs	r1, r4, #16
 8000e9c:	4680      	mov	r8, r0
 8000e9e:	4319      	orrs	r1, r3
 8000ea0:	428a      	cmp	r2, r1
 8000ea2:	d909      	bls.n	8000eb8 <__aeabi_ddiv+0x28c>
 8000ea4:	9f00      	ldr	r7, [sp, #0]
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	46bc      	mov	ip, r7
 8000eaa:	425b      	negs	r3, r3
 8000eac:	4461      	add	r1, ip
 8000eae:	469c      	mov	ip, r3
 8000eb0:	44e0      	add	r8, ip
 8000eb2:	428f      	cmp	r7, r1
 8000eb4:	d800      	bhi.n	8000eb8 <__aeabi_ddiv+0x28c>
 8000eb6:	e15c      	b.n	8001172 <__aeabi_ddiv+0x546>
 8000eb8:	1a88      	subs	r0, r1, r2
 8000eba:	9902      	ldr	r1, [sp, #8]
 8000ebc:	f7ff f9c2 	bl	8000244 <__aeabi_uidivmod>
 8000ec0:	9a03      	ldr	r2, [sp, #12]
 8000ec2:	0424      	lsls	r4, r4, #16
 8000ec4:	4342      	muls	r2, r0
 8000ec6:	0409      	lsls	r1, r1, #16
 8000ec8:	0c24      	lsrs	r4, r4, #16
 8000eca:	0003      	movs	r3, r0
 8000ecc:	430c      	orrs	r4, r1
 8000ece:	42a2      	cmp	r2, r4
 8000ed0:	d906      	bls.n	8000ee0 <__aeabi_ddiv+0x2b4>
 8000ed2:	9900      	ldr	r1, [sp, #0]
 8000ed4:	3b01      	subs	r3, #1
 8000ed6:	468c      	mov	ip, r1
 8000ed8:	4464      	add	r4, ip
 8000eda:	42a1      	cmp	r1, r4
 8000edc:	d800      	bhi.n	8000ee0 <__aeabi_ddiv+0x2b4>
 8000ede:	e142      	b.n	8001166 <__aeabi_ddiv+0x53a>
 8000ee0:	1aa0      	subs	r0, r4, r2
 8000ee2:	4642      	mov	r2, r8
 8000ee4:	0412      	lsls	r2, r2, #16
 8000ee6:	431a      	orrs	r2, r3
 8000ee8:	4693      	mov	fp, r2
 8000eea:	464b      	mov	r3, r9
 8000eec:	4659      	mov	r1, fp
 8000eee:	0c1b      	lsrs	r3, r3, #16
 8000ef0:	001f      	movs	r7, r3
 8000ef2:	9304      	str	r3, [sp, #16]
 8000ef4:	040b      	lsls	r3, r1, #16
 8000ef6:	4649      	mov	r1, r9
 8000ef8:	0409      	lsls	r1, r1, #16
 8000efa:	0c09      	lsrs	r1, r1, #16
 8000efc:	000c      	movs	r4, r1
 8000efe:	0c1b      	lsrs	r3, r3, #16
 8000f00:	435c      	muls	r4, r3
 8000f02:	0c12      	lsrs	r2, r2, #16
 8000f04:	437b      	muls	r3, r7
 8000f06:	4688      	mov	r8, r1
 8000f08:	4351      	muls	r1, r2
 8000f0a:	437a      	muls	r2, r7
 8000f0c:	0c27      	lsrs	r7, r4, #16
 8000f0e:	46bc      	mov	ip, r7
 8000f10:	185b      	adds	r3, r3, r1
 8000f12:	4463      	add	r3, ip
 8000f14:	4299      	cmp	r1, r3
 8000f16:	d903      	bls.n	8000f20 <__aeabi_ddiv+0x2f4>
 8000f18:	2180      	movs	r1, #128	@ 0x80
 8000f1a:	0249      	lsls	r1, r1, #9
 8000f1c:	468c      	mov	ip, r1
 8000f1e:	4462      	add	r2, ip
 8000f20:	0c19      	lsrs	r1, r3, #16
 8000f22:	0424      	lsls	r4, r4, #16
 8000f24:	041b      	lsls	r3, r3, #16
 8000f26:	0c24      	lsrs	r4, r4, #16
 8000f28:	188a      	adds	r2, r1, r2
 8000f2a:	191c      	adds	r4, r3, r4
 8000f2c:	4290      	cmp	r0, r2
 8000f2e:	d302      	bcc.n	8000f36 <__aeabi_ddiv+0x30a>
 8000f30:	d116      	bne.n	8000f60 <__aeabi_ddiv+0x334>
 8000f32:	42a5      	cmp	r5, r4
 8000f34:	d214      	bcs.n	8000f60 <__aeabi_ddiv+0x334>
 8000f36:	465b      	mov	r3, fp
 8000f38:	9f00      	ldr	r7, [sp, #0]
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	444d      	add	r5, r9
 8000f3e:	9305      	str	r3, [sp, #20]
 8000f40:	454d      	cmp	r5, r9
 8000f42:	419b      	sbcs	r3, r3
 8000f44:	46bc      	mov	ip, r7
 8000f46:	425b      	negs	r3, r3
 8000f48:	4463      	add	r3, ip
 8000f4a:	18c0      	adds	r0, r0, r3
 8000f4c:	4287      	cmp	r7, r0
 8000f4e:	d300      	bcc.n	8000f52 <__aeabi_ddiv+0x326>
 8000f50:	e102      	b.n	8001158 <__aeabi_ddiv+0x52c>
 8000f52:	4282      	cmp	r2, r0
 8000f54:	d900      	bls.n	8000f58 <__aeabi_ddiv+0x32c>
 8000f56:	e129      	b.n	80011ac <__aeabi_ddiv+0x580>
 8000f58:	d100      	bne.n	8000f5c <__aeabi_ddiv+0x330>
 8000f5a:	e124      	b.n	80011a6 <__aeabi_ddiv+0x57a>
 8000f5c:	9b05      	ldr	r3, [sp, #20]
 8000f5e:	469b      	mov	fp, r3
 8000f60:	1b2c      	subs	r4, r5, r4
 8000f62:	42a5      	cmp	r5, r4
 8000f64:	41ad      	sbcs	r5, r5
 8000f66:	9b00      	ldr	r3, [sp, #0]
 8000f68:	1a80      	subs	r0, r0, r2
 8000f6a:	426d      	negs	r5, r5
 8000f6c:	1b40      	subs	r0, r0, r5
 8000f6e:	4283      	cmp	r3, r0
 8000f70:	d100      	bne.n	8000f74 <__aeabi_ddiv+0x348>
 8000f72:	e10f      	b.n	8001194 <__aeabi_ddiv+0x568>
 8000f74:	9902      	ldr	r1, [sp, #8]
 8000f76:	f7ff f965 	bl	8000244 <__aeabi_uidivmod>
 8000f7a:	9a03      	ldr	r2, [sp, #12]
 8000f7c:	040b      	lsls	r3, r1, #16
 8000f7e:	4342      	muls	r2, r0
 8000f80:	0c21      	lsrs	r1, r4, #16
 8000f82:	0005      	movs	r5, r0
 8000f84:	4319      	orrs	r1, r3
 8000f86:	428a      	cmp	r2, r1
 8000f88:	d900      	bls.n	8000f8c <__aeabi_ddiv+0x360>
 8000f8a:	e0cb      	b.n	8001124 <__aeabi_ddiv+0x4f8>
 8000f8c:	1a88      	subs	r0, r1, r2
 8000f8e:	9902      	ldr	r1, [sp, #8]
 8000f90:	f7ff f958 	bl	8000244 <__aeabi_uidivmod>
 8000f94:	9a03      	ldr	r2, [sp, #12]
 8000f96:	0424      	lsls	r4, r4, #16
 8000f98:	4342      	muls	r2, r0
 8000f9a:	0409      	lsls	r1, r1, #16
 8000f9c:	0c24      	lsrs	r4, r4, #16
 8000f9e:	0003      	movs	r3, r0
 8000fa0:	430c      	orrs	r4, r1
 8000fa2:	42a2      	cmp	r2, r4
 8000fa4:	d900      	bls.n	8000fa8 <__aeabi_ddiv+0x37c>
 8000fa6:	e0ca      	b.n	800113e <__aeabi_ddiv+0x512>
 8000fa8:	4641      	mov	r1, r8
 8000faa:	1aa4      	subs	r4, r4, r2
 8000fac:	042a      	lsls	r2, r5, #16
 8000fae:	431a      	orrs	r2, r3
 8000fb0:	9f04      	ldr	r7, [sp, #16]
 8000fb2:	0413      	lsls	r3, r2, #16
 8000fb4:	0c1b      	lsrs	r3, r3, #16
 8000fb6:	4359      	muls	r1, r3
 8000fb8:	4640      	mov	r0, r8
 8000fba:	437b      	muls	r3, r7
 8000fbc:	469c      	mov	ip, r3
 8000fbe:	0c15      	lsrs	r5, r2, #16
 8000fc0:	4368      	muls	r0, r5
 8000fc2:	0c0b      	lsrs	r3, r1, #16
 8000fc4:	4484      	add	ip, r0
 8000fc6:	4463      	add	r3, ip
 8000fc8:	437d      	muls	r5, r7
 8000fca:	4298      	cmp	r0, r3
 8000fcc:	d903      	bls.n	8000fd6 <__aeabi_ddiv+0x3aa>
 8000fce:	2080      	movs	r0, #128	@ 0x80
 8000fd0:	0240      	lsls	r0, r0, #9
 8000fd2:	4684      	mov	ip, r0
 8000fd4:	4465      	add	r5, ip
 8000fd6:	0c18      	lsrs	r0, r3, #16
 8000fd8:	0409      	lsls	r1, r1, #16
 8000fda:	041b      	lsls	r3, r3, #16
 8000fdc:	0c09      	lsrs	r1, r1, #16
 8000fde:	1940      	adds	r0, r0, r5
 8000fe0:	185b      	adds	r3, r3, r1
 8000fe2:	4284      	cmp	r4, r0
 8000fe4:	d327      	bcc.n	8001036 <__aeabi_ddiv+0x40a>
 8000fe6:	d023      	beq.n	8001030 <__aeabi_ddiv+0x404>
 8000fe8:	2301      	movs	r3, #1
 8000fea:	0035      	movs	r5, r6
 8000fec:	431a      	orrs	r2, r3
 8000fee:	4b94      	ldr	r3, [pc, #592]	@ (8001240 <__aeabi_ddiv+0x614>)
 8000ff0:	4453      	add	r3, sl
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	dd60      	ble.n	80010b8 <__aeabi_ddiv+0x48c>
 8000ff6:	0751      	lsls	r1, r2, #29
 8000ff8:	d000      	beq.n	8000ffc <__aeabi_ddiv+0x3d0>
 8000ffa:	e086      	b.n	800110a <__aeabi_ddiv+0x4de>
 8000ffc:	002e      	movs	r6, r5
 8000ffe:	08d1      	lsrs	r1, r2, #3
 8001000:	465a      	mov	r2, fp
 8001002:	01d2      	lsls	r2, r2, #7
 8001004:	d506      	bpl.n	8001014 <__aeabi_ddiv+0x3e8>
 8001006:	465a      	mov	r2, fp
 8001008:	4b8e      	ldr	r3, [pc, #568]	@ (8001244 <__aeabi_ddiv+0x618>)
 800100a:	401a      	ands	r2, r3
 800100c:	2380      	movs	r3, #128	@ 0x80
 800100e:	4693      	mov	fp, r2
 8001010:	00db      	lsls	r3, r3, #3
 8001012:	4453      	add	r3, sl
 8001014:	4a8c      	ldr	r2, [pc, #560]	@ (8001248 <__aeabi_ddiv+0x61c>)
 8001016:	4293      	cmp	r3, r2
 8001018:	dd00      	ble.n	800101c <__aeabi_ddiv+0x3f0>
 800101a:	e680      	b.n	8000d1e <__aeabi_ddiv+0xf2>
 800101c:	465a      	mov	r2, fp
 800101e:	0752      	lsls	r2, r2, #29
 8001020:	430a      	orrs	r2, r1
 8001022:	4690      	mov	r8, r2
 8001024:	465a      	mov	r2, fp
 8001026:	055b      	lsls	r3, r3, #21
 8001028:	0254      	lsls	r4, r2, #9
 800102a:	0b24      	lsrs	r4, r4, #12
 800102c:	0d5b      	lsrs	r3, r3, #21
 800102e:	e669      	b.n	8000d04 <__aeabi_ddiv+0xd8>
 8001030:	0035      	movs	r5, r6
 8001032:	2b00      	cmp	r3, #0
 8001034:	d0db      	beq.n	8000fee <__aeabi_ddiv+0x3c2>
 8001036:	9d00      	ldr	r5, [sp, #0]
 8001038:	1e51      	subs	r1, r2, #1
 800103a:	46ac      	mov	ip, r5
 800103c:	4464      	add	r4, ip
 800103e:	42ac      	cmp	r4, r5
 8001040:	d200      	bcs.n	8001044 <__aeabi_ddiv+0x418>
 8001042:	e09e      	b.n	8001182 <__aeabi_ddiv+0x556>
 8001044:	4284      	cmp	r4, r0
 8001046:	d200      	bcs.n	800104a <__aeabi_ddiv+0x41e>
 8001048:	e0e1      	b.n	800120e <__aeabi_ddiv+0x5e2>
 800104a:	d100      	bne.n	800104e <__aeabi_ddiv+0x422>
 800104c:	e0ee      	b.n	800122c <__aeabi_ddiv+0x600>
 800104e:	000a      	movs	r2, r1
 8001050:	e7ca      	b.n	8000fe8 <__aeabi_ddiv+0x3bc>
 8001052:	4542      	cmp	r2, r8
 8001054:	d900      	bls.n	8001058 <__aeabi_ddiv+0x42c>
 8001056:	e708      	b.n	8000e6a <__aeabi_ddiv+0x23e>
 8001058:	464b      	mov	r3, r9
 800105a:	07dc      	lsls	r4, r3, #31
 800105c:	0858      	lsrs	r0, r3, #1
 800105e:	4643      	mov	r3, r8
 8001060:	085b      	lsrs	r3, r3, #1
 8001062:	431c      	orrs	r4, r3
 8001064:	4643      	mov	r3, r8
 8001066:	07dd      	lsls	r5, r3, #31
 8001068:	e706      	b.n	8000e78 <__aeabi_ddiv+0x24c>
 800106a:	f001 f9b9 	bl	80023e0 <__clzsi2>
 800106e:	2315      	movs	r3, #21
 8001070:	469c      	mov	ip, r3
 8001072:	4484      	add	ip, r0
 8001074:	0002      	movs	r2, r0
 8001076:	4663      	mov	r3, ip
 8001078:	3220      	adds	r2, #32
 800107a:	2b1c      	cmp	r3, #28
 800107c:	dc00      	bgt.n	8001080 <__aeabi_ddiv+0x454>
 800107e:	e692      	b.n	8000da6 <__aeabi_ddiv+0x17a>
 8001080:	0023      	movs	r3, r4
 8001082:	3808      	subs	r0, #8
 8001084:	4083      	lsls	r3, r0
 8001086:	4699      	mov	r9, r3
 8001088:	2300      	movs	r3, #0
 800108a:	4698      	mov	r8, r3
 800108c:	e69a      	b.n	8000dc4 <__aeabi_ddiv+0x198>
 800108e:	f001 f9a7 	bl	80023e0 <__clzsi2>
 8001092:	0002      	movs	r2, r0
 8001094:	0003      	movs	r3, r0
 8001096:	3215      	adds	r2, #21
 8001098:	3320      	adds	r3, #32
 800109a:	2a1c      	cmp	r2, #28
 800109c:	dc00      	bgt.n	80010a0 <__aeabi_ddiv+0x474>
 800109e:	e65f      	b.n	8000d60 <__aeabi_ddiv+0x134>
 80010a0:	9900      	ldr	r1, [sp, #0]
 80010a2:	3808      	subs	r0, #8
 80010a4:	4081      	lsls	r1, r0
 80010a6:	2200      	movs	r2, #0
 80010a8:	468b      	mov	fp, r1
 80010aa:	e666      	b.n	8000d7a <__aeabi_ddiv+0x14e>
 80010ac:	2200      	movs	r2, #0
 80010ae:	002e      	movs	r6, r5
 80010b0:	2400      	movs	r4, #0
 80010b2:	4690      	mov	r8, r2
 80010b4:	4b65      	ldr	r3, [pc, #404]	@ (800124c <__aeabi_ddiv+0x620>)
 80010b6:	e625      	b.n	8000d04 <__aeabi_ddiv+0xd8>
 80010b8:	002e      	movs	r6, r5
 80010ba:	2101      	movs	r1, #1
 80010bc:	1ac9      	subs	r1, r1, r3
 80010be:	2938      	cmp	r1, #56	@ 0x38
 80010c0:	dd00      	ble.n	80010c4 <__aeabi_ddiv+0x498>
 80010c2:	e61b      	b.n	8000cfc <__aeabi_ddiv+0xd0>
 80010c4:	291f      	cmp	r1, #31
 80010c6:	dc7e      	bgt.n	80011c6 <__aeabi_ddiv+0x59a>
 80010c8:	4861      	ldr	r0, [pc, #388]	@ (8001250 <__aeabi_ddiv+0x624>)
 80010ca:	0014      	movs	r4, r2
 80010cc:	4450      	add	r0, sl
 80010ce:	465b      	mov	r3, fp
 80010d0:	4082      	lsls	r2, r0
 80010d2:	4083      	lsls	r3, r0
 80010d4:	40cc      	lsrs	r4, r1
 80010d6:	1e50      	subs	r0, r2, #1
 80010d8:	4182      	sbcs	r2, r0
 80010da:	4323      	orrs	r3, r4
 80010dc:	431a      	orrs	r2, r3
 80010de:	465b      	mov	r3, fp
 80010e0:	40cb      	lsrs	r3, r1
 80010e2:	0751      	lsls	r1, r2, #29
 80010e4:	d009      	beq.n	80010fa <__aeabi_ddiv+0x4ce>
 80010e6:	210f      	movs	r1, #15
 80010e8:	4011      	ands	r1, r2
 80010ea:	2904      	cmp	r1, #4
 80010ec:	d005      	beq.n	80010fa <__aeabi_ddiv+0x4ce>
 80010ee:	1d11      	adds	r1, r2, #4
 80010f0:	4291      	cmp	r1, r2
 80010f2:	4192      	sbcs	r2, r2
 80010f4:	4252      	negs	r2, r2
 80010f6:	189b      	adds	r3, r3, r2
 80010f8:	000a      	movs	r2, r1
 80010fa:	0219      	lsls	r1, r3, #8
 80010fc:	d400      	bmi.n	8001100 <__aeabi_ddiv+0x4d4>
 80010fe:	e09b      	b.n	8001238 <__aeabi_ddiv+0x60c>
 8001100:	2200      	movs	r2, #0
 8001102:	2301      	movs	r3, #1
 8001104:	2400      	movs	r4, #0
 8001106:	4690      	mov	r8, r2
 8001108:	e5fc      	b.n	8000d04 <__aeabi_ddiv+0xd8>
 800110a:	210f      	movs	r1, #15
 800110c:	4011      	ands	r1, r2
 800110e:	2904      	cmp	r1, #4
 8001110:	d100      	bne.n	8001114 <__aeabi_ddiv+0x4e8>
 8001112:	e773      	b.n	8000ffc <__aeabi_ddiv+0x3d0>
 8001114:	1d11      	adds	r1, r2, #4
 8001116:	4291      	cmp	r1, r2
 8001118:	4192      	sbcs	r2, r2
 800111a:	4252      	negs	r2, r2
 800111c:	002e      	movs	r6, r5
 800111e:	08c9      	lsrs	r1, r1, #3
 8001120:	4493      	add	fp, r2
 8001122:	e76d      	b.n	8001000 <__aeabi_ddiv+0x3d4>
 8001124:	9b00      	ldr	r3, [sp, #0]
 8001126:	3d01      	subs	r5, #1
 8001128:	469c      	mov	ip, r3
 800112a:	4461      	add	r1, ip
 800112c:	428b      	cmp	r3, r1
 800112e:	d900      	bls.n	8001132 <__aeabi_ddiv+0x506>
 8001130:	e72c      	b.n	8000f8c <__aeabi_ddiv+0x360>
 8001132:	428a      	cmp	r2, r1
 8001134:	d800      	bhi.n	8001138 <__aeabi_ddiv+0x50c>
 8001136:	e729      	b.n	8000f8c <__aeabi_ddiv+0x360>
 8001138:	1e85      	subs	r5, r0, #2
 800113a:	4461      	add	r1, ip
 800113c:	e726      	b.n	8000f8c <__aeabi_ddiv+0x360>
 800113e:	9900      	ldr	r1, [sp, #0]
 8001140:	3b01      	subs	r3, #1
 8001142:	468c      	mov	ip, r1
 8001144:	4464      	add	r4, ip
 8001146:	42a1      	cmp	r1, r4
 8001148:	d900      	bls.n	800114c <__aeabi_ddiv+0x520>
 800114a:	e72d      	b.n	8000fa8 <__aeabi_ddiv+0x37c>
 800114c:	42a2      	cmp	r2, r4
 800114e:	d800      	bhi.n	8001152 <__aeabi_ddiv+0x526>
 8001150:	e72a      	b.n	8000fa8 <__aeabi_ddiv+0x37c>
 8001152:	1e83      	subs	r3, r0, #2
 8001154:	4464      	add	r4, ip
 8001156:	e727      	b.n	8000fa8 <__aeabi_ddiv+0x37c>
 8001158:	4287      	cmp	r7, r0
 800115a:	d000      	beq.n	800115e <__aeabi_ddiv+0x532>
 800115c:	e6fe      	b.n	8000f5c <__aeabi_ddiv+0x330>
 800115e:	45a9      	cmp	r9, r5
 8001160:	d900      	bls.n	8001164 <__aeabi_ddiv+0x538>
 8001162:	e6fb      	b.n	8000f5c <__aeabi_ddiv+0x330>
 8001164:	e6f5      	b.n	8000f52 <__aeabi_ddiv+0x326>
 8001166:	42a2      	cmp	r2, r4
 8001168:	d800      	bhi.n	800116c <__aeabi_ddiv+0x540>
 800116a:	e6b9      	b.n	8000ee0 <__aeabi_ddiv+0x2b4>
 800116c:	1e83      	subs	r3, r0, #2
 800116e:	4464      	add	r4, ip
 8001170:	e6b6      	b.n	8000ee0 <__aeabi_ddiv+0x2b4>
 8001172:	428a      	cmp	r2, r1
 8001174:	d800      	bhi.n	8001178 <__aeabi_ddiv+0x54c>
 8001176:	e69f      	b.n	8000eb8 <__aeabi_ddiv+0x28c>
 8001178:	46bc      	mov	ip, r7
 800117a:	1e83      	subs	r3, r0, #2
 800117c:	4698      	mov	r8, r3
 800117e:	4461      	add	r1, ip
 8001180:	e69a      	b.n	8000eb8 <__aeabi_ddiv+0x28c>
 8001182:	000a      	movs	r2, r1
 8001184:	4284      	cmp	r4, r0
 8001186:	d000      	beq.n	800118a <__aeabi_ddiv+0x55e>
 8001188:	e72e      	b.n	8000fe8 <__aeabi_ddiv+0x3bc>
 800118a:	454b      	cmp	r3, r9
 800118c:	d000      	beq.n	8001190 <__aeabi_ddiv+0x564>
 800118e:	e72b      	b.n	8000fe8 <__aeabi_ddiv+0x3bc>
 8001190:	0035      	movs	r5, r6
 8001192:	e72c      	b.n	8000fee <__aeabi_ddiv+0x3c2>
 8001194:	4b2a      	ldr	r3, [pc, #168]	@ (8001240 <__aeabi_ddiv+0x614>)
 8001196:	4a2f      	ldr	r2, [pc, #188]	@ (8001254 <__aeabi_ddiv+0x628>)
 8001198:	4453      	add	r3, sl
 800119a:	4592      	cmp	sl, r2
 800119c:	db43      	blt.n	8001226 <__aeabi_ddiv+0x5fa>
 800119e:	2201      	movs	r2, #1
 80011a0:	2100      	movs	r1, #0
 80011a2:	4493      	add	fp, r2
 80011a4:	e72c      	b.n	8001000 <__aeabi_ddiv+0x3d4>
 80011a6:	42ac      	cmp	r4, r5
 80011a8:	d800      	bhi.n	80011ac <__aeabi_ddiv+0x580>
 80011aa:	e6d7      	b.n	8000f5c <__aeabi_ddiv+0x330>
 80011ac:	2302      	movs	r3, #2
 80011ae:	425b      	negs	r3, r3
 80011b0:	469c      	mov	ip, r3
 80011b2:	9900      	ldr	r1, [sp, #0]
 80011b4:	444d      	add	r5, r9
 80011b6:	454d      	cmp	r5, r9
 80011b8:	419b      	sbcs	r3, r3
 80011ba:	44e3      	add	fp, ip
 80011bc:	468c      	mov	ip, r1
 80011be:	425b      	negs	r3, r3
 80011c0:	4463      	add	r3, ip
 80011c2:	18c0      	adds	r0, r0, r3
 80011c4:	e6cc      	b.n	8000f60 <__aeabi_ddiv+0x334>
 80011c6:	201f      	movs	r0, #31
 80011c8:	4240      	negs	r0, r0
 80011ca:	1ac3      	subs	r3, r0, r3
 80011cc:	4658      	mov	r0, fp
 80011ce:	40d8      	lsrs	r0, r3
 80011d0:	2920      	cmp	r1, #32
 80011d2:	d004      	beq.n	80011de <__aeabi_ddiv+0x5b2>
 80011d4:	4659      	mov	r1, fp
 80011d6:	4b20      	ldr	r3, [pc, #128]	@ (8001258 <__aeabi_ddiv+0x62c>)
 80011d8:	4453      	add	r3, sl
 80011da:	4099      	lsls	r1, r3
 80011dc:	430a      	orrs	r2, r1
 80011de:	1e53      	subs	r3, r2, #1
 80011e0:	419a      	sbcs	r2, r3
 80011e2:	2307      	movs	r3, #7
 80011e4:	0019      	movs	r1, r3
 80011e6:	4302      	orrs	r2, r0
 80011e8:	2400      	movs	r4, #0
 80011ea:	4011      	ands	r1, r2
 80011ec:	4213      	tst	r3, r2
 80011ee:	d009      	beq.n	8001204 <__aeabi_ddiv+0x5d8>
 80011f0:	3308      	adds	r3, #8
 80011f2:	4013      	ands	r3, r2
 80011f4:	2b04      	cmp	r3, #4
 80011f6:	d01d      	beq.n	8001234 <__aeabi_ddiv+0x608>
 80011f8:	1d13      	adds	r3, r2, #4
 80011fa:	4293      	cmp	r3, r2
 80011fc:	4189      	sbcs	r1, r1
 80011fe:	001a      	movs	r2, r3
 8001200:	4249      	negs	r1, r1
 8001202:	0749      	lsls	r1, r1, #29
 8001204:	08d2      	lsrs	r2, r2, #3
 8001206:	430a      	orrs	r2, r1
 8001208:	4690      	mov	r8, r2
 800120a:	2300      	movs	r3, #0
 800120c:	e57a      	b.n	8000d04 <__aeabi_ddiv+0xd8>
 800120e:	4649      	mov	r1, r9
 8001210:	9f00      	ldr	r7, [sp, #0]
 8001212:	004d      	lsls	r5, r1, #1
 8001214:	454d      	cmp	r5, r9
 8001216:	4189      	sbcs	r1, r1
 8001218:	46bc      	mov	ip, r7
 800121a:	4249      	negs	r1, r1
 800121c:	4461      	add	r1, ip
 800121e:	46a9      	mov	r9, r5
 8001220:	3a02      	subs	r2, #2
 8001222:	1864      	adds	r4, r4, r1
 8001224:	e7ae      	b.n	8001184 <__aeabi_ddiv+0x558>
 8001226:	2201      	movs	r2, #1
 8001228:	4252      	negs	r2, r2
 800122a:	e746      	b.n	80010ba <__aeabi_ddiv+0x48e>
 800122c:	4599      	cmp	r9, r3
 800122e:	d3ee      	bcc.n	800120e <__aeabi_ddiv+0x5e2>
 8001230:	000a      	movs	r2, r1
 8001232:	e7aa      	b.n	800118a <__aeabi_ddiv+0x55e>
 8001234:	2100      	movs	r1, #0
 8001236:	e7e5      	b.n	8001204 <__aeabi_ddiv+0x5d8>
 8001238:	0759      	lsls	r1, r3, #29
 800123a:	025b      	lsls	r3, r3, #9
 800123c:	0b1c      	lsrs	r4, r3, #12
 800123e:	e7e1      	b.n	8001204 <__aeabi_ddiv+0x5d8>
 8001240:	000003ff 	.word	0x000003ff
 8001244:	feffffff 	.word	0xfeffffff
 8001248:	000007fe 	.word	0x000007fe
 800124c:	000007ff 	.word	0x000007ff
 8001250:	0000041e 	.word	0x0000041e
 8001254:	fffffc02 	.word	0xfffffc02
 8001258:	0000043e 	.word	0x0000043e

0800125c <__eqdf2>:
 800125c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800125e:	4657      	mov	r7, sl
 8001260:	46de      	mov	lr, fp
 8001262:	464e      	mov	r6, r9
 8001264:	4645      	mov	r5, r8
 8001266:	b5e0      	push	{r5, r6, r7, lr}
 8001268:	000d      	movs	r5, r1
 800126a:	0004      	movs	r4, r0
 800126c:	0fe8      	lsrs	r0, r5, #31
 800126e:	4683      	mov	fp, r0
 8001270:	0309      	lsls	r1, r1, #12
 8001272:	0fd8      	lsrs	r0, r3, #31
 8001274:	0b09      	lsrs	r1, r1, #12
 8001276:	4682      	mov	sl, r0
 8001278:	4819      	ldr	r0, [pc, #100]	@ (80012e0 <__eqdf2+0x84>)
 800127a:	468c      	mov	ip, r1
 800127c:	031f      	lsls	r7, r3, #12
 800127e:	0069      	lsls	r1, r5, #1
 8001280:	005e      	lsls	r6, r3, #1
 8001282:	0d49      	lsrs	r1, r1, #21
 8001284:	0b3f      	lsrs	r7, r7, #12
 8001286:	0d76      	lsrs	r6, r6, #21
 8001288:	4281      	cmp	r1, r0
 800128a:	d018      	beq.n	80012be <__eqdf2+0x62>
 800128c:	4286      	cmp	r6, r0
 800128e:	d00f      	beq.n	80012b0 <__eqdf2+0x54>
 8001290:	2001      	movs	r0, #1
 8001292:	42b1      	cmp	r1, r6
 8001294:	d10d      	bne.n	80012b2 <__eqdf2+0x56>
 8001296:	45bc      	cmp	ip, r7
 8001298:	d10b      	bne.n	80012b2 <__eqdf2+0x56>
 800129a:	4294      	cmp	r4, r2
 800129c:	d109      	bne.n	80012b2 <__eqdf2+0x56>
 800129e:	45d3      	cmp	fp, sl
 80012a0:	d01c      	beq.n	80012dc <__eqdf2+0x80>
 80012a2:	2900      	cmp	r1, #0
 80012a4:	d105      	bne.n	80012b2 <__eqdf2+0x56>
 80012a6:	4660      	mov	r0, ip
 80012a8:	4320      	orrs	r0, r4
 80012aa:	1e43      	subs	r3, r0, #1
 80012ac:	4198      	sbcs	r0, r3
 80012ae:	e000      	b.n	80012b2 <__eqdf2+0x56>
 80012b0:	2001      	movs	r0, #1
 80012b2:	bcf0      	pop	{r4, r5, r6, r7}
 80012b4:	46bb      	mov	fp, r7
 80012b6:	46b2      	mov	sl, r6
 80012b8:	46a9      	mov	r9, r5
 80012ba:	46a0      	mov	r8, r4
 80012bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012be:	2001      	movs	r0, #1
 80012c0:	428e      	cmp	r6, r1
 80012c2:	d1f6      	bne.n	80012b2 <__eqdf2+0x56>
 80012c4:	4661      	mov	r1, ip
 80012c6:	4339      	orrs	r1, r7
 80012c8:	000f      	movs	r7, r1
 80012ca:	4317      	orrs	r7, r2
 80012cc:	4327      	orrs	r7, r4
 80012ce:	d1f0      	bne.n	80012b2 <__eqdf2+0x56>
 80012d0:	465b      	mov	r3, fp
 80012d2:	4652      	mov	r2, sl
 80012d4:	1a98      	subs	r0, r3, r2
 80012d6:	1e43      	subs	r3, r0, #1
 80012d8:	4198      	sbcs	r0, r3
 80012da:	e7ea      	b.n	80012b2 <__eqdf2+0x56>
 80012dc:	2000      	movs	r0, #0
 80012de:	e7e8      	b.n	80012b2 <__eqdf2+0x56>
 80012e0:	000007ff 	.word	0x000007ff

080012e4 <__gedf2>:
 80012e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012e6:	4657      	mov	r7, sl
 80012e8:	464e      	mov	r6, r9
 80012ea:	4645      	mov	r5, r8
 80012ec:	46de      	mov	lr, fp
 80012ee:	b5e0      	push	{r5, r6, r7, lr}
 80012f0:	000d      	movs	r5, r1
 80012f2:	030e      	lsls	r6, r1, #12
 80012f4:	0049      	lsls	r1, r1, #1
 80012f6:	0d49      	lsrs	r1, r1, #21
 80012f8:	468a      	mov	sl, r1
 80012fa:	0fdf      	lsrs	r7, r3, #31
 80012fc:	0fe9      	lsrs	r1, r5, #31
 80012fe:	46bc      	mov	ip, r7
 8001300:	b083      	sub	sp, #12
 8001302:	4f2f      	ldr	r7, [pc, #188]	@ (80013c0 <__gedf2+0xdc>)
 8001304:	0004      	movs	r4, r0
 8001306:	4680      	mov	r8, r0
 8001308:	9101      	str	r1, [sp, #4]
 800130a:	0058      	lsls	r0, r3, #1
 800130c:	0319      	lsls	r1, r3, #12
 800130e:	4691      	mov	r9, r2
 8001310:	0b36      	lsrs	r6, r6, #12
 8001312:	0b09      	lsrs	r1, r1, #12
 8001314:	0d40      	lsrs	r0, r0, #21
 8001316:	45ba      	cmp	sl, r7
 8001318:	d01d      	beq.n	8001356 <__gedf2+0x72>
 800131a:	42b8      	cmp	r0, r7
 800131c:	d00d      	beq.n	800133a <__gedf2+0x56>
 800131e:	4657      	mov	r7, sl
 8001320:	2f00      	cmp	r7, #0
 8001322:	d12a      	bne.n	800137a <__gedf2+0x96>
 8001324:	4334      	orrs	r4, r6
 8001326:	2800      	cmp	r0, #0
 8001328:	d124      	bne.n	8001374 <__gedf2+0x90>
 800132a:	430a      	orrs	r2, r1
 800132c:	d036      	beq.n	800139c <__gedf2+0xb8>
 800132e:	2c00      	cmp	r4, #0
 8001330:	d141      	bne.n	80013b6 <__gedf2+0xd2>
 8001332:	4663      	mov	r3, ip
 8001334:	0058      	lsls	r0, r3, #1
 8001336:	3801      	subs	r0, #1
 8001338:	e015      	b.n	8001366 <__gedf2+0x82>
 800133a:	4311      	orrs	r1, r2
 800133c:	d138      	bne.n	80013b0 <__gedf2+0xcc>
 800133e:	4653      	mov	r3, sl
 8001340:	2b00      	cmp	r3, #0
 8001342:	d101      	bne.n	8001348 <__gedf2+0x64>
 8001344:	4326      	orrs	r6, r4
 8001346:	d0f4      	beq.n	8001332 <__gedf2+0x4e>
 8001348:	9b01      	ldr	r3, [sp, #4]
 800134a:	4563      	cmp	r3, ip
 800134c:	d107      	bne.n	800135e <__gedf2+0x7a>
 800134e:	9b01      	ldr	r3, [sp, #4]
 8001350:	0058      	lsls	r0, r3, #1
 8001352:	3801      	subs	r0, #1
 8001354:	e007      	b.n	8001366 <__gedf2+0x82>
 8001356:	4326      	orrs	r6, r4
 8001358:	d12a      	bne.n	80013b0 <__gedf2+0xcc>
 800135a:	4550      	cmp	r0, sl
 800135c:	d021      	beq.n	80013a2 <__gedf2+0xbe>
 800135e:	2001      	movs	r0, #1
 8001360:	9b01      	ldr	r3, [sp, #4]
 8001362:	425f      	negs	r7, r3
 8001364:	4338      	orrs	r0, r7
 8001366:	b003      	add	sp, #12
 8001368:	bcf0      	pop	{r4, r5, r6, r7}
 800136a:	46bb      	mov	fp, r7
 800136c:	46b2      	mov	sl, r6
 800136e:	46a9      	mov	r9, r5
 8001370:	46a0      	mov	r8, r4
 8001372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001374:	2c00      	cmp	r4, #0
 8001376:	d0dc      	beq.n	8001332 <__gedf2+0x4e>
 8001378:	e7e6      	b.n	8001348 <__gedf2+0x64>
 800137a:	2800      	cmp	r0, #0
 800137c:	d0ef      	beq.n	800135e <__gedf2+0x7a>
 800137e:	9b01      	ldr	r3, [sp, #4]
 8001380:	4563      	cmp	r3, ip
 8001382:	d1ec      	bne.n	800135e <__gedf2+0x7a>
 8001384:	4582      	cmp	sl, r0
 8001386:	dcea      	bgt.n	800135e <__gedf2+0x7a>
 8001388:	dbe1      	blt.n	800134e <__gedf2+0x6a>
 800138a:	428e      	cmp	r6, r1
 800138c:	d8e7      	bhi.n	800135e <__gedf2+0x7a>
 800138e:	d1de      	bne.n	800134e <__gedf2+0x6a>
 8001390:	45c8      	cmp	r8, r9
 8001392:	d8e4      	bhi.n	800135e <__gedf2+0x7a>
 8001394:	2000      	movs	r0, #0
 8001396:	45c8      	cmp	r8, r9
 8001398:	d2e5      	bcs.n	8001366 <__gedf2+0x82>
 800139a:	e7d8      	b.n	800134e <__gedf2+0x6a>
 800139c:	2c00      	cmp	r4, #0
 800139e:	d0e2      	beq.n	8001366 <__gedf2+0x82>
 80013a0:	e7dd      	b.n	800135e <__gedf2+0x7a>
 80013a2:	4311      	orrs	r1, r2
 80013a4:	d104      	bne.n	80013b0 <__gedf2+0xcc>
 80013a6:	9b01      	ldr	r3, [sp, #4]
 80013a8:	4563      	cmp	r3, ip
 80013aa:	d1d8      	bne.n	800135e <__gedf2+0x7a>
 80013ac:	2000      	movs	r0, #0
 80013ae:	e7da      	b.n	8001366 <__gedf2+0x82>
 80013b0:	2002      	movs	r0, #2
 80013b2:	4240      	negs	r0, r0
 80013b4:	e7d7      	b.n	8001366 <__gedf2+0x82>
 80013b6:	9b01      	ldr	r3, [sp, #4]
 80013b8:	4563      	cmp	r3, ip
 80013ba:	d0e6      	beq.n	800138a <__gedf2+0xa6>
 80013bc:	e7cf      	b.n	800135e <__gedf2+0x7a>
 80013be:	46c0      	nop			@ (mov r8, r8)
 80013c0:	000007ff 	.word	0x000007ff

080013c4 <__ledf2>:
 80013c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013c6:	4657      	mov	r7, sl
 80013c8:	464e      	mov	r6, r9
 80013ca:	4645      	mov	r5, r8
 80013cc:	46de      	mov	lr, fp
 80013ce:	b5e0      	push	{r5, r6, r7, lr}
 80013d0:	000d      	movs	r5, r1
 80013d2:	030e      	lsls	r6, r1, #12
 80013d4:	0049      	lsls	r1, r1, #1
 80013d6:	0d49      	lsrs	r1, r1, #21
 80013d8:	468a      	mov	sl, r1
 80013da:	0fdf      	lsrs	r7, r3, #31
 80013dc:	0fe9      	lsrs	r1, r5, #31
 80013de:	46bc      	mov	ip, r7
 80013e0:	b083      	sub	sp, #12
 80013e2:	4f2e      	ldr	r7, [pc, #184]	@ (800149c <__ledf2+0xd8>)
 80013e4:	0004      	movs	r4, r0
 80013e6:	4680      	mov	r8, r0
 80013e8:	9101      	str	r1, [sp, #4]
 80013ea:	0058      	lsls	r0, r3, #1
 80013ec:	0319      	lsls	r1, r3, #12
 80013ee:	4691      	mov	r9, r2
 80013f0:	0b36      	lsrs	r6, r6, #12
 80013f2:	0b09      	lsrs	r1, r1, #12
 80013f4:	0d40      	lsrs	r0, r0, #21
 80013f6:	45ba      	cmp	sl, r7
 80013f8:	d01e      	beq.n	8001438 <__ledf2+0x74>
 80013fa:	42b8      	cmp	r0, r7
 80013fc:	d00d      	beq.n	800141a <__ledf2+0x56>
 80013fe:	4657      	mov	r7, sl
 8001400:	2f00      	cmp	r7, #0
 8001402:	d127      	bne.n	8001454 <__ledf2+0x90>
 8001404:	4334      	orrs	r4, r6
 8001406:	2800      	cmp	r0, #0
 8001408:	d133      	bne.n	8001472 <__ledf2+0xae>
 800140a:	430a      	orrs	r2, r1
 800140c:	d034      	beq.n	8001478 <__ledf2+0xb4>
 800140e:	2c00      	cmp	r4, #0
 8001410:	d140      	bne.n	8001494 <__ledf2+0xd0>
 8001412:	4663      	mov	r3, ip
 8001414:	0058      	lsls	r0, r3, #1
 8001416:	3801      	subs	r0, #1
 8001418:	e015      	b.n	8001446 <__ledf2+0x82>
 800141a:	4311      	orrs	r1, r2
 800141c:	d112      	bne.n	8001444 <__ledf2+0x80>
 800141e:	4653      	mov	r3, sl
 8001420:	2b00      	cmp	r3, #0
 8001422:	d101      	bne.n	8001428 <__ledf2+0x64>
 8001424:	4326      	orrs	r6, r4
 8001426:	d0f4      	beq.n	8001412 <__ledf2+0x4e>
 8001428:	9b01      	ldr	r3, [sp, #4]
 800142a:	4563      	cmp	r3, ip
 800142c:	d01d      	beq.n	800146a <__ledf2+0xa6>
 800142e:	2001      	movs	r0, #1
 8001430:	9b01      	ldr	r3, [sp, #4]
 8001432:	425f      	negs	r7, r3
 8001434:	4338      	orrs	r0, r7
 8001436:	e006      	b.n	8001446 <__ledf2+0x82>
 8001438:	4326      	orrs	r6, r4
 800143a:	d103      	bne.n	8001444 <__ledf2+0x80>
 800143c:	4550      	cmp	r0, sl
 800143e:	d1f6      	bne.n	800142e <__ledf2+0x6a>
 8001440:	4311      	orrs	r1, r2
 8001442:	d01c      	beq.n	800147e <__ledf2+0xba>
 8001444:	2002      	movs	r0, #2
 8001446:	b003      	add	sp, #12
 8001448:	bcf0      	pop	{r4, r5, r6, r7}
 800144a:	46bb      	mov	fp, r7
 800144c:	46b2      	mov	sl, r6
 800144e:	46a9      	mov	r9, r5
 8001450:	46a0      	mov	r8, r4
 8001452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001454:	2800      	cmp	r0, #0
 8001456:	d0ea      	beq.n	800142e <__ledf2+0x6a>
 8001458:	9b01      	ldr	r3, [sp, #4]
 800145a:	4563      	cmp	r3, ip
 800145c:	d1e7      	bne.n	800142e <__ledf2+0x6a>
 800145e:	4582      	cmp	sl, r0
 8001460:	dce5      	bgt.n	800142e <__ledf2+0x6a>
 8001462:	db02      	blt.n	800146a <__ledf2+0xa6>
 8001464:	428e      	cmp	r6, r1
 8001466:	d8e2      	bhi.n	800142e <__ledf2+0x6a>
 8001468:	d00e      	beq.n	8001488 <__ledf2+0xc4>
 800146a:	9b01      	ldr	r3, [sp, #4]
 800146c:	0058      	lsls	r0, r3, #1
 800146e:	3801      	subs	r0, #1
 8001470:	e7e9      	b.n	8001446 <__ledf2+0x82>
 8001472:	2c00      	cmp	r4, #0
 8001474:	d0cd      	beq.n	8001412 <__ledf2+0x4e>
 8001476:	e7d7      	b.n	8001428 <__ledf2+0x64>
 8001478:	2c00      	cmp	r4, #0
 800147a:	d0e4      	beq.n	8001446 <__ledf2+0x82>
 800147c:	e7d7      	b.n	800142e <__ledf2+0x6a>
 800147e:	9b01      	ldr	r3, [sp, #4]
 8001480:	2000      	movs	r0, #0
 8001482:	4563      	cmp	r3, ip
 8001484:	d0df      	beq.n	8001446 <__ledf2+0x82>
 8001486:	e7d2      	b.n	800142e <__ledf2+0x6a>
 8001488:	45c8      	cmp	r8, r9
 800148a:	d8d0      	bhi.n	800142e <__ledf2+0x6a>
 800148c:	2000      	movs	r0, #0
 800148e:	45c8      	cmp	r8, r9
 8001490:	d2d9      	bcs.n	8001446 <__ledf2+0x82>
 8001492:	e7ea      	b.n	800146a <__ledf2+0xa6>
 8001494:	9b01      	ldr	r3, [sp, #4]
 8001496:	4563      	cmp	r3, ip
 8001498:	d0e4      	beq.n	8001464 <__ledf2+0xa0>
 800149a:	e7c8      	b.n	800142e <__ledf2+0x6a>
 800149c:	000007ff 	.word	0x000007ff

080014a0 <__aeabi_dmul>:
 80014a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014a2:	4657      	mov	r7, sl
 80014a4:	464e      	mov	r6, r9
 80014a6:	46de      	mov	lr, fp
 80014a8:	4645      	mov	r5, r8
 80014aa:	b5e0      	push	{r5, r6, r7, lr}
 80014ac:	001f      	movs	r7, r3
 80014ae:	030b      	lsls	r3, r1, #12
 80014b0:	0b1b      	lsrs	r3, r3, #12
 80014b2:	0016      	movs	r6, r2
 80014b4:	469a      	mov	sl, r3
 80014b6:	0fca      	lsrs	r2, r1, #31
 80014b8:	004b      	lsls	r3, r1, #1
 80014ba:	0004      	movs	r4, r0
 80014bc:	4691      	mov	r9, r2
 80014be:	b085      	sub	sp, #20
 80014c0:	0d5b      	lsrs	r3, r3, #21
 80014c2:	d100      	bne.n	80014c6 <__aeabi_dmul+0x26>
 80014c4:	e1cf      	b.n	8001866 <__aeabi_dmul+0x3c6>
 80014c6:	4acd      	ldr	r2, [pc, #820]	@ (80017fc <__aeabi_dmul+0x35c>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d055      	beq.n	8001578 <__aeabi_dmul+0xd8>
 80014cc:	4651      	mov	r1, sl
 80014ce:	0f42      	lsrs	r2, r0, #29
 80014d0:	00c9      	lsls	r1, r1, #3
 80014d2:	430a      	orrs	r2, r1
 80014d4:	2180      	movs	r1, #128	@ 0x80
 80014d6:	0409      	lsls	r1, r1, #16
 80014d8:	4311      	orrs	r1, r2
 80014da:	00c2      	lsls	r2, r0, #3
 80014dc:	4690      	mov	r8, r2
 80014de:	4ac8      	ldr	r2, [pc, #800]	@ (8001800 <__aeabi_dmul+0x360>)
 80014e0:	468a      	mov	sl, r1
 80014e2:	4693      	mov	fp, r2
 80014e4:	449b      	add	fp, r3
 80014e6:	2300      	movs	r3, #0
 80014e8:	2500      	movs	r5, #0
 80014ea:	9302      	str	r3, [sp, #8]
 80014ec:	033c      	lsls	r4, r7, #12
 80014ee:	007b      	lsls	r3, r7, #1
 80014f0:	0ffa      	lsrs	r2, r7, #31
 80014f2:	9601      	str	r6, [sp, #4]
 80014f4:	0b24      	lsrs	r4, r4, #12
 80014f6:	0d5b      	lsrs	r3, r3, #21
 80014f8:	9200      	str	r2, [sp, #0]
 80014fa:	d100      	bne.n	80014fe <__aeabi_dmul+0x5e>
 80014fc:	e188      	b.n	8001810 <__aeabi_dmul+0x370>
 80014fe:	4abf      	ldr	r2, [pc, #764]	@ (80017fc <__aeabi_dmul+0x35c>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d100      	bne.n	8001506 <__aeabi_dmul+0x66>
 8001504:	e092      	b.n	800162c <__aeabi_dmul+0x18c>
 8001506:	4abe      	ldr	r2, [pc, #760]	@ (8001800 <__aeabi_dmul+0x360>)
 8001508:	4694      	mov	ip, r2
 800150a:	4463      	add	r3, ip
 800150c:	449b      	add	fp, r3
 800150e:	2d0a      	cmp	r5, #10
 8001510:	dc42      	bgt.n	8001598 <__aeabi_dmul+0xf8>
 8001512:	00e4      	lsls	r4, r4, #3
 8001514:	0f73      	lsrs	r3, r6, #29
 8001516:	4323      	orrs	r3, r4
 8001518:	2480      	movs	r4, #128	@ 0x80
 800151a:	4649      	mov	r1, r9
 800151c:	0424      	lsls	r4, r4, #16
 800151e:	431c      	orrs	r4, r3
 8001520:	00f3      	lsls	r3, r6, #3
 8001522:	9301      	str	r3, [sp, #4]
 8001524:	9b00      	ldr	r3, [sp, #0]
 8001526:	2000      	movs	r0, #0
 8001528:	4059      	eors	r1, r3
 800152a:	b2cb      	uxtb	r3, r1
 800152c:	9303      	str	r3, [sp, #12]
 800152e:	2d02      	cmp	r5, #2
 8001530:	dc00      	bgt.n	8001534 <__aeabi_dmul+0x94>
 8001532:	e094      	b.n	800165e <__aeabi_dmul+0x1be>
 8001534:	2301      	movs	r3, #1
 8001536:	40ab      	lsls	r3, r5
 8001538:	001d      	movs	r5, r3
 800153a:	23a6      	movs	r3, #166	@ 0xa6
 800153c:	002a      	movs	r2, r5
 800153e:	00db      	lsls	r3, r3, #3
 8001540:	401a      	ands	r2, r3
 8001542:	421d      	tst	r5, r3
 8001544:	d000      	beq.n	8001548 <__aeabi_dmul+0xa8>
 8001546:	e229      	b.n	800199c <__aeabi_dmul+0x4fc>
 8001548:	2390      	movs	r3, #144	@ 0x90
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	421d      	tst	r5, r3
 800154e:	d100      	bne.n	8001552 <__aeabi_dmul+0xb2>
 8001550:	e24d      	b.n	80019ee <__aeabi_dmul+0x54e>
 8001552:	2300      	movs	r3, #0
 8001554:	2480      	movs	r4, #128	@ 0x80
 8001556:	4699      	mov	r9, r3
 8001558:	0324      	lsls	r4, r4, #12
 800155a:	4ba8      	ldr	r3, [pc, #672]	@ (80017fc <__aeabi_dmul+0x35c>)
 800155c:	0010      	movs	r0, r2
 800155e:	464a      	mov	r2, r9
 8001560:	051b      	lsls	r3, r3, #20
 8001562:	4323      	orrs	r3, r4
 8001564:	07d2      	lsls	r2, r2, #31
 8001566:	4313      	orrs	r3, r2
 8001568:	0019      	movs	r1, r3
 800156a:	b005      	add	sp, #20
 800156c:	bcf0      	pop	{r4, r5, r6, r7}
 800156e:	46bb      	mov	fp, r7
 8001570:	46b2      	mov	sl, r6
 8001572:	46a9      	mov	r9, r5
 8001574:	46a0      	mov	r8, r4
 8001576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001578:	4652      	mov	r2, sl
 800157a:	4302      	orrs	r2, r0
 800157c:	4690      	mov	r8, r2
 800157e:	d000      	beq.n	8001582 <__aeabi_dmul+0xe2>
 8001580:	e1ac      	b.n	80018dc <__aeabi_dmul+0x43c>
 8001582:	469b      	mov	fp, r3
 8001584:	2302      	movs	r3, #2
 8001586:	4692      	mov	sl, r2
 8001588:	2508      	movs	r5, #8
 800158a:	9302      	str	r3, [sp, #8]
 800158c:	e7ae      	b.n	80014ec <__aeabi_dmul+0x4c>
 800158e:	9b00      	ldr	r3, [sp, #0]
 8001590:	46a2      	mov	sl, r4
 8001592:	4699      	mov	r9, r3
 8001594:	9b01      	ldr	r3, [sp, #4]
 8001596:	4698      	mov	r8, r3
 8001598:	9b02      	ldr	r3, [sp, #8]
 800159a:	2b02      	cmp	r3, #2
 800159c:	d100      	bne.n	80015a0 <__aeabi_dmul+0x100>
 800159e:	e1ca      	b.n	8001936 <__aeabi_dmul+0x496>
 80015a0:	2b03      	cmp	r3, #3
 80015a2:	d100      	bne.n	80015a6 <__aeabi_dmul+0x106>
 80015a4:	e192      	b.n	80018cc <__aeabi_dmul+0x42c>
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d110      	bne.n	80015cc <__aeabi_dmul+0x12c>
 80015aa:	2300      	movs	r3, #0
 80015ac:	2400      	movs	r4, #0
 80015ae:	2200      	movs	r2, #0
 80015b0:	e7d4      	b.n	800155c <__aeabi_dmul+0xbc>
 80015b2:	2201      	movs	r2, #1
 80015b4:	087b      	lsrs	r3, r7, #1
 80015b6:	403a      	ands	r2, r7
 80015b8:	4313      	orrs	r3, r2
 80015ba:	4652      	mov	r2, sl
 80015bc:	07d2      	lsls	r2, r2, #31
 80015be:	4313      	orrs	r3, r2
 80015c0:	4698      	mov	r8, r3
 80015c2:	4653      	mov	r3, sl
 80015c4:	085b      	lsrs	r3, r3, #1
 80015c6:	469a      	mov	sl, r3
 80015c8:	9b03      	ldr	r3, [sp, #12]
 80015ca:	4699      	mov	r9, r3
 80015cc:	465b      	mov	r3, fp
 80015ce:	1c58      	adds	r0, r3, #1
 80015d0:	2380      	movs	r3, #128	@ 0x80
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	445b      	add	r3, fp
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	dc00      	bgt.n	80015dc <__aeabi_dmul+0x13c>
 80015da:	e1b1      	b.n	8001940 <__aeabi_dmul+0x4a0>
 80015dc:	4642      	mov	r2, r8
 80015de:	0752      	lsls	r2, r2, #29
 80015e0:	d00b      	beq.n	80015fa <__aeabi_dmul+0x15a>
 80015e2:	220f      	movs	r2, #15
 80015e4:	4641      	mov	r1, r8
 80015e6:	400a      	ands	r2, r1
 80015e8:	2a04      	cmp	r2, #4
 80015ea:	d006      	beq.n	80015fa <__aeabi_dmul+0x15a>
 80015ec:	4642      	mov	r2, r8
 80015ee:	1d11      	adds	r1, r2, #4
 80015f0:	4541      	cmp	r1, r8
 80015f2:	4192      	sbcs	r2, r2
 80015f4:	4688      	mov	r8, r1
 80015f6:	4252      	negs	r2, r2
 80015f8:	4492      	add	sl, r2
 80015fa:	4652      	mov	r2, sl
 80015fc:	01d2      	lsls	r2, r2, #7
 80015fe:	d506      	bpl.n	800160e <__aeabi_dmul+0x16e>
 8001600:	4652      	mov	r2, sl
 8001602:	4b80      	ldr	r3, [pc, #512]	@ (8001804 <__aeabi_dmul+0x364>)
 8001604:	401a      	ands	r2, r3
 8001606:	2380      	movs	r3, #128	@ 0x80
 8001608:	4692      	mov	sl, r2
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	18c3      	adds	r3, r0, r3
 800160e:	4a7e      	ldr	r2, [pc, #504]	@ (8001808 <__aeabi_dmul+0x368>)
 8001610:	4293      	cmp	r3, r2
 8001612:	dd00      	ble.n	8001616 <__aeabi_dmul+0x176>
 8001614:	e18f      	b.n	8001936 <__aeabi_dmul+0x496>
 8001616:	4642      	mov	r2, r8
 8001618:	08d1      	lsrs	r1, r2, #3
 800161a:	4652      	mov	r2, sl
 800161c:	0752      	lsls	r2, r2, #29
 800161e:	430a      	orrs	r2, r1
 8001620:	4651      	mov	r1, sl
 8001622:	055b      	lsls	r3, r3, #21
 8001624:	024c      	lsls	r4, r1, #9
 8001626:	0b24      	lsrs	r4, r4, #12
 8001628:	0d5b      	lsrs	r3, r3, #21
 800162a:	e797      	b.n	800155c <__aeabi_dmul+0xbc>
 800162c:	4b73      	ldr	r3, [pc, #460]	@ (80017fc <__aeabi_dmul+0x35c>)
 800162e:	4326      	orrs	r6, r4
 8001630:	469c      	mov	ip, r3
 8001632:	44e3      	add	fp, ip
 8001634:	2e00      	cmp	r6, #0
 8001636:	d100      	bne.n	800163a <__aeabi_dmul+0x19a>
 8001638:	e16f      	b.n	800191a <__aeabi_dmul+0x47a>
 800163a:	2303      	movs	r3, #3
 800163c:	4649      	mov	r1, r9
 800163e:	431d      	orrs	r5, r3
 8001640:	9b00      	ldr	r3, [sp, #0]
 8001642:	4059      	eors	r1, r3
 8001644:	b2cb      	uxtb	r3, r1
 8001646:	9303      	str	r3, [sp, #12]
 8001648:	2d0a      	cmp	r5, #10
 800164a:	dd00      	ble.n	800164e <__aeabi_dmul+0x1ae>
 800164c:	e133      	b.n	80018b6 <__aeabi_dmul+0x416>
 800164e:	2301      	movs	r3, #1
 8001650:	40ab      	lsls	r3, r5
 8001652:	001d      	movs	r5, r3
 8001654:	2303      	movs	r3, #3
 8001656:	9302      	str	r3, [sp, #8]
 8001658:	2288      	movs	r2, #136	@ 0x88
 800165a:	422a      	tst	r2, r5
 800165c:	d197      	bne.n	800158e <__aeabi_dmul+0xee>
 800165e:	4642      	mov	r2, r8
 8001660:	4643      	mov	r3, r8
 8001662:	0412      	lsls	r2, r2, #16
 8001664:	0c12      	lsrs	r2, r2, #16
 8001666:	0016      	movs	r6, r2
 8001668:	9801      	ldr	r0, [sp, #4]
 800166a:	0c1d      	lsrs	r5, r3, #16
 800166c:	0c03      	lsrs	r3, r0, #16
 800166e:	0400      	lsls	r0, r0, #16
 8001670:	0c00      	lsrs	r0, r0, #16
 8001672:	4346      	muls	r6, r0
 8001674:	46b4      	mov	ip, r6
 8001676:	001e      	movs	r6, r3
 8001678:	436e      	muls	r6, r5
 800167a:	9600      	str	r6, [sp, #0]
 800167c:	0016      	movs	r6, r2
 800167e:	0007      	movs	r7, r0
 8001680:	435e      	muls	r6, r3
 8001682:	4661      	mov	r1, ip
 8001684:	46b0      	mov	r8, r6
 8001686:	436f      	muls	r7, r5
 8001688:	0c0e      	lsrs	r6, r1, #16
 800168a:	44b8      	add	r8, r7
 800168c:	4446      	add	r6, r8
 800168e:	42b7      	cmp	r7, r6
 8001690:	d905      	bls.n	800169e <__aeabi_dmul+0x1fe>
 8001692:	2180      	movs	r1, #128	@ 0x80
 8001694:	0249      	lsls	r1, r1, #9
 8001696:	4688      	mov	r8, r1
 8001698:	9f00      	ldr	r7, [sp, #0]
 800169a:	4447      	add	r7, r8
 800169c:	9700      	str	r7, [sp, #0]
 800169e:	4661      	mov	r1, ip
 80016a0:	0409      	lsls	r1, r1, #16
 80016a2:	0c09      	lsrs	r1, r1, #16
 80016a4:	0c37      	lsrs	r7, r6, #16
 80016a6:	0436      	lsls	r6, r6, #16
 80016a8:	468c      	mov	ip, r1
 80016aa:	0031      	movs	r1, r6
 80016ac:	4461      	add	r1, ip
 80016ae:	9101      	str	r1, [sp, #4]
 80016b0:	0011      	movs	r1, r2
 80016b2:	0c26      	lsrs	r6, r4, #16
 80016b4:	0424      	lsls	r4, r4, #16
 80016b6:	0c24      	lsrs	r4, r4, #16
 80016b8:	4361      	muls	r1, r4
 80016ba:	468c      	mov	ip, r1
 80016bc:	0021      	movs	r1, r4
 80016be:	4369      	muls	r1, r5
 80016c0:	4689      	mov	r9, r1
 80016c2:	4661      	mov	r1, ip
 80016c4:	0c09      	lsrs	r1, r1, #16
 80016c6:	4688      	mov	r8, r1
 80016c8:	4372      	muls	r2, r6
 80016ca:	444a      	add	r2, r9
 80016cc:	4442      	add	r2, r8
 80016ce:	4375      	muls	r5, r6
 80016d0:	4591      	cmp	r9, r2
 80016d2:	d903      	bls.n	80016dc <__aeabi_dmul+0x23c>
 80016d4:	2180      	movs	r1, #128	@ 0x80
 80016d6:	0249      	lsls	r1, r1, #9
 80016d8:	4688      	mov	r8, r1
 80016da:	4445      	add	r5, r8
 80016dc:	0c11      	lsrs	r1, r2, #16
 80016de:	4688      	mov	r8, r1
 80016e0:	4661      	mov	r1, ip
 80016e2:	0409      	lsls	r1, r1, #16
 80016e4:	0c09      	lsrs	r1, r1, #16
 80016e6:	468c      	mov	ip, r1
 80016e8:	0412      	lsls	r2, r2, #16
 80016ea:	4462      	add	r2, ip
 80016ec:	18b9      	adds	r1, r7, r2
 80016ee:	9102      	str	r1, [sp, #8]
 80016f0:	4651      	mov	r1, sl
 80016f2:	0c09      	lsrs	r1, r1, #16
 80016f4:	468c      	mov	ip, r1
 80016f6:	4651      	mov	r1, sl
 80016f8:	040f      	lsls	r7, r1, #16
 80016fa:	0c3f      	lsrs	r7, r7, #16
 80016fc:	0039      	movs	r1, r7
 80016fe:	4341      	muls	r1, r0
 8001700:	4445      	add	r5, r8
 8001702:	4688      	mov	r8, r1
 8001704:	4661      	mov	r1, ip
 8001706:	4341      	muls	r1, r0
 8001708:	468a      	mov	sl, r1
 800170a:	4641      	mov	r1, r8
 800170c:	4660      	mov	r0, ip
 800170e:	0c09      	lsrs	r1, r1, #16
 8001710:	4689      	mov	r9, r1
 8001712:	4358      	muls	r0, r3
 8001714:	437b      	muls	r3, r7
 8001716:	4453      	add	r3, sl
 8001718:	444b      	add	r3, r9
 800171a:	459a      	cmp	sl, r3
 800171c:	d903      	bls.n	8001726 <__aeabi_dmul+0x286>
 800171e:	2180      	movs	r1, #128	@ 0x80
 8001720:	0249      	lsls	r1, r1, #9
 8001722:	4689      	mov	r9, r1
 8001724:	4448      	add	r0, r9
 8001726:	0c19      	lsrs	r1, r3, #16
 8001728:	4689      	mov	r9, r1
 800172a:	4641      	mov	r1, r8
 800172c:	0409      	lsls	r1, r1, #16
 800172e:	0c09      	lsrs	r1, r1, #16
 8001730:	4688      	mov	r8, r1
 8001732:	0039      	movs	r1, r7
 8001734:	4361      	muls	r1, r4
 8001736:	041b      	lsls	r3, r3, #16
 8001738:	4443      	add	r3, r8
 800173a:	4688      	mov	r8, r1
 800173c:	4661      	mov	r1, ip
 800173e:	434c      	muls	r4, r1
 8001740:	4371      	muls	r1, r6
 8001742:	468c      	mov	ip, r1
 8001744:	4641      	mov	r1, r8
 8001746:	4377      	muls	r7, r6
 8001748:	0c0e      	lsrs	r6, r1, #16
 800174a:	193f      	adds	r7, r7, r4
 800174c:	19f6      	adds	r6, r6, r7
 800174e:	4448      	add	r0, r9
 8001750:	42b4      	cmp	r4, r6
 8001752:	d903      	bls.n	800175c <__aeabi_dmul+0x2bc>
 8001754:	2180      	movs	r1, #128	@ 0x80
 8001756:	0249      	lsls	r1, r1, #9
 8001758:	4689      	mov	r9, r1
 800175a:	44cc      	add	ip, r9
 800175c:	9902      	ldr	r1, [sp, #8]
 800175e:	9f00      	ldr	r7, [sp, #0]
 8001760:	4689      	mov	r9, r1
 8001762:	0431      	lsls	r1, r6, #16
 8001764:	444f      	add	r7, r9
 8001766:	4689      	mov	r9, r1
 8001768:	4641      	mov	r1, r8
 800176a:	4297      	cmp	r7, r2
 800176c:	4192      	sbcs	r2, r2
 800176e:	040c      	lsls	r4, r1, #16
 8001770:	0c24      	lsrs	r4, r4, #16
 8001772:	444c      	add	r4, r9
 8001774:	18ff      	adds	r7, r7, r3
 8001776:	4252      	negs	r2, r2
 8001778:	1964      	adds	r4, r4, r5
 800177a:	18a1      	adds	r1, r4, r2
 800177c:	429f      	cmp	r7, r3
 800177e:	419b      	sbcs	r3, r3
 8001780:	4688      	mov	r8, r1
 8001782:	4682      	mov	sl, r0
 8001784:	425b      	negs	r3, r3
 8001786:	4699      	mov	r9, r3
 8001788:	4590      	cmp	r8, r2
 800178a:	4192      	sbcs	r2, r2
 800178c:	42ac      	cmp	r4, r5
 800178e:	41a4      	sbcs	r4, r4
 8001790:	44c2      	add	sl, r8
 8001792:	44d1      	add	r9, sl
 8001794:	4252      	negs	r2, r2
 8001796:	4264      	negs	r4, r4
 8001798:	4314      	orrs	r4, r2
 800179a:	4599      	cmp	r9, r3
 800179c:	419b      	sbcs	r3, r3
 800179e:	4582      	cmp	sl, r0
 80017a0:	4192      	sbcs	r2, r2
 80017a2:	425b      	negs	r3, r3
 80017a4:	4252      	negs	r2, r2
 80017a6:	4313      	orrs	r3, r2
 80017a8:	464a      	mov	r2, r9
 80017aa:	0c36      	lsrs	r6, r6, #16
 80017ac:	19a4      	adds	r4, r4, r6
 80017ae:	18e3      	adds	r3, r4, r3
 80017b0:	4463      	add	r3, ip
 80017b2:	025b      	lsls	r3, r3, #9
 80017b4:	0dd2      	lsrs	r2, r2, #23
 80017b6:	431a      	orrs	r2, r3
 80017b8:	9901      	ldr	r1, [sp, #4]
 80017ba:	4692      	mov	sl, r2
 80017bc:	027a      	lsls	r2, r7, #9
 80017be:	430a      	orrs	r2, r1
 80017c0:	1e50      	subs	r0, r2, #1
 80017c2:	4182      	sbcs	r2, r0
 80017c4:	0dff      	lsrs	r7, r7, #23
 80017c6:	4317      	orrs	r7, r2
 80017c8:	464a      	mov	r2, r9
 80017ca:	0252      	lsls	r2, r2, #9
 80017cc:	4317      	orrs	r7, r2
 80017ce:	46b8      	mov	r8, r7
 80017d0:	01db      	lsls	r3, r3, #7
 80017d2:	d500      	bpl.n	80017d6 <__aeabi_dmul+0x336>
 80017d4:	e6ed      	b.n	80015b2 <__aeabi_dmul+0x112>
 80017d6:	4b0d      	ldr	r3, [pc, #52]	@ (800180c <__aeabi_dmul+0x36c>)
 80017d8:	9a03      	ldr	r2, [sp, #12]
 80017da:	445b      	add	r3, fp
 80017dc:	4691      	mov	r9, r2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	dc00      	bgt.n	80017e4 <__aeabi_dmul+0x344>
 80017e2:	e0ac      	b.n	800193e <__aeabi_dmul+0x49e>
 80017e4:	003a      	movs	r2, r7
 80017e6:	0752      	lsls	r2, r2, #29
 80017e8:	d100      	bne.n	80017ec <__aeabi_dmul+0x34c>
 80017ea:	e710      	b.n	800160e <__aeabi_dmul+0x16e>
 80017ec:	220f      	movs	r2, #15
 80017ee:	4658      	mov	r0, fp
 80017f0:	403a      	ands	r2, r7
 80017f2:	2a04      	cmp	r2, #4
 80017f4:	d000      	beq.n	80017f8 <__aeabi_dmul+0x358>
 80017f6:	e6f9      	b.n	80015ec <__aeabi_dmul+0x14c>
 80017f8:	e709      	b.n	800160e <__aeabi_dmul+0x16e>
 80017fa:	46c0      	nop			@ (mov r8, r8)
 80017fc:	000007ff 	.word	0x000007ff
 8001800:	fffffc01 	.word	0xfffffc01
 8001804:	feffffff 	.word	0xfeffffff
 8001808:	000007fe 	.word	0x000007fe
 800180c:	000003ff 	.word	0x000003ff
 8001810:	0022      	movs	r2, r4
 8001812:	4332      	orrs	r2, r6
 8001814:	d06f      	beq.n	80018f6 <__aeabi_dmul+0x456>
 8001816:	2c00      	cmp	r4, #0
 8001818:	d100      	bne.n	800181c <__aeabi_dmul+0x37c>
 800181a:	e0c2      	b.n	80019a2 <__aeabi_dmul+0x502>
 800181c:	0020      	movs	r0, r4
 800181e:	f000 fddf 	bl	80023e0 <__clzsi2>
 8001822:	0002      	movs	r2, r0
 8001824:	0003      	movs	r3, r0
 8001826:	3a0b      	subs	r2, #11
 8001828:	201d      	movs	r0, #29
 800182a:	1a82      	subs	r2, r0, r2
 800182c:	0030      	movs	r0, r6
 800182e:	0019      	movs	r1, r3
 8001830:	40d0      	lsrs	r0, r2
 8001832:	3908      	subs	r1, #8
 8001834:	408c      	lsls	r4, r1
 8001836:	0002      	movs	r2, r0
 8001838:	4322      	orrs	r2, r4
 800183a:	0034      	movs	r4, r6
 800183c:	408c      	lsls	r4, r1
 800183e:	4659      	mov	r1, fp
 8001840:	1acb      	subs	r3, r1, r3
 8001842:	4986      	ldr	r1, [pc, #536]	@ (8001a5c <__aeabi_dmul+0x5bc>)
 8001844:	468b      	mov	fp, r1
 8001846:	449b      	add	fp, r3
 8001848:	2d0a      	cmp	r5, #10
 800184a:	dd00      	ble.n	800184e <__aeabi_dmul+0x3ae>
 800184c:	e6a4      	b.n	8001598 <__aeabi_dmul+0xf8>
 800184e:	4649      	mov	r1, r9
 8001850:	9b00      	ldr	r3, [sp, #0]
 8001852:	9401      	str	r4, [sp, #4]
 8001854:	4059      	eors	r1, r3
 8001856:	b2cb      	uxtb	r3, r1
 8001858:	0014      	movs	r4, r2
 800185a:	2000      	movs	r0, #0
 800185c:	9303      	str	r3, [sp, #12]
 800185e:	2d02      	cmp	r5, #2
 8001860:	dd00      	ble.n	8001864 <__aeabi_dmul+0x3c4>
 8001862:	e667      	b.n	8001534 <__aeabi_dmul+0x94>
 8001864:	e6fb      	b.n	800165e <__aeabi_dmul+0x1be>
 8001866:	4653      	mov	r3, sl
 8001868:	4303      	orrs	r3, r0
 800186a:	4698      	mov	r8, r3
 800186c:	d03c      	beq.n	80018e8 <__aeabi_dmul+0x448>
 800186e:	4653      	mov	r3, sl
 8001870:	2b00      	cmp	r3, #0
 8001872:	d100      	bne.n	8001876 <__aeabi_dmul+0x3d6>
 8001874:	e0a3      	b.n	80019be <__aeabi_dmul+0x51e>
 8001876:	4650      	mov	r0, sl
 8001878:	f000 fdb2 	bl	80023e0 <__clzsi2>
 800187c:	230b      	movs	r3, #11
 800187e:	425b      	negs	r3, r3
 8001880:	469c      	mov	ip, r3
 8001882:	0002      	movs	r2, r0
 8001884:	4484      	add	ip, r0
 8001886:	0011      	movs	r1, r2
 8001888:	4650      	mov	r0, sl
 800188a:	3908      	subs	r1, #8
 800188c:	4088      	lsls	r0, r1
 800188e:	231d      	movs	r3, #29
 8001890:	4680      	mov	r8, r0
 8001892:	4660      	mov	r0, ip
 8001894:	1a1b      	subs	r3, r3, r0
 8001896:	0020      	movs	r0, r4
 8001898:	40d8      	lsrs	r0, r3
 800189a:	0003      	movs	r3, r0
 800189c:	4640      	mov	r0, r8
 800189e:	4303      	orrs	r3, r0
 80018a0:	469a      	mov	sl, r3
 80018a2:	0023      	movs	r3, r4
 80018a4:	408b      	lsls	r3, r1
 80018a6:	4698      	mov	r8, r3
 80018a8:	4b6c      	ldr	r3, [pc, #432]	@ (8001a5c <__aeabi_dmul+0x5bc>)
 80018aa:	2500      	movs	r5, #0
 80018ac:	1a9b      	subs	r3, r3, r2
 80018ae:	469b      	mov	fp, r3
 80018b0:	2300      	movs	r3, #0
 80018b2:	9302      	str	r3, [sp, #8]
 80018b4:	e61a      	b.n	80014ec <__aeabi_dmul+0x4c>
 80018b6:	2d0f      	cmp	r5, #15
 80018b8:	d000      	beq.n	80018bc <__aeabi_dmul+0x41c>
 80018ba:	e0c9      	b.n	8001a50 <__aeabi_dmul+0x5b0>
 80018bc:	2380      	movs	r3, #128	@ 0x80
 80018be:	4652      	mov	r2, sl
 80018c0:	031b      	lsls	r3, r3, #12
 80018c2:	421a      	tst	r2, r3
 80018c4:	d002      	beq.n	80018cc <__aeabi_dmul+0x42c>
 80018c6:	421c      	tst	r4, r3
 80018c8:	d100      	bne.n	80018cc <__aeabi_dmul+0x42c>
 80018ca:	e092      	b.n	80019f2 <__aeabi_dmul+0x552>
 80018cc:	2480      	movs	r4, #128	@ 0x80
 80018ce:	4653      	mov	r3, sl
 80018d0:	0324      	lsls	r4, r4, #12
 80018d2:	431c      	orrs	r4, r3
 80018d4:	0324      	lsls	r4, r4, #12
 80018d6:	4642      	mov	r2, r8
 80018d8:	0b24      	lsrs	r4, r4, #12
 80018da:	e63e      	b.n	800155a <__aeabi_dmul+0xba>
 80018dc:	469b      	mov	fp, r3
 80018de:	2303      	movs	r3, #3
 80018e0:	4680      	mov	r8, r0
 80018e2:	250c      	movs	r5, #12
 80018e4:	9302      	str	r3, [sp, #8]
 80018e6:	e601      	b.n	80014ec <__aeabi_dmul+0x4c>
 80018e8:	2300      	movs	r3, #0
 80018ea:	469a      	mov	sl, r3
 80018ec:	469b      	mov	fp, r3
 80018ee:	3301      	adds	r3, #1
 80018f0:	2504      	movs	r5, #4
 80018f2:	9302      	str	r3, [sp, #8]
 80018f4:	e5fa      	b.n	80014ec <__aeabi_dmul+0x4c>
 80018f6:	2101      	movs	r1, #1
 80018f8:	430d      	orrs	r5, r1
 80018fa:	2d0a      	cmp	r5, #10
 80018fc:	dd00      	ble.n	8001900 <__aeabi_dmul+0x460>
 80018fe:	e64b      	b.n	8001598 <__aeabi_dmul+0xf8>
 8001900:	4649      	mov	r1, r9
 8001902:	9800      	ldr	r0, [sp, #0]
 8001904:	4041      	eors	r1, r0
 8001906:	b2c9      	uxtb	r1, r1
 8001908:	9103      	str	r1, [sp, #12]
 800190a:	2d02      	cmp	r5, #2
 800190c:	dc00      	bgt.n	8001910 <__aeabi_dmul+0x470>
 800190e:	e096      	b.n	8001a3e <__aeabi_dmul+0x59e>
 8001910:	2300      	movs	r3, #0
 8001912:	2400      	movs	r4, #0
 8001914:	2001      	movs	r0, #1
 8001916:	9301      	str	r3, [sp, #4]
 8001918:	e60c      	b.n	8001534 <__aeabi_dmul+0x94>
 800191a:	4649      	mov	r1, r9
 800191c:	2302      	movs	r3, #2
 800191e:	9a00      	ldr	r2, [sp, #0]
 8001920:	432b      	orrs	r3, r5
 8001922:	4051      	eors	r1, r2
 8001924:	b2ca      	uxtb	r2, r1
 8001926:	9203      	str	r2, [sp, #12]
 8001928:	2b0a      	cmp	r3, #10
 800192a:	dd00      	ble.n	800192e <__aeabi_dmul+0x48e>
 800192c:	e634      	b.n	8001598 <__aeabi_dmul+0xf8>
 800192e:	2d00      	cmp	r5, #0
 8001930:	d157      	bne.n	80019e2 <__aeabi_dmul+0x542>
 8001932:	9b03      	ldr	r3, [sp, #12]
 8001934:	4699      	mov	r9, r3
 8001936:	2400      	movs	r4, #0
 8001938:	2200      	movs	r2, #0
 800193a:	4b49      	ldr	r3, [pc, #292]	@ (8001a60 <__aeabi_dmul+0x5c0>)
 800193c:	e60e      	b.n	800155c <__aeabi_dmul+0xbc>
 800193e:	4658      	mov	r0, fp
 8001940:	2101      	movs	r1, #1
 8001942:	1ac9      	subs	r1, r1, r3
 8001944:	2938      	cmp	r1, #56	@ 0x38
 8001946:	dd00      	ble.n	800194a <__aeabi_dmul+0x4aa>
 8001948:	e62f      	b.n	80015aa <__aeabi_dmul+0x10a>
 800194a:	291f      	cmp	r1, #31
 800194c:	dd56      	ble.n	80019fc <__aeabi_dmul+0x55c>
 800194e:	221f      	movs	r2, #31
 8001950:	4654      	mov	r4, sl
 8001952:	4252      	negs	r2, r2
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	40dc      	lsrs	r4, r3
 8001958:	2920      	cmp	r1, #32
 800195a:	d007      	beq.n	800196c <__aeabi_dmul+0x4cc>
 800195c:	4b41      	ldr	r3, [pc, #260]	@ (8001a64 <__aeabi_dmul+0x5c4>)
 800195e:	4642      	mov	r2, r8
 8001960:	469c      	mov	ip, r3
 8001962:	4653      	mov	r3, sl
 8001964:	4460      	add	r0, ip
 8001966:	4083      	lsls	r3, r0
 8001968:	431a      	orrs	r2, r3
 800196a:	4690      	mov	r8, r2
 800196c:	4642      	mov	r2, r8
 800196e:	2107      	movs	r1, #7
 8001970:	1e53      	subs	r3, r2, #1
 8001972:	419a      	sbcs	r2, r3
 8001974:	000b      	movs	r3, r1
 8001976:	4322      	orrs	r2, r4
 8001978:	4013      	ands	r3, r2
 800197a:	2400      	movs	r4, #0
 800197c:	4211      	tst	r1, r2
 800197e:	d009      	beq.n	8001994 <__aeabi_dmul+0x4f4>
 8001980:	230f      	movs	r3, #15
 8001982:	4013      	ands	r3, r2
 8001984:	2b04      	cmp	r3, #4
 8001986:	d05d      	beq.n	8001a44 <__aeabi_dmul+0x5a4>
 8001988:	1d11      	adds	r1, r2, #4
 800198a:	4291      	cmp	r1, r2
 800198c:	419b      	sbcs	r3, r3
 800198e:	000a      	movs	r2, r1
 8001990:	425b      	negs	r3, r3
 8001992:	075b      	lsls	r3, r3, #29
 8001994:	08d2      	lsrs	r2, r2, #3
 8001996:	431a      	orrs	r2, r3
 8001998:	2300      	movs	r3, #0
 800199a:	e5df      	b.n	800155c <__aeabi_dmul+0xbc>
 800199c:	9b03      	ldr	r3, [sp, #12]
 800199e:	4699      	mov	r9, r3
 80019a0:	e5fa      	b.n	8001598 <__aeabi_dmul+0xf8>
 80019a2:	9801      	ldr	r0, [sp, #4]
 80019a4:	f000 fd1c 	bl	80023e0 <__clzsi2>
 80019a8:	0002      	movs	r2, r0
 80019aa:	0003      	movs	r3, r0
 80019ac:	3215      	adds	r2, #21
 80019ae:	3320      	adds	r3, #32
 80019b0:	2a1c      	cmp	r2, #28
 80019b2:	dc00      	bgt.n	80019b6 <__aeabi_dmul+0x516>
 80019b4:	e738      	b.n	8001828 <__aeabi_dmul+0x388>
 80019b6:	9a01      	ldr	r2, [sp, #4]
 80019b8:	3808      	subs	r0, #8
 80019ba:	4082      	lsls	r2, r0
 80019bc:	e73f      	b.n	800183e <__aeabi_dmul+0x39e>
 80019be:	f000 fd0f 	bl	80023e0 <__clzsi2>
 80019c2:	2315      	movs	r3, #21
 80019c4:	469c      	mov	ip, r3
 80019c6:	4484      	add	ip, r0
 80019c8:	0002      	movs	r2, r0
 80019ca:	4663      	mov	r3, ip
 80019cc:	3220      	adds	r2, #32
 80019ce:	2b1c      	cmp	r3, #28
 80019d0:	dc00      	bgt.n	80019d4 <__aeabi_dmul+0x534>
 80019d2:	e758      	b.n	8001886 <__aeabi_dmul+0x3e6>
 80019d4:	2300      	movs	r3, #0
 80019d6:	4698      	mov	r8, r3
 80019d8:	0023      	movs	r3, r4
 80019da:	3808      	subs	r0, #8
 80019dc:	4083      	lsls	r3, r0
 80019de:	469a      	mov	sl, r3
 80019e0:	e762      	b.n	80018a8 <__aeabi_dmul+0x408>
 80019e2:	001d      	movs	r5, r3
 80019e4:	2300      	movs	r3, #0
 80019e6:	2400      	movs	r4, #0
 80019e8:	2002      	movs	r0, #2
 80019ea:	9301      	str	r3, [sp, #4]
 80019ec:	e5a2      	b.n	8001534 <__aeabi_dmul+0x94>
 80019ee:	9002      	str	r0, [sp, #8]
 80019f0:	e632      	b.n	8001658 <__aeabi_dmul+0x1b8>
 80019f2:	431c      	orrs	r4, r3
 80019f4:	9b00      	ldr	r3, [sp, #0]
 80019f6:	9a01      	ldr	r2, [sp, #4]
 80019f8:	4699      	mov	r9, r3
 80019fa:	e5ae      	b.n	800155a <__aeabi_dmul+0xba>
 80019fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001a68 <__aeabi_dmul+0x5c8>)
 80019fe:	4652      	mov	r2, sl
 8001a00:	18c3      	adds	r3, r0, r3
 8001a02:	4640      	mov	r0, r8
 8001a04:	409a      	lsls	r2, r3
 8001a06:	40c8      	lsrs	r0, r1
 8001a08:	4302      	orrs	r2, r0
 8001a0a:	4640      	mov	r0, r8
 8001a0c:	4098      	lsls	r0, r3
 8001a0e:	0003      	movs	r3, r0
 8001a10:	1e58      	subs	r0, r3, #1
 8001a12:	4183      	sbcs	r3, r0
 8001a14:	4654      	mov	r4, sl
 8001a16:	431a      	orrs	r2, r3
 8001a18:	40cc      	lsrs	r4, r1
 8001a1a:	0753      	lsls	r3, r2, #29
 8001a1c:	d009      	beq.n	8001a32 <__aeabi_dmul+0x592>
 8001a1e:	230f      	movs	r3, #15
 8001a20:	4013      	ands	r3, r2
 8001a22:	2b04      	cmp	r3, #4
 8001a24:	d005      	beq.n	8001a32 <__aeabi_dmul+0x592>
 8001a26:	1d13      	adds	r3, r2, #4
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	4192      	sbcs	r2, r2
 8001a2c:	4252      	negs	r2, r2
 8001a2e:	18a4      	adds	r4, r4, r2
 8001a30:	001a      	movs	r2, r3
 8001a32:	0223      	lsls	r3, r4, #8
 8001a34:	d508      	bpl.n	8001a48 <__aeabi_dmul+0x5a8>
 8001a36:	2301      	movs	r3, #1
 8001a38:	2400      	movs	r4, #0
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	e58e      	b.n	800155c <__aeabi_dmul+0xbc>
 8001a3e:	4689      	mov	r9, r1
 8001a40:	2400      	movs	r4, #0
 8001a42:	e58b      	b.n	800155c <__aeabi_dmul+0xbc>
 8001a44:	2300      	movs	r3, #0
 8001a46:	e7a5      	b.n	8001994 <__aeabi_dmul+0x4f4>
 8001a48:	0763      	lsls	r3, r4, #29
 8001a4a:	0264      	lsls	r4, r4, #9
 8001a4c:	0b24      	lsrs	r4, r4, #12
 8001a4e:	e7a1      	b.n	8001994 <__aeabi_dmul+0x4f4>
 8001a50:	9b00      	ldr	r3, [sp, #0]
 8001a52:	46a2      	mov	sl, r4
 8001a54:	4699      	mov	r9, r3
 8001a56:	9b01      	ldr	r3, [sp, #4]
 8001a58:	4698      	mov	r8, r3
 8001a5a:	e737      	b.n	80018cc <__aeabi_dmul+0x42c>
 8001a5c:	fffffc0d 	.word	0xfffffc0d
 8001a60:	000007ff 	.word	0x000007ff
 8001a64:	0000043e 	.word	0x0000043e
 8001a68:	0000041e 	.word	0x0000041e

08001a6c <__aeabi_dsub>:
 8001a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a6e:	4657      	mov	r7, sl
 8001a70:	464e      	mov	r6, r9
 8001a72:	4645      	mov	r5, r8
 8001a74:	46de      	mov	lr, fp
 8001a76:	b5e0      	push	{r5, r6, r7, lr}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	9000      	str	r0, [sp, #0]
 8001a7c:	9101      	str	r1, [sp, #4]
 8001a7e:	030c      	lsls	r4, r1, #12
 8001a80:	004d      	lsls	r5, r1, #1
 8001a82:	0fce      	lsrs	r6, r1, #31
 8001a84:	0a61      	lsrs	r1, r4, #9
 8001a86:	9c00      	ldr	r4, [sp, #0]
 8001a88:	005f      	lsls	r7, r3, #1
 8001a8a:	0f64      	lsrs	r4, r4, #29
 8001a8c:	430c      	orrs	r4, r1
 8001a8e:	9900      	ldr	r1, [sp, #0]
 8001a90:	9200      	str	r2, [sp, #0]
 8001a92:	9301      	str	r3, [sp, #4]
 8001a94:	00c8      	lsls	r0, r1, #3
 8001a96:	0319      	lsls	r1, r3, #12
 8001a98:	0d7b      	lsrs	r3, r7, #21
 8001a9a:	4699      	mov	r9, r3
 8001a9c:	9b01      	ldr	r3, [sp, #4]
 8001a9e:	4fcc      	ldr	r7, [pc, #816]	@ (8001dd0 <__aeabi_dsub+0x364>)
 8001aa0:	0fdb      	lsrs	r3, r3, #31
 8001aa2:	469c      	mov	ip, r3
 8001aa4:	0a4b      	lsrs	r3, r1, #9
 8001aa6:	9900      	ldr	r1, [sp, #0]
 8001aa8:	4680      	mov	r8, r0
 8001aaa:	0f49      	lsrs	r1, r1, #29
 8001aac:	4319      	orrs	r1, r3
 8001aae:	9b00      	ldr	r3, [sp, #0]
 8001ab0:	468b      	mov	fp, r1
 8001ab2:	00da      	lsls	r2, r3, #3
 8001ab4:	4692      	mov	sl, r2
 8001ab6:	0d6d      	lsrs	r5, r5, #21
 8001ab8:	45b9      	cmp	r9, r7
 8001aba:	d100      	bne.n	8001abe <__aeabi_dsub+0x52>
 8001abc:	e0bf      	b.n	8001c3e <__aeabi_dsub+0x1d2>
 8001abe:	2301      	movs	r3, #1
 8001ac0:	4661      	mov	r1, ip
 8001ac2:	4059      	eors	r1, r3
 8001ac4:	464b      	mov	r3, r9
 8001ac6:	468c      	mov	ip, r1
 8001ac8:	1aeb      	subs	r3, r5, r3
 8001aca:	428e      	cmp	r6, r1
 8001acc:	d075      	beq.n	8001bba <__aeabi_dsub+0x14e>
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	dc00      	bgt.n	8001ad4 <__aeabi_dsub+0x68>
 8001ad2:	e2a3      	b.n	800201c <__aeabi_dsub+0x5b0>
 8001ad4:	4649      	mov	r1, r9
 8001ad6:	2900      	cmp	r1, #0
 8001ad8:	d100      	bne.n	8001adc <__aeabi_dsub+0x70>
 8001ada:	e0ce      	b.n	8001c7a <__aeabi_dsub+0x20e>
 8001adc:	42bd      	cmp	r5, r7
 8001ade:	d100      	bne.n	8001ae2 <__aeabi_dsub+0x76>
 8001ae0:	e200      	b.n	8001ee4 <__aeabi_dsub+0x478>
 8001ae2:	2701      	movs	r7, #1
 8001ae4:	2b38      	cmp	r3, #56	@ 0x38
 8001ae6:	dc19      	bgt.n	8001b1c <__aeabi_dsub+0xb0>
 8001ae8:	2780      	movs	r7, #128	@ 0x80
 8001aea:	4659      	mov	r1, fp
 8001aec:	043f      	lsls	r7, r7, #16
 8001aee:	4339      	orrs	r1, r7
 8001af0:	468b      	mov	fp, r1
 8001af2:	2b1f      	cmp	r3, #31
 8001af4:	dd00      	ble.n	8001af8 <__aeabi_dsub+0x8c>
 8001af6:	e1fa      	b.n	8001eee <__aeabi_dsub+0x482>
 8001af8:	2720      	movs	r7, #32
 8001afa:	1af9      	subs	r1, r7, r3
 8001afc:	468c      	mov	ip, r1
 8001afe:	4659      	mov	r1, fp
 8001b00:	4667      	mov	r7, ip
 8001b02:	40b9      	lsls	r1, r7
 8001b04:	000f      	movs	r7, r1
 8001b06:	0011      	movs	r1, r2
 8001b08:	40d9      	lsrs	r1, r3
 8001b0a:	430f      	orrs	r7, r1
 8001b0c:	4661      	mov	r1, ip
 8001b0e:	408a      	lsls	r2, r1
 8001b10:	1e51      	subs	r1, r2, #1
 8001b12:	418a      	sbcs	r2, r1
 8001b14:	4659      	mov	r1, fp
 8001b16:	40d9      	lsrs	r1, r3
 8001b18:	4317      	orrs	r7, r2
 8001b1a:	1a64      	subs	r4, r4, r1
 8001b1c:	1bc7      	subs	r7, r0, r7
 8001b1e:	42b8      	cmp	r0, r7
 8001b20:	4180      	sbcs	r0, r0
 8001b22:	4240      	negs	r0, r0
 8001b24:	1a24      	subs	r4, r4, r0
 8001b26:	0223      	lsls	r3, r4, #8
 8001b28:	d400      	bmi.n	8001b2c <__aeabi_dsub+0xc0>
 8001b2a:	e140      	b.n	8001dae <__aeabi_dsub+0x342>
 8001b2c:	0264      	lsls	r4, r4, #9
 8001b2e:	0a64      	lsrs	r4, r4, #9
 8001b30:	2c00      	cmp	r4, #0
 8001b32:	d100      	bne.n	8001b36 <__aeabi_dsub+0xca>
 8001b34:	e154      	b.n	8001de0 <__aeabi_dsub+0x374>
 8001b36:	0020      	movs	r0, r4
 8001b38:	f000 fc52 	bl	80023e0 <__clzsi2>
 8001b3c:	0003      	movs	r3, r0
 8001b3e:	3b08      	subs	r3, #8
 8001b40:	2120      	movs	r1, #32
 8001b42:	0038      	movs	r0, r7
 8001b44:	1aca      	subs	r2, r1, r3
 8001b46:	40d0      	lsrs	r0, r2
 8001b48:	409c      	lsls	r4, r3
 8001b4a:	0002      	movs	r2, r0
 8001b4c:	409f      	lsls	r7, r3
 8001b4e:	4322      	orrs	r2, r4
 8001b50:	429d      	cmp	r5, r3
 8001b52:	dd00      	ble.n	8001b56 <__aeabi_dsub+0xea>
 8001b54:	e1a6      	b.n	8001ea4 <__aeabi_dsub+0x438>
 8001b56:	1b58      	subs	r0, r3, r5
 8001b58:	3001      	adds	r0, #1
 8001b5a:	1a09      	subs	r1, r1, r0
 8001b5c:	003c      	movs	r4, r7
 8001b5e:	408f      	lsls	r7, r1
 8001b60:	40c4      	lsrs	r4, r0
 8001b62:	1e7b      	subs	r3, r7, #1
 8001b64:	419f      	sbcs	r7, r3
 8001b66:	0013      	movs	r3, r2
 8001b68:	408b      	lsls	r3, r1
 8001b6a:	4327      	orrs	r7, r4
 8001b6c:	431f      	orrs	r7, r3
 8001b6e:	40c2      	lsrs	r2, r0
 8001b70:	003b      	movs	r3, r7
 8001b72:	0014      	movs	r4, r2
 8001b74:	2500      	movs	r5, #0
 8001b76:	4313      	orrs	r3, r2
 8001b78:	d100      	bne.n	8001b7c <__aeabi_dsub+0x110>
 8001b7a:	e1f7      	b.n	8001f6c <__aeabi_dsub+0x500>
 8001b7c:	077b      	lsls	r3, r7, #29
 8001b7e:	d100      	bne.n	8001b82 <__aeabi_dsub+0x116>
 8001b80:	e377      	b.n	8002272 <__aeabi_dsub+0x806>
 8001b82:	230f      	movs	r3, #15
 8001b84:	0038      	movs	r0, r7
 8001b86:	403b      	ands	r3, r7
 8001b88:	2b04      	cmp	r3, #4
 8001b8a:	d004      	beq.n	8001b96 <__aeabi_dsub+0x12a>
 8001b8c:	1d38      	adds	r0, r7, #4
 8001b8e:	42b8      	cmp	r0, r7
 8001b90:	41bf      	sbcs	r7, r7
 8001b92:	427f      	negs	r7, r7
 8001b94:	19e4      	adds	r4, r4, r7
 8001b96:	0223      	lsls	r3, r4, #8
 8001b98:	d400      	bmi.n	8001b9c <__aeabi_dsub+0x130>
 8001b9a:	e368      	b.n	800226e <__aeabi_dsub+0x802>
 8001b9c:	4b8c      	ldr	r3, [pc, #560]	@ (8001dd0 <__aeabi_dsub+0x364>)
 8001b9e:	3501      	adds	r5, #1
 8001ba0:	429d      	cmp	r5, r3
 8001ba2:	d100      	bne.n	8001ba6 <__aeabi_dsub+0x13a>
 8001ba4:	e0f4      	b.n	8001d90 <__aeabi_dsub+0x324>
 8001ba6:	4b8b      	ldr	r3, [pc, #556]	@ (8001dd4 <__aeabi_dsub+0x368>)
 8001ba8:	056d      	lsls	r5, r5, #21
 8001baa:	401c      	ands	r4, r3
 8001bac:	0d6d      	lsrs	r5, r5, #21
 8001bae:	0767      	lsls	r7, r4, #29
 8001bb0:	08c0      	lsrs	r0, r0, #3
 8001bb2:	0264      	lsls	r4, r4, #9
 8001bb4:	4307      	orrs	r7, r0
 8001bb6:	0b24      	lsrs	r4, r4, #12
 8001bb8:	e0ec      	b.n	8001d94 <__aeabi_dsub+0x328>
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	dc00      	bgt.n	8001bc0 <__aeabi_dsub+0x154>
 8001bbe:	e329      	b.n	8002214 <__aeabi_dsub+0x7a8>
 8001bc0:	4649      	mov	r1, r9
 8001bc2:	2900      	cmp	r1, #0
 8001bc4:	d000      	beq.n	8001bc8 <__aeabi_dsub+0x15c>
 8001bc6:	e0d6      	b.n	8001d76 <__aeabi_dsub+0x30a>
 8001bc8:	4659      	mov	r1, fp
 8001bca:	4311      	orrs	r1, r2
 8001bcc:	d100      	bne.n	8001bd0 <__aeabi_dsub+0x164>
 8001bce:	e12e      	b.n	8001e2e <__aeabi_dsub+0x3c2>
 8001bd0:	1e59      	subs	r1, r3, #1
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d100      	bne.n	8001bd8 <__aeabi_dsub+0x16c>
 8001bd6:	e1e6      	b.n	8001fa6 <__aeabi_dsub+0x53a>
 8001bd8:	42bb      	cmp	r3, r7
 8001bda:	d100      	bne.n	8001bde <__aeabi_dsub+0x172>
 8001bdc:	e182      	b.n	8001ee4 <__aeabi_dsub+0x478>
 8001bde:	2701      	movs	r7, #1
 8001be0:	000b      	movs	r3, r1
 8001be2:	2938      	cmp	r1, #56	@ 0x38
 8001be4:	dc14      	bgt.n	8001c10 <__aeabi_dsub+0x1a4>
 8001be6:	2b1f      	cmp	r3, #31
 8001be8:	dd00      	ble.n	8001bec <__aeabi_dsub+0x180>
 8001bea:	e23c      	b.n	8002066 <__aeabi_dsub+0x5fa>
 8001bec:	2720      	movs	r7, #32
 8001bee:	1af9      	subs	r1, r7, r3
 8001bf0:	468c      	mov	ip, r1
 8001bf2:	4659      	mov	r1, fp
 8001bf4:	4667      	mov	r7, ip
 8001bf6:	40b9      	lsls	r1, r7
 8001bf8:	000f      	movs	r7, r1
 8001bfa:	0011      	movs	r1, r2
 8001bfc:	40d9      	lsrs	r1, r3
 8001bfe:	430f      	orrs	r7, r1
 8001c00:	4661      	mov	r1, ip
 8001c02:	408a      	lsls	r2, r1
 8001c04:	1e51      	subs	r1, r2, #1
 8001c06:	418a      	sbcs	r2, r1
 8001c08:	4659      	mov	r1, fp
 8001c0a:	40d9      	lsrs	r1, r3
 8001c0c:	4317      	orrs	r7, r2
 8001c0e:	1864      	adds	r4, r4, r1
 8001c10:	183f      	adds	r7, r7, r0
 8001c12:	4287      	cmp	r7, r0
 8001c14:	4180      	sbcs	r0, r0
 8001c16:	4240      	negs	r0, r0
 8001c18:	1824      	adds	r4, r4, r0
 8001c1a:	0223      	lsls	r3, r4, #8
 8001c1c:	d400      	bmi.n	8001c20 <__aeabi_dsub+0x1b4>
 8001c1e:	e0c6      	b.n	8001dae <__aeabi_dsub+0x342>
 8001c20:	4b6b      	ldr	r3, [pc, #428]	@ (8001dd0 <__aeabi_dsub+0x364>)
 8001c22:	3501      	adds	r5, #1
 8001c24:	429d      	cmp	r5, r3
 8001c26:	d100      	bne.n	8001c2a <__aeabi_dsub+0x1be>
 8001c28:	e0b2      	b.n	8001d90 <__aeabi_dsub+0x324>
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	4b69      	ldr	r3, [pc, #420]	@ (8001dd4 <__aeabi_dsub+0x368>)
 8001c2e:	087a      	lsrs	r2, r7, #1
 8001c30:	401c      	ands	r4, r3
 8001c32:	4039      	ands	r1, r7
 8001c34:	430a      	orrs	r2, r1
 8001c36:	07e7      	lsls	r7, r4, #31
 8001c38:	4317      	orrs	r7, r2
 8001c3a:	0864      	lsrs	r4, r4, #1
 8001c3c:	e79e      	b.n	8001b7c <__aeabi_dsub+0x110>
 8001c3e:	4b66      	ldr	r3, [pc, #408]	@ (8001dd8 <__aeabi_dsub+0x36c>)
 8001c40:	4311      	orrs	r1, r2
 8001c42:	468a      	mov	sl, r1
 8001c44:	18eb      	adds	r3, r5, r3
 8001c46:	2900      	cmp	r1, #0
 8001c48:	d028      	beq.n	8001c9c <__aeabi_dsub+0x230>
 8001c4a:	4566      	cmp	r6, ip
 8001c4c:	d02c      	beq.n	8001ca8 <__aeabi_dsub+0x23c>
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d05b      	beq.n	8001d0a <__aeabi_dsub+0x29e>
 8001c52:	2d00      	cmp	r5, #0
 8001c54:	d100      	bne.n	8001c58 <__aeabi_dsub+0x1ec>
 8001c56:	e12c      	b.n	8001eb2 <__aeabi_dsub+0x446>
 8001c58:	465b      	mov	r3, fp
 8001c5a:	4666      	mov	r6, ip
 8001c5c:	075f      	lsls	r7, r3, #29
 8001c5e:	08d2      	lsrs	r2, r2, #3
 8001c60:	4317      	orrs	r7, r2
 8001c62:	08dd      	lsrs	r5, r3, #3
 8001c64:	003b      	movs	r3, r7
 8001c66:	432b      	orrs	r3, r5
 8001c68:	d100      	bne.n	8001c6c <__aeabi_dsub+0x200>
 8001c6a:	e0e2      	b.n	8001e32 <__aeabi_dsub+0x3c6>
 8001c6c:	2480      	movs	r4, #128	@ 0x80
 8001c6e:	0324      	lsls	r4, r4, #12
 8001c70:	432c      	orrs	r4, r5
 8001c72:	0324      	lsls	r4, r4, #12
 8001c74:	4d56      	ldr	r5, [pc, #344]	@ (8001dd0 <__aeabi_dsub+0x364>)
 8001c76:	0b24      	lsrs	r4, r4, #12
 8001c78:	e08c      	b.n	8001d94 <__aeabi_dsub+0x328>
 8001c7a:	4659      	mov	r1, fp
 8001c7c:	4311      	orrs	r1, r2
 8001c7e:	d100      	bne.n	8001c82 <__aeabi_dsub+0x216>
 8001c80:	e0d5      	b.n	8001e2e <__aeabi_dsub+0x3c2>
 8001c82:	1e59      	subs	r1, r3, #1
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d100      	bne.n	8001c8a <__aeabi_dsub+0x21e>
 8001c88:	e1b9      	b.n	8001ffe <__aeabi_dsub+0x592>
 8001c8a:	42bb      	cmp	r3, r7
 8001c8c:	d100      	bne.n	8001c90 <__aeabi_dsub+0x224>
 8001c8e:	e1b1      	b.n	8001ff4 <__aeabi_dsub+0x588>
 8001c90:	2701      	movs	r7, #1
 8001c92:	000b      	movs	r3, r1
 8001c94:	2938      	cmp	r1, #56	@ 0x38
 8001c96:	dd00      	ble.n	8001c9a <__aeabi_dsub+0x22e>
 8001c98:	e740      	b.n	8001b1c <__aeabi_dsub+0xb0>
 8001c9a:	e72a      	b.n	8001af2 <__aeabi_dsub+0x86>
 8001c9c:	4661      	mov	r1, ip
 8001c9e:	2701      	movs	r7, #1
 8001ca0:	4079      	eors	r1, r7
 8001ca2:	468c      	mov	ip, r1
 8001ca4:	4566      	cmp	r6, ip
 8001ca6:	d1d2      	bne.n	8001c4e <__aeabi_dsub+0x1e2>
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d100      	bne.n	8001cae <__aeabi_dsub+0x242>
 8001cac:	e0c5      	b.n	8001e3a <__aeabi_dsub+0x3ce>
 8001cae:	2d00      	cmp	r5, #0
 8001cb0:	d000      	beq.n	8001cb4 <__aeabi_dsub+0x248>
 8001cb2:	e155      	b.n	8001f60 <__aeabi_dsub+0x4f4>
 8001cb4:	464b      	mov	r3, r9
 8001cb6:	0025      	movs	r5, r4
 8001cb8:	4305      	orrs	r5, r0
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dsub+0x252>
 8001cbc:	e212      	b.n	80020e4 <__aeabi_dsub+0x678>
 8001cbe:	1e59      	subs	r1, r3, #1
 8001cc0:	468c      	mov	ip, r1
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d100      	bne.n	8001cc8 <__aeabi_dsub+0x25c>
 8001cc6:	e249      	b.n	800215c <__aeabi_dsub+0x6f0>
 8001cc8:	4d41      	ldr	r5, [pc, #260]	@ (8001dd0 <__aeabi_dsub+0x364>)
 8001cca:	42ab      	cmp	r3, r5
 8001ccc:	d100      	bne.n	8001cd0 <__aeabi_dsub+0x264>
 8001cce:	e28f      	b.n	80021f0 <__aeabi_dsub+0x784>
 8001cd0:	2701      	movs	r7, #1
 8001cd2:	2938      	cmp	r1, #56	@ 0x38
 8001cd4:	dc11      	bgt.n	8001cfa <__aeabi_dsub+0x28e>
 8001cd6:	4663      	mov	r3, ip
 8001cd8:	2b1f      	cmp	r3, #31
 8001cda:	dd00      	ble.n	8001cde <__aeabi_dsub+0x272>
 8001cdc:	e25b      	b.n	8002196 <__aeabi_dsub+0x72a>
 8001cde:	4661      	mov	r1, ip
 8001ce0:	2320      	movs	r3, #32
 8001ce2:	0027      	movs	r7, r4
 8001ce4:	1a5b      	subs	r3, r3, r1
 8001ce6:	0005      	movs	r5, r0
 8001ce8:	4098      	lsls	r0, r3
 8001cea:	409f      	lsls	r7, r3
 8001cec:	40cd      	lsrs	r5, r1
 8001cee:	1e43      	subs	r3, r0, #1
 8001cf0:	4198      	sbcs	r0, r3
 8001cf2:	40cc      	lsrs	r4, r1
 8001cf4:	432f      	orrs	r7, r5
 8001cf6:	4307      	orrs	r7, r0
 8001cf8:	44a3      	add	fp, r4
 8001cfa:	18bf      	adds	r7, r7, r2
 8001cfc:	4297      	cmp	r7, r2
 8001cfe:	4192      	sbcs	r2, r2
 8001d00:	4252      	negs	r2, r2
 8001d02:	445a      	add	r2, fp
 8001d04:	0014      	movs	r4, r2
 8001d06:	464d      	mov	r5, r9
 8001d08:	e787      	b.n	8001c1a <__aeabi_dsub+0x1ae>
 8001d0a:	4f34      	ldr	r7, [pc, #208]	@ (8001ddc <__aeabi_dsub+0x370>)
 8001d0c:	1c6b      	adds	r3, r5, #1
 8001d0e:	423b      	tst	r3, r7
 8001d10:	d000      	beq.n	8001d14 <__aeabi_dsub+0x2a8>
 8001d12:	e0b6      	b.n	8001e82 <__aeabi_dsub+0x416>
 8001d14:	4659      	mov	r1, fp
 8001d16:	0023      	movs	r3, r4
 8001d18:	4311      	orrs	r1, r2
 8001d1a:	000f      	movs	r7, r1
 8001d1c:	4303      	orrs	r3, r0
 8001d1e:	2d00      	cmp	r5, #0
 8001d20:	d000      	beq.n	8001d24 <__aeabi_dsub+0x2b8>
 8001d22:	e126      	b.n	8001f72 <__aeabi_dsub+0x506>
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d100      	bne.n	8001d2a <__aeabi_dsub+0x2be>
 8001d28:	e1c0      	b.n	80020ac <__aeabi_dsub+0x640>
 8001d2a:	2900      	cmp	r1, #0
 8001d2c:	d100      	bne.n	8001d30 <__aeabi_dsub+0x2c4>
 8001d2e:	e0a1      	b.n	8001e74 <__aeabi_dsub+0x408>
 8001d30:	1a83      	subs	r3, r0, r2
 8001d32:	4698      	mov	r8, r3
 8001d34:	465b      	mov	r3, fp
 8001d36:	4540      	cmp	r0, r8
 8001d38:	41ad      	sbcs	r5, r5
 8001d3a:	1ae3      	subs	r3, r4, r3
 8001d3c:	426d      	negs	r5, r5
 8001d3e:	1b5b      	subs	r3, r3, r5
 8001d40:	2580      	movs	r5, #128	@ 0x80
 8001d42:	042d      	lsls	r5, r5, #16
 8001d44:	422b      	tst	r3, r5
 8001d46:	d100      	bne.n	8001d4a <__aeabi_dsub+0x2de>
 8001d48:	e14b      	b.n	8001fe2 <__aeabi_dsub+0x576>
 8001d4a:	465b      	mov	r3, fp
 8001d4c:	1a10      	subs	r0, r2, r0
 8001d4e:	4282      	cmp	r2, r0
 8001d50:	4192      	sbcs	r2, r2
 8001d52:	1b1c      	subs	r4, r3, r4
 8001d54:	0007      	movs	r7, r0
 8001d56:	2601      	movs	r6, #1
 8001d58:	4663      	mov	r3, ip
 8001d5a:	4252      	negs	r2, r2
 8001d5c:	1aa4      	subs	r4, r4, r2
 8001d5e:	4327      	orrs	r7, r4
 8001d60:	401e      	ands	r6, r3
 8001d62:	2f00      	cmp	r7, #0
 8001d64:	d100      	bne.n	8001d68 <__aeabi_dsub+0x2fc>
 8001d66:	e142      	b.n	8001fee <__aeabi_dsub+0x582>
 8001d68:	422c      	tst	r4, r5
 8001d6a:	d100      	bne.n	8001d6e <__aeabi_dsub+0x302>
 8001d6c:	e26d      	b.n	800224a <__aeabi_dsub+0x7de>
 8001d6e:	4b19      	ldr	r3, [pc, #100]	@ (8001dd4 <__aeabi_dsub+0x368>)
 8001d70:	2501      	movs	r5, #1
 8001d72:	401c      	ands	r4, r3
 8001d74:	e71b      	b.n	8001bae <__aeabi_dsub+0x142>
 8001d76:	42bd      	cmp	r5, r7
 8001d78:	d100      	bne.n	8001d7c <__aeabi_dsub+0x310>
 8001d7a:	e13b      	b.n	8001ff4 <__aeabi_dsub+0x588>
 8001d7c:	2701      	movs	r7, #1
 8001d7e:	2b38      	cmp	r3, #56	@ 0x38
 8001d80:	dd00      	ble.n	8001d84 <__aeabi_dsub+0x318>
 8001d82:	e745      	b.n	8001c10 <__aeabi_dsub+0x1a4>
 8001d84:	2780      	movs	r7, #128	@ 0x80
 8001d86:	4659      	mov	r1, fp
 8001d88:	043f      	lsls	r7, r7, #16
 8001d8a:	4339      	orrs	r1, r7
 8001d8c:	468b      	mov	fp, r1
 8001d8e:	e72a      	b.n	8001be6 <__aeabi_dsub+0x17a>
 8001d90:	2400      	movs	r4, #0
 8001d92:	2700      	movs	r7, #0
 8001d94:	052d      	lsls	r5, r5, #20
 8001d96:	4325      	orrs	r5, r4
 8001d98:	07f6      	lsls	r6, r6, #31
 8001d9a:	4335      	orrs	r5, r6
 8001d9c:	0038      	movs	r0, r7
 8001d9e:	0029      	movs	r1, r5
 8001da0:	b003      	add	sp, #12
 8001da2:	bcf0      	pop	{r4, r5, r6, r7}
 8001da4:	46bb      	mov	fp, r7
 8001da6:	46b2      	mov	sl, r6
 8001da8:	46a9      	mov	r9, r5
 8001daa:	46a0      	mov	r8, r4
 8001dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dae:	077b      	lsls	r3, r7, #29
 8001db0:	d004      	beq.n	8001dbc <__aeabi_dsub+0x350>
 8001db2:	230f      	movs	r3, #15
 8001db4:	403b      	ands	r3, r7
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	d000      	beq.n	8001dbc <__aeabi_dsub+0x350>
 8001dba:	e6e7      	b.n	8001b8c <__aeabi_dsub+0x120>
 8001dbc:	002b      	movs	r3, r5
 8001dbe:	08f8      	lsrs	r0, r7, #3
 8001dc0:	4a03      	ldr	r2, [pc, #12]	@ (8001dd0 <__aeabi_dsub+0x364>)
 8001dc2:	0767      	lsls	r7, r4, #29
 8001dc4:	4307      	orrs	r7, r0
 8001dc6:	08e5      	lsrs	r5, r4, #3
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d100      	bne.n	8001dce <__aeabi_dsub+0x362>
 8001dcc:	e74a      	b.n	8001c64 <__aeabi_dsub+0x1f8>
 8001dce:	e0a5      	b.n	8001f1c <__aeabi_dsub+0x4b0>
 8001dd0:	000007ff 	.word	0x000007ff
 8001dd4:	ff7fffff 	.word	0xff7fffff
 8001dd8:	fffff801 	.word	0xfffff801
 8001ddc:	000007fe 	.word	0x000007fe
 8001de0:	0038      	movs	r0, r7
 8001de2:	f000 fafd 	bl	80023e0 <__clzsi2>
 8001de6:	0003      	movs	r3, r0
 8001de8:	3318      	adds	r3, #24
 8001dea:	2b1f      	cmp	r3, #31
 8001dec:	dc00      	bgt.n	8001df0 <__aeabi_dsub+0x384>
 8001dee:	e6a7      	b.n	8001b40 <__aeabi_dsub+0xd4>
 8001df0:	003a      	movs	r2, r7
 8001df2:	3808      	subs	r0, #8
 8001df4:	4082      	lsls	r2, r0
 8001df6:	429d      	cmp	r5, r3
 8001df8:	dd00      	ble.n	8001dfc <__aeabi_dsub+0x390>
 8001dfa:	e08a      	b.n	8001f12 <__aeabi_dsub+0x4a6>
 8001dfc:	1b5b      	subs	r3, r3, r5
 8001dfe:	1c58      	adds	r0, r3, #1
 8001e00:	281f      	cmp	r0, #31
 8001e02:	dc00      	bgt.n	8001e06 <__aeabi_dsub+0x39a>
 8001e04:	e1d8      	b.n	80021b8 <__aeabi_dsub+0x74c>
 8001e06:	0017      	movs	r7, r2
 8001e08:	3b1f      	subs	r3, #31
 8001e0a:	40df      	lsrs	r7, r3
 8001e0c:	2820      	cmp	r0, #32
 8001e0e:	d005      	beq.n	8001e1c <__aeabi_dsub+0x3b0>
 8001e10:	2340      	movs	r3, #64	@ 0x40
 8001e12:	1a1b      	subs	r3, r3, r0
 8001e14:	409a      	lsls	r2, r3
 8001e16:	1e53      	subs	r3, r2, #1
 8001e18:	419a      	sbcs	r2, r3
 8001e1a:	4317      	orrs	r7, r2
 8001e1c:	2500      	movs	r5, #0
 8001e1e:	2f00      	cmp	r7, #0
 8001e20:	d100      	bne.n	8001e24 <__aeabi_dsub+0x3b8>
 8001e22:	e0e5      	b.n	8001ff0 <__aeabi_dsub+0x584>
 8001e24:	077b      	lsls	r3, r7, #29
 8001e26:	d000      	beq.n	8001e2a <__aeabi_dsub+0x3be>
 8001e28:	e6ab      	b.n	8001b82 <__aeabi_dsub+0x116>
 8001e2a:	002c      	movs	r4, r5
 8001e2c:	e7c6      	b.n	8001dbc <__aeabi_dsub+0x350>
 8001e2e:	08c0      	lsrs	r0, r0, #3
 8001e30:	e7c6      	b.n	8001dc0 <__aeabi_dsub+0x354>
 8001e32:	2700      	movs	r7, #0
 8001e34:	2400      	movs	r4, #0
 8001e36:	4dd1      	ldr	r5, [pc, #836]	@ (800217c <__aeabi_dsub+0x710>)
 8001e38:	e7ac      	b.n	8001d94 <__aeabi_dsub+0x328>
 8001e3a:	4fd1      	ldr	r7, [pc, #836]	@ (8002180 <__aeabi_dsub+0x714>)
 8001e3c:	1c6b      	adds	r3, r5, #1
 8001e3e:	423b      	tst	r3, r7
 8001e40:	d171      	bne.n	8001f26 <__aeabi_dsub+0x4ba>
 8001e42:	0023      	movs	r3, r4
 8001e44:	4303      	orrs	r3, r0
 8001e46:	2d00      	cmp	r5, #0
 8001e48:	d000      	beq.n	8001e4c <__aeabi_dsub+0x3e0>
 8001e4a:	e14e      	b.n	80020ea <__aeabi_dsub+0x67e>
 8001e4c:	4657      	mov	r7, sl
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d100      	bne.n	8001e54 <__aeabi_dsub+0x3e8>
 8001e52:	e1b5      	b.n	80021c0 <__aeabi_dsub+0x754>
 8001e54:	2f00      	cmp	r7, #0
 8001e56:	d00d      	beq.n	8001e74 <__aeabi_dsub+0x408>
 8001e58:	1883      	adds	r3, r0, r2
 8001e5a:	4283      	cmp	r3, r0
 8001e5c:	4180      	sbcs	r0, r0
 8001e5e:	445c      	add	r4, fp
 8001e60:	4240      	negs	r0, r0
 8001e62:	1824      	adds	r4, r4, r0
 8001e64:	0222      	lsls	r2, r4, #8
 8001e66:	d500      	bpl.n	8001e6a <__aeabi_dsub+0x3fe>
 8001e68:	e1c8      	b.n	80021fc <__aeabi_dsub+0x790>
 8001e6a:	001f      	movs	r7, r3
 8001e6c:	4698      	mov	r8, r3
 8001e6e:	4327      	orrs	r7, r4
 8001e70:	d100      	bne.n	8001e74 <__aeabi_dsub+0x408>
 8001e72:	e0bc      	b.n	8001fee <__aeabi_dsub+0x582>
 8001e74:	4643      	mov	r3, r8
 8001e76:	0767      	lsls	r7, r4, #29
 8001e78:	08db      	lsrs	r3, r3, #3
 8001e7a:	431f      	orrs	r7, r3
 8001e7c:	08e5      	lsrs	r5, r4, #3
 8001e7e:	2300      	movs	r3, #0
 8001e80:	e04c      	b.n	8001f1c <__aeabi_dsub+0x4b0>
 8001e82:	1a83      	subs	r3, r0, r2
 8001e84:	4698      	mov	r8, r3
 8001e86:	465b      	mov	r3, fp
 8001e88:	4540      	cmp	r0, r8
 8001e8a:	41bf      	sbcs	r7, r7
 8001e8c:	1ae3      	subs	r3, r4, r3
 8001e8e:	427f      	negs	r7, r7
 8001e90:	1bdb      	subs	r3, r3, r7
 8001e92:	021f      	lsls	r7, r3, #8
 8001e94:	d47c      	bmi.n	8001f90 <__aeabi_dsub+0x524>
 8001e96:	4647      	mov	r7, r8
 8001e98:	431f      	orrs	r7, r3
 8001e9a:	d100      	bne.n	8001e9e <__aeabi_dsub+0x432>
 8001e9c:	e0a6      	b.n	8001fec <__aeabi_dsub+0x580>
 8001e9e:	001c      	movs	r4, r3
 8001ea0:	4647      	mov	r7, r8
 8001ea2:	e645      	b.n	8001b30 <__aeabi_dsub+0xc4>
 8001ea4:	4cb7      	ldr	r4, [pc, #732]	@ (8002184 <__aeabi_dsub+0x718>)
 8001ea6:	1aed      	subs	r5, r5, r3
 8001ea8:	4014      	ands	r4, r2
 8001eaa:	077b      	lsls	r3, r7, #29
 8001eac:	d000      	beq.n	8001eb0 <__aeabi_dsub+0x444>
 8001eae:	e780      	b.n	8001db2 <__aeabi_dsub+0x346>
 8001eb0:	e784      	b.n	8001dbc <__aeabi_dsub+0x350>
 8001eb2:	464b      	mov	r3, r9
 8001eb4:	0025      	movs	r5, r4
 8001eb6:	4305      	orrs	r5, r0
 8001eb8:	d066      	beq.n	8001f88 <__aeabi_dsub+0x51c>
 8001eba:	1e5f      	subs	r7, r3, #1
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d100      	bne.n	8001ec2 <__aeabi_dsub+0x456>
 8001ec0:	e0fc      	b.n	80020bc <__aeabi_dsub+0x650>
 8001ec2:	4dae      	ldr	r5, [pc, #696]	@ (800217c <__aeabi_dsub+0x710>)
 8001ec4:	42ab      	cmp	r3, r5
 8001ec6:	d100      	bne.n	8001eca <__aeabi_dsub+0x45e>
 8001ec8:	e15e      	b.n	8002188 <__aeabi_dsub+0x71c>
 8001eca:	4666      	mov	r6, ip
 8001ecc:	2f38      	cmp	r7, #56	@ 0x38
 8001ece:	dc00      	bgt.n	8001ed2 <__aeabi_dsub+0x466>
 8001ed0:	e0b4      	b.n	800203c <__aeabi_dsub+0x5d0>
 8001ed2:	2001      	movs	r0, #1
 8001ed4:	1a17      	subs	r7, r2, r0
 8001ed6:	42ba      	cmp	r2, r7
 8001ed8:	4192      	sbcs	r2, r2
 8001eda:	465b      	mov	r3, fp
 8001edc:	4252      	negs	r2, r2
 8001ede:	464d      	mov	r5, r9
 8001ee0:	1a9c      	subs	r4, r3, r2
 8001ee2:	e620      	b.n	8001b26 <__aeabi_dsub+0xba>
 8001ee4:	0767      	lsls	r7, r4, #29
 8001ee6:	08c0      	lsrs	r0, r0, #3
 8001ee8:	4307      	orrs	r7, r0
 8001eea:	08e5      	lsrs	r5, r4, #3
 8001eec:	e6ba      	b.n	8001c64 <__aeabi_dsub+0x1f8>
 8001eee:	001f      	movs	r7, r3
 8001ef0:	4659      	mov	r1, fp
 8001ef2:	3f20      	subs	r7, #32
 8001ef4:	40f9      	lsrs	r1, r7
 8001ef6:	000f      	movs	r7, r1
 8001ef8:	2b20      	cmp	r3, #32
 8001efa:	d005      	beq.n	8001f08 <__aeabi_dsub+0x49c>
 8001efc:	2140      	movs	r1, #64	@ 0x40
 8001efe:	1acb      	subs	r3, r1, r3
 8001f00:	4659      	mov	r1, fp
 8001f02:	4099      	lsls	r1, r3
 8001f04:	430a      	orrs	r2, r1
 8001f06:	4692      	mov	sl, r2
 8001f08:	4653      	mov	r3, sl
 8001f0a:	1e5a      	subs	r2, r3, #1
 8001f0c:	4193      	sbcs	r3, r2
 8001f0e:	431f      	orrs	r7, r3
 8001f10:	e604      	b.n	8001b1c <__aeabi_dsub+0xb0>
 8001f12:	1aeb      	subs	r3, r5, r3
 8001f14:	4d9b      	ldr	r5, [pc, #620]	@ (8002184 <__aeabi_dsub+0x718>)
 8001f16:	4015      	ands	r5, r2
 8001f18:	076f      	lsls	r7, r5, #29
 8001f1a:	08ed      	lsrs	r5, r5, #3
 8001f1c:	032c      	lsls	r4, r5, #12
 8001f1e:	055d      	lsls	r5, r3, #21
 8001f20:	0b24      	lsrs	r4, r4, #12
 8001f22:	0d6d      	lsrs	r5, r5, #21
 8001f24:	e736      	b.n	8001d94 <__aeabi_dsub+0x328>
 8001f26:	4d95      	ldr	r5, [pc, #596]	@ (800217c <__aeabi_dsub+0x710>)
 8001f28:	42ab      	cmp	r3, r5
 8001f2a:	d100      	bne.n	8001f2e <__aeabi_dsub+0x4c2>
 8001f2c:	e0d6      	b.n	80020dc <__aeabi_dsub+0x670>
 8001f2e:	1882      	adds	r2, r0, r2
 8001f30:	0021      	movs	r1, r4
 8001f32:	4282      	cmp	r2, r0
 8001f34:	4180      	sbcs	r0, r0
 8001f36:	4459      	add	r1, fp
 8001f38:	4240      	negs	r0, r0
 8001f3a:	1808      	adds	r0, r1, r0
 8001f3c:	07c7      	lsls	r7, r0, #31
 8001f3e:	0852      	lsrs	r2, r2, #1
 8001f40:	4317      	orrs	r7, r2
 8001f42:	0844      	lsrs	r4, r0, #1
 8001f44:	0752      	lsls	r2, r2, #29
 8001f46:	d400      	bmi.n	8001f4a <__aeabi_dsub+0x4de>
 8001f48:	e185      	b.n	8002256 <__aeabi_dsub+0x7ea>
 8001f4a:	220f      	movs	r2, #15
 8001f4c:	001d      	movs	r5, r3
 8001f4e:	403a      	ands	r2, r7
 8001f50:	2a04      	cmp	r2, #4
 8001f52:	d000      	beq.n	8001f56 <__aeabi_dsub+0x4ea>
 8001f54:	e61a      	b.n	8001b8c <__aeabi_dsub+0x120>
 8001f56:	08ff      	lsrs	r7, r7, #3
 8001f58:	0764      	lsls	r4, r4, #29
 8001f5a:	4327      	orrs	r7, r4
 8001f5c:	0905      	lsrs	r5, r0, #4
 8001f5e:	e7dd      	b.n	8001f1c <__aeabi_dsub+0x4b0>
 8001f60:	465b      	mov	r3, fp
 8001f62:	08d2      	lsrs	r2, r2, #3
 8001f64:	075f      	lsls	r7, r3, #29
 8001f66:	4317      	orrs	r7, r2
 8001f68:	08dd      	lsrs	r5, r3, #3
 8001f6a:	e67b      	b.n	8001c64 <__aeabi_dsub+0x1f8>
 8001f6c:	2700      	movs	r7, #0
 8001f6e:	2400      	movs	r4, #0
 8001f70:	e710      	b.n	8001d94 <__aeabi_dsub+0x328>
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d000      	beq.n	8001f78 <__aeabi_dsub+0x50c>
 8001f76:	e0d6      	b.n	8002126 <__aeabi_dsub+0x6ba>
 8001f78:	2900      	cmp	r1, #0
 8001f7a:	d000      	beq.n	8001f7e <__aeabi_dsub+0x512>
 8001f7c:	e12f      	b.n	80021de <__aeabi_dsub+0x772>
 8001f7e:	2480      	movs	r4, #128	@ 0x80
 8001f80:	2600      	movs	r6, #0
 8001f82:	4d7e      	ldr	r5, [pc, #504]	@ (800217c <__aeabi_dsub+0x710>)
 8001f84:	0324      	lsls	r4, r4, #12
 8001f86:	e705      	b.n	8001d94 <__aeabi_dsub+0x328>
 8001f88:	4666      	mov	r6, ip
 8001f8a:	465c      	mov	r4, fp
 8001f8c:	08d0      	lsrs	r0, r2, #3
 8001f8e:	e717      	b.n	8001dc0 <__aeabi_dsub+0x354>
 8001f90:	465b      	mov	r3, fp
 8001f92:	1a17      	subs	r7, r2, r0
 8001f94:	42ba      	cmp	r2, r7
 8001f96:	4192      	sbcs	r2, r2
 8001f98:	1b1c      	subs	r4, r3, r4
 8001f9a:	2601      	movs	r6, #1
 8001f9c:	4663      	mov	r3, ip
 8001f9e:	4252      	negs	r2, r2
 8001fa0:	1aa4      	subs	r4, r4, r2
 8001fa2:	401e      	ands	r6, r3
 8001fa4:	e5c4      	b.n	8001b30 <__aeabi_dsub+0xc4>
 8001fa6:	1883      	adds	r3, r0, r2
 8001fa8:	4283      	cmp	r3, r0
 8001faa:	4180      	sbcs	r0, r0
 8001fac:	445c      	add	r4, fp
 8001fae:	4240      	negs	r0, r0
 8001fb0:	1825      	adds	r5, r4, r0
 8001fb2:	022a      	lsls	r2, r5, #8
 8001fb4:	d400      	bmi.n	8001fb8 <__aeabi_dsub+0x54c>
 8001fb6:	e0da      	b.n	800216e <__aeabi_dsub+0x702>
 8001fb8:	4a72      	ldr	r2, [pc, #456]	@ (8002184 <__aeabi_dsub+0x718>)
 8001fba:	085b      	lsrs	r3, r3, #1
 8001fbc:	4015      	ands	r5, r2
 8001fbe:	07ea      	lsls	r2, r5, #31
 8001fc0:	431a      	orrs	r2, r3
 8001fc2:	0869      	lsrs	r1, r5, #1
 8001fc4:	075b      	lsls	r3, r3, #29
 8001fc6:	d400      	bmi.n	8001fca <__aeabi_dsub+0x55e>
 8001fc8:	e14a      	b.n	8002260 <__aeabi_dsub+0x7f4>
 8001fca:	230f      	movs	r3, #15
 8001fcc:	4013      	ands	r3, r2
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	d100      	bne.n	8001fd4 <__aeabi_dsub+0x568>
 8001fd2:	e0fc      	b.n	80021ce <__aeabi_dsub+0x762>
 8001fd4:	1d17      	adds	r7, r2, #4
 8001fd6:	4297      	cmp	r7, r2
 8001fd8:	41a4      	sbcs	r4, r4
 8001fda:	4264      	negs	r4, r4
 8001fdc:	2502      	movs	r5, #2
 8001fde:	1864      	adds	r4, r4, r1
 8001fe0:	e6ec      	b.n	8001dbc <__aeabi_dsub+0x350>
 8001fe2:	4647      	mov	r7, r8
 8001fe4:	001c      	movs	r4, r3
 8001fe6:	431f      	orrs	r7, r3
 8001fe8:	d000      	beq.n	8001fec <__aeabi_dsub+0x580>
 8001fea:	e743      	b.n	8001e74 <__aeabi_dsub+0x408>
 8001fec:	2600      	movs	r6, #0
 8001fee:	2500      	movs	r5, #0
 8001ff0:	2400      	movs	r4, #0
 8001ff2:	e6cf      	b.n	8001d94 <__aeabi_dsub+0x328>
 8001ff4:	08c0      	lsrs	r0, r0, #3
 8001ff6:	0767      	lsls	r7, r4, #29
 8001ff8:	4307      	orrs	r7, r0
 8001ffa:	08e5      	lsrs	r5, r4, #3
 8001ffc:	e632      	b.n	8001c64 <__aeabi_dsub+0x1f8>
 8001ffe:	1a87      	subs	r7, r0, r2
 8002000:	465b      	mov	r3, fp
 8002002:	42b8      	cmp	r0, r7
 8002004:	4180      	sbcs	r0, r0
 8002006:	1ae4      	subs	r4, r4, r3
 8002008:	4240      	negs	r0, r0
 800200a:	1a24      	subs	r4, r4, r0
 800200c:	0223      	lsls	r3, r4, #8
 800200e:	d428      	bmi.n	8002062 <__aeabi_dsub+0x5f6>
 8002010:	0763      	lsls	r3, r4, #29
 8002012:	08ff      	lsrs	r7, r7, #3
 8002014:	431f      	orrs	r7, r3
 8002016:	08e5      	lsrs	r5, r4, #3
 8002018:	2301      	movs	r3, #1
 800201a:	e77f      	b.n	8001f1c <__aeabi_dsub+0x4b0>
 800201c:	2b00      	cmp	r3, #0
 800201e:	d100      	bne.n	8002022 <__aeabi_dsub+0x5b6>
 8002020:	e673      	b.n	8001d0a <__aeabi_dsub+0x29e>
 8002022:	464b      	mov	r3, r9
 8002024:	1b5f      	subs	r7, r3, r5
 8002026:	003b      	movs	r3, r7
 8002028:	2d00      	cmp	r5, #0
 800202a:	d100      	bne.n	800202e <__aeabi_dsub+0x5c2>
 800202c:	e742      	b.n	8001eb4 <__aeabi_dsub+0x448>
 800202e:	2f38      	cmp	r7, #56	@ 0x38
 8002030:	dd00      	ble.n	8002034 <__aeabi_dsub+0x5c8>
 8002032:	e0ec      	b.n	800220e <__aeabi_dsub+0x7a2>
 8002034:	2380      	movs	r3, #128	@ 0x80
 8002036:	000e      	movs	r6, r1
 8002038:	041b      	lsls	r3, r3, #16
 800203a:	431c      	orrs	r4, r3
 800203c:	2f1f      	cmp	r7, #31
 800203e:	dc25      	bgt.n	800208c <__aeabi_dsub+0x620>
 8002040:	2520      	movs	r5, #32
 8002042:	0023      	movs	r3, r4
 8002044:	1bed      	subs	r5, r5, r7
 8002046:	0001      	movs	r1, r0
 8002048:	40a8      	lsls	r0, r5
 800204a:	40ab      	lsls	r3, r5
 800204c:	40f9      	lsrs	r1, r7
 800204e:	1e45      	subs	r5, r0, #1
 8002050:	41a8      	sbcs	r0, r5
 8002052:	430b      	orrs	r3, r1
 8002054:	40fc      	lsrs	r4, r7
 8002056:	4318      	orrs	r0, r3
 8002058:	465b      	mov	r3, fp
 800205a:	1b1b      	subs	r3, r3, r4
 800205c:	469b      	mov	fp, r3
 800205e:	e739      	b.n	8001ed4 <__aeabi_dsub+0x468>
 8002060:	4666      	mov	r6, ip
 8002062:	2501      	movs	r5, #1
 8002064:	e562      	b.n	8001b2c <__aeabi_dsub+0xc0>
 8002066:	001f      	movs	r7, r3
 8002068:	4659      	mov	r1, fp
 800206a:	3f20      	subs	r7, #32
 800206c:	40f9      	lsrs	r1, r7
 800206e:	468c      	mov	ip, r1
 8002070:	2b20      	cmp	r3, #32
 8002072:	d005      	beq.n	8002080 <__aeabi_dsub+0x614>
 8002074:	2740      	movs	r7, #64	@ 0x40
 8002076:	4659      	mov	r1, fp
 8002078:	1afb      	subs	r3, r7, r3
 800207a:	4099      	lsls	r1, r3
 800207c:	430a      	orrs	r2, r1
 800207e:	4692      	mov	sl, r2
 8002080:	4657      	mov	r7, sl
 8002082:	1e7b      	subs	r3, r7, #1
 8002084:	419f      	sbcs	r7, r3
 8002086:	4663      	mov	r3, ip
 8002088:	431f      	orrs	r7, r3
 800208a:	e5c1      	b.n	8001c10 <__aeabi_dsub+0x1a4>
 800208c:	003b      	movs	r3, r7
 800208e:	0025      	movs	r5, r4
 8002090:	3b20      	subs	r3, #32
 8002092:	40dd      	lsrs	r5, r3
 8002094:	2f20      	cmp	r7, #32
 8002096:	d004      	beq.n	80020a2 <__aeabi_dsub+0x636>
 8002098:	2340      	movs	r3, #64	@ 0x40
 800209a:	1bdb      	subs	r3, r3, r7
 800209c:	409c      	lsls	r4, r3
 800209e:	4320      	orrs	r0, r4
 80020a0:	4680      	mov	r8, r0
 80020a2:	4640      	mov	r0, r8
 80020a4:	1e43      	subs	r3, r0, #1
 80020a6:	4198      	sbcs	r0, r3
 80020a8:	4328      	orrs	r0, r5
 80020aa:	e713      	b.n	8001ed4 <__aeabi_dsub+0x468>
 80020ac:	2900      	cmp	r1, #0
 80020ae:	d09d      	beq.n	8001fec <__aeabi_dsub+0x580>
 80020b0:	2601      	movs	r6, #1
 80020b2:	4663      	mov	r3, ip
 80020b4:	465c      	mov	r4, fp
 80020b6:	4690      	mov	r8, r2
 80020b8:	401e      	ands	r6, r3
 80020ba:	e6db      	b.n	8001e74 <__aeabi_dsub+0x408>
 80020bc:	1a17      	subs	r7, r2, r0
 80020be:	465b      	mov	r3, fp
 80020c0:	42ba      	cmp	r2, r7
 80020c2:	4192      	sbcs	r2, r2
 80020c4:	1b1c      	subs	r4, r3, r4
 80020c6:	4252      	negs	r2, r2
 80020c8:	1aa4      	subs	r4, r4, r2
 80020ca:	0223      	lsls	r3, r4, #8
 80020cc:	d4c8      	bmi.n	8002060 <__aeabi_dsub+0x5f4>
 80020ce:	0763      	lsls	r3, r4, #29
 80020d0:	08ff      	lsrs	r7, r7, #3
 80020d2:	431f      	orrs	r7, r3
 80020d4:	4666      	mov	r6, ip
 80020d6:	2301      	movs	r3, #1
 80020d8:	08e5      	lsrs	r5, r4, #3
 80020da:	e71f      	b.n	8001f1c <__aeabi_dsub+0x4b0>
 80020dc:	001d      	movs	r5, r3
 80020de:	2400      	movs	r4, #0
 80020e0:	2700      	movs	r7, #0
 80020e2:	e657      	b.n	8001d94 <__aeabi_dsub+0x328>
 80020e4:	465c      	mov	r4, fp
 80020e6:	08d0      	lsrs	r0, r2, #3
 80020e8:	e66a      	b.n	8001dc0 <__aeabi_dsub+0x354>
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d100      	bne.n	80020f0 <__aeabi_dsub+0x684>
 80020ee:	e737      	b.n	8001f60 <__aeabi_dsub+0x4f4>
 80020f0:	4653      	mov	r3, sl
 80020f2:	08c0      	lsrs	r0, r0, #3
 80020f4:	0767      	lsls	r7, r4, #29
 80020f6:	4307      	orrs	r7, r0
 80020f8:	08e5      	lsrs	r5, r4, #3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d100      	bne.n	8002100 <__aeabi_dsub+0x694>
 80020fe:	e5b1      	b.n	8001c64 <__aeabi_dsub+0x1f8>
 8002100:	2380      	movs	r3, #128	@ 0x80
 8002102:	031b      	lsls	r3, r3, #12
 8002104:	421d      	tst	r5, r3
 8002106:	d008      	beq.n	800211a <__aeabi_dsub+0x6ae>
 8002108:	4659      	mov	r1, fp
 800210a:	08c8      	lsrs	r0, r1, #3
 800210c:	4218      	tst	r0, r3
 800210e:	d104      	bne.n	800211a <__aeabi_dsub+0x6ae>
 8002110:	08d2      	lsrs	r2, r2, #3
 8002112:	0749      	lsls	r1, r1, #29
 8002114:	430a      	orrs	r2, r1
 8002116:	0017      	movs	r7, r2
 8002118:	0005      	movs	r5, r0
 800211a:	0f7b      	lsrs	r3, r7, #29
 800211c:	00ff      	lsls	r7, r7, #3
 800211e:	08ff      	lsrs	r7, r7, #3
 8002120:	075b      	lsls	r3, r3, #29
 8002122:	431f      	orrs	r7, r3
 8002124:	e59e      	b.n	8001c64 <__aeabi_dsub+0x1f8>
 8002126:	08c0      	lsrs	r0, r0, #3
 8002128:	0763      	lsls	r3, r4, #29
 800212a:	4318      	orrs	r0, r3
 800212c:	08e5      	lsrs	r5, r4, #3
 800212e:	2900      	cmp	r1, #0
 8002130:	d053      	beq.n	80021da <__aeabi_dsub+0x76e>
 8002132:	2380      	movs	r3, #128	@ 0x80
 8002134:	031b      	lsls	r3, r3, #12
 8002136:	421d      	tst	r5, r3
 8002138:	d00a      	beq.n	8002150 <__aeabi_dsub+0x6e4>
 800213a:	4659      	mov	r1, fp
 800213c:	08cc      	lsrs	r4, r1, #3
 800213e:	421c      	tst	r4, r3
 8002140:	d106      	bne.n	8002150 <__aeabi_dsub+0x6e4>
 8002142:	2601      	movs	r6, #1
 8002144:	4663      	mov	r3, ip
 8002146:	0025      	movs	r5, r4
 8002148:	08d0      	lsrs	r0, r2, #3
 800214a:	0749      	lsls	r1, r1, #29
 800214c:	4308      	orrs	r0, r1
 800214e:	401e      	ands	r6, r3
 8002150:	0f47      	lsrs	r7, r0, #29
 8002152:	00c0      	lsls	r0, r0, #3
 8002154:	08c0      	lsrs	r0, r0, #3
 8002156:	077f      	lsls	r7, r7, #29
 8002158:	4307      	orrs	r7, r0
 800215a:	e583      	b.n	8001c64 <__aeabi_dsub+0x1f8>
 800215c:	1883      	adds	r3, r0, r2
 800215e:	4293      	cmp	r3, r2
 8002160:	4192      	sbcs	r2, r2
 8002162:	445c      	add	r4, fp
 8002164:	4252      	negs	r2, r2
 8002166:	18a5      	adds	r5, r4, r2
 8002168:	022a      	lsls	r2, r5, #8
 800216a:	d500      	bpl.n	800216e <__aeabi_dsub+0x702>
 800216c:	e724      	b.n	8001fb8 <__aeabi_dsub+0x54c>
 800216e:	076f      	lsls	r7, r5, #29
 8002170:	08db      	lsrs	r3, r3, #3
 8002172:	431f      	orrs	r7, r3
 8002174:	08ed      	lsrs	r5, r5, #3
 8002176:	2301      	movs	r3, #1
 8002178:	e6d0      	b.n	8001f1c <__aeabi_dsub+0x4b0>
 800217a:	46c0      	nop			@ (mov r8, r8)
 800217c:	000007ff 	.word	0x000007ff
 8002180:	000007fe 	.word	0x000007fe
 8002184:	ff7fffff 	.word	0xff7fffff
 8002188:	465b      	mov	r3, fp
 800218a:	08d2      	lsrs	r2, r2, #3
 800218c:	075f      	lsls	r7, r3, #29
 800218e:	4666      	mov	r6, ip
 8002190:	4317      	orrs	r7, r2
 8002192:	08dd      	lsrs	r5, r3, #3
 8002194:	e566      	b.n	8001c64 <__aeabi_dsub+0x1f8>
 8002196:	0025      	movs	r5, r4
 8002198:	3b20      	subs	r3, #32
 800219a:	40dd      	lsrs	r5, r3
 800219c:	4663      	mov	r3, ip
 800219e:	2b20      	cmp	r3, #32
 80021a0:	d005      	beq.n	80021ae <__aeabi_dsub+0x742>
 80021a2:	2340      	movs	r3, #64	@ 0x40
 80021a4:	4661      	mov	r1, ip
 80021a6:	1a5b      	subs	r3, r3, r1
 80021a8:	409c      	lsls	r4, r3
 80021aa:	4320      	orrs	r0, r4
 80021ac:	4680      	mov	r8, r0
 80021ae:	4647      	mov	r7, r8
 80021b0:	1e7b      	subs	r3, r7, #1
 80021b2:	419f      	sbcs	r7, r3
 80021b4:	432f      	orrs	r7, r5
 80021b6:	e5a0      	b.n	8001cfa <__aeabi_dsub+0x28e>
 80021b8:	2120      	movs	r1, #32
 80021ba:	2700      	movs	r7, #0
 80021bc:	1a09      	subs	r1, r1, r0
 80021be:	e4d2      	b.n	8001b66 <__aeabi_dsub+0xfa>
 80021c0:	2f00      	cmp	r7, #0
 80021c2:	d100      	bne.n	80021c6 <__aeabi_dsub+0x75a>
 80021c4:	e713      	b.n	8001fee <__aeabi_dsub+0x582>
 80021c6:	465c      	mov	r4, fp
 80021c8:	0017      	movs	r7, r2
 80021ca:	2500      	movs	r5, #0
 80021cc:	e5f6      	b.n	8001dbc <__aeabi_dsub+0x350>
 80021ce:	08d7      	lsrs	r7, r2, #3
 80021d0:	0749      	lsls	r1, r1, #29
 80021d2:	2302      	movs	r3, #2
 80021d4:	430f      	orrs	r7, r1
 80021d6:	092d      	lsrs	r5, r5, #4
 80021d8:	e6a0      	b.n	8001f1c <__aeabi_dsub+0x4b0>
 80021da:	0007      	movs	r7, r0
 80021dc:	e542      	b.n	8001c64 <__aeabi_dsub+0x1f8>
 80021de:	465b      	mov	r3, fp
 80021e0:	2601      	movs	r6, #1
 80021e2:	075f      	lsls	r7, r3, #29
 80021e4:	08dd      	lsrs	r5, r3, #3
 80021e6:	4663      	mov	r3, ip
 80021e8:	08d2      	lsrs	r2, r2, #3
 80021ea:	4317      	orrs	r7, r2
 80021ec:	401e      	ands	r6, r3
 80021ee:	e539      	b.n	8001c64 <__aeabi_dsub+0x1f8>
 80021f0:	465b      	mov	r3, fp
 80021f2:	08d2      	lsrs	r2, r2, #3
 80021f4:	075f      	lsls	r7, r3, #29
 80021f6:	4317      	orrs	r7, r2
 80021f8:	08dd      	lsrs	r5, r3, #3
 80021fa:	e533      	b.n	8001c64 <__aeabi_dsub+0x1f8>
 80021fc:	4a1e      	ldr	r2, [pc, #120]	@ (8002278 <__aeabi_dsub+0x80c>)
 80021fe:	08db      	lsrs	r3, r3, #3
 8002200:	4022      	ands	r2, r4
 8002202:	0757      	lsls	r7, r2, #29
 8002204:	0252      	lsls	r2, r2, #9
 8002206:	2501      	movs	r5, #1
 8002208:	431f      	orrs	r7, r3
 800220a:	0b14      	lsrs	r4, r2, #12
 800220c:	e5c2      	b.n	8001d94 <__aeabi_dsub+0x328>
 800220e:	000e      	movs	r6, r1
 8002210:	2001      	movs	r0, #1
 8002212:	e65f      	b.n	8001ed4 <__aeabi_dsub+0x468>
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00d      	beq.n	8002234 <__aeabi_dsub+0x7c8>
 8002218:	464b      	mov	r3, r9
 800221a:	1b5b      	subs	r3, r3, r5
 800221c:	469c      	mov	ip, r3
 800221e:	2d00      	cmp	r5, #0
 8002220:	d100      	bne.n	8002224 <__aeabi_dsub+0x7b8>
 8002222:	e548      	b.n	8001cb6 <__aeabi_dsub+0x24a>
 8002224:	2701      	movs	r7, #1
 8002226:	2b38      	cmp	r3, #56	@ 0x38
 8002228:	dd00      	ble.n	800222c <__aeabi_dsub+0x7c0>
 800222a:	e566      	b.n	8001cfa <__aeabi_dsub+0x28e>
 800222c:	2380      	movs	r3, #128	@ 0x80
 800222e:	041b      	lsls	r3, r3, #16
 8002230:	431c      	orrs	r4, r3
 8002232:	e550      	b.n	8001cd6 <__aeabi_dsub+0x26a>
 8002234:	1c6b      	adds	r3, r5, #1
 8002236:	4d11      	ldr	r5, [pc, #68]	@ (800227c <__aeabi_dsub+0x810>)
 8002238:	422b      	tst	r3, r5
 800223a:	d000      	beq.n	800223e <__aeabi_dsub+0x7d2>
 800223c:	e673      	b.n	8001f26 <__aeabi_dsub+0x4ba>
 800223e:	4659      	mov	r1, fp
 8002240:	0023      	movs	r3, r4
 8002242:	4311      	orrs	r1, r2
 8002244:	468a      	mov	sl, r1
 8002246:	4303      	orrs	r3, r0
 8002248:	e600      	b.n	8001e4c <__aeabi_dsub+0x3e0>
 800224a:	0767      	lsls	r7, r4, #29
 800224c:	08c0      	lsrs	r0, r0, #3
 800224e:	2300      	movs	r3, #0
 8002250:	4307      	orrs	r7, r0
 8002252:	08e5      	lsrs	r5, r4, #3
 8002254:	e662      	b.n	8001f1c <__aeabi_dsub+0x4b0>
 8002256:	0764      	lsls	r4, r4, #29
 8002258:	08ff      	lsrs	r7, r7, #3
 800225a:	4327      	orrs	r7, r4
 800225c:	0905      	lsrs	r5, r0, #4
 800225e:	e65d      	b.n	8001f1c <__aeabi_dsub+0x4b0>
 8002260:	08d2      	lsrs	r2, r2, #3
 8002262:	0749      	lsls	r1, r1, #29
 8002264:	4311      	orrs	r1, r2
 8002266:	000f      	movs	r7, r1
 8002268:	2302      	movs	r3, #2
 800226a:	092d      	lsrs	r5, r5, #4
 800226c:	e656      	b.n	8001f1c <__aeabi_dsub+0x4b0>
 800226e:	0007      	movs	r7, r0
 8002270:	e5a4      	b.n	8001dbc <__aeabi_dsub+0x350>
 8002272:	0038      	movs	r0, r7
 8002274:	e48f      	b.n	8001b96 <__aeabi_dsub+0x12a>
 8002276:	46c0      	nop			@ (mov r8, r8)
 8002278:	ff7fffff 	.word	0xff7fffff
 800227c:	000007fe 	.word	0x000007fe

08002280 <__aeabi_dcmpun>:
 8002280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002282:	46c6      	mov	lr, r8
 8002284:	031e      	lsls	r6, r3, #12
 8002286:	0b36      	lsrs	r6, r6, #12
 8002288:	46b0      	mov	r8, r6
 800228a:	4e0d      	ldr	r6, [pc, #52]	@ (80022c0 <__aeabi_dcmpun+0x40>)
 800228c:	030c      	lsls	r4, r1, #12
 800228e:	004d      	lsls	r5, r1, #1
 8002290:	005f      	lsls	r7, r3, #1
 8002292:	b500      	push	{lr}
 8002294:	0b24      	lsrs	r4, r4, #12
 8002296:	0d6d      	lsrs	r5, r5, #21
 8002298:	0d7f      	lsrs	r7, r7, #21
 800229a:	42b5      	cmp	r5, r6
 800229c:	d00b      	beq.n	80022b6 <__aeabi_dcmpun+0x36>
 800229e:	4908      	ldr	r1, [pc, #32]	@ (80022c0 <__aeabi_dcmpun+0x40>)
 80022a0:	2000      	movs	r0, #0
 80022a2:	428f      	cmp	r7, r1
 80022a4:	d104      	bne.n	80022b0 <__aeabi_dcmpun+0x30>
 80022a6:	4646      	mov	r6, r8
 80022a8:	4316      	orrs	r6, r2
 80022aa:	0030      	movs	r0, r6
 80022ac:	1e43      	subs	r3, r0, #1
 80022ae:	4198      	sbcs	r0, r3
 80022b0:	bc80      	pop	{r7}
 80022b2:	46b8      	mov	r8, r7
 80022b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022b6:	4304      	orrs	r4, r0
 80022b8:	2001      	movs	r0, #1
 80022ba:	2c00      	cmp	r4, #0
 80022bc:	d1f8      	bne.n	80022b0 <__aeabi_dcmpun+0x30>
 80022be:	e7ee      	b.n	800229e <__aeabi_dcmpun+0x1e>
 80022c0:	000007ff 	.word	0x000007ff

080022c4 <__aeabi_d2iz>:
 80022c4:	000b      	movs	r3, r1
 80022c6:	0002      	movs	r2, r0
 80022c8:	b570      	push	{r4, r5, r6, lr}
 80022ca:	4d16      	ldr	r5, [pc, #88]	@ (8002324 <__aeabi_d2iz+0x60>)
 80022cc:	030c      	lsls	r4, r1, #12
 80022ce:	b082      	sub	sp, #8
 80022d0:	0049      	lsls	r1, r1, #1
 80022d2:	2000      	movs	r0, #0
 80022d4:	9200      	str	r2, [sp, #0]
 80022d6:	9301      	str	r3, [sp, #4]
 80022d8:	0b24      	lsrs	r4, r4, #12
 80022da:	0d49      	lsrs	r1, r1, #21
 80022dc:	0fde      	lsrs	r6, r3, #31
 80022de:	42a9      	cmp	r1, r5
 80022e0:	dd04      	ble.n	80022ec <__aeabi_d2iz+0x28>
 80022e2:	4811      	ldr	r0, [pc, #68]	@ (8002328 <__aeabi_d2iz+0x64>)
 80022e4:	4281      	cmp	r1, r0
 80022e6:	dd03      	ble.n	80022f0 <__aeabi_d2iz+0x2c>
 80022e8:	4b10      	ldr	r3, [pc, #64]	@ (800232c <__aeabi_d2iz+0x68>)
 80022ea:	18f0      	adds	r0, r6, r3
 80022ec:	b002      	add	sp, #8
 80022ee:	bd70      	pop	{r4, r5, r6, pc}
 80022f0:	2080      	movs	r0, #128	@ 0x80
 80022f2:	0340      	lsls	r0, r0, #13
 80022f4:	4320      	orrs	r0, r4
 80022f6:	4c0e      	ldr	r4, [pc, #56]	@ (8002330 <__aeabi_d2iz+0x6c>)
 80022f8:	1a64      	subs	r4, r4, r1
 80022fa:	2c1f      	cmp	r4, #31
 80022fc:	dd08      	ble.n	8002310 <__aeabi_d2iz+0x4c>
 80022fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002334 <__aeabi_d2iz+0x70>)
 8002300:	1a5b      	subs	r3, r3, r1
 8002302:	40d8      	lsrs	r0, r3
 8002304:	0003      	movs	r3, r0
 8002306:	4258      	negs	r0, r3
 8002308:	2e00      	cmp	r6, #0
 800230a:	d1ef      	bne.n	80022ec <__aeabi_d2iz+0x28>
 800230c:	0018      	movs	r0, r3
 800230e:	e7ed      	b.n	80022ec <__aeabi_d2iz+0x28>
 8002310:	4b09      	ldr	r3, [pc, #36]	@ (8002338 <__aeabi_d2iz+0x74>)
 8002312:	9a00      	ldr	r2, [sp, #0]
 8002314:	469c      	mov	ip, r3
 8002316:	0003      	movs	r3, r0
 8002318:	4461      	add	r1, ip
 800231a:	408b      	lsls	r3, r1
 800231c:	40e2      	lsrs	r2, r4
 800231e:	4313      	orrs	r3, r2
 8002320:	e7f1      	b.n	8002306 <__aeabi_d2iz+0x42>
 8002322:	46c0      	nop			@ (mov r8, r8)
 8002324:	000003fe 	.word	0x000003fe
 8002328:	0000041d 	.word	0x0000041d
 800232c:	7fffffff 	.word	0x7fffffff
 8002330:	00000433 	.word	0x00000433
 8002334:	00000413 	.word	0x00000413
 8002338:	fffffbed 	.word	0xfffffbed

0800233c <__aeabi_i2d>:
 800233c:	b570      	push	{r4, r5, r6, lr}
 800233e:	2800      	cmp	r0, #0
 8002340:	d016      	beq.n	8002370 <__aeabi_i2d+0x34>
 8002342:	17c3      	asrs	r3, r0, #31
 8002344:	18c5      	adds	r5, r0, r3
 8002346:	405d      	eors	r5, r3
 8002348:	0fc4      	lsrs	r4, r0, #31
 800234a:	0028      	movs	r0, r5
 800234c:	f000 f848 	bl	80023e0 <__clzsi2>
 8002350:	4b10      	ldr	r3, [pc, #64]	@ (8002394 <__aeabi_i2d+0x58>)
 8002352:	1a1b      	subs	r3, r3, r0
 8002354:	055b      	lsls	r3, r3, #21
 8002356:	0d5b      	lsrs	r3, r3, #21
 8002358:	280a      	cmp	r0, #10
 800235a:	dc14      	bgt.n	8002386 <__aeabi_i2d+0x4a>
 800235c:	0002      	movs	r2, r0
 800235e:	002e      	movs	r6, r5
 8002360:	3215      	adds	r2, #21
 8002362:	4096      	lsls	r6, r2
 8002364:	220b      	movs	r2, #11
 8002366:	1a12      	subs	r2, r2, r0
 8002368:	40d5      	lsrs	r5, r2
 800236a:	032d      	lsls	r5, r5, #12
 800236c:	0b2d      	lsrs	r5, r5, #12
 800236e:	e003      	b.n	8002378 <__aeabi_i2d+0x3c>
 8002370:	2400      	movs	r4, #0
 8002372:	2300      	movs	r3, #0
 8002374:	2500      	movs	r5, #0
 8002376:	2600      	movs	r6, #0
 8002378:	051b      	lsls	r3, r3, #20
 800237a:	432b      	orrs	r3, r5
 800237c:	07e4      	lsls	r4, r4, #31
 800237e:	4323      	orrs	r3, r4
 8002380:	0030      	movs	r0, r6
 8002382:	0019      	movs	r1, r3
 8002384:	bd70      	pop	{r4, r5, r6, pc}
 8002386:	380b      	subs	r0, #11
 8002388:	4085      	lsls	r5, r0
 800238a:	032d      	lsls	r5, r5, #12
 800238c:	2600      	movs	r6, #0
 800238e:	0b2d      	lsrs	r5, r5, #12
 8002390:	e7f2      	b.n	8002378 <__aeabi_i2d+0x3c>
 8002392:	46c0      	nop			@ (mov r8, r8)
 8002394:	0000041e 	.word	0x0000041e

08002398 <__aeabi_ui2d>:
 8002398:	b510      	push	{r4, lr}
 800239a:	1e04      	subs	r4, r0, #0
 800239c:	d010      	beq.n	80023c0 <__aeabi_ui2d+0x28>
 800239e:	f000 f81f 	bl	80023e0 <__clzsi2>
 80023a2:	4b0e      	ldr	r3, [pc, #56]	@ (80023dc <__aeabi_ui2d+0x44>)
 80023a4:	1a1b      	subs	r3, r3, r0
 80023a6:	055b      	lsls	r3, r3, #21
 80023a8:	0d5b      	lsrs	r3, r3, #21
 80023aa:	280a      	cmp	r0, #10
 80023ac:	dc0f      	bgt.n	80023ce <__aeabi_ui2d+0x36>
 80023ae:	220b      	movs	r2, #11
 80023b0:	0021      	movs	r1, r4
 80023b2:	1a12      	subs	r2, r2, r0
 80023b4:	40d1      	lsrs	r1, r2
 80023b6:	3015      	adds	r0, #21
 80023b8:	030a      	lsls	r2, r1, #12
 80023ba:	4084      	lsls	r4, r0
 80023bc:	0b12      	lsrs	r2, r2, #12
 80023be:	e001      	b.n	80023c4 <__aeabi_ui2d+0x2c>
 80023c0:	2300      	movs	r3, #0
 80023c2:	2200      	movs	r2, #0
 80023c4:	051b      	lsls	r3, r3, #20
 80023c6:	4313      	orrs	r3, r2
 80023c8:	0020      	movs	r0, r4
 80023ca:	0019      	movs	r1, r3
 80023cc:	bd10      	pop	{r4, pc}
 80023ce:	0022      	movs	r2, r4
 80023d0:	380b      	subs	r0, #11
 80023d2:	4082      	lsls	r2, r0
 80023d4:	0312      	lsls	r2, r2, #12
 80023d6:	2400      	movs	r4, #0
 80023d8:	0b12      	lsrs	r2, r2, #12
 80023da:	e7f3      	b.n	80023c4 <__aeabi_ui2d+0x2c>
 80023dc:	0000041e 	.word	0x0000041e

080023e0 <__clzsi2>:
 80023e0:	211c      	movs	r1, #28
 80023e2:	2301      	movs	r3, #1
 80023e4:	041b      	lsls	r3, r3, #16
 80023e6:	4298      	cmp	r0, r3
 80023e8:	d301      	bcc.n	80023ee <__clzsi2+0xe>
 80023ea:	0c00      	lsrs	r0, r0, #16
 80023ec:	3910      	subs	r1, #16
 80023ee:	0a1b      	lsrs	r3, r3, #8
 80023f0:	4298      	cmp	r0, r3
 80023f2:	d301      	bcc.n	80023f8 <__clzsi2+0x18>
 80023f4:	0a00      	lsrs	r0, r0, #8
 80023f6:	3908      	subs	r1, #8
 80023f8:	091b      	lsrs	r3, r3, #4
 80023fa:	4298      	cmp	r0, r3
 80023fc:	d301      	bcc.n	8002402 <__clzsi2+0x22>
 80023fe:	0900      	lsrs	r0, r0, #4
 8002400:	3904      	subs	r1, #4
 8002402:	a202      	add	r2, pc, #8	@ (adr r2, 800240c <__clzsi2+0x2c>)
 8002404:	5c10      	ldrb	r0, [r2, r0]
 8002406:	1840      	adds	r0, r0, r1
 8002408:	4770      	bx	lr
 800240a:	46c0      	nop			@ (mov r8, r8)
 800240c:	02020304 	.word	0x02020304
 8002410:	01010101 	.word	0x01010101
	...

0800241c <MX_BlueNRG_2_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_2_Init(void)
{
 800241c:	b590      	push	{r4, r7, lr}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
  /* USER CODE END BlueNRG_2_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  uint8_t ret;

  User_Init();
 8002422:	f000 fa29 	bl	8002878 <User_Init>

  hci_init(APP_UserEvtRx, NULL);
 8002426:	4b11      	ldr	r3, [pc, #68]	@ (800246c <MX_BlueNRG_2_Init+0x50>)
 8002428:	2100      	movs	r1, #0
 800242a:	0018      	movs	r0, r3
 800242c:	f009 ff90 	bl	800c350 <hci_init>

  PRINT_DBG("BlueNRG-2 BLE Sample Application\r\n");
 8002430:	4b0f      	ldr	r3, [pc, #60]	@ (8002470 <MX_BlueNRG_2_Init+0x54>)
 8002432:	0018      	movs	r0, r3
 8002434:	f00b f8e8 	bl	800d608 <puts>

  /* Init Sample App Device */
  ret = SampleAppInit();
 8002438:	1dfc      	adds	r4, r7, #7
 800243a:	f000 f9bd 	bl	80027b8 <SampleAppInit>
 800243e:	0003      	movs	r3, r0
 8002440:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
 8002442:	1dfb      	adds	r3, r7, #7
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d008      	beq.n	800245c <MX_BlueNRG_2_Init+0x40>
  {
    PRINT_DBG("SampleAppInit()--> Failed 0x%02x\r\n", ret);
 800244a:	1dfb      	adds	r3, r7, #7
 800244c:	781a      	ldrb	r2, [r3, #0]
 800244e:	4b09      	ldr	r3, [pc, #36]	@ (8002474 <MX_BlueNRG_2_Init+0x58>)
 8002450:	0011      	movs	r1, r2
 8002452:	0018      	movs	r0, r3
 8002454:	f00b f868 	bl	800d528 <iprintf>
    while(1);
 8002458:	46c0      	nop			@ (mov r8, r8)
 800245a:	e7fd      	b.n	8002458 <MX_BlueNRG_2_Init+0x3c>
  }

  PRINT_DBG("BLE Stack Initialized & Device Configured\r\n");
 800245c:	4b06      	ldr	r3, [pc, #24]	@ (8002478 <MX_BlueNRG_2_Init+0x5c>)
 800245e:	0018      	movs	r0, r3
 8002460:	f00b f8d2 	bl	800d608 <puts>

  /* USER CODE BEGIN BlueNRG_2_Init_PostTreatment */

  /* USER CODE END BlueNRG_2_Init_PostTreatment */
}
 8002464:	46c0      	nop			@ (mov r8, r8)
 8002466:	46bd      	mov	sp, r7
 8002468:	b003      	add	sp, #12
 800246a:	bd90      	pop	{r4, r7, pc}
 800246c:	08002f21 	.word	0x08002f21
 8002470:	0800f570 	.word	0x0800f570
 8002474:	0800f594 	.word	0x0800f594
 8002478:	0800f5b8 	.word	0x0800f5b8

0800247c <receiveData>:
 * @param  data_buffer : pointer to store in received data
 * @param  Nb_bytes : number of bytes to be received
 * @retval None
 */
static void receiveData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	000a      	movs	r2, r1
 8002486:	1cfb      	adds	r3, r7, #3
 8002488:	701a      	strb	r2, [r3, #0]
  BSP_LED_Toggle(LED2);
 800248a:	2000      	movs	r0, #0
 800248c:	f002 fb5e 	bl	8004b4c <BSP_LED_Toggle>

  for(int i = 0; i < Nb_bytes; i++)
 8002490:	2300      	movs	r3, #0
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	e009      	b.n	80024aa <receiveData+0x2e>
  {
    PRINT_DBG("%c", data_buffer[i]);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	18d3      	adds	r3, r2, r3
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	0018      	movs	r0, r3
 80024a0:	f00b f852 	bl	800d548 <putchar>
  for(int i = 0; i < Nb_bytes; i++)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	3301      	adds	r3, #1
 80024a8:	60fb      	str	r3, [r7, #12]
 80024aa:	1cfb      	adds	r3, r7, #3
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	dbf0      	blt.n	8002496 <receiveData+0x1a>
  }
  fflush(stdout);
 80024b4:	4b04      	ldr	r3, [pc, #16]	@ (80024c8 <receiveData+0x4c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	0018      	movs	r0, r3
 80024bc:	f00a ff58 	bl	800d370 <fflush>
}
 80024c0:	46c0      	nop			@ (mov r8, r8)
 80024c2:	46bd      	mov	sp, r7
 80024c4:	b004      	add	sp, #16
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	20000048 	.word	0x20000048

080024cc <Reset_DiscoveryContext>:
* Description    : Reset the discovery context.
* Input          : None.
* Return         : None.
*******************************************************************************/
static void Reset_DiscoveryContext(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
  discovery.check_disc_proc_timer = FALSE;
 80024d2:	4b29      	ldr	r3, [pc, #164]	@ (8002578 <Reset_DiscoveryContext+0xac>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	701a      	strb	r2, [r3, #0]
  discovery.check_disc_mode_timer = FALSE;
 80024d8:	4b27      	ldr	r3, [pc, #156]	@ (8002578 <Reset_DiscoveryContext+0xac>)
 80024da:	2200      	movs	r2, #0
 80024dc:	705a      	strb	r2, [r3, #1]
  discovery.is_device_found = FALSE;
 80024de:	4b26      	ldr	r3, [pc, #152]	@ (8002578 <Reset_DiscoveryContext+0xac>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	709a      	strb	r2, [r3, #2]
  discovery.do_connect = FALSE;
 80024e4:	4b24      	ldr	r3, [pc, #144]	@ (8002578 <Reset_DiscoveryContext+0xac>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	70da      	strb	r2, [r3, #3]
  discovery.startTime = 0;
 80024ea:	4b23      	ldr	r3, [pc, #140]	@ (8002578 <Reset_DiscoveryContext+0xac>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	605a      	str	r2, [r3, #4]
  discovery.device_state = INIT_STATE;
 80024f0:	4b21      	ldr	r3, [pc, #132]	@ (8002578 <Reset_DiscoveryContext+0xac>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	821a      	strh	r2, [r3, #16]
  BLUENRG_memset(&discovery.device_found_address[0], 0, 6);
 80024f6:	4b21      	ldr	r3, [pc, #132]	@ (800257c <Reset_DiscoveryContext+0xb0>)
 80024f8:	2206      	movs	r2, #6
 80024fa:	2100      	movs	r1, #0
 80024fc:	0018      	movs	r0, r3
 80024fe:	f00b f987 	bl	800d810 <memset>
  device_role = 0xFF;
 8002502:	4b1f      	ldr	r3, [pc, #124]	@ (8002580 <Reset_DiscoveryContext+0xb4>)
 8002504:	22ff      	movs	r2, #255	@ 0xff
 8002506:	701a      	strb	r2, [r3, #0]
  mtu_exchanged = 0;
 8002508:	4b1e      	ldr	r3, [pc, #120]	@ (8002584 <Reset_DiscoveryContext+0xb8>)
 800250a:	2200      	movs	r2, #0
 800250c:	701a      	strb	r2, [r3, #0]
  mtu_exchanged_wait = 0;
 800250e:	4b1e      	ldr	r3, [pc, #120]	@ (8002588 <Reset_DiscoveryContext+0xbc>)
 8002510:	2200      	movs	r2, #0
 8002512:	701a      	strb	r2, [r3, #0]
  write_char_len = CHAR_VALUE_LENGTH-3;
 8002514:	4b1d      	ldr	r3, [pc, #116]	@ (800258c <Reset_DiscoveryContext+0xc0>)
 8002516:	223c      	movs	r2, #60	@ 0x3c
 8002518:	801a      	strh	r2, [r3, #0]

  for (uint16_t i=0; i<(CHAR_VALUE_LENGTH-3); i++) {
 800251a:	1dbb      	adds	r3, r7, #6
 800251c:	2200      	movs	r2, #0
 800251e:	801a      	strh	r2, [r3, #0]
 8002520:	e021      	b.n	8002566 <Reset_DiscoveryContext+0x9a>
    data[i] = 0x31 + (i%10);
 8002522:	1dbb      	adds	r3, r7, #6
 8002524:	881b      	ldrh	r3, [r3, #0]
 8002526:	210a      	movs	r1, #10
 8002528:	0018      	movs	r0, r3
 800252a:	f7fd fe8b 	bl	8000244 <__aeabi_uidivmod>
 800252e:	000b      	movs	r3, r1
 8002530:	b29b      	uxth	r3, r3
 8002532:	b2da      	uxtb	r2, r3
 8002534:	1dbb      	adds	r3, r7, #6
 8002536:	881b      	ldrh	r3, [r3, #0]
 8002538:	3231      	adds	r2, #49	@ 0x31
 800253a:	b2d1      	uxtb	r1, r2
 800253c:	4a14      	ldr	r2, [pc, #80]	@ (8002590 <Reset_DiscoveryContext+0xc4>)
 800253e:	54d1      	strb	r1, [r2, r3]
    if ((i+1)%10==0) {
 8002540:	1dbb      	adds	r3, r7, #6
 8002542:	881b      	ldrh	r3, [r3, #0]
 8002544:	3301      	adds	r3, #1
 8002546:	210a      	movs	r1, #10
 8002548:	0018      	movs	r0, r3
 800254a:	f7fd ff65 	bl	8000418 <__aeabi_idivmod>
 800254e:	1e0b      	subs	r3, r1, #0
 8002550:	d104      	bne.n	800255c <Reset_DiscoveryContext+0x90>
      data[i]='x';
 8002552:	1dbb      	adds	r3, r7, #6
 8002554:	881b      	ldrh	r3, [r3, #0]
 8002556:	4a0e      	ldr	r2, [pc, #56]	@ (8002590 <Reset_DiscoveryContext+0xc4>)
 8002558:	2178      	movs	r1, #120	@ 0x78
 800255a:	54d1      	strb	r1, [r2, r3]
  for (uint16_t i=0; i<(CHAR_VALUE_LENGTH-3); i++) {
 800255c:	1dbb      	adds	r3, r7, #6
 800255e:	881a      	ldrh	r2, [r3, #0]
 8002560:	1dbb      	adds	r3, r7, #6
 8002562:	3201      	adds	r2, #1
 8002564:	801a      	strh	r2, [r3, #0]
 8002566:	1dbb      	adds	r3, r7, #6
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	2b3b      	cmp	r3, #59	@ 0x3b
 800256c:	d9d9      	bls.n	8002522 <Reset_DiscoveryContext+0x56>
    }
  }
}
 800256e:	46c0      	nop			@ (mov r8, r8)
 8002570:	46c0      	nop			@ (mov r8, r8)
 8002572:	46bd      	mov	sp, r7
 8002574:	b002      	add	sp, #8
 8002576:	bd80      	pop	{r7, pc}
 8002578:	20000220 	.word	0x20000220
 800257c:	20000229 	.word	0x20000229
 8002580:	20000004 	.word	0x20000004
 8002584:	2000023c 	.word	0x2000023c
 8002588:	2000023d 	.word	0x2000023d
 800258c:	20000006 	.word	0x20000006
 8002590:	20000240 	.word	0x20000240

08002594 <Setup_DeviceAddress>:
* Description    : Setup the device address.
* Input          : None.
* Return         : None.
*******************************************************************************/
static void Setup_DeviceAddress(void)
{
 8002594:	b5b0      	push	{r4, r5, r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
  tBleStatus ret;
  uint8_t bdaddr[] = {0x00, 0x00, 0x00, 0xE1, 0x80, 0x02};
 800259a:	230c      	movs	r3, #12
 800259c:	18fb      	adds	r3, r7, r3
 800259e:	4a43      	ldr	r2, [pc, #268]	@ (80026ac <Setup_DeviceAddress+0x118>)
 80025a0:	6811      	ldr	r1, [r2, #0]
 80025a2:	6019      	str	r1, [r3, #0]
 80025a4:	8892      	ldrh	r2, [r2, #4]
 80025a6:	809a      	strh	r2, [r3, #4]
  uint8_t random_number[8];

  /* get a random number from BlueNRG */
  ret = hci_le_rand(random_number);
 80025a8:	2515      	movs	r5, #21
 80025aa:	197c      	adds	r4, r7, r5
 80025ac:	1d3b      	adds	r3, r7, #4
 80025ae:	0018      	movs	r0, r3
 80025b0:	f009 f9b3 	bl	800b91a <hci_le_rand>
 80025b4:	0003      	movs	r3, r0
 80025b6:	7023      	strb	r3, [r4, #0]
  if(ret != BLE_STATUS_SUCCESS)
 80025b8:	197b      	adds	r3, r7, r5
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d006      	beq.n	80025ce <Setup_DeviceAddress+0x3a>
  {
    PRINT_DBG("hci_le_rand() call failed: 0x%02x\r\n", ret);
 80025c0:	197b      	adds	r3, r7, r5
 80025c2:	781a      	ldrb	r2, [r3, #0]
 80025c4:	4b3a      	ldr	r3, [pc, #232]	@ (80026b0 <Setup_DeviceAddress+0x11c>)
 80025c6:	0011      	movs	r1, r2
 80025c8:	0018      	movs	r0, r3
 80025ca:	f00a ffad 	bl	800d528 <iprintf>
  }

  discovery_time = 3000; /* at least 3 seconds */
 80025ce:	4b39      	ldr	r3, [pc, #228]	@ (80026b4 <Setup_DeviceAddress+0x120>)
 80025d0:	4a39      	ldr	r2, [pc, #228]	@ (80026b8 <Setup_DeviceAddress+0x124>)
 80025d2:	801a      	strh	r2, [r3, #0]
  /* setup discovery time with random number */
  for (uint8_t i=0; i<8; i++)
 80025d4:	2317      	movs	r3, #23
 80025d6:	18fb      	adds	r3, r7, r3
 80025d8:	2200      	movs	r2, #0
 80025da:	701a      	strb	r2, [r3, #0]
 80025dc:	e011      	b.n	8002602 <Setup_DeviceAddress+0x6e>
  {
    discovery_time += (2*random_number[i]);
 80025de:	2117      	movs	r1, #23
 80025e0:	187b      	adds	r3, r7, r1
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	1d3a      	adds	r2, r7, #4
 80025e6:	5cd3      	ldrb	r3, [r2, r3]
 80025e8:	18db      	adds	r3, r3, r3
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	4b31      	ldr	r3, [pc, #196]	@ (80026b4 <Setup_DeviceAddress+0x120>)
 80025ee:	881b      	ldrh	r3, [r3, #0]
 80025f0:	18d3      	adds	r3, r2, r3
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	4b2f      	ldr	r3, [pc, #188]	@ (80026b4 <Setup_DeviceAddress+0x120>)
 80025f6:	801a      	strh	r2, [r3, #0]
  for (uint8_t i=0; i<8; i++)
 80025f8:	187b      	adds	r3, r7, r1
 80025fa:	781a      	ldrb	r2, [r3, #0]
 80025fc:	187b      	adds	r3, r7, r1
 80025fe:	3201      	adds	r2, #1
 8002600:	701a      	strb	r2, [r3, #0]
 8002602:	2317      	movs	r3, #23
 8002604:	18fb      	adds	r3, r7, r3
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	2b07      	cmp	r3, #7
 800260a:	d9e8      	bls.n	80025de <Setup_DeviceAddress+0x4a>
  }

  /* Setup last 3 bytes of public address with random number */
  bdaddr[0] = (uint8_t) (random_number[0]);
 800260c:	1d3b      	adds	r3, r7, #4
 800260e:	781a      	ldrb	r2, [r3, #0]
 8002610:	210c      	movs	r1, #12
 8002612:	187b      	adds	r3, r7, r1
 8002614:	701a      	strb	r2, [r3, #0]
  bdaddr[1] = (uint8_t) (random_number[3]);
 8002616:	1d3b      	adds	r3, r7, #4
 8002618:	78da      	ldrb	r2, [r3, #3]
 800261a:	187b      	adds	r3, r7, r1
 800261c:	705a      	strb	r2, [r3, #1]
  bdaddr[2] = (uint8_t) (random_number[6]);
 800261e:	1d3b      	adds	r3, r7, #4
 8002620:	799a      	ldrb	r2, [r3, #6]
 8002622:	187b      	adds	r3, r7, r1
 8002624:	709a      	strb	r2, [r3, #2]

  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, bdaddr);
 8002626:	2515      	movs	r5, #21
 8002628:	197c      	adds	r4, r7, r5
 800262a:	187b      	adds	r3, r7, r1
 800262c:	001a      	movs	r2, r3
 800262e:	2106      	movs	r1, #6
 8002630:	2000      	movs	r0, #0
 8002632:	f009 fcd9 	bl	800bfe8 <aci_hal_write_config_data>
 8002636:	0003      	movs	r3, r0
 8002638:	7023      	strb	r3, [r4, #0]
  if(ret != BLE_STATUS_SUCCESS)
 800263a:	197b      	adds	r3, r7, r5
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d007      	beq.n	8002652 <Setup_DeviceAddress+0xbe>
  {
      PRINT_DBG("Setting BD_ADDR failed 0x%02x\r\n", ret);
 8002642:	197b      	adds	r3, r7, r5
 8002644:	781a      	ldrb	r2, [r3, #0]
 8002646:	4b1d      	ldr	r3, [pc, #116]	@ (80026bc <Setup_DeviceAddress+0x128>)
 8002648:	0011      	movs	r1, r2
 800264a:	0018      	movs	r0, r3
 800264c:	f00a ff6c 	bl	800d528 <iprintf>
      PRINT_DBG("%02X-", bdaddr[i]);
    }
    PRINT_DBG("%02X\r\n", bdaddr[0]);
  }

}
 8002650:	e027      	b.n	80026a2 <Setup_DeviceAddress+0x10e>
    PRINT_DBG("Public address: ");
 8002652:	4b1b      	ldr	r3, [pc, #108]	@ (80026c0 <Setup_DeviceAddress+0x12c>)
 8002654:	0018      	movs	r0, r3
 8002656:	f00a ff67 	bl	800d528 <iprintf>
    for (uint8_t i=5; i>0; i--)
 800265a:	2316      	movs	r3, #22
 800265c:	18fb      	adds	r3, r7, r3
 800265e:	2205      	movs	r2, #5
 8002660:	701a      	strb	r2, [r3, #0]
 8002662:	e010      	b.n	8002686 <Setup_DeviceAddress+0xf2>
      PRINT_DBG("%02X-", bdaddr[i]);
 8002664:	2416      	movs	r4, #22
 8002666:	193b      	adds	r3, r7, r4
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	220c      	movs	r2, #12
 800266c:	18ba      	adds	r2, r7, r2
 800266e:	5cd3      	ldrb	r3, [r2, r3]
 8002670:	001a      	movs	r2, r3
 8002672:	4b14      	ldr	r3, [pc, #80]	@ (80026c4 <Setup_DeviceAddress+0x130>)
 8002674:	0011      	movs	r1, r2
 8002676:	0018      	movs	r0, r3
 8002678:	f00a ff56 	bl	800d528 <iprintf>
    for (uint8_t i=5; i>0; i--)
 800267c:	193b      	adds	r3, r7, r4
 800267e:	781a      	ldrb	r2, [r3, #0]
 8002680:	193b      	adds	r3, r7, r4
 8002682:	3a01      	subs	r2, #1
 8002684:	701a      	strb	r2, [r3, #0]
 8002686:	2316      	movs	r3, #22
 8002688:	18fb      	adds	r3, r7, r3
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1e9      	bne.n	8002664 <Setup_DeviceAddress+0xd0>
    PRINT_DBG("%02X\r\n", bdaddr[0]);
 8002690:	230c      	movs	r3, #12
 8002692:	18fb      	adds	r3, r7, r3
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	001a      	movs	r2, r3
 8002698:	4b0b      	ldr	r3, [pc, #44]	@ (80026c8 <Setup_DeviceAddress+0x134>)
 800269a:	0011      	movs	r1, r2
 800269c:	0018      	movs	r0, r3
 800269e:	f00a ff43 	bl	800d528 <iprintf>
}
 80026a2:	46c0      	nop			@ (mov r8, r8)
 80026a4:	46bd      	mov	sp, r7
 80026a6:	b006      	add	sp, #24
 80026a8:	bdb0      	pop	{r4, r5, r7, pc}
 80026aa:	46c0      	nop			@ (mov r8, r8)
 80026ac:	0800f64c 	.word	0x0800f64c
 80026b0:	0800f5e4 	.word	0x0800f5e4
 80026b4:	2000023a 	.word	0x2000023a
 80026b8:	00000bb8 	.word	0x00000bb8
 80026bc:	0800f608 	.word	0x0800f608
 80026c0:	0800f628 	.word	0x0800f628
 80026c4:	0800f63c 	.word	0x0800f63c
 80026c8:	0800f644 	.word	0x0800f644

080026cc <Find_DeviceName>:
* Input          : Data length.
*                  Data value
* Return         : TRUE if the local name found is the expected one, FALSE otherwise.
*******************************************************************************/
static uint8_t Find_DeviceName(uint8_t data_length, uint8_t *data_value)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	0002      	movs	r2, r0
 80026d4:	6039      	str	r1, [r7, #0]
 80026d6:	1dfb      	adds	r3, r7, #7
 80026d8:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0;
 80026da:	230f      	movs	r3, #15
 80026dc:	18fb      	adds	r3, r7, r3
 80026de:	2200      	movs	r2, #0
 80026e0:	701a      	strb	r2, [r3, #0]

  while (index < data_length)
 80026e2:	e025      	b.n	8002730 <Find_DeviceName+0x64>
  {
    /* Advertising data fields: len, type, values */
    /* Check if field is complete local name and the length is the expected one for BLE SampleApp  */
    if (data_value[index+1] == AD_TYPE_COMPLETE_LOCAL_NAME)
 80026e4:	210f      	movs	r1, #15
 80026e6:	187b      	adds	r3, r7, r1
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	3301      	adds	r3, #1
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	18d3      	adds	r3, r2, r3
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	2b09      	cmp	r3, #9
 80026f4:	d10f      	bne.n	8002716 <Find_DeviceName+0x4a>
    {
      /* check if found device name is the expected one: local_name */
      if (BLUENRG_memcmp(&data_value[index+1], &local_name[0], BLE_SAMPLE_APP_COMPLETE_LOCAL_NAME_SIZE) == 0)
 80026f6:	187b      	adds	r3, r7, r1
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	3301      	adds	r3, #1
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	18d3      	adds	r3, r2, r3
 8002700:	4911      	ldr	r1, [pc, #68]	@ (8002748 <Find_DeviceName+0x7c>)
 8002702:	2212      	movs	r2, #18
 8002704:	0018      	movs	r0, r3
 8002706:	f00b f875 	bl	800d7f4 <memcmp>
 800270a:	1e03      	subs	r3, r0, #0
 800270c:	d101      	bne.n	8002712 <Find_DeviceName+0x46>
      {
        return TRUE;
 800270e:	2301      	movs	r3, #1
 8002710:	e016      	b.n	8002740 <Find_DeviceName+0x74>
      }
      else
      {
        return FALSE;
 8002712:	2300      	movs	r3, #0
 8002714:	e014      	b.n	8002740 <Find_DeviceName+0x74>
      }
    }
    else
    {
      /* move to next advertising field */
      index += (data_value[index] +1);
 8002716:	210f      	movs	r1, #15
 8002718:	187b      	adds	r3, r7, r1
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	18d3      	adds	r3, r2, r3
 8002720:	781a      	ldrb	r2, [r3, #0]
 8002722:	187b      	adds	r3, r7, r1
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	18d3      	adds	r3, r2, r3
 8002728:	b2da      	uxtb	r2, r3
 800272a:	187b      	adds	r3, r7, r1
 800272c:	3201      	adds	r2, #1
 800272e:	701a      	strb	r2, [r3, #0]
  while (index < data_length)
 8002730:	230f      	movs	r3, #15
 8002732:	18fa      	adds	r2, r7, r3
 8002734:	1dfb      	adds	r3, r7, #7
 8002736:	7812      	ldrb	r2, [r2, #0]
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	429a      	cmp	r2, r3
 800273c:	d3d2      	bcc.n	80026e4 <Find_DeviceName+0x18>
    }
  }

  return FALSE;
 800273e:	2300      	movs	r3, #0
}
 8002740:	0018      	movs	r0, r3
 8002742:	46bd      	mov	sp, r7
 8002744:	b004      	add	sp, #16
 8002746:	bd80      	pop	{r7, pc}
 8002748:	20000008 	.word	0x20000008

0800274c <Attribute_Modified_CB>:
*                  Length of the data.
*                  Attribute data.
* Return         : None.
*******************************************************************************/
static void Attribute_Modified_CB(uint16_t handle, uint8_t data_length, uint8_t *att_data)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	603a      	str	r2, [r7, #0]
 8002754:	1dbb      	adds	r3, r7, #6
 8002756:	1c02      	adds	r2, r0, #0
 8002758:	801a      	strh	r2, [r3, #0]
 800275a:	1d7b      	adds	r3, r7, #5
 800275c:	1c0a      	adds	r2, r1, #0
 800275e:	701a      	strb	r2, [r3, #0]
  if(handle == RXCharHandle + 1)
 8002760:	1dbb      	adds	r3, r7, #6
 8002762:	881a      	ldrh	r2, [r3, #0]
 8002764:	4b11      	ldr	r3, [pc, #68]	@ (80027ac <Attribute_Modified_CB+0x60>)
 8002766:	881b      	ldrh	r3, [r3, #0]
 8002768:	3301      	adds	r3, #1
 800276a:	429a      	cmp	r2, r3
 800276c:	d107      	bne.n	800277e <Attribute_Modified_CB+0x32>
  {
    receiveData(att_data, data_length);
 800276e:	1d7b      	adds	r3, r7, #5
 8002770:	781a      	ldrb	r2, [r3, #0]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	0011      	movs	r1, r2
 8002776:	0018      	movs	r0, r3
 8002778:	f7ff fe80 	bl	800247c <receiveData>
    if(att_data[0] == 0x01)
    {
      APP_FLAG_SET(NOTIFICATIONS_ENABLED);
    }
  }
}
 800277c:	e011      	b.n	80027a2 <Attribute_Modified_CB+0x56>
  else if(handle == TXCharHandle + 2)
 800277e:	1dbb      	adds	r3, r7, #6
 8002780:	881a      	ldrh	r2, [r3, #0]
 8002782:	4b0b      	ldr	r3, [pc, #44]	@ (80027b0 <Attribute_Modified_CB+0x64>)
 8002784:	881b      	ldrh	r3, [r3, #0]
 8002786:	3302      	adds	r3, #2
 8002788:	429a      	cmp	r2, r3
 800278a:	d10a      	bne.n	80027a2 <Attribute_Modified_CB+0x56>
    if(att_data[0] == 0x01)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d106      	bne.n	80027a2 <Attribute_Modified_CB+0x56>
      APP_FLAG_SET(NOTIFICATIONS_ENABLED);
 8002794:	4b07      	ldr	r3, [pc, #28]	@ (80027b4 <Attribute_Modified_CB+0x68>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2280      	movs	r2, #128	@ 0x80
 800279a:	00d2      	lsls	r2, r2, #3
 800279c:	431a      	orrs	r2, r3
 800279e:	4b05      	ldr	r3, [pc, #20]	@ (80027b4 <Attribute_Modified_CB+0x68>)
 80027a0:	601a      	str	r2, [r3, #0]
}
 80027a2:	46c0      	nop			@ (mov r8, r8)
 80027a4:	46bd      	mov	sp, r7
 80027a6:	b002      	add	sp, #8
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	46c0      	nop			@ (mov r8, r8)
 80027ac:	20000280 	.word	0x20000280
 80027b0:	2000027e 	.word	0x2000027e
 80027b4:	20000000 	.word	0x20000000

080027b8 <SampleAppInit>:
* Description    : Init SampleApp.
* Input          : None.
* Return         : Status.
*******************************************************************************/
static uint8_t SampleAppInit(void)
{
 80027b8:	b590      	push	{r4, r7, lr}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af02      	add	r7, sp, #8
  uint8_t ret;
  uint16_t service_handle, dev_name_char_handle, appearance_char_handle;

  /* Sw reset of the device */
  hci_reset();
 80027be:	f009 f87d 	bl	800b8bc <hci_reset>
  /**
   *  To support both the BlueNRG-2 and the BlueNRG-2N a minimum delay of 2000ms is required at device boot
   */
  HAL_Delay(2000);
 80027c2:	23fa      	movs	r3, #250	@ 0xfa
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	0018      	movs	r0, r3
 80027c8:	f002 fc66 	bl	8005098 <HAL_Delay>

  /* Setup the device address */
  Setup_DeviceAddress();
 80027cc:	f7ff fee2 	bl	8002594 <Setup_DeviceAddress>

  /* Set the TX power to -2 dBm */
  aci_hal_set_tx_power_level(1, 4);
 80027d0:	2104      	movs	r1, #4
 80027d2:	2001      	movs	r0, #1
 80027d4:	f009 fc96 	bl	800c104 <aci_hal_set_tx_power_level>

  /* GATT Init */
  ret = aci_gatt_init();
 80027d8:	1dfc      	adds	r4, r7, #7
 80027da:	f009 f995 	bl	800bb08 <aci_gatt_init>
 80027de:	0003      	movs	r3, r0
 80027e0:	7023      	strb	r3, [r4, #0]
  if(ret != BLE_STATUS_SUCCESS)
 80027e2:	1dfb      	adds	r3, r7, #7
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d009      	beq.n	80027fe <SampleAppInit+0x46>
  {
    PRINT_DBG("GATT_Init failed: 0x%02x\r\n", ret);
 80027ea:	1dfb      	adds	r3, r7, #7
 80027ec:	781a      	ldrb	r2, [r3, #0]
 80027ee:	4b1f      	ldr	r3, [pc, #124]	@ (800286c <SampleAppInit+0xb4>)
 80027f0:	0011      	movs	r1, r2
 80027f2:	0018      	movs	r0, r3
 80027f4:	f00a fe98 	bl	800d528 <iprintf>
    return ret;
 80027f8:	1dfb      	adds	r3, r7, #7
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	e031      	b.n	8002862 <SampleAppInit+0xaa>
  }

  /* GAP Init */
  ret = aci_gap_init(GAP_CENTRAL_ROLE|GAP_PERIPHERAL_ROLE,0x0,0x07, &service_handle,
 80027fe:	1dfc      	adds	r4, r7, #7
 8002800:	1d3a      	adds	r2, r7, #4
 8002802:	003b      	movs	r3, r7
 8002804:	9301      	str	r3, [sp, #4]
 8002806:	1cbb      	adds	r3, r7, #2
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	0013      	movs	r3, r2
 800280c:	2207      	movs	r2, #7
 800280e:	2100      	movs	r1, #0
 8002810:	2005      	movs	r0, #5
 8002812:	f009 f8c1 	bl	800b998 <aci_gap_init>
 8002816:	0003      	movs	r3, r0
 8002818:	7023      	strb	r3, [r4, #0]
                     &dev_name_char_handle, &appearance_char_handle);
  if(ret != BLE_STATUS_SUCCESS)
 800281a:	1dfb      	adds	r3, r7, #7
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d009      	beq.n	8002836 <SampleAppInit+0x7e>
  {
    PRINT_DBG("GAP_Init failed: 0x%02x\r\n", ret);
 8002822:	1dfb      	adds	r3, r7, #7
 8002824:	781a      	ldrb	r2, [r3, #0]
 8002826:	4b12      	ldr	r3, [pc, #72]	@ (8002870 <SampleAppInit+0xb8>)
 8002828:	0011      	movs	r1, r2
 800282a:	0018      	movs	r0, r3
 800282c:	f00a fe7c 	bl	800d528 <iprintf>
    return ret;
 8002830:	1dfb      	adds	r3, r7, #7
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	e015      	b.n	8002862 <SampleAppInit+0xaa>
  }

  /* Add Device Service & Characteristics */
  ret = Add_Sample_Service();
 8002836:	1dfc      	adds	r4, r7, #7
 8002838:	f000 fad0 	bl	8002ddc <Add_Sample_Service>
 800283c:	0003      	movs	r3, r0
 800283e:	7023      	strb	r3, [r4, #0]
  if(ret != BLE_STATUS_SUCCESS)
 8002840:	1dfb      	adds	r3, r7, #7
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d009      	beq.n	800285c <SampleAppInit+0xa4>
  {
    PRINT_DBG("Error while adding service: 0x%02x\r\n", ret);
 8002848:	1dfb      	adds	r3, r7, #7
 800284a:	781a      	ldrb	r2, [r3, #0]
 800284c:	4b09      	ldr	r3, [pc, #36]	@ (8002874 <SampleAppInit+0xbc>)
 800284e:	0011      	movs	r1, r2
 8002850:	0018      	movs	r0, r3
 8002852:	f00a fe69 	bl	800d528 <iprintf>
    return ret;
 8002856:	1dfb      	adds	r3, r7, #7
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	e002      	b.n	8002862 <SampleAppInit+0xaa>
  }

  /* Reset the discovery context */
  Reset_DiscoveryContext();
 800285c:	f7ff fe36 	bl	80024cc <Reset_DiscoveryContext>

  return BLE_STATUS_SUCCESS;
 8002860:	2300      	movs	r3, #0
}
 8002862:	0018      	movs	r0, r3
 8002864:	46bd      	mov	sp, r7
 8002866:	b003      	add	sp, #12
 8002868:	bd90      	pop	{r4, r7, pc}
 800286a:	46c0      	nop			@ (mov r8, r8)
 800286c:	0800f654 	.word	0x0800f654
 8002870:	0800f670 	.word	0x0800f670
 8002874:	0800f68c 	.word	0x0800f68c

08002878 <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_GPIO);
 800287c:	2100      	movs	r1, #0
 800287e:	2000      	movs	r0, #0
 8002880:	f002 f9c0 	bl	8004c04 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 8002884:	2000      	movs	r0, #0
 8002886:	f002 f94d 	bl	8004b24 <BSP_LED_Init>

  BSP_COM_Init(COM1);
 800288a:	2000      	movs	r0, #0
 800288c:	f002 fa68 	bl	8004d60 <BSP_COM_Init>
}
 8002890:	46c0      	nop			@ (mov r8, r8)
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
	...

08002898 <aci_gap_proc_complete_event>:
 *******************************************************************************/
void aci_gap_proc_complete_event(uint8_t Procedure_Code,
                                 uint8_t Status,
                                 uint8_t Data_Length,
                                 uint8_t Data[])
{
 8002898:	b590      	push	{r4, r7, lr}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	0004      	movs	r4, r0
 80028a0:	0008      	movs	r0, r1
 80028a2:	0011      	movs	r1, r2
 80028a4:	603b      	str	r3, [r7, #0]
 80028a6:	1dfb      	adds	r3, r7, #7
 80028a8:	1c22      	adds	r2, r4, #0
 80028aa:	701a      	strb	r2, [r3, #0]
 80028ac:	1dbb      	adds	r3, r7, #6
 80028ae:	1c02      	adds	r2, r0, #0
 80028b0:	701a      	strb	r2, [r3, #0]
 80028b2:	1d7b      	adds	r3, r7, #5
 80028b4:	1c0a      	adds	r2, r1, #0
 80028b6:	701a      	strb	r2, [r3, #0]
  if (Procedure_Code == GAP_GENERAL_DISCOVERY_PROC)
 80028b8:	1dfb      	adds	r3, r7, #7
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d119      	bne.n	80028f4 <aci_gap_proc_complete_event+0x5c>
  {
    /* gap procedure complete has been raised as consequence of a GAP
       terminate procedure done after a device found event during the discovery procedure */
    if (discovery.do_connect == TRUE)
 80028c0:	4b0e      	ldr	r3, [pc, #56]	@ (80028fc <aci_gap_proc_complete_event+0x64>)
 80028c2:	78db      	ldrb	r3, [r3, #3]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d10c      	bne.n	80028e2 <aci_gap_proc_complete_event+0x4a>
    {
      discovery.do_connect = FALSE;
 80028c8:	4b0c      	ldr	r3, [pc, #48]	@ (80028fc <aci_gap_proc_complete_event+0x64>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	70da      	strb	r2, [r3, #3]
      discovery.check_disc_proc_timer = FALSE;
 80028ce:	4b0b      	ldr	r3, [pc, #44]	@ (80028fc <aci_gap_proc_complete_event+0x64>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	701a      	strb	r2, [r3, #0]
      discovery.startTime = 0;
 80028d4:	4b09      	ldr	r3, [pc, #36]	@ (80028fc <aci_gap_proc_complete_event+0x64>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	605a      	str	r2, [r3, #4]
      /* discovery procedure has been completed and no device found:
         go to discovery mode */
      discovery.device_state = DO_DIRECT_CONNECTION_PROC;
 80028da:	4b08      	ldr	r3, [pc, #32]	@ (80028fc <aci_gap_proc_complete_event+0x64>)
 80028dc:	2208      	movs	r2, #8
 80028de:	821a      	strh	r2, [r3, #16]
      discovery.check_disc_proc_timer = FALSE;
      discovery.startTime = 0;
      discovery.device_state = ENTER_DISCOVERY_MODE;
    }
  }
}
 80028e0:	e008      	b.n	80028f4 <aci_gap_proc_complete_event+0x5c>
      discovery.check_disc_proc_timer = FALSE;
 80028e2:	4b06      	ldr	r3, [pc, #24]	@ (80028fc <aci_gap_proc_complete_event+0x64>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	701a      	strb	r2, [r3, #0]
      discovery.startTime = 0;
 80028e8:	4b04      	ldr	r3, [pc, #16]	@ (80028fc <aci_gap_proc_complete_event+0x64>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	605a      	str	r2, [r3, #4]
      discovery.device_state = ENTER_DISCOVERY_MODE;
 80028ee:	4b03      	ldr	r3, [pc, #12]	@ (80028fc <aci_gap_proc_complete_event+0x64>)
 80028f0:	2210      	movs	r2, #16
 80028f2:	821a      	strh	r2, [r3, #16]
}
 80028f4:	46c0      	nop			@ (mov r8, r8)
 80028f6:	46bd      	mov	sp, r7
 80028f8:	b003      	add	sp, #12
 80028fa:	bd90      	pop	{r4, r7, pc}
 80028fc:	20000220 	.word	0x20000220

08002900 <hci_le_connection_complete_event>:
                                      uint16_t Conn_Interval,
                                      uint16_t Conn_Latency,
                                      uint16_t Supervision_Timeout,
                                      uint8_t Master_Clock_Accuracy)

{
 8002900:	b5b0      	push	{r4, r5, r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	0005      	movs	r5, r0
 8002908:	000c      	movs	r4, r1
 800290a:	0010      	movs	r0, r2
 800290c:	0019      	movs	r1, r3
 800290e:	1dfb      	adds	r3, r7, #7
 8002910:	1c2a      	adds	r2, r5, #0
 8002912:	701a      	strb	r2, [r3, #0]
 8002914:	1d3b      	adds	r3, r7, #4
 8002916:	1c22      	adds	r2, r4, #0
 8002918:	801a      	strh	r2, [r3, #0]
 800291a:	1dbb      	adds	r3, r7, #6
 800291c:	1c02      	adds	r2, r0, #0
 800291e:	701a      	strb	r2, [r3, #0]
 8002920:	1cfb      	adds	r3, r7, #3
 8002922:	1c0a      	adds	r2, r1, #0
 8002924:	701a      	strb	r2, [r3, #0]
  /* Set the exit state for the Connection state machine: APP_FLAG_CLEAR(SET_CONNECTABLE); */
  APP_FLAG_CLEAR(SET_CONNECTABLE);
 8002926:	4b26      	ldr	r3, [pc, #152]	@ (80029c0 <hci_le_connection_complete_event+0xc0>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a26      	ldr	r2, [pc, #152]	@ (80029c4 <hci_le_connection_complete_event+0xc4>)
 800292c:	401a      	ands	r2, r3
 800292e:	4b24      	ldr	r3, [pc, #144]	@ (80029c0 <hci_le_connection_complete_event+0xc0>)
 8002930:	601a      	str	r2, [r3, #0]
  discovery.check_disc_proc_timer = FALSE;
 8002932:	4b25      	ldr	r3, [pc, #148]	@ (80029c8 <hci_le_connection_complete_event+0xc8>)
 8002934:	2200      	movs	r2, #0
 8002936:	701a      	strb	r2, [r3, #0]
  discovery.check_disc_mode_timer = FALSE;
 8002938:	4b23      	ldr	r3, [pc, #140]	@ (80029c8 <hci_le_connection_complete_event+0xc8>)
 800293a:	2200      	movs	r2, #0
 800293c:	705a      	strb	r2, [r3, #1]
  discovery.startTime = 0;
 800293e:	4b22      	ldr	r3, [pc, #136]	@ (80029c8 <hci_le_connection_complete_event+0xc8>)
 8002940:	2200      	movs	r2, #0
 8002942:	605a      	str	r2, [r3, #4]

  connection_handle = Connection_Handle;
 8002944:	4b21      	ldr	r3, [pc, #132]	@ (80029cc <hci_le_connection_complete_event+0xcc>)
 8002946:	1d3a      	adds	r2, r7, #4
 8002948:	8812      	ldrh	r2, [r2, #0]
 800294a:	801a      	strh	r2, [r3, #0]

  APP_FLAG_SET(CONNECTED);
 800294c:	4b1c      	ldr	r3, [pc, #112]	@ (80029c0 <hci_le_connection_complete_event+0xc0>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2280      	movs	r2, #128	@ 0x80
 8002952:	0092      	lsls	r2, r2, #2
 8002954:	431a      	orrs	r2, r3
 8002956:	4b1a      	ldr	r3, [pc, #104]	@ (80029c0 <hci_le_connection_complete_event+0xc0>)
 8002958:	601a      	str	r2, [r3, #0]
  discovery.device_state = INIT_STATE;
 800295a:	4b1b      	ldr	r3, [pc, #108]	@ (80029c8 <hci_le_connection_complete_event+0xc8>)
 800295c:	2200      	movs	r2, #0
 800295e:	821a      	strh	r2, [r3, #16]

  /* store device role */
  device_role = Role;
 8002960:	4b1b      	ldr	r3, [pc, #108]	@ (80029d0 <hci_le_connection_complete_event+0xd0>)
 8002962:	1dba      	adds	r2, r7, #6
 8002964:	7812      	ldrb	r2, [r2, #0]
 8002966:	701a      	strb	r2, [r3, #0]

  PRINT_DBG("Connection Complete with peer address: ");
 8002968:	4b1a      	ldr	r3, [pc, #104]	@ (80029d4 <hci_le_connection_complete_event+0xd4>)
 800296a:	0018      	movs	r0, r3
 800296c:	f00a fddc 	bl	800d528 <iprintf>
  for (uint8_t i=5; i>0; i--)
 8002970:	230f      	movs	r3, #15
 8002972:	18fb      	adds	r3, r7, r3
 8002974:	2205      	movs	r2, #5
 8002976:	701a      	strb	r2, [r3, #0]
 8002978:	e010      	b.n	800299c <hci_le_connection_complete_event+0x9c>
  {
    PRINT_DBG("%02X-", Peer_Address[i]);
 800297a:	240f      	movs	r4, #15
 800297c:	193b      	adds	r3, r7, r4
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	6a3a      	ldr	r2, [r7, #32]
 8002982:	18d3      	adds	r3, r2, r3
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	001a      	movs	r2, r3
 8002988:	4b13      	ldr	r3, [pc, #76]	@ (80029d8 <hci_le_connection_complete_event+0xd8>)
 800298a:	0011      	movs	r1, r2
 800298c:	0018      	movs	r0, r3
 800298e:	f00a fdcb 	bl	800d528 <iprintf>
  for (uint8_t i=5; i>0; i--)
 8002992:	193b      	adds	r3, r7, r4
 8002994:	781a      	ldrb	r2, [r3, #0]
 8002996:	193b      	adds	r3, r7, r4
 8002998:	3a01      	subs	r2, #1
 800299a:	701a      	strb	r2, [r3, #0]
 800299c:	230f      	movs	r3, #15
 800299e:	18fb      	adds	r3, r7, r3
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1e9      	bne.n	800297a <hci_le_connection_complete_event+0x7a>
  }
  PRINT_DBG("%02X\r\n", Peer_Address[0]);
 80029a6:	6a3b      	ldr	r3, [r7, #32]
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	001a      	movs	r2, r3
 80029ac:	4b0b      	ldr	r3, [pc, #44]	@ (80029dc <hci_le_connection_complete_event+0xdc>)
 80029ae:	0011      	movs	r1, r2
 80029b0:	0018      	movs	r0, r3
 80029b2:	f00a fdb9 	bl	800d528 <iprintf>

}/* end hci_le_connection_complete_event() */
 80029b6:	46c0      	nop			@ (mov r8, r8)
 80029b8:	46bd      	mov	sp, r7
 80029ba:	b004      	add	sp, #16
 80029bc:	bdb0      	pop	{r4, r5, r7, pc}
 80029be:	46c0      	nop			@ (mov r8, r8)
 80029c0:	20000000 	.word	0x20000000
 80029c4:	fffffeff 	.word	0xfffffeff
 80029c8:	20000220 	.word	0x20000220
 80029cc:	20000234 	.word	0x20000234
 80029d0:	20000004 	.word	0x20000004
 80029d4:	0800f940 	.word	0x0800f940
 80029d8:	0800f63c 	.word	0x0800f63c
 80029dc:	0800f644 	.word	0x0800f644

080029e0 <hci_disconnection_complete_event>:
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void hci_disconnection_complete_event(uint8_t Status,
                                      uint16_t Connection_Handle,
                                      uint8_t Reason)
{
 80029e0:	b590      	push	{r4, r7, lr}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	0004      	movs	r4, r0
 80029e8:	0008      	movs	r0, r1
 80029ea:	0011      	movs	r1, r2
 80029ec:	1dfb      	adds	r3, r7, #7
 80029ee:	1c22      	adds	r2, r4, #0
 80029f0:	701a      	strb	r2, [r3, #0]
 80029f2:	1d3b      	adds	r3, r7, #4
 80029f4:	1c02      	adds	r2, r0, #0
 80029f6:	801a      	strh	r2, [r3, #0]
 80029f8:	1dbb      	adds	r3, r7, #6
 80029fa:	1c0a      	adds	r2, r1, #0
 80029fc:	701a      	strb	r2, [r3, #0]
  APP_FLAG_CLEAR(CONNECTED);
 80029fe:	4b1f      	ldr	r3, [pc, #124]	@ (8002a7c <hci_disconnection_complete_event+0x9c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a1f      	ldr	r2, [pc, #124]	@ (8002a80 <hci_disconnection_complete_event+0xa0>)
 8002a04:	401a      	ands	r2, r3
 8002a06:	4b1d      	ldr	r3, [pc, #116]	@ (8002a7c <hci_disconnection_complete_event+0x9c>)
 8002a08:	601a      	str	r2, [r3, #0]
  /* Make the device connectable again. */
  APP_FLAG_SET(SET_CONNECTABLE);
 8002a0a:	4b1c      	ldr	r3, [pc, #112]	@ (8002a7c <hci_disconnection_complete_event+0x9c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2280      	movs	r2, #128	@ 0x80
 8002a10:	0052      	lsls	r2, r2, #1
 8002a12:	431a      	orrs	r2, r3
 8002a14:	4b19      	ldr	r3, [pc, #100]	@ (8002a7c <hci_disconnection_complete_event+0x9c>)
 8002a16:	601a      	str	r2, [r3, #0]
  APP_FLAG_CLEAR(NOTIFICATIONS_ENABLED);
 8002a18:	4b18      	ldr	r3, [pc, #96]	@ (8002a7c <hci_disconnection_complete_event+0x9c>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a19      	ldr	r2, [pc, #100]	@ (8002a84 <hci_disconnection_complete_event+0xa4>)
 8002a1e:	401a      	ands	r2, r3
 8002a20:	4b16      	ldr	r3, [pc, #88]	@ (8002a7c <hci_disconnection_complete_event+0x9c>)
 8002a22:	601a      	str	r2, [r3, #0]

  APP_FLAG_CLEAR(START_READ_TX_CHAR_HANDLE);
 8002a24:	4b15      	ldr	r3, [pc, #84]	@ (8002a7c <hci_disconnection_complete_event+0x9c>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a17      	ldr	r2, [pc, #92]	@ (8002a88 <hci_disconnection_complete_event+0xa8>)
 8002a2a:	401a      	ands	r2, r3
 8002a2c:	4b13      	ldr	r3, [pc, #76]	@ (8002a7c <hci_disconnection_complete_event+0x9c>)
 8002a2e:	601a      	str	r2, [r3, #0]
  APP_FLAG_CLEAR(END_READ_TX_CHAR_HANDLE);
 8002a30:	4b12      	ldr	r3, [pc, #72]	@ (8002a7c <hci_disconnection_complete_event+0x9c>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a15      	ldr	r2, [pc, #84]	@ (8002a8c <hci_disconnection_complete_event+0xac>)
 8002a36:	401a      	ands	r2, r3
 8002a38:	4b10      	ldr	r3, [pc, #64]	@ (8002a7c <hci_disconnection_complete_event+0x9c>)
 8002a3a:	601a      	str	r2, [r3, #0]
  APP_FLAG_CLEAR(START_READ_RX_CHAR_HANDLE);
 8002a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8002a7c <hci_disconnection_complete_event+0x9c>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a13      	ldr	r2, [pc, #76]	@ (8002a90 <hci_disconnection_complete_event+0xb0>)
 8002a42:	401a      	ands	r2, r3
 8002a44:	4b0d      	ldr	r3, [pc, #52]	@ (8002a7c <hci_disconnection_complete_event+0x9c>)
 8002a46:	601a      	str	r2, [r3, #0]
  APP_FLAG_CLEAR(END_READ_RX_CHAR_HANDLE);
 8002a48:	4b0c      	ldr	r3, [pc, #48]	@ (8002a7c <hci_disconnection_complete_event+0x9c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a11      	ldr	r2, [pc, #68]	@ (8002a94 <hci_disconnection_complete_event+0xb4>)
 8002a4e:	401a      	ands	r2, r3
 8002a50:	4b0a      	ldr	r3, [pc, #40]	@ (8002a7c <hci_disconnection_complete_event+0x9c>)
 8002a52:	601a      	str	r2, [r3, #0]
  APP_FLAG_CLEAR(TX_BUFFER_FULL);
 8002a54:	4b09      	ldr	r3, [pc, #36]	@ (8002a7c <hci_disconnection_complete_event+0x9c>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a0f      	ldr	r2, [pc, #60]	@ (8002a98 <hci_disconnection_complete_event+0xb8>)
 8002a5a:	401a      	ands	r2, r3
 8002a5c:	4b07      	ldr	r3, [pc, #28]	@ (8002a7c <hci_disconnection_complete_event+0x9c>)
 8002a5e:	601a      	str	r2, [r3, #0]

  PRINT_DBG("Disconnection with reason: 0x%02X\r\n", Reason);
 8002a60:	1dbb      	adds	r3, r7, #6
 8002a62:	781a      	ldrb	r2, [r3, #0]
 8002a64:	4b0d      	ldr	r3, [pc, #52]	@ (8002a9c <hci_disconnection_complete_event+0xbc>)
 8002a66:	0011      	movs	r1, r2
 8002a68:	0018      	movs	r0, r3
 8002a6a:	f00a fd5d 	bl	800d528 <iprintf>
  Reset_DiscoveryContext();
 8002a6e:	f7ff fd2d 	bl	80024cc <Reset_DiscoveryContext>

}/* end hci_disconnection_complete_event() */
 8002a72:	46c0      	nop			@ (mov r8, r8)
 8002a74:	46bd      	mov	sp, r7
 8002a76:	b003      	add	sp, #12
 8002a78:	bd90      	pop	{r4, r7, pc}
 8002a7a:	46c0      	nop			@ (mov r8, r8)
 8002a7c:	20000000 	.word	0x20000000
 8002a80:	fffffdff 	.word	0xfffffdff
 8002a84:	fffffbff 	.word	0xfffffbff
 8002a88:	fffff7ff 	.word	0xfffff7ff
 8002a8c:	ffffefff 	.word	0xffffefff
 8002a90:	ffffdfff 	.word	0xffffdfff
 8002a94:	ffffbfff 	.word	0xffffbfff
 8002a98:	ffff7fff 	.word	0xffff7fff
 8002a9c:	0800f968 	.word	0x0800f968

08002aa0 <hci_le_advertising_report_event>:
 * Output         : See file bluenrg1_events.h
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void hci_le_advertising_report_event(uint8_t Num_Reports,
                                     Advertising_Report_t Advertising_Report[])
{
 8002aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aa2:	b087      	sub	sp, #28
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	0002      	movs	r2, r0
 8002aa8:	6039      	str	r1, [r7, #0]
 8002aaa:	1dfb      	adds	r3, r7, #7
 8002aac:	701a      	strb	r2, [r3, #0]
  /* Advertising_Report contains all the expected parameters */
  uint8_t evt_type = Advertising_Report[0].Event_Type ;
 8002aae:	2417      	movs	r4, #23
 8002ab0:	193b      	adds	r3, r7, r4
 8002ab2:	683a      	ldr	r2, [r7, #0]
 8002ab4:	7812      	ldrb	r2, [r2, #0]
 8002ab6:	701a      	strb	r2, [r3, #0]
  uint8_t data_length = Advertising_Report[0].Length_Data;
 8002ab8:	2516      	movs	r5, #22
 8002aba:	197b      	adds	r3, r7, r5
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	7a12      	ldrb	r2, [r2, #8]
 8002ac0:	701a      	strb	r2, [r3, #0]
  uint8_t bdaddr_type = Advertising_Report[0].Address_Type;
 8002ac2:	2615      	movs	r6, #21
 8002ac4:	19bb      	adds	r3, r7, r6
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	7852      	ldrb	r2, [r2, #1]
 8002aca:	701a      	strb	r2, [r3, #0]
  uint8_t bdaddr[6];

  BLUENRG_memcpy(bdaddr, Advertising_Report[0].Address,6);
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	3302      	adds	r3, #2
 8002ad0:	220c      	movs	r2, #12
 8002ad2:	18ba      	adds	r2, r7, r2
 8002ad4:	0010      	movs	r0, r2
 8002ad6:	0019      	movs	r1, r3
 8002ad8:	2306      	movs	r3, #6
 8002ada:	001a      	movs	r2, r3
 8002adc:	f00a ff2a 	bl	800d934 <memcpy>

  /* BLE SampleApp device not yet found: check current device found */
  if (!(discovery.is_device_found))
 8002ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8002b4c <hci_le_advertising_report_event+0xac>)
 8002ae2:	789b      	ldrb	r3, [r3, #2]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d12d      	bne.n	8002b44 <hci_le_advertising_report_event+0xa4>
  {
    /* BLE SampleApp device not yet found: check current device found */
    if ((evt_type == ADV_IND) && Find_DeviceName(data_length, Advertising_Report[0].Data))
 8002ae8:	193b      	adds	r3, r7, r4
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d129      	bne.n	8002b44 <hci_le_advertising_report_event+0xa4>
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	68da      	ldr	r2, [r3, #12]
 8002af4:	197b      	adds	r3, r7, r5
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	0011      	movs	r1, r2
 8002afa:	0018      	movs	r0, r3
 8002afc:	f7ff fde6 	bl	80026cc <Find_DeviceName>
 8002b00:	1e03      	subs	r3, r0, #0
 8002b02:	d01f      	beq.n	8002b44 <hci_le_advertising_report_event+0xa4>
    {
      discovery.is_device_found = TRUE;
 8002b04:	4b11      	ldr	r3, [pc, #68]	@ (8002b4c <hci_le_advertising_report_event+0xac>)
 8002b06:	2201      	movs	r2, #1
 8002b08:	709a      	strb	r2, [r3, #2]
      discovery.do_connect = TRUE;
 8002b0a:	4b10      	ldr	r3, [pc, #64]	@ (8002b4c <hci_le_advertising_report_event+0xac>)
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	70da      	strb	r2, [r3, #3]
      discovery.check_disc_proc_timer = FALSE;
 8002b10:	4b0e      	ldr	r3, [pc, #56]	@ (8002b4c <hci_le_advertising_report_event+0xac>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	701a      	strb	r2, [r3, #0]
      discovery.check_disc_mode_timer = FALSE;
 8002b16:	4b0d      	ldr	r3, [pc, #52]	@ (8002b4c <hci_le_advertising_report_event+0xac>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	705a      	strb	r2, [r3, #1]
      /* store first device found:  address type and address value */
      discovery.device_found_address_type = bdaddr_type;
 8002b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b4c <hci_le_advertising_report_event+0xac>)
 8002b1e:	19ba      	adds	r2, r7, r6
 8002b20:	7812      	ldrb	r2, [r2, #0]
 8002b22:	721a      	strb	r2, [r3, #8]
      BLUENRG_memcpy(discovery.device_found_address, bdaddr, 6);
 8002b24:	4b09      	ldr	r3, [pc, #36]	@ (8002b4c <hci_le_advertising_report_event+0xac>)
 8002b26:	2209      	movs	r2, #9
 8002b28:	210c      	movs	r1, #12
 8002b2a:	1879      	adds	r1, r7, r1
 8002b2c:	189b      	adds	r3, r3, r2
 8002b2e:	2206      	movs	r2, #6
 8002b30:	0018      	movs	r0, r3
 8002b32:	f00a feff 	bl	800d934 <memcpy>
      /* device is found: terminate discovery procedure */
      discovery.device_state = DO_TERMINATE_GAP_PROC;
 8002b36:	4b05      	ldr	r3, [pc, #20]	@ (8002b4c <hci_le_advertising_report_event+0xac>)
 8002b38:	2220      	movs	r2, #32
 8002b3a:	821a      	strh	r2, [r3, #16]
      PRINT_DBG("Device found\r\n");
 8002b3c:	4b04      	ldr	r3, [pc, #16]	@ (8002b50 <hci_le_advertising_report_event+0xb0>)
 8002b3e:	0018      	movs	r0, r3
 8002b40:	f00a fd62 	bl	800d608 <puts>
    }
  }
} /* hci_le_advertising_report_event() */
 8002b44:	46c0      	nop			@ (mov r8, r8)
 8002b46:	46bd      	mov	sp, r7
 8002b48:	b007      	add	sp, #28
 8002b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b4c:	20000220 	.word	0x20000220
 8002b50:	0800f98c 	.word	0x0800f98c

08002b54 <aci_gatt_attribute_modified_event>:
void aci_gatt_attribute_modified_event(uint16_t Connection_Handle,
                                       uint16_t Attr_Handle,
                                       uint16_t Offset,
                                       uint16_t Attr_Data_Length,
                                       uint8_t Attr_Data[])
{
 8002b54:	b5b0      	push	{r4, r5, r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	0005      	movs	r5, r0
 8002b5c:	000c      	movs	r4, r1
 8002b5e:	0010      	movs	r0, r2
 8002b60:	0019      	movs	r1, r3
 8002b62:	1dbb      	adds	r3, r7, #6
 8002b64:	1c2a      	adds	r2, r5, #0
 8002b66:	801a      	strh	r2, [r3, #0]
 8002b68:	1d3b      	adds	r3, r7, #4
 8002b6a:	1c22      	adds	r2, r4, #0
 8002b6c:	801a      	strh	r2, [r3, #0]
 8002b6e:	1cbb      	adds	r3, r7, #2
 8002b70:	1c02      	adds	r2, r0, #0
 8002b72:	801a      	strh	r2, [r3, #0]
 8002b74:	003b      	movs	r3, r7
 8002b76:	1c0a      	adds	r2, r1, #0
 8002b78:	801a      	strh	r2, [r3, #0]
  Attribute_Modified_CB(Attr_Handle, Attr_Data_Length, Attr_Data);
 8002b7a:	003b      	movs	r3, r7
 8002b7c:	881b      	ldrh	r3, [r3, #0]
 8002b7e:	b2d9      	uxtb	r1, r3
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	1d3b      	adds	r3, r7, #4
 8002b84:	881b      	ldrh	r3, [r3, #0]
 8002b86:	0018      	movs	r0, r3
 8002b88:	f7ff fde0 	bl	800274c <Attribute_Modified_CB>
} /* end aci_gatt_attribute_modified_event() */
 8002b8c:	46c0      	nop			@ (mov r8, r8)
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	b002      	add	sp, #8
 8002b92:	bdb0      	pop	{r4, r5, r7, pc}

08002b94 <aci_gatt_notification_event>:
 *******************************************************************************/
void aci_gatt_notification_event(uint16_t Connection_Handle,
                                 uint16_t Attribute_Handle,
                                 uint8_t Attribute_Value_Length,
                                 uint8_t Attribute_Value[])
{
 8002b94:	b590      	push	{r4, r7, lr}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	0004      	movs	r4, r0
 8002b9c:	0008      	movs	r0, r1
 8002b9e:	0011      	movs	r1, r2
 8002ba0:	607b      	str	r3, [r7, #4]
 8002ba2:	230e      	movs	r3, #14
 8002ba4:	18fb      	adds	r3, r7, r3
 8002ba6:	1c22      	adds	r2, r4, #0
 8002ba8:	801a      	strh	r2, [r3, #0]
 8002baa:	240c      	movs	r4, #12
 8002bac:	193b      	adds	r3, r7, r4
 8002bae:	1c02      	adds	r2, r0, #0
 8002bb0:	801a      	strh	r2, [r3, #0]
 8002bb2:	200b      	movs	r0, #11
 8002bb4:	183b      	adds	r3, r7, r0
 8002bb6:	1c0a      	adds	r2, r1, #0
 8002bb8:	701a      	strb	r2, [r3, #0]
  if(Attribute_Handle == tx_handle+1)
 8002bba:	193b      	adds	r3, r7, r4
 8002bbc:	881a      	ldrh	r2, [r3, #0]
 8002bbe:	4b08      	ldr	r3, [pc, #32]	@ (8002be0 <aci_gatt_notification_event+0x4c>)
 8002bc0:	881b      	ldrh	r3, [r3, #0]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d106      	bne.n	8002bd6 <aci_gatt_notification_event+0x42>
  {
    receiveData(Attribute_Value, Attribute_Value_Length);
 8002bc8:	183b      	adds	r3, r7, r0
 8002bca:	781a      	ldrb	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	0011      	movs	r1, r2
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	f7ff fc53 	bl	800247c <receiveData>
  }
} /* end aci_gatt_notification_event() */
 8002bd6:	46c0      	nop			@ (mov r8, r8)
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	b005      	add	sp, #20
 8002bdc:	bd90      	pop	{r4, r7, pc}
 8002bde:	46c0      	nop			@ (mov r8, r8)
 8002be0:	20000236 	.word	0x20000236

08002be4 <aci_gatt_disc_read_char_by_uuid_resp_event>:
 *******************************************************************************/
void aci_gatt_disc_read_char_by_uuid_resp_event(uint16_t Connection_Handle,
                                                uint16_t Attribute_Handle,
                                                uint8_t Attribute_Value_Length,
                                                uint8_t Attribute_Value[])
{
 8002be4:	b5b0      	push	{r4, r5, r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	0004      	movs	r4, r0
 8002bec:	0008      	movs	r0, r1
 8002bee:	0011      	movs	r1, r2
 8002bf0:	607b      	str	r3, [r7, #4]
 8002bf2:	250e      	movs	r5, #14
 8002bf4:	197b      	adds	r3, r7, r5
 8002bf6:	1c22      	adds	r2, r4, #0
 8002bf8:	801a      	strh	r2, [r3, #0]
 8002bfa:	240c      	movs	r4, #12
 8002bfc:	193b      	adds	r3, r7, r4
 8002bfe:	1c02      	adds	r2, r0, #0
 8002c00:	801a      	strh	r2, [r3, #0]
 8002c02:	230b      	movs	r3, #11
 8002c04:	18fb      	adds	r3, r7, r3
 8002c06:	1c0a      	adds	r2, r1, #0
 8002c08:	701a      	strb	r2, [r3, #0]
  PRINT_DBG("aci_gatt_disc_read_char_by_uuid_resp_event, Connection Handle: 0x%04X\r\n", Connection_Handle);
 8002c0a:	197b      	adds	r3, r7, r5
 8002c0c:	881a      	ldrh	r2, [r3, #0]
 8002c0e:	4b28      	ldr	r3, [pc, #160]	@ (8002cb0 <aci_gatt_disc_read_char_by_uuid_resp_event+0xcc>)
 8002c10:	0011      	movs	r1, r2
 8002c12:	0018      	movs	r0, r3
 8002c14:	f00a fc88 	bl	800d528 <iprintf>
  if (APP_FLAG(START_READ_TX_CHAR_HANDLE) && !APP_FLAG(END_READ_TX_CHAR_HANDLE))
 8002c18:	4b26      	ldr	r3, [pc, #152]	@ (8002cb4 <aci_gatt_disc_read_char_by_uuid_resp_event+0xd0>)
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	2380      	movs	r3, #128	@ 0x80
 8002c1e:	011b      	lsls	r3, r3, #4
 8002c20:	4013      	ands	r3, r2
 8002c22:	d012      	beq.n	8002c4a <aci_gatt_disc_read_char_by_uuid_resp_event+0x66>
 8002c24:	4b23      	ldr	r3, [pc, #140]	@ (8002cb4 <aci_gatt_disc_read_char_by_uuid_resp_event+0xd0>)
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	2380      	movs	r3, #128	@ 0x80
 8002c2a:	015b      	lsls	r3, r3, #5
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	d10c      	bne.n	8002c4a <aci_gatt_disc_read_char_by_uuid_resp_event+0x66>
  {
    tx_handle = Attribute_Handle;
 8002c30:	4b21      	ldr	r3, [pc, #132]	@ (8002cb8 <aci_gatt_disc_read_char_by_uuid_resp_event+0xd4>)
 8002c32:	193a      	adds	r2, r7, r4
 8002c34:	8812      	ldrh	r2, [r2, #0]
 8002c36:	801a      	strh	r2, [r3, #0]
    PRINT_DBG("TX Char Handle 0x%04X\r\n", tx_handle);
 8002c38:	4b1f      	ldr	r3, [pc, #124]	@ (8002cb8 <aci_gatt_disc_read_char_by_uuid_resp_event+0xd4>)
 8002c3a:	881b      	ldrh	r3, [r3, #0]
 8002c3c:	001a      	movs	r2, r3
 8002c3e:	4b1f      	ldr	r3, [pc, #124]	@ (8002cbc <aci_gatt_disc_read_char_by_uuid_resp_event+0xd8>)
 8002c40:	0011      	movs	r1, r2
 8002c42:	0018      	movs	r0, r3
 8002c44:	f00a fc70 	bl	800d528 <iprintf>
        BSP_LED_Toggle(LED2);
        HAL_Delay(250);
      }
    }
  }
} /* end aci_gatt_disc_read_char_by_uuid_resp_event() */
 8002c48:	e02e      	b.n	8002ca8 <aci_gatt_disc_read_char_by_uuid_resp_event+0xc4>
    if(APP_FLAG(START_READ_RX_CHAR_HANDLE) && !APP_FLAG(END_READ_RX_CHAR_HANDLE))
 8002c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8002cb4 <aci_gatt_disc_read_char_by_uuid_resp_event+0xd0>)
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	2380      	movs	r3, #128	@ 0x80
 8002c50:	019b      	lsls	r3, r3, #6
 8002c52:	4013      	ands	r3, r2
 8002c54:	d028      	beq.n	8002ca8 <aci_gatt_disc_read_char_by_uuid_resp_event+0xc4>
 8002c56:	4b17      	ldr	r3, [pc, #92]	@ (8002cb4 <aci_gatt_disc_read_char_by_uuid_resp_event+0xd0>)
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	2380      	movs	r3, #128	@ 0x80
 8002c5c:	01db      	lsls	r3, r3, #7
 8002c5e:	4013      	ands	r3, r2
 8002c60:	d122      	bne.n	8002ca8 <aci_gatt_disc_read_char_by_uuid_resp_event+0xc4>
      rx_handle = Attribute_Handle;
 8002c62:	4b17      	ldr	r3, [pc, #92]	@ (8002cc0 <aci_gatt_disc_read_char_by_uuid_resp_event+0xdc>)
 8002c64:	220c      	movs	r2, #12
 8002c66:	18ba      	adds	r2, r7, r2
 8002c68:	8812      	ldrh	r2, [r2, #0]
 8002c6a:	801a      	strh	r2, [r3, #0]
      PRINT_DBG("RX Char Handle 0x%04X\r\n", rx_handle);
 8002c6c:	4b14      	ldr	r3, [pc, #80]	@ (8002cc0 <aci_gatt_disc_read_char_by_uuid_resp_event+0xdc>)
 8002c6e:	881b      	ldrh	r3, [r3, #0]
 8002c70:	001a      	movs	r2, r3
 8002c72:	4b14      	ldr	r3, [pc, #80]	@ (8002cc4 <aci_gatt_disc_read_char_by_uuid_resp_event+0xe0>)
 8002c74:	0011      	movs	r1, r2
 8002c76:	0018      	movs	r0, r3
 8002c78:	f00a fc56 	bl	800d528 <iprintf>
      for (uint8_t i=0; i<9; i++) {
 8002c7c:	2317      	movs	r3, #23
 8002c7e:	18fb      	adds	r3, r7, r3
 8002c80:	2200      	movs	r2, #0
 8002c82:	701a      	strb	r2, [r3, #0]
 8002c84:	e00b      	b.n	8002c9e <aci_gatt_disc_read_char_by_uuid_resp_event+0xba>
        BSP_LED_Toggle(LED2);
 8002c86:	2000      	movs	r0, #0
 8002c88:	f001 ff60 	bl	8004b4c <BSP_LED_Toggle>
        HAL_Delay(250);
 8002c8c:	20fa      	movs	r0, #250	@ 0xfa
 8002c8e:	f002 fa03 	bl	8005098 <HAL_Delay>
      for (uint8_t i=0; i<9; i++) {
 8002c92:	2117      	movs	r1, #23
 8002c94:	187b      	adds	r3, r7, r1
 8002c96:	781a      	ldrb	r2, [r3, #0]
 8002c98:	187b      	adds	r3, r7, r1
 8002c9a:	3201      	adds	r2, #1
 8002c9c:	701a      	strb	r2, [r3, #0]
 8002c9e:	2317      	movs	r3, #23
 8002ca0:	18fb      	adds	r3, r7, r3
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	2b08      	cmp	r3, #8
 8002ca6:	d9ee      	bls.n	8002c86 <aci_gatt_disc_read_char_by_uuid_resp_event+0xa2>
} /* end aci_gatt_disc_read_char_by_uuid_resp_event() */
 8002ca8:	46c0      	nop			@ (mov r8, r8)
 8002caa:	46bd      	mov	sp, r7
 8002cac:	b006      	add	sp, #24
 8002cae:	bdb0      	pop	{r4, r5, r7, pc}
 8002cb0:	0800f99c 	.word	0x0800f99c
 8002cb4:	20000000 	.word	0x20000000
 8002cb8:	20000236 	.word	0x20000236
 8002cbc:	0800f9e4 	.word	0x0800f9e4
 8002cc0:	20000238 	.word	0x20000238
 8002cc4:	0800f9fc 	.word	0x0800f9fc

08002cc8 <aci_gatt_proc_complete_event>:
 * Output         : See file bluenrg1_events.h
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void aci_gatt_proc_complete_event(uint16_t Connection_Handle,
                                  uint8_t Error_Code)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	0002      	movs	r2, r0
 8002cd0:	1dbb      	adds	r3, r7, #6
 8002cd2:	801a      	strh	r2, [r3, #0]
 8002cd4:	1d7b      	adds	r3, r7, #5
 8002cd6:	1c0a      	adds	r2, r1, #0
 8002cd8:	701a      	strb	r2, [r3, #0]
  if (APP_FLAG(START_READ_TX_CHAR_HANDLE) && !APP_FLAG(END_READ_TX_CHAR_HANDLE))
 8002cda:	4b15      	ldr	r3, [pc, #84]	@ (8002d30 <aci_gatt_proc_complete_event+0x68>)
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	2380      	movs	r3, #128	@ 0x80
 8002ce0:	011b      	lsls	r3, r3, #4
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	d00d      	beq.n	8002d02 <aci_gatt_proc_complete_event+0x3a>
 8002ce6:	4b12      	ldr	r3, [pc, #72]	@ (8002d30 <aci_gatt_proc_complete_event+0x68>)
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	2380      	movs	r3, #128	@ 0x80
 8002cec:	015b      	lsls	r3, r3, #5
 8002cee:	4013      	ands	r3, r2
 8002cf0:	d107      	bne.n	8002d02 <aci_gatt_proc_complete_event+0x3a>
  {
    APP_FLAG_SET(END_READ_TX_CHAR_HANDLE);
 8002cf2:	4b0f      	ldr	r3, [pc, #60]	@ (8002d30 <aci_gatt_proc_complete_event+0x68>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2280      	movs	r2, #128	@ 0x80
 8002cf8:	0152      	lsls	r2, r2, #5
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8002d30 <aci_gatt_proc_complete_event+0x68>)
 8002cfe:	601a      	str	r2, [r3, #0]
    if (APP_FLAG(START_READ_RX_CHAR_HANDLE) && !APP_FLAG(END_READ_RX_CHAR_HANDLE))
    {
      APP_FLAG_SET(END_READ_RX_CHAR_HANDLE);
    }
  }
} /* end aci_gatt_proc_complete_event() */
 8002d00:	e012      	b.n	8002d28 <aci_gatt_proc_complete_event+0x60>
    if (APP_FLAG(START_READ_RX_CHAR_HANDLE) && !APP_FLAG(END_READ_RX_CHAR_HANDLE))
 8002d02:	4b0b      	ldr	r3, [pc, #44]	@ (8002d30 <aci_gatt_proc_complete_event+0x68>)
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	2380      	movs	r3, #128	@ 0x80
 8002d08:	019b      	lsls	r3, r3, #6
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	d00c      	beq.n	8002d28 <aci_gatt_proc_complete_event+0x60>
 8002d0e:	4b08      	ldr	r3, [pc, #32]	@ (8002d30 <aci_gatt_proc_complete_event+0x68>)
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	2380      	movs	r3, #128	@ 0x80
 8002d14:	01db      	lsls	r3, r3, #7
 8002d16:	4013      	ands	r3, r2
 8002d18:	d106      	bne.n	8002d28 <aci_gatt_proc_complete_event+0x60>
      APP_FLAG_SET(END_READ_RX_CHAR_HANDLE);
 8002d1a:	4b05      	ldr	r3, [pc, #20]	@ (8002d30 <aci_gatt_proc_complete_event+0x68>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2280      	movs	r2, #128	@ 0x80
 8002d20:	01d2      	lsls	r2, r2, #7
 8002d22:	431a      	orrs	r2, r3
 8002d24:	4b02      	ldr	r3, [pc, #8]	@ (8002d30 <aci_gatt_proc_complete_event+0x68>)
 8002d26:	601a      	str	r2, [r3, #0]
} /* end aci_gatt_proc_complete_event() */
 8002d28:	46c0      	nop			@ (mov r8, r8)
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	b002      	add	sp, #8
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	20000000 	.word	0x20000000

08002d34 <aci_gatt_tx_pool_available_event>:
 * Output         : See file bluenrg1_events.h
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void aci_gatt_tx_pool_available_event(uint16_t Connection_Handle,
                                      uint16_t Available_Buffers)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	0002      	movs	r2, r0
 8002d3c:	1dbb      	adds	r3, r7, #6
 8002d3e:	801a      	strh	r2, [r3, #0]
 8002d40:	1d3b      	adds	r3, r7, #4
 8002d42:	1c0a      	adds	r2, r1, #0
 8002d44:	801a      	strh	r2, [r3, #0]
  APP_FLAG_CLEAR(TX_BUFFER_FULL);
 8002d46:	4b05      	ldr	r3, [pc, #20]	@ (8002d5c <aci_gatt_tx_pool_available_event+0x28>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a05      	ldr	r2, [pc, #20]	@ (8002d60 <aci_gatt_tx_pool_available_event+0x2c>)
 8002d4c:	401a      	ands	r2, r3
 8002d4e:	4b03      	ldr	r3, [pc, #12]	@ (8002d5c <aci_gatt_tx_pool_available_event+0x28>)
 8002d50:	601a      	str	r2, [r3, #0]
} /* end aci_gatt_tx_pool_available_event() */
 8002d52:	46c0      	nop			@ (mov r8, r8)
 8002d54:	46bd      	mov	sp, r7
 8002d56:	b002      	add	sp, #8
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	46c0      	nop			@ (mov r8, r8)
 8002d5c:	20000000 	.word	0x20000000
 8002d60:	ffff7fff 	.word	0xffff7fff

08002d64 <aci_att_exchange_mtu_resp_event>:
 * Output         : See file bluenrg1_events.h
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void aci_att_exchange_mtu_resp_event(uint16_t Connection_Handle,
                                     uint16_t Server_RX_MTU)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	0002      	movs	r2, r0
 8002d6c:	1dbb      	adds	r3, r7, #6
 8002d6e:	801a      	strh	r2, [r3, #0]
 8002d70:	1d3b      	adds	r3, r7, #4
 8002d72:	1c0a      	adds	r2, r1, #0
 8002d74:	801a      	strh	r2, [r3, #0]
  PRINT_DBG("aci_att_exchange_mtu_resp_event: Server_RX_MTU=%d\r\n", Server_RX_MTU);
 8002d76:	1d3b      	adds	r3, r7, #4
 8002d78:	881a      	ldrh	r2, [r3, #0]
 8002d7a:	4b14      	ldr	r3, [pc, #80]	@ (8002dcc <aci_att_exchange_mtu_resp_event+0x68>)
 8002d7c:	0011      	movs	r1, r2
 8002d7e:	0018      	movs	r0, r3
 8002d80:	f00a fbd2 	bl	800d528 <iprintf>

  if (Server_RX_MTU <= CLIENT_MAX_MTU_SIZE) {
 8002d84:	1d3b      	adds	r3, r7, #4
 8002d86:	881b      	ldrh	r3, [r3, #0]
 8002d88:	2b9e      	cmp	r3, #158	@ 0x9e
 8002d8a:	d806      	bhi.n	8002d9a <aci_att_exchange_mtu_resp_event+0x36>
    write_char_len = Server_RX_MTU - 3;
 8002d8c:	1d3b      	adds	r3, r7, #4
 8002d8e:	881b      	ldrh	r3, [r3, #0]
 8002d90:	3b03      	subs	r3, #3
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	4b0e      	ldr	r3, [pc, #56]	@ (8002dd0 <aci_att_exchange_mtu_resp_event+0x6c>)
 8002d96:	801a      	strh	r2, [r3, #0]
 8002d98:	e002      	b.n	8002da0 <aci_att_exchange_mtu_resp_event+0x3c>
  }
  else {
    write_char_len = CLIENT_MAX_MTU_SIZE - 3;
 8002d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8002dd0 <aci_att_exchange_mtu_resp_event+0x6c>)
 8002d9c:	229b      	movs	r2, #155	@ 0x9b
 8002d9e:	801a      	strh	r2, [r3, #0]
  }

  if ((mtu_exchanged_wait == 0) || ((mtu_exchanged_wait == 1))) {
 8002da0:	4b0c      	ldr	r3, [pc, #48]	@ (8002dd4 <aci_att_exchange_mtu_resp_event+0x70>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d003      	beq.n	8002db0 <aci_att_exchange_mtu_resp_event+0x4c>
 8002da8:	4b0a      	ldr	r3, [pc, #40]	@ (8002dd4 <aci_att_exchange_mtu_resp_event+0x70>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d109      	bne.n	8002dc4 <aci_att_exchange_mtu_resp_event+0x60>
    /**
     * The aci_att_exchange_mtu_resp_event is received also if the
     * aci_gatt_exchange_config is called by the other peer.
     * Here we manage this case.
     */
    if (mtu_exchanged_wait == 0) {
 8002db0:	4b08      	ldr	r3, [pc, #32]	@ (8002dd4 <aci_att_exchange_mtu_resp_event+0x70>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d102      	bne.n	8002dbe <aci_att_exchange_mtu_resp_event+0x5a>
      mtu_exchanged_wait = 2;
 8002db8:	4b06      	ldr	r3, [pc, #24]	@ (8002dd4 <aci_att_exchange_mtu_resp_event+0x70>)
 8002dba:	2202      	movs	r2, #2
 8002dbc:	701a      	strb	r2, [r3, #0]
    }
    mtu_exchanged = 1;
 8002dbe:	4b06      	ldr	r3, [pc, #24]	@ (8002dd8 <aci_att_exchange_mtu_resp_event+0x74>)
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	701a      	strb	r2, [r3, #0]
  }
}
 8002dc4:	46c0      	nop			@ (mov r8, r8)
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	b002      	add	sp, #8
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	0800fa14 	.word	0x0800fa14
 8002dd0:	20000006 	.word	0x20000006
 8002dd4:	2000023d 	.word	0x2000023d
 8002dd8:	2000023c 	.word	0x2000023c

08002ddc <Add_Sample_Service>:
* Description    : Add the 'Accelerometer' service.
* Input          : None
* Return         : Status.
*******************************************************************************/
uint8_t Add_Sample_Service(void)
{
 8002ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dde:	b095      	sub	sp, #84	@ 0x54
 8002de0:	af06      	add	r7, sp, #24
  /**
   * Number of attribute records that can be added to this service
   * For this service it is given by:
   * 1 (fixed value) + 3 (for characteristic with CHAR_PROP_NOTIFY) + 2 (for characteristic with CHAR_PROP_WRITE)
   */
  uint8_t max_attribute_records = 1+3+2;
 8002de2:	2637      	movs	r6, #55	@ 0x37
 8002de4:	19bb      	adds	r3, r7, r6
 8002de6:	2206      	movs	r2, #6
 8002de8:	701a      	strb	r2, [r3, #0]
  D973F2E0-B19E-11E2-9E96-0800200C9A66
  D973F2E1-B19E-11E2-9E96-0800200C9A66
  D973F2E2-B19E-11E2-9E96-0800200C9A66
  */

  const uint8_t uuid[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe0,0xf2,0x73,0xd9};
 8002dea:	2524      	movs	r5, #36	@ 0x24
 8002dec:	197b      	adds	r3, r7, r5
 8002dee:	4a42      	ldr	r2, [pc, #264]	@ (8002ef8 <Add_Sample_Service+0x11c>)
 8002df0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002df2:	c313      	stmia	r3!, {r0, r1, r4}
 8002df4:	6812      	ldr	r2, [r2, #0]
 8002df6:	601a      	str	r2, [r3, #0]
  const uint8_t charUuidTX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 8002df8:	2314      	movs	r3, #20
 8002dfa:	18fb      	adds	r3, r7, r3
 8002dfc:	4a3f      	ldr	r2, [pc, #252]	@ (8002efc <Add_Sample_Service+0x120>)
 8002dfe:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002e00:	c313      	stmia	r3!, {r0, r1, r4}
 8002e02:	6812      	ldr	r2, [r2, #0]
 8002e04:	601a      	str	r2, [r3, #0]
  const uint8_t charUuidRX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 8002e06:	1d3b      	adds	r3, r7, #4
 8002e08:	4a3d      	ldr	r2, [pc, #244]	@ (8002f00 <Add_Sample_Service+0x124>)
 8002e0a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002e0c:	c313      	stmia	r3!, {r0, r1, r4}
 8002e0e:	6812      	ldr	r2, [r2, #0]
 8002e10:	601a      	str	r2, [r3, #0]

  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8002e12:	4b3c      	ldr	r3, [pc, #240]	@ (8002f04 <Add_Sample_Service+0x128>)
 8002e14:	197a      	adds	r2, r7, r5
 8002e16:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002e18:	c313      	stmia	r3!, {r0, r1, r4}
 8002e1a:	6812      	ldr	r2, [r2, #0]
 8002e1c:	601a      	str	r2, [r3, #0]

  ret = aci_gatt_add_service(UUID_TYPE_128, &service_uuid, PRIMARY_SERVICE, max_attribute_records, &sampleServHandle);
 8002e1e:	2536      	movs	r5, #54	@ 0x36
 8002e20:	197c      	adds	r4, r7, r5
 8002e22:	19bb      	adds	r3, r7, r6
 8002e24:	781a      	ldrb	r2, [r3, #0]
 8002e26:	4937      	ldr	r1, [pc, #220]	@ (8002f04 <Add_Sample_Service+0x128>)
 8002e28:	4b37      	ldr	r3, [pc, #220]	@ (8002f08 <Add_Sample_Service+0x12c>)
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	0013      	movs	r3, r2
 8002e2e:	2201      	movs	r2, #1
 8002e30:	2002      	movs	r0, #2
 8002e32:	f008 fe99 	bl	800bb68 <aci_gatt_add_service>
 8002e36:	0003      	movs	r3, r0
 8002e38:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8002e3a:	197b      	adds	r3, r7, r5
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d14c      	bne.n	8002edc <Add_Sample_Service+0x100>

  BLUENRG_memcpy(&char_uuid.Char_UUID_128, charUuidTX, 16);
 8002e42:	4b32      	ldr	r3, [pc, #200]	@ (8002f0c <Add_Sample_Service+0x130>)
 8002e44:	2214      	movs	r2, #20
 8002e46:	18ba      	adds	r2, r7, r2
 8002e48:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002e4a:	c313      	stmia	r3!, {r0, r1, r4}
 8002e4c:	6812      	ldr	r2, [r2, #0]
 8002e4e:	601a      	str	r2, [r3, #0]
  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, &char_uuid, CHAR_VALUE_LENGTH, CHAR_PROP_NOTIFY, ATTR_PERMISSION_NONE, 0,
 8002e50:	4b2d      	ldr	r3, [pc, #180]	@ (8002f08 <Add_Sample_Service+0x12c>)
 8002e52:	8818      	ldrh	r0, [r3, #0]
 8002e54:	197c      	adds	r4, r7, r5
 8002e56:	4a2d      	ldr	r2, [pc, #180]	@ (8002f0c <Add_Sample_Service+0x130>)
 8002e58:	4b2d      	ldr	r3, [pc, #180]	@ (8002f10 <Add_Sample_Service+0x134>)
 8002e5a:	9305      	str	r3, [sp, #20]
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	9304      	str	r3, [sp, #16]
 8002e60:	2310      	movs	r3, #16
 8002e62:	9303      	str	r3, [sp, #12]
 8002e64:	2300      	movs	r3, #0
 8002e66:	9302      	str	r3, [sp, #8]
 8002e68:	2300      	movs	r3, #0
 8002e6a:	9301      	str	r3, [sp, #4]
 8002e6c:	2310      	movs	r3, #16
 8002e6e:	9300      	str	r3, [sp, #0]
 8002e70:	233f      	movs	r3, #63	@ 0x3f
 8002e72:	2102      	movs	r1, #2
 8002e74:	f008 ff66 	bl	800bd44 <aci_gatt_add_char>
 8002e78:	0003      	movs	r3, r0
 8002e7a:	7023      	strb	r3, [r4, #0]
                16, 1, &TXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8002e7c:	197b      	adds	r3, r7, r5
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d12d      	bne.n	8002ee0 <Add_Sample_Service+0x104>

  BLUENRG_memcpy(&char_uuid.Char_UUID_128, charUuidRX, 16);
 8002e84:	4b21      	ldr	r3, [pc, #132]	@ (8002f0c <Add_Sample_Service+0x130>)
 8002e86:	1d3a      	adds	r2, r7, #4
 8002e88:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002e8a:	c313      	stmia	r3!, {r0, r1, r4}
 8002e8c:	6812      	ldr	r2, [r2, #0]
 8002e8e:	601a      	str	r2, [r3, #0]
  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, &char_uuid, CHAR_VALUE_LENGTH, CHAR_PROP_WRITE|CHAR_PROP_WRITE_WITHOUT_RESP, ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE,
 8002e90:	4b1d      	ldr	r3, [pc, #116]	@ (8002f08 <Add_Sample_Service+0x12c>)
 8002e92:	8818      	ldrh	r0, [r3, #0]
 8002e94:	197c      	adds	r4, r7, r5
 8002e96:	4a1d      	ldr	r2, [pc, #116]	@ (8002f0c <Add_Sample_Service+0x130>)
 8002e98:	4b1e      	ldr	r3, [pc, #120]	@ (8002f14 <Add_Sample_Service+0x138>)
 8002e9a:	9305      	str	r3, [sp, #20]
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	9304      	str	r3, [sp, #16]
 8002ea0:	2310      	movs	r3, #16
 8002ea2:	9303      	str	r3, [sp, #12]
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	9302      	str	r3, [sp, #8]
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	9301      	str	r3, [sp, #4]
 8002eac:	230c      	movs	r3, #12
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	233f      	movs	r3, #63	@ 0x3f
 8002eb2:	2102      	movs	r1, #2
 8002eb4:	f008 ff46 	bl	800bd44 <aci_gatt_add_char>
 8002eb8:	0003      	movs	r3, r0
 8002eba:	7023      	strb	r3, [r4, #0]
                16, 1, &RXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8002ebc:	197b      	adds	r3, r7, r5
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10f      	bne.n	8002ee4 <Add_Sample_Service+0x108>

  PRINT_DBG("Sample Service added.\r\nTX Char Handle %04X, RX Char Handle %04X\r\n", TXCharHandle, RXCharHandle);
 8002ec4:	4b12      	ldr	r3, [pc, #72]	@ (8002f10 <Add_Sample_Service+0x134>)
 8002ec6:	881b      	ldrh	r3, [r3, #0]
 8002ec8:	0019      	movs	r1, r3
 8002eca:	4b12      	ldr	r3, [pc, #72]	@ (8002f14 <Add_Sample_Service+0x138>)
 8002ecc:	881b      	ldrh	r3, [r3, #0]
 8002ece:	001a      	movs	r2, r3
 8002ed0:	4b11      	ldr	r3, [pc, #68]	@ (8002f18 <Add_Sample_Service+0x13c>)
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	f00a fb28 	bl	800d528 <iprintf>
  return BLE_STATUS_SUCCESS;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	e009      	b.n	8002ef0 <Add_Sample_Service+0x114>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8002edc:	46c0      	nop			@ (mov r8, r8)
 8002ede:	e002      	b.n	8002ee6 <Add_Sample_Service+0x10a>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8002ee0:	46c0      	nop			@ (mov r8, r8)
 8002ee2:	e000      	b.n	8002ee6 <Add_Sample_Service+0x10a>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8002ee4:	46c0      	nop			@ (mov r8, r8)

fail:
  PRINT_DBG("Error while adding Sample service.\r\n");
 8002ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8002f1c <Add_Sample_Service+0x140>)
 8002ee8:	0018      	movs	r0, r3
 8002eea:	f00a fb8d 	bl	800d608 <puts>
  return BLE_STATUS_ERROR ;
 8002eee:	2347      	movs	r3, #71	@ 0x47
}
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	b00f      	add	sp, #60	@ 0x3c
 8002ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ef8:	0800fab0 	.word	0x0800fab0
 8002efc:	0800fac0 	.word	0x0800fac0
 8002f00:	0800fad0 	.word	0x0800fad0
 8002f04:	20000284 	.word	0x20000284
 8002f08:	2000027c 	.word	0x2000027c
 8002f0c:	20000294 	.word	0x20000294
 8002f10:	2000027e 	.word	0x2000027e
 8002f14:	20000280 	.word	0x20000280
 8002f18:	0800fa48 	.word	0x0800fa48
 8002f1c:	0800fa8c 	.word	0x0800fa8c

08002f20 <APP_UserEvtRx>:

void APP_UserEvtRx(void *pData)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b088      	sub	sp, #32
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t i;

  hci_spi_pckt *hci_pckt = (hci_spi_pckt *)pData;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	61bb      	str	r3, [r7, #24]

  if(hci_pckt->type == HCI_EVENT_PKT)
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	2b04      	cmp	r3, #4
 8002f32:	d000      	beq.n	8002f36 <APP_UserEvtRx+0x16>
 8002f34:	e069      	b.n	800300a <APP_UserEvtRx+0xea>
  {
    hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	3301      	adds	r3, #1
 8002f3a:	617b      	str	r3, [r7, #20]

    if(event_pckt->evt == EVT_LE_META_EVENT)
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	2b3e      	cmp	r3, #62	@ 0x3e
 8002f42:	d11f      	bne.n	8002f84 <APP_UserEvtRx+0x64>
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	3302      	adds	r3, #2
 8002f48:	60fb      	str	r3, [r7, #12]

      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++)
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	61fb      	str	r3, [r7, #28]
 8002f4e:	e015      	b.n	8002f7c <APP_UserEvtRx+0x5c>
      {
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	0019      	movs	r1, r3
 8002f56:	4b2f      	ldr	r3, [pc, #188]	@ (8003014 <APP_UserEvtRx+0xf4>)
 8002f58:	69fa      	ldr	r2, [r7, #28]
 8002f5a:	00d2      	lsls	r2, r2, #3
 8002f5c:	5ad3      	ldrh	r3, [r2, r3]
 8002f5e:	4299      	cmp	r1, r3
 8002f60:	d109      	bne.n	8002f76 <APP_UserEvtRx+0x56>
        {
          hci_le_meta_events_table[i].process((void *)evt->data);
 8002f62:	4a2c      	ldr	r2, [pc, #176]	@ (8003014 <APP_UserEvtRx+0xf4>)
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	18d3      	adds	r3, r2, r3
 8002f6a:	3304      	adds	r3, #4
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	3201      	adds	r2, #1
 8002f72:	0010      	movs	r0, r2
 8002f74:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++)
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	61fb      	str	r3, [r7, #28]
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	2b09      	cmp	r3, #9
 8002f80:	d9e6      	bls.n	8002f50 <APP_UserEvtRx+0x30>
          hci_events_table[i].process((void *)event_pckt->data);
        }
      }
    }
  }
}
 8002f82:	e042      	b.n	800300a <APP_UserEvtRx+0xea>
    else if(event_pckt->evt == EVT_VENDOR)
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	2bff      	cmp	r3, #255	@ 0xff
 8002f8a:	d122      	bne.n	8002fd2 <APP_UserEvtRx+0xb2>
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	3302      	adds	r3, #2
 8002f90:	613b      	str	r3, [r7, #16]
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 8002f92:	2300      	movs	r3, #0
 8002f94:	61fb      	str	r3, [r7, #28]
 8002f96:	e018      	b.n	8002fca <APP_UserEvtRx+0xaa>
        if (blue_evt->ecode == hci_vendor_specific_events_table[i].evt_code)
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	781a      	ldrb	r2, [r3, #0]
 8002f9c:	785b      	ldrb	r3, [r3, #1]
 8002f9e:	021b      	lsls	r3, r3, #8
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	4b1c      	ldr	r3, [pc, #112]	@ (8003018 <APP_UserEvtRx+0xf8>)
 8002fa6:	69f9      	ldr	r1, [r7, #28]
 8002fa8:	00c9      	lsls	r1, r1, #3
 8002faa:	5acb      	ldrh	r3, [r1, r3]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d109      	bne.n	8002fc4 <APP_UserEvtRx+0xa4>
          hci_vendor_specific_events_table[i].process((void *)blue_evt->data);
 8002fb0:	4a19      	ldr	r2, [pc, #100]	@ (8003018 <APP_UserEvtRx+0xf8>)
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	18d3      	adds	r3, r2, r3
 8002fb8:	3304      	adds	r3, #4
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	3202      	adds	r2, #2
 8002fc0:	0010      	movs	r0, r2
 8002fc2:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	61fb      	str	r3, [r7, #28]
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	2b2a      	cmp	r3, #42	@ 0x2a
 8002fce:	d9e3      	bls.n	8002f98 <APP_UserEvtRx+0x78>
}
 8002fd0:	e01b      	b.n	800300a <APP_UserEvtRx+0xea>
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	61fb      	str	r3, [r7, #28]
 8002fd6:	e015      	b.n	8003004 <APP_UserEvtRx+0xe4>
        if (event_pckt->evt == hci_events_table[i].evt_code)
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	0019      	movs	r1, r3
 8002fde:	4b0f      	ldr	r3, [pc, #60]	@ (800301c <APP_UserEvtRx+0xfc>)
 8002fe0:	69fa      	ldr	r2, [r7, #28]
 8002fe2:	00d2      	lsls	r2, r2, #3
 8002fe4:	5ad3      	ldrh	r3, [r2, r3]
 8002fe6:	4299      	cmp	r1, r3
 8002fe8:	d109      	bne.n	8002ffe <APP_UserEvtRx+0xde>
          hci_events_table[i].process((void *)event_pckt->data);
 8002fea:	4a0c      	ldr	r2, [pc, #48]	@ (800301c <APP_UserEvtRx+0xfc>)
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	18d3      	adds	r3, r2, r3
 8002ff2:	3304      	adds	r3, #4
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	3202      	adds	r2, #2
 8002ffa:	0010      	movs	r0, r2
 8002ffc:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	3301      	adds	r3, #1
 8003002:	61fb      	str	r3, [r7, #28]
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	2b06      	cmp	r3, #6
 8003008:	d9e6      	bls.n	8002fd8 <APP_UserEvtRx+0xb8>
}
 800300a:	46c0      	nop			@ (mov r8, r8)
 800300c:	46bd      	mov	sp, r7
 800300e:	b008      	add	sp, #32
 8003010:	bd80      	pop	{r7, pc}
 8003012:	46c0      	nop			@ (mov r8, r8)
 8003014:	08010598 	.word	0x08010598
 8003018:	080105e8 	.word	0x080105e8
 800301c:	08010560 	.word	0x08010560

08003020 <HCI_TL_SPI_Enable_IRQ>:
 * @brief  Enable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Enable_IRQ(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8003024:	2005      	movs	r0, #5
 8003026:	f002 ffce 	bl	8005fc6 <HAL_NVIC_EnableIRQ>
}
 800302a:	46c0      	nop			@ (mov r8, r8)
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <HCI_TL_SPI_Disable_IRQ>:
 * @brief  Disable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Disable_IRQ(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8003034:	2005      	movs	r0, #5
 8003036:	f002 ffd6 	bl	8005fe6 <HAL_NVIC_DisableIRQ>
}
 800303a:	46c0      	nop			@ (mov r8, r8)
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8003040:	b590      	push	{r4, r7, lr}
 8003042:	b089      	sub	sp, #36	@ 0x24
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003048:	4b28      	ldr	r3, [pc, #160]	@ (80030ec <HCI_TL_SPI_Init+0xac>)
 800304a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800304c:	4b27      	ldr	r3, [pc, #156]	@ (80030ec <HCI_TL_SPI_Init+0xac>)
 800304e:	2101      	movs	r1, #1
 8003050:	430a      	orrs	r2, r1
 8003052:	635a      	str	r2, [r3, #52]	@ 0x34
 8003054:	4b25      	ldr	r3, [pc, #148]	@ (80030ec <HCI_TL_SPI_Init+0xac>)
 8003056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003058:	2201      	movs	r2, #1
 800305a:	4013      	ands	r3, r2
 800305c:	60bb      	str	r3, [r7, #8]
 800305e:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8003060:	240c      	movs	r4, #12
 8003062:	193b      	adds	r3, r7, r4
 8003064:	2201      	movs	r2, #1
 8003066:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003068:	193b      	adds	r3, r7, r4
 800306a:	2288      	movs	r2, #136	@ 0x88
 800306c:	0352      	lsls	r2, r2, #13
 800306e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003070:	193b      	adds	r3, r7, r4
 8003072:	2200      	movs	r2, #0
 8003074:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8003076:	193a      	adds	r2, r7, r4
 8003078:	23a0      	movs	r3, #160	@ 0xa0
 800307a:	05db      	lsls	r3, r3, #23
 800307c:	0011      	movs	r1, r2
 800307e:	0018      	movs	r0, r3
 8003080:	f003 faae 	bl	80065e0 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8003084:	193b      	adds	r3, r7, r4
 8003086:	2210      	movs	r2, #16
 8003088:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800308a:	193b      	adds	r3, r7, r4
 800308c:	2201      	movs	r2, #1
 800308e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003090:	193b      	adds	r3, r7, r4
 8003092:	2200      	movs	r2, #0
 8003094:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003096:	193b      	adds	r3, r7, r4
 8003098:	2200      	movs	r2, #0
 800309a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 800309c:	193b      	adds	r3, r7, r4
 800309e:	4a14      	ldr	r2, [pc, #80]	@ (80030f0 <HCI_TL_SPI_Init+0xb0>)
 80030a0:	0019      	movs	r1, r3
 80030a2:	0010      	movs	r0, r2
 80030a4:	f003 fa9c 	bl	80065e0 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 80030a8:	0021      	movs	r1, r4
 80030aa:	187b      	adds	r3, r7, r1
 80030ac:	2202      	movs	r2, #2
 80030ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030b0:	187b      	adds	r3, r7, r1
 80030b2:	2201      	movs	r2, #1
 80030b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b6:	187b      	adds	r3, r7, r1
 80030b8:	2200      	movs	r2, #0
 80030ba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030bc:	187b      	adds	r3, r7, r1
 80030be:	2200      	movs	r2, #0
 80030c0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 80030c2:	187a      	adds	r2, r7, r1
 80030c4:	23a0      	movs	r3, #160	@ 0xa0
 80030c6:	05db      	lsls	r3, r3, #23
 80030c8:	0011      	movs	r1, r2
 80030ca:	0018      	movs	r0, r3
 80030cc:	f003 fa88 	bl	80065e0 <HAL_GPIO_Init>
  /* Deselect CS PIN for BlueNRG at startup to avoid spurious commands */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80030d0:	23a0      	movs	r3, #160	@ 0xa0
 80030d2:	05db      	lsls	r3, r3, #23
 80030d4:	2201      	movs	r2, #1
 80030d6:	2102      	movs	r1, #2
 80030d8:	0018      	movs	r0, r3
 80030da:	f003 fcd2 	bl	8006a82 <HAL_GPIO_WritePin>

  return BSP_SPI1_Init();
 80030de:	f001 fb2b 	bl	8004738 <BSP_SPI1_Init>
 80030e2:	0003      	movs	r3, r0
}
 80030e4:	0018      	movs	r0, r3
 80030e6:	46bd      	mov	sp, r7
 80030e8:	b009      	add	sp, #36	@ 0x24
 80030ea:	bd90      	pop	{r4, r7, pc}
 80030ec:	40021000 	.word	0x40021000
 80030f0:	50000800 	.word	0x50000800

080030f4 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 80030f8:	23a0      	movs	r3, #160	@ 0xa0
 80030fa:	05db      	lsls	r3, r3, #23
 80030fc:	2101      	movs	r1, #1
 80030fe:	0018      	movs	r0, r3
 8003100:	f003 fbd2 	bl	80068a8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8003104:	23a0      	movs	r3, #160	@ 0xa0
 8003106:	05db      	lsls	r3, r3, #23
 8003108:	2102      	movs	r1, #2
 800310a:	0018      	movs	r0, r3
 800310c:	f003 fbcc 	bl	80068a8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8003110:	4b04      	ldr	r3, [pc, #16]	@ (8003124 <HCI_TL_SPI_DeInit+0x30>)
 8003112:	2110      	movs	r1, #16
 8003114:	0018      	movs	r0, r3
 8003116:	f003 fbc7 	bl	80068a8 <HAL_GPIO_DeInit>
  return 0;
 800311a:	2300      	movs	r3, #0
}
 800311c:	0018      	movs	r0, r3
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	46c0      	nop			@ (mov r8, r8)
 8003124:	50000800 	.word	0x50000800

08003128 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800312c:	23a0      	movs	r3, #160	@ 0xa0
 800312e:	05db      	lsls	r3, r3, #23
 8003130:	2201      	movs	r2, #1
 8003132:	2102      	movs	r1, #2
 8003134:	0018      	movs	r0, r3
 8003136:	f003 fca4 	bl	8006a82 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 800313a:	4b0b      	ldr	r3, [pc, #44]	@ (8003168 <HCI_TL_SPI_Reset+0x40>)
 800313c:	2200      	movs	r2, #0
 800313e:	2110      	movs	r1, #16
 8003140:	0018      	movs	r0, r3
 8003142:	f003 fc9e 	bl	8006a82 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8003146:	2005      	movs	r0, #5
 8003148:	f001 ffa6 	bl	8005098 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 800314c:	4b06      	ldr	r3, [pc, #24]	@ (8003168 <HCI_TL_SPI_Reset+0x40>)
 800314e:	2201      	movs	r2, #1
 8003150:	2110      	movs	r1, #16
 8003152:	0018      	movs	r0, r3
 8003154:	f003 fc95 	bl	8006a82 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8003158:	2005      	movs	r0, #5
 800315a:	f001 ff9d 	bl	8005098 <HAL_Delay>
  return 0;
 800315e:	2300      	movs	r3, #0
}
 8003160:	0018      	movs	r0, r3
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	46c0      	nop			@ (mov r8, r8)
 8003168:	50000800 	.word	0x50000800

0800316c <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 800316c:	b5b0      	push	{r4, r5, r7, lr}
 800316e:	b088      	sub	sp, #32
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	000a      	movs	r2, r1
 8003176:	1cbb      	adds	r3, r7, #2
 8003178:	801a      	strh	r2, [r3, #0]
  uint16_t byte_count;
  uint8_t len = 0;
 800317a:	231d      	movs	r3, #29
 800317c:	18fb      	adds	r3, r7, r3
 800317e:	2200      	movs	r2, #0
 8003180:	701a      	strb	r2, [r3, #0]
  uint8_t char_00 = 0x00;
 8003182:	2317      	movs	r3, #23
 8003184:	18fb      	adds	r3, r7, r3
 8003186:	2200      	movs	r2, #0
 8003188:	701a      	strb	r2, [r3, #0]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 800318a:	2510      	movs	r5, #16
 800318c:	197b      	adds	r3, r7, r5
 800318e:	220b      	movs	r2, #11
 8003190:	601a      	str	r2, [r3, #0]
 8003192:	2200      	movs	r2, #0
 8003194:	711a      	strb	r2, [r3, #4]
  uint8_t header_slave[HEADER_SIZE];

  HCI_TL_SPI_Disable_IRQ();
 8003196:	f7ff ff4b 	bl	8003030 <HCI_TL_SPI_Disable_IRQ>

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 800319a:	23a0      	movs	r3, #160	@ 0xa0
 800319c:	05db      	lsls	r3, r3, #23
 800319e:	2200      	movs	r2, #0
 80031a0:	2102      	movs	r1, #2
 80031a2:	0018      	movs	r0, r3
 80031a4:	f003 fc6d 	bl	8006a82 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80031a8:	2408      	movs	r4, #8
 80031aa:	1939      	adds	r1, r7, r4
 80031ac:	197b      	adds	r3, r7, r5
 80031ae:	2205      	movs	r2, #5
 80031b0:	0018      	movs	r0, r3
 80031b2:	f001 faf1 	bl	8004798 <BSP_SPI1_SendRecv>

  /* device is ready */
  byte_count = (header_slave[4] << 8)| header_slave[3];
 80031b6:	0021      	movs	r1, r4
 80031b8:	187b      	adds	r3, r7, r1
 80031ba:	791b      	ldrb	r3, [r3, #4]
 80031bc:	b21b      	sxth	r3, r3
 80031be:	021b      	lsls	r3, r3, #8
 80031c0:	b21a      	sxth	r2, r3
 80031c2:	187b      	adds	r3, r7, r1
 80031c4:	78db      	ldrb	r3, [r3, #3]
 80031c6:	b21b      	sxth	r3, r3
 80031c8:	4313      	orrs	r3, r2
 80031ca:	b21a      	sxth	r2, r3
 80031cc:	211e      	movs	r1, #30
 80031ce:	187b      	adds	r3, r7, r1
 80031d0:	801a      	strh	r2, [r3, #0]

  if(byte_count > 0)
 80031d2:	187b      	adds	r3, r7, r1
 80031d4:	881b      	ldrh	r3, [r3, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d02d      	beq.n	8003236 <HCI_TL_SPI_Receive+0xca>
  {

    /* avoid to read more data than the size of the buffer */
    if (byte_count > size)
 80031da:	187a      	adds	r2, r7, r1
 80031dc:	1cbb      	adds	r3, r7, #2
 80031de:	8812      	ldrh	r2, [r2, #0]
 80031e0:	881b      	ldrh	r3, [r3, #0]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d903      	bls.n	80031ee <HCI_TL_SPI_Receive+0x82>
    {
      byte_count = size;
 80031e6:	187b      	adds	r3, r7, r1
 80031e8:	1cba      	adds	r2, r7, #2
 80031ea:	8812      	ldrh	r2, [r2, #0]
 80031ec:	801a      	strh	r2, [r3, #0]
    }

    for(len = 0; len < byte_count; len++)
 80031ee:	231d      	movs	r3, #29
 80031f0:	18fb      	adds	r3, r7, r3
 80031f2:	2200      	movs	r2, #0
 80031f4:	701a      	strb	r2, [r3, #0]
 80031f6:	e015      	b.n	8003224 <HCI_TL_SPI_Receive+0xb8>
    {
      BSP_SPI1_SendRecv(&char_00, (uint8_t*)&read_char, 1);
 80031f8:	2416      	movs	r4, #22
 80031fa:	1939      	adds	r1, r7, r4
 80031fc:	2317      	movs	r3, #23
 80031fe:	18fb      	adds	r3, r7, r3
 8003200:	2201      	movs	r2, #1
 8003202:	0018      	movs	r0, r3
 8003204:	f001 fac8 	bl	8004798 <BSP_SPI1_SendRecv>
      buffer[len] = read_char;
 8003208:	211d      	movs	r1, #29
 800320a:	187b      	adds	r3, r7, r1
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	18d3      	adds	r3, r2, r3
 8003212:	193a      	adds	r2, r7, r4
 8003214:	7812      	ldrb	r2, [r2, #0]
 8003216:	b2d2      	uxtb	r2, r2
 8003218:	701a      	strb	r2, [r3, #0]
    for(len = 0; len < byte_count; len++)
 800321a:	187b      	adds	r3, r7, r1
 800321c:	781a      	ldrb	r2, [r3, #0]
 800321e:	187b      	adds	r3, r7, r1
 8003220:	3201      	adds	r2, #1
 8003222:	701a      	strb	r2, [r3, #0]
 8003224:	231d      	movs	r3, #29
 8003226:	18fb      	adds	r3, r7, r3
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	b29b      	uxth	r3, r3
 800322c:	221e      	movs	r2, #30
 800322e:	18ba      	adds	r2, r7, r2
 8003230:	8812      	ldrh	r2, [r2, #0]
 8003232:	429a      	cmp	r2, r3
 8003234:	d8e0      	bhi.n	80031f8 <HCI_TL_SPI_Receive+0x8c>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  uint32_t tickstart = HAL_GetTick();
 8003236:	f001 ff25 	bl	8005084 <HAL_GetTick>
 800323a:	0003      	movs	r3, r0
 800323c:	61bb      	str	r3, [r7, #24]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 800323e:	e007      	b.n	8003250 <HCI_TL_SPI_Receive+0xe4>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 8003240:	23a0      	movs	r3, #160	@ 0xa0
 8003242:	05db      	lsls	r3, r3, #23
 8003244:	2101      	movs	r1, #1
 8003246:	0018      	movs	r0, r3
 8003248:	f003 fbfe 	bl	8006a48 <HAL_GPIO_ReadPin>
 800324c:	1e03      	subs	r3, r0, #0
 800324e:	d009      	beq.n	8003264 <HCI_TL_SPI_Receive+0xf8>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8003250:	f001 ff18 	bl	8005084 <HAL_GetTick>
 8003254:	0002      	movs	r2, r0
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	1ad2      	subs	r2, r2, r3
 800325a:	23fa      	movs	r3, #250	@ 0xfa
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	429a      	cmp	r2, r3
 8003260:	d3ee      	bcc.n	8003240 <HCI_TL_SPI_Receive+0xd4>
 8003262:	e000      	b.n	8003266 <HCI_TL_SPI_Receive+0xfa>
      break;
 8003264:	46c0      	nop			@ (mov r8, r8)
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 8003266:	f7ff fedb 	bl	8003020 <HCI_TL_SPI_Enable_IRQ>

  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800326a:	23a0      	movs	r3, #160	@ 0xa0
 800326c:	05db      	lsls	r3, r3, #23
 800326e:	2201      	movs	r2, #1
 8003270:	2102      	movs	r1, #2
 8003272:	0018      	movs	r0, r3
 8003274:	f003 fc05 	bl	8006a82 <HAL_GPIO_WritePin>

  return len;
 8003278:	231d      	movs	r3, #29
 800327a:	18fb      	adds	r3, r7, r3
 800327c:	781b      	ldrb	r3, [r3, #0]
}
 800327e:	0018      	movs	r0, r3
 8003280:	46bd      	mov	sp, r7
 8003282:	b008      	add	sp, #32
 8003284:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003288 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8003288:	b590      	push	{r4, r7, lr}
 800328a:	b08b      	sub	sp, #44	@ 0x2c
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	000a      	movs	r2, r1
 8003292:	1cbb      	adds	r3, r7, #2
 8003294:	801a      	strh	r2, [r3, #0]
  int32_t result;
  uint16_t rx_bytes;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8003296:	2314      	movs	r3, #20
 8003298:	18fb      	adds	r3, r7, r3
 800329a:	220a      	movs	r2, #10
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	2200      	movs	r2, #0
 80032a0:	711a      	strb	r2, [r3, #4]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 80032a2:	f001 feef 	bl	8005084 <HAL_GetTick>
 80032a6:	0003      	movs	r3, r0
 80032a8:	623b      	str	r3, [r7, #32]

  HCI_TL_SPI_Disable_IRQ();
 80032aa:	f7ff fec1 	bl	8003030 <HCI_TL_SPI_Disable_IRQ>

  do
  {
    uint32_t tickstart_data_available = HAL_GetTick();
 80032ae:	f001 fee9 	bl	8005084 <HAL_GetTick>
 80032b2:	0003      	movs	r3, r0
 80032b4:	61fb      	str	r3, [r7, #28]

    result = 0;
 80032b6:	2300      	movs	r3, #0
 80032b8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80032ba:	23a0      	movs	r3, #160	@ 0xa0
 80032bc:	05db      	lsls	r3, r3, #23
 80032be:	2200      	movs	r2, #0
 80032c0:	2102      	movs	r1, #2
 80032c2:	0018      	movs	r0, r3
 80032c4:	f003 fbdd 	bl	8006a82 <HAL_GPIO_WritePin>

    /*
     * Wait until BlueNRG-2 is ready.
     * When ready it will raise the IRQ pin.
     */
    while(!IsDataAvailable())
 80032c8:	e00a      	b.n	80032e0 <HCI_TL_SPI_Send+0x58>
    {
      if((HAL_GetTick() - tickstart_data_available) > TIMEOUT_DURATION)
 80032ca:	f001 fedb 	bl	8005084 <HAL_GetTick>
 80032ce:	0002      	movs	r2, r0
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b64      	cmp	r3, #100	@ 0x64
 80032d6:	d903      	bls.n	80032e0 <HCI_TL_SPI_Send+0x58>
      {
        result = -3;
 80032d8:	2303      	movs	r3, #3
 80032da:	425b      	negs	r3, r3
 80032dc:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80032de:	e003      	b.n	80032e8 <HCI_TL_SPI_Send+0x60>
    while(!IsDataAvailable())
 80032e0:	f000 f86a 	bl	80033b8 <IsDataAvailable>
 80032e4:	1e03      	subs	r3, r0, #0
 80032e6:	d0f0      	beq.n	80032ca <HCI_TL_SPI_Send+0x42>
      }
    }
    if(result == -3)
 80032e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ea:	3303      	adds	r3, #3
 80032ec:	d107      	bne.n	80032fe <HCI_TL_SPI_Send+0x76>
    {
      /* The break causes the exiting from the "while", so the CS line must be released */
      HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80032ee:	23a0      	movs	r3, #160	@ 0xa0
 80032f0:	05db      	lsls	r3, r3, #23
 80032f2:	2201      	movs	r2, #1
 80032f4:	2102      	movs	r1, #2
 80032f6:	0018      	movs	r0, r3
 80032f8:	f003 fbc3 	bl	8006a82 <HAL_GPIO_WritePin>
      break;
 80032fc:	e03b      	b.n	8003376 <HCI_TL_SPI_Send+0xee>
    }

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80032fe:	240c      	movs	r4, #12
 8003300:	1939      	adds	r1, r7, r4
 8003302:	2314      	movs	r3, #20
 8003304:	18fb      	adds	r3, r7, r3
 8003306:	2205      	movs	r2, #5
 8003308:	0018      	movs	r0, r3
 800330a:	f001 fa45 	bl	8004798 <BSP_SPI1_SendRecv>

    rx_bytes = (((uint16_t)header_slave[2])<<8) | ((uint16_t)header_slave[1]);
 800330e:	0021      	movs	r1, r4
 8003310:	187b      	adds	r3, r7, r1
 8003312:	789b      	ldrb	r3, [r3, #2]
 8003314:	b21b      	sxth	r3, r3
 8003316:	021b      	lsls	r3, r3, #8
 8003318:	b21a      	sxth	r2, r3
 800331a:	187b      	adds	r3, r7, r1
 800331c:	785b      	ldrb	r3, [r3, #1]
 800331e:	b21b      	sxth	r3, r3
 8003320:	4313      	orrs	r3, r2
 8003322:	b21a      	sxth	r2, r3
 8003324:	211a      	movs	r1, #26
 8003326:	187b      	adds	r3, r7, r1
 8003328:	801a      	strh	r2, [r3, #0]

    if(rx_bytes >= size)
 800332a:	187a      	adds	r2, r7, r1
 800332c:	1cbb      	adds	r3, r7, #2
 800332e:	8812      	ldrh	r2, [r2, #0]
 8003330:	881b      	ldrh	r3, [r3, #0]
 8003332:	429a      	cmp	r2, r3
 8003334:	d307      	bcc.n	8003346 <HCI_TL_SPI_Send+0xbe>
    {
      /* Buffer is big enough */
      BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8003336:	1cbb      	adds	r3, r7, #2
 8003338:	881a      	ldrh	r2, [r3, #0]
 800333a:	491e      	ldr	r1, [pc, #120]	@ (80033b4 <HCI_TL_SPI_Send+0x12c>)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	0018      	movs	r0, r3
 8003340:	f001 fa2a 	bl	8004798 <BSP_SPI1_SendRecv>
 8003344:	e002      	b.n	800334c <HCI_TL_SPI_Send+0xc4>
    }
    else
    {
      /* Buffer is too small */
      result = -2;
 8003346:	2302      	movs	r3, #2
 8003348:	425b      	negs	r3, r3
 800334a:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800334c:	23a0      	movs	r3, #160	@ 0xa0
 800334e:	05db      	lsls	r3, r3, #23
 8003350:	2201      	movs	r2, #1
 8003352:	2102      	movs	r1, #2
 8003354:	0018      	movs	r0, r3
 8003356:	f003 fb94 	bl	8006a82 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 800335a:	f001 fe93 	bl	8005084 <HAL_GetTick>
 800335e:	0002      	movs	r2, r0
 8003360:	6a3b      	ldr	r3, [r7, #32]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b64      	cmp	r3, #100	@ 0x64
 8003366:	d903      	bls.n	8003370 <HCI_TL_SPI_Send+0xe8>
    {
      result = -3;
 8003368:	2303      	movs	r3, #3
 800336a:	425b      	negs	r3, r3
 800336c:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800336e:	e002      	b.n	8003376 <HCI_TL_SPI_Send+0xee>
    }
  } while(result < 0);
 8003370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003372:	2b00      	cmp	r3, #0
 8003374:	db9b      	blt.n	80032ae <HCI_TL_SPI_Send+0x26>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  tickstart = HAL_GetTick();
 8003376:	f001 fe85 	bl	8005084 <HAL_GetTick>
 800337a:	0003      	movs	r3, r0
 800337c:	623b      	str	r3, [r7, #32]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 800337e:	e007      	b.n	8003390 <HCI_TL_SPI_Send+0x108>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 8003380:	23a0      	movs	r3, #160	@ 0xa0
 8003382:	05db      	lsls	r3, r3, #23
 8003384:	2101      	movs	r1, #1
 8003386:	0018      	movs	r0, r3
 8003388:	f003 fb5e 	bl	8006a48 <HAL_GPIO_ReadPin>
 800338c:	1e03      	subs	r3, r0, #0
 800338e:	d009      	beq.n	80033a4 <HCI_TL_SPI_Send+0x11c>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8003390:	f001 fe78 	bl	8005084 <HAL_GetTick>
 8003394:	0002      	movs	r2, r0
 8003396:	6a3b      	ldr	r3, [r7, #32]
 8003398:	1ad2      	subs	r2, r2, r3
 800339a:	23fa      	movs	r3, #250	@ 0xfa
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	429a      	cmp	r2, r3
 80033a0:	d3ee      	bcc.n	8003380 <HCI_TL_SPI_Send+0xf8>
 80033a2:	e000      	b.n	80033a6 <HCI_TL_SPI_Send+0x11e>
      break;
 80033a4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 80033a6:	f7ff fe3b 	bl	8003020 <HCI_TL_SPI_Enable_IRQ>

  return result;
 80033aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80033ac:	0018      	movs	r0, r3
 80033ae:	46bd      	mov	sp, r7
 80033b0:	b00b      	add	sp, #44	@ 0x2c
 80033b2:	bd90      	pop	{r4, r7, pc}
 80033b4:	200002b0 	.word	0x200002b0

080033b8 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 80033bc:	23a0      	movs	r3, #160	@ 0xa0
 80033be:	05db      	lsls	r3, r3, #23
 80033c0:	2101      	movs	r1, #1
 80033c2:	0018      	movs	r0, r3
 80033c4:	f003 fb40 	bl	8006a48 <HAL_GPIO_ReadPin>
 80033c8:	0003      	movs	r3, r0
 80033ca:	3b01      	subs	r3, #1
 80033cc:	425a      	negs	r2, r3
 80033ce:	4153      	adcs	r3, r2
 80033d0:	b2db      	uxtb	r3, r3
}
 80033d2:	0018      	movs	r0, r3
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b088      	sub	sp, #32
 80033dc:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 80033de:	1d3b      	adds	r3, r7, #4
 80033e0:	4a16      	ldr	r2, [pc, #88]	@ (800343c <hci_tl_lowlevel_init+0x64>)
 80033e2:	601a      	str	r2, [r3, #0]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 80033e4:	1d3b      	adds	r3, r7, #4
 80033e6:	4a16      	ldr	r2, [pc, #88]	@ (8003440 <hci_tl_lowlevel_init+0x68>)
 80033e8:	605a      	str	r2, [r3, #4]
  fops.Send    = HCI_TL_SPI_Send;
 80033ea:	1d3b      	adds	r3, r7, #4
 80033ec:	4a15      	ldr	r2, [pc, #84]	@ (8003444 <hci_tl_lowlevel_init+0x6c>)
 80033ee:	611a      	str	r2, [r3, #16]
  fops.Receive = HCI_TL_SPI_Receive;
 80033f0:	1d3b      	adds	r3, r7, #4
 80033f2:	4a15      	ldr	r2, [pc, #84]	@ (8003448 <hci_tl_lowlevel_init+0x70>)
 80033f4:	60da      	str	r2, [r3, #12]
  fops.Reset   = HCI_TL_SPI_Reset;
 80033f6:	1d3b      	adds	r3, r7, #4
 80033f8:	4a14      	ldr	r2, [pc, #80]	@ (800344c <hci_tl_lowlevel_init+0x74>)
 80033fa:	609a      	str	r2, [r3, #8]
  fops.GetTick = BSP_GetTick;
 80033fc:	1d3b      	adds	r3, r7, #4
 80033fe:	4a14      	ldr	r2, [pc, #80]	@ (8003450 <hci_tl_lowlevel_init+0x78>)
 8003400:	619a      	str	r2, [r3, #24]

  hci_register_io_bus (&fops);
 8003402:	1d3b      	adds	r3, r7, #4
 8003404:	0018      	movs	r0, r3
 8003406:	f008 ffef 	bl	800c3e8 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 800340a:	23c0      	movs	r3, #192	@ 0xc0
 800340c:	04da      	lsls	r2, r3, #19
 800340e:	4b11      	ldr	r3, [pc, #68]	@ (8003454 <hci_tl_lowlevel_init+0x7c>)
 8003410:	0011      	movs	r1, r2
 8003412:	0018      	movs	r0, r3
 8003414:	f003 f888 	bl	8006528 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8003418:	4a0f      	ldr	r2, [pc, #60]	@ (8003458 <hci_tl_lowlevel_init+0x80>)
 800341a:	4b0e      	ldr	r3, [pc, #56]	@ (8003454 <hci_tl_lowlevel_init+0x7c>)
 800341c:	2100      	movs	r1, #0
 800341e:	0018      	movs	r0, r3
 8003420:	f003 f850 	bl	80064c4 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8003424:	2200      	movs	r2, #0
 8003426:	2100      	movs	r1, #0
 8003428:	2005      	movs	r0, #5
 800342a:	f002 fdb7 	bl	8005f9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800342e:	2005      	movs	r0, #5
 8003430:	f002 fdc9 	bl	8005fc6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8003434:	46c0      	nop			@ (mov r8, r8)
 8003436:	46bd      	mov	sp, r7
 8003438:	b008      	add	sp, #32
 800343a:	bd80      	pop	{r7, pc}
 800343c:	08003041 	.word	0x08003041
 8003440:	080030f5 	.word	0x080030f5
 8003444:	08003289 	.word	0x08003289
 8003448:	0800316d 	.word	0x0800316d
 800344c:	08003129 	.word	0x08003129
 8003450:	080047d9 	.word	0x080047d9
 8003454:	200002a4 	.word	0x200002a4
 8003458:	0800345d 	.word	0x0800345d

0800345c <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8003460:	e004      	b.n	800346c <hci_tl_lowlevel_isr+0x10>
  {
    if (hci_notify_asynch_evt(NULL))
 8003462:	2000      	movs	r0, #0
 8003464:	f009 f90e 	bl	800c684 <hci_notify_asynch_evt>
 8003468:	1e03      	subs	r3, r0, #0
 800346a:	d104      	bne.n	8003476 <hci_tl_lowlevel_isr+0x1a>
  while(IsDataAvailable())
 800346c:	f7ff ffa4 	bl	80033b8 <IsDataAvailable>
 8003470:	1e03      	subs	r3, r0, #0
 8003472:	d1f6      	bne.n	8003462 <hci_tl_lowlevel_isr+0x6>
 8003474:	e000      	b.n	8003478 <hci_tl_lowlevel_isr+0x1c>
    {
      return;
 8003476:	46c0      	nop			@ (mov r8, r8)
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_ADC_ConvCpltCallback>:
uint32_t counterInside = 0;
volatile int state =0;
volatile int count=0;
int flag = 0;
uint32_t buffer;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
    raw=buffer;
 8003484:	4b03      	ldr	r3, [pc, #12]	@ (8003494 <HAL_ADC_ConvCpltCallback+0x18>)
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	4b03      	ldr	r3, [pc, #12]	@ (8003498 <HAL_ADC_ConvCpltCallback+0x1c>)
 800348a:	601a      	str	r2, [r3, #0]
//  adc_val=HAL_ADC_GetValue(&hadc1);
}
 800348c:	46c0      	nop			@ (mov r8, r8)
 800348e:	46bd      	mov	sp, r7
 8003490:	b002      	add	sp, #8
 8003492:	bd80      	pop	{r7, pc}
 8003494:	200004c0 	.word	0x200004c0
 8003498:	200003b0 	.word	0x200003b0

0800349c <leftOf>:
  {{0, {0, 0, 0, 0}}, {0, {0, 0, 0, 0}}, {0, {0, 0, 0, 0}}, {0, {0, 0, 0, 0}}, {0, {0, 0, 0, 0}}}
};

static Cell discoveredMaze[ROWS][COLS];

static uint8_t leftOf(uint8_t dir)  {
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	0002      	movs	r2, r0
 80034a4:	1dfb      	adds	r3, r7, #7
 80034a6:	701a      	strb	r2, [r3, #0]
    return (dir + 3u) & 3u;
 80034a8:	1dfb      	adds	r3, r7, #7
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	3303      	adds	r3, #3
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2203      	movs	r2, #3
 80034b2:	4013      	ands	r3, r2
 80034b4:	b2db      	uxtb	r3, r3
}
 80034b6:	0018      	movs	r0, r3
 80034b8:	46bd      	mov	sp, r7
 80034ba:	b002      	add	sp, #8
 80034bc:	bd80      	pop	{r7, pc}

080034be <rightOf>:
static uint8_t rightOf(uint8_t dir) {
 80034be:	b580      	push	{r7, lr}
 80034c0:	b082      	sub	sp, #8
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	0002      	movs	r2, r0
 80034c6:	1dfb      	adds	r3, r7, #7
 80034c8:	701a      	strb	r2, [r3, #0]
    return (dir + 1u) & 3u;
 80034ca:	1dfb      	adds	r3, r7, #7
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	3301      	adds	r3, #1
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2203      	movs	r2, #3
 80034d4:	4013      	ands	r3, r2
 80034d6:	b2db      	uxtb	r3, r3
}
 80034d8:	0018      	movs	r0, r3
 80034da:	46bd      	mov	sp, r7
 80034dc:	b002      	add	sp, #8
 80034de:	bd80      	pop	{r7, pc}

080034e0 <behind>:
static uint8_t behind(uint8_t dir)  {
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	0002      	movs	r2, r0
 80034e8:	1dfb      	adds	r3, r7, #7
 80034ea:	701a      	strb	r2, [r3, #0]
    return (dir + 2u) & 3u;
 80034ec:	1dfb      	adds	r3, r7, #7
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	3302      	adds	r3, #2
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2203      	movs	r2, #3
 80034f6:	4013      	ands	r3, r2
 80034f8:	b2db      	uxtb	r3, r3
}
 80034fa:	0018      	movs	r0, r3
 80034fc:	46bd      	mov	sp, r7
 80034fe:	b002      	add	sp, #8
 8003500:	bd80      	pop	{r7, pc}

08003502 <isValid>:
static uint8_t isValid(uint8_t x, uint8_t y) {
 8003502:	b580      	push	{r7, lr}
 8003504:	b082      	sub	sp, #8
 8003506:	af00      	add	r7, sp, #0
 8003508:	0002      	movs	r2, r0
 800350a:	1dfb      	adds	r3, r7, #7
 800350c:	701a      	strb	r2, [r3, #0]
 800350e:	1dbb      	adds	r3, r7, #6
 8003510:	1c0a      	adds	r2, r1, #0
 8003512:	701a      	strb	r2, [r3, #0]
  return (x >= 0 && y >= 0 && x < COLS && y < ROWS);
 8003514:	1dfb      	adds	r3, r7, #7
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	2b04      	cmp	r3, #4
 800351a:	d805      	bhi.n	8003528 <isValid+0x26>
 800351c:	1dbb      	adds	r3, r7, #6
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	2b04      	cmp	r3, #4
 8003522:	d801      	bhi.n	8003528 <isValid+0x26>
 8003524:	2301      	movs	r3, #1
 8003526:	e000      	b.n	800352a <isValid+0x28>
 8003528:	2300      	movs	r3, #0
 800352a:	b2db      	uxtb	r3, r3
}
 800352c:	0018      	movs	r0, r3
 800352e:	46bd      	mov	sp, r7
 8003530:	b002      	add	sp, #8
 8003532:	bd80      	pop	{r7, pc}

08003534 <updateData>:

static void updateData(uint8_t x, uint8_t y, uint8_t dir, uint8_t f, uint8_t l, uint8_t r) {
 8003534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	0005      	movs	r5, r0
 800353c:	000c      	movs	r4, r1
 800353e:	0010      	movs	r0, r2
 8003540:	0019      	movs	r1, r3
 8003542:	1dfb      	adds	r3, r7, #7
 8003544:	1c2a      	adds	r2, r5, #0
 8003546:	701a      	strb	r2, [r3, #0]
 8003548:	1dbb      	adds	r3, r7, #6
 800354a:	1c22      	adds	r2, r4, #0
 800354c:	701a      	strb	r2, [r3, #0]
 800354e:	1d7b      	adds	r3, r7, #5
 8003550:	1c02      	adds	r2, r0, #0
 8003552:	701a      	strb	r2, [r3, #0]
 8003554:	1d3b      	adds	r3, r7, #4
 8003556:	1c0a      	adds	r2, r1, #0
 8003558:	701a      	strb	r2, [r3, #0]
  Cell *c = &discoveredMaze[y][x];
 800355a:	1dbb      	adds	r3, r7, #6
 800355c:	7819      	ldrb	r1, [r3, #0]
 800355e:	1dfb      	adds	r3, r7, #7
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	001a      	movs	r2, r3
 8003564:	0092      	lsls	r2, r2, #2
 8003566:	18d2      	adds	r2, r2, r3
 8003568:	000b      	movs	r3, r1
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	185b      	adds	r3, r3, r1
 800356e:	0099      	lsls	r1, r3, #2
 8003570:	185b      	adds	r3, r3, r1
 8003572:	18d2      	adds	r2, r2, r3
 8003574:	4b7f      	ldr	r3, [pc, #508]	@ (8003774 <updateData+0x240>)
 8003576:	18d3      	adds	r3, r2, r3
 8003578:	60fb      	str	r3, [r7, #12]
  c->visited = 1;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2201      	movs	r2, #1
 800357e:	701a      	strb	r2, [r3, #0]
  uint8_t absF = dir, absL = leftOf(dir), absR = rightOf(dir);
 8003580:	250b      	movs	r5, #11
 8003582:	197b      	adds	r3, r7, r5
 8003584:	1d7a      	adds	r2, r7, #5
 8003586:	7812      	ldrb	r2, [r2, #0]
 8003588:	701a      	strb	r2, [r3, #0]
 800358a:	260a      	movs	r6, #10
 800358c:	19bc      	adds	r4, r7, r6
 800358e:	1d7b      	adds	r3, r7, #5
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	0018      	movs	r0, r3
 8003594:	f7ff ff82 	bl	800349c <leftOf>
 8003598:	0003      	movs	r3, r0
 800359a:	7023      	strb	r3, [r4, #0]
 800359c:	2309      	movs	r3, #9
 800359e:	18fc      	adds	r4, r7, r3
 80035a0:	1d7b      	adds	r3, r7, #5
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	0018      	movs	r0, r3
 80035a6:	f7ff ff8a 	bl	80034be <rightOf>
 80035aa:	0003      	movs	r3, r0
 80035ac:	7023      	strb	r3, [r4, #0]
  c->walls[absF] = f;
 80035ae:	0029      	movs	r1, r5
 80035b0:	187b      	adds	r3, r7, r1
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	18d3      	adds	r3, r2, r3
 80035b8:	1d3a      	adds	r2, r7, #4
 80035ba:	7812      	ldrb	r2, [r2, #0]
 80035bc:	705a      	strb	r2, [r3, #1]
  c->walls[absL] = l;
 80035be:	19bb      	adds	r3, r7, r6
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	18d2      	adds	r2, r2, r3
 80035c6:	2028      	movs	r0, #40	@ 0x28
 80035c8:	183b      	adds	r3, r7, r0
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	7053      	strb	r3, [r2, #1]
  c->walls[absR] = r;
 80035ce:	2309      	movs	r3, #9
 80035d0:	18fb      	adds	r3, r7, r3
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	18d3      	adds	r3, r2, r3
 80035d8:	222c      	movs	r2, #44	@ 0x2c
 80035da:	18ba      	adds	r2, r7, r2
 80035dc:	7812      	ldrb	r2, [r2, #0]
 80035de:	705a      	strb	r2, [r3, #1]
  if (f && isValid(x + dx[absF], y + dy[absF]))
 80035e0:	1d3b      	adds	r3, r7, #4
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d03c      	beq.n	8003662 <updateData+0x12e>
 80035e8:	187b      	adds	r3, r7, r1
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	4a62      	ldr	r2, [pc, #392]	@ (8003778 <updateData+0x244>)
 80035ee:	56d3      	ldrsb	r3, [r2, r3]
 80035f0:	b2da      	uxtb	r2, r3
 80035f2:	1dfb      	adds	r3, r7, #7
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	18d3      	adds	r3, r2, r3
 80035f8:	b2d8      	uxtb	r0, r3
 80035fa:	000c      	movs	r4, r1
 80035fc:	187b      	adds	r3, r7, r1
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	4a5e      	ldr	r2, [pc, #376]	@ (800377c <updateData+0x248>)
 8003602:	56d3      	ldrsb	r3, [r2, r3]
 8003604:	b2da      	uxtb	r2, r3
 8003606:	1dbb      	adds	r3, r7, #6
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	18d3      	adds	r3, r2, r3
 800360c:	b2db      	uxtb	r3, r3
 800360e:	0019      	movs	r1, r3
 8003610:	f7ff ff77 	bl	8003502 <isValid>
 8003614:	1e03      	subs	r3, r0, #0
 8003616:	d024      	beq.n	8003662 <updateData+0x12e>
    discoveredMaze[y + dy[absF]][x + dx[absF]].walls[behind(absF)] = 1;
 8003618:	1dbb      	adds	r3, r7, #6
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	0020      	movs	r0, r4
 800361e:	183a      	adds	r2, r7, r0
 8003620:	7812      	ldrb	r2, [r2, #0]
 8003622:	4956      	ldr	r1, [pc, #344]	@ (800377c <updateData+0x248>)
 8003624:	568a      	ldrsb	r2, [r1, r2]
 8003626:	189c      	adds	r4, r3, r2
 8003628:	1dfb      	adds	r3, r7, #7
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	183a      	adds	r2, r7, r0
 800362e:	7812      	ldrb	r2, [r2, #0]
 8003630:	4951      	ldr	r1, [pc, #324]	@ (8003778 <updateData+0x244>)
 8003632:	568a      	ldrsb	r2, [r1, r2]
 8003634:	189d      	adds	r5, r3, r2
 8003636:	183b      	adds	r3, r7, r0
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	0018      	movs	r0, r3
 800363c:	f7ff ff50 	bl	80034e0 <behind>
 8003640:	0003      	movs	r3, r0
 8003642:	001e      	movs	r6, r3
 8003644:	494b      	ldr	r1, [pc, #300]	@ (8003774 <updateData+0x240>)
 8003646:	002a      	movs	r2, r5
 8003648:	0092      	lsls	r2, r2, #2
 800364a:	1952      	adds	r2, r2, r5
 800364c:	0023      	movs	r3, r4
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	191b      	adds	r3, r3, r4
 8003652:	0098      	lsls	r0, r3, #2
 8003654:	181b      	adds	r3, r3, r0
 8003656:	18d3      	adds	r3, r2, r3
 8003658:	18cb      	adds	r3, r1, r3
 800365a:	199b      	adds	r3, r3, r6
 800365c:	3301      	adds	r3, #1
 800365e:	2201      	movs	r2, #1
 8003660:	701a      	strb	r2, [r3, #0]
  if (l && isValid(x + dx[absL], y + dy[absL]))
 8003662:	2328      	movs	r3, #40	@ 0x28
 8003664:	18fb      	adds	r3, r7, r3
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d03c      	beq.n	80036e6 <updateData+0x1b2>
 800366c:	240a      	movs	r4, #10
 800366e:	193b      	adds	r3, r7, r4
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	4a41      	ldr	r2, [pc, #260]	@ (8003778 <updateData+0x244>)
 8003674:	56d3      	ldrsb	r3, [r2, r3]
 8003676:	b2da      	uxtb	r2, r3
 8003678:	1dfb      	adds	r3, r7, #7
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	18d3      	adds	r3, r2, r3
 800367e:	b2d8      	uxtb	r0, r3
 8003680:	193b      	adds	r3, r7, r4
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	4a3d      	ldr	r2, [pc, #244]	@ (800377c <updateData+0x248>)
 8003686:	56d3      	ldrsb	r3, [r2, r3]
 8003688:	b2da      	uxtb	r2, r3
 800368a:	1dbb      	adds	r3, r7, #6
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	18d3      	adds	r3, r2, r3
 8003690:	b2db      	uxtb	r3, r3
 8003692:	0019      	movs	r1, r3
 8003694:	f7ff ff35 	bl	8003502 <isValid>
 8003698:	1e03      	subs	r3, r0, #0
 800369a:	d024      	beq.n	80036e6 <updateData+0x1b2>
    discoveredMaze[y + dy[absL]][x + dx[absL]].walls[behind(absL)] = 1;
 800369c:	1dbb      	adds	r3, r7, #6
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	0020      	movs	r0, r4
 80036a2:	183a      	adds	r2, r7, r0
 80036a4:	7812      	ldrb	r2, [r2, #0]
 80036a6:	4935      	ldr	r1, [pc, #212]	@ (800377c <updateData+0x248>)
 80036a8:	568a      	ldrsb	r2, [r1, r2]
 80036aa:	189c      	adds	r4, r3, r2
 80036ac:	1dfb      	adds	r3, r7, #7
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	183a      	adds	r2, r7, r0
 80036b2:	7812      	ldrb	r2, [r2, #0]
 80036b4:	4930      	ldr	r1, [pc, #192]	@ (8003778 <updateData+0x244>)
 80036b6:	568a      	ldrsb	r2, [r1, r2]
 80036b8:	189d      	adds	r5, r3, r2
 80036ba:	183b      	adds	r3, r7, r0
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	0018      	movs	r0, r3
 80036c0:	f7ff ff0e 	bl	80034e0 <behind>
 80036c4:	0003      	movs	r3, r0
 80036c6:	001e      	movs	r6, r3
 80036c8:	492a      	ldr	r1, [pc, #168]	@ (8003774 <updateData+0x240>)
 80036ca:	002a      	movs	r2, r5
 80036cc:	0092      	lsls	r2, r2, #2
 80036ce:	1952      	adds	r2, r2, r5
 80036d0:	0023      	movs	r3, r4
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	191b      	adds	r3, r3, r4
 80036d6:	0098      	lsls	r0, r3, #2
 80036d8:	181b      	adds	r3, r3, r0
 80036da:	18d3      	adds	r3, r2, r3
 80036dc:	18cb      	adds	r3, r1, r3
 80036de:	199b      	adds	r3, r3, r6
 80036e0:	3301      	adds	r3, #1
 80036e2:	2201      	movs	r2, #1
 80036e4:	701a      	strb	r2, [r3, #0]
  if (r && isValid(x + dx[absR], y + dy[absR]))
 80036e6:	232c      	movs	r3, #44	@ 0x2c
 80036e8:	18fb      	adds	r3, r7, r3
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d03c      	beq.n	800376a <updateData+0x236>
 80036f0:	2409      	movs	r4, #9
 80036f2:	193b      	adds	r3, r7, r4
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	4a20      	ldr	r2, [pc, #128]	@ (8003778 <updateData+0x244>)
 80036f8:	56d3      	ldrsb	r3, [r2, r3]
 80036fa:	b2da      	uxtb	r2, r3
 80036fc:	1dfb      	adds	r3, r7, #7
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	18d3      	adds	r3, r2, r3
 8003702:	b2d8      	uxtb	r0, r3
 8003704:	193b      	adds	r3, r7, r4
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	4a1c      	ldr	r2, [pc, #112]	@ (800377c <updateData+0x248>)
 800370a:	56d3      	ldrsb	r3, [r2, r3]
 800370c:	b2da      	uxtb	r2, r3
 800370e:	1dbb      	adds	r3, r7, #6
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	18d3      	adds	r3, r2, r3
 8003714:	b2db      	uxtb	r3, r3
 8003716:	0019      	movs	r1, r3
 8003718:	f7ff fef3 	bl	8003502 <isValid>
 800371c:	1e03      	subs	r3, r0, #0
 800371e:	d024      	beq.n	800376a <updateData+0x236>
    discoveredMaze[y + dy[absR]][x + dx[absR]].walls[behind(absR)] = 1;
 8003720:	1dbb      	adds	r3, r7, #6
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	0020      	movs	r0, r4
 8003726:	183a      	adds	r2, r7, r0
 8003728:	7812      	ldrb	r2, [r2, #0]
 800372a:	4914      	ldr	r1, [pc, #80]	@ (800377c <updateData+0x248>)
 800372c:	568a      	ldrsb	r2, [r1, r2]
 800372e:	189c      	adds	r4, r3, r2
 8003730:	1dfb      	adds	r3, r7, #7
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	183a      	adds	r2, r7, r0
 8003736:	7812      	ldrb	r2, [r2, #0]
 8003738:	490f      	ldr	r1, [pc, #60]	@ (8003778 <updateData+0x244>)
 800373a:	568a      	ldrsb	r2, [r1, r2]
 800373c:	189d      	adds	r5, r3, r2
 800373e:	183b      	adds	r3, r7, r0
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	0018      	movs	r0, r3
 8003744:	f7ff fecc 	bl	80034e0 <behind>
 8003748:	0003      	movs	r3, r0
 800374a:	001e      	movs	r6, r3
 800374c:	4909      	ldr	r1, [pc, #36]	@ (8003774 <updateData+0x240>)
 800374e:	002a      	movs	r2, r5
 8003750:	0092      	lsls	r2, r2, #2
 8003752:	1952      	adds	r2, r2, r5
 8003754:	0023      	movs	r3, r4
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	191b      	adds	r3, r3, r4
 800375a:	0098      	lsls	r0, r3, #2
 800375c:	181b      	adds	r3, r3, r0
 800375e:	18d3      	adds	r3, r2, r3
 8003760:	18cb      	adds	r3, r1, r3
 8003762:	199b      	adds	r3, r3, r6
 8003764:	3301      	adds	r3, #1
 8003766:	2201      	movs	r2, #1
 8003768:	701a      	strb	r2, [r3, #0]
}
 800376a:	46c0      	nop			@ (mov r8, r8)
 800376c:	46bd      	mov	sp, r7
 800376e:	b005      	add	sp, #20
 8003770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003772:	46c0      	nop			@ (mov r8, r8)
 8003774:	200004c4 	.word	0x200004c4
 8003778:	080103a0 	.word	0x080103a0
 800377c:	080103a4 	.word	0x080103a4

08003780 <getData>:

static void getData(uint8_t x, uint8_t y, uint8_t dir) {
 8003780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003782:	b087      	sub	sp, #28
 8003784:	af02      	add	r7, sp, #8
 8003786:	0004      	movs	r4, r0
 8003788:	0008      	movs	r0, r1
 800378a:	0011      	movs	r1, r2
 800378c:	1dfb      	adds	r3, r7, #7
 800378e:	1c22      	adds	r2, r4, #0
 8003790:	701a      	strb	r2, [r3, #0]
 8003792:	1dbb      	adds	r3, r7, #6
 8003794:	1c02      	adds	r2, r0, #0
 8003796:	701a      	strb	r2, [r3, #0]
 8003798:	1d7b      	adds	r3, r7, #5
 800379a:	1c0a      	adds	r2, r1, #0
 800379c:	701a      	strb	r2, [r3, #0]
  const Cell *sim = &maze[y][x];
 800379e:	1dbb      	adds	r3, r7, #6
 80037a0:	7819      	ldrb	r1, [r3, #0]
 80037a2:	1dfb      	adds	r3, r7, #7
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	001a      	movs	r2, r3
 80037a8:	0092      	lsls	r2, r2, #2
 80037aa:	18d2      	adds	r2, r2, r3
 80037ac:	000b      	movs	r3, r1
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	185b      	adds	r3, r3, r1
 80037b2:	0099      	lsls	r1, r3, #2
 80037b4:	185b      	adds	r3, r3, r1
 80037b6:	18d2      	adds	r2, r2, r3
 80037b8:	4b1c      	ldr	r3, [pc, #112]	@ (800382c <getData+0xac>)
 80037ba:	18d3      	adds	r3, r2, r3
 80037bc:	60fb      	str	r3, [r7, #12]
  uint8_t f = sim->walls[dir];
 80037be:	1d7b      	adds	r3, r7, #5
 80037c0:	781a      	ldrb	r2, [r3, #0]
 80037c2:	240b      	movs	r4, #11
 80037c4:	193b      	adds	r3, r7, r4
 80037c6:	68f9      	ldr	r1, [r7, #12]
 80037c8:	188a      	adds	r2, r1, r2
 80037ca:	7852      	ldrb	r2, [r2, #1]
 80037cc:	701a      	strb	r2, [r3, #0]
  uint8_t l = sim->walls[leftOf(dir)];
 80037ce:	1d7b      	adds	r3, r7, #5
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	0018      	movs	r0, r3
 80037d4:	f7ff fe62 	bl	800349c <leftOf>
 80037d8:	0003      	movs	r3, r0
 80037da:	0019      	movs	r1, r3
 80037dc:	250a      	movs	r5, #10
 80037de:	197b      	adds	r3, r7, r5
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	1852      	adds	r2, r2, r1
 80037e4:	7852      	ldrb	r2, [r2, #1]
 80037e6:	701a      	strb	r2, [r3, #0]
  uint8_t r = sim->walls[rightOf(dir)];
 80037e8:	1d7b      	adds	r3, r7, #5
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	0018      	movs	r0, r3
 80037ee:	f7ff fe66 	bl	80034be <rightOf>
 80037f2:	0003      	movs	r3, r0
 80037f4:	0019      	movs	r1, r3
 80037f6:	2609      	movs	r6, #9
 80037f8:	19bb      	adds	r3, r7, r6
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	1852      	adds	r2, r2, r1
 80037fe:	7852      	ldrb	r2, [r2, #1]
 8003800:	701a      	strb	r2, [r3, #0]
  updateData(x, y, dir, f, l, r);
 8003802:	193b      	adds	r3, r7, r4
 8003804:	781c      	ldrb	r4, [r3, #0]
 8003806:	1d7b      	adds	r3, r7, #5
 8003808:	781a      	ldrb	r2, [r3, #0]
 800380a:	1dbb      	adds	r3, r7, #6
 800380c:	7819      	ldrb	r1, [r3, #0]
 800380e:	1dfb      	adds	r3, r7, #7
 8003810:	7818      	ldrb	r0, [r3, #0]
 8003812:	19bb      	adds	r3, r7, r6
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	9301      	str	r3, [sp, #4]
 8003818:	197b      	adds	r3, r7, r5
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	0023      	movs	r3, r4
 8003820:	f7ff fe88 	bl	8003534 <updateData>
}
 8003824:	46c0      	nop			@ (mov r8, r8)
 8003826:	46bd      	mov	sp, r7
 8003828:	b005      	add	sp, #20
 800382a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800382c:	080103a8 	.word	0x080103a8

08003830 <rotate>:

static void rotate(uint8_t cmd) {
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	0002      	movs	r2, r0
 8003838:	1dfb      	adds	r3, r7, #7
 800383a:	701a      	strb	r2, [r3, #0]
  motordata(&cmd);
 800383c:	1dfb      	adds	r3, r7, #7
 800383e:	0018      	movs	r0, r3
 8003840:	f000 fd3e 	bl	80042c0 <motordata>
  HAL_Delay(430);
 8003844:	23d7      	movs	r3, #215	@ 0xd7
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	0018      	movs	r0, r3
 800384a:	f001 fc25 	bl	8005098 <HAL_Delay>
}
 800384e:	46c0      	nop			@ (mov r8, r8)
 8003850:	46bd      	mov	sp, r7
 8003852:	b002      	add	sp, #8
 8003854:	bd80      	pop	{r7, pc}

08003856 <moveForward>:

static void moveForward(void) {
 8003856:	b580      	push	{r7, lr}
 8003858:	b082      	sub	sp, #8
 800385a:	af00      	add	r7, sp, #0
  uint8_t cmd = 'F';
 800385c:	1dfb      	adds	r3, r7, #7
 800385e:	2246      	movs	r2, #70	@ 0x46
 8003860:	701a      	strb	r2, [r3, #0]
  motordata(&cmd);
 8003862:	1dfb      	adds	r3, r7, #7
 8003864:	0018      	movs	r0, r3
 8003866:	f000 fd2b 	bl	80042c0 <motordata>
  HAL_Delay(430);
 800386a:	23d7      	movs	r3, #215	@ 0xd7
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	0018      	movs	r0, r3
 8003870:	f001 fc12 	bl	8005098 <HAL_Delay>
}
 8003874:	46c0      	nop			@ (mov r8, r8)
 8003876:	46bd      	mov	sp, r7
 8003878:	b002      	add	sp, #8
 800387a:	bd80      	pop	{r7, pc}

0800387c <getNextMove>:

static Direction getNextMove(uint8_t sx, uint8_t sy) {
 800387c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800387e:	b0af      	sub	sp, #188	@ 0xbc
 8003880:	af00      	add	r7, sp, #0
 8003882:	0002      	movs	r2, r0
 8003884:	1dfb      	adds	r3, r7, #7
 8003886:	701a      	strb	r2, [r3, #0]
 8003888:	1dbb      	adds	r3, r7, #6
 800388a:	1c0a      	adds	r2, r1, #0
 800388c:	701a      	strb	r2, [r3, #0]
  uint8_t vis[ROWS][COLS] = {{0}};
 800388e:	2390      	movs	r3, #144	@ 0x90
 8003890:	18fb      	adds	r3, r7, r3
 8003892:	0018      	movs	r0, r3
 8003894:	2319      	movs	r3, #25
 8003896:	001a      	movs	r2, r3
 8003898:	2100      	movs	r1, #0
 800389a:	f009 ffb9 	bl	800d810 <memset>
  typedef struct {
    Point p;
  } QN;
  QN queue[ROWS * COLS];
  Point parent[ROWS][COLS];
  uint16_t front = 0, rear = 0;
 800389e:	23b6      	movs	r3, #182	@ 0xb6
 80038a0:	18fb      	adds	r3, r7, r3
 80038a2:	2200      	movs	r2, #0
 80038a4:	801a      	strh	r2, [r3, #0]
 80038a6:	23b4      	movs	r3, #180	@ 0xb4
 80038a8:	18fb      	adds	r3, r7, r3
 80038aa:	2200      	movs	r2, #0
 80038ac:	801a      	strh	r2, [r3, #0]
  for (uint8_t i = 0; i < ROWS; i++)
 80038ae:	23b3      	movs	r3, #179	@ 0xb3
 80038b0:	18fb      	adds	r3, r7, r3
 80038b2:	2200      	movs	r2, #0
 80038b4:	701a      	strb	r2, [r3, #0]
 80038b6:	e024      	b.n	8003902 <getNextMove+0x86>
    for (uint8_t j = 0; j < COLS; j++)
 80038b8:	23b2      	movs	r3, #178	@ 0xb2
 80038ba:	18fb      	adds	r3, r7, r3
 80038bc:	2200      	movs	r2, #0
 80038be:	701a      	strb	r2, [r3, #0]
 80038c0:	e014      	b.n	80038ec <getNextMove+0x70>
      parent[i][j] = (Point){0xFF, 0xFF};
 80038c2:	23b3      	movs	r3, #179	@ 0xb3
 80038c4:	18fb      	adds	r3, r7, r3
 80038c6:	781a      	ldrb	r2, [r3, #0]
 80038c8:	24b2      	movs	r4, #178	@ 0xb2
 80038ca:	193b      	adds	r3, r7, r4
 80038cc:	7818      	ldrb	r0, [r3, #0]
 80038ce:	2328      	movs	r3, #40	@ 0x28
 80038d0:	18f9      	adds	r1, r7, r3
 80038d2:	0013      	movs	r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	189b      	adds	r3, r3, r2
 80038d8:	181b      	adds	r3, r3, r0
 80038da:	005b      	lsls	r3, r3, #1
 80038dc:	4abe      	ldr	r2, [pc, #760]	@ (8003bd8 <getNextMove+0x35c>)
 80038de:	8812      	ldrh	r2, [r2, #0]
 80038e0:	525a      	strh	r2, [r3, r1]
    for (uint8_t j = 0; j < COLS; j++)
 80038e2:	193b      	adds	r3, r7, r4
 80038e4:	781a      	ldrb	r2, [r3, #0]
 80038e6:	193b      	adds	r3, r7, r4
 80038e8:	3201      	adds	r2, #1
 80038ea:	701a      	strb	r2, [r3, #0]
 80038ec:	23b2      	movs	r3, #178	@ 0xb2
 80038ee:	18fb      	adds	r3, r7, r3
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d9e5      	bls.n	80038c2 <getNextMove+0x46>
  for (uint8_t i = 0; i < ROWS; i++)
 80038f6:	21b3      	movs	r1, #179	@ 0xb3
 80038f8:	187b      	adds	r3, r7, r1
 80038fa:	781a      	ldrb	r2, [r3, #0]
 80038fc:	187b      	adds	r3, r7, r1
 80038fe:	3201      	adds	r2, #1
 8003900:	701a      	strb	r2, [r3, #0]
 8003902:	23b3      	movs	r3, #179	@ 0xb3
 8003904:	18fb      	adds	r3, r7, r3
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	2b04      	cmp	r3, #4
 800390a:	d9d5      	bls.n	80038b8 <getNextMove+0x3c>
  queue[rear++].p = (Point){sx, sy};
 800390c:	22b4      	movs	r2, #180	@ 0xb4
 800390e:	18bb      	adds	r3, r7, r2
 8003910:	881b      	ldrh	r3, [r3, #0]
 8003912:	18ba      	adds	r2, r7, r2
 8003914:	1c59      	adds	r1, r3, #1
 8003916:	8011      	strh	r1, [r2, #0]
 8003918:	245c      	movs	r4, #92	@ 0x5c
 800391a:	193a      	adds	r2, r7, r4
 800391c:	0059      	lsls	r1, r3, #1
 800391e:	1df8      	adds	r0, r7, #7
 8003920:	7800      	ldrb	r0, [r0, #0]
 8003922:	5488      	strb	r0, [r1, r2]
 8003924:	193a      	adds	r2, r7, r4
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	18d3      	adds	r3, r2, r3
 800392a:	3301      	adds	r3, #1
 800392c:	1dba      	adds	r2, r7, #6
 800392e:	7812      	ldrb	r2, [r2, #0]
 8003930:	701a      	strb	r2, [r3, #0]
  vis[sy][sx] = 1;
 8003932:	1dbb      	adds	r3, r7, #6
 8003934:	781a      	ldrb	r2, [r3, #0]
 8003936:	1dfb      	adds	r3, r7, #7
 8003938:	7819      	ldrb	r1, [r3, #0]
 800393a:	2390      	movs	r3, #144	@ 0x90
 800393c:	18f8      	adds	r0, r7, r3
 800393e:	0013      	movs	r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	189b      	adds	r3, r3, r2
 8003944:	18c3      	adds	r3, r0, r3
 8003946:	2201      	movs	r2, #1
 8003948:	545a      	strb	r2, [r3, r1]
  Point goal = {0xFF, 0xFF};
 800394a:	2320      	movs	r3, #32
 800394c:	18fb      	adds	r3, r7, r3
 800394e:	4aa2      	ldr	r2, [pc, #648]	@ (8003bd8 <getNextMove+0x35c>)
 8003950:	8812      	ldrh	r2, [r2, #0]
 8003952:	801a      	strh	r2, [r3, #0]
  const uint8_t ord[4] = {SOUTH, EAST, NORTH, WEST};
 8003954:	231c      	movs	r3, #28
 8003956:	18fb      	adds	r3, r7, r3
 8003958:	4aa0      	ldr	r2, [pc, #640]	@ (8003bdc <getNextMove+0x360>)
 800395a:	601a      	str	r2, [r3, #0]
  while (front < rear) {
 800395c:	e0b6      	b.n	8003acc <getNextMove+0x250>
    Point c = queue[front++].p;
 800395e:	22b6      	movs	r2, #182	@ 0xb6
 8003960:	18bb      	adds	r3, r7, r2
 8003962:	881b      	ldrh	r3, [r3, #0]
 8003964:	18ba      	adds	r2, r7, r2
 8003966:	1c59      	adds	r1, r3, #1
 8003968:	8011      	strh	r1, [r2, #0]
 800396a:	0019      	movs	r1, r3
 800396c:	2010      	movs	r0, #16
 800396e:	183b      	adds	r3, r7, r0
 8003970:	225c      	movs	r2, #92	@ 0x5c
 8003972:	18ba      	adds	r2, r7, r2
 8003974:	0049      	lsls	r1, r1, #1
 8003976:	5a8a      	ldrh	r2, [r1, r2]
 8003978:	801a      	strh	r2, [r3, #0]
    if (c.x == COLS - 1 && c.y == ROWS - 1) { goal = c; break; }
 800397a:	0002      	movs	r2, r0
 800397c:	18bb      	adds	r3, r7, r2
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	2b04      	cmp	r3, #4
 8003982:	d109      	bne.n	8003998 <getNextMove+0x11c>
 8003984:	18bb      	adds	r3, r7, r2
 8003986:	785b      	ldrb	r3, [r3, #1]
 8003988:	2b04      	cmp	r3, #4
 800398a:	d105      	bne.n	8003998 <getNextMove+0x11c>
 800398c:	2320      	movs	r3, #32
 800398e:	18fb      	adds	r3, r7, r3
 8003990:	18ba      	adds	r2, r7, r2
 8003992:	8812      	ldrh	r2, [r2, #0]
 8003994:	801a      	strh	r2, [r3, #0]
 8003996:	e0a2      	b.n	8003ade <getNextMove+0x262>
    for (uint8_t i = 0; i < 4; i++) {
 8003998:	23b1      	movs	r3, #177	@ 0xb1
 800399a:	18fb      	adds	r3, r7, r3
 800399c:	2200      	movs	r2, #0
 800399e:	701a      	strb	r2, [r3, #0]
 80039a0:	e08e      	b.n	8003ac0 <getNextMove+0x244>
      uint8_t d = ord[i];
 80039a2:	23b1      	movs	r3, #177	@ 0xb1
 80039a4:	18fb      	adds	r3, r7, r3
 80039a6:	781a      	ldrb	r2, [r3, #0]
 80039a8:	20af      	movs	r0, #175	@ 0xaf
 80039aa:	183b      	adds	r3, r7, r0
 80039ac:	211c      	movs	r1, #28
 80039ae:	1879      	adds	r1, r7, r1
 80039b0:	5c8a      	ldrb	r2, [r1, r2]
 80039b2:	701a      	strb	r2, [r3, #0]
      int8_t nx = c.x + dx[d];
 80039b4:	2410      	movs	r4, #16
 80039b6:	193b      	adds	r3, r7, r4
 80039b8:	781a      	ldrb	r2, [r3, #0]
 80039ba:	183b      	adds	r3, r7, r0
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	4988      	ldr	r1, [pc, #544]	@ (8003be0 <getNextMove+0x364>)
 80039c0:	56cb      	ldrsb	r3, [r1, r3]
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	18d3      	adds	r3, r2, r3
 80039c6:	b2da      	uxtb	r2, r3
 80039c8:	26ae      	movs	r6, #174	@ 0xae
 80039ca:	19bb      	adds	r3, r7, r6
 80039cc:	701a      	strb	r2, [r3, #0]
      int8_t ny = c.y + dy[d];
 80039ce:	193b      	adds	r3, r7, r4
 80039d0:	785a      	ldrb	r2, [r3, #1]
 80039d2:	183b      	adds	r3, r7, r0
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	4983      	ldr	r1, [pc, #524]	@ (8003be4 <getNextMove+0x368>)
 80039d8:	56cb      	ldrsb	r3, [r1, r3]
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	18d3      	adds	r3, r2, r3
 80039de:	b2da      	uxtb	r2, r3
 80039e0:	25ad      	movs	r5, #173	@ 0xad
 80039e2:	197b      	adds	r3, r7, r5
 80039e4:	701a      	strb	r2, [r3, #0]
      if (isValid(nx, ny) && !vis[ny][nx] && !discoveredMaze[c.y][c.x].walls[d]) {
 80039e6:	19bb      	adds	r3, r7, r6
 80039e8:	781a      	ldrb	r2, [r3, #0]
 80039ea:	197b      	adds	r3, r7, r5
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	0019      	movs	r1, r3
 80039f0:	0010      	movs	r0, r2
 80039f2:	f7ff fd86 	bl	8003502 <isValid>
 80039f6:	1e03      	subs	r3, r0, #0
 80039f8:	d05c      	beq.n	8003ab4 <getNextMove+0x238>
 80039fa:	197b      	adds	r3, r7, r5
 80039fc:	2200      	movs	r2, #0
 80039fe:	569a      	ldrsb	r2, [r3, r2]
 8003a00:	19bb      	adds	r3, r7, r6
 8003a02:	2100      	movs	r1, #0
 8003a04:	5659      	ldrsb	r1, [r3, r1]
 8003a06:	2390      	movs	r3, #144	@ 0x90
 8003a08:	18f8      	adds	r0, r7, r3
 8003a0a:	0013      	movs	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	189b      	adds	r3, r3, r2
 8003a10:	18c3      	adds	r3, r0, r3
 8003a12:	5c5b      	ldrb	r3, [r3, r1]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d14d      	bne.n	8003ab4 <getNextMove+0x238>
 8003a18:	0022      	movs	r2, r4
 8003a1a:	18bb      	adds	r3, r7, r2
 8003a1c:	785b      	ldrb	r3, [r3, #1]
 8003a1e:	001c      	movs	r4, r3
 8003a20:	18bb      	adds	r3, r7, r2
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	001d      	movs	r5, r3
 8003a26:	20af      	movs	r0, #175	@ 0xaf
 8003a28:	183b      	adds	r3, r7, r0
 8003a2a:	7819      	ldrb	r1, [r3, #0]
 8003a2c:	486e      	ldr	r0, [pc, #440]	@ (8003be8 <getNextMove+0x36c>)
 8003a2e:	002a      	movs	r2, r5
 8003a30:	0092      	lsls	r2, r2, #2
 8003a32:	1952      	adds	r2, r2, r5
 8003a34:	0023      	movs	r3, r4
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	191b      	adds	r3, r3, r4
 8003a3a:	009c      	lsls	r4, r3, #2
 8003a3c:	191b      	adds	r3, r3, r4
 8003a3e:	18d3      	adds	r3, r2, r3
 8003a40:	18c3      	adds	r3, r0, r3
 8003a42:	185b      	adds	r3, r3, r1
 8003a44:	3301      	adds	r3, #1
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d133      	bne.n	8003ab4 <getNextMove+0x238>
        vis[ny][nx] = 1;
 8003a4c:	25ad      	movs	r5, #173	@ 0xad
 8003a4e:	197b      	adds	r3, r7, r5
 8003a50:	2200      	movs	r2, #0
 8003a52:	569a      	ldrsb	r2, [r3, r2]
 8003a54:	19bb      	adds	r3, r7, r6
 8003a56:	2100      	movs	r1, #0
 8003a58:	5659      	ldrsb	r1, [r3, r1]
 8003a5a:	2390      	movs	r3, #144	@ 0x90
 8003a5c:	18f8      	adds	r0, r7, r3
 8003a5e:	0013      	movs	r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	189b      	adds	r3, r3, r2
 8003a64:	18c3      	adds	r3, r0, r3
 8003a66:	2201      	movs	r2, #1
 8003a68:	545a      	strb	r2, [r3, r1]
        parent[ny][nx] = c;
 8003a6a:	197b      	adds	r3, r7, r5
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	569a      	ldrsb	r2, [r3, r2]
 8003a70:	19bb      	adds	r3, r7, r6
 8003a72:	2000      	movs	r0, #0
 8003a74:	5618      	ldrsb	r0, [r3, r0]
 8003a76:	2328      	movs	r3, #40	@ 0x28
 8003a78:	18f9      	adds	r1, r7, r3
 8003a7a:	0013      	movs	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	189b      	adds	r3, r3, r2
 8003a80:	181b      	adds	r3, r3, r0
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	2210      	movs	r2, #16
 8003a86:	18ba      	adds	r2, r7, r2
 8003a88:	8812      	ldrh	r2, [r2, #0]
 8003a8a:	525a      	strh	r2, [r3, r1]
        queue[rear++].p = (Point){(uint8_t)nx, (uint8_t)ny};
 8003a8c:	22b4      	movs	r2, #180	@ 0xb4
 8003a8e:	18bb      	adds	r3, r7, r2
 8003a90:	881b      	ldrh	r3, [r3, #0]
 8003a92:	18ba      	adds	r2, r7, r2
 8003a94:	1c59      	adds	r1, r3, #1
 8003a96:	8011      	strh	r1, [r2, #0]
 8003a98:	19ba      	adds	r2, r7, r6
 8003a9a:	7814      	ldrb	r4, [r2, #0]
 8003a9c:	197a      	adds	r2, r7, r5
 8003a9e:	7810      	ldrb	r0, [r2, #0]
 8003aa0:	255c      	movs	r5, #92	@ 0x5c
 8003aa2:	197a      	adds	r2, r7, r5
 8003aa4:	0059      	lsls	r1, r3, #1
 8003aa6:	548c      	strb	r4, [r1, r2]
 8003aa8:	197a      	adds	r2, r7, r5
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	18d3      	adds	r3, r2, r3
 8003aae:	3301      	adds	r3, #1
 8003ab0:	1c02      	adds	r2, r0, #0
 8003ab2:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++) {
 8003ab4:	21b1      	movs	r1, #177	@ 0xb1
 8003ab6:	187b      	adds	r3, r7, r1
 8003ab8:	781a      	ldrb	r2, [r3, #0]
 8003aba:	187b      	adds	r3, r7, r1
 8003abc:	3201      	adds	r2, #1
 8003abe:	701a      	strb	r2, [r3, #0]
 8003ac0:	23b1      	movs	r3, #177	@ 0xb1
 8003ac2:	18fb      	adds	r3, r7, r3
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	2b03      	cmp	r3, #3
 8003ac8:	d800      	bhi.n	8003acc <getNextMove+0x250>
 8003aca:	e76a      	b.n	80039a2 <getNextMove+0x126>
  while (front < rear) {
 8003acc:	23b6      	movs	r3, #182	@ 0xb6
 8003ace:	18fa      	adds	r2, r7, r3
 8003ad0:	23b4      	movs	r3, #180	@ 0xb4
 8003ad2:	18fb      	adds	r3, r7, r3
 8003ad4:	8812      	ldrh	r2, [r2, #0]
 8003ad6:	881b      	ldrh	r3, [r3, #0]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d200      	bcs.n	8003ade <getNextMove+0x262>
 8003adc:	e73f      	b.n	800395e <getNextMove+0xe2>
      }
    }
  }
  Point cur = goal;
 8003ade:	2318      	movs	r3, #24
 8003ae0:	18fb      	adds	r3, r7, r3
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	18ba      	adds	r2, r7, r2
 8003ae6:	8812      	ldrh	r2, [r2, #0]
 8003ae8:	801a      	strh	r2, [r3, #0]
  while (!(parent[cur.y][cur.x].x == sx && parent[cur.y][cur.x].y == sy)) {
 8003aea:	e010      	b.n	8003b0e <getNextMove+0x292>
    cur = parent[cur.y][cur.x];
 8003aec:	2218      	movs	r2, #24
 8003aee:	18bb      	adds	r3, r7, r2
 8003af0:	785b      	ldrb	r3, [r3, #1]
 8003af2:	0018      	movs	r0, r3
 8003af4:	18bb      	adds	r3, r7, r2
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	001c      	movs	r4, r3
 8003afa:	18ba      	adds	r2, r7, r2
 8003afc:	2328      	movs	r3, #40	@ 0x28
 8003afe:	18f9      	adds	r1, r7, r3
 8003b00:	0003      	movs	r3, r0
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	181b      	adds	r3, r3, r0
 8003b06:	191b      	adds	r3, r3, r4
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	5a5b      	ldrh	r3, [r3, r1]
 8003b0c:	8013      	strh	r3, [r2, #0]
  while (!(parent[cur.y][cur.x].x == sx && parent[cur.y][cur.x].y == sy)) {
 8003b0e:	2418      	movs	r4, #24
 8003b10:	193b      	adds	r3, r7, r4
 8003b12:	785b      	ldrb	r3, [r3, #1]
 8003b14:	0019      	movs	r1, r3
 8003b16:	193b      	adds	r3, r7, r4
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	0018      	movs	r0, r3
 8003b1c:	2528      	movs	r5, #40	@ 0x28
 8003b1e:	197a      	adds	r2, r7, r5
 8003b20:	000b      	movs	r3, r1
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	185b      	adds	r3, r3, r1
 8003b26:	181b      	adds	r3, r3, r0
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	5c9b      	ldrb	r3, [r3, r2]
 8003b2c:	1dfa      	adds	r2, r7, #7
 8003b2e:	7812      	ldrb	r2, [r2, #0]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d1db      	bne.n	8003aec <getNextMove+0x270>
 8003b34:	193b      	adds	r3, r7, r4
 8003b36:	785b      	ldrb	r3, [r3, #1]
 8003b38:	0019      	movs	r1, r3
 8003b3a:	193b      	adds	r3, r7, r4
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	0018      	movs	r0, r3
 8003b40:	197a      	adds	r2, r7, r5
 8003b42:	000b      	movs	r3, r1
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	185b      	adds	r3, r3, r1
 8003b48:	181b      	adds	r3, r3, r0
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	18d3      	adds	r3, r2, r3
 8003b4e:	3301      	adds	r3, #1
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	1dba      	adds	r2, r7, #6
 8003b54:	7812      	ldrb	r2, [r2, #0]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d1c8      	bne.n	8003aec <getNextMove+0x270>
  }
  int8_t dxm = cur.x - sx;
 8003b5a:	193b      	adds	r3, r7, r4
 8003b5c:	781a      	ldrb	r2, [r3, #0]
 8003b5e:	1dfb      	adds	r3, r7, #7
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	b2da      	uxtb	r2, r3
 8003b66:	23ac      	movs	r3, #172	@ 0xac
 8003b68:	18fb      	adds	r3, r7, r3
 8003b6a:	701a      	strb	r2, [r3, #0]
  int8_t dym = cur.y - sy;
 8003b6c:	193b      	adds	r3, r7, r4
 8003b6e:	785a      	ldrb	r2, [r3, #1]
 8003b70:	1dbb      	adds	r3, r7, #6
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	23ab      	movs	r3, #171	@ 0xab
 8003b7a:	18fb      	adds	r3, r7, r3
 8003b7c:	701a      	strb	r2, [r3, #0]
  for (uint8_t d = 0; d < 4; d++) {
 8003b7e:	23b0      	movs	r3, #176	@ 0xb0
 8003b80:	18fb      	adds	r3, r7, r3
 8003b82:	2200      	movs	r2, #0
 8003b84:	701a      	strb	r2, [r3, #0]
 8003b86:	e01d      	b.n	8003bc4 <getNextMove+0x348>
    if (dx[d] == dxm && dy[d] == dym) return (Direction)d;
 8003b88:	21b0      	movs	r1, #176	@ 0xb0
 8003b8a:	187b      	adds	r3, r7, r1
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	4a14      	ldr	r2, [pc, #80]	@ (8003be0 <getNextMove+0x364>)
 8003b90:	56d3      	ldrsb	r3, [r2, r3]
 8003b92:	22ac      	movs	r2, #172	@ 0xac
 8003b94:	18ba      	adds	r2, r7, r2
 8003b96:	7812      	ldrb	r2, [r2, #0]
 8003b98:	b252      	sxtb	r2, r2
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d10c      	bne.n	8003bb8 <getNextMove+0x33c>
 8003b9e:	187b      	adds	r3, r7, r1
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	4a10      	ldr	r2, [pc, #64]	@ (8003be4 <getNextMove+0x368>)
 8003ba4:	56d3      	ldrsb	r3, [r2, r3]
 8003ba6:	22ab      	movs	r2, #171	@ 0xab
 8003ba8:	18ba      	adds	r2, r7, r2
 8003baa:	7812      	ldrb	r2, [r2, #0]
 8003bac:	b252      	sxtb	r2, r2
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d102      	bne.n	8003bb8 <getNextMove+0x33c>
 8003bb2:	187b      	adds	r3, r7, r1
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	e00b      	b.n	8003bd0 <getNextMove+0x354>
  for (uint8_t d = 0; d < 4; d++) {
 8003bb8:	21b0      	movs	r1, #176	@ 0xb0
 8003bba:	187b      	adds	r3, r7, r1
 8003bbc:	781a      	ldrb	r2, [r3, #0]
 8003bbe:	187b      	adds	r3, r7, r1
 8003bc0:	3201      	adds	r2, #1
 8003bc2:	701a      	strb	r2, [r3, #0]
 8003bc4:	23b0      	movs	r3, #176	@ 0xb0
 8003bc6:	18fb      	adds	r3, r7, r3
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	2b03      	cmp	r3, #3
 8003bcc:	d9dc      	bls.n	8003b88 <getNextMove+0x30c>
  }

  return SOUTH;
 8003bce:	2302      	movs	r3, #2
}
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	b02f      	add	sp, #188	@ 0xbc
 8003bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bd8:	0800fae0 	.word	0x0800fae0
 8003bdc:	03000102 	.word	0x03000102
 8003be0:	080103a0 	.word	0x080103a0
 8003be4:	080103a4 	.word	0x080103a4
 8003be8:	200004c4 	.word	0x200004c4

08003bec <main>:

int main(void)
{
 8003bec:	b590      	push	{r4, r7, lr}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003bf2:	f001 f9cb 	bl	8004f8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003bf6:	f000 f8b3 	bl	8003d60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003bfa:	f000 fa29 	bl	8004050 <MX_GPIO_Init>
  MX_DMA_Init();
 8003bfe:	f000 fa11 	bl	8004024 <MX_DMA_Init>
  MX_TIM3_Init();
 8003c02:	f000 f987 	bl	8003f14 <MX_TIM3_Init>
  MX_ADC1_Init();
 8003c06:	f000 f919 	bl	8003e3c <MX_ADC1_Init>
  MX_BlueNRG_2_Init();
 8003c0a:	f7fe fc07 	bl	800241c <MX_BlueNRG_2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8003c0e:	f000 f8ef 	bl	8003df0 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  ihm12a1_stspin240_init(); // initializes XNucleo-IHM12A1 board
 8003c12:	f000 fb27 	bl	8004264 <ihm12a1_stspin240_init>
  enable_dualbridge();
 8003c16:	f000 fb0b 	bl	8004230 <enable_dualbridge>
//  MX_BlueNRG_2_Init();
  HAL_ADC_Start_DMA(&hadc1,&buffer,1);
 8003c1a:	494b      	ldr	r1, [pc, #300]	@ (8003d48 <main+0x15c>)
 8003c1c:	4b4b      	ldr	r3, [pc, #300]	@ (8003d4c <main+0x160>)
 8003c1e:	2201      	movs	r2, #1
 8003c20:	0018      	movs	r0, r3
 8003c22:	f001 fd63 	bl	80056ec <HAL_ADC_Start_DMA>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8003c26:	2380      	movs	r3, #128	@ 0x80
 8003c28:	00db      	lsls	r3, r3, #3
 8003c2a:	4849      	ldr	r0, [pc, #292]	@ (8003d50 <main+0x164>)
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	0019      	movs	r1, r3
 8003c30:	f002 ff27 	bl	8006a82 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 8003c34:	2380      	movs	r3, #128	@ 0x80
 8003c36:	011b      	lsls	r3, r3, #4
 8003c38:	4845      	ldr	r0, [pc, #276]	@ (8003d50 <main+0x164>)
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	0019      	movs	r1, r3
 8003c3e:	f002 ff20 	bl	8006a82 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 8003c42:	2380      	movs	r3, #128	@ 0x80
 8003c44:	015b      	lsls	r3, r3, #5
 8003c46:	4842      	ldr	r0, [pc, #264]	@ (8003d50 <main+0x164>)
 8003c48:	2201      	movs	r2, #1
 8003c4a:	0019      	movs	r1, r3
 8003c4c:	f002 ff19 	bl	8006a82 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8003c50:	4b40      	ldr	r3, [pc, #256]	@ (8003d54 <main+0x168>)
 8003c52:	2201      	movs	r2, #1
 8003c54:	2104      	movs	r1, #4
 8003c56:	0018      	movs	r0, r3
 8003c58:	f002 ff13 	bl	8006a82 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int x = 0, y = 0;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	60fb      	str	r3, [r7, #12]
 8003c60:	2300      	movs	r3, #0
 8003c62:	60bb      	str	r3, [r7, #8]
  Direction dir = SOUTH;
 8003c64:	1dfb      	adds	r3, r7, #7
 8003c66:	2202      	movs	r2, #2
 8003c68:	701a      	strb	r2, [r3, #0]
  while (!(x == COLS - 1 && y == ROWS - 1)) {
 8003c6a:	e061      	b.n	8003d30 <main+0x144>
    getData(x, y, dir);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	b2d8      	uxtb	r0, r3
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	b2d9      	uxtb	r1, r3
 8003c74:	1dfb      	adds	r3, r7, #7
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	001a      	movs	r2, r3
 8003c7a:	f7ff fd81 	bl	8003780 <getData>

    Direction nd = getNextMove(x, y);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	68ba      	ldr	r2, [r7, #8]
 8003c84:	b2d2      	uxtb	r2, r2
 8003c86:	1dbc      	adds	r4, r7, #6
 8003c88:	0011      	movs	r1, r2
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	f7ff fdf6 	bl	800387c <getNextMove>
 8003c90:	0003      	movs	r3, r0
 8003c92:	7023      	strb	r3, [r4, #0]
    if (nd == leftOf(dir))
 8003c94:	1dfb      	adds	r3, r7, #7
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	0018      	movs	r0, r3
 8003c9a:	f7ff fbff 	bl	800349c <leftOf>
 8003c9e:	0003      	movs	r3, r0
 8003ca0:	001a      	movs	r2, r3
 8003ca2:	1dbb      	adds	r3, r7, #6
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d103      	bne.n	8003cb2 <main+0xc6>
      rotate('L');
 8003caa:	204c      	movs	r0, #76	@ 0x4c
 8003cac:	f7ff fdc0 	bl	8003830 <rotate>
 8003cb0:	e01c      	b.n	8003cec <main+0x100>
    else if (nd == rightOf(dir))
 8003cb2:	1dfb      	adds	r3, r7, #7
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	f7ff fc01 	bl	80034be <rightOf>
 8003cbc:	0003      	movs	r3, r0
 8003cbe:	001a      	movs	r2, r3
 8003cc0:	1dbb      	adds	r3, r7, #6
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d103      	bne.n	8003cd0 <main+0xe4>
      rotate('R');
 8003cc8:	2052      	movs	r0, #82	@ 0x52
 8003cca:	f7ff fdb1 	bl	8003830 <rotate>
 8003cce:	e00d      	b.n	8003cec <main+0x100>
    else if (nd == behind(dir))
 8003cd0:	1dfb      	adds	r3, r7, #7
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	0018      	movs	r0, r3
 8003cd6:	f7ff fc03 	bl	80034e0 <behind>
 8003cda:	0003      	movs	r3, r0
 8003cdc:	001a      	movs	r2, r3
 8003cde:	1dbb      	adds	r3, r7, #6
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d102      	bne.n	8003cec <main+0x100>
      rotate('B');
 8003ce6:	2042      	movs	r0, #66	@ 0x42
 8003ce8:	f7ff fda2 	bl	8003830 <rotate>
    moveForward();
 8003cec:	f7ff fdb3 	bl	8003856 <moveForward>
    uint8_t stop = 'S';
 8003cf0:	1d7b      	adds	r3, r7, #5
 8003cf2:	2253      	movs	r2, #83	@ 0x53
 8003cf4:	701a      	strb	r2, [r3, #0]
    motordata(&stop);
 8003cf6:	1d7b      	adds	r3, r7, #5
 8003cf8:	0018      	movs	r0, r3
 8003cfa:	f000 fae1 	bl	80042c0 <motordata>

    x += dx[nd];
 8003cfe:	1dbb      	adds	r3, r7, #6
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	4a15      	ldr	r2, [pc, #84]	@ (8003d58 <main+0x16c>)
 8003d04:	56d3      	ldrsb	r3, [r2, r3]
 8003d06:	001a      	movs	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	189b      	adds	r3, r3, r2
 8003d0c:	60fb      	str	r3, [r7, #12]
    y += dy[nd];
 8003d0e:	1dbb      	adds	r3, r7, #6
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	4a12      	ldr	r2, [pc, #72]	@ (8003d5c <main+0x170>)
 8003d14:	56d3      	ldrsb	r3, [r2, r3]
 8003d16:	001a      	movs	r2, r3
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	189b      	adds	r3, r3, r2
 8003d1c:	60bb      	str	r3, [r7, #8]
    dir = nd;
 8003d1e:	1dfb      	adds	r3, r7, #7
 8003d20:	1dba      	adds	r2, r7, #6
 8003d22:	7812      	ldrb	r2, [r2, #0]
 8003d24:	701a      	strb	r2, [r3, #0]
    HAL_Delay(1000);
 8003d26:	23fa      	movs	r3, #250	@ 0xfa
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	f001 f9b4 	bl	8005098 <HAL_Delay>
  while (!(x == COLS - 1 && y == ROWS - 1)) {
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2b04      	cmp	r3, #4
 8003d34:	d19a      	bne.n	8003c6c <main+0x80>
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	2b04      	cmp	r3, #4
 8003d3a:	d197      	bne.n	8003c6c <main+0x80>
 8003d3c:	2300      	movs	r3, #0
  }
  /* USER CODE END 3 */
}
 8003d3e:	0018      	movs	r0, r3
 8003d40:	46bd      	mov	sp, r7
 8003d42:	b005      	add	sp, #20
 8003d44:	bd90      	pop	{r4, r7, pc}
 8003d46:	46c0      	nop			@ (mov r8, r8)
 8003d48:	200004c0 	.word	0x200004c0
 8003d4c:	200003b4 	.word	0x200003b4
 8003d50:	50000800 	.word	0x50000800
 8003d54:	50000c00 	.word	0x50000c00
 8003d58:	080103a0 	.word	0x080103a0
 8003d5c:	080103a4 	.word	0x080103a4

08003d60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d60:	b590      	push	{r4, r7, lr}
 8003d62:	b093      	sub	sp, #76	@ 0x4c
 8003d64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d66:	2414      	movs	r4, #20
 8003d68:	193b      	adds	r3, r7, r4
 8003d6a:	0018      	movs	r0, r3
 8003d6c:	2334      	movs	r3, #52	@ 0x34
 8003d6e:	001a      	movs	r2, r3
 8003d70:	2100      	movs	r1, #0
 8003d72:	f009 fd4d 	bl	800d810 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d76:	1d3b      	adds	r3, r7, #4
 8003d78:	0018      	movs	r0, r3
 8003d7a:	2310      	movs	r3, #16
 8003d7c:	001a      	movs	r2, r3
 8003d7e:	2100      	movs	r1, #0
 8003d80:	f009 fd46 	bl	800d810 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d84:	2380      	movs	r3, #128	@ 0x80
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	0018      	movs	r0, r3
 8003d8a:	f002 fef1 	bl	8006b70 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003d8e:	193b      	adds	r3, r7, r4
 8003d90:	2202      	movs	r2, #2
 8003d92:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003d94:	193b      	adds	r3, r7, r4
 8003d96:	2280      	movs	r2, #128	@ 0x80
 8003d98:	0052      	lsls	r2, r2, #1
 8003d9a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8003d9c:	193b      	adds	r3, r7, r4
 8003d9e:	2200      	movs	r2, #0
 8003da0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003da2:	193b      	adds	r3, r7, r4
 8003da4:	2240      	movs	r2, #64	@ 0x40
 8003da6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003da8:	193b      	adds	r3, r7, r4
 8003daa:	2200      	movs	r2, #0
 8003dac:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003dae:	193b      	adds	r3, r7, r4
 8003db0:	0018      	movs	r0, r3
 8003db2:	f002 ff29 	bl	8006c08 <HAL_RCC_OscConfig>
 8003db6:	1e03      	subs	r3, r0, #0
 8003db8:	d001      	beq.n	8003dbe <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8003dba:	f000 fb5f 	bl	800447c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003dbe:	1d3b      	adds	r3, r7, #4
 8003dc0:	2207      	movs	r2, #7
 8003dc2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003dc4:	1d3b      	adds	r3, r7, #4
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003dca:	1d3b      	adds	r3, r7, #4
 8003dcc:	2200      	movs	r2, #0
 8003dce:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003dd0:	1d3b      	adds	r3, r7, #4
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003dd6:	1d3b      	adds	r3, r7, #4
 8003dd8:	2100      	movs	r1, #0
 8003dda:	0018      	movs	r0, r3
 8003ddc:	f003 fa24 	bl	8007228 <HAL_RCC_ClockConfig>
 8003de0:	1e03      	subs	r3, r0, #0
 8003de2:	d001      	beq.n	8003de8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8003de4:	f000 fb4a 	bl	800447c <Error_Handler>
  }
}
 8003de8:	46c0      	nop			@ (mov r8, r8)
 8003dea:	46bd      	mov	sp, r7
 8003dec:	b013      	add	sp, #76	@ 0x4c
 8003dee:	bd90      	pop	{r4, r7, pc}

08003df0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
  /* EXTI0_1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8003df4:	2200      	movs	r2, #0
 8003df6:	2100      	movs	r1, #0
 8003df8:	2005      	movs	r0, #5
 8003dfa:	f002 f8cf 	bl	8005f9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8003dfe:	2005      	movs	r0, #5
 8003e00:	f002 f8e1 	bl	8005fc6 <HAL_NVIC_EnableIRQ>
  /* EXTI2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8003e04:	2200      	movs	r2, #0
 8003e06:	2100      	movs	r1, #0
 8003e08:	2006      	movs	r0, #6
 8003e0a:	f002 f8c7 	bl	8005f9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8003e0e:	2006      	movs	r0, #6
 8003e10:	f002 f8d9 	bl	8005fc6 <HAL_NVIC_EnableIRQ>
  /* EXTI4_15_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8003e14:	2200      	movs	r2, #0
 8003e16:	2100      	movs	r1, #0
 8003e18:	2007      	movs	r0, #7
 8003e1a:	f002 f8bf 	bl	8005f9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003e1e:	2007      	movs	r0, #7
 8003e20:	f002 f8d1 	bl	8005fc6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003e24:	2200      	movs	r2, #0
 8003e26:	2100      	movs	r1, #0
 8003e28:	2009      	movs	r0, #9
 8003e2a:	f002 f8b7 	bl	8005f9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003e2e:	2009      	movs	r0, #9
 8003e30:	f002 f8c9 	bl	8005fc6 <HAL_NVIC_EnableIRQ>
}
 8003e34:	46c0      	nop			@ (mov r8, r8)
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
	...

08003e3c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003e42:	1d3b      	adds	r3, r7, #4
 8003e44:	0018      	movs	r0, r3
 8003e46:	230c      	movs	r3, #12
 8003e48:	001a      	movs	r2, r3
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	f009 fce0 	bl	800d810 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003e50:	4b2d      	ldr	r3, [pc, #180]	@ (8003f08 <MX_ADC1_Init+0xcc>)
 8003e52:	4a2e      	ldr	r2, [pc, #184]	@ (8003f0c <MX_ADC1_Init+0xd0>)
 8003e54:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003e56:	4b2c      	ldr	r3, [pc, #176]	@ (8003f08 <MX_ADC1_Init+0xcc>)
 8003e58:	2280      	movs	r2, #128	@ 0x80
 8003e5a:	05d2      	lsls	r2, r2, #23
 8003e5c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003e5e:	4b2a      	ldr	r3, [pc, #168]	@ (8003f08 <MX_ADC1_Init+0xcc>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003e64:	4b28      	ldr	r3, [pc, #160]	@ (8003f08 <MX_ADC1_Init+0xcc>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003e6a:	4b27      	ldr	r3, [pc, #156]	@ (8003f08 <MX_ADC1_Init+0xcc>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003e70:	4b25      	ldr	r3, [pc, #148]	@ (8003f08 <MX_ADC1_Init+0xcc>)
 8003e72:	2204      	movs	r2, #4
 8003e74:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003e76:	4b24      	ldr	r3, [pc, #144]	@ (8003f08 <MX_ADC1_Init+0xcc>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8003e7c:	4b22      	ldr	r3, [pc, #136]	@ (8003f08 <MX_ADC1_Init+0xcc>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003e82:	4b21      	ldr	r3, [pc, #132]	@ (8003f08 <MX_ADC1_Init+0xcc>)
 8003e84:	2201      	movs	r2, #1
 8003e86:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8003e88:	4b1f      	ldr	r3, [pc, #124]	@ (8003f08 <MX_ADC1_Init+0xcc>)
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003e8e:	4b1e      	ldr	r3, [pc, #120]	@ (8003f08 <MX_ADC1_Init+0xcc>)
 8003e90:	2220      	movs	r2, #32
 8003e92:	2100      	movs	r1, #0
 8003e94:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003e96:	4b1c      	ldr	r3, [pc, #112]	@ (8003f08 <MX_ADC1_Init+0xcc>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003e9c:	4b1a      	ldr	r3, [pc, #104]	@ (8003f08 <MX_ADC1_Init+0xcc>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003ea2:	4b19      	ldr	r3, [pc, #100]	@ (8003f08 <MX_ADC1_Init+0xcc>)
 8003ea4:	222c      	movs	r2, #44	@ 0x2c
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003eaa:	4b17      	ldr	r3, [pc, #92]	@ (8003f08 <MX_ADC1_Init+0xcc>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8003eb0:	4b15      	ldr	r3, [pc, #84]	@ (8003f08 <MX_ADC1_Init+0xcc>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8003eb6:	4b14      	ldr	r3, [pc, #80]	@ (8003f08 <MX_ADC1_Init+0xcc>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8003ebc:	4b12      	ldr	r3, [pc, #72]	@ (8003f08 <MX_ADC1_Init+0xcc>)
 8003ebe:	223c      	movs	r2, #60	@ 0x3c
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8003ec4:	4b10      	ldr	r3, [pc, #64]	@ (8003f08 <MX_ADC1_Init+0xcc>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003eca:	4b0f      	ldr	r3, [pc, #60]	@ (8003f08 <MX_ADC1_Init+0xcc>)
 8003ecc:	0018      	movs	r0, r3
 8003ece:	f001 fa65 	bl	800539c <HAL_ADC_Init>
 8003ed2:	1e03      	subs	r3, r0, #0
 8003ed4:	d001      	beq.n	8003eda <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8003ed6:	f000 fad1 	bl	800447c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8003eda:	1d3b      	adds	r3, r7, #4
 8003edc:	4a0c      	ldr	r2, [pc, #48]	@ (8003f10 <MX_ADC1_Init+0xd4>)
 8003ede:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003ee0:	1d3b      	adds	r3, r7, #4
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8003ee6:	1d3b      	adds	r3, r7, #4
 8003ee8:	2200      	movs	r2, #0
 8003eea:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003eec:	1d3a      	adds	r2, r7, #4
 8003eee:	4b06      	ldr	r3, [pc, #24]	@ (8003f08 <MX_ADC1_Init+0xcc>)
 8003ef0:	0011      	movs	r1, r2
 8003ef2:	0018      	movs	r0, r3
 8003ef4:	f001 fc98 	bl	8005828 <HAL_ADC_ConfigChannel>
 8003ef8:	1e03      	subs	r3, r0, #0
 8003efa:	d001      	beq.n	8003f00 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8003efc:	f000 fabe 	bl	800447c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003f00:	46c0      	nop			@ (mov r8, r8)
 8003f02:	46bd      	mov	sp, r7
 8003f04:	b004      	add	sp, #16
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	200003b4 	.word	0x200003b4
 8003f0c:	40012400 	.word	0x40012400
 8003f10:	28000400 	.word	0x28000400

08003f14 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b08e      	sub	sp, #56	@ 0x38
 8003f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f1a:	2328      	movs	r3, #40	@ 0x28
 8003f1c:	18fb      	adds	r3, r7, r3
 8003f1e:	0018      	movs	r0, r3
 8003f20:	2310      	movs	r3, #16
 8003f22:	001a      	movs	r2, r3
 8003f24:	2100      	movs	r1, #0
 8003f26:	f009 fc73 	bl	800d810 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f2a:	231c      	movs	r3, #28
 8003f2c:	18fb      	adds	r3, r7, r3
 8003f2e:	0018      	movs	r0, r3
 8003f30:	230c      	movs	r3, #12
 8003f32:	001a      	movs	r2, r3
 8003f34:	2100      	movs	r1, #0
 8003f36:	f009 fc6b 	bl	800d810 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f3a:	003b      	movs	r3, r7
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	231c      	movs	r3, #28
 8003f40:	001a      	movs	r2, r3
 8003f42:	2100      	movs	r1, #0
 8003f44:	f009 fc64 	bl	800d810 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003f48:	4b34      	ldr	r3, [pc, #208]	@ (800401c <MX_TIM3_Init+0x108>)
 8003f4a:	4a35      	ldr	r2, [pc, #212]	@ (8004020 <MX_TIM3_Init+0x10c>)
 8003f4c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8003f4e:	4b33      	ldr	r3, [pc, #204]	@ (800401c <MX_TIM3_Init+0x108>)
 8003f50:	220f      	movs	r2, #15
 8003f52:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f54:	4b31      	ldr	r3, [pc, #196]	@ (800401c <MX_TIM3_Init+0x108>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8003f5a:	4b30      	ldr	r3, [pc, #192]	@ (800401c <MX_TIM3_Init+0x108>)
 8003f5c:	2263      	movs	r2, #99	@ 0x63
 8003f5e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f60:	4b2e      	ldr	r3, [pc, #184]	@ (800401c <MX_TIM3_Init+0x108>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f66:	4b2d      	ldr	r3, [pc, #180]	@ (800401c <MX_TIM3_Init+0x108>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003f6c:	4b2b      	ldr	r3, [pc, #172]	@ (800401c <MX_TIM3_Init+0x108>)
 8003f6e:	0018      	movs	r0, r3
 8003f70:	f004 f85c 	bl	800802c <HAL_TIM_Base_Init>
 8003f74:	1e03      	subs	r3, r0, #0
 8003f76:	d001      	beq.n	8003f7c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003f78:	f000 fa80 	bl	800447c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f7c:	2128      	movs	r1, #40	@ 0x28
 8003f7e:	187b      	adds	r3, r7, r1
 8003f80:	2280      	movs	r2, #128	@ 0x80
 8003f82:	0152      	lsls	r2, r2, #5
 8003f84:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003f86:	187a      	adds	r2, r7, r1
 8003f88:	4b24      	ldr	r3, [pc, #144]	@ (800401c <MX_TIM3_Init+0x108>)
 8003f8a:	0011      	movs	r1, r2
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	f004 fae9 	bl	8008564 <HAL_TIM_ConfigClockSource>
 8003f92:	1e03      	subs	r3, r0, #0
 8003f94:	d001      	beq.n	8003f9a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8003f96:	f000 fa71 	bl	800447c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003f9a:	4b20      	ldr	r3, [pc, #128]	@ (800401c <MX_TIM3_Init+0x108>)
 8003f9c:	0018      	movs	r0, r3
 8003f9e:	f004 f89d 	bl	80080dc <HAL_TIM_PWM_Init>
 8003fa2:	1e03      	subs	r3, r0, #0
 8003fa4:	d001      	beq.n	8003faa <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8003fa6:	f000 fa69 	bl	800447c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003faa:	211c      	movs	r1, #28
 8003fac:	187b      	adds	r3, r7, r1
 8003fae:	2200      	movs	r2, #0
 8003fb0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fb2:	187b      	adds	r3, r7, r1
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003fb8:	187a      	adds	r2, r7, r1
 8003fba:	4b18      	ldr	r3, [pc, #96]	@ (800401c <MX_TIM3_Init+0x108>)
 8003fbc:	0011      	movs	r1, r2
 8003fbe:	0018      	movs	r0, r3
 8003fc0:	f004 ffae 	bl	8008f20 <HAL_TIMEx_MasterConfigSynchronization>
 8003fc4:	1e03      	subs	r3, r0, #0
 8003fc6:	d001      	beq.n	8003fcc <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8003fc8:	f000 fa58 	bl	800447c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003fcc:	003b      	movs	r3, r7
 8003fce:	2260      	movs	r2, #96	@ 0x60
 8003fd0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003fd2:	003b      	movs	r3, r7
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003fd8:	003b      	movs	r3, r7
 8003fda:	2200      	movs	r2, #0
 8003fdc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003fde:	003b      	movs	r3, r7
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003fe4:	0039      	movs	r1, r7
 8003fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800401c <MX_TIM3_Init+0x108>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	0018      	movs	r0, r3
 8003fec:	f004 f9ba 	bl	8008364 <HAL_TIM_PWM_ConfigChannel>
 8003ff0:	1e03      	subs	r3, r0, #0
 8003ff2:	d001      	beq.n	8003ff8 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8003ff4:	f000 fa42 	bl	800447c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003ff8:	0039      	movs	r1, r7
 8003ffa:	4b08      	ldr	r3, [pc, #32]	@ (800401c <MX_TIM3_Init+0x108>)
 8003ffc:	2204      	movs	r2, #4
 8003ffe:	0018      	movs	r0, r3
 8004000:	f004 f9b0 	bl	8008364 <HAL_TIM_PWM_ConfigChannel>
 8004004:	1e03      	subs	r3, r0, #0
 8004006:	d001      	beq.n	800400c <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 8004008:	f000 fa38 	bl	800447c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800400c:	4b03      	ldr	r3, [pc, #12]	@ (800401c <MX_TIM3_Init+0x108>)
 800400e:	0018      	movs	r0, r3
 8004010:	f000 faf4 	bl	80045fc <HAL_TIM_MspPostInit>

}
 8004014:	46c0      	nop			@ (mov r8, r8)
 8004016:	46bd      	mov	sp, r7
 8004018:	b00e      	add	sp, #56	@ 0x38
 800401a:	bd80      	pop	{r7, pc}
 800401c:	20000474 	.word	0x20000474
 8004020:	40000400 	.word	0x40000400

08004024 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800402a:	4b08      	ldr	r3, [pc, #32]	@ (800404c <MX_DMA_Init+0x28>)
 800402c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800402e:	4b07      	ldr	r3, [pc, #28]	@ (800404c <MX_DMA_Init+0x28>)
 8004030:	2101      	movs	r1, #1
 8004032:	430a      	orrs	r2, r1
 8004034:	639a      	str	r2, [r3, #56]	@ 0x38
 8004036:	4b05      	ldr	r3, [pc, #20]	@ (800404c <MX_DMA_Init+0x28>)
 8004038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800403a:	2201      	movs	r2, #1
 800403c:	4013      	ands	r3, r2
 800403e:	607b      	str	r3, [r7, #4]
 8004040:	687b      	ldr	r3, [r7, #4]

}
 8004042:	46c0      	nop			@ (mov r8, r8)
 8004044:	46bd      	mov	sp, r7
 8004046:	b002      	add	sp, #8
 8004048:	bd80      	pop	{r7, pc}
 800404a:	46c0      	nop			@ (mov r8, r8)
 800404c:	40021000 	.word	0x40021000

08004050 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004050:	b590      	push	{r4, r7, lr}
 8004052:	b08b      	sub	sp, #44	@ 0x2c
 8004054:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004056:	2414      	movs	r4, #20
 8004058:	193b      	adds	r3, r7, r4
 800405a:	0018      	movs	r0, r3
 800405c:	2314      	movs	r3, #20
 800405e:	001a      	movs	r2, r3
 8004060:	2100      	movs	r1, #0
 8004062:	f009 fbd5 	bl	800d810 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004066:	4b6c      	ldr	r3, [pc, #432]	@ (8004218 <MX_GPIO_Init+0x1c8>)
 8004068:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800406a:	4b6b      	ldr	r3, [pc, #428]	@ (8004218 <MX_GPIO_Init+0x1c8>)
 800406c:	2104      	movs	r1, #4
 800406e:	430a      	orrs	r2, r1
 8004070:	635a      	str	r2, [r3, #52]	@ 0x34
 8004072:	4b69      	ldr	r3, [pc, #420]	@ (8004218 <MX_GPIO_Init+0x1c8>)
 8004074:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004076:	2204      	movs	r2, #4
 8004078:	4013      	ands	r3, r2
 800407a:	613b      	str	r3, [r7, #16]
 800407c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800407e:	4b66      	ldr	r3, [pc, #408]	@ (8004218 <MX_GPIO_Init+0x1c8>)
 8004080:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004082:	4b65      	ldr	r3, [pc, #404]	@ (8004218 <MX_GPIO_Init+0x1c8>)
 8004084:	2120      	movs	r1, #32
 8004086:	430a      	orrs	r2, r1
 8004088:	635a      	str	r2, [r3, #52]	@ 0x34
 800408a:	4b63      	ldr	r3, [pc, #396]	@ (8004218 <MX_GPIO_Init+0x1c8>)
 800408c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800408e:	2220      	movs	r2, #32
 8004090:	4013      	ands	r3, r2
 8004092:	60fb      	str	r3, [r7, #12]
 8004094:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004096:	4b60      	ldr	r3, [pc, #384]	@ (8004218 <MX_GPIO_Init+0x1c8>)
 8004098:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800409a:	4b5f      	ldr	r3, [pc, #380]	@ (8004218 <MX_GPIO_Init+0x1c8>)
 800409c:	2101      	movs	r1, #1
 800409e:	430a      	orrs	r2, r1
 80040a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80040a2:	4b5d      	ldr	r3, [pc, #372]	@ (8004218 <MX_GPIO_Init+0x1c8>)
 80040a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040a6:	2201      	movs	r2, #1
 80040a8:	4013      	ands	r3, r2
 80040aa:	60bb      	str	r3, [r7, #8]
 80040ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80040ae:	4b5a      	ldr	r3, [pc, #360]	@ (8004218 <MX_GPIO_Init+0x1c8>)
 80040b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040b2:	4b59      	ldr	r3, [pc, #356]	@ (8004218 <MX_GPIO_Init+0x1c8>)
 80040b4:	2102      	movs	r1, #2
 80040b6:	430a      	orrs	r2, r1
 80040b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80040ba:	4b57      	ldr	r3, [pc, #348]	@ (8004218 <MX_GPIO_Init+0x1c8>)
 80040bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040be:	2202      	movs	r2, #2
 80040c0:	4013      	ands	r3, r2
 80040c2:	607b      	str	r3, [r7, #4]
 80040c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80040c6:	4b54      	ldr	r3, [pc, #336]	@ (8004218 <MX_GPIO_Init+0x1c8>)
 80040c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040ca:	4b53      	ldr	r3, [pc, #332]	@ (8004218 <MX_GPIO_Init+0x1c8>)
 80040cc:	2108      	movs	r1, #8
 80040ce:	430a      	orrs	r2, r1
 80040d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80040d2:	4b51      	ldr	r3, [pc, #324]	@ (8004218 <MX_GPIO_Init+0x1c8>)
 80040d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040d6:	2208      	movs	r2, #8
 80040d8:	4013      	ands	r3, r2
 80040da:	603b      	str	r3, [r7, #0]
 80040dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED4_Pin|LED3_Pin|BLNRG_RST_Pin|RST_Pin
 80040de:	494f      	ldr	r1, [pc, #316]	@ (800421c <MX_GPIO_Init+0x1cc>)
 80040e0:	4b4f      	ldr	r3, [pc, #316]	@ (8004220 <MX_GPIO_Init+0x1d0>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	0018      	movs	r0, r3
 80040e6:	f002 fccc 	bl	8006a82 <HAL_GPIO_WritePin>
                          |LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CS_Pin|PHB_Pin|REF_Pin|EN_IHM_Pin, GPIO_PIN_RESET);
 80040ea:	494e      	ldr	r1, [pc, #312]	@ (8004224 <MX_GPIO_Init+0x1d4>)
 80040ec:	23a0      	movs	r3, #160	@ 0xa0
 80040ee:	05db      	lsls	r3, r3, #23
 80040f0:	2200      	movs	r2, #0
 80040f2:	0018      	movs	r0, r3
 80040f4:	f002 fcc5 	bl	8006a82 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PHA_GPIO_Port, PHA_Pin, GPIO_PIN_RESET);
 80040f8:	2380      	movs	r3, #128	@ 0x80
 80040fa:	01db      	lsls	r3, r3, #7
 80040fc:	484a      	ldr	r0, [pc, #296]	@ (8004228 <MX_GPIO_Init+0x1d8>)
 80040fe:	2200      	movs	r2, #0
 8004100:	0019      	movs	r1, r3
 8004102:	f002 fcbe 	bl	8006a82 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 8004106:	4b49      	ldr	r3, [pc, #292]	@ (800422c <MX_GPIO_Init+0x1dc>)
 8004108:	2200      	movs	r2, #0
 800410a:	2104      	movs	r1, #4
 800410c:	0018      	movs	r0, r3
 800410e:	f002 fcb8 	bl	8006a82 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED4_Pin LED3_Pin BLNRG_RST_Pin RST_Pin
                           LED2_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|BLNRG_RST_Pin|RST_Pin
 8004112:	193b      	adds	r3, r7, r4
 8004114:	4a41      	ldr	r2, [pc, #260]	@ (800421c <MX_GPIO_Init+0x1cc>)
 8004116:	601a      	str	r2, [r3, #0]
                          |LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004118:	193b      	adds	r3, r7, r4
 800411a:	2201      	movs	r2, #1
 800411c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800411e:	193b      	adds	r3, r7, r4
 8004120:	2200      	movs	r2, #0
 8004122:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004124:	193b      	adds	r3, r7, r4
 8004126:	2200      	movs	r2, #0
 8004128:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800412a:	193b      	adds	r3, r7, r4
 800412c:	4a3c      	ldr	r2, [pc, #240]	@ (8004220 <MX_GPIO_Init+0x1d0>)
 800412e:	0019      	movs	r1, r3
 8004130:	0010      	movs	r0, r2
 8004132:	f002 fa55 	bl	80065e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_ENCODER1_Pin INT_ENCODER2_Pin */
  GPIO_InitStruct.Pin = INT_ENCODER1_Pin|INT_ENCODER2_Pin;
 8004136:	0021      	movs	r1, r4
 8004138:	187b      	adds	r3, r7, r1
 800413a:	2206      	movs	r2, #6
 800413c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800413e:	187b      	adds	r3, r7, r1
 8004140:	2288      	movs	r2, #136	@ 0x88
 8004142:	0352      	lsls	r2, r2, #13
 8004144:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004146:	000c      	movs	r4, r1
 8004148:	193b      	adds	r3, r7, r4
 800414a:	2200      	movs	r2, #0
 800414c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800414e:	193b      	adds	r3, r7, r4
 8004150:	4a33      	ldr	r2, [pc, #204]	@ (8004220 <MX_GPIO_Init+0x1d0>)
 8004152:	0019      	movs	r1, r3
 8004154:	0010      	movs	r0, r2
 8004156:	f002 fa43 	bl	80065e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_BNRG_EXTI_Pin */
  GPIO_InitStruct.Pin = SPI_BNRG_EXTI_Pin;
 800415a:	193b      	adds	r3, r7, r4
 800415c:	2201      	movs	r2, #1
 800415e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004160:	193b      	adds	r3, r7, r4
 8004162:	2288      	movs	r2, #136	@ 0x88
 8004164:	0352      	lsls	r2, r2, #13
 8004166:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004168:	193b      	adds	r3, r7, r4
 800416a:	2200      	movs	r2, #0
 800416c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SPI_BNRG_EXTI_GPIO_Port, &GPIO_InitStruct);
 800416e:	193a      	adds	r2, r7, r4
 8004170:	23a0      	movs	r3, #160	@ 0xa0
 8004172:	05db      	lsls	r3, r3, #23
 8004174:	0011      	movs	r1, r2
 8004176:	0018      	movs	r0, r3
 8004178:	f002 fa32 	bl	80065e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CS_Pin PHB_Pin REF_Pin EN_IHM_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin|PHB_Pin|REF_Pin|EN_IHM_Pin;
 800417c:	193b      	adds	r3, r7, r4
 800417e:	4a29      	ldr	r2, [pc, #164]	@ (8004224 <MX_GPIO_Init+0x1d4>)
 8004180:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004182:	193b      	adds	r3, r7, r4
 8004184:	2201      	movs	r2, #1
 8004186:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004188:	193b      	adds	r3, r7, r4
 800418a:	2200      	movs	r2, #0
 800418c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800418e:	193b      	adds	r3, r7, r4
 8004190:	2200      	movs	r2, #0
 8004192:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004194:	193a      	adds	r2, r7, r4
 8004196:	23a0      	movs	r3, #160	@ 0xa0
 8004198:	05db      	lsls	r3, r3, #23
 800419a:	0011      	movs	r1, r2
 800419c:	0018      	movs	r0, r3
 800419e:	f002 fa1f 	bl	80065e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PHA_Pin */
  GPIO_InitStruct.Pin = PHA_Pin;
 80041a2:	0021      	movs	r1, r4
 80041a4:	187b      	adds	r3, r7, r1
 80041a6:	2280      	movs	r2, #128	@ 0x80
 80041a8:	01d2      	lsls	r2, r2, #7
 80041aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041ac:	000c      	movs	r4, r1
 80041ae:	193b      	adds	r3, r7, r4
 80041b0:	2201      	movs	r2, #1
 80041b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b4:	193b      	adds	r3, r7, r4
 80041b6:	2200      	movs	r2, #0
 80041b8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041ba:	193b      	adds	r3, r7, r4
 80041bc:	2200      	movs	r2, #0
 80041be:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(PHA_GPIO_Port, &GPIO_InitStruct);
 80041c0:	193b      	adds	r3, r7, r4
 80041c2:	4a19      	ldr	r2, [pc, #100]	@ (8004228 <MX_GPIO_Init+0x1d8>)
 80041c4:	0019      	movs	r1, r3
 80041c6:	0010      	movs	r0, r2
 80041c8:	f002 fa0a 	bl	80065e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED5_Pin */
  GPIO_InitStruct.Pin = LED5_Pin;
 80041cc:	193b      	adds	r3, r7, r4
 80041ce:	2204      	movs	r2, #4
 80041d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041d2:	193b      	adds	r3, r7, r4
 80041d4:	2201      	movs	r2, #1
 80041d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041d8:	193b      	adds	r3, r7, r4
 80041da:	2200      	movs	r2, #0
 80041dc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041de:	193b      	adds	r3, r7, r4
 80041e0:	2200      	movs	r2, #0
 80041e2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED5_GPIO_Port, &GPIO_InitStruct);
 80041e4:	193b      	adds	r3, r7, r4
 80041e6:	4a11      	ldr	r2, [pc, #68]	@ (800422c <MX_GPIO_Init+0x1dc>)
 80041e8:	0019      	movs	r1, r3
 80041ea:	0010      	movs	r0, r2
 80041ec:	f002 f9f8 	bl	80065e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENCODER1_DATA_Pin ENCODER2_DATA_Pin */
  GPIO_InitStruct.Pin = ENCODER1_DATA_Pin|ENCODER2_DATA_Pin;
 80041f0:	0021      	movs	r1, r4
 80041f2:	187b      	adds	r3, r7, r1
 80041f4:	2248      	movs	r2, #72	@ 0x48
 80041f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041f8:	187b      	adds	r3, r7, r1
 80041fa:	2200      	movs	r2, #0
 80041fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041fe:	187b      	adds	r3, r7, r1
 8004200:	2200      	movs	r2, #0
 8004202:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004204:	187b      	adds	r3, r7, r1
 8004206:	4a08      	ldr	r2, [pc, #32]	@ (8004228 <MX_GPIO_Init+0x1d8>)
 8004208:	0019      	movs	r1, r3
 800420a:	0010      	movs	r0, r2
 800420c:	f002 f9e8 	bl	80065e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004210:	46c0      	nop			@ (mov r8, r8)
 8004212:	46bd      	mov	sp, r7
 8004214:	b00b      	add	sp, #44	@ 0x2c
 8004216:	bd90      	pop	{r4, r7, pc}
 8004218:	40021000 	.word	0x40021000
 800421c:	00001c90 	.word	0x00001c90
 8004220:	50000800 	.word	0x50000800
 8004224:	00000702 	.word	0x00000702
 8004228:	50000400 	.word	0x50000400
 800422c:	50000c00 	.word	0x50000c00

08004230 <enable_dualbridge>:
       state=!state;
        previousMillis = currentMillis;
      }
}
void enable_dualbridge(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
  TIM3->CCR1 = 0; //pwma
 8004234:	4b09      	ldr	r3, [pc, #36]	@ (800425c <enable_dualbridge+0x2c>)
 8004236:	2200      	movs	r2, #0
 8004238:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //timer 15 channel 1
 800423a:	4b09      	ldr	r3, [pc, #36]	@ (8004260 <enable_dualbridge+0x30>)
 800423c:	2100      	movs	r1, #0
 800423e:	0018      	movs	r0, r3
 8004240:	f003 ffac 	bl	800819c <HAL_TIM_PWM_Start>
  TIM3->CCR2 = 0; //pwmb
 8004244:	4b05      	ldr	r3, [pc, #20]	@ (800425c <enable_dualbridge+0x2c>)
 8004246:	2200      	movs	r2, #0
 8004248:	639a      	str	r2, [r3, #56]	@ 0x38
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);//timer 15 channel 2
 800424a:	4b05      	ldr	r3, [pc, #20]	@ (8004260 <enable_dualbridge+0x30>)
 800424c:	2104      	movs	r1, #4
 800424e:	0018      	movs	r0, r3
 8004250:	f003 ffa4 	bl	800819c <HAL_TIM_PWM_Start>
}
 8004254:	46c0      	nop			@ (mov r8, r8)
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	46c0      	nop			@ (mov r8, r8)
 800425c:	40000400 	.word	0x40000400
 8004260:	20000474 	.word	0x20000474

08004264 <ihm12a1_stspin240_init>:
void ihm12a1_stspin240_init(void)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET); //sys_rst high
 8004268:	4b13      	ldr	r3, [pc, #76]	@ (80042b8 <ihm12a1_stspin240_init+0x54>)
 800426a:	2201      	movs	r2, #1
 800426c:	2180      	movs	r1, #128	@ 0x80
 800426e:	0018      	movs	r0, r3
 8004270:	f002 fc07 	bl	8006a82 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);   //dir2 high
 8004274:	2380      	movs	r3, #128	@ 0x80
 8004276:	0059      	lsls	r1, r3, #1
 8004278:	23a0      	movs	r3, #160	@ 0xa0
 800427a:	05db      	lsls	r3, r3, #23
 800427c:	2200      	movs	r2, #0
 800427e:	0018      	movs	r0, r3
 8004280:	f002 fbff 	bl	8006a82 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);  //dir1 high
 8004284:	2380      	movs	r3, #128	@ 0x80
 8004286:	01db      	lsls	r3, r3, #7
 8004288:	480c      	ldr	r0, [pc, #48]	@ (80042bc <ihm12a1_stspin240_init+0x58>)
 800428a:	2200      	movs	r2, #0
 800428c:	0019      	movs	r1, r3
 800428e:	f002 fbf8 	bl	8006a82 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);   //ref high = 100% Duty cycle
 8004292:	2380      	movs	r3, #128	@ 0x80
 8004294:	0099      	lsls	r1, r3, #2
 8004296:	23a0      	movs	r3, #160	@ 0xa0
 8004298:	05db      	lsls	r3, r3, #23
 800429a:	2201      	movs	r2, #1
 800429c:	0018      	movs	r0, r3
 800429e:	f002 fbf0 	bl	8006a82 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80042a2:	2380      	movs	r3, #128	@ 0x80
 80042a4:	00d9      	lsls	r1, r3, #3
 80042a6:	23a0      	movs	r3, #160	@ 0xa0
 80042a8:	05db      	lsls	r3, r3, #23
 80042aa:	2201      	movs	r2, #1
 80042ac:	0018      	movs	r0, r3
 80042ae:	f002 fbe8 	bl	8006a82 <HAL_GPIO_WritePin>
//  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
//  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
}
 80042b2:	46c0      	nop			@ (mov r8, r8)
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	50000800 	.word	0x50000800
 80042bc:	50000400 	.word	0x50000400

080042c0 <motordata>:
void motordata(uint8_t *data)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
     switch(data[0])
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	3b42      	subs	r3, #66	@ 0x42
 80042ce:	2b11      	cmp	r3, #17
 80042d0:	d900      	bls.n	80042d4 <motordata+0x14>
 80042d2:	e0c2      	b.n	800445a <motordata+0x19a>
 80042d4:	009a      	lsls	r2, r3, #2
 80042d6:	4b66      	ldr	r3, [pc, #408]	@ (8004470 <motordata+0x1b0>)
 80042d8:	18d3      	adds	r3, r2, r3
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	469f      	mov	pc, r3
     {
                /*F: to move forward*/
     case 'F':
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);//DIR_1
 80042de:	2380      	movs	r3, #128	@ 0x80
 80042e0:	0059      	lsls	r1, r3, #1
 80042e2:	23a0      	movs	r3, #160	@ 0xa0
 80042e4:	05db      	lsls	r3, r3, #23
 80042e6:	2200      	movs	r2, #0
 80042e8:	0018      	movs	r0, r3
 80042ea:	f002 fbca 	bl	8006a82 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);//DIR_2
 80042ee:	2380      	movs	r3, #128	@ 0x80
 80042f0:	01db      	lsls	r3, r3, #7
 80042f2:	4860      	ldr	r0, [pc, #384]	@ (8004474 <motordata+0x1b4>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	0019      	movs	r1, r3
 80042f8:	f002 fbc3 	bl	8006a82 <HAL_GPIO_WritePin>
        TIM3->CCR2 = 100;
 80042fc:	4b5e      	ldr	r3, [pc, #376]	@ (8004478 <motordata+0x1b8>)
 80042fe:	2264      	movs	r2, #100	@ 0x64
 8004300:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3->CCR1 = 100;
 8004302:	4b5d      	ldr	r3, [pc, #372]	@ (8004478 <motordata+0x1b8>)
 8004304:	2264      	movs	r2, #100	@ 0x64
 8004306:	635a      	str	r2, [r3, #52]	@ 0x34
        HAL_Delay(25);
 8004308:	2019      	movs	r0, #25
 800430a:	f000 fec5 	bl	8005098 <HAL_Delay>
        TIM3->CCR2 = 90;
 800430e:	4b5a      	ldr	r3, [pc, #360]	@ (8004478 <motordata+0x1b8>)
 8004310:	225a      	movs	r2, #90	@ 0x5a
 8004312:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3->CCR1 = 90;
 8004314:	4b58      	ldr	r3, [pc, #352]	@ (8004478 <motordata+0x1b8>)
 8004316:	225a      	movs	r2, #90	@ 0x5a
 8004318:	635a      	str	r2, [r3, #52]	@ 0x34
        HAL_Delay(15);
 800431a:	200f      	movs	r0, #15
 800431c:	f000 febc 	bl	8005098 <HAL_Delay>
        TIM3->CCR2 = 100;
 8004320:	4b55      	ldr	r3, [pc, #340]	@ (8004478 <motordata+0x1b8>)
 8004322:	2264      	movs	r2, #100	@ 0x64
 8004324:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3->CCR1 = 100;
 8004326:	4b54      	ldr	r3, [pc, #336]	@ (8004478 <motordata+0x1b8>)
 8004328:	2264      	movs	r2, #100	@ 0x64
 800432a:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 800432c:	e09c      	b.n	8004468 <motordata+0x1a8>
    /*L: to turn left*/
    case 'L':
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);//DIR_2
 800432e:	2380      	movs	r3, #128	@ 0x80
 8004330:	01db      	lsls	r3, r3, #7
 8004332:	4850      	ldr	r0, [pc, #320]	@ (8004474 <motordata+0x1b4>)
 8004334:	2201      	movs	r2, #1
 8004336:	0019      	movs	r1, r3
 8004338:	f002 fba3 	bl	8006a82 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);//DIR_1
 800433c:	2380      	movs	r3, #128	@ 0x80
 800433e:	0059      	lsls	r1, r3, #1
 8004340:	23a0      	movs	r3, #160	@ 0xa0
 8004342:	05db      	lsls	r3, r3, #23
 8004344:	2200      	movs	r2, #0
 8004346:	0018      	movs	r0, r3
 8004348:	f002 fb9b 	bl	8006a82 <HAL_GPIO_WritePin>
        TIM3->CCR2 = 100;
 800434c:	4b4a      	ldr	r3, [pc, #296]	@ (8004478 <motordata+0x1b8>)
 800434e:	2264      	movs	r2, #100	@ 0x64
 8004350:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3->CCR1 = 100;
 8004352:	4b49      	ldr	r3, [pc, #292]	@ (8004478 <motordata+0x1b8>)
 8004354:	2264      	movs	r2, #100	@ 0x64
 8004356:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 8004358:	e086      	b.n	8004468 <motordata+0x1a8>
    /*R: to turn right*/
    case 'R':
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);//DIR_1
 800435a:	2380      	movs	r3, #128	@ 0x80
 800435c:	0059      	lsls	r1, r3, #1
 800435e:	23a0      	movs	r3, #160	@ 0xa0
 8004360:	05db      	lsls	r3, r3, #23
 8004362:	2201      	movs	r2, #1
 8004364:	0018      	movs	r0, r3
 8004366:	f002 fb8c 	bl	8006a82 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);//DIR_2
 800436a:	2380      	movs	r3, #128	@ 0x80
 800436c:	01db      	lsls	r3, r3, #7
 800436e:	4841      	ldr	r0, [pc, #260]	@ (8004474 <motordata+0x1b4>)
 8004370:	2200      	movs	r2, #0
 8004372:	0019      	movs	r1, r3
 8004374:	f002 fb85 	bl	8006a82 <HAL_GPIO_WritePin>
        TIM3->CCR2 = 100;
 8004378:	4b3f      	ldr	r3, [pc, #252]	@ (8004478 <motordata+0x1b8>)
 800437a:	2264      	movs	r2, #100	@ 0x64
 800437c:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3->CCR1 = 100;
 800437e:	4b3e      	ldr	r3, [pc, #248]	@ (8004478 <motordata+0x1b8>)
 8004380:	2264      	movs	r2, #100	@ 0x64
 8004382:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 8004384:	e070      	b.n	8004468 <motordata+0x1a8>
    /*B: to move backward*/
    case 'B':
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);//DIR_2
 8004386:	2380      	movs	r3, #128	@ 0x80
 8004388:	01db      	lsls	r3, r3, #7
 800438a:	483a      	ldr	r0, [pc, #232]	@ (8004474 <motordata+0x1b4>)
 800438c:	2201      	movs	r2, #1
 800438e:	0019      	movs	r1, r3
 8004390:	f002 fb77 	bl	8006a82 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);//DIR_1
 8004394:	2380      	movs	r3, #128	@ 0x80
 8004396:	0059      	lsls	r1, r3, #1
 8004398:	23a0      	movs	r3, #160	@ 0xa0
 800439a:	05db      	lsls	r3, r3, #23
 800439c:	2201      	movs	r2, #1
 800439e:	0018      	movs	r0, r3
 80043a0:	f002 fb6f 	bl	8006a82 <HAL_GPIO_WritePin>
        TIM3->CCR2 = 100;
 80043a4:	4b34      	ldr	r3, [pc, #208]	@ (8004478 <motordata+0x1b8>)
 80043a6:	2264      	movs	r2, #100	@ 0x64
 80043a8:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3->CCR1 = 100;
 80043aa:	4b33      	ldr	r3, [pc, #204]	@ (8004478 <motordata+0x1b8>)
 80043ac:	2264      	movs	r2, #100	@ 0x64
 80043ae:	635a      	str	r2, [r3, #52]	@ 0x34
        HAL_Delay(25);
 80043b0:	2019      	movs	r0, #25
 80043b2:	f000 fe71 	bl	8005098 <HAL_Delay>
        TIM3->CCR2 = 90;
 80043b6:	4b30      	ldr	r3, [pc, #192]	@ (8004478 <motordata+0x1b8>)
 80043b8:	225a      	movs	r2, #90	@ 0x5a
 80043ba:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3->CCR1 = 90;
 80043bc:	4b2e      	ldr	r3, [pc, #184]	@ (8004478 <motordata+0x1b8>)
 80043be:	225a      	movs	r2, #90	@ 0x5a
 80043c0:	635a      	str	r2, [r3, #52]	@ 0x34
        HAL_Delay(15);
 80043c2:	200f      	movs	r0, #15
 80043c4:	f000 fe68 	bl	8005098 <HAL_Delay>
        TIM3->CCR2 = 100;
 80043c8:	4b2b      	ldr	r3, [pc, #172]	@ (8004478 <motordata+0x1b8>)
 80043ca:	2264      	movs	r2, #100	@ 0x64
 80043cc:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3->CCR1 = 100;
 80043ce:	4b2a      	ldr	r3, [pc, #168]	@ (8004478 <motordata+0x1b8>)
 80043d0:	2264      	movs	r2, #100	@ 0x64
 80043d2:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 80043d4:	e048      	b.n	8004468 <motordata+0x1a8>
    /*Q: to move anti-clockwise until another button pressed*/
    case 'Q':
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);//DIR_1
 80043d6:	2380      	movs	r3, #128	@ 0x80
 80043d8:	0059      	lsls	r1, r3, #1
 80043da:	23a0      	movs	r3, #160	@ 0xa0
 80043dc:	05db      	lsls	r3, r3, #23
 80043de:	2200      	movs	r2, #0
 80043e0:	0018      	movs	r0, r3
 80043e2:	f002 fb4e 	bl	8006a82 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);//DIR_2
 80043e6:	2380      	movs	r3, #128	@ 0x80
 80043e8:	01db      	lsls	r3, r3, #7
 80043ea:	4822      	ldr	r0, [pc, #136]	@ (8004474 <motordata+0x1b4>)
 80043ec:	2201      	movs	r2, #1
 80043ee:	0019      	movs	r1, r3
 80043f0:	f002 fb47 	bl	8006a82 <HAL_GPIO_WritePin>
        TIM3->CCR2 = 60;
 80043f4:	4b20      	ldr	r3, [pc, #128]	@ (8004478 <motordata+0x1b8>)
 80043f6:	223c      	movs	r2, #60	@ 0x3c
 80043f8:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3->CCR1 = 25;
 80043fa:	4b1f      	ldr	r3, [pc, #124]	@ (8004478 <motordata+0x1b8>)
 80043fc:	2219      	movs	r2, #25
 80043fe:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 8004400:	e032      	b.n	8004468 <motordata+0x1a8>
    /*C: to move clockwise until another button pressed*/
    case 'C':
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);//DIR_1
 8004402:	2380      	movs	r3, #128	@ 0x80
 8004404:	0059      	lsls	r1, r3, #1
 8004406:	23a0      	movs	r3, #160	@ 0xa0
 8004408:	05db      	lsls	r3, r3, #23
 800440a:	2201      	movs	r2, #1
 800440c:	0018      	movs	r0, r3
 800440e:	f002 fb38 	bl	8006a82 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);//DIR_2
 8004412:	2380      	movs	r3, #128	@ 0x80
 8004414:	01db      	lsls	r3, r3, #7
 8004416:	4817      	ldr	r0, [pc, #92]	@ (8004474 <motordata+0x1b4>)
 8004418:	2200      	movs	r2, #0
 800441a:	0019      	movs	r1, r3
 800441c:	f002 fb31 	bl	8006a82 <HAL_GPIO_WritePin>
        TIM3->CCR2 = 60;
 8004420:	4b15      	ldr	r3, [pc, #84]	@ (8004478 <motordata+0x1b8>)
 8004422:	223c      	movs	r2, #60	@ 0x3c
 8004424:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3->CCR1 = 25;
 8004426:	4b14      	ldr	r3, [pc, #80]	@ (8004478 <motordata+0x1b8>)
 8004428:	2219      	movs	r2, #25
 800442a:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 800442c:	e01c      	b.n	8004468 <motordata+0x1a8>
    case 'S':
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);//DIR_1
 800442e:	2380      	movs	r3, #128	@ 0x80
 8004430:	0059      	lsls	r1, r3, #1
 8004432:	23a0      	movs	r3, #160	@ 0xa0
 8004434:	05db      	lsls	r3, r3, #23
 8004436:	2201      	movs	r2, #1
 8004438:	0018      	movs	r0, r3
 800443a:	f002 fb22 	bl	8006a82 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);//DIR_2
 800443e:	2380      	movs	r3, #128	@ 0x80
 8004440:	01db      	lsls	r3, r3, #7
 8004442:	480c      	ldr	r0, [pc, #48]	@ (8004474 <motordata+0x1b4>)
 8004444:	2201      	movs	r2, #1
 8004446:	0019      	movs	r1, r3
 8004448:	f002 fb1b 	bl	8006a82 <HAL_GPIO_WritePin>
        TIM3->CCR2 = 0;
 800444c:	4b0a      	ldr	r3, [pc, #40]	@ (8004478 <motordata+0x1b8>)
 800444e:	2200      	movs	r2, #0
 8004450:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3->CCR1 = 0;
 8004452:	4b09      	ldr	r3, [pc, #36]	@ (8004478 <motordata+0x1b8>)
 8004454:	2200      	movs	r2, #0
 8004456:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 8004458:	e006      	b.n	8004468 <motordata+0x1a8>
    default:
        TIM3->CCR2 = 0;
 800445a:	4b07      	ldr	r3, [pc, #28]	@ (8004478 <motordata+0x1b8>)
 800445c:	2200      	movs	r2, #0
 800445e:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3->CCR1 = 0;
 8004460:	4b05      	ldr	r3, [pc, #20]	@ (8004478 <motordata+0x1b8>)
 8004462:	2200      	movs	r2, #0
 8004464:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 8004466:	46c0      	nop			@ (mov r8, r8)
    }
}
 8004468:	46c0      	nop			@ (mov r8, r8)
 800446a:	46bd      	mov	sp, r7
 800446c:	b002      	add	sp, #8
 800446e:	bd80      	pop	{r7, pc}
 8004470:	08010428 	.word	0x08010428
 8004474:	50000400 	.word	0x50000400
 8004478:	40000400 	.word	0x40000400

0800447c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004480:	b672      	cpsid	i
}
 8004482:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004484:	46c0      	nop			@ (mov r8, r8)
 8004486:	e7fd      	b.n	8004484 <Error_Handler+0x8>

08004488 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800448e:	4b11      	ldr	r3, [pc, #68]	@ (80044d4 <HAL_MspInit+0x4c>)
 8004490:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004492:	4b10      	ldr	r3, [pc, #64]	@ (80044d4 <HAL_MspInit+0x4c>)
 8004494:	2101      	movs	r1, #1
 8004496:	430a      	orrs	r2, r1
 8004498:	641a      	str	r2, [r3, #64]	@ 0x40
 800449a:	4b0e      	ldr	r3, [pc, #56]	@ (80044d4 <HAL_MspInit+0x4c>)
 800449c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800449e:	2201      	movs	r2, #1
 80044a0:	4013      	ands	r3, r2
 80044a2:	607b      	str	r3, [r7, #4]
 80044a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80044a6:	4b0b      	ldr	r3, [pc, #44]	@ (80044d4 <HAL_MspInit+0x4c>)
 80044a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044aa:	4b0a      	ldr	r3, [pc, #40]	@ (80044d4 <HAL_MspInit+0x4c>)
 80044ac:	2180      	movs	r1, #128	@ 0x80
 80044ae:	0549      	lsls	r1, r1, #21
 80044b0:	430a      	orrs	r2, r1
 80044b2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80044b4:	4b07      	ldr	r3, [pc, #28]	@ (80044d4 <HAL_MspInit+0x4c>)
 80044b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044b8:	2380      	movs	r3, #128	@ 0x80
 80044ba:	055b      	lsls	r3, r3, #21
 80044bc:	4013      	ands	r3, r2
 80044be:	603b      	str	r3, [r7, #0]
 80044c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80044c2:	23c0      	movs	r3, #192	@ 0xc0
 80044c4:	00db      	lsls	r3, r3, #3
 80044c6:	0018      	movs	r0, r3
 80044c8:	f000 fe0a 	bl	80050e0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80044cc:	46c0      	nop			@ (mov r8, r8)
 80044ce:	46bd      	mov	sp, r7
 80044d0:	b002      	add	sp, #8
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	40021000 	.word	0x40021000

080044d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80044d8:	b590      	push	{r4, r7, lr}
 80044da:	b08b      	sub	sp, #44	@ 0x2c
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044e0:	2414      	movs	r4, #20
 80044e2:	193b      	adds	r3, r7, r4
 80044e4:	0018      	movs	r0, r3
 80044e6:	2314      	movs	r3, #20
 80044e8:	001a      	movs	r2, r3
 80044ea:	2100      	movs	r1, #0
 80044ec:	f009 f990 	bl	800d810 <memset>
  if(hadc->Instance==ADC1)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a2d      	ldr	r2, [pc, #180]	@ (80045ac <HAL_ADC_MspInit+0xd4>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d153      	bne.n	80045a2 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80044fa:	4b2d      	ldr	r3, [pc, #180]	@ (80045b0 <HAL_ADC_MspInit+0xd8>)
 80044fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80044fe:	4b2c      	ldr	r3, [pc, #176]	@ (80045b0 <HAL_ADC_MspInit+0xd8>)
 8004500:	2180      	movs	r1, #128	@ 0x80
 8004502:	0349      	lsls	r1, r1, #13
 8004504:	430a      	orrs	r2, r1
 8004506:	641a      	str	r2, [r3, #64]	@ 0x40
 8004508:	4b29      	ldr	r3, [pc, #164]	@ (80045b0 <HAL_ADC_MspInit+0xd8>)
 800450a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800450c:	2380      	movs	r3, #128	@ 0x80
 800450e:	035b      	lsls	r3, r3, #13
 8004510:	4013      	ands	r3, r2
 8004512:	613b      	str	r3, [r7, #16]
 8004514:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004516:	4b26      	ldr	r3, [pc, #152]	@ (80045b0 <HAL_ADC_MspInit+0xd8>)
 8004518:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800451a:	4b25      	ldr	r3, [pc, #148]	@ (80045b0 <HAL_ADC_MspInit+0xd8>)
 800451c:	2102      	movs	r1, #2
 800451e:	430a      	orrs	r2, r1
 8004520:	635a      	str	r2, [r3, #52]	@ 0x34
 8004522:	4b23      	ldr	r3, [pc, #140]	@ (80045b0 <HAL_ADC_MspInit+0xd8>)
 8004524:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004526:	2202      	movs	r2, #2
 8004528:	4013      	ands	r3, r2
 800452a:	60fb      	str	r3, [r7, #12]
 800452c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB2     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = ADC_BATTERY_INDICATOR_Pin;
 800452e:	193b      	adds	r3, r7, r4
 8004530:	2204      	movs	r2, #4
 8004532:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004534:	193b      	adds	r3, r7, r4
 8004536:	2203      	movs	r2, #3
 8004538:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800453a:	193b      	adds	r3, r7, r4
 800453c:	2200      	movs	r2, #0
 800453e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(ADC_BATTERY_INDICATOR_GPIO_Port, &GPIO_InitStruct);
 8004540:	193b      	adds	r3, r7, r4
 8004542:	4a1c      	ldr	r2, [pc, #112]	@ (80045b4 <HAL_ADC_MspInit+0xdc>)
 8004544:	0019      	movs	r1, r3
 8004546:	0010      	movs	r0, r2
 8004548:	f002 f84a 	bl	80065e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800454c:	4b1a      	ldr	r3, [pc, #104]	@ (80045b8 <HAL_ADC_MspInit+0xe0>)
 800454e:	4a1b      	ldr	r2, [pc, #108]	@ (80045bc <HAL_ADC_MspInit+0xe4>)
 8004550:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004552:	4b19      	ldr	r3, [pc, #100]	@ (80045b8 <HAL_ADC_MspInit+0xe0>)
 8004554:	2205      	movs	r2, #5
 8004556:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004558:	4b17      	ldr	r3, [pc, #92]	@ (80045b8 <HAL_ADC_MspInit+0xe0>)
 800455a:	2200      	movs	r2, #0
 800455c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800455e:	4b16      	ldr	r3, [pc, #88]	@ (80045b8 <HAL_ADC_MspInit+0xe0>)
 8004560:	2200      	movs	r2, #0
 8004562:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004564:	4b14      	ldr	r3, [pc, #80]	@ (80045b8 <HAL_ADC_MspInit+0xe0>)
 8004566:	2280      	movs	r2, #128	@ 0x80
 8004568:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800456a:	4b13      	ldr	r3, [pc, #76]	@ (80045b8 <HAL_ADC_MspInit+0xe0>)
 800456c:	2280      	movs	r2, #128	@ 0x80
 800456e:	0092      	lsls	r2, r2, #2
 8004570:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004572:	4b11      	ldr	r3, [pc, #68]	@ (80045b8 <HAL_ADC_MspInit+0xe0>)
 8004574:	2280      	movs	r2, #128	@ 0x80
 8004576:	0112      	lsls	r2, r2, #4
 8004578:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800457a:	4b0f      	ldr	r3, [pc, #60]	@ (80045b8 <HAL_ADC_MspInit+0xe0>)
 800457c:	2220      	movs	r2, #32
 800457e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004580:	4b0d      	ldr	r3, [pc, #52]	@ (80045b8 <HAL_ADC_MspInit+0xe0>)
 8004582:	2200      	movs	r2, #0
 8004584:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004586:	4b0c      	ldr	r3, [pc, #48]	@ (80045b8 <HAL_ADC_MspInit+0xe0>)
 8004588:	0018      	movs	r0, r3
 800458a:	f001 fd49 	bl	8006020 <HAL_DMA_Init>
 800458e:	1e03      	subs	r3, r0, #0
 8004590:	d001      	beq.n	8004596 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8004592:	f7ff ff73 	bl	800447c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a07      	ldr	r2, [pc, #28]	@ (80045b8 <HAL_ADC_MspInit+0xe0>)
 800459a:	651a      	str	r2, [r3, #80]	@ 0x50
 800459c:	4b06      	ldr	r3, [pc, #24]	@ (80045b8 <HAL_ADC_MspInit+0xe0>)
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	629a      	str	r2, [r3, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80045a2:	46c0      	nop			@ (mov r8, r8)
 80045a4:	46bd      	mov	sp, r7
 80045a6:	b00b      	add	sp, #44	@ 0x2c
 80045a8:	bd90      	pop	{r4, r7, pc}
 80045aa:	46c0      	nop			@ (mov r8, r8)
 80045ac:	40012400 	.word	0x40012400
 80045b0:	40021000 	.word	0x40021000
 80045b4:	50000400 	.word	0x50000400
 80045b8:	20000418 	.word	0x20000418
 80045bc:	40020008 	.word	0x40020008

080045c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a09      	ldr	r2, [pc, #36]	@ (80045f4 <HAL_TIM_Base_MspInit+0x34>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d10b      	bne.n	80045ea <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80045d2:	4b09      	ldr	r3, [pc, #36]	@ (80045f8 <HAL_TIM_Base_MspInit+0x38>)
 80045d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80045d6:	4b08      	ldr	r3, [pc, #32]	@ (80045f8 <HAL_TIM_Base_MspInit+0x38>)
 80045d8:	2102      	movs	r1, #2
 80045da:	430a      	orrs	r2, r1
 80045dc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80045de:	4b06      	ldr	r3, [pc, #24]	@ (80045f8 <HAL_TIM_Base_MspInit+0x38>)
 80045e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045e2:	2202      	movs	r2, #2
 80045e4:	4013      	ands	r3, r2
 80045e6:	60fb      	str	r3, [r7, #12]
 80045e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80045ea:	46c0      	nop			@ (mov r8, r8)
 80045ec:	46bd      	mov	sp, r7
 80045ee:	b004      	add	sp, #16
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	46c0      	nop			@ (mov r8, r8)
 80045f4:	40000400 	.word	0x40000400
 80045f8:	40021000 	.word	0x40021000

080045fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80045fc:	b590      	push	{r4, r7, lr}
 80045fe:	b089      	sub	sp, #36	@ 0x24
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004604:	240c      	movs	r4, #12
 8004606:	193b      	adds	r3, r7, r4
 8004608:	0018      	movs	r0, r3
 800460a:	2314      	movs	r3, #20
 800460c:	001a      	movs	r2, r3
 800460e:	2100      	movs	r1, #0
 8004610:	f009 f8fe 	bl	800d810 <memset>
  if(htim->Instance==TIM3)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a14      	ldr	r2, [pc, #80]	@ (800466c <HAL_TIM_MspPostInit+0x70>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d121      	bne.n	8004662 <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800461e:	4b14      	ldr	r3, [pc, #80]	@ (8004670 <HAL_TIM_MspPostInit+0x74>)
 8004620:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004622:	4b13      	ldr	r3, [pc, #76]	@ (8004670 <HAL_TIM_MspPostInit+0x74>)
 8004624:	2102      	movs	r1, #2
 8004626:	430a      	orrs	r2, r1
 8004628:	635a      	str	r2, [r3, #52]	@ 0x34
 800462a:	4b11      	ldr	r3, [pc, #68]	@ (8004670 <HAL_TIM_MspPostInit+0x74>)
 800462c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800462e:	2202      	movs	r2, #2
 8004630:	4013      	ands	r3, r2
 8004632:	60bb      	str	r3, [r7, #8]
 8004634:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = IHM_PWMA_Pin|IHM_PWMB_Pin;
 8004636:	0021      	movs	r1, r4
 8004638:	187b      	adds	r3, r7, r1
 800463a:	2230      	movs	r2, #48	@ 0x30
 800463c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800463e:	187b      	adds	r3, r7, r1
 8004640:	2202      	movs	r2, #2
 8004642:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004644:	187b      	adds	r3, r7, r1
 8004646:	2200      	movs	r2, #0
 8004648:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800464a:	187b      	adds	r3, r7, r1
 800464c:	2200      	movs	r2, #0
 800464e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8004650:	187b      	adds	r3, r7, r1
 8004652:	2201      	movs	r2, #1
 8004654:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004656:	187b      	adds	r3, r7, r1
 8004658:	4a06      	ldr	r2, [pc, #24]	@ (8004674 <HAL_TIM_MspPostInit+0x78>)
 800465a:	0019      	movs	r1, r3
 800465c:	0010      	movs	r0, r2
 800465e:	f001 ffbf 	bl	80065e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004662:	46c0      	nop			@ (mov r8, r8)
 8004664:	46bd      	mov	sp, r7
 8004666:	b009      	add	sp, #36	@ 0x24
 8004668:	bd90      	pop	{r4, r7, pc}
 800466a:	46c0      	nop			@ (mov r8, r8)
 800466c:	40000400 	.word	0x40000400
 8004670:	40021000 	.word	0x40021000
 8004674:	50000400 	.word	0x50000400

08004678 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800467c:	46c0      	nop			@ (mov r8, r8)
 800467e:	e7fd      	b.n	800467c <NMI_Handler+0x4>

08004680 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004684:	46c0      	nop			@ (mov r8, r8)
 8004686:	e7fd      	b.n	8004684 <HardFault_Handler+0x4>

08004688 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800468c:	46c0      	nop			@ (mov r8, r8)
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004692:	b580      	push	{r7, lr}
 8004694:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004696:	46c0      	nop			@ (mov r8, r8)
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80046a0:	f000 fcde 	bl	8005060 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80046a4:	46c0      	nop			@ (mov r8, r8)
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
	...

080046ac <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 80046b0:	4b0f      	ldr	r3, [pc, #60]	@ (80046f0 <EXTI0_1_IRQHandler+0x44>)
 80046b2:	0018      	movs	r0, r3
 80046b4:	f001 ff4a 	bl	800654c <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INT_ENCODER1_Pin);
 80046b8:	2002      	movs	r0, #2
 80046ba:	f002 fa1b 	bl	8006af4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */
  /* EXTI line interrupt detected */
   if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_1) != 0x00u)
 80046be:	4b0d      	ldr	r3, [pc, #52]	@ (80046f4 <EXTI0_1_IRQHandler+0x48>)
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	2202      	movs	r2, #2
 80046c4:	4013      	ands	r3, r2
 80046c6:	d104      	bne.n	80046d2 <EXTI0_1_IRQHandler+0x26>
 80046c8:	4b0a      	ldr	r3, [pc, #40]	@ (80046f4 <EXTI0_1_IRQHandler+0x48>)
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	2202      	movs	r2, #2
 80046ce:	4013      	ands	r3, r2
 80046d0:	d001      	beq.n	80046d6 <EXTI0_1_IRQHandler+0x2a>
 80046d2:	2301      	movs	r3, #1
 80046d4:	e000      	b.n	80046d8 <EXTI0_1_IRQHandler+0x2c>
 80046d6:	2300      	movs	r3, #0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d005      	beq.n	80046e8 <EXTI0_1_IRQHandler+0x3c>
   {
     __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_1); // Clears The Interrupt Flag
 80046dc:	4b05      	ldr	r3, [pc, #20]	@ (80046f4 <EXTI0_1_IRQHandler+0x48>)
 80046de:	2202      	movs	r2, #2
 80046e0:	60da      	str	r2, [r3, #12]
 80046e2:	4b04      	ldr	r3, [pc, #16]	@ (80046f4 <EXTI0_1_IRQHandler+0x48>)
 80046e4:	2202      	movs	r2, #2
 80046e6:	611a      	str	r2, [r3, #16]
//     HAL_GPIO_EXTI_Rising_Callback(GPIO_PIN_1);   // Calls The ISR Handler CallBack Function
   }
  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80046e8:	46c0      	nop			@ (mov r8, r8)
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	46c0      	nop			@ (mov r8, r8)
 80046f0:	200002a4 	.word	0x200002a4
 80046f4:	40021800 	.word	0x40021800

080046f8 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_ENCODER2_Pin);
 80046fc:	2004      	movs	r0, #4
 80046fe:	f002 f9f9 	bl	8006af4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8004702:	46c0      	nop			@ (mov r8, r8)
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 800470c:	4b03      	ldr	r3, [pc, #12]	@ (800471c <EXTI4_15_IRQHandler+0x14>)
 800470e:	0018      	movs	r0, r3
 8004710:	f001 ff1c 	bl	800654c <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8004714:	46c0      	nop			@ (mov r8, r8)
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	46c0      	nop			@ (mov r8, r8)
 800471c:	20000024 	.word	0x20000024

08004720 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004724:	4b03      	ldr	r3, [pc, #12]	@ (8004734 <DMA1_Channel1_IRQHandler+0x14>)
 8004726:	0018      	movs	r0, r3
 8004728:	f001 fd8a 	bl	8006240 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800472c:	46c0      	nop			@ (mov r8, r8)
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	46c0      	nop			@ (mov r8, r8)
 8004734:	20000418 	.word	0x20000418

08004738 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800473e:	2300      	movs	r3, #0
 8004740:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 8004742:	4b12      	ldr	r3, [pc, #72]	@ (800478c <BSP_SPI1_Init+0x54>)
 8004744:	4a12      	ldr	r2, [pc, #72]	@ (8004790 <BSP_SPI1_Init+0x58>)
 8004746:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 8004748:	4b12      	ldr	r3, [pc, #72]	@ (8004794 <BSP_SPI1_Init+0x5c>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	1c59      	adds	r1, r3, #1
 800474e:	4a11      	ldr	r2, [pc, #68]	@ (8004794 <BSP_SPI1_Init+0x5c>)
 8004750:	6011      	str	r1, [r2, #0]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d115      	bne.n	8004782 <BSP_SPI1_Init+0x4a>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8004756:	4b0d      	ldr	r3, [pc, #52]	@ (800478c <BSP_SPI1_Init+0x54>)
 8004758:	0018      	movs	r0, r3
 800475a:	f003 fae5 	bl	8007d28 <HAL_SPI_GetState>
 800475e:	1e03      	subs	r3, r0, #0
 8004760:	d10f      	bne.n	8004782 <BSP_SPI1_Init+0x4a>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 8004762:	4b0a      	ldr	r3, [pc, #40]	@ (800478c <BSP_SPI1_Init+0x54>)
 8004764:	0018      	movs	r0, r3
 8004766:	f000 f887 	bl	8004878 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d108      	bne.n	8004782 <BSP_SPI1_Init+0x4a>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8004770:	4b06      	ldr	r3, [pc, #24]	@ (800478c <BSP_SPI1_Init+0x54>)
 8004772:	0018      	movs	r0, r3
 8004774:	f000 f838 	bl	80047e8 <MX_SPI1_Init>
 8004778:	1e03      	subs	r3, r0, #0
 800477a:	d002      	beq.n	8004782 <BSP_SPI1_Init+0x4a>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 800477c:	2308      	movs	r3, #8
 800477e:	425b      	negs	r3, r3
 8004780:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8004782:	687b      	ldr	r3, [r7, #4]
}
 8004784:	0018      	movs	r0, r3
 8004786:	46bd      	mov	sp, r7
 8004788:	b002      	add	sp, #8
 800478a:	bd80      	pop	{r7, pc}
 800478c:	20000544 	.word	0x20000544
 8004790:	40013000 	.word	0x40013000
 8004794:	200005a8 	.word	0x200005a8

08004798 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8004798:	b590      	push	{r4, r7, lr}
 800479a:	b089      	sub	sp, #36	@ 0x24
 800479c:	af02      	add	r7, sp, #8
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	1dbb      	adds	r3, r7, #6
 80047a4:	801a      	strh	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 80047a6:	2300      	movs	r3, #0
 80047a8:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 80047aa:	1dbb      	adds	r3, r7, #6
 80047ac:	881c      	ldrh	r4, [r3, #0]
 80047ae:	68ba      	ldr	r2, [r7, #8]
 80047b0:	68f9      	ldr	r1, [r7, #12]
 80047b2:	4808      	ldr	r0, [pc, #32]	@ (80047d4 <BSP_SPI1_SendRecv+0x3c>)
 80047b4:	2380      	movs	r3, #128	@ 0x80
 80047b6:	015b      	lsls	r3, r3, #5
 80047b8:	9300      	str	r3, [sp, #0]
 80047ba:	0023      	movs	r3, r4
 80047bc:	f003 f8d2 	bl	8007964 <HAL_SPI_TransmitReceive>
 80047c0:	1e03      	subs	r3, r0, #0
 80047c2:	d002      	beq.n	80047ca <BSP_SPI1_SendRecv+0x32>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 80047c4:	2306      	movs	r3, #6
 80047c6:	425b      	negs	r3, r3
 80047c8:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80047ca:	697b      	ldr	r3, [r7, #20]
}
 80047cc:	0018      	movs	r0, r3
 80047ce:	46bd      	mov	sp, r7
 80047d0:	b007      	add	sp, #28
 80047d2:	bd90      	pop	{r4, r7, pc}
 80047d4:	20000544 	.word	0x20000544

080047d8 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80047d8:	b580      	push	{r7, lr}
 80047da:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80047dc:	f000 fc52 	bl	8005084 <HAL_GetTick>
 80047e0:	0003      	movs	r3, r0
}
 80047e2:	0018      	movs	r0, r3
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 80047e8:	b590      	push	{r4, r7, lr}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80047f0:	240f      	movs	r4, #15
 80047f2:	193b      	adds	r3, r7, r4
 80047f4:	2200      	movs	r2, #0
 80047f6:	701a      	strb	r2, [r3, #0]

  hspi->Instance = SPI1;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a1e      	ldr	r2, [pc, #120]	@ (8004874 <MX_SPI1_Init+0x8c>)
 80047fc:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2282      	movs	r2, #130	@ 0x82
 8004802:	0052      	lsls	r2, r2, #1
 8004804:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	22e0      	movs	r2, #224	@ 0xe0
 8004810:	00d2      	lsls	r2, r2, #3
 8004812:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2280      	movs	r2, #128	@ 0x80
 8004824:	0092      	lsls	r2, r2, #2
 8004826:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2228      	movs	r2, #40	@ 0x28
 800482c:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 7;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2207      	movs	r2, #7
 8004844:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	0018      	movs	r0, r3
 8004856:	f002 ffc5 	bl	80077e4 <HAL_SPI_Init>
 800485a:	1e03      	subs	r3, r0, #0
 800485c:	d002      	beq.n	8004864 <MX_SPI1_Init+0x7c>
  {
    ret = HAL_ERROR;
 800485e:	193b      	adds	r3, r7, r4
 8004860:	2201      	movs	r2, #1
 8004862:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8004864:	230f      	movs	r3, #15
 8004866:	18fb      	adds	r3, r7, r3
 8004868:	781b      	ldrb	r3, [r3, #0]
}
 800486a:	0018      	movs	r0, r3
 800486c:	46bd      	mov	sp, r7
 800486e:	b005      	add	sp, #20
 8004870:	bd90      	pop	{r4, r7, pc}
 8004872:	46c0      	nop			@ (mov r8, r8)
 8004874:	40013000 	.word	0x40013000

08004878 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004878:	b590      	push	{r4, r7, lr}
 800487a:	b08b      	sub	sp, #44	@ 0x2c
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004880:	4b30      	ldr	r3, [pc, #192]	@ (8004944 <SPI1_MspInit+0xcc>)
 8004882:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004884:	4b2f      	ldr	r3, [pc, #188]	@ (8004944 <SPI1_MspInit+0xcc>)
 8004886:	2180      	movs	r1, #128	@ 0x80
 8004888:	0149      	lsls	r1, r1, #5
 800488a:	430a      	orrs	r2, r1
 800488c:	641a      	str	r2, [r3, #64]	@ 0x40
 800488e:	4b2d      	ldr	r3, [pc, #180]	@ (8004944 <SPI1_MspInit+0xcc>)
 8004890:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004892:	2380      	movs	r3, #128	@ 0x80
 8004894:	015b      	lsls	r3, r3, #5
 8004896:	4013      	ands	r3, r2
 8004898:	613b      	str	r3, [r7, #16]
 800489a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800489c:	4b29      	ldr	r3, [pc, #164]	@ (8004944 <SPI1_MspInit+0xcc>)
 800489e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048a0:	4b28      	ldr	r3, [pc, #160]	@ (8004944 <SPI1_MspInit+0xcc>)
 80048a2:	2101      	movs	r1, #1
 80048a4:	430a      	orrs	r2, r1
 80048a6:	635a      	str	r2, [r3, #52]	@ 0x34
 80048a8:	4b26      	ldr	r3, [pc, #152]	@ (8004944 <SPI1_MspInit+0xcc>)
 80048aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048ac:	2201      	movs	r2, #1
 80048ae:	4013      	ands	r3, r2
 80048b0:	60fb      	str	r3, [r7, #12]
 80048b2:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 80048b4:	2414      	movs	r4, #20
 80048b6:	193b      	adds	r3, r7, r4
 80048b8:	2220      	movs	r2, #32
 80048ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048bc:	193b      	adds	r3, r7, r4
 80048be:	2202      	movs	r2, #2
 80048c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048c2:	193b      	adds	r3, r7, r4
 80048c4:	2200      	movs	r2, #0
 80048c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048c8:	193b      	adds	r3, r7, r4
 80048ca:	2200      	movs	r2, #0
 80048cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 80048ce:	193b      	adds	r3, r7, r4
 80048d0:	2200      	movs	r2, #0
 80048d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 80048d4:	193a      	adds	r2, r7, r4
 80048d6:	23a0      	movs	r3, #160	@ 0xa0
 80048d8:	05db      	lsls	r3, r3, #23
 80048da:	0011      	movs	r1, r2
 80048dc:	0018      	movs	r0, r3
 80048de:	f001 fe7f 	bl	80065e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 80048e2:	193b      	adds	r3, r7, r4
 80048e4:	2240      	movs	r2, #64	@ 0x40
 80048e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048e8:	193b      	adds	r3, r7, r4
 80048ea:	2202      	movs	r2, #2
 80048ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ee:	193b      	adds	r3, r7, r4
 80048f0:	2200      	movs	r2, #0
 80048f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048f4:	193b      	adds	r3, r7, r4
 80048f6:	2200      	movs	r2, #0
 80048f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 80048fa:	193b      	adds	r3, r7, r4
 80048fc:	2200      	movs	r2, #0
 80048fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8004900:	193a      	adds	r2, r7, r4
 8004902:	23a0      	movs	r3, #160	@ 0xa0
 8004904:	05db      	lsls	r3, r3, #23
 8004906:	0011      	movs	r1, r2
 8004908:	0018      	movs	r0, r3
 800490a:	f001 fe69 	bl	80065e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 800490e:	0021      	movs	r1, r4
 8004910:	187b      	adds	r3, r7, r1
 8004912:	2280      	movs	r2, #128	@ 0x80
 8004914:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004916:	187b      	adds	r3, r7, r1
 8004918:	2202      	movs	r2, #2
 800491a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800491c:	187b      	adds	r3, r7, r1
 800491e:	2200      	movs	r2, #0
 8004920:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004922:	187b      	adds	r3, r7, r1
 8004924:	2200      	movs	r2, #0
 8004926:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8004928:	187b      	adds	r3, r7, r1
 800492a:	2200      	movs	r2, #0
 800492c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800492e:	187a      	adds	r2, r7, r1
 8004930:	23a0      	movs	r3, #160	@ 0xa0
 8004932:	05db      	lsls	r3, r3, #23
 8004934:	0011      	movs	r1, r2
 8004936:	0018      	movs	r0, r3
 8004938:	f001 fe52 	bl	80065e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 800493c:	46c0      	nop			@ (mov r8, r8)
 800493e:	46bd      	mov	sp, r7
 8004940:	b00b      	add	sp, #44	@ 0x2c
 8004942:	bd90      	pop	{r4, r7, pc}
 8004944:	40021000 	.word	0x40021000

08004948 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	af00      	add	r7, sp, #0
  return 1;
 800494c:	2301      	movs	r3, #1
}
 800494e:	0018      	movs	r0, r3
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <_kill>:

int _kill(int pid, int sig)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800495e:	f008 ffb1 	bl	800d8c4 <__errno>
 8004962:	0003      	movs	r3, r0
 8004964:	2216      	movs	r2, #22
 8004966:	601a      	str	r2, [r3, #0]
  return -1;
 8004968:	2301      	movs	r3, #1
 800496a:	425b      	negs	r3, r3
}
 800496c:	0018      	movs	r0, r3
 800496e:	46bd      	mov	sp, r7
 8004970:	b002      	add	sp, #8
 8004972:	bd80      	pop	{r7, pc}

08004974 <_exit>:

void _exit (int status)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800497c:	2301      	movs	r3, #1
 800497e:	425a      	negs	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	0011      	movs	r1, r2
 8004984:	0018      	movs	r0, r3
 8004986:	f7ff ffe5 	bl	8004954 <_kill>
  while (1) {}    /* Make sure we hang here */
 800498a:	46c0      	nop			@ (mov r8, r8)
 800498c:	e7fd      	b.n	800498a <_exit+0x16>

0800498e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800498e:	b580      	push	{r7, lr}
 8004990:	b086      	sub	sp, #24
 8004992:	af00      	add	r7, sp, #0
 8004994:	60f8      	str	r0, [r7, #12]
 8004996:	60b9      	str	r1, [r7, #8]
 8004998:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800499a:	2300      	movs	r3, #0
 800499c:	617b      	str	r3, [r7, #20]
 800499e:	e00a      	b.n	80049b6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80049a0:	e000      	b.n	80049a4 <_read+0x16>
 80049a2:	bf00      	nop
 80049a4:	0001      	movs	r1, r0
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	1c5a      	adds	r2, r3, #1
 80049aa:	60ba      	str	r2, [r7, #8]
 80049ac:	b2ca      	uxtb	r2, r1
 80049ae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	3301      	adds	r3, #1
 80049b4:	617b      	str	r3, [r7, #20]
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	dbf0      	blt.n	80049a0 <_read+0x12>
  }

  return len;
 80049be:	687b      	ldr	r3, [r7, #4]
}
 80049c0:	0018      	movs	r0, r3
 80049c2:	46bd      	mov	sp, r7
 80049c4:	b006      	add	sp, #24
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049d4:	2300      	movs	r3, #0
 80049d6:	617b      	str	r3, [r7, #20]
 80049d8:	e009      	b.n	80049ee <_write+0x26>
  {
    __io_putchar(*ptr++);
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	1c5a      	adds	r2, r3, #1
 80049de:	60ba      	str	r2, [r7, #8]
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	0018      	movs	r0, r3
 80049e4:	f000 fa54 	bl	8004e90 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	3301      	adds	r3, #1
 80049ec:	617b      	str	r3, [r7, #20]
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	dbf1      	blt.n	80049da <_write+0x12>
  }
  return len;
 80049f6:	687b      	ldr	r3, [r7, #4]
}
 80049f8:	0018      	movs	r0, r3
 80049fa:	46bd      	mov	sp, r7
 80049fc:	b006      	add	sp, #24
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <_close>:

int _close(int file)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	425b      	negs	r3, r3
}
 8004a0c:	0018      	movs	r0, r3
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	b002      	add	sp, #8
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	2280      	movs	r2, #128	@ 0x80
 8004a22:	0192      	lsls	r2, r2, #6
 8004a24:	605a      	str	r2, [r3, #4]
  return 0;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	0018      	movs	r0, r3
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	b002      	add	sp, #8
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <_isatty>:

int _isatty(int file)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004a38:	2301      	movs	r3, #1
}
 8004a3a:	0018      	movs	r0, r3
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	b002      	add	sp, #8
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b084      	sub	sp, #16
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	60f8      	str	r0, [r7, #12]
 8004a4a:	60b9      	str	r1, [r7, #8]
 8004a4c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	0018      	movs	r0, r3
 8004a52:	46bd      	mov	sp, r7
 8004a54:	b004      	add	sp, #16
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004a60:	4a14      	ldr	r2, [pc, #80]	@ (8004ab4 <_sbrk+0x5c>)
 8004a62:	4b15      	ldr	r3, [pc, #84]	@ (8004ab8 <_sbrk+0x60>)
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004a6c:	4b13      	ldr	r3, [pc, #76]	@ (8004abc <_sbrk+0x64>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d102      	bne.n	8004a7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004a74:	4b11      	ldr	r3, [pc, #68]	@ (8004abc <_sbrk+0x64>)
 8004a76:	4a12      	ldr	r2, [pc, #72]	@ (8004ac0 <_sbrk+0x68>)
 8004a78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004a7a:	4b10      	ldr	r3, [pc, #64]	@ (8004abc <_sbrk+0x64>)
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	18d3      	adds	r3, r2, r3
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d207      	bcs.n	8004a98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004a88:	f008 ff1c 	bl	800d8c4 <__errno>
 8004a8c:	0003      	movs	r3, r0
 8004a8e:	220c      	movs	r2, #12
 8004a90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004a92:	2301      	movs	r3, #1
 8004a94:	425b      	negs	r3, r3
 8004a96:	e009      	b.n	8004aac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004a98:	4b08      	ldr	r3, [pc, #32]	@ (8004abc <_sbrk+0x64>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004a9e:	4b07      	ldr	r3, [pc, #28]	@ (8004abc <_sbrk+0x64>)
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	18d2      	adds	r2, r2, r3
 8004aa6:	4b05      	ldr	r3, [pc, #20]	@ (8004abc <_sbrk+0x64>)
 8004aa8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
}
 8004aac:	0018      	movs	r0, r3
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	b006      	add	sp, #24
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	20009000 	.word	0x20009000
 8004ab8:	00000400 	.word	0x00000400
 8004abc:	200005ac 	.word	0x200005ac
 8004ac0:	20000d40 	.word	0x20000d40

08004ac4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004ac8:	46c0      	nop			@ (mov r8, r8)
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
	...

08004ad0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004ad0:	480d      	ldr	r0, [pc, #52]	@ (8004b08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004ad2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004ad4:	f7ff fff6 	bl	8004ac4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004ad8:	480c      	ldr	r0, [pc, #48]	@ (8004b0c <LoopForever+0x6>)
  ldr r1, =_edata
 8004ada:	490d      	ldr	r1, [pc, #52]	@ (8004b10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004adc:	4a0d      	ldr	r2, [pc, #52]	@ (8004b14 <LoopForever+0xe>)
  movs r3, #0
 8004ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ae0:	e002      	b.n	8004ae8 <LoopCopyDataInit>

08004ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004ae6:	3304      	adds	r3, #4

08004ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004aec:	d3f9      	bcc.n	8004ae2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004aee:	4a0a      	ldr	r2, [pc, #40]	@ (8004b18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004af0:	4c0a      	ldr	r4, [pc, #40]	@ (8004b1c <LoopForever+0x16>)
  movs r3, #0
 8004af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004af4:	e001      	b.n	8004afa <LoopFillZerobss>

08004af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004af8:	3204      	adds	r2, #4

08004afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004afc:	d3fb      	bcc.n	8004af6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004afe:	f008 fee7 	bl	800d8d0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004b02:	f7ff f873 	bl	8003bec <main>

08004b06 <LoopForever>:

LoopForever:
  b LoopForever
 8004b06:	e7fe      	b.n	8004b06 <LoopForever>
  ldr   r0, =_estack
 8004b08:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8004b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b10:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8004b14:	08010abc 	.word	0x08010abc
  ldr r2, =_sbss
 8004b18:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8004b1c:	20000d40 	.word	0x20000d40

08004b20 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004b20:	e7fe      	b.n	8004b20 <ADC1_IRQHandler>
	...

08004b24 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	0002      	movs	r2, r0
 8004b2c:	1dfb      	adds	r3, r7, #7
 8004b2e:	701a      	strb	r2, [r3, #0]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8004b30:	1dfb      	adds	r3, r7, #7
 8004b32:	781a      	ldrb	r2, [r3, #0]
 8004b34:	4b04      	ldr	r3, [pc, #16]	@ (8004b48 <BSP_LED_Init+0x24>)
 8004b36:	0092      	lsls	r2, r2, #2
 8004b38:	58d3      	ldr	r3, [r2, r3]
 8004b3a:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	0018      	movs	r0, r3
 8004b40:	46bd      	mov	sp, r7
 8004b42:	b002      	add	sp, #8
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	46c0      	nop			@ (mov r8, r8)
 8004b48:	080104d0 	.word	0x080104d0

08004b4c <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	0002      	movs	r2, r0
 8004b54:	1dfb      	adds	r3, r7, #7
 8004b56:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8004b58:	1dfb      	adds	r3, r7, #7
 8004b5a:	781a      	ldrb	r2, [r3, #0]
 8004b5c:	4b06      	ldr	r3, [pc, #24]	@ (8004b78 <BSP_LED_Toggle+0x2c>)
 8004b5e:	0092      	lsls	r2, r2, #2
 8004b60:	58d3      	ldr	r3, [r2, r3]
 8004b62:	2220      	movs	r2, #32
 8004b64:	0011      	movs	r1, r2
 8004b66:	0018      	movs	r0, r3
 8004b68:	f001 ffa8 	bl	8006abc <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	0018      	movs	r0, r3
 8004b70:	46bd      	mov	sp, r7
 8004b72:	b002      	add	sp, #8
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	46c0      	nop			@ (mov r8, r8)
 8004b78:	20000020 	.word	0x20000020

08004b7c <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8004b7c:	b590      	push	{r4, r7, lr}
 8004b7e:	b089      	sub	sp, #36	@ 0x24
 8004b80:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b82:	4b1e      	ldr	r3, [pc, #120]	@ (8004bfc <LED_USER_GPIO_Init+0x80>)
 8004b84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b86:	4b1d      	ldr	r3, [pc, #116]	@ (8004bfc <LED_USER_GPIO_Init+0x80>)
 8004b88:	2104      	movs	r1, #4
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	635a      	str	r2, [r3, #52]	@ 0x34
 8004b8e:	4b1b      	ldr	r3, [pc, #108]	@ (8004bfc <LED_USER_GPIO_Init+0x80>)
 8004b90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b92:	2204      	movs	r2, #4
 8004b94:	4013      	ands	r3, r2
 8004b96:	60bb      	str	r3, [r7, #8]
 8004b98:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b9a:	240c      	movs	r4, #12
 8004b9c:	193b      	adds	r3, r7, r4
 8004b9e:	0018      	movs	r0, r3
 8004ba0:	2314      	movs	r3, #20
 8004ba2:	001a      	movs	r2, r3
 8004ba4:	2100      	movs	r1, #0
 8004ba6:	f008 fe33 	bl	800d810 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004baa:	4b14      	ldr	r3, [pc, #80]	@ (8004bfc <LED_USER_GPIO_Init+0x80>)
 8004bac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bae:	4b13      	ldr	r3, [pc, #76]	@ (8004bfc <LED_USER_GPIO_Init+0x80>)
 8004bb0:	2104      	movs	r1, #4
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	635a      	str	r2, [r3, #52]	@ 0x34
 8004bb6:	4b11      	ldr	r3, [pc, #68]	@ (8004bfc <LED_USER_GPIO_Init+0x80>)
 8004bb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bba:	2204      	movs	r2, #4
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	607b      	str	r3, [r7, #4]
 8004bc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8004bc2:	4b0f      	ldr	r3, [pc, #60]	@ (8004c00 <LED_USER_GPIO_Init+0x84>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	2120      	movs	r1, #32
 8004bc8:	0018      	movs	r0, r3
 8004bca:	f001 ff5a 	bl	8006a82 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 8004bce:	0021      	movs	r1, r4
 8004bd0:	187b      	adds	r3, r7, r1
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bd6:	187b      	adds	r3, r7, r1
 8004bd8:	2201      	movs	r2, #1
 8004bda:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bdc:	187b      	adds	r3, r7, r1
 8004bde:	2200      	movs	r2, #0
 8004be0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004be2:	187b      	adds	r3, r7, r1
 8004be4:	2200      	movs	r2, #0
 8004be6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8004be8:	187b      	adds	r3, r7, r1
 8004bea:	4a05      	ldr	r2, [pc, #20]	@ (8004c00 <LED_USER_GPIO_Init+0x84>)
 8004bec:	0019      	movs	r1, r3
 8004bee:	0010      	movs	r0, r2
 8004bf0:	f001 fcf6 	bl	80065e0 <HAL_GPIO_Init>

}
 8004bf4:	46c0      	nop			@ (mov r8, r8)
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	b009      	add	sp, #36	@ 0x24
 8004bfa:	bd90      	pop	{r4, r7, pc}
 8004bfc:	40021000 	.word	0x40021000
 8004c00:	50000800 	.word	0x50000800

08004c04 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	0002      	movs	r2, r0
 8004c0c:	1dfb      	adds	r3, r7, #7
 8004c0e:	701a      	strb	r2, [r3, #0]
 8004c10:	1dbb      	adds	r3, r7, #6
 8004c12:	1c0a      	adds	r2, r1, #0
 8004c14:	701a      	strb	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 8004c16:	2300      	movs	r3, #0
 8004c18:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8004c1a:	1dfb      	adds	r3, r7, #7
 8004c1c:	781a      	ldrb	r2, [r3, #0]
 8004c1e:	4b24      	ldr	r3, [pc, #144]	@ (8004cb0 <BSP_PB_Init+0xac>)
 8004c20:	0092      	lsls	r2, r2, #2
 8004c22:	58d3      	ldr	r3, [r2, r3]
 8004c24:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8004c26:	1dbb      	adds	r3, r7, #6
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d13a      	bne.n	8004ca4 <BSP_PB_Init+0xa0>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8004c2e:	1dfb      	adds	r3, r7, #7
 8004c30:	781a      	ldrb	r2, [r3, #0]
 8004c32:	0013      	movs	r3, r2
 8004c34:	005b      	lsls	r3, r3, #1
 8004c36:	189b      	adds	r3, r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4a1e      	ldr	r2, [pc, #120]	@ (8004cb4 <BSP_PB_Init+0xb0>)
 8004c3c:	1898      	adds	r0, r3, r2
 8004c3e:	1dfb      	adds	r3, r7, #7
 8004c40:	781a      	ldrb	r2, [r3, #0]
 8004c42:	4b1d      	ldr	r3, [pc, #116]	@ (8004cb8 <BSP_PB_Init+0xb4>)
 8004c44:	0092      	lsls	r2, r2, #2
 8004c46:	58d3      	ldr	r3, [r2, r3]
 8004c48:	0019      	movs	r1, r3
 8004c4a:	f001 fc6d 	bl	8006528 <HAL_EXTI_GetHandle>
 8004c4e:	1e03      	subs	r3, r0, #0
 8004c50:	d003      	beq.n	8004c5a <BSP_PB_Init+0x56>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004c52:	2304      	movs	r3, #4
 8004c54:	425b      	negs	r3, r3
 8004c56:	60fb      	str	r3, [r7, #12]
 8004c58:	e024      	b.n	8004ca4 <BSP_PB_Init+0xa0>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8004c5a:	1dfb      	adds	r3, r7, #7
 8004c5c:	781a      	ldrb	r2, [r3, #0]
 8004c5e:	0013      	movs	r3, r2
 8004c60:	005b      	lsls	r3, r3, #1
 8004c62:	189b      	adds	r3, r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	4a13      	ldr	r2, [pc, #76]	@ (8004cb4 <BSP_PB_Init+0xb0>)
 8004c68:	1898      	adds	r0, r3, r2
 8004c6a:	1dfb      	adds	r3, r7, #7
 8004c6c:	781a      	ldrb	r2, [r3, #0]
 8004c6e:	4b13      	ldr	r3, [pc, #76]	@ (8004cbc <BSP_PB_Init+0xb8>)
 8004c70:	0092      	lsls	r2, r2, #2
 8004c72:	58d3      	ldr	r3, [r2, r3]
 8004c74:	001a      	movs	r2, r3
 8004c76:	2100      	movs	r1, #0
 8004c78:	f001 fc24 	bl	80064c4 <HAL_EXTI_RegisterCallback>
 8004c7c:	1e03      	subs	r3, r0, #0
 8004c7e:	d003      	beq.n	8004c88 <BSP_PB_Init+0x84>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004c80:	2304      	movs	r3, #4
 8004c82:	425b      	negs	r3, r3
 8004c84:	60fb      	str	r3, [r7, #12]
 8004c86:	e00d      	b.n	8004ca4 <BSP_PB_Init+0xa0>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8004c88:	2007      	movs	r0, #7
 8004c8a:	1dfb      	adds	r3, r7, #7
 8004c8c:	781a      	ldrb	r2, [r3, #0]
 8004c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8004cc0 <BSP_PB_Init+0xbc>)
 8004c90:	0092      	lsls	r2, r2, #2
 8004c92:	58d3      	ldr	r3, [r2, r3]
 8004c94:	2200      	movs	r2, #0
 8004c96:	0019      	movs	r1, r3
 8004c98:	f001 f980 	bl	8005f9c <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8004c9c:	2307      	movs	r3, #7
 8004c9e:	0018      	movs	r0, r3
 8004ca0:	f001 f991 	bl	8005fc6 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
}
 8004ca6:	0018      	movs	r0, r3
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	b004      	add	sp, #16
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	46c0      	nop			@ (mov r8, r8)
 8004cb0:	080104d4 	.word	0x080104d4
 8004cb4:	20000024 	.word	0x20000024
 8004cb8:	080104d8 	.word	0x080104d8
 8004cbc:	080104dc 	.word	0x080104dc
 8004cc0:	080104e0 	.word	0x080104e0

08004cc4 <BSP_PB_Callback>:
 * @brief  BSP Push Button callback
 * @param  Button Specifies the pin connected EXTI line
 * @retval None.
 */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	0002      	movs	r2, r0
 8004ccc:	1dfb      	adds	r3, r7, #7
 8004cce:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8004cd0:	46c0      	nop			@ (mov r8, r8)
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	b002      	add	sp, #8
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8004cdc:	2000      	movs	r0, #0
 8004cde:	f7ff fff1 	bl	8004cc4 <BSP_PB_Callback>
}
 8004ce2:	46c0      	nop			@ (mov r8, r8)
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8004ce8:	b590      	push	{r4, r7, lr}
 8004cea:	b089      	sub	sp, #36	@ 0x24
 8004cec:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cee:	4b1a      	ldr	r3, [pc, #104]	@ (8004d58 <BUTTON_USER_GPIO_Init+0x70>)
 8004cf0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cf2:	4b19      	ldr	r3, [pc, #100]	@ (8004d58 <BUTTON_USER_GPIO_Init+0x70>)
 8004cf4:	2104      	movs	r1, #4
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	635a      	str	r2, [r3, #52]	@ 0x34
 8004cfa:	4b17      	ldr	r3, [pc, #92]	@ (8004d58 <BUTTON_USER_GPIO_Init+0x70>)
 8004cfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cfe:	2204      	movs	r2, #4
 8004d00:	4013      	ands	r3, r2
 8004d02:	60bb      	str	r3, [r7, #8]
 8004d04:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d06:	240c      	movs	r4, #12
 8004d08:	193b      	adds	r3, r7, r4
 8004d0a:	0018      	movs	r0, r3
 8004d0c:	2314      	movs	r3, #20
 8004d0e:	001a      	movs	r2, r3
 8004d10:	2100      	movs	r1, #0
 8004d12:	f008 fd7d 	bl	800d810 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d16:	4b10      	ldr	r3, [pc, #64]	@ (8004d58 <BUTTON_USER_GPIO_Init+0x70>)
 8004d18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d1a:	4b0f      	ldr	r3, [pc, #60]	@ (8004d58 <BUTTON_USER_GPIO_Init+0x70>)
 8004d1c:	2104      	movs	r1, #4
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	635a      	str	r2, [r3, #52]	@ 0x34
 8004d22:	4b0d      	ldr	r3, [pc, #52]	@ (8004d58 <BUTTON_USER_GPIO_Init+0x70>)
 8004d24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d26:	2204      	movs	r2, #4
 8004d28:	4013      	ands	r3, r2
 8004d2a:	607b      	str	r3, [r7, #4]
 8004d2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8004d2e:	193b      	adds	r3, r7, r4
 8004d30:	2280      	movs	r2, #128	@ 0x80
 8004d32:	0192      	lsls	r2, r2, #6
 8004d34:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004d36:	193b      	adds	r3, r7, r4
 8004d38:	2288      	movs	r2, #136	@ 0x88
 8004d3a:	0352      	lsls	r2, r2, #13
 8004d3c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d3e:	193b      	adds	r3, r7, r4
 8004d40:	2200      	movs	r2, #0
 8004d42:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8004d44:	193b      	adds	r3, r7, r4
 8004d46:	4a05      	ldr	r2, [pc, #20]	@ (8004d5c <BUTTON_USER_GPIO_Init+0x74>)
 8004d48:	0019      	movs	r1, r3
 8004d4a:	0010      	movs	r0, r2
 8004d4c:	f001 fc48 	bl	80065e0 <HAL_GPIO_Init>

}
 8004d50:	46c0      	nop			@ (mov r8, r8)
 8004d52:	46bd      	mov	sp, r7
 8004d54:	b009      	add	sp, #36	@ 0x24
 8004d56:	bd90      	pop	{r4, r7, pc}
 8004d58:	40021000 	.word	0x40021000
 8004d5c:	50000800 	.word	0x50000800

08004d60 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	0002      	movs	r2, r0
 8004d68:	1dfb      	adds	r3, r7, #7
 8004d6a:	701a      	strb	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8004d70:	1dfb      	adds	r3, r7, #7
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d903      	bls.n	8004d80 <BSP_COM_Init+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004d78:	2302      	movs	r3, #2
 8004d7a:	425b      	negs	r3, r3
 8004d7c:	60fb      	str	r3, [r7, #12]
 8004d7e:	e021      	b.n	8004dc4 <BSP_COM_Init+0x64>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8004d80:	1dfb      	adds	r3, r7, #7
 8004d82:	7819      	ldrb	r1, [r3, #0]
 8004d84:	1dfb      	adds	r3, r7, #7
 8004d86:	781a      	ldrb	r2, [r3, #0]
 8004d88:	4b11      	ldr	r3, [pc, #68]	@ (8004dd0 <BSP_COM_Init+0x70>)
 8004d8a:	0089      	lsls	r1, r1, #2
 8004d8c:	58c9      	ldr	r1, [r1, r3]
 8004d8e:	4b11      	ldr	r3, [pc, #68]	@ (8004dd4 <BSP_COM_Init+0x74>)
 8004d90:	2094      	movs	r0, #148	@ 0x94
 8004d92:	4342      	muls	r2, r0
 8004d94:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8004d96:	1dfb      	adds	r3, r7, #7
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	2294      	movs	r2, #148	@ 0x94
 8004d9c:	435a      	muls	r2, r3
 8004d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8004dd4 <BSP_COM_Init+0x74>)
 8004da0:	18d3      	adds	r3, r2, r3
 8004da2:	0018      	movs	r0, r3
 8004da4:	f000 f88e 	bl	8004ec4 <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8004da8:	1dfb      	adds	r3, r7, #7
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	2294      	movs	r2, #148	@ 0x94
 8004dae:	435a      	muls	r2, r3
 8004db0:	4b08      	ldr	r3, [pc, #32]	@ (8004dd4 <BSP_COM_Init+0x74>)
 8004db2:	18d3      	adds	r3, r2, r3
 8004db4:	0018      	movs	r0, r3
 8004db6:	f000 f80f 	bl	8004dd8 <MX_USART2_UART_Init>
 8004dba:	1e03      	subs	r3, r0, #0
 8004dbc:	d002      	beq.n	8004dc4 <BSP_COM_Init+0x64>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004dbe:	2304      	movs	r3, #4
 8004dc0:	425b      	negs	r3, r3
 8004dc2:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
}
 8004dc6:	0018      	movs	r0, r3
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	b004      	add	sp, #16
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	46c0      	nop			@ (mov r8, r8)
 8004dd0:	20000030 	.word	0x20000030
 8004dd4:	200005b0 	.word	0x200005b0

08004dd8 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8004dd8:	b590      	push	{r4, r7, lr}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004de0:	240f      	movs	r4, #15
 8004de2:	193b      	adds	r3, r7, r4
 8004de4:	2200      	movs	r2, #0
 8004de6:	701a      	strb	r2, [r3, #0]

  huart->Instance = USART2;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a28      	ldr	r2, [pc, #160]	@ (8004e8c <MX_USART2_UART_Init+0xb4>)
 8004dec:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	22e1      	movs	r2, #225	@ 0xe1
 8004df2:	0252      	lsls	r2, r2, #9
 8004df4:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	220c      	movs	r2, #12
 8004e0c:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	625a      	str	r2, [r3, #36]	@ 0x24
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(huart) != HAL_OK)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	0018      	movs	r0, r3
 8004e30:	f004 f8de 	bl	8008ff0 <HAL_UART_Init>
 8004e34:	1e03      	subs	r3, r0, #0
 8004e36:	d002      	beq.n	8004e3e <MX_USART2_UART_Init+0x66>
  {
    ret = HAL_ERROR;
 8004e38:	193b      	adds	r3, r7, r4
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	701a      	strb	r2, [r3, #0]
  }

  if (HAL_UARTEx_SetTxFifoThreshold(huart, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2100      	movs	r1, #0
 8004e42:	0018      	movs	r0, r3
 8004e44:	f004 fde8 	bl	8009a18 <HAL_UARTEx_SetTxFifoThreshold>
 8004e48:	1e03      	subs	r3, r0, #0
 8004e4a:	d003      	beq.n	8004e54 <MX_USART2_UART_Init+0x7c>
  {
    ret = HAL_ERROR;
 8004e4c:	230f      	movs	r3, #15
 8004e4e:	18fb      	adds	r3, r7, r3
 8004e50:	2201      	movs	r2, #1
 8004e52:	701a      	strb	r2, [r3, #0]
  }

  if (HAL_UARTEx_SetRxFifoThreshold(huart, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2100      	movs	r1, #0
 8004e58:	0018      	movs	r0, r3
 8004e5a:	f004 fe1d 	bl	8009a98 <HAL_UARTEx_SetRxFifoThreshold>
 8004e5e:	1e03      	subs	r3, r0, #0
 8004e60:	d003      	beq.n	8004e6a <MX_USART2_UART_Init+0x92>
  {
    ret = HAL_ERROR;
 8004e62:	230f      	movs	r3, #15
 8004e64:	18fb      	adds	r3, r7, r3
 8004e66:	2201      	movs	r2, #1
 8004e68:	701a      	strb	r2, [r3, #0]
  }

  if (HAL_UARTEx_DisableFifoMode(huart) != HAL_OK)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	0018      	movs	r0, r3
 8004e6e:	f004 fd99 	bl	80099a4 <HAL_UARTEx_DisableFifoMode>
 8004e72:	1e03      	subs	r3, r0, #0
 8004e74:	d003      	beq.n	8004e7e <MX_USART2_UART_Init+0xa6>
  {
    ret = HAL_ERROR;
 8004e76:	230f      	movs	r3, #15
 8004e78:	18fb      	adds	r3, r7, r3
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8004e7e:	230f      	movs	r3, #15
 8004e80:	18fb      	adds	r3, r7, r3
 8004e82:	781b      	ldrb	r3, [r3, #0]
}
 8004e84:	0018      	movs	r0, r3
 8004e86:	46bd      	mov	sp, r7
 8004e88:	b005      	add	sp, #20
 8004e8a:	bd90      	pop	{r4, r7, pc}
 8004e8c:	40004400 	.word	0x40004400

08004e90 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8004e98:	4b08      	ldr	r3, [pc, #32]	@ (8004ebc <__io_putchar+0x2c>)
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	001a      	movs	r2, r3
 8004e9e:	2394      	movs	r3, #148	@ 0x94
 8004ea0:	435a      	muls	r2, r3
 8004ea2:	4b07      	ldr	r3, [pc, #28]	@ (8004ec0 <__io_putchar+0x30>)
 8004ea4:	18d0      	adds	r0, r2, r3
 8004ea6:	23fa      	movs	r3, #250	@ 0xfa
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	1d39      	adds	r1, r7, #4
 8004eac:	2201      	movs	r2, #1
 8004eae:	f004 f8fd 	bl	80090ac <HAL_UART_Transmit>
  return ch;
 8004eb2:	687b      	ldr	r3, [r7, #4]
}
 8004eb4:	0018      	movs	r0, r3
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	b002      	add	sp, #8
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	20000644 	.word	0x20000644
 8004ec0:	200005b0 	.word	0x200005b0

08004ec4 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004ec4:	b590      	push	{r4, r7, lr}
 8004ec6:	b091      	sub	sp, #68	@ 0x44
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004ecc:	2410      	movs	r4, #16
 8004ece:	193b      	adds	r3, r7, r4
 8004ed0:	0018      	movs	r0, r3
 8004ed2:	231c      	movs	r3, #28
 8004ed4:	001a      	movs	r2, r3
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	f008 fc9a 	bl	800d810 <memset>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004edc:	193b      	adds	r3, r7, r4
 8004ede:	2202      	movs	r2, #2
 8004ee0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004ee2:	193b      	adds	r3, r7, r4
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	609a      	str	r2, [r3, #8]
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8004ee8:	193b      	adds	r3, r7, r4
 8004eea:	0018      	movs	r0, r3
 8004eec:	f002 fb46 	bl	800757c <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004ef0:	4b25      	ldr	r3, [pc, #148]	@ (8004f88 <USART2_MspInit+0xc4>)
 8004ef2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ef4:	4b24      	ldr	r3, [pc, #144]	@ (8004f88 <USART2_MspInit+0xc4>)
 8004ef6:	2180      	movs	r1, #128	@ 0x80
 8004ef8:	0289      	lsls	r1, r1, #10
 8004efa:	430a      	orrs	r2, r1
 8004efc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004efe:	4b22      	ldr	r3, [pc, #136]	@ (8004f88 <USART2_MspInit+0xc4>)
 8004f00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f02:	2380      	movs	r3, #128	@ 0x80
 8004f04:	029b      	lsls	r3, r3, #10
 8004f06:	4013      	ands	r3, r2
 8004f08:	60fb      	str	r3, [r7, #12]
 8004f0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f0c:	4b1e      	ldr	r3, [pc, #120]	@ (8004f88 <USART2_MspInit+0xc4>)
 8004f0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f10:	4b1d      	ldr	r3, [pc, #116]	@ (8004f88 <USART2_MspInit+0xc4>)
 8004f12:	2101      	movs	r1, #1
 8004f14:	430a      	orrs	r2, r1
 8004f16:	635a      	str	r2, [r3, #52]	@ 0x34
 8004f18:	4b1b      	ldr	r3, [pc, #108]	@ (8004f88 <USART2_MspInit+0xc4>)
 8004f1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	4013      	ands	r3, r2
 8004f20:	60bb      	str	r3, [r7, #8]
 8004f22:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8004f24:	242c      	movs	r4, #44	@ 0x2c
 8004f26:	193b      	adds	r3, r7, r4
 8004f28:	2204      	movs	r2, #4
 8004f2a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f2c:	193b      	adds	r3, r7, r4
 8004f2e:	2202      	movs	r2, #2
 8004f30:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f32:	193b      	adds	r3, r7, r4
 8004f34:	2201      	movs	r2, #1
 8004f36:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f38:	193b      	adds	r3, r7, r4
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8004f3e:	193b      	adds	r3, r7, r4
 8004f40:	2201      	movs	r2, #1
 8004f42:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8004f44:	193a      	adds	r2, r7, r4
 8004f46:	23a0      	movs	r3, #160	@ 0xa0
 8004f48:	05db      	lsls	r3, r3, #23
 8004f4a:	0011      	movs	r1, r2
 8004f4c:	0018      	movs	r0, r3
 8004f4e:	f001 fb47 	bl	80065e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8004f52:	0021      	movs	r1, r4
 8004f54:	187b      	adds	r3, r7, r1
 8004f56:	2208      	movs	r2, #8
 8004f58:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f5a:	187b      	adds	r3, r7, r1
 8004f5c:	2202      	movs	r2, #2
 8004f5e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f60:	187b      	adds	r3, r7, r1
 8004f62:	2201      	movs	r2, #1
 8004f64:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f66:	187b      	adds	r3, r7, r1
 8004f68:	2200      	movs	r2, #0
 8004f6a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8004f6c:	187b      	adds	r3, r7, r1
 8004f6e:	2201      	movs	r2, #1
 8004f70:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8004f72:	187a      	adds	r2, r7, r1
 8004f74:	23a0      	movs	r3, #160	@ 0xa0
 8004f76:	05db      	lsls	r3, r3, #23
 8004f78:	0011      	movs	r1, r2
 8004f7a:	0018      	movs	r0, r3
 8004f7c:	f001 fb30 	bl	80065e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8004f80:	46c0      	nop			@ (mov r8, r8)
 8004f82:	46bd      	mov	sp, r7
 8004f84:	b011      	add	sp, #68	@ 0x44
 8004f86:	bd90      	pop	{r4, r7, pc}
 8004f88:	40021000 	.word	0x40021000

08004f8c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004f92:	1dfb      	adds	r3, r7, #7
 8004f94:	2200      	movs	r2, #0
 8004f96:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004f98:	4b0b      	ldr	r3, [pc, #44]	@ (8004fc8 <HAL_Init+0x3c>)
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8004fc8 <HAL_Init+0x3c>)
 8004f9e:	2180      	movs	r1, #128	@ 0x80
 8004fa0:	0049      	lsls	r1, r1, #1
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004fa6:	2000      	movs	r0, #0
 8004fa8:	f000 f810 	bl	8004fcc <HAL_InitTick>
 8004fac:	1e03      	subs	r3, r0, #0
 8004fae:	d003      	beq.n	8004fb8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8004fb0:	1dfb      	adds	r3, r7, #7
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	701a      	strb	r2, [r3, #0]
 8004fb6:	e001      	b.n	8004fbc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8004fb8:	f7ff fa66 	bl	8004488 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004fbc:	1dfb      	adds	r3, r7, #7
 8004fbe:	781b      	ldrb	r3, [r3, #0]
}
 8004fc0:	0018      	movs	r0, r3
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	b002      	add	sp, #8
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	40022000 	.word	0x40022000

08004fcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004fcc:	b590      	push	{r4, r7, lr}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004fd4:	230f      	movs	r3, #15
 8004fd6:	18fb      	adds	r3, r7, r3
 8004fd8:	2200      	movs	r2, #0
 8004fda:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8004fdc:	4b1d      	ldr	r3, [pc, #116]	@ (8005054 <HAL_InitTick+0x88>)
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d02b      	beq.n	800503c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8004fe4:	4b1c      	ldr	r3, [pc, #112]	@ (8005058 <HAL_InitTick+0x8c>)
 8004fe6:	681c      	ldr	r4, [r3, #0]
 8004fe8:	4b1a      	ldr	r3, [pc, #104]	@ (8005054 <HAL_InitTick+0x88>)
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	0019      	movs	r1, r3
 8004fee:	23fa      	movs	r3, #250	@ 0xfa
 8004ff0:	0098      	lsls	r0, r3, #2
 8004ff2:	f7fb f8a1 	bl	8000138 <__udivsi3>
 8004ff6:	0003      	movs	r3, r0
 8004ff8:	0019      	movs	r1, r3
 8004ffa:	0020      	movs	r0, r4
 8004ffc:	f7fb f89c 	bl	8000138 <__udivsi3>
 8005000:	0003      	movs	r3, r0
 8005002:	0018      	movs	r0, r3
 8005004:	f000 ffff 	bl	8006006 <HAL_SYSTICK_Config>
 8005008:	1e03      	subs	r3, r0, #0
 800500a:	d112      	bne.n	8005032 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b03      	cmp	r3, #3
 8005010:	d80a      	bhi.n	8005028 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005012:	6879      	ldr	r1, [r7, #4]
 8005014:	2301      	movs	r3, #1
 8005016:	425b      	negs	r3, r3
 8005018:	2200      	movs	r2, #0
 800501a:	0018      	movs	r0, r3
 800501c:	f000 ffbe 	bl	8005f9c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005020:	4b0e      	ldr	r3, [pc, #56]	@ (800505c <HAL_InitTick+0x90>)
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	601a      	str	r2, [r3, #0]
 8005026:	e00d      	b.n	8005044 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8005028:	230f      	movs	r3, #15
 800502a:	18fb      	adds	r3, r7, r3
 800502c:	2201      	movs	r2, #1
 800502e:	701a      	strb	r2, [r3, #0]
 8005030:	e008      	b.n	8005044 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005032:	230f      	movs	r3, #15
 8005034:	18fb      	adds	r3, r7, r3
 8005036:	2201      	movs	r2, #1
 8005038:	701a      	strb	r2, [r3, #0]
 800503a:	e003      	b.n	8005044 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800503c:	230f      	movs	r3, #15
 800503e:	18fb      	adds	r3, r7, r3
 8005040:	2201      	movs	r2, #1
 8005042:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8005044:	230f      	movs	r3, #15
 8005046:	18fb      	adds	r3, r7, r3
 8005048:	781b      	ldrb	r3, [r3, #0]
}
 800504a:	0018      	movs	r0, r3
 800504c:	46bd      	mov	sp, r7
 800504e:	b005      	add	sp, #20
 8005050:	bd90      	pop	{r4, r7, pc}
 8005052:	46c0      	nop			@ (mov r8, r8)
 8005054:	20000038 	.word	0x20000038
 8005058:	2000001c 	.word	0x2000001c
 800505c:	20000034 	.word	0x20000034

08005060 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005064:	4b05      	ldr	r3, [pc, #20]	@ (800507c <HAL_IncTick+0x1c>)
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	001a      	movs	r2, r3
 800506a:	4b05      	ldr	r3, [pc, #20]	@ (8005080 <HAL_IncTick+0x20>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	18d2      	adds	r2, r2, r3
 8005070:	4b03      	ldr	r3, [pc, #12]	@ (8005080 <HAL_IncTick+0x20>)
 8005072:	601a      	str	r2, [r3, #0]
}
 8005074:	46c0      	nop			@ (mov r8, r8)
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	46c0      	nop			@ (mov r8, r8)
 800507c:	20000038 	.word	0x20000038
 8005080:	20000648 	.word	0x20000648

08005084 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	af00      	add	r7, sp, #0
  return uwTick;
 8005088:	4b02      	ldr	r3, [pc, #8]	@ (8005094 <HAL_GetTick+0x10>)
 800508a:	681b      	ldr	r3, [r3, #0]
}
 800508c:	0018      	movs	r0, r3
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	46c0      	nop			@ (mov r8, r8)
 8005094:	20000648 	.word	0x20000648

08005098 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80050a0:	f7ff fff0 	bl	8005084 <HAL_GetTick>
 80050a4:	0003      	movs	r3, r0
 80050a6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	3301      	adds	r3, #1
 80050b0:	d005      	beq.n	80050be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80050b2:	4b0a      	ldr	r3, [pc, #40]	@ (80050dc <HAL_Delay+0x44>)
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	001a      	movs	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	189b      	adds	r3, r3, r2
 80050bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80050be:	46c0      	nop			@ (mov r8, r8)
 80050c0:	f7ff ffe0 	bl	8005084 <HAL_GetTick>
 80050c4:	0002      	movs	r2, r0
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d8f7      	bhi.n	80050c0 <HAL_Delay+0x28>
  {
  }
}
 80050d0:	46c0      	nop			@ (mov r8, r8)
 80050d2:	46c0      	nop			@ (mov r8, r8)
 80050d4:	46bd      	mov	sp, r7
 80050d6:	b004      	add	sp, #16
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	46c0      	nop			@ (mov r8, r8)
 80050dc:	20000038 	.word	0x20000038

080050e0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80050e8:	4b06      	ldr	r3, [pc, #24]	@ (8005104 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a06      	ldr	r2, [pc, #24]	@ (8005108 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80050ee:	4013      	ands	r3, r2
 80050f0:	0019      	movs	r1, r3
 80050f2:	4b04      	ldr	r3, [pc, #16]	@ (8005104 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	430a      	orrs	r2, r1
 80050f8:	601a      	str	r2, [r3, #0]
}
 80050fa:	46c0      	nop			@ (mov r8, r8)
 80050fc:	46bd      	mov	sp, r7
 80050fe:	b002      	add	sp, #8
 8005100:	bd80      	pop	{r7, pc}
 8005102:	46c0      	nop			@ (mov r8, r8)
 8005104:	40010000 	.word	0x40010000
 8005108:	fffff9ff 	.word	0xfffff9ff

0800510c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a05      	ldr	r2, [pc, #20]	@ (8005130 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800511c:	401a      	ands	r2, r3
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	431a      	orrs	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	601a      	str	r2, [r3, #0]
}
 8005126:	46c0      	nop			@ (mov r8, r8)
 8005128:	46bd      	mov	sp, r7
 800512a:	b002      	add	sp, #8
 800512c:	bd80      	pop	{r7, pc}
 800512e:	46c0      	nop			@ (mov r8, r8)
 8005130:	fe3fffff 	.word	0xfe3fffff

08005134 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	23e0      	movs	r3, #224	@ 0xe0
 8005142:	045b      	lsls	r3, r3, #17
 8005144:	4013      	ands	r3, r2
}
 8005146:	0018      	movs	r0, r3
 8005148:	46bd      	mov	sp, r7
 800514a:	b002      	add	sp, #8
 800514c:	bd80      	pop	{r7, pc}

0800514e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b084      	sub	sp, #16
 8005152:	af00      	add	r7, sp, #0
 8005154:	60f8      	str	r0, [r7, #12]
 8005156:	60b9      	str	r1, [r7, #8]
 8005158:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	2104      	movs	r1, #4
 8005162:	400a      	ands	r2, r1
 8005164:	2107      	movs	r1, #7
 8005166:	4091      	lsls	r1, r2
 8005168:	000a      	movs	r2, r1
 800516a:	43d2      	mvns	r2, r2
 800516c:	401a      	ands	r2, r3
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	2104      	movs	r1, #4
 8005172:	400b      	ands	r3, r1
 8005174:	6879      	ldr	r1, [r7, #4]
 8005176:	4099      	lsls	r1, r3
 8005178:	000b      	movs	r3, r1
 800517a:	431a      	orrs	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8005180:	46c0      	nop			@ (mov r8, r8)
 8005182:	46bd      	mov	sp, r7
 8005184:	b004      	add	sp, #16
 8005186:	bd80      	pop	{r7, pc}

08005188 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	2104      	movs	r1, #4
 800519a:	400a      	ands	r2, r1
 800519c:	2107      	movs	r1, #7
 800519e:	4091      	lsls	r1, r2
 80051a0:	000a      	movs	r2, r1
 80051a2:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	2104      	movs	r1, #4
 80051a8:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80051aa:	40da      	lsrs	r2, r3
 80051ac:	0013      	movs	r3, r2
}
 80051ae:	0018      	movs	r0, r3
 80051b0:	46bd      	mov	sp, r7
 80051b2:	b002      	add	sp, #8
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b082      	sub	sp, #8
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68da      	ldr	r2, [r3, #12]
 80051c2:	23c0      	movs	r3, #192	@ 0xc0
 80051c4:	011b      	lsls	r3, r3, #4
 80051c6:	4013      	ands	r3, r2
 80051c8:	d101      	bne.n	80051ce <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80051ca:	2301      	movs	r3, #1
 80051cc:	e000      	b.n	80051d0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	0018      	movs	r0, r3
 80051d2:	46bd      	mov	sp, r7
 80051d4:	b002      	add	sp, #8
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051e8:	68ba      	ldr	r2, [r7, #8]
 80051ea:	211f      	movs	r1, #31
 80051ec:	400a      	ands	r2, r1
 80051ee:	210f      	movs	r1, #15
 80051f0:	4091      	lsls	r1, r2
 80051f2:	000a      	movs	r2, r1
 80051f4:	43d2      	mvns	r2, r2
 80051f6:	401a      	ands	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	0e9b      	lsrs	r3, r3, #26
 80051fc:	210f      	movs	r1, #15
 80051fe:	4019      	ands	r1, r3
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	201f      	movs	r0, #31
 8005204:	4003      	ands	r3, r0
 8005206:	4099      	lsls	r1, r3
 8005208:	000b      	movs	r3, r1
 800520a:	431a      	orrs	r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005210:	46c0      	nop			@ (mov r8, r8)
 8005212:	46bd      	mov	sp, r7
 8005214:	b004      	add	sp, #16
 8005216:	bd80      	pop	{r7, pc}

08005218 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	035b      	lsls	r3, r3, #13
 800522a:	0b5b      	lsrs	r3, r3, #13
 800522c:	431a      	orrs	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005232:	46c0      	nop			@ (mov r8, r8)
 8005234:	46bd      	mov	sp, r7
 8005236:	b002      	add	sp, #8
 8005238:	bd80      	pop	{r7, pc}

0800523a <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800523a:	b580      	push	{r7, lr}
 800523c:	b082      	sub	sp, #8
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
 8005242:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	0352      	lsls	r2, r2, #13
 800524c:	0b52      	lsrs	r2, r2, #13
 800524e:	43d2      	mvns	r2, r2
 8005250:	401a      	ands	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005256:	46c0      	nop			@ (mov r8, r8)
 8005258:	46bd      	mov	sp, r7
 800525a:	b002      	add	sp, #8
 800525c:	bd80      	pop	{r7, pc}
	...

08005260 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	695b      	ldr	r3, [r3, #20]
 8005270:	68ba      	ldr	r2, [r7, #8]
 8005272:	0212      	lsls	r2, r2, #8
 8005274:	43d2      	mvns	r2, r2
 8005276:	401a      	ands	r2, r3
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	021b      	lsls	r3, r3, #8
 800527c:	6879      	ldr	r1, [r7, #4]
 800527e:	400b      	ands	r3, r1
 8005280:	4904      	ldr	r1, [pc, #16]	@ (8005294 <LL_ADC_SetChannelSamplingTime+0x34>)
 8005282:	400b      	ands	r3, r1
 8005284:	431a      	orrs	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800528a:	46c0      	nop			@ (mov r8, r8)
 800528c:	46bd      	mov	sp, r7
 800528e:	b004      	add	sp, #16
 8005290:	bd80      	pop	{r7, pc}
 8005292:	46c0      	nop			@ (mov r8, r8)
 8005294:	07ffff00 	.word	0x07ffff00

08005298 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	4a05      	ldr	r2, [pc, #20]	@ (80052bc <LL_ADC_EnableInternalRegulator+0x24>)
 80052a6:	4013      	ands	r3, r2
 80052a8:	2280      	movs	r2, #128	@ 0x80
 80052aa:	0552      	lsls	r2, r2, #21
 80052ac:	431a      	orrs	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80052b2:	46c0      	nop			@ (mov r8, r8)
 80052b4:	46bd      	mov	sp, r7
 80052b6:	b002      	add	sp, #8
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	46c0      	nop			@ (mov r8, r8)
 80052bc:	6fffffe8 	.word	0x6fffffe8

080052c0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	689a      	ldr	r2, [r3, #8]
 80052cc:	2380      	movs	r3, #128	@ 0x80
 80052ce:	055b      	lsls	r3, r3, #21
 80052d0:	401a      	ands	r2, r3
 80052d2:	2380      	movs	r3, #128	@ 0x80
 80052d4:	055b      	lsls	r3, r3, #21
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d101      	bne.n	80052de <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80052da:	2301      	movs	r3, #1
 80052dc:	e000      	b.n	80052e0 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80052de:	2300      	movs	r3, #0
}
 80052e0:	0018      	movs	r0, r3
 80052e2:	46bd      	mov	sp, r7
 80052e4:	b002      	add	sp, #8
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	4a04      	ldr	r2, [pc, #16]	@ (8005308 <LL_ADC_Enable+0x20>)
 80052f6:	4013      	ands	r3, r2
 80052f8:	2201      	movs	r2, #1
 80052fa:	431a      	orrs	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005300:	46c0      	nop			@ (mov r8, r8)
 8005302:	46bd      	mov	sp, r7
 8005304:	b002      	add	sp, #8
 8005306:	bd80      	pop	{r7, pc}
 8005308:	7fffffe8 	.word	0x7fffffe8

0800530c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	4a04      	ldr	r2, [pc, #16]	@ (800532c <LL_ADC_Disable+0x20>)
 800531a:	4013      	ands	r3, r2
 800531c:	2202      	movs	r2, #2
 800531e:	431a      	orrs	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005324:	46c0      	nop			@ (mov r8, r8)
 8005326:	46bd      	mov	sp, r7
 8005328:	b002      	add	sp, #8
 800532a:	bd80      	pop	{r7, pc}
 800532c:	7fffffe8 	.word	0x7fffffe8

08005330 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	2201      	movs	r2, #1
 800533e:	4013      	ands	r3, r2
 8005340:	2b01      	cmp	r3, #1
 8005342:	d101      	bne.n	8005348 <LL_ADC_IsEnabled+0x18>
 8005344:	2301      	movs	r3, #1
 8005346:	e000      	b.n	800534a <LL_ADC_IsEnabled+0x1a>
 8005348:	2300      	movs	r3, #0
}
 800534a:	0018      	movs	r0, r3
 800534c:	46bd      	mov	sp, r7
 800534e:	b002      	add	sp, #8
 8005350:	bd80      	pop	{r7, pc}
	...

08005354 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	4a04      	ldr	r2, [pc, #16]	@ (8005374 <LL_ADC_REG_StartConversion+0x20>)
 8005362:	4013      	ands	r3, r2
 8005364:	2204      	movs	r2, #4
 8005366:	431a      	orrs	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800536c:	46c0      	nop			@ (mov r8, r8)
 800536e:	46bd      	mov	sp, r7
 8005370:	b002      	add	sp, #8
 8005372:	bd80      	pop	{r7, pc}
 8005374:	7fffffe8 	.word	0x7fffffe8

08005378 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	2204      	movs	r2, #4
 8005386:	4013      	ands	r3, r2
 8005388:	2b04      	cmp	r3, #4
 800538a:	d101      	bne.n	8005390 <LL_ADC_REG_IsConversionOngoing+0x18>
 800538c:	2301      	movs	r3, #1
 800538e:	e000      	b.n	8005392 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005390:	2300      	movs	r3, #0
}
 8005392:	0018      	movs	r0, r3
 8005394:	46bd      	mov	sp, r7
 8005396:	b002      	add	sp, #8
 8005398:	bd80      	pop	{r7, pc}
	...

0800539c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b088      	sub	sp, #32
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053a4:	231f      	movs	r3, #31
 80053a6:	18fb      	adds	r3, r7, r3
 80053a8:	2200      	movs	r2, #0
 80053aa:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80053ac:	2300      	movs	r3, #0
 80053ae:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 80053b0:	2300      	movs	r3, #0
 80053b2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80053b4:	2300      	movs	r3, #0
 80053b6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d101      	bne.n	80053c2 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e17f      	b.n	80056c2 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d10a      	bne.n	80053e0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	0018      	movs	r0, r3
 80053ce:	f7ff f883 	bl	80044d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2254      	movs	r2, #84	@ 0x54
 80053dc:	2100      	movs	r1, #0
 80053de:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	0018      	movs	r0, r3
 80053e6:	f7ff ff6b 	bl	80052c0 <LL_ADC_IsInternalRegulatorEnabled>
 80053ea:	1e03      	subs	r3, r0, #0
 80053ec:	d115      	bne.n	800541a <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	0018      	movs	r0, r3
 80053f4:	f7ff ff50 	bl	8005298 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80053f8:	4bb4      	ldr	r3, [pc, #720]	@ (80056cc <HAL_ADC_Init+0x330>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	49b4      	ldr	r1, [pc, #720]	@ (80056d0 <HAL_ADC_Init+0x334>)
 80053fe:	0018      	movs	r0, r3
 8005400:	f7fa fe9a 	bl	8000138 <__udivsi3>
 8005404:	0003      	movs	r3, r0
 8005406:	3301      	adds	r3, #1
 8005408:	005b      	lsls	r3, r3, #1
 800540a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800540c:	e002      	b.n	8005414 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	3b01      	subs	r3, #1
 8005412:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1f9      	bne.n	800540e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	0018      	movs	r0, r3
 8005420:	f7ff ff4e 	bl	80052c0 <LL_ADC_IsInternalRegulatorEnabled>
 8005424:	1e03      	subs	r3, r0, #0
 8005426:	d10f      	bne.n	8005448 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800542c:	2210      	movs	r2, #16
 800542e:	431a      	orrs	r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005438:	2201      	movs	r2, #1
 800543a:	431a      	orrs	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005440:	231f      	movs	r3, #31
 8005442:	18fb      	adds	r3, r7, r3
 8005444:	2201      	movs	r2, #1
 8005446:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	0018      	movs	r0, r3
 800544e:	f7ff ff93 	bl	8005378 <LL_ADC_REG_IsConversionOngoing>
 8005452:	0003      	movs	r3, r0
 8005454:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800545a:	2210      	movs	r2, #16
 800545c:	4013      	ands	r3, r2
 800545e:	d000      	beq.n	8005462 <HAL_ADC_Init+0xc6>
 8005460:	e122      	b.n	80056a8 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d000      	beq.n	800546a <HAL_ADC_Init+0xce>
 8005468:	e11e      	b.n	80056a8 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800546e:	4a99      	ldr	r2, [pc, #612]	@ (80056d4 <HAL_ADC_Init+0x338>)
 8005470:	4013      	ands	r3, r2
 8005472:	2202      	movs	r2, #2
 8005474:	431a      	orrs	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	0018      	movs	r0, r3
 8005480:	f7ff ff56 	bl	8005330 <LL_ADC_IsEnabled>
 8005484:	1e03      	subs	r3, r0, #0
 8005486:	d000      	beq.n	800548a <HAL_ADC_Init+0xee>
 8005488:	e0ad      	b.n	80055e6 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	7e1b      	ldrb	r3, [r3, #24]
 8005492:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8005494:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	7e5b      	ldrb	r3, [r3, #25]
 800549a:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800549c:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	7e9b      	ldrb	r3, [r3, #26]
 80054a2:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80054a4:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d002      	beq.n	80054b4 <HAL_ADC_Init+0x118>
 80054ae:	2380      	movs	r3, #128	@ 0x80
 80054b0:	015b      	lsls	r3, r3, #5
 80054b2:	e000      	b.n	80054b6 <HAL_ADC_Init+0x11a>
 80054b4:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80054b6:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80054bc:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	da04      	bge.n	80054d0 <HAL_ADC_Init+0x134>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	005b      	lsls	r3, r3, #1
 80054cc:	085b      	lsrs	r3, r3, #1
 80054ce:	e001      	b.n	80054d4 <HAL_ADC_Init+0x138>
 80054d0:	2380      	movs	r3, #128	@ 0x80
 80054d2:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80054d4:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	212c      	movs	r1, #44	@ 0x2c
 80054da:	5c5b      	ldrb	r3, [r3, r1]
 80054dc:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80054de:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80054e0:	69ba      	ldr	r2, [r7, #24]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2220      	movs	r2, #32
 80054ea:	5c9b      	ldrb	r3, [r3, r2]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d115      	bne.n	800551c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	7e9b      	ldrb	r3, [r3, #26]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d105      	bne.n	8005504 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	2280      	movs	r2, #128	@ 0x80
 80054fc:	0252      	lsls	r2, r2, #9
 80054fe:	4313      	orrs	r3, r2
 8005500:	61bb      	str	r3, [r7, #24]
 8005502:	e00b      	b.n	800551c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005508:	2220      	movs	r2, #32
 800550a:	431a      	orrs	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005514:	2201      	movs	r2, #1
 8005516:	431a      	orrs	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00a      	beq.n	800553a <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005528:	23e0      	movs	r3, #224	@ 0xe0
 800552a:	005b      	lsls	r3, r3, #1
 800552c:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005532:	4313      	orrs	r3, r2
 8005534:	69ba      	ldr	r2, [r7, #24]
 8005536:	4313      	orrs	r3, r2
 8005538:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	4a65      	ldr	r2, [pc, #404]	@ (80056d8 <HAL_ADC_Init+0x33c>)
 8005542:	4013      	ands	r3, r2
 8005544:	0019      	movs	r1, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	69ba      	ldr	r2, [r7, #24]
 800554c:	430a      	orrs	r2, r1
 800554e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	0f9b      	lsrs	r3, r3, #30
 8005556:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800555c:	4313      	orrs	r3, r2
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	4313      	orrs	r3, r2
 8005562:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	223c      	movs	r2, #60	@ 0x3c
 8005568:	5c9b      	ldrb	r3, [r3, r2]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d111      	bne.n	8005592 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	0f9b      	lsrs	r3, r3, #30
 8005574:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800557a:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8005580:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8005586:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	4313      	orrs	r3, r2
 800558c:	2201      	movs	r2, #1
 800558e:	4313      	orrs	r3, r2
 8005590:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	4a50      	ldr	r2, [pc, #320]	@ (80056dc <HAL_ADC_Init+0x340>)
 800559a:	4013      	ands	r3, r2
 800559c:	0019      	movs	r1, r3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	430a      	orrs	r2, r1
 80055a6:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685a      	ldr	r2, [r3, #4]
 80055ac:	23c0      	movs	r3, #192	@ 0xc0
 80055ae:	061b      	lsls	r3, r3, #24
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d018      	beq.n	80055e6 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80055b8:	2380      	movs	r3, #128	@ 0x80
 80055ba:	05db      	lsls	r3, r3, #23
 80055bc:	429a      	cmp	r2, r3
 80055be:	d012      	beq.n	80055e6 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80055c4:	2380      	movs	r3, #128	@ 0x80
 80055c6:	061b      	lsls	r3, r3, #24
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d00c      	beq.n	80055e6 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80055cc:	4b44      	ldr	r3, [pc, #272]	@ (80056e0 <HAL_ADC_Init+0x344>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a44      	ldr	r2, [pc, #272]	@ (80056e4 <HAL_ADC_Init+0x348>)
 80055d2:	4013      	ands	r3, r2
 80055d4:	0019      	movs	r1, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685a      	ldr	r2, [r3, #4]
 80055da:	23f0      	movs	r3, #240	@ 0xf0
 80055dc:	039b      	lsls	r3, r3, #14
 80055de:	401a      	ands	r2, r3
 80055e0:	4b3f      	ldr	r3, [pc, #252]	@ (80056e0 <HAL_ADC_Init+0x344>)
 80055e2:	430a      	orrs	r2, r1
 80055e4:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6818      	ldr	r0, [r3, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055ee:	001a      	movs	r2, r3
 80055f0:	2100      	movs	r1, #0
 80055f2:	f7ff fdac 	bl	800514e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6818      	ldr	r0, [r3, #0]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055fe:	493a      	ldr	r1, [pc, #232]	@ (80056e8 <HAL_ADC_Init+0x34c>)
 8005600:	001a      	movs	r2, r3
 8005602:	f7ff fda4 	bl	800514e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d109      	bne.n	8005622 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2110      	movs	r1, #16
 800561a:	4249      	negs	r1, r1
 800561c:	430a      	orrs	r2, r1
 800561e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005620:	e018      	b.n	8005654 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	691a      	ldr	r2, [r3, #16]
 8005626:	2380      	movs	r3, #128	@ 0x80
 8005628:	039b      	lsls	r3, r3, #14
 800562a:	429a      	cmp	r2, r3
 800562c:	d112      	bne.n	8005654 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	69db      	ldr	r3, [r3, #28]
 8005638:	3b01      	subs	r3, #1
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	221c      	movs	r2, #28
 800563e:	4013      	ands	r3, r2
 8005640:	2210      	movs	r2, #16
 8005642:	4252      	negs	r2, r2
 8005644:	409a      	lsls	r2, r3
 8005646:	0011      	movs	r1, r2
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	430a      	orrs	r2, r1
 8005652:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2100      	movs	r1, #0
 800565a:	0018      	movs	r0, r3
 800565c:	f7ff fd94 	bl	8005188 <LL_ADC_GetSamplingTimeCommonChannels>
 8005660:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005666:	429a      	cmp	r2, r3
 8005668:	d10b      	bne.n	8005682 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005674:	2203      	movs	r2, #3
 8005676:	4393      	bics	r3, r2
 8005678:	2201      	movs	r2, #1
 800567a:	431a      	orrs	r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005680:	e01c      	b.n	80056bc <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005686:	2212      	movs	r2, #18
 8005688:	4393      	bics	r3, r2
 800568a:	2210      	movs	r2, #16
 800568c:	431a      	orrs	r2, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005696:	2201      	movs	r2, #1
 8005698:	431a      	orrs	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800569e:	231f      	movs	r3, #31
 80056a0:	18fb      	adds	r3, r7, r3
 80056a2:	2201      	movs	r2, #1
 80056a4:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80056a6:	e009      	b.n	80056bc <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056ac:	2210      	movs	r2, #16
 80056ae:	431a      	orrs	r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80056b4:	231f      	movs	r3, #31
 80056b6:	18fb      	adds	r3, r7, r3
 80056b8:	2201      	movs	r2, #1
 80056ba:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80056bc:	231f      	movs	r3, #31
 80056be:	18fb      	adds	r3, r7, r3
 80056c0:	781b      	ldrb	r3, [r3, #0]
}
 80056c2:	0018      	movs	r0, r3
 80056c4:	46bd      	mov	sp, r7
 80056c6:	b008      	add	sp, #32
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	46c0      	nop			@ (mov r8, r8)
 80056cc:	2000001c 	.word	0x2000001c
 80056d0:	00030d40 	.word	0x00030d40
 80056d4:	fffffefd 	.word	0xfffffefd
 80056d8:	ffde0201 	.word	0xffde0201
 80056dc:	1ffffc02 	.word	0x1ffffc02
 80056e0:	40012708 	.word	0x40012708
 80056e4:	ffc3ffff 	.word	0xffc3ffff
 80056e8:	07ffff04 	.word	0x07ffff04

080056ec <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80056ec:	b5b0      	push	{r4, r5, r7, lr}
 80056ee:	b086      	sub	sp, #24
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	0018      	movs	r0, r3
 80056fe:	f7ff fe3b 	bl	8005378 <LL_ADC_REG_IsConversionOngoing>
 8005702:	1e03      	subs	r3, r0, #0
 8005704:	d16c      	bne.n	80057e0 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2254      	movs	r2, #84	@ 0x54
 800570a:	5c9b      	ldrb	r3, [r3, r2]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d101      	bne.n	8005714 <HAL_ADC_Start_DMA+0x28>
 8005710:	2302      	movs	r3, #2
 8005712:	e06c      	b.n	80057ee <HAL_ADC_Start_DMA+0x102>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2254      	movs	r2, #84	@ 0x54
 8005718:	2101      	movs	r1, #1
 800571a:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	2201      	movs	r2, #1
 8005724:	4013      	ands	r3, r2
 8005726:	d113      	bne.n	8005750 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	0018      	movs	r0, r3
 800572e:	f7ff fdff 	bl	8005330 <LL_ADC_IsEnabled>
 8005732:	1e03      	subs	r3, r0, #0
 8005734:	d004      	beq.n	8005740 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	0018      	movs	r0, r3
 800573c:	f7ff fde6 	bl	800530c <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68da      	ldr	r2, [r3, #12]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2101      	movs	r1, #1
 800574c:	430a      	orrs	r2, r1
 800574e:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005750:	2517      	movs	r5, #23
 8005752:	197c      	adds	r4, r7, r5
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	0018      	movs	r0, r3
 8005758:	f000 fa3e 	bl	8005bd8 <ADC_Enable>
 800575c:	0003      	movs	r3, r0
 800575e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005760:	002c      	movs	r4, r5
 8005762:	193b      	adds	r3, r7, r4
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d13e      	bne.n	80057e8 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800576e:	4a22      	ldr	r2, [pc, #136]	@ (80057f8 <HAL_ADC_Start_DMA+0x10c>)
 8005770:	4013      	ands	r3, r2
 8005772:	2280      	movs	r2, #128	@ 0x80
 8005774:	0052      	lsls	r2, r2, #1
 8005776:	431a      	orrs	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005786:	4a1d      	ldr	r2, [pc, #116]	@ (80057fc <HAL_ADC_Start_DMA+0x110>)
 8005788:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800578e:	4a1c      	ldr	r2, [pc, #112]	@ (8005800 <HAL_ADC_Start_DMA+0x114>)
 8005790:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005796:	4a1b      	ldr	r2, [pc, #108]	@ (8005804 <HAL_ADC_Start_DMA+0x118>)
 8005798:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	221c      	movs	r2, #28
 80057a0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2254      	movs	r2, #84	@ 0x54
 80057a6:	2100      	movs	r1, #0
 80057a8:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	685a      	ldr	r2, [r3, #4]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2110      	movs	r1, #16
 80057b6:	430a      	orrs	r2, r1
 80057b8:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	3340      	adds	r3, #64	@ 0x40
 80057c4:	0019      	movs	r1, r3
 80057c6:	68ba      	ldr	r2, [r7, #8]
 80057c8:	193c      	adds	r4, r7, r4
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f000 fcb2 	bl	8006134 <HAL_DMA_Start_IT>
 80057d0:	0003      	movs	r3, r0
 80057d2:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	0018      	movs	r0, r3
 80057da:	f7ff fdbb 	bl	8005354 <LL_ADC_REG_StartConversion>
 80057de:	e003      	b.n	80057e8 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80057e0:	2317      	movs	r3, #23
 80057e2:	18fb      	adds	r3, r7, r3
 80057e4:	2202      	movs	r2, #2
 80057e6:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80057e8:	2317      	movs	r3, #23
 80057ea:	18fb      	adds	r3, r7, r3
 80057ec:	781b      	ldrb	r3, [r3, #0]
}
 80057ee:	0018      	movs	r0, r3
 80057f0:	46bd      	mov	sp, r7
 80057f2:	b006      	add	sp, #24
 80057f4:	bdb0      	pop	{r4, r5, r7, pc}
 80057f6:	46c0      	nop			@ (mov r8, r8)
 80057f8:	fffff0fe 	.word	0xfffff0fe
 80057fc:	08005ce5 	.word	0x08005ce5
 8005800:	08005dad 	.word	0x08005dad
 8005804:	08005dcb 	.word	0x08005dcb

08005808 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005810:	46c0      	nop			@ (mov r8, r8)
 8005812:	46bd      	mov	sp, r7
 8005814:	b002      	add	sp, #8
 8005816:	bd80      	pop	{r7, pc}

08005818 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005820:	46c0      	nop			@ (mov r8, r8)
 8005822:	46bd      	mov	sp, r7
 8005824:	b002      	add	sp, #8
 8005826:	bd80      	pop	{r7, pc}

08005828 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b086      	sub	sp, #24
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005832:	2317      	movs	r3, #23
 8005834:	18fb      	adds	r3, r7, r3
 8005836:	2200      	movs	r2, #0
 8005838:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800583a:	2300      	movs	r3, #0
 800583c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2254      	movs	r2, #84	@ 0x54
 8005842:	5c9b      	ldrb	r3, [r3, r2]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d101      	bne.n	800584c <HAL_ADC_ConfigChannel+0x24>
 8005848:	2302      	movs	r3, #2
 800584a:	e1c0      	b.n	8005bce <HAL_ADC_ConfigChannel+0x3a6>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2254      	movs	r2, #84	@ 0x54
 8005850:	2101      	movs	r1, #1
 8005852:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	0018      	movs	r0, r3
 800585a:	f7ff fd8d 	bl	8005378 <LL_ADC_REG_IsConversionOngoing>
 800585e:	1e03      	subs	r3, r0, #0
 8005860:	d000      	beq.n	8005864 <HAL_ADC_ConfigChannel+0x3c>
 8005862:	e1a3      	b.n	8005bac <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	2b02      	cmp	r3, #2
 800586a:	d100      	bne.n	800586e <HAL_ADC_ConfigChannel+0x46>
 800586c:	e143      	b.n	8005af6 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	691a      	ldr	r2, [r3, #16]
 8005872:	2380      	movs	r3, #128	@ 0x80
 8005874:	061b      	lsls	r3, r3, #24
 8005876:	429a      	cmp	r2, r3
 8005878:	d004      	beq.n	8005884 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800587e:	4ac1      	ldr	r2, [pc, #772]	@ (8005b84 <HAL_ADC_ConfigChannel+0x35c>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d108      	bne.n	8005896 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	0019      	movs	r1, r3
 800588e:	0010      	movs	r0, r2
 8005890:	f7ff fcc2 	bl	8005218 <LL_ADC_REG_SetSequencerChAdd>
 8005894:	e0c9      	b.n	8005a2a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	211f      	movs	r1, #31
 80058a0:	400b      	ands	r3, r1
 80058a2:	210f      	movs	r1, #15
 80058a4:	4099      	lsls	r1, r3
 80058a6:	000b      	movs	r3, r1
 80058a8:	43db      	mvns	r3, r3
 80058aa:	4013      	ands	r3, r2
 80058ac:	0019      	movs	r1, r3
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	035b      	lsls	r3, r3, #13
 80058b4:	0b5b      	lsrs	r3, r3, #13
 80058b6:	d105      	bne.n	80058c4 <HAL_ADC_ConfigChannel+0x9c>
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	0e9b      	lsrs	r3, r3, #26
 80058be:	221f      	movs	r2, #31
 80058c0:	4013      	ands	r3, r2
 80058c2:	e098      	b.n	80059f6 <HAL_ADC_ConfigChannel+0x1ce>
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2201      	movs	r2, #1
 80058ca:	4013      	ands	r3, r2
 80058cc:	d000      	beq.n	80058d0 <HAL_ADC_ConfigChannel+0xa8>
 80058ce:	e091      	b.n	80059f4 <HAL_ADC_ConfigChannel+0x1cc>
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2202      	movs	r2, #2
 80058d6:	4013      	ands	r3, r2
 80058d8:	d000      	beq.n	80058dc <HAL_ADC_ConfigChannel+0xb4>
 80058da:	e089      	b.n	80059f0 <HAL_ADC_ConfigChannel+0x1c8>
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2204      	movs	r2, #4
 80058e2:	4013      	ands	r3, r2
 80058e4:	d000      	beq.n	80058e8 <HAL_ADC_ConfigChannel+0xc0>
 80058e6:	e081      	b.n	80059ec <HAL_ADC_ConfigChannel+0x1c4>
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2208      	movs	r2, #8
 80058ee:	4013      	ands	r3, r2
 80058f0:	d000      	beq.n	80058f4 <HAL_ADC_ConfigChannel+0xcc>
 80058f2:	e079      	b.n	80059e8 <HAL_ADC_ConfigChannel+0x1c0>
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2210      	movs	r2, #16
 80058fa:	4013      	ands	r3, r2
 80058fc:	d000      	beq.n	8005900 <HAL_ADC_ConfigChannel+0xd8>
 80058fe:	e071      	b.n	80059e4 <HAL_ADC_ConfigChannel+0x1bc>
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2220      	movs	r2, #32
 8005906:	4013      	ands	r3, r2
 8005908:	d000      	beq.n	800590c <HAL_ADC_ConfigChannel+0xe4>
 800590a:	e069      	b.n	80059e0 <HAL_ADC_ConfigChannel+0x1b8>
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2240      	movs	r2, #64	@ 0x40
 8005912:	4013      	ands	r3, r2
 8005914:	d000      	beq.n	8005918 <HAL_ADC_ConfigChannel+0xf0>
 8005916:	e061      	b.n	80059dc <HAL_ADC_ConfigChannel+0x1b4>
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2280      	movs	r2, #128	@ 0x80
 800591e:	4013      	ands	r3, r2
 8005920:	d000      	beq.n	8005924 <HAL_ADC_ConfigChannel+0xfc>
 8005922:	e059      	b.n	80059d8 <HAL_ADC_ConfigChannel+0x1b0>
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	2380      	movs	r3, #128	@ 0x80
 800592a:	005b      	lsls	r3, r3, #1
 800592c:	4013      	ands	r3, r2
 800592e:	d151      	bne.n	80059d4 <HAL_ADC_ConfigChannel+0x1ac>
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	2380      	movs	r3, #128	@ 0x80
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	4013      	ands	r3, r2
 800593a:	d149      	bne.n	80059d0 <HAL_ADC_ConfigChannel+0x1a8>
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	2380      	movs	r3, #128	@ 0x80
 8005942:	00db      	lsls	r3, r3, #3
 8005944:	4013      	ands	r3, r2
 8005946:	d141      	bne.n	80059cc <HAL_ADC_ConfigChannel+0x1a4>
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	2380      	movs	r3, #128	@ 0x80
 800594e:	011b      	lsls	r3, r3, #4
 8005950:	4013      	ands	r3, r2
 8005952:	d139      	bne.n	80059c8 <HAL_ADC_ConfigChannel+0x1a0>
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	2380      	movs	r3, #128	@ 0x80
 800595a:	015b      	lsls	r3, r3, #5
 800595c:	4013      	ands	r3, r2
 800595e:	d131      	bne.n	80059c4 <HAL_ADC_ConfigChannel+0x19c>
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	2380      	movs	r3, #128	@ 0x80
 8005966:	019b      	lsls	r3, r3, #6
 8005968:	4013      	ands	r3, r2
 800596a:	d129      	bne.n	80059c0 <HAL_ADC_ConfigChannel+0x198>
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	2380      	movs	r3, #128	@ 0x80
 8005972:	01db      	lsls	r3, r3, #7
 8005974:	4013      	ands	r3, r2
 8005976:	d121      	bne.n	80059bc <HAL_ADC_ConfigChannel+0x194>
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	2380      	movs	r3, #128	@ 0x80
 800597e:	021b      	lsls	r3, r3, #8
 8005980:	4013      	ands	r3, r2
 8005982:	d119      	bne.n	80059b8 <HAL_ADC_ConfigChannel+0x190>
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	2380      	movs	r3, #128	@ 0x80
 800598a:	025b      	lsls	r3, r3, #9
 800598c:	4013      	ands	r3, r2
 800598e:	d111      	bne.n	80059b4 <HAL_ADC_ConfigChannel+0x18c>
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	2380      	movs	r3, #128	@ 0x80
 8005996:	029b      	lsls	r3, r3, #10
 8005998:	4013      	ands	r3, r2
 800599a:	d109      	bne.n	80059b0 <HAL_ADC_ConfigChannel+0x188>
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	2380      	movs	r3, #128	@ 0x80
 80059a2:	02db      	lsls	r3, r3, #11
 80059a4:	4013      	ands	r3, r2
 80059a6:	d001      	beq.n	80059ac <HAL_ADC_ConfigChannel+0x184>
 80059a8:	2312      	movs	r3, #18
 80059aa:	e024      	b.n	80059f6 <HAL_ADC_ConfigChannel+0x1ce>
 80059ac:	2300      	movs	r3, #0
 80059ae:	e022      	b.n	80059f6 <HAL_ADC_ConfigChannel+0x1ce>
 80059b0:	2311      	movs	r3, #17
 80059b2:	e020      	b.n	80059f6 <HAL_ADC_ConfigChannel+0x1ce>
 80059b4:	2310      	movs	r3, #16
 80059b6:	e01e      	b.n	80059f6 <HAL_ADC_ConfigChannel+0x1ce>
 80059b8:	230f      	movs	r3, #15
 80059ba:	e01c      	b.n	80059f6 <HAL_ADC_ConfigChannel+0x1ce>
 80059bc:	230e      	movs	r3, #14
 80059be:	e01a      	b.n	80059f6 <HAL_ADC_ConfigChannel+0x1ce>
 80059c0:	230d      	movs	r3, #13
 80059c2:	e018      	b.n	80059f6 <HAL_ADC_ConfigChannel+0x1ce>
 80059c4:	230c      	movs	r3, #12
 80059c6:	e016      	b.n	80059f6 <HAL_ADC_ConfigChannel+0x1ce>
 80059c8:	230b      	movs	r3, #11
 80059ca:	e014      	b.n	80059f6 <HAL_ADC_ConfigChannel+0x1ce>
 80059cc:	230a      	movs	r3, #10
 80059ce:	e012      	b.n	80059f6 <HAL_ADC_ConfigChannel+0x1ce>
 80059d0:	2309      	movs	r3, #9
 80059d2:	e010      	b.n	80059f6 <HAL_ADC_ConfigChannel+0x1ce>
 80059d4:	2308      	movs	r3, #8
 80059d6:	e00e      	b.n	80059f6 <HAL_ADC_ConfigChannel+0x1ce>
 80059d8:	2307      	movs	r3, #7
 80059da:	e00c      	b.n	80059f6 <HAL_ADC_ConfigChannel+0x1ce>
 80059dc:	2306      	movs	r3, #6
 80059de:	e00a      	b.n	80059f6 <HAL_ADC_ConfigChannel+0x1ce>
 80059e0:	2305      	movs	r3, #5
 80059e2:	e008      	b.n	80059f6 <HAL_ADC_ConfigChannel+0x1ce>
 80059e4:	2304      	movs	r3, #4
 80059e6:	e006      	b.n	80059f6 <HAL_ADC_ConfigChannel+0x1ce>
 80059e8:	2303      	movs	r3, #3
 80059ea:	e004      	b.n	80059f6 <HAL_ADC_ConfigChannel+0x1ce>
 80059ec:	2302      	movs	r3, #2
 80059ee:	e002      	b.n	80059f6 <HAL_ADC_ConfigChannel+0x1ce>
 80059f0:	2301      	movs	r3, #1
 80059f2:	e000      	b.n	80059f6 <HAL_ADC_ConfigChannel+0x1ce>
 80059f4:	2300      	movs	r3, #0
 80059f6:	683a      	ldr	r2, [r7, #0]
 80059f8:	6852      	ldr	r2, [r2, #4]
 80059fa:	201f      	movs	r0, #31
 80059fc:	4002      	ands	r2, r0
 80059fe:	4093      	lsls	r3, r2
 8005a00:	000a      	movs	r2, r1
 8005a02:	431a      	orrs	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	089b      	lsrs	r3, r3, #2
 8005a0e:	1c5a      	adds	r2, r3, #1
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	69db      	ldr	r3, [r3, #28]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d808      	bhi.n	8005a2a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6818      	ldr	r0, [r3, #0]
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	6859      	ldr	r1, [r3, #4]
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	001a      	movs	r2, r3
 8005a26:	f7ff fbd7 	bl	80051d8 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6818      	ldr	r0, [r3, #0]
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	6819      	ldr	r1, [r3, #0]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	001a      	movs	r2, r3
 8005a38:	f7ff fc12 	bl	8005260 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	db00      	blt.n	8005a46 <HAL_ADC_ConfigChannel+0x21e>
 8005a44:	e0bc      	b.n	8005bc0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005a46:	4b50      	ldr	r3, [pc, #320]	@ (8005b88 <HAL_ADC_ConfigChannel+0x360>)
 8005a48:	0018      	movs	r0, r3
 8005a4a:	f7ff fb73 	bl	8005134 <LL_ADC_GetCommonPathInternalCh>
 8005a4e:	0003      	movs	r3, r0
 8005a50:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a4d      	ldr	r2, [pc, #308]	@ (8005b8c <HAL_ADC_ConfigChannel+0x364>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d122      	bne.n	8005aa2 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	2380      	movs	r3, #128	@ 0x80
 8005a60:	041b      	lsls	r3, r3, #16
 8005a62:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005a64:	d11d      	bne.n	8005aa2 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	2280      	movs	r2, #128	@ 0x80
 8005a6a:	0412      	lsls	r2, r2, #16
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	4a46      	ldr	r2, [pc, #280]	@ (8005b88 <HAL_ADC_ConfigChannel+0x360>)
 8005a70:	0019      	movs	r1, r3
 8005a72:	0010      	movs	r0, r2
 8005a74:	f7ff fb4a 	bl	800510c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005a78:	4b45      	ldr	r3, [pc, #276]	@ (8005b90 <HAL_ADC_ConfigChannel+0x368>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4945      	ldr	r1, [pc, #276]	@ (8005b94 <HAL_ADC_ConfigChannel+0x36c>)
 8005a7e:	0018      	movs	r0, r3
 8005a80:	f7fa fb5a 	bl	8000138 <__udivsi3>
 8005a84:	0003      	movs	r3, r0
 8005a86:	1c5a      	adds	r2, r3, #1
 8005a88:	0013      	movs	r3, r2
 8005a8a:	005b      	lsls	r3, r3, #1
 8005a8c:	189b      	adds	r3, r3, r2
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005a92:	e002      	b.n	8005a9a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	3b01      	subs	r3, #1
 8005a98:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1f9      	bne.n	8005a94 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005aa0:	e08e      	b.n	8005bc0 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a3c      	ldr	r2, [pc, #240]	@ (8005b98 <HAL_ADC_ConfigChannel+0x370>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d10e      	bne.n	8005aca <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005aac:	693a      	ldr	r2, [r7, #16]
 8005aae:	2380      	movs	r3, #128	@ 0x80
 8005ab0:	045b      	lsls	r3, r3, #17
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	d109      	bne.n	8005aca <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	2280      	movs	r2, #128	@ 0x80
 8005aba:	0452      	lsls	r2, r2, #17
 8005abc:	4313      	orrs	r3, r2
 8005abe:	4a32      	ldr	r2, [pc, #200]	@ (8005b88 <HAL_ADC_ConfigChannel+0x360>)
 8005ac0:	0019      	movs	r1, r3
 8005ac2:	0010      	movs	r0, r2
 8005ac4:	f7ff fb22 	bl	800510c <LL_ADC_SetCommonPathInternalCh>
 8005ac8:	e07a      	b.n	8005bc0 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a33      	ldr	r2, [pc, #204]	@ (8005b9c <HAL_ADC_ConfigChannel+0x374>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d000      	beq.n	8005ad6 <HAL_ADC_ConfigChannel+0x2ae>
 8005ad4:	e074      	b.n	8005bc0 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	2380      	movs	r3, #128	@ 0x80
 8005ada:	03db      	lsls	r3, r3, #15
 8005adc:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005ade:	d000      	beq.n	8005ae2 <HAL_ADC_ConfigChannel+0x2ba>
 8005ae0:	e06e      	b.n	8005bc0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	2280      	movs	r2, #128	@ 0x80
 8005ae6:	03d2      	lsls	r2, r2, #15
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	4a27      	ldr	r2, [pc, #156]	@ (8005b88 <HAL_ADC_ConfigChannel+0x360>)
 8005aec:	0019      	movs	r1, r3
 8005aee:	0010      	movs	r0, r2
 8005af0:	f7ff fb0c 	bl	800510c <LL_ADC_SetCommonPathInternalCh>
 8005af4:	e064      	b.n	8005bc0 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	691a      	ldr	r2, [r3, #16]
 8005afa:	2380      	movs	r3, #128	@ 0x80
 8005afc:	061b      	lsls	r3, r3, #24
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d004      	beq.n	8005b0c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005b06:	4a1f      	ldr	r2, [pc, #124]	@ (8005b84 <HAL_ADC_ConfigChannel+0x35c>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d107      	bne.n	8005b1c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	0019      	movs	r1, r3
 8005b16:	0010      	movs	r0, r2
 8005b18:	f7ff fb8f 	bl	800523a <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	da4d      	bge.n	8005bc0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005b24:	4b18      	ldr	r3, [pc, #96]	@ (8005b88 <HAL_ADC_ConfigChannel+0x360>)
 8005b26:	0018      	movs	r0, r3
 8005b28:	f7ff fb04 	bl	8005134 <LL_ADC_GetCommonPathInternalCh>
 8005b2c:	0003      	movs	r3, r0
 8005b2e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a15      	ldr	r2, [pc, #84]	@ (8005b8c <HAL_ADC_ConfigChannel+0x364>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d108      	bne.n	8005b4c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	4a18      	ldr	r2, [pc, #96]	@ (8005ba0 <HAL_ADC_ConfigChannel+0x378>)
 8005b3e:	4013      	ands	r3, r2
 8005b40:	4a11      	ldr	r2, [pc, #68]	@ (8005b88 <HAL_ADC_ConfigChannel+0x360>)
 8005b42:	0019      	movs	r1, r3
 8005b44:	0010      	movs	r0, r2
 8005b46:	f7ff fae1 	bl	800510c <LL_ADC_SetCommonPathInternalCh>
 8005b4a:	e039      	b.n	8005bc0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a11      	ldr	r2, [pc, #68]	@ (8005b98 <HAL_ADC_ConfigChannel+0x370>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d108      	bne.n	8005b68 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	4a12      	ldr	r2, [pc, #72]	@ (8005ba4 <HAL_ADC_ConfigChannel+0x37c>)
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	4a0a      	ldr	r2, [pc, #40]	@ (8005b88 <HAL_ADC_ConfigChannel+0x360>)
 8005b5e:	0019      	movs	r1, r3
 8005b60:	0010      	movs	r0, r2
 8005b62:	f7ff fad3 	bl	800510c <LL_ADC_SetCommonPathInternalCh>
 8005b66:	e02b      	b.n	8005bc0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a0b      	ldr	r2, [pc, #44]	@ (8005b9c <HAL_ADC_ConfigChannel+0x374>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d126      	bne.n	8005bc0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	4a0c      	ldr	r2, [pc, #48]	@ (8005ba8 <HAL_ADC_ConfigChannel+0x380>)
 8005b76:	4013      	ands	r3, r2
 8005b78:	4a03      	ldr	r2, [pc, #12]	@ (8005b88 <HAL_ADC_ConfigChannel+0x360>)
 8005b7a:	0019      	movs	r1, r3
 8005b7c:	0010      	movs	r0, r2
 8005b7e:	f7ff fac5 	bl	800510c <LL_ADC_SetCommonPathInternalCh>
 8005b82:	e01d      	b.n	8005bc0 <HAL_ADC_ConfigChannel+0x398>
 8005b84:	80000004 	.word	0x80000004
 8005b88:	40012708 	.word	0x40012708
 8005b8c:	b0001000 	.word	0xb0001000
 8005b90:	2000001c 	.word	0x2000001c
 8005b94:	00030d40 	.word	0x00030d40
 8005b98:	b8004000 	.word	0xb8004000
 8005b9c:	b4002000 	.word	0xb4002000
 8005ba0:	ff7fffff 	.word	0xff7fffff
 8005ba4:	feffffff 	.word	0xfeffffff
 8005ba8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bb0:	2220      	movs	r2, #32
 8005bb2:	431a      	orrs	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005bb8:	2317      	movs	r3, #23
 8005bba:	18fb      	adds	r3, r7, r3
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2254      	movs	r2, #84	@ 0x54
 8005bc4:	2100      	movs	r1, #0
 8005bc6:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8005bc8:	2317      	movs	r3, #23
 8005bca:	18fb      	adds	r3, r7, r3
 8005bcc:	781b      	ldrb	r3, [r3, #0]
}
 8005bce:	0018      	movs	r0, r3
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	b006      	add	sp, #24
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	46c0      	nop			@ (mov r8, r8)

08005bd8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005be0:	2300      	movs	r3, #0
 8005be2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	0018      	movs	r0, r3
 8005bea:	f7ff fba1 	bl	8005330 <LL_ADC_IsEnabled>
 8005bee:	1e03      	subs	r3, r0, #0
 8005bf0:	d000      	beq.n	8005bf4 <ADC_Enable+0x1c>
 8005bf2:	e069      	b.n	8005cc8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	4a36      	ldr	r2, [pc, #216]	@ (8005cd4 <ADC_Enable+0xfc>)
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	d00d      	beq.n	8005c1c <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c04:	2210      	movs	r2, #16
 8005c06:	431a      	orrs	r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c10:	2201      	movs	r2, #1
 8005c12:	431a      	orrs	r2, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e056      	b.n	8005cca <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	0018      	movs	r0, r3
 8005c22:	f7ff fb61 	bl	80052e8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8005c26:	4b2c      	ldr	r3, [pc, #176]	@ (8005cd8 <ADC_Enable+0x100>)
 8005c28:	0018      	movs	r0, r3
 8005c2a:	f7ff fa83 	bl	8005134 <LL_ADC_GetCommonPathInternalCh>
 8005c2e:	0002      	movs	r2, r0
 8005c30:	2380      	movs	r3, #128	@ 0x80
 8005c32:	041b      	lsls	r3, r3, #16
 8005c34:	4013      	ands	r3, r2
 8005c36:	d00f      	beq.n	8005c58 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005c38:	4b28      	ldr	r3, [pc, #160]	@ (8005cdc <ADC_Enable+0x104>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4928      	ldr	r1, [pc, #160]	@ (8005ce0 <ADC_Enable+0x108>)
 8005c3e:	0018      	movs	r0, r3
 8005c40:	f7fa fa7a 	bl	8000138 <__udivsi3>
 8005c44:	0003      	movs	r3, r0
 8005c46:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8005c48:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005c4a:	e002      	b.n	8005c52 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1f9      	bne.n	8005c4c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	7e5b      	ldrb	r3, [r3, #25]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d033      	beq.n	8005cc8 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8005c60:	f7ff fa10 	bl	8005084 <HAL_GetTick>
 8005c64:	0003      	movs	r3, r0
 8005c66:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005c68:	e027      	b.n	8005cba <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	0018      	movs	r0, r3
 8005c70:	f7ff fb5e 	bl	8005330 <LL_ADC_IsEnabled>
 8005c74:	1e03      	subs	r3, r0, #0
 8005c76:	d104      	bne.n	8005c82 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	0018      	movs	r0, r3
 8005c7e:	f7ff fb33 	bl	80052e8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005c82:	f7ff f9ff 	bl	8005084 <HAL_GetTick>
 8005c86:	0002      	movs	r2, r0
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d914      	bls.n	8005cba <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2201      	movs	r2, #1
 8005c98:	4013      	ands	r3, r2
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d00d      	beq.n	8005cba <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ca2:	2210      	movs	r2, #16
 8005ca4:	431a      	orrs	r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cae:	2201      	movs	r2, #1
 8005cb0:	431a      	orrs	r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e007      	b.n	8005cca <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d1d0      	bne.n	8005c6a <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	0018      	movs	r0, r3
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	b004      	add	sp, #16
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	46c0      	nop			@ (mov r8, r8)
 8005cd4:	80000017 	.word	0x80000017
 8005cd8:	40012708 	.word	0x40012708
 8005cdc:	2000001c 	.word	0x2000001c
 8005ce0:	00030d40 	.word	0x00030d40

08005ce4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cf0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cf6:	2250      	movs	r2, #80	@ 0x50
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	d141      	bne.n	8005d80 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d00:	2280      	movs	r2, #128	@ 0x80
 8005d02:	0092      	lsls	r2, r2, #2
 8005d04:	431a      	orrs	r2, r3
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	0018      	movs	r0, r3
 8005d10:	f7ff fa51 	bl	80051b6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005d14:	1e03      	subs	r3, r0, #0
 8005d16:	d02e      	beq.n	8005d76 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	7e9b      	ldrb	r3, [r3, #26]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d12a      	bne.n	8005d76 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2208      	movs	r2, #8
 8005d28:	4013      	ands	r3, r2
 8005d2a:	2b08      	cmp	r3, #8
 8005d2c:	d123      	bne.n	8005d76 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	0018      	movs	r0, r3
 8005d34:	f7ff fb20 	bl	8005378 <LL_ADC_REG_IsConversionOngoing>
 8005d38:	1e03      	subs	r3, r0, #0
 8005d3a:	d110      	bne.n	8005d5e <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	685a      	ldr	r2, [r3, #4]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	210c      	movs	r1, #12
 8005d48:	438a      	bics	r2, r1
 8005d4a:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d50:	4a15      	ldr	r2, [pc, #84]	@ (8005da8 <ADC_DMAConvCplt+0xc4>)
 8005d52:	4013      	ands	r3, r2
 8005d54:	2201      	movs	r2, #1
 8005d56:	431a      	orrs	r2, r3
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	659a      	str	r2, [r3, #88]	@ 0x58
 8005d5c:	e00b      	b.n	8005d76 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d62:	2220      	movs	r2, #32
 8005d64:	431a      	orrs	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d6e:	2201      	movs	r2, #1
 8005d70:	431a      	orrs	r2, r3
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	0018      	movs	r0, r3
 8005d7a:	f7fd fb7f 	bl	800347c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005d7e:	e00f      	b.n	8005da0 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d84:	2210      	movs	r2, #16
 8005d86:	4013      	ands	r3, r2
 8005d88:	d004      	beq.n	8005d94 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	0018      	movs	r0, r3
 8005d8e:	f7ff fd43 	bl	8005818 <HAL_ADC_ErrorCallback>
}
 8005d92:	e005      	b.n	8005da0 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	0010      	movs	r0, r2
 8005d9e:	4798      	blx	r3
}
 8005da0:	46c0      	nop			@ (mov r8, r8)
 8005da2:	46bd      	mov	sp, r7
 8005da4:	b004      	add	sp, #16
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	fffffefe 	.word	0xfffffefe

08005dac <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005db8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	0018      	movs	r0, r3
 8005dbe:	f7ff fd23 	bl	8005808 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005dc2:	46c0      	nop			@ (mov r8, r8)
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	b004      	add	sp, #16
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b084      	sub	sp, #16
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dd6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ddc:	2240      	movs	r2, #64	@ 0x40
 8005dde:	431a      	orrs	r2, r3
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005de8:	2204      	movs	r2, #4
 8005dea:	431a      	orrs	r2, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	0018      	movs	r0, r3
 8005df4:	f7ff fd10 	bl	8005818 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005df8:	46c0      	nop			@ (mov r8, r8)
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	b004      	add	sp, #16
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	0002      	movs	r2, r0
 8005e08:	1dfb      	adds	r3, r7, #7
 8005e0a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005e0c:	1dfb      	adds	r3, r7, #7
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e12:	d809      	bhi.n	8005e28 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e14:	1dfb      	adds	r3, r7, #7
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	001a      	movs	r2, r3
 8005e1a:	231f      	movs	r3, #31
 8005e1c:	401a      	ands	r2, r3
 8005e1e:	4b04      	ldr	r3, [pc, #16]	@ (8005e30 <__NVIC_EnableIRQ+0x30>)
 8005e20:	2101      	movs	r1, #1
 8005e22:	4091      	lsls	r1, r2
 8005e24:	000a      	movs	r2, r1
 8005e26:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8005e28:	46c0      	nop			@ (mov r8, r8)
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	b002      	add	sp, #8
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	e000e100 	.word	0xe000e100

08005e34 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b082      	sub	sp, #8
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	0002      	movs	r2, r0
 8005e3c:	1dfb      	adds	r3, r7, #7
 8005e3e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005e40:	1dfb      	adds	r3, r7, #7
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e46:	d810      	bhi.n	8005e6a <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e48:	1dfb      	adds	r3, r7, #7
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	001a      	movs	r2, r3
 8005e4e:	231f      	movs	r3, #31
 8005e50:	4013      	ands	r3, r2
 8005e52:	4908      	ldr	r1, [pc, #32]	@ (8005e74 <__NVIC_DisableIRQ+0x40>)
 8005e54:	2201      	movs	r2, #1
 8005e56:	409a      	lsls	r2, r3
 8005e58:	0013      	movs	r3, r2
 8005e5a:	2280      	movs	r2, #128	@ 0x80
 8005e5c:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005e5e:	f3bf 8f4f 	dsb	sy
}
 8005e62:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8005e64:	f3bf 8f6f 	isb	sy
}
 8005e68:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8005e6a:	46c0      	nop			@ (mov r8, r8)
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	b002      	add	sp, #8
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	46c0      	nop			@ (mov r8, r8)
 8005e74:	e000e100 	.word	0xe000e100

08005e78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005e78:	b590      	push	{r4, r7, lr}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	0002      	movs	r2, r0
 8005e80:	6039      	str	r1, [r7, #0]
 8005e82:	1dfb      	adds	r3, r7, #7
 8005e84:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005e86:	1dfb      	adds	r3, r7, #7
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e8c:	d828      	bhi.n	8005ee0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005e8e:	4a2f      	ldr	r2, [pc, #188]	@ (8005f4c <__NVIC_SetPriority+0xd4>)
 8005e90:	1dfb      	adds	r3, r7, #7
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	b25b      	sxtb	r3, r3
 8005e96:	089b      	lsrs	r3, r3, #2
 8005e98:	33c0      	adds	r3, #192	@ 0xc0
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	589b      	ldr	r3, [r3, r2]
 8005e9e:	1dfa      	adds	r2, r7, #7
 8005ea0:	7812      	ldrb	r2, [r2, #0]
 8005ea2:	0011      	movs	r1, r2
 8005ea4:	2203      	movs	r2, #3
 8005ea6:	400a      	ands	r2, r1
 8005ea8:	00d2      	lsls	r2, r2, #3
 8005eaa:	21ff      	movs	r1, #255	@ 0xff
 8005eac:	4091      	lsls	r1, r2
 8005eae:	000a      	movs	r2, r1
 8005eb0:	43d2      	mvns	r2, r2
 8005eb2:	401a      	ands	r2, r3
 8005eb4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	019b      	lsls	r3, r3, #6
 8005eba:	22ff      	movs	r2, #255	@ 0xff
 8005ebc:	401a      	ands	r2, r3
 8005ebe:	1dfb      	adds	r3, r7, #7
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	0018      	movs	r0, r3
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	4003      	ands	r3, r0
 8005ec8:	00db      	lsls	r3, r3, #3
 8005eca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005ecc:	481f      	ldr	r0, [pc, #124]	@ (8005f4c <__NVIC_SetPriority+0xd4>)
 8005ece:	1dfb      	adds	r3, r7, #7
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	b25b      	sxtb	r3, r3
 8005ed4:	089b      	lsrs	r3, r3, #2
 8005ed6:	430a      	orrs	r2, r1
 8005ed8:	33c0      	adds	r3, #192	@ 0xc0
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005ede:	e031      	b.n	8005f44 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005ee0:	4a1b      	ldr	r2, [pc, #108]	@ (8005f50 <__NVIC_SetPriority+0xd8>)
 8005ee2:	1dfb      	adds	r3, r7, #7
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	0019      	movs	r1, r3
 8005ee8:	230f      	movs	r3, #15
 8005eea:	400b      	ands	r3, r1
 8005eec:	3b08      	subs	r3, #8
 8005eee:	089b      	lsrs	r3, r3, #2
 8005ef0:	3306      	adds	r3, #6
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	18d3      	adds	r3, r2, r3
 8005ef6:	3304      	adds	r3, #4
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	1dfa      	adds	r2, r7, #7
 8005efc:	7812      	ldrb	r2, [r2, #0]
 8005efe:	0011      	movs	r1, r2
 8005f00:	2203      	movs	r2, #3
 8005f02:	400a      	ands	r2, r1
 8005f04:	00d2      	lsls	r2, r2, #3
 8005f06:	21ff      	movs	r1, #255	@ 0xff
 8005f08:	4091      	lsls	r1, r2
 8005f0a:	000a      	movs	r2, r1
 8005f0c:	43d2      	mvns	r2, r2
 8005f0e:	401a      	ands	r2, r3
 8005f10:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	019b      	lsls	r3, r3, #6
 8005f16:	22ff      	movs	r2, #255	@ 0xff
 8005f18:	401a      	ands	r2, r3
 8005f1a:	1dfb      	adds	r3, r7, #7
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	0018      	movs	r0, r3
 8005f20:	2303      	movs	r3, #3
 8005f22:	4003      	ands	r3, r0
 8005f24:	00db      	lsls	r3, r3, #3
 8005f26:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005f28:	4809      	ldr	r0, [pc, #36]	@ (8005f50 <__NVIC_SetPriority+0xd8>)
 8005f2a:	1dfb      	adds	r3, r7, #7
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	001c      	movs	r4, r3
 8005f30:	230f      	movs	r3, #15
 8005f32:	4023      	ands	r3, r4
 8005f34:	3b08      	subs	r3, #8
 8005f36:	089b      	lsrs	r3, r3, #2
 8005f38:	430a      	orrs	r2, r1
 8005f3a:	3306      	adds	r3, #6
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	18c3      	adds	r3, r0, r3
 8005f40:	3304      	adds	r3, #4
 8005f42:	601a      	str	r2, [r3, #0]
}
 8005f44:	46c0      	nop			@ (mov r8, r8)
 8005f46:	46bd      	mov	sp, r7
 8005f48:	b003      	add	sp, #12
 8005f4a:	bd90      	pop	{r4, r7, pc}
 8005f4c:	e000e100 	.word	0xe000e100
 8005f50:	e000ed00 	.word	0xe000ed00

08005f54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	1e5a      	subs	r2, r3, #1
 8005f60:	2380      	movs	r3, #128	@ 0x80
 8005f62:	045b      	lsls	r3, r3, #17
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d301      	bcc.n	8005f6c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e010      	b.n	8005f8e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8005f98 <SysTick_Config+0x44>)
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	3a01      	subs	r2, #1
 8005f72:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005f74:	2301      	movs	r3, #1
 8005f76:	425b      	negs	r3, r3
 8005f78:	2103      	movs	r1, #3
 8005f7a:	0018      	movs	r0, r3
 8005f7c:	f7ff ff7c 	bl	8005e78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005f80:	4b05      	ldr	r3, [pc, #20]	@ (8005f98 <SysTick_Config+0x44>)
 8005f82:	2200      	movs	r2, #0
 8005f84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005f86:	4b04      	ldr	r3, [pc, #16]	@ (8005f98 <SysTick_Config+0x44>)
 8005f88:	2207      	movs	r2, #7
 8005f8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	0018      	movs	r0, r3
 8005f90:	46bd      	mov	sp, r7
 8005f92:	b002      	add	sp, #8
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	46c0      	nop			@ (mov r8, r8)
 8005f98:	e000e010 	.word	0xe000e010

08005f9c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60b9      	str	r1, [r7, #8]
 8005fa4:	607a      	str	r2, [r7, #4]
 8005fa6:	210f      	movs	r1, #15
 8005fa8:	187b      	adds	r3, r7, r1
 8005faa:	1c02      	adds	r2, r0, #0
 8005fac:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	187b      	adds	r3, r7, r1
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	b25b      	sxtb	r3, r3
 8005fb6:	0011      	movs	r1, r2
 8005fb8:	0018      	movs	r0, r3
 8005fba:	f7ff ff5d 	bl	8005e78 <__NVIC_SetPriority>
}
 8005fbe:	46c0      	nop			@ (mov r8, r8)
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	b004      	add	sp, #16
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	b082      	sub	sp, #8
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	0002      	movs	r2, r0
 8005fce:	1dfb      	adds	r3, r7, #7
 8005fd0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005fd2:	1dfb      	adds	r3, r7, #7
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	b25b      	sxtb	r3, r3
 8005fd8:	0018      	movs	r0, r3
 8005fda:	f7ff ff11 	bl	8005e00 <__NVIC_EnableIRQ>
}
 8005fde:	46c0      	nop			@ (mov r8, r8)
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	b002      	add	sp, #8
 8005fe4:	bd80      	pop	{r7, pc}

08005fe6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005fe6:	b580      	push	{r7, lr}
 8005fe8:	b082      	sub	sp, #8
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	0002      	movs	r2, r0
 8005fee:	1dfb      	adds	r3, r7, #7
 8005ff0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005ff2:	1dfb      	adds	r3, r7, #7
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	b25b      	sxtb	r3, r3
 8005ff8:	0018      	movs	r0, r3
 8005ffa:	f7ff ff1b 	bl	8005e34 <__NVIC_DisableIRQ>
}
 8005ffe:	46c0      	nop			@ (mov r8, r8)
 8006000:	46bd      	mov	sp, r7
 8006002:	b002      	add	sp, #8
 8006004:	bd80      	pop	{r7, pc}

08006006 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006006:	b580      	push	{r7, lr}
 8006008:	b082      	sub	sp, #8
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	0018      	movs	r0, r3
 8006012:	f7ff ff9f 	bl	8005f54 <SysTick_Config>
 8006016:	0003      	movs	r3, r0
}
 8006018:	0018      	movs	r0, r3
 800601a:	46bd      	mov	sp, r7
 800601c:	b002      	add	sp, #8
 800601e:	bd80      	pop	{r7, pc}

08006020 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d101      	bne.n	8006032 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e077      	b.n	8006122 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a3d      	ldr	r2, [pc, #244]	@ (800612c <HAL_DMA_Init+0x10c>)
 8006038:	4694      	mov	ip, r2
 800603a:	4463      	add	r3, ip
 800603c:	2114      	movs	r1, #20
 800603e:	0018      	movs	r0, r3
 8006040:	f7fa f87a 	bl	8000138 <__udivsi3>
 8006044:	0003      	movs	r3, r0
 8006046:	009a      	lsls	r2, r3, #2
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2225      	movs	r2, #37	@ 0x25
 8006050:	2102      	movs	r1, #2
 8006052:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4934      	ldr	r1, [pc, #208]	@ (8006130 <HAL_DMA_Init+0x110>)
 8006060:	400a      	ands	r2, r1
 8006062:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	6819      	ldr	r1, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	689a      	ldr	r2, [r3, #8]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	431a      	orrs	r2, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	431a      	orrs	r2, r3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	431a      	orrs	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	699b      	ldr	r3, [r3, #24]
 8006084:	431a      	orrs	r2, r3
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	69db      	ldr	r3, [r3, #28]
 800608a:	431a      	orrs	r2, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6a1b      	ldr	r3, [r3, #32]
 8006090:	431a      	orrs	r2, r3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	430a      	orrs	r2, r1
 8006098:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	0018      	movs	r0, r3
 800609e:	f000 f9c1 	bl	8006424 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	689a      	ldr	r2, [r3, #8]
 80060a6:	2380      	movs	r3, #128	@ 0x80
 80060a8:	01db      	lsls	r3, r3, #7
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d102      	bne.n	80060b4 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685a      	ldr	r2, [r3, #4]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060bc:	213f      	movs	r1, #63	@ 0x3f
 80060be:	400a      	ands	r2, r1
 80060c0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80060ca:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d011      	beq.n	80060f8 <HAL_DMA_Init+0xd8>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	2b04      	cmp	r3, #4
 80060da:	d80d      	bhi.n	80060f8 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	0018      	movs	r0, r3
 80060e0:	f000 f9cc 	bl	800647c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060e8:	2200      	movs	r2, #0
 80060ea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80060f4:	605a      	str	r2, [r3, #4]
 80060f6:	e008      	b.n	800610a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2225      	movs	r2, #37	@ 0x25
 8006114:	2101      	movs	r1, #1
 8006116:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2224      	movs	r2, #36	@ 0x24
 800611c:	2100      	movs	r1, #0
 800611e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	0018      	movs	r0, r3
 8006124:	46bd      	mov	sp, r7
 8006126:	b002      	add	sp, #8
 8006128:	bd80      	pop	{r7, pc}
 800612a:	46c0      	nop			@ (mov r8, r8)
 800612c:	bffdfff8 	.word	0xbffdfff8
 8006130:	ffff800f 	.word	0xffff800f

08006134 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b086      	sub	sp, #24
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
 8006140:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006142:	2317      	movs	r3, #23
 8006144:	18fb      	adds	r3, r7, r3
 8006146:	2200      	movs	r2, #0
 8006148:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2224      	movs	r2, #36	@ 0x24
 800614e:	5c9b      	ldrb	r3, [r3, r2]
 8006150:	2b01      	cmp	r3, #1
 8006152:	d101      	bne.n	8006158 <HAL_DMA_Start_IT+0x24>
 8006154:	2302      	movs	r3, #2
 8006156:	e06f      	b.n	8006238 <HAL_DMA_Start_IT+0x104>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2224      	movs	r2, #36	@ 0x24
 800615c:	2101      	movs	r1, #1
 800615e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2225      	movs	r2, #37	@ 0x25
 8006164:	5c9b      	ldrb	r3, [r3, r2]
 8006166:	b2db      	uxtb	r3, r3
 8006168:	2b01      	cmp	r3, #1
 800616a:	d157      	bne.n	800621c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2225      	movs	r2, #37	@ 0x25
 8006170:	2102      	movs	r1, #2
 8006172:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2101      	movs	r1, #1
 8006186:	438a      	bics	r2, r1
 8006188:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	68b9      	ldr	r1, [r7, #8]
 8006190:	68f8      	ldr	r0, [r7, #12]
 8006192:	f000 f907 	bl	80063a4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800619a:	2b00      	cmp	r3, #0
 800619c:	d008      	beq.n	80061b0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	210e      	movs	r1, #14
 80061aa:	430a      	orrs	r2, r1
 80061ac:	601a      	str	r2, [r3, #0]
 80061ae:	e00f      	b.n	80061d0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2104      	movs	r1, #4
 80061bc:	438a      	bics	r2, r1
 80061be:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	210a      	movs	r1, #10
 80061cc:	430a      	orrs	r2, r1
 80061ce:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	2380      	movs	r3, #128	@ 0x80
 80061d8:	025b      	lsls	r3, r3, #9
 80061da:	4013      	ands	r3, r2
 80061dc:	d008      	beq.n	80061f0 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061e8:	2180      	movs	r1, #128	@ 0x80
 80061ea:	0049      	lsls	r1, r1, #1
 80061ec:	430a      	orrs	r2, r1
 80061ee:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d008      	beq.n	800620a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006202:	2180      	movs	r1, #128	@ 0x80
 8006204:	0049      	lsls	r1, r1, #1
 8006206:	430a      	orrs	r2, r1
 8006208:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2101      	movs	r1, #1
 8006216:	430a      	orrs	r2, r1
 8006218:	601a      	str	r2, [r3, #0]
 800621a:	e00a      	b.n	8006232 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2280      	movs	r2, #128	@ 0x80
 8006220:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2224      	movs	r2, #36	@ 0x24
 8006226:	2100      	movs	r1, #0
 8006228:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800622a:	2317      	movs	r3, #23
 800622c:	18fb      	adds	r3, r7, r3
 800622e:	2201      	movs	r2, #1
 8006230:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8006232:	2317      	movs	r3, #23
 8006234:	18fb      	adds	r3, r7, r3
 8006236:	781b      	ldrb	r3, [r3, #0]
}
 8006238:	0018      	movs	r0, r3
 800623a:	46bd      	mov	sp, r7
 800623c:	b006      	add	sp, #24
 800623e:	bd80      	pop	{r7, pc}

08006240 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8006248:	4b55      	ldr	r3, [pc, #340]	@ (80063a0 <HAL_DMA_IRQHandler+0x160>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800625a:	221c      	movs	r2, #28
 800625c:	4013      	ands	r3, r2
 800625e:	2204      	movs	r2, #4
 8006260:	409a      	lsls	r2, r3
 8006262:	0013      	movs	r3, r2
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	4013      	ands	r3, r2
 8006268:	d027      	beq.n	80062ba <HAL_DMA_IRQHandler+0x7a>
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	2204      	movs	r2, #4
 800626e:	4013      	ands	r3, r2
 8006270:	d023      	beq.n	80062ba <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2220      	movs	r2, #32
 800627a:	4013      	ands	r3, r2
 800627c:	d107      	bne.n	800628e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2104      	movs	r1, #4
 800628a:	438a      	bics	r2, r1
 800628c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800628e:	4b44      	ldr	r3, [pc, #272]	@ (80063a0 <HAL_DMA_IRQHandler+0x160>)
 8006290:	6859      	ldr	r1, [r3, #4]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006296:	221c      	movs	r2, #28
 8006298:	4013      	ands	r3, r2
 800629a:	2204      	movs	r2, #4
 800629c:	409a      	lsls	r2, r3
 800629e:	4b40      	ldr	r3, [pc, #256]	@ (80063a0 <HAL_DMA_IRQHandler+0x160>)
 80062a0:	430a      	orrs	r2, r1
 80062a2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d100      	bne.n	80062ae <HAL_DMA_IRQHandler+0x6e>
 80062ac:	e073      	b.n	8006396 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	0010      	movs	r0, r2
 80062b6:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80062b8:	e06d      	b.n	8006396 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062be:	221c      	movs	r2, #28
 80062c0:	4013      	ands	r3, r2
 80062c2:	2202      	movs	r2, #2
 80062c4:	409a      	lsls	r2, r3
 80062c6:	0013      	movs	r3, r2
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	4013      	ands	r3, r2
 80062cc:	d02e      	beq.n	800632c <HAL_DMA_IRQHandler+0xec>
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	2202      	movs	r2, #2
 80062d2:	4013      	ands	r3, r2
 80062d4:	d02a      	beq.n	800632c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2220      	movs	r2, #32
 80062de:	4013      	ands	r3, r2
 80062e0:	d10b      	bne.n	80062fa <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	210a      	movs	r1, #10
 80062ee:	438a      	bics	r2, r1
 80062f0:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2225      	movs	r2, #37	@ 0x25
 80062f6:	2101      	movs	r1, #1
 80062f8:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80062fa:	4b29      	ldr	r3, [pc, #164]	@ (80063a0 <HAL_DMA_IRQHandler+0x160>)
 80062fc:	6859      	ldr	r1, [r3, #4]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006302:	221c      	movs	r2, #28
 8006304:	4013      	ands	r3, r2
 8006306:	2202      	movs	r2, #2
 8006308:	409a      	lsls	r2, r3
 800630a:	4b25      	ldr	r3, [pc, #148]	@ (80063a0 <HAL_DMA_IRQHandler+0x160>)
 800630c:	430a      	orrs	r2, r1
 800630e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2224      	movs	r2, #36	@ 0x24
 8006314:	2100      	movs	r1, #0
 8006316:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800631c:	2b00      	cmp	r3, #0
 800631e:	d03a      	beq.n	8006396 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	0010      	movs	r0, r2
 8006328:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800632a:	e034      	b.n	8006396 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006330:	221c      	movs	r2, #28
 8006332:	4013      	ands	r3, r2
 8006334:	2208      	movs	r2, #8
 8006336:	409a      	lsls	r2, r3
 8006338:	0013      	movs	r3, r2
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	4013      	ands	r3, r2
 800633e:	d02b      	beq.n	8006398 <HAL_DMA_IRQHandler+0x158>
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	2208      	movs	r2, #8
 8006344:	4013      	ands	r3, r2
 8006346:	d027      	beq.n	8006398 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	210e      	movs	r1, #14
 8006354:	438a      	bics	r2, r1
 8006356:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8006358:	4b11      	ldr	r3, [pc, #68]	@ (80063a0 <HAL_DMA_IRQHandler+0x160>)
 800635a:	6859      	ldr	r1, [r3, #4]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006360:	221c      	movs	r2, #28
 8006362:	4013      	ands	r3, r2
 8006364:	2201      	movs	r2, #1
 8006366:	409a      	lsls	r2, r3
 8006368:	4b0d      	ldr	r3, [pc, #52]	@ (80063a0 <HAL_DMA_IRQHandler+0x160>)
 800636a:	430a      	orrs	r2, r1
 800636c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2201      	movs	r2, #1
 8006372:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2225      	movs	r2, #37	@ 0x25
 8006378:	2101      	movs	r1, #1
 800637a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2224      	movs	r2, #36	@ 0x24
 8006380:	2100      	movs	r1, #0
 8006382:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006388:	2b00      	cmp	r3, #0
 800638a:	d005      	beq.n	8006398 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	0010      	movs	r0, r2
 8006394:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006396:	46c0      	nop			@ (mov r8, r8)
 8006398:	46c0      	nop			@ (mov r8, r8)
}
 800639a:	46bd      	mov	sp, r7
 800639c:	b004      	add	sp, #16
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	40020000 	.word	0x40020000

080063a4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	607a      	str	r2, [r7, #4]
 80063b0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80063ba:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d004      	beq.n	80063ce <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80063cc:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80063ce:	4b14      	ldr	r3, [pc, #80]	@ (8006420 <DMA_SetConfig+0x7c>)
 80063d0:	6859      	ldr	r1, [r3, #4]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d6:	221c      	movs	r2, #28
 80063d8:	4013      	ands	r3, r2
 80063da:	2201      	movs	r2, #1
 80063dc:	409a      	lsls	r2, r3
 80063de:	4b10      	ldr	r3, [pc, #64]	@ (8006420 <DMA_SetConfig+0x7c>)
 80063e0:	430a      	orrs	r2, r1
 80063e2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	683a      	ldr	r2, [r7, #0]
 80063ea:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	2b10      	cmp	r3, #16
 80063f2:	d108      	bne.n	8006406 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68ba      	ldr	r2, [r7, #8]
 8006402:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006404:	e007      	b.n	8006416 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68ba      	ldr	r2, [r7, #8]
 800640c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	60da      	str	r2, [r3, #12]
}
 8006416:	46c0      	nop			@ (mov r8, r8)
 8006418:	46bd      	mov	sp, r7
 800641a:	b004      	add	sp, #16
 800641c:	bd80      	pop	{r7, pc}
 800641e:	46c0      	nop			@ (mov r8, r8)
 8006420:	40020000 	.word	0x40020000

08006424 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006430:	089b      	lsrs	r3, r3, #2
 8006432:	4a10      	ldr	r2, [pc, #64]	@ (8006474 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8006434:	4694      	mov	ip, r2
 8006436:	4463      	add	r3, ip
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	001a      	movs	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	001a      	movs	r2, r3
 8006446:	23ff      	movs	r3, #255	@ 0xff
 8006448:	4013      	ands	r3, r2
 800644a:	3b08      	subs	r3, #8
 800644c:	2114      	movs	r1, #20
 800644e:	0018      	movs	r0, r3
 8006450:	f7f9 fe72 	bl	8000138 <__udivsi3>
 8006454:	0003      	movs	r3, r0
 8006456:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a07      	ldr	r2, [pc, #28]	@ (8006478 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800645c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	221f      	movs	r2, #31
 8006462:	4013      	ands	r3, r2
 8006464:	2201      	movs	r2, #1
 8006466:	409a      	lsls	r2, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 800646c:	46c0      	nop			@ (mov r8, r8)
 800646e:	46bd      	mov	sp, r7
 8006470:	b004      	add	sp, #16
 8006472:	bd80      	pop	{r7, pc}
 8006474:	10008200 	.word	0x10008200
 8006478:	40020880 	.word	0x40020880

0800647c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	223f      	movs	r2, #63	@ 0x3f
 800648a:	4013      	ands	r3, r2
 800648c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	4a0a      	ldr	r2, [pc, #40]	@ (80064bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006492:	4694      	mov	ip, r2
 8006494:	4463      	add	r3, ip
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	001a      	movs	r2, r3
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a07      	ldr	r2, [pc, #28]	@ (80064c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80064a2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	3b01      	subs	r3, #1
 80064a8:	2203      	movs	r2, #3
 80064aa:	4013      	ands	r3, r2
 80064ac:	2201      	movs	r2, #1
 80064ae:	409a      	lsls	r2, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80064b4:	46c0      	nop			@ (mov r8, r8)
 80064b6:	46bd      	mov	sp, r7
 80064b8:	b004      	add	sp, #16
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	1000823f 	.word	0x1000823f
 80064c0:	40020940 	.word	0x40020940

080064c4 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b086      	sub	sp, #24
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	607a      	str	r2, [r7, #4]
 80064ce:	200b      	movs	r0, #11
 80064d0:	183b      	adds	r3, r7, r0
 80064d2:	1c0a      	adds	r2, r1, #0
 80064d4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064d6:	2317      	movs	r3, #23
 80064d8:	18fb      	adds	r3, r7, r3
 80064da:	2200      	movs	r2, #0
 80064dc:	701a      	strb	r2, [r3, #0]

  switch (CallbackID)
 80064de:	183b      	adds	r3, r7, r0
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d010      	beq.n	8006508 <HAL_EXTI_RegisterCallback+0x44>
 80064e6:	dc13      	bgt.n	8006510 <HAL_EXTI_RegisterCallback+0x4c>
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d002      	beq.n	80064f2 <HAL_EXTI_RegisterCallback+0x2e>
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d007      	beq.n	8006500 <HAL_EXTI_RegisterCallback+0x3c>
 80064f0:	e00e      	b.n	8006510 <HAL_EXTI_RegisterCallback+0x4c>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	609a      	str	r2, [r3, #8]
      break;
 80064fe:	e00c      	b.n	800651a <HAL_EXTI_RegisterCallback+0x56>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	605a      	str	r2, [r3, #4]
      break;
 8006506:	e008      	b.n	800651a <HAL_EXTI_RegisterCallback+0x56>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	609a      	str	r2, [r3, #8]
      break;
 800650e:	e004      	b.n	800651a <HAL_EXTI_RegisterCallback+0x56>

    default:
      status = HAL_ERROR;
 8006510:	2317      	movs	r3, #23
 8006512:	18fb      	adds	r3, r7, r3
 8006514:	2201      	movs	r2, #1
 8006516:	701a      	strb	r2, [r3, #0]
      break;
 8006518:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
 800651a:	2317      	movs	r3, #23
 800651c:	18fb      	adds	r3, r7, r3
 800651e:	781b      	ldrb	r3, [r3, #0]
}
 8006520:	0018      	movs	r0, r3
 8006522:	46bd      	mov	sp, r7
 8006524:	b006      	add	sp, #24
 8006526:	bd80      	pop	{r7, pc}

08006528 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d101      	bne.n	800653c <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	e003      	b.n	8006544 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	683a      	ldr	r2, [r7, #0]
 8006540:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8006542:	2300      	movs	r3, #0
  }
}
 8006544:	0018      	movs	r0, r3
 8006546:	46bd      	mov	sp, r7
 8006548:	b002      	add	sp, #8
 800654a:	bd80      	pop	{r7, pc}

0800654c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b086      	sub	sp, #24
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	0c1b      	lsrs	r3, r3, #16
 800655a:	2201      	movs	r2, #1
 800655c:	4013      	ands	r3, r2
 800655e:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	221f      	movs	r2, #31
 8006566:	4013      	ands	r3, r2
 8006568:	2201      	movs	r2, #1
 800656a:	409a      	lsls	r2, r3
 800656c:	0013      	movs	r3, r2
 800656e:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	015b      	lsls	r3, r3, #5
 8006574:	4a18      	ldr	r2, [pc, #96]	@ (80065d8 <HAL_EXTI_IRQHandler+0x8c>)
 8006576:	4694      	mov	ip, r2
 8006578:	4463      	add	r3, ip
 800657a:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	4013      	ands	r3, r2
 8006584:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d009      	beq.n	80065a0 <HAL_EXTI_IRQHandler+0x54>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	693a      	ldr	r2, [r7, #16]
 8006590:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d002      	beq.n	80065a0 <HAL_EXTI_IRQHandler+0x54>
    {
      hexti->RisingCallback();
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	015b      	lsls	r3, r3, #5
 80065a4:	4a0d      	ldr	r2, [pc, #52]	@ (80065dc <HAL_EXTI_IRQHandler+0x90>)
 80065a6:	4694      	mov	ip, r2
 80065a8:	4463      	add	r3, ip
 80065aa:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	4013      	ands	r3, r2
 80065b4:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d009      	beq.n	80065d0 <HAL_EXTI_IRQHandler+0x84>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	693a      	ldr	r2, [r7, #16]
 80065c0:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d002      	beq.n	80065d0 <HAL_EXTI_IRQHandler+0x84>
    {
      hexti->FallingCallback();
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	4798      	blx	r3
    }
  }
}
 80065d0:	46c0      	nop			@ (mov r8, r8)
 80065d2:	46bd      	mov	sp, r7
 80065d4:	b006      	add	sp, #24
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	4002180c 	.word	0x4002180c
 80065dc:	40021810 	.word	0x40021810

080065e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b086      	sub	sp, #24
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80065ea:	2300      	movs	r3, #0
 80065ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80065ee:	e147      	b.n	8006880 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2101      	movs	r1, #1
 80065f6:	697a      	ldr	r2, [r7, #20]
 80065f8:	4091      	lsls	r1, r2
 80065fa:	000a      	movs	r2, r1
 80065fc:	4013      	ands	r3, r2
 80065fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d100      	bne.n	8006608 <HAL_GPIO_Init+0x28>
 8006606:	e138      	b.n	800687a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	2203      	movs	r2, #3
 800660e:	4013      	ands	r3, r2
 8006610:	2b01      	cmp	r3, #1
 8006612:	d005      	beq.n	8006620 <HAL_GPIO_Init+0x40>
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	2203      	movs	r2, #3
 800661a:	4013      	ands	r3, r2
 800661c:	2b02      	cmp	r3, #2
 800661e:	d130      	bne.n	8006682 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	005b      	lsls	r3, r3, #1
 800662a:	2203      	movs	r2, #3
 800662c:	409a      	lsls	r2, r3
 800662e:	0013      	movs	r3, r2
 8006630:	43da      	mvns	r2, r3
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	4013      	ands	r3, r2
 8006636:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	68da      	ldr	r2, [r3, #12]
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	005b      	lsls	r3, r3, #1
 8006640:	409a      	lsls	r2, r3
 8006642:	0013      	movs	r3, r2
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	4313      	orrs	r3, r2
 8006648:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	693a      	ldr	r2, [r7, #16]
 800664e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006656:	2201      	movs	r2, #1
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	409a      	lsls	r2, r3
 800665c:	0013      	movs	r3, r2
 800665e:	43da      	mvns	r2, r3
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	4013      	ands	r3, r2
 8006664:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	091b      	lsrs	r3, r3, #4
 800666c:	2201      	movs	r2, #1
 800666e:	401a      	ands	r2, r3
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	409a      	lsls	r2, r3
 8006674:	0013      	movs	r3, r2
 8006676:	693a      	ldr	r2, [r7, #16]
 8006678:	4313      	orrs	r3, r2
 800667a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	693a      	ldr	r2, [r7, #16]
 8006680:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	2203      	movs	r2, #3
 8006688:	4013      	ands	r3, r2
 800668a:	2b03      	cmp	r3, #3
 800668c:	d017      	beq.n	80066be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	005b      	lsls	r3, r3, #1
 8006698:	2203      	movs	r2, #3
 800669a:	409a      	lsls	r2, r3
 800669c:	0013      	movs	r3, r2
 800669e:	43da      	mvns	r2, r3
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	4013      	ands	r3, r2
 80066a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	689a      	ldr	r2, [r3, #8]
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	005b      	lsls	r3, r3, #1
 80066ae:	409a      	lsls	r2, r3
 80066b0:	0013      	movs	r3, r2
 80066b2:	693a      	ldr	r2, [r7, #16]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	693a      	ldr	r2, [r7, #16]
 80066bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	2203      	movs	r2, #3
 80066c4:	4013      	ands	r3, r2
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d123      	bne.n	8006712 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	08da      	lsrs	r2, r3, #3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	3208      	adds	r2, #8
 80066d2:	0092      	lsls	r2, r2, #2
 80066d4:	58d3      	ldr	r3, [r2, r3]
 80066d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	2207      	movs	r2, #7
 80066dc:	4013      	ands	r3, r2
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	220f      	movs	r2, #15
 80066e2:	409a      	lsls	r2, r3
 80066e4:	0013      	movs	r3, r2
 80066e6:	43da      	mvns	r2, r3
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	4013      	ands	r3, r2
 80066ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	691a      	ldr	r2, [r3, #16]
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	2107      	movs	r1, #7
 80066f6:	400b      	ands	r3, r1
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	409a      	lsls	r2, r3
 80066fc:	0013      	movs	r3, r2
 80066fe:	693a      	ldr	r2, [r7, #16]
 8006700:	4313      	orrs	r3, r2
 8006702:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	08da      	lsrs	r2, r3, #3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	3208      	adds	r2, #8
 800670c:	0092      	lsls	r2, r2, #2
 800670e:	6939      	ldr	r1, [r7, #16]
 8006710:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	005b      	lsls	r3, r3, #1
 800671c:	2203      	movs	r2, #3
 800671e:	409a      	lsls	r2, r3
 8006720:	0013      	movs	r3, r2
 8006722:	43da      	mvns	r2, r3
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	4013      	ands	r3, r2
 8006728:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	2203      	movs	r2, #3
 8006730:	401a      	ands	r2, r3
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	005b      	lsls	r3, r3, #1
 8006736:	409a      	lsls	r2, r3
 8006738:	0013      	movs	r3, r2
 800673a:	693a      	ldr	r2, [r7, #16]
 800673c:	4313      	orrs	r3, r2
 800673e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	685a      	ldr	r2, [r3, #4]
 800674a:	23c0      	movs	r3, #192	@ 0xc0
 800674c:	029b      	lsls	r3, r3, #10
 800674e:	4013      	ands	r3, r2
 8006750:	d100      	bne.n	8006754 <HAL_GPIO_Init+0x174>
 8006752:	e092      	b.n	800687a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8006754:	4a50      	ldr	r2, [pc, #320]	@ (8006898 <HAL_GPIO_Init+0x2b8>)
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	089b      	lsrs	r3, r3, #2
 800675a:	3318      	adds	r3, #24
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	589b      	ldr	r3, [r3, r2]
 8006760:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	2203      	movs	r2, #3
 8006766:	4013      	ands	r3, r2
 8006768:	00db      	lsls	r3, r3, #3
 800676a:	220f      	movs	r2, #15
 800676c:	409a      	lsls	r2, r3
 800676e:	0013      	movs	r3, r2
 8006770:	43da      	mvns	r2, r3
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	4013      	ands	r3, r2
 8006776:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	23a0      	movs	r3, #160	@ 0xa0
 800677c:	05db      	lsls	r3, r3, #23
 800677e:	429a      	cmp	r2, r3
 8006780:	d013      	beq.n	80067aa <HAL_GPIO_Init+0x1ca>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a45      	ldr	r2, [pc, #276]	@ (800689c <HAL_GPIO_Init+0x2bc>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d00d      	beq.n	80067a6 <HAL_GPIO_Init+0x1c6>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a44      	ldr	r2, [pc, #272]	@ (80068a0 <HAL_GPIO_Init+0x2c0>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d007      	beq.n	80067a2 <HAL_GPIO_Init+0x1c2>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a43      	ldr	r2, [pc, #268]	@ (80068a4 <HAL_GPIO_Init+0x2c4>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d101      	bne.n	800679e <HAL_GPIO_Init+0x1be>
 800679a:	2303      	movs	r3, #3
 800679c:	e006      	b.n	80067ac <HAL_GPIO_Init+0x1cc>
 800679e:	2305      	movs	r3, #5
 80067a0:	e004      	b.n	80067ac <HAL_GPIO_Init+0x1cc>
 80067a2:	2302      	movs	r3, #2
 80067a4:	e002      	b.n	80067ac <HAL_GPIO_Init+0x1cc>
 80067a6:	2301      	movs	r3, #1
 80067a8:	e000      	b.n	80067ac <HAL_GPIO_Init+0x1cc>
 80067aa:	2300      	movs	r3, #0
 80067ac:	697a      	ldr	r2, [r7, #20]
 80067ae:	2103      	movs	r1, #3
 80067b0:	400a      	ands	r2, r1
 80067b2:	00d2      	lsls	r2, r2, #3
 80067b4:	4093      	lsls	r3, r2
 80067b6:	693a      	ldr	r2, [r7, #16]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80067bc:	4936      	ldr	r1, [pc, #216]	@ (8006898 <HAL_GPIO_Init+0x2b8>)
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	089b      	lsrs	r3, r3, #2
 80067c2:	3318      	adds	r3, #24
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	693a      	ldr	r2, [r7, #16]
 80067c8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80067ca:	4b33      	ldr	r3, [pc, #204]	@ (8006898 <HAL_GPIO_Init+0x2b8>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	43da      	mvns	r2, r3
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	4013      	ands	r3, r2
 80067d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	685a      	ldr	r2, [r3, #4]
 80067de:	2380      	movs	r3, #128	@ 0x80
 80067e0:	035b      	lsls	r3, r3, #13
 80067e2:	4013      	ands	r3, r2
 80067e4:	d003      	beq.n	80067ee <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80067e6:	693a      	ldr	r2, [r7, #16]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80067ee:	4b2a      	ldr	r3, [pc, #168]	@ (8006898 <HAL_GPIO_Init+0x2b8>)
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80067f4:	4b28      	ldr	r3, [pc, #160]	@ (8006898 <HAL_GPIO_Init+0x2b8>)
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	43da      	mvns	r2, r3
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	4013      	ands	r3, r2
 8006802:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	685a      	ldr	r2, [r3, #4]
 8006808:	2380      	movs	r3, #128	@ 0x80
 800680a:	039b      	lsls	r3, r3, #14
 800680c:	4013      	ands	r3, r2
 800680e:	d003      	beq.n	8006818 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	4313      	orrs	r3, r2
 8006816:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006818:	4b1f      	ldr	r3, [pc, #124]	@ (8006898 <HAL_GPIO_Init+0x2b8>)
 800681a:	693a      	ldr	r2, [r7, #16]
 800681c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800681e:	4a1e      	ldr	r2, [pc, #120]	@ (8006898 <HAL_GPIO_Init+0x2b8>)
 8006820:	2384      	movs	r3, #132	@ 0x84
 8006822:	58d3      	ldr	r3, [r2, r3]
 8006824:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	43da      	mvns	r2, r3
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	4013      	ands	r3, r2
 800682e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	685a      	ldr	r2, [r3, #4]
 8006834:	2380      	movs	r3, #128	@ 0x80
 8006836:	029b      	lsls	r3, r3, #10
 8006838:	4013      	ands	r3, r2
 800683a:	d003      	beq.n	8006844 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800683c:	693a      	ldr	r2, [r7, #16]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	4313      	orrs	r3, r2
 8006842:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006844:	4914      	ldr	r1, [pc, #80]	@ (8006898 <HAL_GPIO_Init+0x2b8>)
 8006846:	2284      	movs	r2, #132	@ 0x84
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800684c:	4a12      	ldr	r2, [pc, #72]	@ (8006898 <HAL_GPIO_Init+0x2b8>)
 800684e:	2380      	movs	r3, #128	@ 0x80
 8006850:	58d3      	ldr	r3, [r2, r3]
 8006852:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	43da      	mvns	r2, r3
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	4013      	ands	r3, r2
 800685c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	685a      	ldr	r2, [r3, #4]
 8006862:	2380      	movs	r3, #128	@ 0x80
 8006864:	025b      	lsls	r3, r3, #9
 8006866:	4013      	ands	r3, r2
 8006868:	d003      	beq.n	8006872 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800686a:	693a      	ldr	r2, [r7, #16]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	4313      	orrs	r3, r2
 8006870:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006872:	4909      	ldr	r1, [pc, #36]	@ (8006898 <HAL_GPIO_Init+0x2b8>)
 8006874:	2280      	movs	r2, #128	@ 0x80
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	3301      	adds	r3, #1
 800687e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	40da      	lsrs	r2, r3
 8006888:	1e13      	subs	r3, r2, #0
 800688a:	d000      	beq.n	800688e <HAL_GPIO_Init+0x2ae>
 800688c:	e6b0      	b.n	80065f0 <HAL_GPIO_Init+0x10>
  }
}
 800688e:	46c0      	nop			@ (mov r8, r8)
 8006890:	46c0      	nop			@ (mov r8, r8)
 8006892:	46bd      	mov	sp, r7
 8006894:	b006      	add	sp, #24
 8006896:	bd80      	pop	{r7, pc}
 8006898:	40021800 	.word	0x40021800
 800689c:	50000400 	.word	0x50000400
 80068a0:	50000800 	.word	0x50000800
 80068a4:	50000c00 	.word	0x50000c00

080068a8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b086      	sub	sp, #24
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80068b2:	2300      	movs	r3, #0
 80068b4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80068b6:	e0b4      	b.n	8006a22 <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80068b8:	2201      	movs	r2, #1
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	409a      	lsls	r2, r3
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	4013      	ands	r3, r2
 80068c2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d100      	bne.n	80068cc <HAL_GPIO_DeInit+0x24>
 80068ca:	e0a7      	b.n	8006a1c <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 80068cc:	4a5a      	ldr	r2, [pc, #360]	@ (8006a38 <HAL_GPIO_DeInit+0x190>)
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	089b      	lsrs	r3, r3, #2
 80068d2:	3318      	adds	r3, #24
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	589b      	ldr	r3, [r3, r2]
 80068d8:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	2203      	movs	r2, #3
 80068de:	4013      	ands	r3, r2
 80068e0:	00db      	lsls	r3, r3, #3
 80068e2:	220f      	movs	r2, #15
 80068e4:	409a      	lsls	r2, r3
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	4013      	ands	r3, r2
 80068ea:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	23a0      	movs	r3, #160	@ 0xa0
 80068f0:	05db      	lsls	r3, r3, #23
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d013      	beq.n	800691e <HAL_GPIO_DeInit+0x76>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a50      	ldr	r2, [pc, #320]	@ (8006a3c <HAL_GPIO_DeInit+0x194>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d00d      	beq.n	800691a <HAL_GPIO_DeInit+0x72>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a4f      	ldr	r2, [pc, #316]	@ (8006a40 <HAL_GPIO_DeInit+0x198>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d007      	beq.n	8006916 <HAL_GPIO_DeInit+0x6e>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a4e      	ldr	r2, [pc, #312]	@ (8006a44 <HAL_GPIO_DeInit+0x19c>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d101      	bne.n	8006912 <HAL_GPIO_DeInit+0x6a>
 800690e:	2303      	movs	r3, #3
 8006910:	e006      	b.n	8006920 <HAL_GPIO_DeInit+0x78>
 8006912:	2305      	movs	r3, #5
 8006914:	e004      	b.n	8006920 <HAL_GPIO_DeInit+0x78>
 8006916:	2302      	movs	r3, #2
 8006918:	e002      	b.n	8006920 <HAL_GPIO_DeInit+0x78>
 800691a:	2301      	movs	r3, #1
 800691c:	e000      	b.n	8006920 <HAL_GPIO_DeInit+0x78>
 800691e:	2300      	movs	r3, #0
 8006920:	697a      	ldr	r2, [r7, #20]
 8006922:	2103      	movs	r1, #3
 8006924:	400a      	ands	r2, r1
 8006926:	00d2      	lsls	r2, r2, #3
 8006928:	4093      	lsls	r3, r2
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	429a      	cmp	r2, r3
 800692e:	d136      	bne.n	800699e <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8006930:	4a41      	ldr	r2, [pc, #260]	@ (8006a38 <HAL_GPIO_DeInit+0x190>)
 8006932:	2380      	movs	r3, #128	@ 0x80
 8006934:	58d3      	ldr	r3, [r2, r3]
 8006936:	693a      	ldr	r2, [r7, #16]
 8006938:	43d2      	mvns	r2, r2
 800693a:	493f      	ldr	r1, [pc, #252]	@ (8006a38 <HAL_GPIO_DeInit+0x190>)
 800693c:	4013      	ands	r3, r2
 800693e:	2280      	movs	r2, #128	@ 0x80
 8006940:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8006942:	4a3d      	ldr	r2, [pc, #244]	@ (8006a38 <HAL_GPIO_DeInit+0x190>)
 8006944:	2384      	movs	r3, #132	@ 0x84
 8006946:	58d3      	ldr	r3, [r2, r3]
 8006948:	693a      	ldr	r2, [r7, #16]
 800694a:	43d2      	mvns	r2, r2
 800694c:	493a      	ldr	r1, [pc, #232]	@ (8006a38 <HAL_GPIO_DeInit+0x190>)
 800694e:	4013      	ands	r3, r2
 8006950:	2284      	movs	r2, #132	@ 0x84
 8006952:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8006954:	4b38      	ldr	r3, [pc, #224]	@ (8006a38 <HAL_GPIO_DeInit+0x190>)
 8006956:	685a      	ldr	r2, [r3, #4]
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	43d9      	mvns	r1, r3
 800695c:	4b36      	ldr	r3, [pc, #216]	@ (8006a38 <HAL_GPIO_DeInit+0x190>)
 800695e:	400a      	ands	r2, r1
 8006960:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8006962:	4b35      	ldr	r3, [pc, #212]	@ (8006a38 <HAL_GPIO_DeInit+0x190>)
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	43d9      	mvns	r1, r3
 800696a:	4b33      	ldr	r3, [pc, #204]	@ (8006a38 <HAL_GPIO_DeInit+0x190>)
 800696c:	400a      	ands	r2, r1
 800696e:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	2203      	movs	r2, #3
 8006974:	4013      	ands	r3, r2
 8006976:	00db      	lsls	r3, r3, #3
 8006978:	220f      	movs	r2, #15
 800697a:	409a      	lsls	r2, r3
 800697c:	0013      	movs	r3, r2
 800697e:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8006980:	4a2d      	ldr	r2, [pc, #180]	@ (8006a38 <HAL_GPIO_DeInit+0x190>)
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	089b      	lsrs	r3, r3, #2
 8006986:	3318      	adds	r3, #24
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	589a      	ldr	r2, [r3, r2]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	43d9      	mvns	r1, r3
 8006990:	4829      	ldr	r0, [pc, #164]	@ (8006a38 <HAL_GPIO_DeInit+0x190>)
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	089b      	lsrs	r3, r3, #2
 8006996:	400a      	ands	r2, r1
 8006998:	3318      	adds	r3, #24
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	005b      	lsls	r3, r3, #1
 80069a6:	2103      	movs	r1, #3
 80069a8:	4099      	lsls	r1, r3
 80069aa:	000b      	movs	r3, r1
 80069ac:	431a      	orrs	r2, r3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	08da      	lsrs	r2, r3, #3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	3208      	adds	r2, #8
 80069ba:	0092      	lsls	r2, r2, #2
 80069bc:	58d3      	ldr	r3, [r2, r3]
 80069be:	697a      	ldr	r2, [r7, #20]
 80069c0:	2107      	movs	r1, #7
 80069c2:	400a      	ands	r2, r1
 80069c4:	0092      	lsls	r2, r2, #2
 80069c6:	210f      	movs	r1, #15
 80069c8:	4091      	lsls	r1, r2
 80069ca:	000a      	movs	r2, r1
 80069cc:	43d1      	mvns	r1, r2
 80069ce:	697a      	ldr	r2, [r7, #20]
 80069d0:	08d2      	lsrs	r2, r2, #3
 80069d2:	4019      	ands	r1, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	3208      	adds	r2, #8
 80069d8:	0092      	lsls	r2, r2, #2
 80069da:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	697a      	ldr	r2, [r7, #20]
 80069e2:	0052      	lsls	r2, r2, #1
 80069e4:	2103      	movs	r1, #3
 80069e6:	4091      	lsls	r1, r2
 80069e8:	000a      	movs	r2, r1
 80069ea:	43d2      	mvns	r2, r2
 80069ec:	401a      	ands	r2, r3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	2101      	movs	r1, #1
 80069f8:	697a      	ldr	r2, [r7, #20]
 80069fa:	4091      	lsls	r1, r2
 80069fc:	000a      	movs	r2, r1
 80069fe:	43d2      	mvns	r2, r2
 8006a00:	401a      	ands	r2, r3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	697a      	ldr	r2, [r7, #20]
 8006a0c:	0052      	lsls	r2, r2, #1
 8006a0e:	2103      	movs	r1, #3
 8006a10:	4091      	lsls	r1, r2
 8006a12:	000a      	movs	r2, r1
 8006a14:	43d2      	mvns	r2, r2
 8006a16:	401a      	ands	r2, r3
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	60da      	str	r2, [r3, #12]
    }

    position++;
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	3301      	adds	r3, #1
 8006a20:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8006a22:	683a      	ldr	r2, [r7, #0]
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	40da      	lsrs	r2, r3
 8006a28:	1e13      	subs	r3, r2, #0
 8006a2a:	d000      	beq.n	8006a2e <HAL_GPIO_DeInit+0x186>
 8006a2c:	e744      	b.n	80068b8 <HAL_GPIO_DeInit+0x10>
  }
}
 8006a2e:	46c0      	nop			@ (mov r8, r8)
 8006a30:	46c0      	nop			@ (mov r8, r8)
 8006a32:	46bd      	mov	sp, r7
 8006a34:	b006      	add	sp, #24
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	40021800 	.word	0x40021800
 8006a3c:	50000400 	.word	0x50000400
 8006a40:	50000800 	.word	0x50000800
 8006a44:	50000c00 	.word	0x50000c00

08006a48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	000a      	movs	r2, r1
 8006a52:	1cbb      	adds	r3, r7, #2
 8006a54:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	1cba      	adds	r2, r7, #2
 8006a5c:	8812      	ldrh	r2, [r2, #0]
 8006a5e:	4013      	ands	r3, r2
 8006a60:	d004      	beq.n	8006a6c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8006a62:	230f      	movs	r3, #15
 8006a64:	18fb      	adds	r3, r7, r3
 8006a66:	2201      	movs	r2, #1
 8006a68:	701a      	strb	r2, [r3, #0]
 8006a6a:	e003      	b.n	8006a74 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006a6c:	230f      	movs	r3, #15
 8006a6e:	18fb      	adds	r3, r7, r3
 8006a70:	2200      	movs	r2, #0
 8006a72:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8006a74:	230f      	movs	r3, #15
 8006a76:	18fb      	adds	r3, r7, r3
 8006a78:	781b      	ldrb	r3, [r3, #0]
}
 8006a7a:	0018      	movs	r0, r3
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	b004      	add	sp, #16
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b082      	sub	sp, #8
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
 8006a8a:	0008      	movs	r0, r1
 8006a8c:	0011      	movs	r1, r2
 8006a8e:	1cbb      	adds	r3, r7, #2
 8006a90:	1c02      	adds	r2, r0, #0
 8006a92:	801a      	strh	r2, [r3, #0]
 8006a94:	1c7b      	adds	r3, r7, #1
 8006a96:	1c0a      	adds	r2, r1, #0
 8006a98:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006a9a:	1c7b      	adds	r3, r7, #1
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d004      	beq.n	8006aac <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006aa2:	1cbb      	adds	r3, r7, #2
 8006aa4:	881a      	ldrh	r2, [r3, #0]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006aaa:	e003      	b.n	8006ab4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006aac:	1cbb      	adds	r3, r7, #2
 8006aae:	881a      	ldrh	r2, [r3, #0]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006ab4:	46c0      	nop			@ (mov r8, r8)
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	b002      	add	sp, #8
 8006aba:	bd80      	pop	{r7, pc}

08006abc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	000a      	movs	r2, r1
 8006ac6:	1cbb      	adds	r3, r7, #2
 8006ac8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	695b      	ldr	r3, [r3, #20]
 8006ace:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006ad0:	1cbb      	adds	r3, r7, #2
 8006ad2:	881b      	ldrh	r3, [r3, #0]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	041a      	lsls	r2, r3, #16
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	43db      	mvns	r3, r3
 8006ade:	1cb9      	adds	r1, r7, #2
 8006ae0:	8809      	ldrh	r1, [r1, #0]
 8006ae2:	400b      	ands	r3, r1
 8006ae4:	431a      	orrs	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	619a      	str	r2, [r3, #24]
}
 8006aea:	46c0      	nop			@ (mov r8, r8)
 8006aec:	46bd      	mov	sp, r7
 8006aee:	b004      	add	sp, #16
 8006af0:	bd80      	pop	{r7, pc}
	...

08006af4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	0002      	movs	r2, r0
 8006afc:	1dbb      	adds	r3, r7, #6
 8006afe:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8006b00:	4b10      	ldr	r3, [pc, #64]	@ (8006b44 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	1dba      	adds	r2, r7, #6
 8006b06:	8812      	ldrh	r2, [r2, #0]
 8006b08:	4013      	ands	r3, r2
 8006b0a:	d008      	beq.n	8006b1e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8006b0c:	4b0d      	ldr	r3, [pc, #52]	@ (8006b44 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8006b0e:	1dba      	adds	r2, r7, #6
 8006b10:	8812      	ldrh	r2, [r2, #0]
 8006b12:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8006b14:	1dbb      	adds	r3, r7, #6
 8006b16:	881b      	ldrh	r3, [r3, #0]
 8006b18:	0018      	movs	r0, r3
 8006b1a:	f000 f815 	bl	8006b48 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8006b1e:	4b09      	ldr	r3, [pc, #36]	@ (8006b44 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	1dba      	adds	r2, r7, #6
 8006b24:	8812      	ldrh	r2, [r2, #0]
 8006b26:	4013      	ands	r3, r2
 8006b28:	d008      	beq.n	8006b3c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8006b2a:	4b06      	ldr	r3, [pc, #24]	@ (8006b44 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8006b2c:	1dba      	adds	r2, r7, #6
 8006b2e:	8812      	ldrh	r2, [r2, #0]
 8006b30:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8006b32:	1dbb      	adds	r3, r7, #6
 8006b34:	881b      	ldrh	r3, [r3, #0]
 8006b36:	0018      	movs	r0, r3
 8006b38:	f000 f810 	bl	8006b5c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8006b3c:	46c0      	nop			@ (mov r8, r8)
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	b002      	add	sp, #8
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	40021800 	.word	0x40021800

08006b48 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	0002      	movs	r2, r0
 8006b50:	1dbb      	adds	r3, r7, #6
 8006b52:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8006b54:	46c0      	nop			@ (mov r8, r8)
 8006b56:	46bd      	mov	sp, r7
 8006b58:	b002      	add	sp, #8
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	0002      	movs	r2, r0
 8006b64:	1dbb      	adds	r3, r7, #6
 8006b66:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8006b68:	46c0      	nop			@ (mov r8, r8)
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	b002      	add	sp, #8
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8006b78:	4b19      	ldr	r3, [pc, #100]	@ (8006be0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a19      	ldr	r2, [pc, #100]	@ (8006be4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8006b7e:	4013      	ands	r3, r2
 8006b80:	0019      	movs	r1, r3
 8006b82:	4b17      	ldr	r3, [pc, #92]	@ (8006be0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	430a      	orrs	r2, r1
 8006b88:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	2380      	movs	r3, #128	@ 0x80
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d11f      	bne.n	8006bd4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8006b94:	4b14      	ldr	r3, [pc, #80]	@ (8006be8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	0013      	movs	r3, r2
 8006b9a:	005b      	lsls	r3, r3, #1
 8006b9c:	189b      	adds	r3, r3, r2
 8006b9e:	005b      	lsls	r3, r3, #1
 8006ba0:	4912      	ldr	r1, [pc, #72]	@ (8006bec <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8006ba2:	0018      	movs	r0, r3
 8006ba4:	f7f9 fac8 	bl	8000138 <__udivsi3>
 8006ba8:	0003      	movs	r3, r0
 8006baa:	3301      	adds	r3, #1
 8006bac:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006bae:	e008      	b.n	8006bc2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d003      	beq.n	8006bbe <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	3b01      	subs	r3, #1
 8006bba:	60fb      	str	r3, [r7, #12]
 8006bbc:	e001      	b.n	8006bc2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	e009      	b.n	8006bd6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006bc2:	4b07      	ldr	r3, [pc, #28]	@ (8006be0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006bc4:	695a      	ldr	r2, [r3, #20]
 8006bc6:	2380      	movs	r3, #128	@ 0x80
 8006bc8:	00db      	lsls	r3, r3, #3
 8006bca:	401a      	ands	r2, r3
 8006bcc:	2380      	movs	r3, #128	@ 0x80
 8006bce:	00db      	lsls	r3, r3, #3
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d0ed      	beq.n	8006bb0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	0018      	movs	r0, r3
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	b004      	add	sp, #16
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	46c0      	nop			@ (mov r8, r8)
 8006be0:	40007000 	.word	0x40007000
 8006be4:	fffff9ff 	.word	0xfffff9ff
 8006be8:	2000001c 	.word	0x2000001c
 8006bec:	000f4240 	.word	0x000f4240

08006bf0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8006bf4:	4b03      	ldr	r3, [pc, #12]	@ (8006c04 <LL_RCC_GetAPB1Prescaler+0x14>)
 8006bf6:	689a      	ldr	r2, [r3, #8]
 8006bf8:	23e0      	movs	r3, #224	@ 0xe0
 8006bfa:	01db      	lsls	r3, r3, #7
 8006bfc:	4013      	ands	r3, r2
}
 8006bfe:	0018      	movs	r0, r3
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	40021000 	.word	0x40021000

08006c08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b088      	sub	sp, #32
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d101      	bne.n	8006c1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e2f3      	b.n	8007202 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	4013      	ands	r3, r2
 8006c22:	d100      	bne.n	8006c26 <HAL_RCC_OscConfig+0x1e>
 8006c24:	e07c      	b.n	8006d20 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c26:	4bc3      	ldr	r3, [pc, #780]	@ (8006f34 <HAL_RCC_OscConfig+0x32c>)
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	2238      	movs	r2, #56	@ 0x38
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006c30:	4bc0      	ldr	r3, [pc, #768]	@ (8006f34 <HAL_RCC_OscConfig+0x32c>)
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	2203      	movs	r2, #3
 8006c36:	4013      	ands	r3, r2
 8006c38:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	2b10      	cmp	r3, #16
 8006c3e:	d102      	bne.n	8006c46 <HAL_RCC_OscConfig+0x3e>
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	2b03      	cmp	r3, #3
 8006c44:	d002      	beq.n	8006c4c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	2b08      	cmp	r3, #8
 8006c4a:	d10b      	bne.n	8006c64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c4c:	4bb9      	ldr	r3, [pc, #740]	@ (8006f34 <HAL_RCC_OscConfig+0x32c>)
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	2380      	movs	r3, #128	@ 0x80
 8006c52:	029b      	lsls	r3, r3, #10
 8006c54:	4013      	ands	r3, r2
 8006c56:	d062      	beq.n	8006d1e <HAL_RCC_OscConfig+0x116>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d15e      	bne.n	8006d1e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	e2ce      	b.n	8007202 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	685a      	ldr	r2, [r3, #4]
 8006c68:	2380      	movs	r3, #128	@ 0x80
 8006c6a:	025b      	lsls	r3, r3, #9
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d107      	bne.n	8006c80 <HAL_RCC_OscConfig+0x78>
 8006c70:	4bb0      	ldr	r3, [pc, #704]	@ (8006f34 <HAL_RCC_OscConfig+0x32c>)
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	4baf      	ldr	r3, [pc, #700]	@ (8006f34 <HAL_RCC_OscConfig+0x32c>)
 8006c76:	2180      	movs	r1, #128	@ 0x80
 8006c78:	0249      	lsls	r1, r1, #9
 8006c7a:	430a      	orrs	r2, r1
 8006c7c:	601a      	str	r2, [r3, #0]
 8006c7e:	e020      	b.n	8006cc2 <HAL_RCC_OscConfig+0xba>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	685a      	ldr	r2, [r3, #4]
 8006c84:	23a0      	movs	r3, #160	@ 0xa0
 8006c86:	02db      	lsls	r3, r3, #11
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d10e      	bne.n	8006caa <HAL_RCC_OscConfig+0xa2>
 8006c8c:	4ba9      	ldr	r3, [pc, #676]	@ (8006f34 <HAL_RCC_OscConfig+0x32c>)
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	4ba8      	ldr	r3, [pc, #672]	@ (8006f34 <HAL_RCC_OscConfig+0x32c>)
 8006c92:	2180      	movs	r1, #128	@ 0x80
 8006c94:	02c9      	lsls	r1, r1, #11
 8006c96:	430a      	orrs	r2, r1
 8006c98:	601a      	str	r2, [r3, #0]
 8006c9a:	4ba6      	ldr	r3, [pc, #664]	@ (8006f34 <HAL_RCC_OscConfig+0x32c>)
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	4ba5      	ldr	r3, [pc, #660]	@ (8006f34 <HAL_RCC_OscConfig+0x32c>)
 8006ca0:	2180      	movs	r1, #128	@ 0x80
 8006ca2:	0249      	lsls	r1, r1, #9
 8006ca4:	430a      	orrs	r2, r1
 8006ca6:	601a      	str	r2, [r3, #0]
 8006ca8:	e00b      	b.n	8006cc2 <HAL_RCC_OscConfig+0xba>
 8006caa:	4ba2      	ldr	r3, [pc, #648]	@ (8006f34 <HAL_RCC_OscConfig+0x32c>)
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	4ba1      	ldr	r3, [pc, #644]	@ (8006f34 <HAL_RCC_OscConfig+0x32c>)
 8006cb0:	49a1      	ldr	r1, [pc, #644]	@ (8006f38 <HAL_RCC_OscConfig+0x330>)
 8006cb2:	400a      	ands	r2, r1
 8006cb4:	601a      	str	r2, [r3, #0]
 8006cb6:	4b9f      	ldr	r3, [pc, #636]	@ (8006f34 <HAL_RCC_OscConfig+0x32c>)
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	4b9e      	ldr	r3, [pc, #632]	@ (8006f34 <HAL_RCC_OscConfig+0x32c>)
 8006cbc:	499f      	ldr	r1, [pc, #636]	@ (8006f3c <HAL_RCC_OscConfig+0x334>)
 8006cbe:	400a      	ands	r2, r1
 8006cc0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d014      	beq.n	8006cf4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cca:	f7fe f9db 	bl	8005084 <HAL_GetTick>
 8006cce:	0003      	movs	r3, r0
 8006cd0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006cd2:	e008      	b.n	8006ce6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006cd4:	f7fe f9d6 	bl	8005084 <HAL_GetTick>
 8006cd8:	0002      	movs	r2, r0
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	1ad3      	subs	r3, r2, r3
 8006cde:	2b64      	cmp	r3, #100	@ 0x64
 8006ce0:	d901      	bls.n	8006ce6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8006ce2:	2303      	movs	r3, #3
 8006ce4:	e28d      	b.n	8007202 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ce6:	4b93      	ldr	r3, [pc, #588]	@ (8006f34 <HAL_RCC_OscConfig+0x32c>)
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	2380      	movs	r3, #128	@ 0x80
 8006cec:	029b      	lsls	r3, r3, #10
 8006cee:	4013      	ands	r3, r2
 8006cf0:	d0f0      	beq.n	8006cd4 <HAL_RCC_OscConfig+0xcc>
 8006cf2:	e015      	b.n	8006d20 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cf4:	f7fe f9c6 	bl	8005084 <HAL_GetTick>
 8006cf8:	0003      	movs	r3, r0
 8006cfa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006cfc:	e008      	b.n	8006d10 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006cfe:	f7fe f9c1 	bl	8005084 <HAL_GetTick>
 8006d02:	0002      	movs	r2, r0
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	1ad3      	subs	r3, r2, r3
 8006d08:	2b64      	cmp	r3, #100	@ 0x64
 8006d0a:	d901      	bls.n	8006d10 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	e278      	b.n	8007202 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006d10:	4b88      	ldr	r3, [pc, #544]	@ (8006f34 <HAL_RCC_OscConfig+0x32c>)
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	2380      	movs	r3, #128	@ 0x80
 8006d16:	029b      	lsls	r3, r3, #10
 8006d18:	4013      	ands	r3, r2
 8006d1a:	d1f0      	bne.n	8006cfe <HAL_RCC_OscConfig+0xf6>
 8006d1c:	e000      	b.n	8006d20 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d1e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2202      	movs	r2, #2
 8006d26:	4013      	ands	r3, r2
 8006d28:	d100      	bne.n	8006d2c <HAL_RCC_OscConfig+0x124>
 8006d2a:	e099      	b.n	8006e60 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d2c:	4b81      	ldr	r3, [pc, #516]	@ (8006f34 <HAL_RCC_OscConfig+0x32c>)
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	2238      	movs	r2, #56	@ 0x38
 8006d32:	4013      	ands	r3, r2
 8006d34:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006d36:	4b7f      	ldr	r3, [pc, #508]	@ (8006f34 <HAL_RCC_OscConfig+0x32c>)
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	2203      	movs	r2, #3
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	2b10      	cmp	r3, #16
 8006d44:	d102      	bne.n	8006d4c <HAL_RCC_OscConfig+0x144>
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	2b02      	cmp	r3, #2
 8006d4a:	d002      	beq.n	8006d52 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d135      	bne.n	8006dbe <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d52:	4b78      	ldr	r3, [pc, #480]	@ (8006f34 <HAL_RCC_OscConfig+0x32c>)
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	2380      	movs	r3, #128	@ 0x80
 8006d58:	00db      	lsls	r3, r3, #3
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	d005      	beq.n	8006d6a <HAL_RCC_OscConfig+0x162>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d101      	bne.n	8006d6a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e24b      	b.n	8007202 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d6a:	4b72      	ldr	r3, [pc, #456]	@ (8006f34 <HAL_RCC_OscConfig+0x32c>)
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	4a74      	ldr	r2, [pc, #464]	@ (8006f40 <HAL_RCC_OscConfig+0x338>)
 8006d70:	4013      	ands	r3, r2
 8006d72:	0019      	movs	r1, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	695b      	ldr	r3, [r3, #20]
 8006d78:	021a      	lsls	r2, r3, #8
 8006d7a:	4b6e      	ldr	r3, [pc, #440]	@ (8006f34 <HAL_RCC_OscConfig+0x32c>)
 8006d7c:	430a      	orrs	r2, r1
 8006d7e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d112      	bne.n	8006dac <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006d86:	4b6b      	ldr	r3, [pc, #428]	@ (8006f34 <HAL_RCC_OscConfig+0x32c>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a6e      	ldr	r2, [pc, #440]	@ (8006f44 <HAL_RCC_OscConfig+0x33c>)
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	0019      	movs	r1, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	691a      	ldr	r2, [r3, #16]
 8006d94:	4b67      	ldr	r3, [pc, #412]	@ (8006f34 <HAL_RCC_OscConfig+0x32c>)
 8006d96:	430a      	orrs	r2, r1
 8006d98:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8006d9a:	4b66      	ldr	r3, [pc, #408]	@ (8006f34 <HAL_RCC_OscConfig+0x32c>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	0adb      	lsrs	r3, r3, #11
 8006da0:	2207      	movs	r2, #7
 8006da2:	4013      	ands	r3, r2
 8006da4:	4a68      	ldr	r2, [pc, #416]	@ (8006f48 <HAL_RCC_OscConfig+0x340>)
 8006da6:	40da      	lsrs	r2, r3
 8006da8:	4b68      	ldr	r3, [pc, #416]	@ (8006f4c <HAL_RCC_OscConfig+0x344>)
 8006daa:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006dac:	4b68      	ldr	r3, [pc, #416]	@ (8006f50 <HAL_RCC_OscConfig+0x348>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	0018      	movs	r0, r3
 8006db2:	f7fe f90b 	bl	8004fcc <HAL_InitTick>
 8006db6:	1e03      	subs	r3, r0, #0
 8006db8:	d051      	beq.n	8006e5e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e221      	b.n	8007202 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d030      	beq.n	8006e28 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006dc6:	4b5b      	ldr	r3, [pc, #364]	@ (8006f34 <HAL_RCC_OscConfig+0x32c>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a5e      	ldr	r2, [pc, #376]	@ (8006f44 <HAL_RCC_OscConfig+0x33c>)
 8006dcc:	4013      	ands	r3, r2
 8006dce:	0019      	movs	r1, r3
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	691a      	ldr	r2, [r3, #16]
 8006dd4:	4b57      	ldr	r3, [pc, #348]	@ (8006f34 <HAL_RCC_OscConfig+0x32c>)
 8006dd6:	430a      	orrs	r2, r1
 8006dd8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8006dda:	4b56      	ldr	r3, [pc, #344]	@ (8006f34 <HAL_RCC_OscConfig+0x32c>)
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	4b55      	ldr	r3, [pc, #340]	@ (8006f34 <HAL_RCC_OscConfig+0x32c>)
 8006de0:	2180      	movs	r1, #128	@ 0x80
 8006de2:	0049      	lsls	r1, r1, #1
 8006de4:	430a      	orrs	r2, r1
 8006de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006de8:	f7fe f94c 	bl	8005084 <HAL_GetTick>
 8006dec:	0003      	movs	r3, r0
 8006dee:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006df0:	e008      	b.n	8006e04 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006df2:	f7fe f947 	bl	8005084 <HAL_GetTick>
 8006df6:	0002      	movs	r2, r0
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	2b02      	cmp	r3, #2
 8006dfe:	d901      	bls.n	8006e04 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006e00:	2303      	movs	r3, #3
 8006e02:	e1fe      	b.n	8007202 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e04:	4b4b      	ldr	r3, [pc, #300]	@ (8006f34 <HAL_RCC_OscConfig+0x32c>)
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	2380      	movs	r3, #128	@ 0x80
 8006e0a:	00db      	lsls	r3, r3, #3
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	d0f0      	beq.n	8006df2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e10:	4b48      	ldr	r3, [pc, #288]	@ (8006f34 <HAL_RCC_OscConfig+0x32c>)
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	4a4a      	ldr	r2, [pc, #296]	@ (8006f40 <HAL_RCC_OscConfig+0x338>)
 8006e16:	4013      	ands	r3, r2
 8006e18:	0019      	movs	r1, r3
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	695b      	ldr	r3, [r3, #20]
 8006e1e:	021a      	lsls	r2, r3, #8
 8006e20:	4b44      	ldr	r3, [pc, #272]	@ (8006f34 <HAL_RCC_OscConfig+0x32c>)
 8006e22:	430a      	orrs	r2, r1
 8006e24:	605a      	str	r2, [r3, #4]
 8006e26:	e01b      	b.n	8006e60 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8006e28:	4b42      	ldr	r3, [pc, #264]	@ (8006f34 <HAL_RCC_OscConfig+0x32c>)
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	4b41      	ldr	r3, [pc, #260]	@ (8006f34 <HAL_RCC_OscConfig+0x32c>)
 8006e2e:	4949      	ldr	r1, [pc, #292]	@ (8006f54 <HAL_RCC_OscConfig+0x34c>)
 8006e30:	400a      	ands	r2, r1
 8006e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e34:	f7fe f926 	bl	8005084 <HAL_GetTick>
 8006e38:	0003      	movs	r3, r0
 8006e3a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006e3c:	e008      	b.n	8006e50 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e3e:	f7fe f921 	bl	8005084 <HAL_GetTick>
 8006e42:	0002      	movs	r2, r0
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	1ad3      	subs	r3, r2, r3
 8006e48:	2b02      	cmp	r3, #2
 8006e4a:	d901      	bls.n	8006e50 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	e1d8      	b.n	8007202 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006e50:	4b38      	ldr	r3, [pc, #224]	@ (8006f34 <HAL_RCC_OscConfig+0x32c>)
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	2380      	movs	r3, #128	@ 0x80
 8006e56:	00db      	lsls	r3, r3, #3
 8006e58:	4013      	ands	r3, r2
 8006e5a:	d1f0      	bne.n	8006e3e <HAL_RCC_OscConfig+0x236>
 8006e5c:	e000      	b.n	8006e60 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e5e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2208      	movs	r2, #8
 8006e66:	4013      	ands	r3, r2
 8006e68:	d047      	beq.n	8006efa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006e6a:	4b32      	ldr	r3, [pc, #200]	@ (8006f34 <HAL_RCC_OscConfig+0x32c>)
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	2238      	movs	r2, #56	@ 0x38
 8006e70:	4013      	ands	r3, r2
 8006e72:	2b18      	cmp	r3, #24
 8006e74:	d10a      	bne.n	8006e8c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8006e76:	4b2f      	ldr	r3, [pc, #188]	@ (8006f34 <HAL_RCC_OscConfig+0x32c>)
 8006e78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e7a:	2202      	movs	r2, #2
 8006e7c:	4013      	ands	r3, r2
 8006e7e:	d03c      	beq.n	8006efa <HAL_RCC_OscConfig+0x2f2>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	699b      	ldr	r3, [r3, #24]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d138      	bne.n	8006efa <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e1ba      	b.n	8007202 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	699b      	ldr	r3, [r3, #24]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d019      	beq.n	8006ec8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8006e94:	4b27      	ldr	r3, [pc, #156]	@ (8006f34 <HAL_RCC_OscConfig+0x32c>)
 8006e96:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006e98:	4b26      	ldr	r3, [pc, #152]	@ (8006f34 <HAL_RCC_OscConfig+0x32c>)
 8006e9a:	2101      	movs	r1, #1
 8006e9c:	430a      	orrs	r2, r1
 8006e9e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ea0:	f7fe f8f0 	bl	8005084 <HAL_GetTick>
 8006ea4:	0003      	movs	r3, r0
 8006ea6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006ea8:	e008      	b.n	8006ebc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006eaa:	f7fe f8eb 	bl	8005084 <HAL_GetTick>
 8006eae:	0002      	movs	r2, r0
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	d901      	bls.n	8006ebc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	e1a2      	b.n	8007202 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8006f34 <HAL_RCC_OscConfig+0x32c>)
 8006ebe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ec0:	2202      	movs	r2, #2
 8006ec2:	4013      	ands	r3, r2
 8006ec4:	d0f1      	beq.n	8006eaa <HAL_RCC_OscConfig+0x2a2>
 8006ec6:	e018      	b.n	8006efa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8006ec8:	4b1a      	ldr	r3, [pc, #104]	@ (8006f34 <HAL_RCC_OscConfig+0x32c>)
 8006eca:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006ecc:	4b19      	ldr	r3, [pc, #100]	@ (8006f34 <HAL_RCC_OscConfig+0x32c>)
 8006ece:	2101      	movs	r1, #1
 8006ed0:	438a      	bics	r2, r1
 8006ed2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ed4:	f7fe f8d6 	bl	8005084 <HAL_GetTick>
 8006ed8:	0003      	movs	r3, r0
 8006eda:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006edc:	e008      	b.n	8006ef0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ede:	f7fe f8d1 	bl	8005084 <HAL_GetTick>
 8006ee2:	0002      	movs	r2, r0
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	1ad3      	subs	r3, r2, r3
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	d901      	bls.n	8006ef0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8006eec:	2303      	movs	r3, #3
 8006eee:	e188      	b.n	8007202 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006ef0:	4b10      	ldr	r3, [pc, #64]	@ (8006f34 <HAL_RCC_OscConfig+0x32c>)
 8006ef2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ef4:	2202      	movs	r2, #2
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	d1f1      	bne.n	8006ede <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2204      	movs	r2, #4
 8006f00:	4013      	ands	r3, r2
 8006f02:	d100      	bne.n	8006f06 <HAL_RCC_OscConfig+0x2fe>
 8006f04:	e0c6      	b.n	8007094 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f06:	231f      	movs	r3, #31
 8006f08:	18fb      	adds	r3, r7, r3
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006f0e:	4b09      	ldr	r3, [pc, #36]	@ (8006f34 <HAL_RCC_OscConfig+0x32c>)
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	2238      	movs	r2, #56	@ 0x38
 8006f14:	4013      	ands	r3, r2
 8006f16:	2b20      	cmp	r3, #32
 8006f18:	d11e      	bne.n	8006f58 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8006f1a:	4b06      	ldr	r3, [pc, #24]	@ (8006f34 <HAL_RCC_OscConfig+0x32c>)
 8006f1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f1e:	2202      	movs	r2, #2
 8006f20:	4013      	ands	r3, r2
 8006f22:	d100      	bne.n	8006f26 <HAL_RCC_OscConfig+0x31e>
 8006f24:	e0b6      	b.n	8007094 <HAL_RCC_OscConfig+0x48c>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d000      	beq.n	8006f30 <HAL_RCC_OscConfig+0x328>
 8006f2e:	e0b1      	b.n	8007094 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	e166      	b.n	8007202 <HAL_RCC_OscConfig+0x5fa>
 8006f34:	40021000 	.word	0x40021000
 8006f38:	fffeffff 	.word	0xfffeffff
 8006f3c:	fffbffff 	.word	0xfffbffff
 8006f40:	ffff80ff 	.word	0xffff80ff
 8006f44:	ffffc7ff 	.word	0xffffc7ff
 8006f48:	00f42400 	.word	0x00f42400
 8006f4c:	2000001c 	.word	0x2000001c
 8006f50:	20000034 	.word	0x20000034
 8006f54:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006f58:	4bac      	ldr	r3, [pc, #688]	@ (800720c <HAL_RCC_OscConfig+0x604>)
 8006f5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f5c:	2380      	movs	r3, #128	@ 0x80
 8006f5e:	055b      	lsls	r3, r3, #21
 8006f60:	4013      	ands	r3, r2
 8006f62:	d101      	bne.n	8006f68 <HAL_RCC_OscConfig+0x360>
 8006f64:	2301      	movs	r3, #1
 8006f66:	e000      	b.n	8006f6a <HAL_RCC_OscConfig+0x362>
 8006f68:	2300      	movs	r3, #0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d011      	beq.n	8006f92 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006f6e:	4ba7      	ldr	r3, [pc, #668]	@ (800720c <HAL_RCC_OscConfig+0x604>)
 8006f70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f72:	4ba6      	ldr	r3, [pc, #664]	@ (800720c <HAL_RCC_OscConfig+0x604>)
 8006f74:	2180      	movs	r1, #128	@ 0x80
 8006f76:	0549      	lsls	r1, r1, #21
 8006f78:	430a      	orrs	r2, r1
 8006f7a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006f7c:	4ba3      	ldr	r3, [pc, #652]	@ (800720c <HAL_RCC_OscConfig+0x604>)
 8006f7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f80:	2380      	movs	r3, #128	@ 0x80
 8006f82:	055b      	lsls	r3, r3, #21
 8006f84:	4013      	ands	r3, r2
 8006f86:	60fb      	str	r3, [r7, #12]
 8006f88:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8006f8a:	231f      	movs	r3, #31
 8006f8c:	18fb      	adds	r3, r7, r3
 8006f8e:	2201      	movs	r2, #1
 8006f90:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f92:	4b9f      	ldr	r3, [pc, #636]	@ (8007210 <HAL_RCC_OscConfig+0x608>)
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	2380      	movs	r3, #128	@ 0x80
 8006f98:	005b      	lsls	r3, r3, #1
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	d11a      	bne.n	8006fd4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f9e:	4b9c      	ldr	r3, [pc, #624]	@ (8007210 <HAL_RCC_OscConfig+0x608>)
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	4b9b      	ldr	r3, [pc, #620]	@ (8007210 <HAL_RCC_OscConfig+0x608>)
 8006fa4:	2180      	movs	r1, #128	@ 0x80
 8006fa6:	0049      	lsls	r1, r1, #1
 8006fa8:	430a      	orrs	r2, r1
 8006faa:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8006fac:	f7fe f86a 	bl	8005084 <HAL_GetTick>
 8006fb0:	0003      	movs	r3, r0
 8006fb2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006fb4:	e008      	b.n	8006fc8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fb6:	f7fe f865 	bl	8005084 <HAL_GetTick>
 8006fba:	0002      	movs	r2, r0
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	2b02      	cmp	r3, #2
 8006fc2:	d901      	bls.n	8006fc8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8006fc4:	2303      	movs	r3, #3
 8006fc6:	e11c      	b.n	8007202 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006fc8:	4b91      	ldr	r3, [pc, #580]	@ (8007210 <HAL_RCC_OscConfig+0x608>)
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	2380      	movs	r3, #128	@ 0x80
 8006fce:	005b      	lsls	r3, r3, #1
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	d0f0      	beq.n	8006fb6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d106      	bne.n	8006fea <HAL_RCC_OscConfig+0x3e2>
 8006fdc:	4b8b      	ldr	r3, [pc, #556]	@ (800720c <HAL_RCC_OscConfig+0x604>)
 8006fde:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006fe0:	4b8a      	ldr	r3, [pc, #552]	@ (800720c <HAL_RCC_OscConfig+0x604>)
 8006fe2:	2101      	movs	r1, #1
 8006fe4:	430a      	orrs	r2, r1
 8006fe6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006fe8:	e01c      	b.n	8007024 <HAL_RCC_OscConfig+0x41c>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	2b05      	cmp	r3, #5
 8006ff0:	d10c      	bne.n	800700c <HAL_RCC_OscConfig+0x404>
 8006ff2:	4b86      	ldr	r3, [pc, #536]	@ (800720c <HAL_RCC_OscConfig+0x604>)
 8006ff4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006ff6:	4b85      	ldr	r3, [pc, #532]	@ (800720c <HAL_RCC_OscConfig+0x604>)
 8006ff8:	2104      	movs	r1, #4
 8006ffa:	430a      	orrs	r2, r1
 8006ffc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006ffe:	4b83      	ldr	r3, [pc, #524]	@ (800720c <HAL_RCC_OscConfig+0x604>)
 8007000:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007002:	4b82      	ldr	r3, [pc, #520]	@ (800720c <HAL_RCC_OscConfig+0x604>)
 8007004:	2101      	movs	r1, #1
 8007006:	430a      	orrs	r2, r1
 8007008:	65da      	str	r2, [r3, #92]	@ 0x5c
 800700a:	e00b      	b.n	8007024 <HAL_RCC_OscConfig+0x41c>
 800700c:	4b7f      	ldr	r3, [pc, #508]	@ (800720c <HAL_RCC_OscConfig+0x604>)
 800700e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007010:	4b7e      	ldr	r3, [pc, #504]	@ (800720c <HAL_RCC_OscConfig+0x604>)
 8007012:	2101      	movs	r1, #1
 8007014:	438a      	bics	r2, r1
 8007016:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007018:	4b7c      	ldr	r3, [pc, #496]	@ (800720c <HAL_RCC_OscConfig+0x604>)
 800701a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800701c:	4b7b      	ldr	r3, [pc, #492]	@ (800720c <HAL_RCC_OscConfig+0x604>)
 800701e:	2104      	movs	r1, #4
 8007020:	438a      	bics	r2, r1
 8007022:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d014      	beq.n	8007056 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800702c:	f7fe f82a 	bl	8005084 <HAL_GetTick>
 8007030:	0003      	movs	r3, r0
 8007032:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007034:	e009      	b.n	800704a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007036:	f7fe f825 	bl	8005084 <HAL_GetTick>
 800703a:	0002      	movs	r2, r0
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	1ad3      	subs	r3, r2, r3
 8007040:	4a74      	ldr	r2, [pc, #464]	@ (8007214 <HAL_RCC_OscConfig+0x60c>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d901      	bls.n	800704a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8007046:	2303      	movs	r3, #3
 8007048:	e0db      	b.n	8007202 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800704a:	4b70      	ldr	r3, [pc, #448]	@ (800720c <HAL_RCC_OscConfig+0x604>)
 800704c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800704e:	2202      	movs	r2, #2
 8007050:	4013      	ands	r3, r2
 8007052:	d0f0      	beq.n	8007036 <HAL_RCC_OscConfig+0x42e>
 8007054:	e013      	b.n	800707e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007056:	f7fe f815 	bl	8005084 <HAL_GetTick>
 800705a:	0003      	movs	r3, r0
 800705c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800705e:	e009      	b.n	8007074 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007060:	f7fe f810 	bl	8005084 <HAL_GetTick>
 8007064:	0002      	movs	r2, r0
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	4a6a      	ldr	r2, [pc, #424]	@ (8007214 <HAL_RCC_OscConfig+0x60c>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d901      	bls.n	8007074 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8007070:	2303      	movs	r3, #3
 8007072:	e0c6      	b.n	8007202 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007074:	4b65      	ldr	r3, [pc, #404]	@ (800720c <HAL_RCC_OscConfig+0x604>)
 8007076:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007078:	2202      	movs	r2, #2
 800707a:	4013      	ands	r3, r2
 800707c:	d1f0      	bne.n	8007060 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800707e:	231f      	movs	r3, #31
 8007080:	18fb      	adds	r3, r7, r3
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	2b01      	cmp	r3, #1
 8007086:	d105      	bne.n	8007094 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8007088:	4b60      	ldr	r3, [pc, #384]	@ (800720c <HAL_RCC_OscConfig+0x604>)
 800708a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800708c:	4b5f      	ldr	r3, [pc, #380]	@ (800720c <HAL_RCC_OscConfig+0x604>)
 800708e:	4962      	ldr	r1, [pc, #392]	@ (8007218 <HAL_RCC_OscConfig+0x610>)
 8007090:	400a      	ands	r2, r1
 8007092:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	69db      	ldr	r3, [r3, #28]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d100      	bne.n	800709e <HAL_RCC_OscConfig+0x496>
 800709c:	e0b0      	b.n	8007200 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800709e:	4b5b      	ldr	r3, [pc, #364]	@ (800720c <HAL_RCC_OscConfig+0x604>)
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	2238      	movs	r2, #56	@ 0x38
 80070a4:	4013      	ands	r3, r2
 80070a6:	2b10      	cmp	r3, #16
 80070a8:	d100      	bne.n	80070ac <HAL_RCC_OscConfig+0x4a4>
 80070aa:	e078      	b.n	800719e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	69db      	ldr	r3, [r3, #28]
 80070b0:	2b02      	cmp	r3, #2
 80070b2:	d153      	bne.n	800715c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070b4:	4b55      	ldr	r3, [pc, #340]	@ (800720c <HAL_RCC_OscConfig+0x604>)
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	4b54      	ldr	r3, [pc, #336]	@ (800720c <HAL_RCC_OscConfig+0x604>)
 80070ba:	4958      	ldr	r1, [pc, #352]	@ (800721c <HAL_RCC_OscConfig+0x614>)
 80070bc:	400a      	ands	r2, r1
 80070be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070c0:	f7fd ffe0 	bl	8005084 <HAL_GetTick>
 80070c4:	0003      	movs	r3, r0
 80070c6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80070c8:	e008      	b.n	80070dc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070ca:	f7fd ffdb 	bl	8005084 <HAL_GetTick>
 80070ce:	0002      	movs	r2, r0
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	1ad3      	subs	r3, r2, r3
 80070d4:	2b02      	cmp	r3, #2
 80070d6:	d901      	bls.n	80070dc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80070d8:	2303      	movs	r3, #3
 80070da:	e092      	b.n	8007202 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80070dc:	4b4b      	ldr	r3, [pc, #300]	@ (800720c <HAL_RCC_OscConfig+0x604>)
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	2380      	movs	r3, #128	@ 0x80
 80070e2:	049b      	lsls	r3, r3, #18
 80070e4:	4013      	ands	r3, r2
 80070e6:	d1f0      	bne.n	80070ca <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80070e8:	4b48      	ldr	r3, [pc, #288]	@ (800720c <HAL_RCC_OscConfig+0x604>)
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	4a4c      	ldr	r2, [pc, #304]	@ (8007220 <HAL_RCC_OscConfig+0x618>)
 80070ee:	4013      	ands	r3, r2
 80070f0:	0019      	movs	r1, r3
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a1a      	ldr	r2, [r3, #32]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070fa:	431a      	orrs	r2, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007100:	021b      	lsls	r3, r3, #8
 8007102:	431a      	orrs	r2, r3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007108:	431a      	orrs	r2, r3
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800710e:	431a      	orrs	r2, r3
 8007110:	4b3e      	ldr	r3, [pc, #248]	@ (800720c <HAL_RCC_OscConfig+0x604>)
 8007112:	430a      	orrs	r2, r1
 8007114:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007116:	4b3d      	ldr	r3, [pc, #244]	@ (800720c <HAL_RCC_OscConfig+0x604>)
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	4b3c      	ldr	r3, [pc, #240]	@ (800720c <HAL_RCC_OscConfig+0x604>)
 800711c:	2180      	movs	r1, #128	@ 0x80
 800711e:	0449      	lsls	r1, r1, #17
 8007120:	430a      	orrs	r2, r1
 8007122:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8007124:	4b39      	ldr	r3, [pc, #228]	@ (800720c <HAL_RCC_OscConfig+0x604>)
 8007126:	68da      	ldr	r2, [r3, #12]
 8007128:	4b38      	ldr	r3, [pc, #224]	@ (800720c <HAL_RCC_OscConfig+0x604>)
 800712a:	2180      	movs	r1, #128	@ 0x80
 800712c:	0549      	lsls	r1, r1, #21
 800712e:	430a      	orrs	r2, r1
 8007130:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007132:	f7fd ffa7 	bl	8005084 <HAL_GetTick>
 8007136:	0003      	movs	r3, r0
 8007138:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800713a:	e008      	b.n	800714e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800713c:	f7fd ffa2 	bl	8005084 <HAL_GetTick>
 8007140:	0002      	movs	r2, r0
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	2b02      	cmp	r3, #2
 8007148:	d901      	bls.n	800714e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	e059      	b.n	8007202 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800714e:	4b2f      	ldr	r3, [pc, #188]	@ (800720c <HAL_RCC_OscConfig+0x604>)
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	2380      	movs	r3, #128	@ 0x80
 8007154:	049b      	lsls	r3, r3, #18
 8007156:	4013      	ands	r3, r2
 8007158:	d0f0      	beq.n	800713c <HAL_RCC_OscConfig+0x534>
 800715a:	e051      	b.n	8007200 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800715c:	4b2b      	ldr	r3, [pc, #172]	@ (800720c <HAL_RCC_OscConfig+0x604>)
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	4b2a      	ldr	r3, [pc, #168]	@ (800720c <HAL_RCC_OscConfig+0x604>)
 8007162:	492e      	ldr	r1, [pc, #184]	@ (800721c <HAL_RCC_OscConfig+0x614>)
 8007164:	400a      	ands	r2, r1
 8007166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007168:	f7fd ff8c 	bl	8005084 <HAL_GetTick>
 800716c:	0003      	movs	r3, r0
 800716e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007170:	e008      	b.n	8007184 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007172:	f7fd ff87 	bl	8005084 <HAL_GetTick>
 8007176:	0002      	movs	r2, r0
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	1ad3      	subs	r3, r2, r3
 800717c:	2b02      	cmp	r3, #2
 800717e:	d901      	bls.n	8007184 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8007180:	2303      	movs	r3, #3
 8007182:	e03e      	b.n	8007202 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007184:	4b21      	ldr	r3, [pc, #132]	@ (800720c <HAL_RCC_OscConfig+0x604>)
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	2380      	movs	r3, #128	@ 0x80
 800718a:	049b      	lsls	r3, r3, #18
 800718c:	4013      	ands	r3, r2
 800718e:	d1f0      	bne.n	8007172 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8007190:	4b1e      	ldr	r3, [pc, #120]	@ (800720c <HAL_RCC_OscConfig+0x604>)
 8007192:	68da      	ldr	r2, [r3, #12]
 8007194:	4b1d      	ldr	r3, [pc, #116]	@ (800720c <HAL_RCC_OscConfig+0x604>)
 8007196:	4923      	ldr	r1, [pc, #140]	@ (8007224 <HAL_RCC_OscConfig+0x61c>)
 8007198:	400a      	ands	r2, r1
 800719a:	60da      	str	r2, [r3, #12]
 800719c:	e030      	b.n	8007200 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	69db      	ldr	r3, [r3, #28]
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d101      	bne.n	80071aa <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	e02b      	b.n	8007202 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80071aa:	4b18      	ldr	r3, [pc, #96]	@ (800720c <HAL_RCC_OscConfig+0x604>)
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	2203      	movs	r2, #3
 80071b4:	401a      	ands	r2, r3
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6a1b      	ldr	r3, [r3, #32]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d11e      	bne.n	80071fc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	2270      	movs	r2, #112	@ 0x70
 80071c2:	401a      	ands	r2, r3
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d117      	bne.n	80071fc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80071cc:	697a      	ldr	r2, [r7, #20]
 80071ce:	23fe      	movs	r3, #254	@ 0xfe
 80071d0:	01db      	lsls	r3, r3, #7
 80071d2:	401a      	ands	r2, r3
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071d8:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80071da:	429a      	cmp	r2, r3
 80071dc:	d10e      	bne.n	80071fc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80071de:	697a      	ldr	r2, [r7, #20]
 80071e0:	23f8      	movs	r3, #248	@ 0xf8
 80071e2:	039b      	lsls	r3, r3, #14
 80071e4:	401a      	ands	r2, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d106      	bne.n	80071fc <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	0f5b      	lsrs	r3, r3, #29
 80071f2:	075a      	lsls	r2, r3, #29
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d001      	beq.n	8007200 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e000      	b.n	8007202 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8007200:	2300      	movs	r3, #0
}
 8007202:	0018      	movs	r0, r3
 8007204:	46bd      	mov	sp, r7
 8007206:	b008      	add	sp, #32
 8007208:	bd80      	pop	{r7, pc}
 800720a:	46c0      	nop			@ (mov r8, r8)
 800720c:	40021000 	.word	0x40021000
 8007210:	40007000 	.word	0x40007000
 8007214:	00001388 	.word	0x00001388
 8007218:	efffffff 	.word	0xefffffff
 800721c:	feffffff 	.word	0xfeffffff
 8007220:	1fc1808c 	.word	0x1fc1808c
 8007224:	effefffc 	.word	0xeffefffc

08007228 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d101      	bne.n	800723c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	e0e9      	b.n	8007410 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800723c:	4b76      	ldr	r3, [pc, #472]	@ (8007418 <HAL_RCC_ClockConfig+0x1f0>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2207      	movs	r2, #7
 8007242:	4013      	ands	r3, r2
 8007244:	683a      	ldr	r2, [r7, #0]
 8007246:	429a      	cmp	r2, r3
 8007248:	d91e      	bls.n	8007288 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800724a:	4b73      	ldr	r3, [pc, #460]	@ (8007418 <HAL_RCC_ClockConfig+0x1f0>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	2207      	movs	r2, #7
 8007250:	4393      	bics	r3, r2
 8007252:	0019      	movs	r1, r3
 8007254:	4b70      	ldr	r3, [pc, #448]	@ (8007418 <HAL_RCC_ClockConfig+0x1f0>)
 8007256:	683a      	ldr	r2, [r7, #0]
 8007258:	430a      	orrs	r2, r1
 800725a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800725c:	f7fd ff12 	bl	8005084 <HAL_GetTick>
 8007260:	0003      	movs	r3, r0
 8007262:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007264:	e009      	b.n	800727a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007266:	f7fd ff0d 	bl	8005084 <HAL_GetTick>
 800726a:	0002      	movs	r2, r0
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	1ad3      	subs	r3, r2, r3
 8007270:	4a6a      	ldr	r2, [pc, #424]	@ (800741c <HAL_RCC_ClockConfig+0x1f4>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d901      	bls.n	800727a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8007276:	2303      	movs	r3, #3
 8007278:	e0ca      	b.n	8007410 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800727a:	4b67      	ldr	r3, [pc, #412]	@ (8007418 <HAL_RCC_ClockConfig+0x1f0>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	2207      	movs	r2, #7
 8007280:	4013      	ands	r3, r2
 8007282:	683a      	ldr	r2, [r7, #0]
 8007284:	429a      	cmp	r2, r3
 8007286:	d1ee      	bne.n	8007266 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2202      	movs	r2, #2
 800728e:	4013      	ands	r3, r2
 8007290:	d015      	beq.n	80072be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2204      	movs	r2, #4
 8007298:	4013      	ands	r3, r2
 800729a:	d006      	beq.n	80072aa <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800729c:	4b60      	ldr	r3, [pc, #384]	@ (8007420 <HAL_RCC_ClockConfig+0x1f8>)
 800729e:	689a      	ldr	r2, [r3, #8]
 80072a0:	4b5f      	ldr	r3, [pc, #380]	@ (8007420 <HAL_RCC_ClockConfig+0x1f8>)
 80072a2:	21e0      	movs	r1, #224	@ 0xe0
 80072a4:	01c9      	lsls	r1, r1, #7
 80072a6:	430a      	orrs	r2, r1
 80072a8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072aa:	4b5d      	ldr	r3, [pc, #372]	@ (8007420 <HAL_RCC_ClockConfig+0x1f8>)
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	4a5d      	ldr	r2, [pc, #372]	@ (8007424 <HAL_RCC_ClockConfig+0x1fc>)
 80072b0:	4013      	ands	r3, r2
 80072b2:	0019      	movs	r1, r3
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	689a      	ldr	r2, [r3, #8]
 80072b8:	4b59      	ldr	r3, [pc, #356]	@ (8007420 <HAL_RCC_ClockConfig+0x1f8>)
 80072ba:	430a      	orrs	r2, r1
 80072bc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2201      	movs	r2, #1
 80072c4:	4013      	ands	r3, r2
 80072c6:	d057      	beq.n	8007378 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d107      	bne.n	80072e0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80072d0:	4b53      	ldr	r3, [pc, #332]	@ (8007420 <HAL_RCC_ClockConfig+0x1f8>)
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	2380      	movs	r3, #128	@ 0x80
 80072d6:	029b      	lsls	r3, r3, #10
 80072d8:	4013      	ands	r3, r2
 80072da:	d12b      	bne.n	8007334 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	e097      	b.n	8007410 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	2b02      	cmp	r3, #2
 80072e6:	d107      	bne.n	80072f8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80072e8:	4b4d      	ldr	r3, [pc, #308]	@ (8007420 <HAL_RCC_ClockConfig+0x1f8>)
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	2380      	movs	r3, #128	@ 0x80
 80072ee:	049b      	lsls	r3, r3, #18
 80072f0:	4013      	ands	r3, r2
 80072f2:	d11f      	bne.n	8007334 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	e08b      	b.n	8007410 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d107      	bne.n	8007310 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007300:	4b47      	ldr	r3, [pc, #284]	@ (8007420 <HAL_RCC_ClockConfig+0x1f8>)
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	2380      	movs	r3, #128	@ 0x80
 8007306:	00db      	lsls	r3, r3, #3
 8007308:	4013      	ands	r3, r2
 800730a:	d113      	bne.n	8007334 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	e07f      	b.n	8007410 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	2b03      	cmp	r3, #3
 8007316:	d106      	bne.n	8007326 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007318:	4b41      	ldr	r3, [pc, #260]	@ (8007420 <HAL_RCC_ClockConfig+0x1f8>)
 800731a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800731c:	2202      	movs	r2, #2
 800731e:	4013      	ands	r3, r2
 8007320:	d108      	bne.n	8007334 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	e074      	b.n	8007410 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007326:	4b3e      	ldr	r3, [pc, #248]	@ (8007420 <HAL_RCC_ClockConfig+0x1f8>)
 8007328:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800732a:	2202      	movs	r2, #2
 800732c:	4013      	ands	r3, r2
 800732e:	d101      	bne.n	8007334 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007330:	2301      	movs	r3, #1
 8007332:	e06d      	b.n	8007410 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007334:	4b3a      	ldr	r3, [pc, #232]	@ (8007420 <HAL_RCC_ClockConfig+0x1f8>)
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	2207      	movs	r2, #7
 800733a:	4393      	bics	r3, r2
 800733c:	0019      	movs	r1, r3
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	685a      	ldr	r2, [r3, #4]
 8007342:	4b37      	ldr	r3, [pc, #220]	@ (8007420 <HAL_RCC_ClockConfig+0x1f8>)
 8007344:	430a      	orrs	r2, r1
 8007346:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007348:	f7fd fe9c 	bl	8005084 <HAL_GetTick>
 800734c:	0003      	movs	r3, r0
 800734e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007350:	e009      	b.n	8007366 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007352:	f7fd fe97 	bl	8005084 <HAL_GetTick>
 8007356:	0002      	movs	r2, r0
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	1ad3      	subs	r3, r2, r3
 800735c:	4a2f      	ldr	r2, [pc, #188]	@ (800741c <HAL_RCC_ClockConfig+0x1f4>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d901      	bls.n	8007366 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8007362:	2303      	movs	r3, #3
 8007364:	e054      	b.n	8007410 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007366:	4b2e      	ldr	r3, [pc, #184]	@ (8007420 <HAL_RCC_ClockConfig+0x1f8>)
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	2238      	movs	r2, #56	@ 0x38
 800736c:	401a      	ands	r2, r3
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	00db      	lsls	r3, r3, #3
 8007374:	429a      	cmp	r2, r3
 8007376:	d1ec      	bne.n	8007352 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007378:	4b27      	ldr	r3, [pc, #156]	@ (8007418 <HAL_RCC_ClockConfig+0x1f0>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2207      	movs	r2, #7
 800737e:	4013      	ands	r3, r2
 8007380:	683a      	ldr	r2, [r7, #0]
 8007382:	429a      	cmp	r2, r3
 8007384:	d21e      	bcs.n	80073c4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007386:	4b24      	ldr	r3, [pc, #144]	@ (8007418 <HAL_RCC_ClockConfig+0x1f0>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2207      	movs	r2, #7
 800738c:	4393      	bics	r3, r2
 800738e:	0019      	movs	r1, r3
 8007390:	4b21      	ldr	r3, [pc, #132]	@ (8007418 <HAL_RCC_ClockConfig+0x1f0>)
 8007392:	683a      	ldr	r2, [r7, #0]
 8007394:	430a      	orrs	r2, r1
 8007396:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007398:	f7fd fe74 	bl	8005084 <HAL_GetTick>
 800739c:	0003      	movs	r3, r0
 800739e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80073a0:	e009      	b.n	80073b6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073a2:	f7fd fe6f 	bl	8005084 <HAL_GetTick>
 80073a6:	0002      	movs	r2, r0
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	1ad3      	subs	r3, r2, r3
 80073ac:	4a1b      	ldr	r2, [pc, #108]	@ (800741c <HAL_RCC_ClockConfig+0x1f4>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d901      	bls.n	80073b6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80073b2:	2303      	movs	r3, #3
 80073b4:	e02c      	b.n	8007410 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80073b6:	4b18      	ldr	r3, [pc, #96]	@ (8007418 <HAL_RCC_ClockConfig+0x1f0>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	2207      	movs	r2, #7
 80073bc:	4013      	ands	r3, r2
 80073be:	683a      	ldr	r2, [r7, #0]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d1ee      	bne.n	80073a2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	2204      	movs	r2, #4
 80073ca:	4013      	ands	r3, r2
 80073cc:	d009      	beq.n	80073e2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80073ce:	4b14      	ldr	r3, [pc, #80]	@ (8007420 <HAL_RCC_ClockConfig+0x1f8>)
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	4a15      	ldr	r2, [pc, #84]	@ (8007428 <HAL_RCC_ClockConfig+0x200>)
 80073d4:	4013      	ands	r3, r2
 80073d6:	0019      	movs	r1, r3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	68da      	ldr	r2, [r3, #12]
 80073dc:	4b10      	ldr	r3, [pc, #64]	@ (8007420 <HAL_RCC_ClockConfig+0x1f8>)
 80073de:	430a      	orrs	r2, r1
 80073e0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80073e2:	f000 f829 	bl	8007438 <HAL_RCC_GetSysClockFreq>
 80073e6:	0001      	movs	r1, r0
 80073e8:	4b0d      	ldr	r3, [pc, #52]	@ (8007420 <HAL_RCC_ClockConfig+0x1f8>)
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	0a1b      	lsrs	r3, r3, #8
 80073ee:	220f      	movs	r2, #15
 80073f0:	401a      	ands	r2, r3
 80073f2:	4b0e      	ldr	r3, [pc, #56]	@ (800742c <HAL_RCC_ClockConfig+0x204>)
 80073f4:	0092      	lsls	r2, r2, #2
 80073f6:	58d3      	ldr	r3, [r2, r3]
 80073f8:	221f      	movs	r2, #31
 80073fa:	4013      	ands	r3, r2
 80073fc:	000a      	movs	r2, r1
 80073fe:	40da      	lsrs	r2, r3
 8007400:	4b0b      	ldr	r3, [pc, #44]	@ (8007430 <HAL_RCC_ClockConfig+0x208>)
 8007402:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007404:	4b0b      	ldr	r3, [pc, #44]	@ (8007434 <HAL_RCC_ClockConfig+0x20c>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	0018      	movs	r0, r3
 800740a:	f7fd fddf 	bl	8004fcc <HAL_InitTick>
 800740e:	0003      	movs	r3, r0
}
 8007410:	0018      	movs	r0, r3
 8007412:	46bd      	mov	sp, r7
 8007414:	b004      	add	sp, #16
 8007416:	bd80      	pop	{r7, pc}
 8007418:	40022000 	.word	0x40022000
 800741c:	00001388 	.word	0x00001388
 8007420:	40021000 	.word	0x40021000
 8007424:	fffff0ff 	.word	0xfffff0ff
 8007428:	ffff8fff 	.word	0xffff8fff
 800742c:	08010470 	.word	0x08010470
 8007430:	2000001c 	.word	0x2000001c
 8007434:	20000034 	.word	0x20000034

08007438 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b086      	sub	sp, #24
 800743c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800743e:	4b3c      	ldr	r3, [pc, #240]	@ (8007530 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	2238      	movs	r2, #56	@ 0x38
 8007444:	4013      	ands	r3, r2
 8007446:	d10f      	bne.n	8007468 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8007448:	4b39      	ldr	r3, [pc, #228]	@ (8007530 <HAL_RCC_GetSysClockFreq+0xf8>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	0adb      	lsrs	r3, r3, #11
 800744e:	2207      	movs	r2, #7
 8007450:	4013      	ands	r3, r2
 8007452:	2201      	movs	r2, #1
 8007454:	409a      	lsls	r2, r3
 8007456:	0013      	movs	r3, r2
 8007458:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800745a:	6839      	ldr	r1, [r7, #0]
 800745c:	4835      	ldr	r0, [pc, #212]	@ (8007534 <HAL_RCC_GetSysClockFreq+0xfc>)
 800745e:	f7f8 fe6b 	bl	8000138 <__udivsi3>
 8007462:	0003      	movs	r3, r0
 8007464:	613b      	str	r3, [r7, #16]
 8007466:	e05d      	b.n	8007524 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007468:	4b31      	ldr	r3, [pc, #196]	@ (8007530 <HAL_RCC_GetSysClockFreq+0xf8>)
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	2238      	movs	r2, #56	@ 0x38
 800746e:	4013      	ands	r3, r2
 8007470:	2b08      	cmp	r3, #8
 8007472:	d102      	bne.n	800747a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007474:	4b30      	ldr	r3, [pc, #192]	@ (8007538 <HAL_RCC_GetSysClockFreq+0x100>)
 8007476:	613b      	str	r3, [r7, #16]
 8007478:	e054      	b.n	8007524 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800747a:	4b2d      	ldr	r3, [pc, #180]	@ (8007530 <HAL_RCC_GetSysClockFreq+0xf8>)
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	2238      	movs	r2, #56	@ 0x38
 8007480:	4013      	ands	r3, r2
 8007482:	2b10      	cmp	r3, #16
 8007484:	d138      	bne.n	80074f8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8007486:	4b2a      	ldr	r3, [pc, #168]	@ (8007530 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	2203      	movs	r2, #3
 800748c:	4013      	ands	r3, r2
 800748e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007490:	4b27      	ldr	r3, [pc, #156]	@ (8007530 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	091b      	lsrs	r3, r3, #4
 8007496:	2207      	movs	r2, #7
 8007498:	4013      	ands	r3, r2
 800749a:	3301      	adds	r3, #1
 800749c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2b03      	cmp	r3, #3
 80074a2:	d10d      	bne.n	80074c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80074a4:	68b9      	ldr	r1, [r7, #8]
 80074a6:	4824      	ldr	r0, [pc, #144]	@ (8007538 <HAL_RCC_GetSysClockFreq+0x100>)
 80074a8:	f7f8 fe46 	bl	8000138 <__udivsi3>
 80074ac:	0003      	movs	r3, r0
 80074ae:	0019      	movs	r1, r3
 80074b0:	4b1f      	ldr	r3, [pc, #124]	@ (8007530 <HAL_RCC_GetSysClockFreq+0xf8>)
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	0a1b      	lsrs	r3, r3, #8
 80074b6:	227f      	movs	r2, #127	@ 0x7f
 80074b8:	4013      	ands	r3, r2
 80074ba:	434b      	muls	r3, r1
 80074bc:	617b      	str	r3, [r7, #20]
        break;
 80074be:	e00d      	b.n	80074dc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80074c0:	68b9      	ldr	r1, [r7, #8]
 80074c2:	481c      	ldr	r0, [pc, #112]	@ (8007534 <HAL_RCC_GetSysClockFreq+0xfc>)
 80074c4:	f7f8 fe38 	bl	8000138 <__udivsi3>
 80074c8:	0003      	movs	r3, r0
 80074ca:	0019      	movs	r1, r3
 80074cc:	4b18      	ldr	r3, [pc, #96]	@ (8007530 <HAL_RCC_GetSysClockFreq+0xf8>)
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	0a1b      	lsrs	r3, r3, #8
 80074d2:	227f      	movs	r2, #127	@ 0x7f
 80074d4:	4013      	ands	r3, r2
 80074d6:	434b      	muls	r3, r1
 80074d8:	617b      	str	r3, [r7, #20]
        break;
 80074da:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80074dc:	4b14      	ldr	r3, [pc, #80]	@ (8007530 <HAL_RCC_GetSysClockFreq+0xf8>)
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	0f5b      	lsrs	r3, r3, #29
 80074e2:	2207      	movs	r2, #7
 80074e4:	4013      	ands	r3, r2
 80074e6:	3301      	adds	r3, #1
 80074e8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80074ea:	6879      	ldr	r1, [r7, #4]
 80074ec:	6978      	ldr	r0, [r7, #20]
 80074ee:	f7f8 fe23 	bl	8000138 <__udivsi3>
 80074f2:	0003      	movs	r3, r0
 80074f4:	613b      	str	r3, [r7, #16]
 80074f6:	e015      	b.n	8007524 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80074f8:	4b0d      	ldr	r3, [pc, #52]	@ (8007530 <HAL_RCC_GetSysClockFreq+0xf8>)
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	2238      	movs	r2, #56	@ 0x38
 80074fe:	4013      	ands	r3, r2
 8007500:	2b20      	cmp	r3, #32
 8007502:	d103      	bne.n	800750c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8007504:	2380      	movs	r3, #128	@ 0x80
 8007506:	021b      	lsls	r3, r3, #8
 8007508:	613b      	str	r3, [r7, #16]
 800750a:	e00b      	b.n	8007524 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800750c:	4b08      	ldr	r3, [pc, #32]	@ (8007530 <HAL_RCC_GetSysClockFreq+0xf8>)
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	2238      	movs	r2, #56	@ 0x38
 8007512:	4013      	ands	r3, r2
 8007514:	2b18      	cmp	r3, #24
 8007516:	d103      	bne.n	8007520 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8007518:	23fa      	movs	r3, #250	@ 0xfa
 800751a:	01db      	lsls	r3, r3, #7
 800751c:	613b      	str	r3, [r7, #16]
 800751e:	e001      	b.n	8007524 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8007520:	2300      	movs	r3, #0
 8007522:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007524:	693b      	ldr	r3, [r7, #16]
}
 8007526:	0018      	movs	r0, r3
 8007528:	46bd      	mov	sp, r7
 800752a:	b006      	add	sp, #24
 800752c:	bd80      	pop	{r7, pc}
 800752e:	46c0      	nop			@ (mov r8, r8)
 8007530:	40021000 	.word	0x40021000
 8007534:	00f42400 	.word	0x00f42400
 8007538:	007a1200 	.word	0x007a1200

0800753c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007540:	4b02      	ldr	r3, [pc, #8]	@ (800754c <HAL_RCC_GetHCLKFreq+0x10>)
 8007542:	681b      	ldr	r3, [r3, #0]
}
 8007544:	0018      	movs	r0, r3
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	46c0      	nop			@ (mov r8, r8)
 800754c:	2000001c 	.word	0x2000001c

08007550 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007550:	b5b0      	push	{r4, r5, r7, lr}
 8007552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007554:	f7ff fff2 	bl	800753c <HAL_RCC_GetHCLKFreq>
 8007558:	0004      	movs	r4, r0
 800755a:	f7ff fb49 	bl	8006bf0 <LL_RCC_GetAPB1Prescaler>
 800755e:	0003      	movs	r3, r0
 8007560:	0b1a      	lsrs	r2, r3, #12
 8007562:	4b05      	ldr	r3, [pc, #20]	@ (8007578 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007564:	0092      	lsls	r2, r2, #2
 8007566:	58d3      	ldr	r3, [r2, r3]
 8007568:	221f      	movs	r2, #31
 800756a:	4013      	ands	r3, r2
 800756c:	40dc      	lsrs	r4, r3
 800756e:	0023      	movs	r3, r4
}
 8007570:	0018      	movs	r0, r3
 8007572:	46bd      	mov	sp, r7
 8007574:	bdb0      	pop	{r4, r5, r7, pc}
 8007576:	46c0      	nop			@ (mov r8, r8)
 8007578:	080104b0 	.word	0x080104b0

0800757c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b086      	sub	sp, #24
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8007584:	2313      	movs	r3, #19
 8007586:	18fb      	adds	r3, r7, r3
 8007588:	2200      	movs	r2, #0
 800758a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800758c:	2312      	movs	r3, #18
 800758e:	18fb      	adds	r3, r7, r3
 8007590:	2200      	movs	r2, #0
 8007592:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	2380      	movs	r3, #128	@ 0x80
 800759a:	029b      	lsls	r3, r3, #10
 800759c:	4013      	ands	r3, r2
 800759e:	d100      	bne.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80075a0:	e0a3      	b.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80075a2:	2011      	movs	r0, #17
 80075a4:	183b      	adds	r3, r7, r0
 80075a6:	2200      	movs	r2, #0
 80075a8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80075aa:	4b86      	ldr	r3, [pc, #536]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80075ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80075ae:	2380      	movs	r3, #128	@ 0x80
 80075b0:	055b      	lsls	r3, r3, #21
 80075b2:	4013      	ands	r3, r2
 80075b4:	d110      	bne.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80075b6:	4b83      	ldr	r3, [pc, #524]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80075b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80075ba:	4b82      	ldr	r3, [pc, #520]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80075bc:	2180      	movs	r1, #128	@ 0x80
 80075be:	0549      	lsls	r1, r1, #21
 80075c0:	430a      	orrs	r2, r1
 80075c2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80075c4:	4b7f      	ldr	r3, [pc, #508]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80075c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80075c8:	2380      	movs	r3, #128	@ 0x80
 80075ca:	055b      	lsls	r3, r3, #21
 80075cc:	4013      	ands	r3, r2
 80075ce:	60bb      	str	r3, [r7, #8]
 80075d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80075d2:	183b      	adds	r3, r7, r0
 80075d4:	2201      	movs	r2, #1
 80075d6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80075d8:	4b7b      	ldr	r3, [pc, #492]	@ (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	4b7a      	ldr	r3, [pc, #488]	@ (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80075de:	2180      	movs	r1, #128	@ 0x80
 80075e0:	0049      	lsls	r1, r1, #1
 80075e2:	430a      	orrs	r2, r1
 80075e4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80075e6:	f7fd fd4d 	bl	8005084 <HAL_GetTick>
 80075ea:	0003      	movs	r3, r0
 80075ec:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075ee:	e00b      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075f0:	f7fd fd48 	bl	8005084 <HAL_GetTick>
 80075f4:	0002      	movs	r2, r0
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	1ad3      	subs	r3, r2, r3
 80075fa:	2b02      	cmp	r3, #2
 80075fc:	d904      	bls.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80075fe:	2313      	movs	r3, #19
 8007600:	18fb      	adds	r3, r7, r3
 8007602:	2203      	movs	r2, #3
 8007604:	701a      	strb	r2, [r3, #0]
        break;
 8007606:	e005      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007608:	4b6f      	ldr	r3, [pc, #444]	@ (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	2380      	movs	r3, #128	@ 0x80
 800760e:	005b      	lsls	r3, r3, #1
 8007610:	4013      	ands	r3, r2
 8007612:	d0ed      	beq.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8007614:	2313      	movs	r3, #19
 8007616:	18fb      	adds	r3, r7, r3
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d154      	bne.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800761e:	4b69      	ldr	r3, [pc, #420]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007620:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007622:	23c0      	movs	r3, #192	@ 0xc0
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	4013      	ands	r3, r2
 8007628:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d019      	beq.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	699b      	ldr	r3, [r3, #24]
 8007634:	697a      	ldr	r2, [r7, #20]
 8007636:	429a      	cmp	r2, r3
 8007638:	d014      	beq.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800763a:	4b62      	ldr	r3, [pc, #392]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800763c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800763e:	4a63      	ldr	r2, [pc, #396]	@ (80077cc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8007640:	4013      	ands	r3, r2
 8007642:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007644:	4b5f      	ldr	r3, [pc, #380]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007646:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007648:	4b5e      	ldr	r3, [pc, #376]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800764a:	2180      	movs	r1, #128	@ 0x80
 800764c:	0249      	lsls	r1, r1, #9
 800764e:	430a      	orrs	r2, r1
 8007650:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007652:	4b5c      	ldr	r3, [pc, #368]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007654:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007656:	4b5b      	ldr	r3, [pc, #364]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007658:	495d      	ldr	r1, [pc, #372]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800765a:	400a      	ands	r2, r1
 800765c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800765e:	4b59      	ldr	r3, [pc, #356]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007660:	697a      	ldr	r2, [r7, #20]
 8007662:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	2201      	movs	r2, #1
 8007668:	4013      	ands	r3, r2
 800766a:	d016      	beq.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800766c:	f7fd fd0a 	bl	8005084 <HAL_GetTick>
 8007670:	0003      	movs	r3, r0
 8007672:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007674:	e00c      	b.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007676:	f7fd fd05 	bl	8005084 <HAL_GetTick>
 800767a:	0002      	movs	r2, r0
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	1ad3      	subs	r3, r2, r3
 8007680:	4a54      	ldr	r2, [pc, #336]	@ (80077d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d904      	bls.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8007686:	2313      	movs	r3, #19
 8007688:	18fb      	adds	r3, r7, r3
 800768a:	2203      	movs	r2, #3
 800768c:	701a      	strb	r2, [r3, #0]
            break;
 800768e:	e004      	b.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007690:	4b4c      	ldr	r3, [pc, #304]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007694:	2202      	movs	r2, #2
 8007696:	4013      	ands	r3, r2
 8007698:	d0ed      	beq.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800769a:	2313      	movs	r3, #19
 800769c:	18fb      	adds	r3, r7, r3
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d10a      	bne.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80076a4:	4b47      	ldr	r3, [pc, #284]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80076a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076a8:	4a48      	ldr	r2, [pc, #288]	@ (80077cc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80076aa:	4013      	ands	r3, r2
 80076ac:	0019      	movs	r1, r3
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	699a      	ldr	r2, [r3, #24]
 80076b2:	4b44      	ldr	r3, [pc, #272]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80076b4:	430a      	orrs	r2, r1
 80076b6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80076b8:	e00c      	b.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80076ba:	2312      	movs	r3, #18
 80076bc:	18fb      	adds	r3, r7, r3
 80076be:	2213      	movs	r2, #19
 80076c0:	18ba      	adds	r2, r7, r2
 80076c2:	7812      	ldrb	r2, [r2, #0]
 80076c4:	701a      	strb	r2, [r3, #0]
 80076c6:	e005      	b.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076c8:	2312      	movs	r3, #18
 80076ca:	18fb      	adds	r3, r7, r3
 80076cc:	2213      	movs	r2, #19
 80076ce:	18ba      	adds	r2, r7, r2
 80076d0:	7812      	ldrb	r2, [r2, #0]
 80076d2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80076d4:	2311      	movs	r3, #17
 80076d6:	18fb      	adds	r3, r7, r3
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d105      	bne.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076de:	4b39      	ldr	r3, [pc, #228]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80076e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80076e2:	4b38      	ldr	r3, [pc, #224]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80076e4:	493c      	ldr	r1, [pc, #240]	@ (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80076e6:	400a      	ands	r2, r1
 80076e8:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2201      	movs	r2, #1
 80076f0:	4013      	ands	r3, r2
 80076f2:	d009      	beq.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80076f4:	4b33      	ldr	r3, [pc, #204]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80076f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076f8:	2203      	movs	r2, #3
 80076fa:	4393      	bics	r3, r2
 80076fc:	0019      	movs	r1, r3
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	685a      	ldr	r2, [r3, #4]
 8007702:	4b30      	ldr	r3, [pc, #192]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007704:	430a      	orrs	r2, r1
 8007706:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2202      	movs	r2, #2
 800770e:	4013      	ands	r3, r2
 8007710:	d009      	beq.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007712:	4b2c      	ldr	r3, [pc, #176]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007716:	220c      	movs	r2, #12
 8007718:	4393      	bics	r3, r2
 800771a:	0019      	movs	r1, r3
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	689a      	ldr	r2, [r3, #8]
 8007720:	4b28      	ldr	r3, [pc, #160]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007722:	430a      	orrs	r2, r1
 8007724:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	2220      	movs	r2, #32
 800772c:	4013      	ands	r3, r2
 800772e:	d009      	beq.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007730:	4b24      	ldr	r3, [pc, #144]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007734:	4a29      	ldr	r2, [pc, #164]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007736:	4013      	ands	r3, r2
 8007738:	0019      	movs	r1, r3
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	68da      	ldr	r2, [r3, #12]
 800773e:	4b21      	ldr	r3, [pc, #132]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007740:	430a      	orrs	r2, r1
 8007742:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	2380      	movs	r3, #128	@ 0x80
 800774a:	01db      	lsls	r3, r3, #7
 800774c:	4013      	ands	r3, r2
 800774e:	d015      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007750:	4b1c      	ldr	r3, [pc, #112]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007752:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	0899      	lsrs	r1, r3, #2
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	695a      	ldr	r2, [r3, #20]
 800775c:	4b19      	ldr	r3, [pc, #100]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800775e:	430a      	orrs	r2, r1
 8007760:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	695a      	ldr	r2, [r3, #20]
 8007766:	2380      	movs	r3, #128	@ 0x80
 8007768:	05db      	lsls	r3, r3, #23
 800776a:	429a      	cmp	r2, r3
 800776c:	d106      	bne.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800776e:	4b15      	ldr	r3, [pc, #84]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007770:	68da      	ldr	r2, [r3, #12]
 8007772:	4b14      	ldr	r3, [pc, #80]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007774:	2180      	movs	r1, #128	@ 0x80
 8007776:	0249      	lsls	r1, r1, #9
 8007778:	430a      	orrs	r2, r1
 800777a:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	2380      	movs	r3, #128	@ 0x80
 8007782:	011b      	lsls	r3, r3, #4
 8007784:	4013      	ands	r3, r2
 8007786:	d016      	beq.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8007788:	4b0e      	ldr	r3, [pc, #56]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800778a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800778c:	4a14      	ldr	r2, [pc, #80]	@ (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800778e:	4013      	ands	r3, r2
 8007790:	0019      	movs	r1, r3
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	691a      	ldr	r2, [r3, #16]
 8007796:	4b0b      	ldr	r3, [pc, #44]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007798:	430a      	orrs	r2, r1
 800779a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	691a      	ldr	r2, [r3, #16]
 80077a0:	2380      	movs	r3, #128	@ 0x80
 80077a2:	01db      	lsls	r3, r3, #7
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d106      	bne.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80077a8:	4b06      	ldr	r3, [pc, #24]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80077aa:	68da      	ldr	r2, [r3, #12]
 80077ac:	4b05      	ldr	r3, [pc, #20]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80077ae:	2180      	movs	r1, #128	@ 0x80
 80077b0:	0249      	lsls	r1, r1, #9
 80077b2:	430a      	orrs	r2, r1
 80077b4:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80077b6:	2312      	movs	r3, #18
 80077b8:	18fb      	adds	r3, r7, r3
 80077ba:	781b      	ldrb	r3, [r3, #0]
}
 80077bc:	0018      	movs	r0, r3
 80077be:	46bd      	mov	sp, r7
 80077c0:	b006      	add	sp, #24
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	40021000 	.word	0x40021000
 80077c8:	40007000 	.word	0x40007000
 80077cc:	fffffcff 	.word	0xfffffcff
 80077d0:	fffeffff 	.word	0xfffeffff
 80077d4:	00001388 	.word	0x00001388
 80077d8:	efffffff 	.word	0xefffffff
 80077dc:	ffffcfff 	.word	0xffffcfff
 80077e0:	ffff3fff 	.word	0xffff3fff

080077e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d101      	bne.n	80077f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	e0a8      	b.n	8007948 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d109      	bne.n	8007812 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	685a      	ldr	r2, [r3, #4]
 8007802:	2382      	movs	r3, #130	@ 0x82
 8007804:	005b      	lsls	r3, r3, #1
 8007806:	429a      	cmp	r2, r3
 8007808:	d009      	beq.n	800781e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	61da      	str	r2, [r3, #28]
 8007810:	e005      	b.n	800781e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	225d      	movs	r2, #93	@ 0x5d
 8007828:	5c9b      	ldrb	r3, [r3, r2]
 800782a:	b2db      	uxtb	r3, r3
 800782c:	2b00      	cmp	r3, #0
 800782e:	d107      	bne.n	8007840 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	225c      	movs	r2, #92	@ 0x5c
 8007834:	2100      	movs	r1, #0
 8007836:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	0018      	movs	r0, r3
 800783c:	f000 f88a 	bl	8007954 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	225d      	movs	r2, #93	@ 0x5d
 8007844:	2102      	movs	r1, #2
 8007846:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2140      	movs	r1, #64	@ 0x40
 8007854:	438a      	bics	r2, r1
 8007856:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	68da      	ldr	r2, [r3, #12]
 800785c:	23e0      	movs	r3, #224	@ 0xe0
 800785e:	00db      	lsls	r3, r3, #3
 8007860:	429a      	cmp	r2, r3
 8007862:	d902      	bls.n	800786a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007864:	2300      	movs	r3, #0
 8007866:	60fb      	str	r3, [r7, #12]
 8007868:	e002      	b.n	8007870 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800786a:	2380      	movs	r3, #128	@ 0x80
 800786c:	015b      	lsls	r3, r3, #5
 800786e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	68da      	ldr	r2, [r3, #12]
 8007874:	23f0      	movs	r3, #240	@ 0xf0
 8007876:	011b      	lsls	r3, r3, #4
 8007878:	429a      	cmp	r2, r3
 800787a:	d008      	beq.n	800788e <HAL_SPI_Init+0xaa>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	68da      	ldr	r2, [r3, #12]
 8007880:	23e0      	movs	r3, #224	@ 0xe0
 8007882:	00db      	lsls	r3, r3, #3
 8007884:	429a      	cmp	r2, r3
 8007886:	d002      	beq.n	800788e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	685a      	ldr	r2, [r3, #4]
 8007892:	2382      	movs	r3, #130	@ 0x82
 8007894:	005b      	lsls	r3, r3, #1
 8007896:	401a      	ands	r2, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6899      	ldr	r1, [r3, #8]
 800789c:	2384      	movs	r3, #132	@ 0x84
 800789e:	021b      	lsls	r3, r3, #8
 80078a0:	400b      	ands	r3, r1
 80078a2:	431a      	orrs	r2, r3
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	691b      	ldr	r3, [r3, #16]
 80078a8:	2102      	movs	r1, #2
 80078aa:	400b      	ands	r3, r1
 80078ac:	431a      	orrs	r2, r3
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	695b      	ldr	r3, [r3, #20]
 80078b2:	2101      	movs	r1, #1
 80078b4:	400b      	ands	r3, r1
 80078b6:	431a      	orrs	r2, r3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6999      	ldr	r1, [r3, #24]
 80078bc:	2380      	movs	r3, #128	@ 0x80
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	400b      	ands	r3, r1
 80078c2:	431a      	orrs	r2, r3
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	69db      	ldr	r3, [r3, #28]
 80078c8:	2138      	movs	r1, #56	@ 0x38
 80078ca:	400b      	ands	r3, r1
 80078cc:	431a      	orrs	r2, r3
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6a1b      	ldr	r3, [r3, #32]
 80078d2:	2180      	movs	r1, #128	@ 0x80
 80078d4:	400b      	ands	r3, r1
 80078d6:	431a      	orrs	r2, r3
 80078d8:	0011      	movs	r1, r2
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80078de:	2380      	movs	r3, #128	@ 0x80
 80078e0:	019b      	lsls	r3, r3, #6
 80078e2:	401a      	ands	r2, r3
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	430a      	orrs	r2, r1
 80078ea:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	699b      	ldr	r3, [r3, #24]
 80078f0:	0c1b      	lsrs	r3, r3, #16
 80078f2:	2204      	movs	r2, #4
 80078f4:	401a      	ands	r2, r3
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078fa:	2110      	movs	r1, #16
 80078fc:	400b      	ands	r3, r1
 80078fe:	431a      	orrs	r2, r3
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007904:	2108      	movs	r1, #8
 8007906:	400b      	ands	r3, r1
 8007908:	431a      	orrs	r2, r3
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	68d9      	ldr	r1, [r3, #12]
 800790e:	23f0      	movs	r3, #240	@ 0xf0
 8007910:	011b      	lsls	r3, r3, #4
 8007912:	400b      	ands	r3, r1
 8007914:	431a      	orrs	r2, r3
 8007916:	0011      	movs	r1, r2
 8007918:	68fa      	ldr	r2, [r7, #12]
 800791a:	2380      	movs	r3, #128	@ 0x80
 800791c:	015b      	lsls	r3, r3, #5
 800791e:	401a      	ands	r2, r3
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	430a      	orrs	r2, r1
 8007926:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	69da      	ldr	r2, [r3, #28]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4907      	ldr	r1, [pc, #28]	@ (8007950 <HAL_SPI_Init+0x16c>)
 8007934:	400a      	ands	r2, r1
 8007936:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	225d      	movs	r2, #93	@ 0x5d
 8007942:	2101      	movs	r1, #1
 8007944:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007946:	2300      	movs	r3, #0
}
 8007948:	0018      	movs	r0, r3
 800794a:	46bd      	mov	sp, r7
 800794c:	b004      	add	sp, #16
 800794e:	bd80      	pop	{r7, pc}
 8007950:	fffff7ff 	.word	0xfffff7ff

08007954 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800795c:	46c0      	nop			@ (mov r8, r8)
 800795e:	46bd      	mov	sp, r7
 8007960:	b002      	add	sp, #8
 8007962:	bd80      	pop	{r7, pc}

08007964 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b08a      	sub	sp, #40	@ 0x28
 8007968:	af00      	add	r7, sp, #0
 800796a:	60f8      	str	r0, [r7, #12]
 800796c:	60b9      	str	r1, [r7, #8]
 800796e:	607a      	str	r2, [r7, #4]
 8007970:	001a      	movs	r2, r3
 8007972:	1cbb      	adds	r3, r7, #2
 8007974:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007976:	2301      	movs	r3, #1
 8007978:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800797a:	2323      	movs	r3, #35	@ 0x23
 800797c:	18fb      	adds	r3, r7, r3
 800797e:	2200      	movs	r2, #0
 8007980:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	225c      	movs	r2, #92	@ 0x5c
 8007986:	5c9b      	ldrb	r3, [r3, r2]
 8007988:	2b01      	cmp	r3, #1
 800798a:	d101      	bne.n	8007990 <HAL_SPI_TransmitReceive+0x2c>
 800798c:	2302      	movs	r3, #2
 800798e:	e1c4      	b.n	8007d1a <HAL_SPI_TransmitReceive+0x3b6>
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	225c      	movs	r2, #92	@ 0x5c
 8007994:	2101      	movs	r1, #1
 8007996:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007998:	f7fd fb74 	bl	8005084 <HAL_GetTick>
 800799c:	0003      	movs	r3, r0
 800799e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80079a0:	201b      	movs	r0, #27
 80079a2:	183b      	adds	r3, r7, r0
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	215d      	movs	r1, #93	@ 0x5d
 80079a8:	5c52      	ldrb	r2, [r2, r1]
 80079aa:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80079b2:	2312      	movs	r3, #18
 80079b4:	18fb      	adds	r3, r7, r3
 80079b6:	1cba      	adds	r2, r7, #2
 80079b8:	8812      	ldrh	r2, [r2, #0]
 80079ba:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80079bc:	183b      	adds	r3, r7, r0
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d011      	beq.n	80079e8 <HAL_SPI_TransmitReceive+0x84>
 80079c4:	697a      	ldr	r2, [r7, #20]
 80079c6:	2382      	movs	r3, #130	@ 0x82
 80079c8:	005b      	lsls	r3, r3, #1
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d107      	bne.n	80079de <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d103      	bne.n	80079de <HAL_SPI_TransmitReceive+0x7a>
 80079d6:	183b      	adds	r3, r7, r0
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	2b04      	cmp	r3, #4
 80079dc:	d004      	beq.n	80079e8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80079de:	2323      	movs	r3, #35	@ 0x23
 80079e0:	18fb      	adds	r3, r7, r3
 80079e2:	2202      	movs	r2, #2
 80079e4:	701a      	strb	r2, [r3, #0]
    goto error;
 80079e6:	e191      	b.n	8007d0c <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d006      	beq.n	80079fc <HAL_SPI_TransmitReceive+0x98>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d003      	beq.n	80079fc <HAL_SPI_TransmitReceive+0x98>
 80079f4:	1cbb      	adds	r3, r7, #2
 80079f6:	881b      	ldrh	r3, [r3, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d104      	bne.n	8007a06 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80079fc:	2323      	movs	r3, #35	@ 0x23
 80079fe:	18fb      	adds	r3, r7, r3
 8007a00:	2201      	movs	r2, #1
 8007a02:	701a      	strb	r2, [r3, #0]
    goto error;
 8007a04:	e182      	b.n	8007d0c <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	225d      	movs	r2, #93	@ 0x5d
 8007a0a:	5c9b      	ldrb	r3, [r3, r2]
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	2b04      	cmp	r3, #4
 8007a10:	d003      	beq.n	8007a1a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	225d      	movs	r2, #93	@ 0x5d
 8007a16:	2105      	movs	r1, #5
 8007a18:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	1cba      	adds	r2, r7, #2
 8007a2a:	2146      	movs	r1, #70	@ 0x46
 8007a2c:	8812      	ldrh	r2, [r2, #0]
 8007a2e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	1cba      	adds	r2, r7, #2
 8007a34:	2144      	movs	r1, #68	@ 0x44
 8007a36:	8812      	ldrh	r2, [r2, #0]
 8007a38:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	68ba      	ldr	r2, [r7, #8]
 8007a3e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	1cba      	adds	r2, r7, #2
 8007a44:	8812      	ldrh	r2, [r2, #0]
 8007a46:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	1cba      	adds	r2, r7, #2
 8007a4c:	8812      	ldrh	r2, [r2, #0]
 8007a4e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2200      	movs	r2, #0
 8007a54:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	68da      	ldr	r2, [r3, #12]
 8007a60:	23e0      	movs	r3, #224	@ 0xe0
 8007a62:	00db      	lsls	r3, r3, #3
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d908      	bls.n	8007a7a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	685a      	ldr	r2, [r3, #4]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	49ac      	ldr	r1, [pc, #688]	@ (8007d24 <HAL_SPI_TransmitReceive+0x3c0>)
 8007a74:	400a      	ands	r2, r1
 8007a76:	605a      	str	r2, [r3, #4]
 8007a78:	e008      	b.n	8007a8c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	685a      	ldr	r2, [r3, #4]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	2180      	movs	r1, #128	@ 0x80
 8007a86:	0149      	lsls	r1, r1, #5
 8007a88:	430a      	orrs	r2, r1
 8007a8a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2240      	movs	r2, #64	@ 0x40
 8007a94:	4013      	ands	r3, r2
 8007a96:	2b40      	cmp	r3, #64	@ 0x40
 8007a98:	d007      	beq.n	8007aaa <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2140      	movs	r1, #64	@ 0x40
 8007aa6:	430a      	orrs	r2, r1
 8007aa8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	68da      	ldr	r2, [r3, #12]
 8007aae:	23e0      	movs	r3, #224	@ 0xe0
 8007ab0:	00db      	lsls	r3, r3, #3
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d800      	bhi.n	8007ab8 <HAL_SPI_TransmitReceive+0x154>
 8007ab6:	e083      	b.n	8007bc0 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d005      	beq.n	8007acc <HAL_SPI_TransmitReceive+0x168>
 8007ac0:	2312      	movs	r3, #18
 8007ac2:	18fb      	adds	r3, r7, r3
 8007ac4:	881b      	ldrh	r3, [r3, #0]
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d000      	beq.n	8007acc <HAL_SPI_TransmitReceive+0x168>
 8007aca:	e06d      	b.n	8007ba8 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ad0:	881a      	ldrh	r2, [r3, #0]
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007adc:	1c9a      	adds	r2, r3, #2
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	3b01      	subs	r3, #1
 8007aea:	b29a      	uxth	r2, r3
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007af0:	e05a      	b.n	8007ba8 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	2202      	movs	r2, #2
 8007afa:	4013      	ands	r3, r2
 8007afc:	2b02      	cmp	r3, #2
 8007afe:	d11b      	bne.n	8007b38 <HAL_SPI_TransmitReceive+0x1d4>
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d016      	beq.n	8007b38 <HAL_SPI_TransmitReceive+0x1d4>
 8007b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d113      	bne.n	8007b38 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b14:	881a      	ldrh	r2, [r3, #0]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b20:	1c9a      	adds	r2, r3, #2
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	3b01      	subs	r3, #1
 8007b2e:	b29a      	uxth	r2, r3
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b34:	2300      	movs	r3, #0
 8007b36:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	4013      	ands	r3, r2
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d11c      	bne.n	8007b80 <HAL_SPI_TransmitReceive+0x21c>
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2246      	movs	r2, #70	@ 0x46
 8007b4a:	5a9b      	ldrh	r3, [r3, r2]
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d016      	beq.n	8007b80 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	68da      	ldr	r2, [r3, #12]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b5c:	b292      	uxth	r2, r2
 8007b5e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b64:	1c9a      	adds	r2, r3, #2
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2246      	movs	r2, #70	@ 0x46
 8007b6e:	5a9b      	ldrh	r3, [r3, r2]
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	3b01      	subs	r3, #1
 8007b74:	b299      	uxth	r1, r3
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2246      	movs	r2, #70	@ 0x46
 8007b7a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007b80:	f7fd fa80 	bl	8005084 <HAL_GetTick>
 8007b84:	0002      	movs	r2, r0
 8007b86:	69fb      	ldr	r3, [r7, #28]
 8007b88:	1ad3      	subs	r3, r2, r3
 8007b8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d80b      	bhi.n	8007ba8 <HAL_SPI_TransmitReceive+0x244>
 8007b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b92:	3301      	adds	r3, #1
 8007b94:	d008      	beq.n	8007ba8 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8007b96:	2323      	movs	r3, #35	@ 0x23
 8007b98:	18fb      	adds	r3, r7, r3
 8007b9a:	2203      	movs	r2, #3
 8007b9c:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	225d      	movs	r2, #93	@ 0x5d
 8007ba2:	2101      	movs	r1, #1
 8007ba4:	5499      	strb	r1, [r3, r2]
        goto error;
 8007ba6:	e0b1      	b.n	8007d0c <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d19f      	bne.n	8007af2 <HAL_SPI_TransmitReceive+0x18e>
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2246      	movs	r2, #70	@ 0x46
 8007bb6:	5a9b      	ldrh	r3, [r3, r2]
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d199      	bne.n	8007af2 <HAL_SPI_TransmitReceive+0x18e>
 8007bbe:	e089      	b.n	8007cd4 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d005      	beq.n	8007bd4 <HAL_SPI_TransmitReceive+0x270>
 8007bc8:	2312      	movs	r3, #18
 8007bca:	18fb      	adds	r3, r7, r3
 8007bcc:	881b      	ldrh	r3, [r3, #0]
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d000      	beq.n	8007bd4 <HAL_SPI_TransmitReceive+0x270>
 8007bd2:	e074      	b.n	8007cbe <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	330c      	adds	r3, #12
 8007bde:	7812      	ldrb	r2, [r2, #0]
 8007be0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007be6:	1c5a      	adds	r2, r3, #1
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	3b01      	subs	r3, #1
 8007bf4:	b29a      	uxth	r2, r3
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007bfa:	e060      	b.n	8007cbe <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	2202      	movs	r2, #2
 8007c04:	4013      	ands	r3, r2
 8007c06:	2b02      	cmp	r3, #2
 8007c08:	d11c      	bne.n	8007c44 <HAL_SPI_TransmitReceive+0x2e0>
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d017      	beq.n	8007c44 <HAL_SPI_TransmitReceive+0x2e0>
 8007c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d114      	bne.n	8007c44 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	330c      	adds	r3, #12
 8007c24:	7812      	ldrb	r2, [r2, #0]
 8007c26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c2c:	1c5a      	adds	r2, r3, #1
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	3b01      	subs	r3, #1
 8007c3a:	b29a      	uxth	r2, r3
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c40:	2300      	movs	r3, #0
 8007c42:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	4013      	ands	r3, r2
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d11e      	bne.n	8007c90 <HAL_SPI_TransmitReceive+0x32c>
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2246      	movs	r2, #70	@ 0x46
 8007c56:	5a9b      	ldrh	r3, [r3, r2]
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d018      	beq.n	8007c90 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	330c      	adds	r3, #12
 8007c64:	001a      	movs	r2, r3
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c6a:	7812      	ldrb	r2, [r2, #0]
 8007c6c:	b2d2      	uxtb	r2, r2
 8007c6e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c74:	1c5a      	adds	r2, r3, #1
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2246      	movs	r2, #70	@ 0x46
 8007c7e:	5a9b      	ldrh	r3, [r3, r2]
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	3b01      	subs	r3, #1
 8007c84:	b299      	uxth	r1, r3
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2246      	movs	r2, #70	@ 0x46
 8007c8a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007c90:	f7fd f9f8 	bl	8005084 <HAL_GetTick>
 8007c94:	0002      	movs	r2, r0
 8007c96:	69fb      	ldr	r3, [r7, #28]
 8007c98:	1ad3      	subs	r3, r2, r3
 8007c9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d802      	bhi.n	8007ca6 <HAL_SPI_TransmitReceive+0x342>
 8007ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	d102      	bne.n	8007cac <HAL_SPI_TransmitReceive+0x348>
 8007ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d108      	bne.n	8007cbe <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8007cac:	2323      	movs	r3, #35	@ 0x23
 8007cae:	18fb      	adds	r3, r7, r3
 8007cb0:	2203      	movs	r2, #3
 8007cb2:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	225d      	movs	r2, #93	@ 0x5d
 8007cb8:	2101      	movs	r1, #1
 8007cba:	5499      	strb	r1, [r3, r2]
        goto error;
 8007cbc:	e026      	b.n	8007d0c <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d199      	bne.n	8007bfc <HAL_SPI_TransmitReceive+0x298>
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2246      	movs	r2, #70	@ 0x46
 8007ccc:	5a9b      	ldrh	r3, [r3, r2]
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d193      	bne.n	8007bfc <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007cd4:	69fa      	ldr	r2, [r7, #28]
 8007cd6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	0018      	movs	r0, r3
 8007cdc:	f000 f960 	bl	8007fa0 <SPI_EndRxTxTransaction>
 8007ce0:	1e03      	subs	r3, r0, #0
 8007ce2:	d006      	beq.n	8007cf2 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8007ce4:	2323      	movs	r3, #35	@ 0x23
 8007ce6:	18fb      	adds	r3, r7, r3
 8007ce8:	2201      	movs	r2, #1
 8007cea:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2220      	movs	r2, #32
 8007cf0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d004      	beq.n	8007d04 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8007cfa:	2323      	movs	r3, #35	@ 0x23
 8007cfc:	18fb      	adds	r3, r7, r3
 8007cfe:	2201      	movs	r2, #1
 8007d00:	701a      	strb	r2, [r3, #0]
 8007d02:	e003      	b.n	8007d0c <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	225d      	movs	r2, #93	@ 0x5d
 8007d08:	2101      	movs	r1, #1
 8007d0a:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	225c      	movs	r2, #92	@ 0x5c
 8007d10:	2100      	movs	r1, #0
 8007d12:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007d14:	2323      	movs	r3, #35	@ 0x23
 8007d16:	18fb      	adds	r3, r7, r3
 8007d18:	781b      	ldrb	r3, [r3, #0]
}
 8007d1a:	0018      	movs	r0, r3
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	b00a      	add	sp, #40	@ 0x28
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	46c0      	nop			@ (mov r8, r8)
 8007d24:	ffffefff 	.word	0xffffefff

08007d28 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	225d      	movs	r2, #93	@ 0x5d
 8007d34:	5c9b      	ldrb	r3, [r3, r2]
 8007d36:	b2db      	uxtb	r3, r3
}
 8007d38:	0018      	movs	r0, r3
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	b002      	add	sp, #8
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b088      	sub	sp, #32
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	603b      	str	r3, [r7, #0]
 8007d4c:	1dfb      	adds	r3, r7, #7
 8007d4e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007d50:	f7fd f998 	bl	8005084 <HAL_GetTick>
 8007d54:	0002      	movs	r2, r0
 8007d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d58:	1a9b      	subs	r3, r3, r2
 8007d5a:	683a      	ldr	r2, [r7, #0]
 8007d5c:	18d3      	adds	r3, r2, r3
 8007d5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007d60:	f7fd f990 	bl	8005084 <HAL_GetTick>
 8007d64:	0003      	movs	r3, r0
 8007d66:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007d68:	4b3a      	ldr	r3, [pc, #232]	@ (8007e54 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	015b      	lsls	r3, r3, #5
 8007d6e:	0d1b      	lsrs	r3, r3, #20
 8007d70:	69fa      	ldr	r2, [r7, #28]
 8007d72:	4353      	muls	r3, r2
 8007d74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d76:	e058      	b.n	8007e2a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	d055      	beq.n	8007e2a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007d7e:	f7fd f981 	bl	8005084 <HAL_GetTick>
 8007d82:	0002      	movs	r2, r0
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	1ad3      	subs	r3, r2, r3
 8007d88:	69fa      	ldr	r2, [r7, #28]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d902      	bls.n	8007d94 <SPI_WaitFlagStateUntilTimeout+0x54>
 8007d8e:	69fb      	ldr	r3, [r7, #28]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d142      	bne.n	8007e1a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	685a      	ldr	r2, [r3, #4]
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	21e0      	movs	r1, #224	@ 0xe0
 8007da0:	438a      	bics	r2, r1
 8007da2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	685a      	ldr	r2, [r3, #4]
 8007da8:	2382      	movs	r3, #130	@ 0x82
 8007daa:	005b      	lsls	r3, r3, #1
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d113      	bne.n	8007dd8 <SPI_WaitFlagStateUntilTimeout+0x98>
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	689a      	ldr	r2, [r3, #8]
 8007db4:	2380      	movs	r3, #128	@ 0x80
 8007db6:	021b      	lsls	r3, r3, #8
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d005      	beq.n	8007dc8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	689a      	ldr	r2, [r3, #8]
 8007dc0:	2380      	movs	r3, #128	@ 0x80
 8007dc2:	00db      	lsls	r3, r3, #3
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d107      	bne.n	8007dd8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	2140      	movs	r1, #64	@ 0x40
 8007dd4:	438a      	bics	r2, r1
 8007dd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007ddc:	2380      	movs	r3, #128	@ 0x80
 8007dde:	019b      	lsls	r3, r3, #6
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d110      	bne.n	8007e06 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	681a      	ldr	r2, [r3, #0]
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	491a      	ldr	r1, [pc, #104]	@ (8007e58 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8007df0:	400a      	ands	r2, r1
 8007df2:	601a      	str	r2, [r3, #0]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	2180      	movs	r1, #128	@ 0x80
 8007e00:	0189      	lsls	r1, r1, #6
 8007e02:	430a      	orrs	r2, r1
 8007e04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	225d      	movs	r2, #93	@ 0x5d
 8007e0a:	2101      	movs	r1, #1
 8007e0c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	225c      	movs	r2, #92	@ 0x5c
 8007e12:	2100      	movs	r1, #0
 8007e14:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007e16:	2303      	movs	r3, #3
 8007e18:	e017      	b.n	8007e4a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d101      	bne.n	8007e24 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8007e20:	2300      	movs	r3, #0
 8007e22:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	3b01      	subs	r3, #1
 8007e28:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	68ba      	ldr	r2, [r7, #8]
 8007e32:	4013      	ands	r3, r2
 8007e34:	68ba      	ldr	r2, [r7, #8]
 8007e36:	1ad3      	subs	r3, r2, r3
 8007e38:	425a      	negs	r2, r3
 8007e3a:	4153      	adcs	r3, r2
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	001a      	movs	r2, r3
 8007e40:	1dfb      	adds	r3, r7, #7
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d197      	bne.n	8007d78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	0018      	movs	r0, r3
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	b008      	add	sp, #32
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	46c0      	nop			@ (mov r8, r8)
 8007e54:	2000001c 	.word	0x2000001c
 8007e58:	ffffdfff 	.word	0xffffdfff

08007e5c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b08a      	sub	sp, #40	@ 0x28
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	60f8      	str	r0, [r7, #12]
 8007e64:	60b9      	str	r1, [r7, #8]
 8007e66:	607a      	str	r2, [r7, #4]
 8007e68:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007e6a:	2317      	movs	r3, #23
 8007e6c:	18fb      	adds	r3, r7, r3
 8007e6e:	2200      	movs	r2, #0
 8007e70:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007e72:	f7fd f907 	bl	8005084 <HAL_GetTick>
 8007e76:	0002      	movs	r2, r0
 8007e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e7a:	1a9b      	subs	r3, r3, r2
 8007e7c:	683a      	ldr	r2, [r7, #0]
 8007e7e:	18d3      	adds	r3, r2, r3
 8007e80:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007e82:	f7fd f8ff 	bl	8005084 <HAL_GetTick>
 8007e86:	0003      	movs	r3, r0
 8007e88:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	330c      	adds	r3, #12
 8007e90:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007e92:	4b41      	ldr	r3, [pc, #260]	@ (8007f98 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	0013      	movs	r3, r2
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	189b      	adds	r3, r3, r2
 8007e9c:	00da      	lsls	r2, r3, #3
 8007e9e:	1ad3      	subs	r3, r2, r3
 8007ea0:	0d1b      	lsrs	r3, r3, #20
 8007ea2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ea4:	4353      	muls	r3, r2
 8007ea6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007ea8:	e068      	b.n	8007f7c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007eaa:	68ba      	ldr	r2, [r7, #8]
 8007eac:	23c0      	movs	r3, #192	@ 0xc0
 8007eae:	00db      	lsls	r3, r3, #3
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d10a      	bne.n	8007eca <SPI_WaitFifoStateUntilTimeout+0x6e>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d107      	bne.n	8007eca <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	b2da      	uxtb	r2, r3
 8007ec0:	2117      	movs	r1, #23
 8007ec2:	187b      	adds	r3, r7, r1
 8007ec4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007ec6:	187b      	adds	r3, r7, r1
 8007ec8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	3301      	adds	r3, #1
 8007ece:	d055      	beq.n	8007f7c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007ed0:	f7fd f8d8 	bl	8005084 <HAL_GetTick>
 8007ed4:	0002      	movs	r2, r0
 8007ed6:	6a3b      	ldr	r3, [r7, #32]
 8007ed8:	1ad3      	subs	r3, r2, r3
 8007eda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d902      	bls.n	8007ee6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8007ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d142      	bne.n	8007f6c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	685a      	ldr	r2, [r3, #4]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	21e0      	movs	r1, #224	@ 0xe0
 8007ef2:	438a      	bics	r2, r1
 8007ef4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	685a      	ldr	r2, [r3, #4]
 8007efa:	2382      	movs	r3, #130	@ 0x82
 8007efc:	005b      	lsls	r3, r3, #1
 8007efe:	429a      	cmp	r2, r3
 8007f00:	d113      	bne.n	8007f2a <SPI_WaitFifoStateUntilTimeout+0xce>
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	689a      	ldr	r2, [r3, #8]
 8007f06:	2380      	movs	r3, #128	@ 0x80
 8007f08:	021b      	lsls	r3, r3, #8
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d005      	beq.n	8007f1a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	689a      	ldr	r2, [r3, #8]
 8007f12:	2380      	movs	r3, #128	@ 0x80
 8007f14:	00db      	lsls	r3, r3, #3
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d107      	bne.n	8007f2a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2140      	movs	r1, #64	@ 0x40
 8007f26:	438a      	bics	r2, r1
 8007f28:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007f2e:	2380      	movs	r3, #128	@ 0x80
 8007f30:	019b      	lsls	r3, r3, #6
 8007f32:	429a      	cmp	r2, r3
 8007f34:	d110      	bne.n	8007f58 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4916      	ldr	r1, [pc, #88]	@ (8007f9c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8007f42:	400a      	ands	r2, r1
 8007f44:	601a      	str	r2, [r3, #0]
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	681a      	ldr	r2, [r3, #0]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2180      	movs	r1, #128	@ 0x80
 8007f52:	0189      	lsls	r1, r1, #6
 8007f54:	430a      	orrs	r2, r1
 8007f56:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	225d      	movs	r2, #93	@ 0x5d
 8007f5c:	2101      	movs	r1, #1
 8007f5e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	225c      	movs	r2, #92	@ 0x5c
 8007f64:	2100      	movs	r1, #0
 8007f66:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007f68:	2303      	movs	r3, #3
 8007f6a:	e010      	b.n	8007f8e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d101      	bne.n	8007f76 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8007f72:	2300      	movs	r3, #0
 8007f74:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	3b01      	subs	r3, #1
 8007f7a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	68ba      	ldr	r2, [r7, #8]
 8007f84:	4013      	ands	r3, r2
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d18e      	bne.n	8007eaa <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8007f8c:	2300      	movs	r3, #0
}
 8007f8e:	0018      	movs	r0, r3
 8007f90:	46bd      	mov	sp, r7
 8007f92:	b00a      	add	sp, #40	@ 0x28
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	46c0      	nop			@ (mov r8, r8)
 8007f98:	2000001c 	.word	0x2000001c
 8007f9c:	ffffdfff 	.word	0xffffdfff

08007fa0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b086      	sub	sp, #24
 8007fa4:	af02      	add	r7, sp, #8
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	60b9      	str	r1, [r7, #8]
 8007faa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007fac:	68ba      	ldr	r2, [r7, #8]
 8007fae:	23c0      	movs	r3, #192	@ 0xc0
 8007fb0:	0159      	lsls	r1, r3, #5
 8007fb2:	68f8      	ldr	r0, [r7, #12]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	9300      	str	r3, [sp, #0]
 8007fb8:	0013      	movs	r3, r2
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f7ff ff4e 	bl	8007e5c <SPI_WaitFifoStateUntilTimeout>
 8007fc0:	1e03      	subs	r3, r0, #0
 8007fc2:	d007      	beq.n	8007fd4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007fc8:	2220      	movs	r2, #32
 8007fca:	431a      	orrs	r2, r3
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007fd0:	2303      	movs	r3, #3
 8007fd2:	e027      	b.n	8008024 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007fd4:	68ba      	ldr	r2, [r7, #8]
 8007fd6:	68f8      	ldr	r0, [r7, #12]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	9300      	str	r3, [sp, #0]
 8007fdc:	0013      	movs	r3, r2
 8007fde:	2200      	movs	r2, #0
 8007fe0:	2180      	movs	r1, #128	@ 0x80
 8007fe2:	f7ff fead 	bl	8007d40 <SPI_WaitFlagStateUntilTimeout>
 8007fe6:	1e03      	subs	r3, r0, #0
 8007fe8:	d007      	beq.n	8007ffa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007fee:	2220      	movs	r2, #32
 8007ff0:	431a      	orrs	r2, r3
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007ff6:	2303      	movs	r3, #3
 8007ff8:	e014      	b.n	8008024 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007ffa:	68ba      	ldr	r2, [r7, #8]
 8007ffc:	23c0      	movs	r3, #192	@ 0xc0
 8007ffe:	00d9      	lsls	r1, r3, #3
 8008000:	68f8      	ldr	r0, [r7, #12]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	9300      	str	r3, [sp, #0]
 8008006:	0013      	movs	r3, r2
 8008008:	2200      	movs	r2, #0
 800800a:	f7ff ff27 	bl	8007e5c <SPI_WaitFifoStateUntilTimeout>
 800800e:	1e03      	subs	r3, r0, #0
 8008010:	d007      	beq.n	8008022 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008016:	2220      	movs	r2, #32
 8008018:	431a      	orrs	r2, r3
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800801e:	2303      	movs	r3, #3
 8008020:	e000      	b.n	8008024 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008022:	2300      	movs	r3, #0
}
 8008024:	0018      	movs	r0, r3
 8008026:	46bd      	mov	sp, r7
 8008028:	b004      	add	sp, #16
 800802a:	bd80      	pop	{r7, pc}

0800802c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d101      	bne.n	800803e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	e04a      	b.n	80080d4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	223d      	movs	r2, #61	@ 0x3d
 8008042:	5c9b      	ldrb	r3, [r3, r2]
 8008044:	b2db      	uxtb	r3, r3
 8008046:	2b00      	cmp	r3, #0
 8008048:	d107      	bne.n	800805a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	223c      	movs	r2, #60	@ 0x3c
 800804e:	2100      	movs	r1, #0
 8008050:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	0018      	movs	r0, r3
 8008056:	f7fc fab3 	bl	80045c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	223d      	movs	r2, #61	@ 0x3d
 800805e:	2102      	movs	r1, #2
 8008060:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	3304      	adds	r3, #4
 800806a:	0019      	movs	r1, r3
 800806c:	0010      	movs	r0, r2
 800806e:	f000 fb4f 	bl	8008710 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2248      	movs	r2, #72	@ 0x48
 8008076:	2101      	movs	r1, #1
 8008078:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	223e      	movs	r2, #62	@ 0x3e
 800807e:	2101      	movs	r1, #1
 8008080:	5499      	strb	r1, [r3, r2]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	223f      	movs	r2, #63	@ 0x3f
 8008086:	2101      	movs	r1, #1
 8008088:	5499      	strb	r1, [r3, r2]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2240      	movs	r2, #64	@ 0x40
 800808e:	2101      	movs	r1, #1
 8008090:	5499      	strb	r1, [r3, r2]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2241      	movs	r2, #65	@ 0x41
 8008096:	2101      	movs	r1, #1
 8008098:	5499      	strb	r1, [r3, r2]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2242      	movs	r2, #66	@ 0x42
 800809e:	2101      	movs	r1, #1
 80080a0:	5499      	strb	r1, [r3, r2]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2243      	movs	r2, #67	@ 0x43
 80080a6:	2101      	movs	r1, #1
 80080a8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2244      	movs	r2, #68	@ 0x44
 80080ae:	2101      	movs	r1, #1
 80080b0:	5499      	strb	r1, [r3, r2]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2245      	movs	r2, #69	@ 0x45
 80080b6:	2101      	movs	r1, #1
 80080b8:	5499      	strb	r1, [r3, r2]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2246      	movs	r2, #70	@ 0x46
 80080be:	2101      	movs	r1, #1
 80080c0:	5499      	strb	r1, [r3, r2]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2247      	movs	r2, #71	@ 0x47
 80080c6:	2101      	movs	r1, #1
 80080c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	223d      	movs	r2, #61	@ 0x3d
 80080ce:	2101      	movs	r1, #1
 80080d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80080d2:	2300      	movs	r3, #0
}
 80080d4:	0018      	movs	r0, r3
 80080d6:	46bd      	mov	sp, r7
 80080d8:	b002      	add	sp, #8
 80080da:	bd80      	pop	{r7, pc}

080080dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d101      	bne.n	80080ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80080ea:	2301      	movs	r3, #1
 80080ec:	e04a      	b.n	8008184 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	223d      	movs	r2, #61	@ 0x3d
 80080f2:	5c9b      	ldrb	r3, [r3, r2]
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d107      	bne.n	800810a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	223c      	movs	r2, #60	@ 0x3c
 80080fe:	2100      	movs	r1, #0
 8008100:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	0018      	movs	r0, r3
 8008106:	f000 f841 	bl	800818c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	223d      	movs	r2, #61	@ 0x3d
 800810e:	2102      	movs	r1, #2
 8008110:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	3304      	adds	r3, #4
 800811a:	0019      	movs	r1, r3
 800811c:	0010      	movs	r0, r2
 800811e:	f000 faf7 	bl	8008710 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2248      	movs	r2, #72	@ 0x48
 8008126:	2101      	movs	r1, #1
 8008128:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	223e      	movs	r2, #62	@ 0x3e
 800812e:	2101      	movs	r1, #1
 8008130:	5499      	strb	r1, [r3, r2]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	223f      	movs	r2, #63	@ 0x3f
 8008136:	2101      	movs	r1, #1
 8008138:	5499      	strb	r1, [r3, r2]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2240      	movs	r2, #64	@ 0x40
 800813e:	2101      	movs	r1, #1
 8008140:	5499      	strb	r1, [r3, r2]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2241      	movs	r2, #65	@ 0x41
 8008146:	2101      	movs	r1, #1
 8008148:	5499      	strb	r1, [r3, r2]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2242      	movs	r2, #66	@ 0x42
 800814e:	2101      	movs	r1, #1
 8008150:	5499      	strb	r1, [r3, r2]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2243      	movs	r2, #67	@ 0x43
 8008156:	2101      	movs	r1, #1
 8008158:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2244      	movs	r2, #68	@ 0x44
 800815e:	2101      	movs	r1, #1
 8008160:	5499      	strb	r1, [r3, r2]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2245      	movs	r2, #69	@ 0x45
 8008166:	2101      	movs	r1, #1
 8008168:	5499      	strb	r1, [r3, r2]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2246      	movs	r2, #70	@ 0x46
 800816e:	2101      	movs	r1, #1
 8008170:	5499      	strb	r1, [r3, r2]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2247      	movs	r2, #71	@ 0x47
 8008176:	2101      	movs	r1, #1
 8008178:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	223d      	movs	r2, #61	@ 0x3d
 800817e:	2101      	movs	r1, #1
 8008180:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008182:	2300      	movs	r3, #0
}
 8008184:	0018      	movs	r0, r3
 8008186:	46bd      	mov	sp, r7
 8008188:	b002      	add	sp, #8
 800818a:	bd80      	pop	{r7, pc}

0800818c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008194:	46c0      	nop			@ (mov r8, r8)
 8008196:	46bd      	mov	sp, r7
 8008198:	b002      	add	sp, #8
 800819a:	bd80      	pop	{r7, pc}

0800819c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d108      	bne.n	80081be <HAL_TIM_PWM_Start+0x22>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	223e      	movs	r2, #62	@ 0x3e
 80081b0:	5c9b      	ldrb	r3, [r3, r2]
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	3b01      	subs	r3, #1
 80081b6:	1e5a      	subs	r2, r3, #1
 80081b8:	4193      	sbcs	r3, r2
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	e037      	b.n	800822e <HAL_TIM_PWM_Start+0x92>
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	2b04      	cmp	r3, #4
 80081c2:	d108      	bne.n	80081d6 <HAL_TIM_PWM_Start+0x3a>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	223f      	movs	r2, #63	@ 0x3f
 80081c8:	5c9b      	ldrb	r3, [r3, r2]
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	3b01      	subs	r3, #1
 80081ce:	1e5a      	subs	r2, r3, #1
 80081d0:	4193      	sbcs	r3, r2
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	e02b      	b.n	800822e <HAL_TIM_PWM_Start+0x92>
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	2b08      	cmp	r3, #8
 80081da:	d108      	bne.n	80081ee <HAL_TIM_PWM_Start+0x52>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2240      	movs	r2, #64	@ 0x40
 80081e0:	5c9b      	ldrb	r3, [r3, r2]
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	3b01      	subs	r3, #1
 80081e6:	1e5a      	subs	r2, r3, #1
 80081e8:	4193      	sbcs	r3, r2
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	e01f      	b.n	800822e <HAL_TIM_PWM_Start+0x92>
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	2b0c      	cmp	r3, #12
 80081f2:	d108      	bne.n	8008206 <HAL_TIM_PWM_Start+0x6a>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2241      	movs	r2, #65	@ 0x41
 80081f8:	5c9b      	ldrb	r3, [r3, r2]
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	3b01      	subs	r3, #1
 80081fe:	1e5a      	subs	r2, r3, #1
 8008200:	4193      	sbcs	r3, r2
 8008202:	b2db      	uxtb	r3, r3
 8008204:	e013      	b.n	800822e <HAL_TIM_PWM_Start+0x92>
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	2b10      	cmp	r3, #16
 800820a:	d108      	bne.n	800821e <HAL_TIM_PWM_Start+0x82>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2242      	movs	r2, #66	@ 0x42
 8008210:	5c9b      	ldrb	r3, [r3, r2]
 8008212:	b2db      	uxtb	r3, r3
 8008214:	3b01      	subs	r3, #1
 8008216:	1e5a      	subs	r2, r3, #1
 8008218:	4193      	sbcs	r3, r2
 800821a:	b2db      	uxtb	r3, r3
 800821c:	e007      	b.n	800822e <HAL_TIM_PWM_Start+0x92>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2243      	movs	r2, #67	@ 0x43
 8008222:	5c9b      	ldrb	r3, [r3, r2]
 8008224:	b2db      	uxtb	r3, r3
 8008226:	3b01      	subs	r3, #1
 8008228:	1e5a      	subs	r2, r3, #1
 800822a:	4193      	sbcs	r3, r2
 800822c:	b2db      	uxtb	r3, r3
 800822e:	2b00      	cmp	r3, #0
 8008230:	d001      	beq.n	8008236 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8008232:	2301      	movs	r3, #1
 8008234:	e085      	b.n	8008342 <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d104      	bne.n	8008246 <HAL_TIM_PWM_Start+0xaa>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	223e      	movs	r2, #62	@ 0x3e
 8008240:	2102      	movs	r1, #2
 8008242:	5499      	strb	r1, [r3, r2]
 8008244:	e023      	b.n	800828e <HAL_TIM_PWM_Start+0xf2>
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	2b04      	cmp	r3, #4
 800824a:	d104      	bne.n	8008256 <HAL_TIM_PWM_Start+0xba>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	223f      	movs	r2, #63	@ 0x3f
 8008250:	2102      	movs	r1, #2
 8008252:	5499      	strb	r1, [r3, r2]
 8008254:	e01b      	b.n	800828e <HAL_TIM_PWM_Start+0xf2>
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	2b08      	cmp	r3, #8
 800825a:	d104      	bne.n	8008266 <HAL_TIM_PWM_Start+0xca>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2240      	movs	r2, #64	@ 0x40
 8008260:	2102      	movs	r1, #2
 8008262:	5499      	strb	r1, [r3, r2]
 8008264:	e013      	b.n	800828e <HAL_TIM_PWM_Start+0xf2>
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	2b0c      	cmp	r3, #12
 800826a:	d104      	bne.n	8008276 <HAL_TIM_PWM_Start+0xda>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2241      	movs	r2, #65	@ 0x41
 8008270:	2102      	movs	r1, #2
 8008272:	5499      	strb	r1, [r3, r2]
 8008274:	e00b      	b.n	800828e <HAL_TIM_PWM_Start+0xf2>
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	2b10      	cmp	r3, #16
 800827a:	d104      	bne.n	8008286 <HAL_TIM_PWM_Start+0xea>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2242      	movs	r2, #66	@ 0x42
 8008280:	2102      	movs	r1, #2
 8008282:	5499      	strb	r1, [r3, r2]
 8008284:	e003      	b.n	800828e <HAL_TIM_PWM_Start+0xf2>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2243      	movs	r2, #67	@ 0x43
 800828a:	2102      	movs	r1, #2
 800828c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	6839      	ldr	r1, [r7, #0]
 8008294:	2201      	movs	r2, #1
 8008296:	0018      	movs	r0, r3
 8008298:	f000 fe1e 	bl	8008ed8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a2a      	ldr	r2, [pc, #168]	@ (800834c <HAL_TIM_PWM_Start+0x1b0>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d00e      	beq.n	80082c4 <HAL_TIM_PWM_Start+0x128>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a29      	ldr	r2, [pc, #164]	@ (8008350 <HAL_TIM_PWM_Start+0x1b4>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d009      	beq.n	80082c4 <HAL_TIM_PWM_Start+0x128>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a27      	ldr	r2, [pc, #156]	@ (8008354 <HAL_TIM_PWM_Start+0x1b8>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d004      	beq.n	80082c4 <HAL_TIM_PWM_Start+0x128>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a26      	ldr	r2, [pc, #152]	@ (8008358 <HAL_TIM_PWM_Start+0x1bc>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d101      	bne.n	80082c8 <HAL_TIM_PWM_Start+0x12c>
 80082c4:	2301      	movs	r3, #1
 80082c6:	e000      	b.n	80082ca <HAL_TIM_PWM_Start+0x12e>
 80082c8:	2300      	movs	r3, #0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d008      	beq.n	80082e0 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	2180      	movs	r1, #128	@ 0x80
 80082da:	0209      	lsls	r1, r1, #8
 80082dc:	430a      	orrs	r2, r1
 80082de:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a19      	ldr	r2, [pc, #100]	@ (800834c <HAL_TIM_PWM_Start+0x1b0>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d009      	beq.n	80082fe <HAL_TIM_PWM_Start+0x162>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a1b      	ldr	r2, [pc, #108]	@ (800835c <HAL_TIM_PWM_Start+0x1c0>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d004      	beq.n	80082fe <HAL_TIM_PWM_Start+0x162>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a15      	ldr	r2, [pc, #84]	@ (8008350 <HAL_TIM_PWM_Start+0x1b4>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d116      	bne.n	800832c <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	4a16      	ldr	r2, [pc, #88]	@ (8008360 <HAL_TIM_PWM_Start+0x1c4>)
 8008306:	4013      	ands	r3, r2
 8008308:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2b06      	cmp	r3, #6
 800830e:	d016      	beq.n	800833e <HAL_TIM_PWM_Start+0x1a2>
 8008310:	68fa      	ldr	r2, [r7, #12]
 8008312:	2380      	movs	r3, #128	@ 0x80
 8008314:	025b      	lsls	r3, r3, #9
 8008316:	429a      	cmp	r2, r3
 8008318:	d011      	beq.n	800833e <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	2101      	movs	r1, #1
 8008326:	430a      	orrs	r2, r1
 8008328:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800832a:	e008      	b.n	800833e <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	2101      	movs	r1, #1
 8008338:	430a      	orrs	r2, r1
 800833a:	601a      	str	r2, [r3, #0]
 800833c:	e000      	b.n	8008340 <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800833e:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8008340:	2300      	movs	r3, #0
}
 8008342:	0018      	movs	r0, r3
 8008344:	46bd      	mov	sp, r7
 8008346:	b004      	add	sp, #16
 8008348:	bd80      	pop	{r7, pc}
 800834a:	46c0      	nop			@ (mov r8, r8)
 800834c:	40012c00 	.word	0x40012c00
 8008350:	40014000 	.word	0x40014000
 8008354:	40014400 	.word	0x40014400
 8008358:	40014800 	.word	0x40014800
 800835c:	40000400 	.word	0x40000400
 8008360:	00010007 	.word	0x00010007

08008364 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b086      	sub	sp, #24
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008370:	2317      	movs	r3, #23
 8008372:	18fb      	adds	r3, r7, r3
 8008374:	2200      	movs	r2, #0
 8008376:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	223c      	movs	r2, #60	@ 0x3c
 800837c:	5c9b      	ldrb	r3, [r3, r2]
 800837e:	2b01      	cmp	r3, #1
 8008380:	d101      	bne.n	8008386 <HAL_TIM_PWM_ConfigChannel+0x22>
 8008382:	2302      	movs	r3, #2
 8008384:	e0e5      	b.n	8008552 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	223c      	movs	r2, #60	@ 0x3c
 800838a:	2101      	movs	r1, #1
 800838c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2b14      	cmp	r3, #20
 8008392:	d900      	bls.n	8008396 <HAL_TIM_PWM_ConfigChannel+0x32>
 8008394:	e0d1      	b.n	800853a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	009a      	lsls	r2, r3, #2
 800839a:	4b70      	ldr	r3, [pc, #448]	@ (800855c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800839c:	18d3      	adds	r3, r2, r3
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	68ba      	ldr	r2, [r7, #8]
 80083a8:	0011      	movs	r1, r2
 80083aa:	0018      	movs	r0, r3
 80083ac:	f000 fa34 	bl	8008818 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	699a      	ldr	r2, [r3, #24]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	2108      	movs	r1, #8
 80083bc:	430a      	orrs	r2, r1
 80083be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	699a      	ldr	r2, [r3, #24]
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	2104      	movs	r1, #4
 80083cc:	438a      	bics	r2, r1
 80083ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	6999      	ldr	r1, [r3, #24]
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	691a      	ldr	r2, [r3, #16]
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	430a      	orrs	r2, r1
 80083e0:	619a      	str	r2, [r3, #24]
      break;
 80083e2:	e0af      	b.n	8008544 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	68ba      	ldr	r2, [r7, #8]
 80083ea:	0011      	movs	r1, r2
 80083ec:	0018      	movs	r0, r3
 80083ee:	f000 fa9d 	bl	800892c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	699a      	ldr	r2, [r3, #24]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	2180      	movs	r1, #128	@ 0x80
 80083fe:	0109      	lsls	r1, r1, #4
 8008400:	430a      	orrs	r2, r1
 8008402:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	699a      	ldr	r2, [r3, #24]
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4954      	ldr	r1, [pc, #336]	@ (8008560 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8008410:	400a      	ands	r2, r1
 8008412:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	6999      	ldr	r1, [r3, #24]
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	691b      	ldr	r3, [r3, #16]
 800841e:	021a      	lsls	r2, r3, #8
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	430a      	orrs	r2, r1
 8008426:	619a      	str	r2, [r3, #24]
      break;
 8008428:	e08c      	b.n	8008544 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	68ba      	ldr	r2, [r7, #8]
 8008430:	0011      	movs	r1, r2
 8008432:	0018      	movs	r0, r3
 8008434:	f000 fafe 	bl	8008a34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	69da      	ldr	r2, [r3, #28]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	2108      	movs	r1, #8
 8008444:	430a      	orrs	r2, r1
 8008446:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	69da      	ldr	r2, [r3, #28]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	2104      	movs	r1, #4
 8008454:	438a      	bics	r2, r1
 8008456:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	69d9      	ldr	r1, [r3, #28]
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	691a      	ldr	r2, [r3, #16]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	430a      	orrs	r2, r1
 8008468:	61da      	str	r2, [r3, #28]
      break;
 800846a:	e06b      	b.n	8008544 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	68ba      	ldr	r2, [r7, #8]
 8008472:	0011      	movs	r1, r2
 8008474:	0018      	movs	r0, r3
 8008476:	f000 fb65 	bl	8008b44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	69da      	ldr	r2, [r3, #28]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2180      	movs	r1, #128	@ 0x80
 8008486:	0109      	lsls	r1, r1, #4
 8008488:	430a      	orrs	r2, r1
 800848a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	69da      	ldr	r2, [r3, #28]
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4932      	ldr	r1, [pc, #200]	@ (8008560 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8008498:	400a      	ands	r2, r1
 800849a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	69d9      	ldr	r1, [r3, #28]
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	691b      	ldr	r3, [r3, #16]
 80084a6:	021a      	lsls	r2, r3, #8
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	430a      	orrs	r2, r1
 80084ae:	61da      	str	r2, [r3, #28]
      break;
 80084b0:	e048      	b.n	8008544 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	68ba      	ldr	r2, [r7, #8]
 80084b8:	0011      	movs	r1, r2
 80084ba:	0018      	movs	r0, r3
 80084bc:	f000 fbac 	bl	8008c18 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	2108      	movs	r1, #8
 80084cc:	430a      	orrs	r2, r1
 80084ce:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	2104      	movs	r1, #4
 80084dc:	438a      	bics	r2, r1
 80084de:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	691a      	ldr	r2, [r3, #16]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	430a      	orrs	r2, r1
 80084f0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80084f2:	e027      	b.n	8008544 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	68ba      	ldr	r2, [r7, #8]
 80084fa:	0011      	movs	r1, r2
 80084fc:	0018      	movs	r0, r3
 80084fe:	f000 fbeb 	bl	8008cd8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2180      	movs	r1, #128	@ 0x80
 800850e:	0109      	lsls	r1, r1, #4
 8008510:	430a      	orrs	r2, r1
 8008512:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4910      	ldr	r1, [pc, #64]	@ (8008560 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8008520:	400a      	ands	r2, r1
 8008522:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	691b      	ldr	r3, [r3, #16]
 800852e:	021a      	lsls	r2, r3, #8
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	430a      	orrs	r2, r1
 8008536:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008538:	e004      	b.n	8008544 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800853a:	2317      	movs	r3, #23
 800853c:	18fb      	adds	r3, r7, r3
 800853e:	2201      	movs	r2, #1
 8008540:	701a      	strb	r2, [r3, #0]
      break;
 8008542:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	223c      	movs	r2, #60	@ 0x3c
 8008548:	2100      	movs	r1, #0
 800854a:	5499      	strb	r1, [r3, r2]

  return status;
 800854c:	2317      	movs	r3, #23
 800854e:	18fb      	adds	r3, r7, r3
 8008550:	781b      	ldrb	r3, [r3, #0]
}
 8008552:	0018      	movs	r0, r3
 8008554:	46bd      	mov	sp, r7
 8008556:	b006      	add	sp, #24
 8008558:	bd80      	pop	{r7, pc}
 800855a:	46c0      	nop			@ (mov r8, r8)
 800855c:	080104e4 	.word	0x080104e4
 8008560:	fffffbff 	.word	0xfffffbff

08008564 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b084      	sub	sp, #16
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800856e:	230f      	movs	r3, #15
 8008570:	18fb      	adds	r3, r7, r3
 8008572:	2200      	movs	r2, #0
 8008574:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	223c      	movs	r2, #60	@ 0x3c
 800857a:	5c9b      	ldrb	r3, [r3, r2]
 800857c:	2b01      	cmp	r3, #1
 800857e:	d101      	bne.n	8008584 <HAL_TIM_ConfigClockSource+0x20>
 8008580:	2302      	movs	r3, #2
 8008582:	e0bc      	b.n	80086fe <HAL_TIM_ConfigClockSource+0x19a>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	223c      	movs	r2, #60	@ 0x3c
 8008588:	2101      	movs	r1, #1
 800858a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	223d      	movs	r2, #61	@ 0x3d
 8008590:	2102      	movs	r1, #2
 8008592:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	4a5a      	ldr	r2, [pc, #360]	@ (8008708 <HAL_TIM_ConfigClockSource+0x1a4>)
 80085a0:	4013      	ands	r3, r2
 80085a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	4a59      	ldr	r2, [pc, #356]	@ (800870c <HAL_TIM_ConfigClockSource+0x1a8>)
 80085a8:	4013      	ands	r3, r2
 80085aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	68ba      	ldr	r2, [r7, #8]
 80085b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	2280      	movs	r2, #128	@ 0x80
 80085ba:	0192      	lsls	r2, r2, #6
 80085bc:	4293      	cmp	r3, r2
 80085be:	d040      	beq.n	8008642 <HAL_TIM_ConfigClockSource+0xde>
 80085c0:	2280      	movs	r2, #128	@ 0x80
 80085c2:	0192      	lsls	r2, r2, #6
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d900      	bls.n	80085ca <HAL_TIM_ConfigClockSource+0x66>
 80085c8:	e088      	b.n	80086dc <HAL_TIM_ConfigClockSource+0x178>
 80085ca:	2280      	movs	r2, #128	@ 0x80
 80085cc:	0152      	lsls	r2, r2, #5
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d100      	bne.n	80085d4 <HAL_TIM_ConfigClockSource+0x70>
 80085d2:	e088      	b.n	80086e6 <HAL_TIM_ConfigClockSource+0x182>
 80085d4:	2280      	movs	r2, #128	@ 0x80
 80085d6:	0152      	lsls	r2, r2, #5
 80085d8:	4293      	cmp	r3, r2
 80085da:	d900      	bls.n	80085de <HAL_TIM_ConfigClockSource+0x7a>
 80085dc:	e07e      	b.n	80086dc <HAL_TIM_ConfigClockSource+0x178>
 80085de:	2b70      	cmp	r3, #112	@ 0x70
 80085e0:	d018      	beq.n	8008614 <HAL_TIM_ConfigClockSource+0xb0>
 80085e2:	d900      	bls.n	80085e6 <HAL_TIM_ConfigClockSource+0x82>
 80085e4:	e07a      	b.n	80086dc <HAL_TIM_ConfigClockSource+0x178>
 80085e6:	2b60      	cmp	r3, #96	@ 0x60
 80085e8:	d04f      	beq.n	800868a <HAL_TIM_ConfigClockSource+0x126>
 80085ea:	d900      	bls.n	80085ee <HAL_TIM_ConfigClockSource+0x8a>
 80085ec:	e076      	b.n	80086dc <HAL_TIM_ConfigClockSource+0x178>
 80085ee:	2b50      	cmp	r3, #80	@ 0x50
 80085f0:	d03b      	beq.n	800866a <HAL_TIM_ConfigClockSource+0x106>
 80085f2:	d900      	bls.n	80085f6 <HAL_TIM_ConfigClockSource+0x92>
 80085f4:	e072      	b.n	80086dc <HAL_TIM_ConfigClockSource+0x178>
 80085f6:	2b40      	cmp	r3, #64	@ 0x40
 80085f8:	d057      	beq.n	80086aa <HAL_TIM_ConfigClockSource+0x146>
 80085fa:	d900      	bls.n	80085fe <HAL_TIM_ConfigClockSource+0x9a>
 80085fc:	e06e      	b.n	80086dc <HAL_TIM_ConfigClockSource+0x178>
 80085fe:	2b30      	cmp	r3, #48	@ 0x30
 8008600:	d063      	beq.n	80086ca <HAL_TIM_ConfigClockSource+0x166>
 8008602:	d86b      	bhi.n	80086dc <HAL_TIM_ConfigClockSource+0x178>
 8008604:	2b20      	cmp	r3, #32
 8008606:	d060      	beq.n	80086ca <HAL_TIM_ConfigClockSource+0x166>
 8008608:	d868      	bhi.n	80086dc <HAL_TIM_ConfigClockSource+0x178>
 800860a:	2b00      	cmp	r3, #0
 800860c:	d05d      	beq.n	80086ca <HAL_TIM_ConfigClockSource+0x166>
 800860e:	2b10      	cmp	r3, #16
 8008610:	d05b      	beq.n	80086ca <HAL_TIM_ConfigClockSource+0x166>
 8008612:	e063      	b.n	80086dc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008624:	f000 fc38 	bl	8008e98 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	689b      	ldr	r3, [r3, #8]
 800862e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	2277      	movs	r2, #119	@ 0x77
 8008634:	4313      	orrs	r3, r2
 8008636:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	68ba      	ldr	r2, [r7, #8]
 800863e:	609a      	str	r2, [r3, #8]
      break;
 8008640:	e052      	b.n	80086e8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008652:	f000 fc21 	bl	8008e98 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	689a      	ldr	r2, [r3, #8]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2180      	movs	r1, #128	@ 0x80
 8008662:	01c9      	lsls	r1, r1, #7
 8008664:	430a      	orrs	r2, r1
 8008666:	609a      	str	r2, [r3, #8]
      break;
 8008668:	e03e      	b.n	80086e8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008676:	001a      	movs	r2, r3
 8008678:	f000 fb92 	bl	8008da0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	2150      	movs	r1, #80	@ 0x50
 8008682:	0018      	movs	r0, r3
 8008684:	f000 fbec 	bl	8008e60 <TIM_ITRx_SetConfig>
      break;
 8008688:	e02e      	b.n	80086e8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008696:	001a      	movs	r2, r3
 8008698:	f000 fbb0 	bl	8008dfc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2160      	movs	r1, #96	@ 0x60
 80086a2:	0018      	movs	r0, r3
 80086a4:	f000 fbdc 	bl	8008e60 <TIM_ITRx_SetConfig>
      break;
 80086a8:	e01e      	b.n	80086e8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80086b6:	001a      	movs	r2, r3
 80086b8:	f000 fb72 	bl	8008da0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2140      	movs	r1, #64	@ 0x40
 80086c2:	0018      	movs	r0, r3
 80086c4:	f000 fbcc 	bl	8008e60 <TIM_ITRx_SetConfig>
      break;
 80086c8:	e00e      	b.n	80086e8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681a      	ldr	r2, [r3, #0]
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	0019      	movs	r1, r3
 80086d4:	0010      	movs	r0, r2
 80086d6:	f000 fbc3 	bl	8008e60 <TIM_ITRx_SetConfig>
      break;
 80086da:	e005      	b.n	80086e8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80086dc:	230f      	movs	r3, #15
 80086de:	18fb      	adds	r3, r7, r3
 80086e0:	2201      	movs	r2, #1
 80086e2:	701a      	strb	r2, [r3, #0]
      break;
 80086e4:	e000      	b.n	80086e8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80086e6:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	223d      	movs	r2, #61	@ 0x3d
 80086ec:	2101      	movs	r1, #1
 80086ee:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	223c      	movs	r2, #60	@ 0x3c
 80086f4:	2100      	movs	r1, #0
 80086f6:	5499      	strb	r1, [r3, r2]

  return status;
 80086f8:	230f      	movs	r3, #15
 80086fa:	18fb      	adds	r3, r7, r3
 80086fc:	781b      	ldrb	r3, [r3, #0]
}
 80086fe:	0018      	movs	r0, r3
 8008700:	46bd      	mov	sp, r7
 8008702:	b004      	add	sp, #16
 8008704:	bd80      	pop	{r7, pc}
 8008706:	46c0      	nop			@ (mov r8, r8)
 8008708:	ffceff88 	.word	0xffceff88
 800870c:	ffff00ff 	.word	0xffff00ff

08008710 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b084      	sub	sp, #16
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	4a36      	ldr	r2, [pc, #216]	@ (80087fc <TIM_Base_SetConfig+0xec>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d003      	beq.n	8008730 <TIM_Base_SetConfig+0x20>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	4a35      	ldr	r2, [pc, #212]	@ (8008800 <TIM_Base_SetConfig+0xf0>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d108      	bne.n	8008742 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2270      	movs	r2, #112	@ 0x70
 8008734:	4393      	bics	r3, r2
 8008736:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	68fa      	ldr	r2, [r7, #12]
 800873e:	4313      	orrs	r3, r2
 8008740:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	4a2d      	ldr	r2, [pc, #180]	@ (80087fc <TIM_Base_SetConfig+0xec>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d013      	beq.n	8008772 <TIM_Base_SetConfig+0x62>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	4a2c      	ldr	r2, [pc, #176]	@ (8008800 <TIM_Base_SetConfig+0xf0>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d00f      	beq.n	8008772 <TIM_Base_SetConfig+0x62>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	4a2b      	ldr	r2, [pc, #172]	@ (8008804 <TIM_Base_SetConfig+0xf4>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d00b      	beq.n	8008772 <TIM_Base_SetConfig+0x62>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	4a2a      	ldr	r2, [pc, #168]	@ (8008808 <TIM_Base_SetConfig+0xf8>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d007      	beq.n	8008772 <TIM_Base_SetConfig+0x62>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	4a29      	ldr	r2, [pc, #164]	@ (800880c <TIM_Base_SetConfig+0xfc>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d003      	beq.n	8008772 <TIM_Base_SetConfig+0x62>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4a28      	ldr	r2, [pc, #160]	@ (8008810 <TIM_Base_SetConfig+0x100>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d108      	bne.n	8008784 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	4a27      	ldr	r2, [pc, #156]	@ (8008814 <TIM_Base_SetConfig+0x104>)
 8008776:	4013      	ands	r3, r2
 8008778:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	68fa      	ldr	r2, [r7, #12]
 8008780:	4313      	orrs	r3, r2
 8008782:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2280      	movs	r2, #128	@ 0x80
 8008788:	4393      	bics	r3, r2
 800878a:	001a      	movs	r2, r3
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	695b      	ldr	r3, [r3, #20]
 8008790:	4313      	orrs	r3, r2
 8008792:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	68fa      	ldr	r2, [r7, #12]
 8008798:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	689a      	ldr	r2, [r3, #8]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	681a      	ldr	r2, [r3, #0]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	4a13      	ldr	r2, [pc, #76]	@ (80087fc <TIM_Base_SetConfig+0xec>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d00b      	beq.n	80087ca <TIM_Base_SetConfig+0xba>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4a14      	ldr	r2, [pc, #80]	@ (8008808 <TIM_Base_SetConfig+0xf8>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d007      	beq.n	80087ca <TIM_Base_SetConfig+0xba>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	4a13      	ldr	r2, [pc, #76]	@ (800880c <TIM_Base_SetConfig+0xfc>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d003      	beq.n	80087ca <TIM_Base_SetConfig+0xba>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	4a12      	ldr	r2, [pc, #72]	@ (8008810 <TIM_Base_SetConfig+0x100>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d103      	bne.n	80087d2 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	691a      	ldr	r2, [r3, #16]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2201      	movs	r2, #1
 80087d6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	691b      	ldr	r3, [r3, #16]
 80087dc:	2201      	movs	r2, #1
 80087de:	4013      	ands	r3, r2
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d106      	bne.n	80087f2 <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	691b      	ldr	r3, [r3, #16]
 80087e8:	2201      	movs	r2, #1
 80087ea:	4393      	bics	r3, r2
 80087ec:	001a      	movs	r2, r3
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	611a      	str	r2, [r3, #16]
  }
}
 80087f2:	46c0      	nop			@ (mov r8, r8)
 80087f4:	46bd      	mov	sp, r7
 80087f6:	b004      	add	sp, #16
 80087f8:	bd80      	pop	{r7, pc}
 80087fa:	46c0      	nop			@ (mov r8, r8)
 80087fc:	40012c00 	.word	0x40012c00
 8008800:	40000400 	.word	0x40000400
 8008804:	40002000 	.word	0x40002000
 8008808:	40014000 	.word	0x40014000
 800880c:	40014400 	.word	0x40014400
 8008810:	40014800 	.word	0x40014800
 8008814:	fffffcff 	.word	0xfffffcff

08008818 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b086      	sub	sp, #24
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6a1b      	ldr	r3, [r3, #32]
 8008826:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6a1b      	ldr	r3, [r3, #32]
 800882c:	2201      	movs	r2, #1
 800882e:	4393      	bics	r3, r2
 8008830:	001a      	movs	r2, r3
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	699b      	ldr	r3, [r3, #24]
 8008840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	4a32      	ldr	r2, [pc, #200]	@ (8008910 <TIM_OC1_SetConfig+0xf8>)
 8008846:	4013      	ands	r3, r2
 8008848:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2203      	movs	r2, #3
 800884e:	4393      	bics	r3, r2
 8008850:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	68fa      	ldr	r2, [r7, #12]
 8008858:	4313      	orrs	r3, r2
 800885a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	2202      	movs	r2, #2
 8008860:	4393      	bics	r3, r2
 8008862:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	689b      	ldr	r3, [r3, #8]
 8008868:	697a      	ldr	r2, [r7, #20]
 800886a:	4313      	orrs	r3, r2
 800886c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	4a28      	ldr	r2, [pc, #160]	@ (8008914 <TIM_OC1_SetConfig+0xfc>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d00b      	beq.n	800888e <TIM_OC1_SetConfig+0x76>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	4a27      	ldr	r2, [pc, #156]	@ (8008918 <TIM_OC1_SetConfig+0x100>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d007      	beq.n	800888e <TIM_OC1_SetConfig+0x76>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	4a26      	ldr	r2, [pc, #152]	@ (800891c <TIM_OC1_SetConfig+0x104>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d003      	beq.n	800888e <TIM_OC1_SetConfig+0x76>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	4a25      	ldr	r2, [pc, #148]	@ (8008920 <TIM_OC1_SetConfig+0x108>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d10c      	bne.n	80088a8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	2208      	movs	r2, #8
 8008892:	4393      	bics	r3, r2
 8008894:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	68db      	ldr	r3, [r3, #12]
 800889a:	697a      	ldr	r2, [r7, #20]
 800889c:	4313      	orrs	r3, r2
 800889e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	2204      	movs	r2, #4
 80088a4:	4393      	bics	r3, r2
 80088a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	4a1a      	ldr	r2, [pc, #104]	@ (8008914 <TIM_OC1_SetConfig+0xfc>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d00b      	beq.n	80088c8 <TIM_OC1_SetConfig+0xb0>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	4a19      	ldr	r2, [pc, #100]	@ (8008918 <TIM_OC1_SetConfig+0x100>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d007      	beq.n	80088c8 <TIM_OC1_SetConfig+0xb0>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	4a18      	ldr	r2, [pc, #96]	@ (800891c <TIM_OC1_SetConfig+0x104>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d003      	beq.n	80088c8 <TIM_OC1_SetConfig+0xb0>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	4a17      	ldr	r2, [pc, #92]	@ (8008920 <TIM_OC1_SetConfig+0x108>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d111      	bne.n	80088ec <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	4a16      	ldr	r2, [pc, #88]	@ (8008924 <TIM_OC1_SetConfig+0x10c>)
 80088cc:	4013      	ands	r3, r2
 80088ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	4a15      	ldr	r2, [pc, #84]	@ (8008928 <TIM_OC1_SetConfig+0x110>)
 80088d4:	4013      	ands	r3, r2
 80088d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	695b      	ldr	r3, [r3, #20]
 80088dc:	693a      	ldr	r2, [r7, #16]
 80088de:	4313      	orrs	r3, r2
 80088e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	699b      	ldr	r3, [r3, #24]
 80088e6:	693a      	ldr	r2, [r7, #16]
 80088e8:	4313      	orrs	r3, r2
 80088ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	693a      	ldr	r2, [r7, #16]
 80088f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	68fa      	ldr	r2, [r7, #12]
 80088f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	685a      	ldr	r2, [r3, #4]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	697a      	ldr	r2, [r7, #20]
 8008904:	621a      	str	r2, [r3, #32]
}
 8008906:	46c0      	nop			@ (mov r8, r8)
 8008908:	46bd      	mov	sp, r7
 800890a:	b006      	add	sp, #24
 800890c:	bd80      	pop	{r7, pc}
 800890e:	46c0      	nop			@ (mov r8, r8)
 8008910:	fffeff8f 	.word	0xfffeff8f
 8008914:	40012c00 	.word	0x40012c00
 8008918:	40014000 	.word	0x40014000
 800891c:	40014400 	.word	0x40014400
 8008920:	40014800 	.word	0x40014800
 8008924:	fffffeff 	.word	0xfffffeff
 8008928:	fffffdff 	.word	0xfffffdff

0800892c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b086      	sub	sp, #24
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6a1b      	ldr	r3, [r3, #32]
 800893a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6a1b      	ldr	r3, [r3, #32]
 8008940:	2210      	movs	r2, #16
 8008942:	4393      	bics	r3, r2
 8008944:	001a      	movs	r2, r3
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	699b      	ldr	r3, [r3, #24]
 8008954:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	4a2e      	ldr	r2, [pc, #184]	@ (8008a14 <TIM_OC2_SetConfig+0xe8>)
 800895a:	4013      	ands	r3, r2
 800895c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	4a2d      	ldr	r2, [pc, #180]	@ (8008a18 <TIM_OC2_SetConfig+0xec>)
 8008962:	4013      	ands	r3, r2
 8008964:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	021b      	lsls	r3, r3, #8
 800896c:	68fa      	ldr	r2, [r7, #12]
 800896e:	4313      	orrs	r3, r2
 8008970:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	2220      	movs	r2, #32
 8008976:	4393      	bics	r3, r2
 8008978:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	011b      	lsls	r3, r3, #4
 8008980:	697a      	ldr	r2, [r7, #20]
 8008982:	4313      	orrs	r3, r2
 8008984:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	4a24      	ldr	r2, [pc, #144]	@ (8008a1c <TIM_OC2_SetConfig+0xf0>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d10d      	bne.n	80089aa <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	2280      	movs	r2, #128	@ 0x80
 8008992:	4393      	bics	r3, r2
 8008994:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	68db      	ldr	r3, [r3, #12]
 800899a:	011b      	lsls	r3, r3, #4
 800899c:	697a      	ldr	r2, [r7, #20]
 800899e:	4313      	orrs	r3, r2
 80089a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	2240      	movs	r2, #64	@ 0x40
 80089a6:	4393      	bics	r3, r2
 80089a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	4a1b      	ldr	r2, [pc, #108]	@ (8008a1c <TIM_OC2_SetConfig+0xf0>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d00b      	beq.n	80089ca <TIM_OC2_SetConfig+0x9e>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	4a1a      	ldr	r2, [pc, #104]	@ (8008a20 <TIM_OC2_SetConfig+0xf4>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d007      	beq.n	80089ca <TIM_OC2_SetConfig+0x9e>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	4a19      	ldr	r2, [pc, #100]	@ (8008a24 <TIM_OC2_SetConfig+0xf8>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d003      	beq.n	80089ca <TIM_OC2_SetConfig+0x9e>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	4a18      	ldr	r2, [pc, #96]	@ (8008a28 <TIM_OC2_SetConfig+0xfc>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d113      	bne.n	80089f2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	4a17      	ldr	r2, [pc, #92]	@ (8008a2c <TIM_OC2_SetConfig+0x100>)
 80089ce:	4013      	ands	r3, r2
 80089d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	4a16      	ldr	r2, [pc, #88]	@ (8008a30 <TIM_OC2_SetConfig+0x104>)
 80089d6:	4013      	ands	r3, r2
 80089d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	695b      	ldr	r3, [r3, #20]
 80089de:	009b      	lsls	r3, r3, #2
 80089e0:	693a      	ldr	r2, [r7, #16]
 80089e2:	4313      	orrs	r3, r2
 80089e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	699b      	ldr	r3, [r3, #24]
 80089ea:	009b      	lsls	r3, r3, #2
 80089ec:	693a      	ldr	r2, [r7, #16]
 80089ee:	4313      	orrs	r3, r2
 80089f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	693a      	ldr	r2, [r7, #16]
 80089f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	68fa      	ldr	r2, [r7, #12]
 80089fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	685a      	ldr	r2, [r3, #4]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	697a      	ldr	r2, [r7, #20]
 8008a0a:	621a      	str	r2, [r3, #32]
}
 8008a0c:	46c0      	nop			@ (mov r8, r8)
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	b006      	add	sp, #24
 8008a12:	bd80      	pop	{r7, pc}
 8008a14:	feff8fff 	.word	0xfeff8fff
 8008a18:	fffffcff 	.word	0xfffffcff
 8008a1c:	40012c00 	.word	0x40012c00
 8008a20:	40014000 	.word	0x40014000
 8008a24:	40014400 	.word	0x40014400
 8008a28:	40014800 	.word	0x40014800
 8008a2c:	fffffbff 	.word	0xfffffbff
 8008a30:	fffff7ff 	.word	0xfffff7ff

08008a34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b086      	sub	sp, #24
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6a1b      	ldr	r3, [r3, #32]
 8008a42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6a1b      	ldr	r3, [r3, #32]
 8008a48:	4a33      	ldr	r2, [pc, #204]	@ (8008b18 <TIM_OC3_SetConfig+0xe4>)
 8008a4a:	401a      	ands	r2, r3
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	69db      	ldr	r3, [r3, #28]
 8008a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	4a2f      	ldr	r2, [pc, #188]	@ (8008b1c <TIM_OC3_SetConfig+0xe8>)
 8008a60:	4013      	ands	r3, r2
 8008a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2203      	movs	r2, #3
 8008a68:	4393      	bics	r3, r2
 8008a6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	68fa      	ldr	r2, [r7, #12]
 8008a72:	4313      	orrs	r3, r2
 8008a74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	4a29      	ldr	r2, [pc, #164]	@ (8008b20 <TIM_OC3_SetConfig+0xec>)
 8008a7a:	4013      	ands	r3, r2
 8008a7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	021b      	lsls	r3, r3, #8
 8008a84:	697a      	ldr	r2, [r7, #20]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	4a25      	ldr	r2, [pc, #148]	@ (8008b24 <TIM_OC3_SetConfig+0xf0>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d10d      	bne.n	8008aae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	4a24      	ldr	r2, [pc, #144]	@ (8008b28 <TIM_OC3_SetConfig+0xf4>)
 8008a96:	4013      	ands	r3, r2
 8008a98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	68db      	ldr	r3, [r3, #12]
 8008a9e:	021b      	lsls	r3, r3, #8
 8008aa0:	697a      	ldr	r2, [r7, #20]
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	4a20      	ldr	r2, [pc, #128]	@ (8008b2c <TIM_OC3_SetConfig+0xf8>)
 8008aaa:	4013      	ands	r3, r2
 8008aac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	4a1c      	ldr	r2, [pc, #112]	@ (8008b24 <TIM_OC3_SetConfig+0xf0>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d00b      	beq.n	8008ace <TIM_OC3_SetConfig+0x9a>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	4a1d      	ldr	r2, [pc, #116]	@ (8008b30 <TIM_OC3_SetConfig+0xfc>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d007      	beq.n	8008ace <TIM_OC3_SetConfig+0x9a>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	4a1c      	ldr	r2, [pc, #112]	@ (8008b34 <TIM_OC3_SetConfig+0x100>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d003      	beq.n	8008ace <TIM_OC3_SetConfig+0x9a>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	4a1b      	ldr	r2, [pc, #108]	@ (8008b38 <TIM_OC3_SetConfig+0x104>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d113      	bne.n	8008af6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	4a1a      	ldr	r2, [pc, #104]	@ (8008b3c <TIM_OC3_SetConfig+0x108>)
 8008ad2:	4013      	ands	r3, r2
 8008ad4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	4a19      	ldr	r2, [pc, #100]	@ (8008b40 <TIM_OC3_SetConfig+0x10c>)
 8008ada:	4013      	ands	r3, r2
 8008adc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	695b      	ldr	r3, [r3, #20]
 8008ae2:	011b      	lsls	r3, r3, #4
 8008ae4:	693a      	ldr	r2, [r7, #16]
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	699b      	ldr	r3, [r3, #24]
 8008aee:	011b      	lsls	r3, r3, #4
 8008af0:	693a      	ldr	r2, [r7, #16]
 8008af2:	4313      	orrs	r3, r2
 8008af4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	693a      	ldr	r2, [r7, #16]
 8008afa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	68fa      	ldr	r2, [r7, #12]
 8008b00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	685a      	ldr	r2, [r3, #4]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	697a      	ldr	r2, [r7, #20]
 8008b0e:	621a      	str	r2, [r3, #32]
}
 8008b10:	46c0      	nop			@ (mov r8, r8)
 8008b12:	46bd      	mov	sp, r7
 8008b14:	b006      	add	sp, #24
 8008b16:	bd80      	pop	{r7, pc}
 8008b18:	fffffeff 	.word	0xfffffeff
 8008b1c:	fffeff8f 	.word	0xfffeff8f
 8008b20:	fffffdff 	.word	0xfffffdff
 8008b24:	40012c00 	.word	0x40012c00
 8008b28:	fffff7ff 	.word	0xfffff7ff
 8008b2c:	fffffbff 	.word	0xfffffbff
 8008b30:	40014000 	.word	0x40014000
 8008b34:	40014400 	.word	0x40014400
 8008b38:	40014800 	.word	0x40014800
 8008b3c:	ffffefff 	.word	0xffffefff
 8008b40:	ffffdfff 	.word	0xffffdfff

08008b44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b086      	sub	sp, #24
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6a1b      	ldr	r3, [r3, #32]
 8008b52:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6a1b      	ldr	r3, [r3, #32]
 8008b58:	4a26      	ldr	r2, [pc, #152]	@ (8008bf4 <TIM_OC4_SetConfig+0xb0>)
 8008b5a:	401a      	ands	r2, r3
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	69db      	ldr	r3, [r3, #28]
 8008b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	4a22      	ldr	r2, [pc, #136]	@ (8008bf8 <TIM_OC4_SetConfig+0xb4>)
 8008b70:	4013      	ands	r3, r2
 8008b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	4a21      	ldr	r2, [pc, #132]	@ (8008bfc <TIM_OC4_SetConfig+0xb8>)
 8008b78:	4013      	ands	r3, r2
 8008b7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	021b      	lsls	r3, r3, #8
 8008b82:	68fa      	ldr	r2, [r7, #12]
 8008b84:	4313      	orrs	r3, r2
 8008b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	4a1d      	ldr	r2, [pc, #116]	@ (8008c00 <TIM_OC4_SetConfig+0xbc>)
 8008b8c:	4013      	ands	r3, r2
 8008b8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	031b      	lsls	r3, r3, #12
 8008b96:	693a      	ldr	r2, [r7, #16]
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	4a19      	ldr	r2, [pc, #100]	@ (8008c04 <TIM_OC4_SetConfig+0xc0>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d00b      	beq.n	8008bbc <TIM_OC4_SetConfig+0x78>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	4a18      	ldr	r2, [pc, #96]	@ (8008c08 <TIM_OC4_SetConfig+0xc4>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d007      	beq.n	8008bbc <TIM_OC4_SetConfig+0x78>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	4a17      	ldr	r2, [pc, #92]	@ (8008c0c <TIM_OC4_SetConfig+0xc8>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d003      	beq.n	8008bbc <TIM_OC4_SetConfig+0x78>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	4a16      	ldr	r2, [pc, #88]	@ (8008c10 <TIM_OC4_SetConfig+0xcc>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d109      	bne.n	8008bd0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	4a15      	ldr	r2, [pc, #84]	@ (8008c14 <TIM_OC4_SetConfig+0xd0>)
 8008bc0:	4013      	ands	r3, r2
 8008bc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	695b      	ldr	r3, [r3, #20]
 8008bc8:	019b      	lsls	r3, r3, #6
 8008bca:	697a      	ldr	r2, [r7, #20]
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	697a      	ldr	r2, [r7, #20]
 8008bd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	68fa      	ldr	r2, [r7, #12]
 8008bda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	685a      	ldr	r2, [r3, #4]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	693a      	ldr	r2, [r7, #16]
 8008be8:	621a      	str	r2, [r3, #32]
}
 8008bea:	46c0      	nop			@ (mov r8, r8)
 8008bec:	46bd      	mov	sp, r7
 8008bee:	b006      	add	sp, #24
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	46c0      	nop			@ (mov r8, r8)
 8008bf4:	ffffefff 	.word	0xffffefff
 8008bf8:	feff8fff 	.word	0xfeff8fff
 8008bfc:	fffffcff 	.word	0xfffffcff
 8008c00:	ffffdfff 	.word	0xffffdfff
 8008c04:	40012c00 	.word	0x40012c00
 8008c08:	40014000 	.word	0x40014000
 8008c0c:	40014400 	.word	0x40014400
 8008c10:	40014800 	.word	0x40014800
 8008c14:	ffffbfff 	.word	0xffffbfff

08008c18 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b086      	sub	sp, #24
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6a1b      	ldr	r3, [r3, #32]
 8008c26:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6a1b      	ldr	r3, [r3, #32]
 8008c2c:	4a23      	ldr	r2, [pc, #140]	@ (8008cbc <TIM_OC5_SetConfig+0xa4>)
 8008c2e:	401a      	ands	r2, r3
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	4a1f      	ldr	r2, [pc, #124]	@ (8008cc0 <TIM_OC5_SetConfig+0xa8>)
 8008c44:	4013      	ands	r3, r2
 8008c46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	68fa      	ldr	r2, [r7, #12]
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	4a1b      	ldr	r2, [pc, #108]	@ (8008cc4 <TIM_OC5_SetConfig+0xac>)
 8008c56:	4013      	ands	r3, r2
 8008c58:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	689b      	ldr	r3, [r3, #8]
 8008c5e:	041b      	lsls	r3, r3, #16
 8008c60:	693a      	ldr	r2, [r7, #16]
 8008c62:	4313      	orrs	r3, r2
 8008c64:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	4a17      	ldr	r2, [pc, #92]	@ (8008cc8 <TIM_OC5_SetConfig+0xb0>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d00b      	beq.n	8008c86 <TIM_OC5_SetConfig+0x6e>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	4a16      	ldr	r2, [pc, #88]	@ (8008ccc <TIM_OC5_SetConfig+0xb4>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d007      	beq.n	8008c86 <TIM_OC5_SetConfig+0x6e>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	4a15      	ldr	r2, [pc, #84]	@ (8008cd0 <TIM_OC5_SetConfig+0xb8>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d003      	beq.n	8008c86 <TIM_OC5_SetConfig+0x6e>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	4a14      	ldr	r2, [pc, #80]	@ (8008cd4 <TIM_OC5_SetConfig+0xbc>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d109      	bne.n	8008c9a <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	4a0c      	ldr	r2, [pc, #48]	@ (8008cbc <TIM_OC5_SetConfig+0xa4>)
 8008c8a:	4013      	ands	r3, r2
 8008c8c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	695b      	ldr	r3, [r3, #20]
 8008c92:	021b      	lsls	r3, r3, #8
 8008c94:	697a      	ldr	r2, [r7, #20]
 8008c96:	4313      	orrs	r3, r2
 8008c98:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	697a      	ldr	r2, [r7, #20]
 8008c9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	68fa      	ldr	r2, [r7, #12]
 8008ca4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	685a      	ldr	r2, [r3, #4]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	693a      	ldr	r2, [r7, #16]
 8008cb2:	621a      	str	r2, [r3, #32]
}
 8008cb4:	46c0      	nop			@ (mov r8, r8)
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	b006      	add	sp, #24
 8008cba:	bd80      	pop	{r7, pc}
 8008cbc:	fffeffff 	.word	0xfffeffff
 8008cc0:	fffeff8f 	.word	0xfffeff8f
 8008cc4:	fffdffff 	.word	0xfffdffff
 8008cc8:	40012c00 	.word	0x40012c00
 8008ccc:	40014000 	.word	0x40014000
 8008cd0:	40014400 	.word	0x40014400
 8008cd4:	40014800 	.word	0x40014800

08008cd8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b086      	sub	sp, #24
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6a1b      	ldr	r3, [r3, #32]
 8008ce6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6a1b      	ldr	r3, [r3, #32]
 8008cec:	4a24      	ldr	r2, [pc, #144]	@ (8008d80 <TIM_OC6_SetConfig+0xa8>)
 8008cee:	401a      	ands	r2, r3
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	4a20      	ldr	r2, [pc, #128]	@ (8008d84 <TIM_OC6_SetConfig+0xac>)
 8008d04:	4013      	ands	r3, r2
 8008d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	021b      	lsls	r3, r3, #8
 8008d0e:	68fa      	ldr	r2, [r7, #12]
 8008d10:	4313      	orrs	r3, r2
 8008d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	4a1c      	ldr	r2, [pc, #112]	@ (8008d88 <TIM_OC6_SetConfig+0xb0>)
 8008d18:	4013      	ands	r3, r2
 8008d1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	689b      	ldr	r3, [r3, #8]
 8008d20:	051b      	lsls	r3, r3, #20
 8008d22:	693a      	ldr	r2, [r7, #16]
 8008d24:	4313      	orrs	r3, r2
 8008d26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	4a18      	ldr	r2, [pc, #96]	@ (8008d8c <TIM_OC6_SetConfig+0xb4>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d00b      	beq.n	8008d48 <TIM_OC6_SetConfig+0x70>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	4a17      	ldr	r2, [pc, #92]	@ (8008d90 <TIM_OC6_SetConfig+0xb8>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d007      	beq.n	8008d48 <TIM_OC6_SetConfig+0x70>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	4a16      	ldr	r2, [pc, #88]	@ (8008d94 <TIM_OC6_SetConfig+0xbc>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d003      	beq.n	8008d48 <TIM_OC6_SetConfig+0x70>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	4a15      	ldr	r2, [pc, #84]	@ (8008d98 <TIM_OC6_SetConfig+0xc0>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d109      	bne.n	8008d5c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	4a14      	ldr	r2, [pc, #80]	@ (8008d9c <TIM_OC6_SetConfig+0xc4>)
 8008d4c:	4013      	ands	r3, r2
 8008d4e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	695b      	ldr	r3, [r3, #20]
 8008d54:	029b      	lsls	r3, r3, #10
 8008d56:	697a      	ldr	r2, [r7, #20]
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	697a      	ldr	r2, [r7, #20]
 8008d60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	68fa      	ldr	r2, [r7, #12]
 8008d66:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	685a      	ldr	r2, [r3, #4]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	693a      	ldr	r2, [r7, #16]
 8008d74:	621a      	str	r2, [r3, #32]
}
 8008d76:	46c0      	nop			@ (mov r8, r8)
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	b006      	add	sp, #24
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	46c0      	nop			@ (mov r8, r8)
 8008d80:	ffefffff 	.word	0xffefffff
 8008d84:	feff8fff 	.word	0xfeff8fff
 8008d88:	ffdfffff 	.word	0xffdfffff
 8008d8c:	40012c00 	.word	0x40012c00
 8008d90:	40014000 	.word	0x40014000
 8008d94:	40014400 	.word	0x40014400
 8008d98:	40014800 	.word	0x40014800
 8008d9c:	fffbffff 	.word	0xfffbffff

08008da0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b086      	sub	sp, #24
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	60b9      	str	r1, [r7, #8]
 8008daa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	6a1b      	ldr	r3, [r3, #32]
 8008db0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	6a1b      	ldr	r3, [r3, #32]
 8008db6:	2201      	movs	r2, #1
 8008db8:	4393      	bics	r3, r2
 8008dba:	001a      	movs	r2, r3
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	699b      	ldr	r3, [r3, #24]
 8008dc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	22f0      	movs	r2, #240	@ 0xf0
 8008dca:	4393      	bics	r3, r2
 8008dcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	011b      	lsls	r3, r3, #4
 8008dd2:	693a      	ldr	r2, [r7, #16]
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	220a      	movs	r2, #10
 8008ddc:	4393      	bics	r3, r2
 8008dde:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008de0:	697a      	ldr	r2, [r7, #20]
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	4313      	orrs	r3, r2
 8008de6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	693a      	ldr	r2, [r7, #16]
 8008dec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	697a      	ldr	r2, [r7, #20]
 8008df2:	621a      	str	r2, [r3, #32]
}
 8008df4:	46c0      	nop			@ (mov r8, r8)
 8008df6:	46bd      	mov	sp, r7
 8008df8:	b006      	add	sp, #24
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b086      	sub	sp, #24
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	60b9      	str	r1, [r7, #8]
 8008e06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	6a1b      	ldr	r3, [r3, #32]
 8008e0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	6a1b      	ldr	r3, [r3, #32]
 8008e12:	2210      	movs	r2, #16
 8008e14:	4393      	bics	r3, r2
 8008e16:	001a      	movs	r2, r3
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	699b      	ldr	r3, [r3, #24]
 8008e20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	4a0d      	ldr	r2, [pc, #52]	@ (8008e5c <TIM_TI2_ConfigInputStage+0x60>)
 8008e26:	4013      	ands	r3, r2
 8008e28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	031b      	lsls	r3, r3, #12
 8008e2e:	693a      	ldr	r2, [r7, #16]
 8008e30:	4313      	orrs	r3, r2
 8008e32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	22a0      	movs	r2, #160	@ 0xa0
 8008e38:	4393      	bics	r3, r2
 8008e3a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	011b      	lsls	r3, r3, #4
 8008e40:	697a      	ldr	r2, [r7, #20]
 8008e42:	4313      	orrs	r3, r2
 8008e44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	693a      	ldr	r2, [r7, #16]
 8008e4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	697a      	ldr	r2, [r7, #20]
 8008e50:	621a      	str	r2, [r3, #32]
}
 8008e52:	46c0      	nop			@ (mov r8, r8)
 8008e54:	46bd      	mov	sp, r7
 8008e56:	b006      	add	sp, #24
 8008e58:	bd80      	pop	{r7, pc}
 8008e5a:	46c0      	nop			@ (mov r8, r8)
 8008e5c:	ffff0fff 	.word	0xffff0fff

08008e60 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b084      	sub	sp, #16
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	4a08      	ldr	r2, [pc, #32]	@ (8008e94 <TIM_ITRx_SetConfig+0x34>)
 8008e74:	4013      	ands	r3, r2
 8008e76:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008e78:	683a      	ldr	r2, [r7, #0]
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	2207      	movs	r2, #7
 8008e80:	4313      	orrs	r3, r2
 8008e82:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	68fa      	ldr	r2, [r7, #12]
 8008e88:	609a      	str	r2, [r3, #8]
}
 8008e8a:	46c0      	nop			@ (mov r8, r8)
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	b004      	add	sp, #16
 8008e90:	bd80      	pop	{r7, pc}
 8008e92:	46c0      	nop			@ (mov r8, r8)
 8008e94:	ffcfff8f 	.word	0xffcfff8f

08008e98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b086      	sub	sp, #24
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	60b9      	str	r1, [r7, #8]
 8008ea2:	607a      	str	r2, [r7, #4]
 8008ea4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	689b      	ldr	r3, [r3, #8]
 8008eaa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	4a09      	ldr	r2, [pc, #36]	@ (8008ed4 <TIM_ETR_SetConfig+0x3c>)
 8008eb0:	4013      	ands	r3, r2
 8008eb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	021a      	lsls	r2, r3, #8
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	431a      	orrs	r2, r3
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	697a      	ldr	r2, [r7, #20]
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	697a      	ldr	r2, [r7, #20]
 8008eca:	609a      	str	r2, [r3, #8]
}
 8008ecc:	46c0      	nop			@ (mov r8, r8)
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	b006      	add	sp, #24
 8008ed2:	bd80      	pop	{r7, pc}
 8008ed4:	ffff00ff 	.word	0xffff00ff

08008ed8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b086      	sub	sp, #24
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	60f8      	str	r0, [r7, #12]
 8008ee0:	60b9      	str	r1, [r7, #8]
 8008ee2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	221f      	movs	r2, #31
 8008ee8:	4013      	ands	r3, r2
 8008eea:	2201      	movs	r2, #1
 8008eec:	409a      	lsls	r2, r3
 8008eee:	0013      	movs	r3, r2
 8008ef0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	6a1b      	ldr	r3, [r3, #32]
 8008ef6:	697a      	ldr	r2, [r7, #20]
 8008ef8:	43d2      	mvns	r2, r2
 8008efa:	401a      	ands	r2, r3
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	6a1a      	ldr	r2, [r3, #32]
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	211f      	movs	r1, #31
 8008f08:	400b      	ands	r3, r1
 8008f0a:	6879      	ldr	r1, [r7, #4]
 8008f0c:	4099      	lsls	r1, r3
 8008f0e:	000b      	movs	r3, r1
 8008f10:	431a      	orrs	r2, r3
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	621a      	str	r2, [r3, #32]
}
 8008f16:	46c0      	nop			@ (mov r8, r8)
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	b006      	add	sp, #24
 8008f1c:	bd80      	pop	{r7, pc}
	...

08008f20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b084      	sub	sp, #16
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	223c      	movs	r2, #60	@ 0x3c
 8008f2e:	5c9b      	ldrb	r3, [r3, r2]
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d101      	bne.n	8008f38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f34:	2302      	movs	r3, #2
 8008f36:	e04f      	b.n	8008fd8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	223c      	movs	r2, #60	@ 0x3c
 8008f3c:	2101      	movs	r1, #1
 8008f3e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	223d      	movs	r2, #61	@ 0x3d
 8008f44:	2102      	movs	r1, #2
 8008f46:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	689b      	ldr	r3, [r3, #8]
 8008f56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a20      	ldr	r2, [pc, #128]	@ (8008fe0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d108      	bne.n	8008f74 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	4a1f      	ldr	r2, [pc, #124]	@ (8008fe4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008f66:	4013      	ands	r3, r2
 8008f68:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	68fa      	ldr	r2, [r7, #12]
 8008f70:	4313      	orrs	r3, r2
 8008f72:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2270      	movs	r2, #112	@ 0x70
 8008f78:	4393      	bics	r3, r2
 8008f7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	68fa      	ldr	r2, [r7, #12]
 8008f82:	4313      	orrs	r3, r2
 8008f84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	68fa      	ldr	r2, [r7, #12]
 8008f8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4a13      	ldr	r2, [pc, #76]	@ (8008fe0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d009      	beq.n	8008fac <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a12      	ldr	r2, [pc, #72]	@ (8008fe8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d004      	beq.n	8008fac <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4a11      	ldr	r2, [pc, #68]	@ (8008fec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d10c      	bne.n	8008fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	2280      	movs	r2, #128	@ 0x80
 8008fb0:	4393      	bics	r3, r2
 8008fb2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	68ba      	ldr	r2, [r7, #8]
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	68ba      	ldr	r2, [r7, #8]
 8008fc4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	223d      	movs	r2, #61	@ 0x3d
 8008fca:	2101      	movs	r1, #1
 8008fcc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	223c      	movs	r2, #60	@ 0x3c
 8008fd2:	2100      	movs	r1, #0
 8008fd4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008fd6:	2300      	movs	r3, #0
}
 8008fd8:	0018      	movs	r0, r3
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	b004      	add	sp, #16
 8008fde:	bd80      	pop	{r7, pc}
 8008fe0:	40012c00 	.word	0x40012c00
 8008fe4:	ff0fffff 	.word	0xff0fffff
 8008fe8:	40000400 	.word	0x40000400
 8008fec:	40014000 	.word	0x40014000

08008ff0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d101      	bne.n	8009002 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ffe:	2301      	movs	r3, #1
 8009000:	e046      	b.n	8009090 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2288      	movs	r2, #136	@ 0x88
 8009006:	589b      	ldr	r3, [r3, r2]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d107      	bne.n	800901c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2284      	movs	r2, #132	@ 0x84
 8009010:	2100      	movs	r1, #0
 8009012:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	0018      	movs	r0, r3
 8009018:	f000 f840 	bl	800909c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2288      	movs	r2, #136	@ 0x88
 8009020:	2124      	movs	r1, #36	@ 0x24
 8009022:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	2101      	movs	r1, #1
 8009030:	438a      	bics	r2, r1
 8009032:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009038:	2b00      	cmp	r3, #0
 800903a:	d003      	beq.n	8009044 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	0018      	movs	r0, r3
 8009040:	f000 fa7c 	bl	800953c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	0018      	movs	r0, r3
 8009048:	f000 f8d4 	bl	80091f4 <UART_SetConfig>
 800904c:	0003      	movs	r3, r0
 800904e:	2b01      	cmp	r3, #1
 8009050:	d101      	bne.n	8009056 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8009052:	2301      	movs	r3, #1
 8009054:	e01c      	b.n	8009090 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	685a      	ldr	r2, [r3, #4]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	490d      	ldr	r1, [pc, #52]	@ (8009098 <HAL_UART_Init+0xa8>)
 8009062:	400a      	ands	r2, r1
 8009064:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	689a      	ldr	r2, [r3, #8]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	212a      	movs	r1, #42	@ 0x2a
 8009072:	438a      	bics	r2, r1
 8009074:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	681a      	ldr	r2, [r3, #0]
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	2101      	movs	r1, #1
 8009082:	430a      	orrs	r2, r1
 8009084:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	0018      	movs	r0, r3
 800908a:	f000 fb0b 	bl	80096a4 <UART_CheckIdleState>
 800908e:	0003      	movs	r3, r0
}
 8009090:	0018      	movs	r0, r3
 8009092:	46bd      	mov	sp, r7
 8009094:	b002      	add	sp, #8
 8009096:	bd80      	pop	{r7, pc}
 8009098:	ffffb7ff 	.word	0xffffb7ff

0800909c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80090a4:	46c0      	nop			@ (mov r8, r8)
 80090a6:	46bd      	mov	sp, r7
 80090a8:	b002      	add	sp, #8
 80090aa:	bd80      	pop	{r7, pc}

080090ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b08a      	sub	sp, #40	@ 0x28
 80090b0:	af02      	add	r7, sp, #8
 80090b2:	60f8      	str	r0, [r7, #12]
 80090b4:	60b9      	str	r1, [r7, #8]
 80090b6:	603b      	str	r3, [r7, #0]
 80090b8:	1dbb      	adds	r3, r7, #6
 80090ba:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	2288      	movs	r2, #136	@ 0x88
 80090c0:	589b      	ldr	r3, [r3, r2]
 80090c2:	2b20      	cmp	r3, #32
 80090c4:	d000      	beq.n	80090c8 <HAL_UART_Transmit+0x1c>
 80090c6:	e090      	b.n	80091ea <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d003      	beq.n	80090d6 <HAL_UART_Transmit+0x2a>
 80090ce:	1dbb      	adds	r3, r7, #6
 80090d0:	881b      	ldrh	r3, [r3, #0]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d101      	bne.n	80090da <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80090d6:	2301      	movs	r3, #1
 80090d8:	e088      	b.n	80091ec <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	689a      	ldr	r2, [r3, #8]
 80090de:	2380      	movs	r3, #128	@ 0x80
 80090e0:	015b      	lsls	r3, r3, #5
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d109      	bne.n	80090fa <HAL_UART_Transmit+0x4e>
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	691b      	ldr	r3, [r3, #16]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d105      	bne.n	80090fa <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	2201      	movs	r2, #1
 80090f2:	4013      	ands	r3, r2
 80090f4:	d001      	beq.n	80090fa <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80090f6:	2301      	movs	r3, #1
 80090f8:	e078      	b.n	80091ec <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2290      	movs	r2, #144	@ 0x90
 80090fe:	2100      	movs	r1, #0
 8009100:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2288      	movs	r2, #136	@ 0x88
 8009106:	2121      	movs	r1, #33	@ 0x21
 8009108:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800910a:	f7fb ffbb 	bl	8005084 <HAL_GetTick>
 800910e:	0003      	movs	r3, r0
 8009110:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	1dba      	adds	r2, r7, #6
 8009116:	2154      	movs	r1, #84	@ 0x54
 8009118:	8812      	ldrh	r2, [r2, #0]
 800911a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	1dba      	adds	r2, r7, #6
 8009120:	2156      	movs	r1, #86	@ 0x56
 8009122:	8812      	ldrh	r2, [r2, #0]
 8009124:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	689a      	ldr	r2, [r3, #8]
 800912a:	2380      	movs	r3, #128	@ 0x80
 800912c:	015b      	lsls	r3, r3, #5
 800912e:	429a      	cmp	r2, r3
 8009130:	d108      	bne.n	8009144 <HAL_UART_Transmit+0x98>
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	691b      	ldr	r3, [r3, #16]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d104      	bne.n	8009144 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800913a:	2300      	movs	r3, #0
 800913c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	61bb      	str	r3, [r7, #24]
 8009142:	e003      	b.n	800914c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009148:	2300      	movs	r3, #0
 800914a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800914c:	e030      	b.n	80091b0 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800914e:	697a      	ldr	r2, [r7, #20]
 8009150:	68f8      	ldr	r0, [r7, #12]
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	9300      	str	r3, [sp, #0]
 8009156:	0013      	movs	r3, r2
 8009158:	2200      	movs	r2, #0
 800915a:	2180      	movs	r1, #128	@ 0x80
 800915c:	f000 fb4c 	bl	80097f8 <UART_WaitOnFlagUntilTimeout>
 8009160:	1e03      	subs	r3, r0, #0
 8009162:	d005      	beq.n	8009170 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	2288      	movs	r2, #136	@ 0x88
 8009168:	2120      	movs	r1, #32
 800916a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800916c:	2303      	movs	r3, #3
 800916e:	e03d      	b.n	80091ec <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8009170:	69fb      	ldr	r3, [r7, #28]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d10b      	bne.n	800918e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009176:	69bb      	ldr	r3, [r7, #24]
 8009178:	881b      	ldrh	r3, [r3, #0]
 800917a:	001a      	movs	r2, r3
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	05d2      	lsls	r2, r2, #23
 8009182:	0dd2      	lsrs	r2, r2, #23
 8009184:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009186:	69bb      	ldr	r3, [r7, #24]
 8009188:	3302      	adds	r3, #2
 800918a:	61bb      	str	r3, [r7, #24]
 800918c:	e007      	b.n	800919e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800918e:	69fb      	ldr	r3, [r7, #28]
 8009190:	781a      	ldrb	r2, [r3, #0]
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009198:	69fb      	ldr	r3, [r7, #28]
 800919a:	3301      	adds	r3, #1
 800919c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2256      	movs	r2, #86	@ 0x56
 80091a2:	5a9b      	ldrh	r3, [r3, r2]
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	3b01      	subs	r3, #1
 80091a8:	b299      	uxth	r1, r3
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2256      	movs	r2, #86	@ 0x56
 80091ae:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2256      	movs	r2, #86	@ 0x56
 80091b4:	5a9b      	ldrh	r3, [r3, r2]
 80091b6:	b29b      	uxth	r3, r3
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d1c8      	bne.n	800914e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80091bc:	697a      	ldr	r2, [r7, #20]
 80091be:	68f8      	ldr	r0, [r7, #12]
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	9300      	str	r3, [sp, #0]
 80091c4:	0013      	movs	r3, r2
 80091c6:	2200      	movs	r2, #0
 80091c8:	2140      	movs	r1, #64	@ 0x40
 80091ca:	f000 fb15 	bl	80097f8 <UART_WaitOnFlagUntilTimeout>
 80091ce:	1e03      	subs	r3, r0, #0
 80091d0:	d005      	beq.n	80091de <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2288      	movs	r2, #136	@ 0x88
 80091d6:	2120      	movs	r1, #32
 80091d8:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80091da:	2303      	movs	r3, #3
 80091dc:	e006      	b.n	80091ec <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2288      	movs	r2, #136	@ 0x88
 80091e2:	2120      	movs	r1, #32
 80091e4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80091e6:	2300      	movs	r3, #0
 80091e8:	e000      	b.n	80091ec <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80091ea:	2302      	movs	r3, #2
  }
}
 80091ec:	0018      	movs	r0, r3
 80091ee:	46bd      	mov	sp, r7
 80091f0:	b008      	add	sp, #32
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b088      	sub	sp, #32
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80091fc:	231a      	movs	r3, #26
 80091fe:	18fb      	adds	r3, r7, r3
 8009200:	2200      	movs	r2, #0
 8009202:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	689a      	ldr	r2, [r3, #8]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	691b      	ldr	r3, [r3, #16]
 800920c:	431a      	orrs	r2, r3
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	695b      	ldr	r3, [r3, #20]
 8009212:	431a      	orrs	r2, r3
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	69db      	ldr	r3, [r3, #28]
 8009218:	4313      	orrs	r3, r2
 800921a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	4abc      	ldr	r2, [pc, #752]	@ (8009514 <UART_SetConfig+0x320>)
 8009224:	4013      	ands	r3, r2
 8009226:	0019      	movs	r1, r3
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	69fa      	ldr	r2, [r7, #28]
 800922e:	430a      	orrs	r2, r1
 8009230:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	4ab7      	ldr	r2, [pc, #732]	@ (8009518 <UART_SetConfig+0x324>)
 800923a:	4013      	ands	r3, r2
 800923c:	0019      	movs	r1, r3
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	68da      	ldr	r2, [r3, #12]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	430a      	orrs	r2, r1
 8009248:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	699b      	ldr	r3, [r3, #24]
 800924e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6a1b      	ldr	r3, [r3, #32]
 8009254:	69fa      	ldr	r2, [r7, #28]
 8009256:	4313      	orrs	r3, r2
 8009258:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	689b      	ldr	r3, [r3, #8]
 8009260:	4aae      	ldr	r2, [pc, #696]	@ (800951c <UART_SetConfig+0x328>)
 8009262:	4013      	ands	r3, r2
 8009264:	0019      	movs	r1, r3
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	69fa      	ldr	r2, [r7, #28]
 800926c:	430a      	orrs	r2, r1
 800926e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009276:	220f      	movs	r2, #15
 8009278:	4393      	bics	r3, r2
 800927a:	0019      	movs	r1, r3
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	430a      	orrs	r2, r1
 8009286:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4aa4      	ldr	r2, [pc, #656]	@ (8009520 <UART_SetConfig+0x32c>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d127      	bne.n	80092e2 <UART_SetConfig+0xee>
 8009292:	4ba4      	ldr	r3, [pc, #656]	@ (8009524 <UART_SetConfig+0x330>)
 8009294:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009296:	2203      	movs	r2, #3
 8009298:	4013      	ands	r3, r2
 800929a:	2b03      	cmp	r3, #3
 800929c:	d017      	beq.n	80092ce <UART_SetConfig+0xda>
 800929e:	d81b      	bhi.n	80092d8 <UART_SetConfig+0xe4>
 80092a0:	2b02      	cmp	r3, #2
 80092a2:	d00a      	beq.n	80092ba <UART_SetConfig+0xc6>
 80092a4:	d818      	bhi.n	80092d8 <UART_SetConfig+0xe4>
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d002      	beq.n	80092b0 <UART_SetConfig+0xbc>
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	d00a      	beq.n	80092c4 <UART_SetConfig+0xd0>
 80092ae:	e013      	b.n	80092d8 <UART_SetConfig+0xe4>
 80092b0:	231b      	movs	r3, #27
 80092b2:	18fb      	adds	r3, r7, r3
 80092b4:	2200      	movs	r2, #0
 80092b6:	701a      	strb	r2, [r3, #0]
 80092b8:	e058      	b.n	800936c <UART_SetConfig+0x178>
 80092ba:	231b      	movs	r3, #27
 80092bc:	18fb      	adds	r3, r7, r3
 80092be:	2202      	movs	r2, #2
 80092c0:	701a      	strb	r2, [r3, #0]
 80092c2:	e053      	b.n	800936c <UART_SetConfig+0x178>
 80092c4:	231b      	movs	r3, #27
 80092c6:	18fb      	adds	r3, r7, r3
 80092c8:	2204      	movs	r2, #4
 80092ca:	701a      	strb	r2, [r3, #0]
 80092cc:	e04e      	b.n	800936c <UART_SetConfig+0x178>
 80092ce:	231b      	movs	r3, #27
 80092d0:	18fb      	adds	r3, r7, r3
 80092d2:	2208      	movs	r2, #8
 80092d4:	701a      	strb	r2, [r3, #0]
 80092d6:	e049      	b.n	800936c <UART_SetConfig+0x178>
 80092d8:	231b      	movs	r3, #27
 80092da:	18fb      	adds	r3, r7, r3
 80092dc:	2210      	movs	r2, #16
 80092de:	701a      	strb	r2, [r3, #0]
 80092e0:	e044      	b.n	800936c <UART_SetConfig+0x178>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a90      	ldr	r2, [pc, #576]	@ (8009528 <UART_SetConfig+0x334>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d127      	bne.n	800933c <UART_SetConfig+0x148>
 80092ec:	4b8d      	ldr	r3, [pc, #564]	@ (8009524 <UART_SetConfig+0x330>)
 80092ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092f0:	220c      	movs	r2, #12
 80092f2:	4013      	ands	r3, r2
 80092f4:	2b0c      	cmp	r3, #12
 80092f6:	d017      	beq.n	8009328 <UART_SetConfig+0x134>
 80092f8:	d81b      	bhi.n	8009332 <UART_SetConfig+0x13e>
 80092fa:	2b08      	cmp	r3, #8
 80092fc:	d00a      	beq.n	8009314 <UART_SetConfig+0x120>
 80092fe:	d818      	bhi.n	8009332 <UART_SetConfig+0x13e>
 8009300:	2b00      	cmp	r3, #0
 8009302:	d002      	beq.n	800930a <UART_SetConfig+0x116>
 8009304:	2b04      	cmp	r3, #4
 8009306:	d00a      	beq.n	800931e <UART_SetConfig+0x12a>
 8009308:	e013      	b.n	8009332 <UART_SetConfig+0x13e>
 800930a:	231b      	movs	r3, #27
 800930c:	18fb      	adds	r3, r7, r3
 800930e:	2200      	movs	r2, #0
 8009310:	701a      	strb	r2, [r3, #0]
 8009312:	e02b      	b.n	800936c <UART_SetConfig+0x178>
 8009314:	231b      	movs	r3, #27
 8009316:	18fb      	adds	r3, r7, r3
 8009318:	2202      	movs	r2, #2
 800931a:	701a      	strb	r2, [r3, #0]
 800931c:	e026      	b.n	800936c <UART_SetConfig+0x178>
 800931e:	231b      	movs	r3, #27
 8009320:	18fb      	adds	r3, r7, r3
 8009322:	2204      	movs	r2, #4
 8009324:	701a      	strb	r2, [r3, #0]
 8009326:	e021      	b.n	800936c <UART_SetConfig+0x178>
 8009328:	231b      	movs	r3, #27
 800932a:	18fb      	adds	r3, r7, r3
 800932c:	2208      	movs	r2, #8
 800932e:	701a      	strb	r2, [r3, #0]
 8009330:	e01c      	b.n	800936c <UART_SetConfig+0x178>
 8009332:	231b      	movs	r3, #27
 8009334:	18fb      	adds	r3, r7, r3
 8009336:	2210      	movs	r2, #16
 8009338:	701a      	strb	r2, [r3, #0]
 800933a:	e017      	b.n	800936c <UART_SetConfig+0x178>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	4a7a      	ldr	r2, [pc, #488]	@ (800952c <UART_SetConfig+0x338>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d104      	bne.n	8009350 <UART_SetConfig+0x15c>
 8009346:	231b      	movs	r3, #27
 8009348:	18fb      	adds	r3, r7, r3
 800934a:	2200      	movs	r2, #0
 800934c:	701a      	strb	r2, [r3, #0]
 800934e:	e00d      	b.n	800936c <UART_SetConfig+0x178>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a76      	ldr	r2, [pc, #472]	@ (8009530 <UART_SetConfig+0x33c>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d104      	bne.n	8009364 <UART_SetConfig+0x170>
 800935a:	231b      	movs	r3, #27
 800935c:	18fb      	adds	r3, r7, r3
 800935e:	2200      	movs	r2, #0
 8009360:	701a      	strb	r2, [r3, #0]
 8009362:	e003      	b.n	800936c <UART_SetConfig+0x178>
 8009364:	231b      	movs	r3, #27
 8009366:	18fb      	adds	r3, r7, r3
 8009368:	2210      	movs	r2, #16
 800936a:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	69da      	ldr	r2, [r3, #28]
 8009370:	2380      	movs	r3, #128	@ 0x80
 8009372:	021b      	lsls	r3, r3, #8
 8009374:	429a      	cmp	r2, r3
 8009376:	d000      	beq.n	800937a <UART_SetConfig+0x186>
 8009378:	e065      	b.n	8009446 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800937a:	231b      	movs	r3, #27
 800937c:	18fb      	adds	r3, r7, r3
 800937e:	781b      	ldrb	r3, [r3, #0]
 8009380:	2b08      	cmp	r3, #8
 8009382:	d015      	beq.n	80093b0 <UART_SetConfig+0x1bc>
 8009384:	dc18      	bgt.n	80093b8 <UART_SetConfig+0x1c4>
 8009386:	2b04      	cmp	r3, #4
 8009388:	d00d      	beq.n	80093a6 <UART_SetConfig+0x1b2>
 800938a:	dc15      	bgt.n	80093b8 <UART_SetConfig+0x1c4>
 800938c:	2b00      	cmp	r3, #0
 800938e:	d002      	beq.n	8009396 <UART_SetConfig+0x1a2>
 8009390:	2b02      	cmp	r3, #2
 8009392:	d005      	beq.n	80093a0 <UART_SetConfig+0x1ac>
 8009394:	e010      	b.n	80093b8 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009396:	f7fe f8db 	bl	8007550 <HAL_RCC_GetPCLK1Freq>
 800939a:	0003      	movs	r3, r0
 800939c:	617b      	str	r3, [r7, #20]
        break;
 800939e:	e012      	b.n	80093c6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80093a0:	4b64      	ldr	r3, [pc, #400]	@ (8009534 <UART_SetConfig+0x340>)
 80093a2:	617b      	str	r3, [r7, #20]
        break;
 80093a4:	e00f      	b.n	80093c6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80093a6:	f7fe f847 	bl	8007438 <HAL_RCC_GetSysClockFreq>
 80093aa:	0003      	movs	r3, r0
 80093ac:	617b      	str	r3, [r7, #20]
        break;
 80093ae:	e00a      	b.n	80093c6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093b0:	2380      	movs	r3, #128	@ 0x80
 80093b2:	021b      	lsls	r3, r3, #8
 80093b4:	617b      	str	r3, [r7, #20]
        break;
 80093b6:	e006      	b.n	80093c6 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80093b8:	2300      	movs	r3, #0
 80093ba:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80093bc:	231a      	movs	r3, #26
 80093be:	18fb      	adds	r3, r7, r3
 80093c0:	2201      	movs	r2, #1
 80093c2:	701a      	strb	r2, [r3, #0]
        break;
 80093c4:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d100      	bne.n	80093ce <UART_SetConfig+0x1da>
 80093cc:	e08d      	b.n	80094ea <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80093d2:	4b59      	ldr	r3, [pc, #356]	@ (8009538 <UART_SetConfig+0x344>)
 80093d4:	0052      	lsls	r2, r2, #1
 80093d6:	5ad3      	ldrh	r3, [r2, r3]
 80093d8:	0019      	movs	r1, r3
 80093da:	6978      	ldr	r0, [r7, #20]
 80093dc:	f7f6 feac 	bl	8000138 <__udivsi3>
 80093e0:	0003      	movs	r3, r0
 80093e2:	005a      	lsls	r2, r3, #1
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	085b      	lsrs	r3, r3, #1
 80093ea:	18d2      	adds	r2, r2, r3
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	0019      	movs	r1, r3
 80093f2:	0010      	movs	r0, r2
 80093f4:	f7f6 fea0 	bl	8000138 <__udivsi3>
 80093f8:	0003      	movs	r3, r0
 80093fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	2b0f      	cmp	r3, #15
 8009400:	d91c      	bls.n	800943c <UART_SetConfig+0x248>
 8009402:	693a      	ldr	r2, [r7, #16]
 8009404:	2380      	movs	r3, #128	@ 0x80
 8009406:	025b      	lsls	r3, r3, #9
 8009408:	429a      	cmp	r2, r3
 800940a:	d217      	bcs.n	800943c <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	b29a      	uxth	r2, r3
 8009410:	200e      	movs	r0, #14
 8009412:	183b      	adds	r3, r7, r0
 8009414:	210f      	movs	r1, #15
 8009416:	438a      	bics	r2, r1
 8009418:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	085b      	lsrs	r3, r3, #1
 800941e:	b29b      	uxth	r3, r3
 8009420:	2207      	movs	r2, #7
 8009422:	4013      	ands	r3, r2
 8009424:	b299      	uxth	r1, r3
 8009426:	183b      	adds	r3, r7, r0
 8009428:	183a      	adds	r2, r7, r0
 800942a:	8812      	ldrh	r2, [r2, #0]
 800942c:	430a      	orrs	r2, r1
 800942e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	183a      	adds	r2, r7, r0
 8009436:	8812      	ldrh	r2, [r2, #0]
 8009438:	60da      	str	r2, [r3, #12]
 800943a:	e056      	b.n	80094ea <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800943c:	231a      	movs	r3, #26
 800943e:	18fb      	adds	r3, r7, r3
 8009440:	2201      	movs	r2, #1
 8009442:	701a      	strb	r2, [r3, #0]
 8009444:	e051      	b.n	80094ea <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009446:	231b      	movs	r3, #27
 8009448:	18fb      	adds	r3, r7, r3
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	2b08      	cmp	r3, #8
 800944e:	d015      	beq.n	800947c <UART_SetConfig+0x288>
 8009450:	dc18      	bgt.n	8009484 <UART_SetConfig+0x290>
 8009452:	2b04      	cmp	r3, #4
 8009454:	d00d      	beq.n	8009472 <UART_SetConfig+0x27e>
 8009456:	dc15      	bgt.n	8009484 <UART_SetConfig+0x290>
 8009458:	2b00      	cmp	r3, #0
 800945a:	d002      	beq.n	8009462 <UART_SetConfig+0x26e>
 800945c:	2b02      	cmp	r3, #2
 800945e:	d005      	beq.n	800946c <UART_SetConfig+0x278>
 8009460:	e010      	b.n	8009484 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009462:	f7fe f875 	bl	8007550 <HAL_RCC_GetPCLK1Freq>
 8009466:	0003      	movs	r3, r0
 8009468:	617b      	str	r3, [r7, #20]
        break;
 800946a:	e012      	b.n	8009492 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800946c:	4b31      	ldr	r3, [pc, #196]	@ (8009534 <UART_SetConfig+0x340>)
 800946e:	617b      	str	r3, [r7, #20]
        break;
 8009470:	e00f      	b.n	8009492 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009472:	f7fd ffe1 	bl	8007438 <HAL_RCC_GetSysClockFreq>
 8009476:	0003      	movs	r3, r0
 8009478:	617b      	str	r3, [r7, #20]
        break;
 800947a:	e00a      	b.n	8009492 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800947c:	2380      	movs	r3, #128	@ 0x80
 800947e:	021b      	lsls	r3, r3, #8
 8009480:	617b      	str	r3, [r7, #20]
        break;
 8009482:	e006      	b.n	8009492 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8009484:	2300      	movs	r3, #0
 8009486:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009488:	231a      	movs	r3, #26
 800948a:	18fb      	adds	r3, r7, r3
 800948c:	2201      	movs	r2, #1
 800948e:	701a      	strb	r2, [r3, #0]
        break;
 8009490:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d028      	beq.n	80094ea <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800949c:	4b26      	ldr	r3, [pc, #152]	@ (8009538 <UART_SetConfig+0x344>)
 800949e:	0052      	lsls	r2, r2, #1
 80094a0:	5ad3      	ldrh	r3, [r2, r3]
 80094a2:	0019      	movs	r1, r3
 80094a4:	6978      	ldr	r0, [r7, #20]
 80094a6:	f7f6 fe47 	bl	8000138 <__udivsi3>
 80094aa:	0003      	movs	r3, r0
 80094ac:	001a      	movs	r2, r3
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	085b      	lsrs	r3, r3, #1
 80094b4:	18d2      	adds	r2, r2, r3
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	0019      	movs	r1, r3
 80094bc:	0010      	movs	r0, r2
 80094be:	f7f6 fe3b 	bl	8000138 <__udivsi3>
 80094c2:	0003      	movs	r3, r0
 80094c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	2b0f      	cmp	r3, #15
 80094ca:	d90a      	bls.n	80094e2 <UART_SetConfig+0x2ee>
 80094cc:	693a      	ldr	r2, [r7, #16]
 80094ce:	2380      	movs	r3, #128	@ 0x80
 80094d0:	025b      	lsls	r3, r3, #9
 80094d2:	429a      	cmp	r2, r3
 80094d4:	d205      	bcs.n	80094e2 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	b29a      	uxth	r2, r3
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	60da      	str	r2, [r3, #12]
 80094e0:	e003      	b.n	80094ea <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80094e2:	231a      	movs	r3, #26
 80094e4:	18fb      	adds	r3, r7, r3
 80094e6:	2201      	movs	r2, #1
 80094e8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	226a      	movs	r2, #106	@ 0x6a
 80094ee:	2101      	movs	r1, #1
 80094f0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2268      	movs	r2, #104	@ 0x68
 80094f6:	2101      	movs	r1, #1
 80094f8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2200      	movs	r2, #0
 80094fe:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2200      	movs	r2, #0
 8009504:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009506:	231a      	movs	r3, #26
 8009508:	18fb      	adds	r3, r7, r3
 800950a:	781b      	ldrb	r3, [r3, #0]
}
 800950c:	0018      	movs	r0, r3
 800950e:	46bd      	mov	sp, r7
 8009510:	b008      	add	sp, #32
 8009512:	bd80      	pop	{r7, pc}
 8009514:	cfff69f3 	.word	0xcfff69f3
 8009518:	ffffcfff 	.word	0xffffcfff
 800951c:	11fff4ff 	.word	0x11fff4ff
 8009520:	40013800 	.word	0x40013800
 8009524:	40021000 	.word	0x40021000
 8009528:	40004400 	.word	0x40004400
 800952c:	40004800 	.word	0x40004800
 8009530:	40004c00 	.word	0x40004c00
 8009534:	00f42400 	.word	0x00f42400
 8009538:	08010538 	.word	0x08010538

0800953c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b082      	sub	sp, #8
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009548:	2208      	movs	r2, #8
 800954a:	4013      	ands	r3, r2
 800954c:	d00b      	beq.n	8009566 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	4a4a      	ldr	r2, [pc, #296]	@ (8009680 <UART_AdvFeatureConfig+0x144>)
 8009556:	4013      	ands	r3, r2
 8009558:	0019      	movs	r1, r3
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	430a      	orrs	r2, r1
 8009564:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800956a:	2201      	movs	r2, #1
 800956c:	4013      	ands	r3, r2
 800956e:	d00b      	beq.n	8009588 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	685b      	ldr	r3, [r3, #4]
 8009576:	4a43      	ldr	r2, [pc, #268]	@ (8009684 <UART_AdvFeatureConfig+0x148>)
 8009578:	4013      	ands	r3, r2
 800957a:	0019      	movs	r1, r3
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	430a      	orrs	r2, r1
 8009586:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800958c:	2202      	movs	r2, #2
 800958e:	4013      	ands	r3, r2
 8009590:	d00b      	beq.n	80095aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	4a3b      	ldr	r2, [pc, #236]	@ (8009688 <UART_AdvFeatureConfig+0x14c>)
 800959a:	4013      	ands	r3, r2
 800959c:	0019      	movs	r1, r3
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	430a      	orrs	r2, r1
 80095a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095ae:	2204      	movs	r2, #4
 80095b0:	4013      	ands	r3, r2
 80095b2:	d00b      	beq.n	80095cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	4a34      	ldr	r2, [pc, #208]	@ (800968c <UART_AdvFeatureConfig+0x150>)
 80095bc:	4013      	ands	r3, r2
 80095be:	0019      	movs	r1, r3
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	430a      	orrs	r2, r1
 80095ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095d0:	2210      	movs	r2, #16
 80095d2:	4013      	ands	r3, r2
 80095d4:	d00b      	beq.n	80095ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	689b      	ldr	r3, [r3, #8]
 80095dc:	4a2c      	ldr	r2, [pc, #176]	@ (8009690 <UART_AdvFeatureConfig+0x154>)
 80095de:	4013      	ands	r3, r2
 80095e0:	0019      	movs	r1, r3
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	430a      	orrs	r2, r1
 80095ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095f2:	2220      	movs	r2, #32
 80095f4:	4013      	ands	r3, r2
 80095f6:	d00b      	beq.n	8009610 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	689b      	ldr	r3, [r3, #8]
 80095fe:	4a25      	ldr	r2, [pc, #148]	@ (8009694 <UART_AdvFeatureConfig+0x158>)
 8009600:	4013      	ands	r3, r2
 8009602:	0019      	movs	r1, r3
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	430a      	orrs	r2, r1
 800960e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009614:	2240      	movs	r2, #64	@ 0x40
 8009616:	4013      	ands	r3, r2
 8009618:	d01d      	beq.n	8009656 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	685b      	ldr	r3, [r3, #4]
 8009620:	4a1d      	ldr	r2, [pc, #116]	@ (8009698 <UART_AdvFeatureConfig+0x15c>)
 8009622:	4013      	ands	r3, r2
 8009624:	0019      	movs	r1, r3
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	430a      	orrs	r2, r1
 8009630:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009636:	2380      	movs	r3, #128	@ 0x80
 8009638:	035b      	lsls	r3, r3, #13
 800963a:	429a      	cmp	r2, r3
 800963c:	d10b      	bne.n	8009656 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	4a15      	ldr	r2, [pc, #84]	@ (800969c <UART_AdvFeatureConfig+0x160>)
 8009646:	4013      	ands	r3, r2
 8009648:	0019      	movs	r1, r3
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	430a      	orrs	r2, r1
 8009654:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800965a:	2280      	movs	r2, #128	@ 0x80
 800965c:	4013      	ands	r3, r2
 800965e:	d00b      	beq.n	8009678 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	4a0e      	ldr	r2, [pc, #56]	@ (80096a0 <UART_AdvFeatureConfig+0x164>)
 8009668:	4013      	ands	r3, r2
 800966a:	0019      	movs	r1, r3
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	430a      	orrs	r2, r1
 8009676:	605a      	str	r2, [r3, #4]
  }
}
 8009678:	46c0      	nop			@ (mov r8, r8)
 800967a:	46bd      	mov	sp, r7
 800967c:	b002      	add	sp, #8
 800967e:	bd80      	pop	{r7, pc}
 8009680:	ffff7fff 	.word	0xffff7fff
 8009684:	fffdffff 	.word	0xfffdffff
 8009688:	fffeffff 	.word	0xfffeffff
 800968c:	fffbffff 	.word	0xfffbffff
 8009690:	ffffefff 	.word	0xffffefff
 8009694:	ffffdfff 	.word	0xffffdfff
 8009698:	ffefffff 	.word	0xffefffff
 800969c:	ff9fffff 	.word	0xff9fffff
 80096a0:	fff7ffff 	.word	0xfff7ffff

080096a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b092      	sub	sp, #72	@ 0x48
 80096a8:	af02      	add	r7, sp, #8
 80096aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2290      	movs	r2, #144	@ 0x90
 80096b0:	2100      	movs	r1, #0
 80096b2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80096b4:	f7fb fce6 	bl	8005084 <HAL_GetTick>
 80096b8:	0003      	movs	r3, r0
 80096ba:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	2208      	movs	r2, #8
 80096c4:	4013      	ands	r3, r2
 80096c6:	2b08      	cmp	r3, #8
 80096c8:	d12d      	bne.n	8009726 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80096ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096cc:	2280      	movs	r2, #128	@ 0x80
 80096ce:	0391      	lsls	r1, r2, #14
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	4a47      	ldr	r2, [pc, #284]	@ (80097f0 <UART_CheckIdleState+0x14c>)
 80096d4:	9200      	str	r2, [sp, #0]
 80096d6:	2200      	movs	r2, #0
 80096d8:	f000 f88e 	bl	80097f8 <UART_WaitOnFlagUntilTimeout>
 80096dc:	1e03      	subs	r3, r0, #0
 80096de:	d022      	beq.n	8009726 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096e0:	f3ef 8310 	mrs	r3, PRIMASK
 80096e4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80096e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80096e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80096ea:	2301      	movs	r3, #1
 80096ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096f0:	f383 8810 	msr	PRIMASK, r3
}
 80096f4:	46c0      	nop			@ (mov r8, r8)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	681a      	ldr	r2, [r3, #0]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	2180      	movs	r1, #128	@ 0x80
 8009702:	438a      	bics	r2, r1
 8009704:	601a      	str	r2, [r3, #0]
 8009706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009708:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800970a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800970c:	f383 8810 	msr	PRIMASK, r3
}
 8009710:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2288      	movs	r2, #136	@ 0x88
 8009716:	2120      	movs	r1, #32
 8009718:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2284      	movs	r2, #132	@ 0x84
 800971e:	2100      	movs	r1, #0
 8009720:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009722:	2303      	movs	r3, #3
 8009724:	e060      	b.n	80097e8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	2204      	movs	r2, #4
 800972e:	4013      	ands	r3, r2
 8009730:	2b04      	cmp	r3, #4
 8009732:	d146      	bne.n	80097c2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009734:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009736:	2280      	movs	r2, #128	@ 0x80
 8009738:	03d1      	lsls	r1, r2, #15
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	4a2c      	ldr	r2, [pc, #176]	@ (80097f0 <UART_CheckIdleState+0x14c>)
 800973e:	9200      	str	r2, [sp, #0]
 8009740:	2200      	movs	r2, #0
 8009742:	f000 f859 	bl	80097f8 <UART_WaitOnFlagUntilTimeout>
 8009746:	1e03      	subs	r3, r0, #0
 8009748:	d03b      	beq.n	80097c2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800974a:	f3ef 8310 	mrs	r3, PRIMASK
 800974e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009750:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009752:	637b      	str	r3, [r7, #52]	@ 0x34
 8009754:	2301      	movs	r3, #1
 8009756:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	f383 8810 	msr	PRIMASK, r3
}
 800975e:	46c0      	nop			@ (mov r8, r8)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	681a      	ldr	r2, [r3, #0]
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	4922      	ldr	r1, [pc, #136]	@ (80097f4 <UART_CheckIdleState+0x150>)
 800976c:	400a      	ands	r2, r1
 800976e:	601a      	str	r2, [r3, #0]
 8009770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009772:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	f383 8810 	msr	PRIMASK, r3
}
 800977a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800977c:	f3ef 8310 	mrs	r3, PRIMASK
 8009780:	61bb      	str	r3, [r7, #24]
  return(result);
 8009782:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009784:	633b      	str	r3, [r7, #48]	@ 0x30
 8009786:	2301      	movs	r3, #1
 8009788:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800978a:	69fb      	ldr	r3, [r7, #28]
 800978c:	f383 8810 	msr	PRIMASK, r3
}
 8009790:	46c0      	nop			@ (mov r8, r8)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	689a      	ldr	r2, [r3, #8]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	2101      	movs	r1, #1
 800979e:	438a      	bics	r2, r1
 80097a0:	609a      	str	r2, [r3, #8]
 80097a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097a6:	6a3b      	ldr	r3, [r7, #32]
 80097a8:	f383 8810 	msr	PRIMASK, r3
}
 80097ac:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	228c      	movs	r2, #140	@ 0x8c
 80097b2:	2120      	movs	r1, #32
 80097b4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2284      	movs	r2, #132	@ 0x84
 80097ba:	2100      	movs	r1, #0
 80097bc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80097be:	2303      	movs	r3, #3
 80097c0:	e012      	b.n	80097e8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2288      	movs	r2, #136	@ 0x88
 80097c6:	2120      	movs	r1, #32
 80097c8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	228c      	movs	r2, #140	@ 0x8c
 80097ce:	2120      	movs	r1, #32
 80097d0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2200      	movs	r2, #0
 80097d6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2200      	movs	r2, #0
 80097dc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2284      	movs	r2, #132	@ 0x84
 80097e2:	2100      	movs	r1, #0
 80097e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80097e6:	2300      	movs	r3, #0
}
 80097e8:	0018      	movs	r0, r3
 80097ea:	46bd      	mov	sp, r7
 80097ec:	b010      	add	sp, #64	@ 0x40
 80097ee:	bd80      	pop	{r7, pc}
 80097f0:	01ffffff 	.word	0x01ffffff
 80097f4:	fffffedf 	.word	0xfffffedf

080097f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b084      	sub	sp, #16
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	60f8      	str	r0, [r7, #12]
 8009800:	60b9      	str	r1, [r7, #8]
 8009802:	603b      	str	r3, [r7, #0]
 8009804:	1dfb      	adds	r3, r7, #7
 8009806:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009808:	e051      	b.n	80098ae <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800980a:	69bb      	ldr	r3, [r7, #24]
 800980c:	3301      	adds	r3, #1
 800980e:	d04e      	beq.n	80098ae <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009810:	f7fb fc38 	bl	8005084 <HAL_GetTick>
 8009814:	0002      	movs	r2, r0
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	1ad3      	subs	r3, r2, r3
 800981a:	69ba      	ldr	r2, [r7, #24]
 800981c:	429a      	cmp	r2, r3
 800981e:	d302      	bcc.n	8009826 <UART_WaitOnFlagUntilTimeout+0x2e>
 8009820:	69bb      	ldr	r3, [r7, #24]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d101      	bne.n	800982a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8009826:	2303      	movs	r3, #3
 8009828:	e051      	b.n	80098ce <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	2204      	movs	r2, #4
 8009832:	4013      	ands	r3, r2
 8009834:	d03b      	beq.n	80098ae <UART_WaitOnFlagUntilTimeout+0xb6>
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	2b80      	cmp	r3, #128	@ 0x80
 800983a:	d038      	beq.n	80098ae <UART_WaitOnFlagUntilTimeout+0xb6>
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	2b40      	cmp	r3, #64	@ 0x40
 8009840:	d035      	beq.n	80098ae <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	69db      	ldr	r3, [r3, #28]
 8009848:	2208      	movs	r2, #8
 800984a:	4013      	ands	r3, r2
 800984c:	2b08      	cmp	r3, #8
 800984e:	d111      	bne.n	8009874 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	2208      	movs	r2, #8
 8009856:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	0018      	movs	r0, r3
 800985c:	f000 f83c 	bl	80098d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2290      	movs	r2, #144	@ 0x90
 8009864:	2108      	movs	r1, #8
 8009866:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2284      	movs	r2, #132	@ 0x84
 800986c:	2100      	movs	r1, #0
 800986e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8009870:	2301      	movs	r3, #1
 8009872:	e02c      	b.n	80098ce <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	69da      	ldr	r2, [r3, #28]
 800987a:	2380      	movs	r3, #128	@ 0x80
 800987c:	011b      	lsls	r3, r3, #4
 800987e:	401a      	ands	r2, r3
 8009880:	2380      	movs	r3, #128	@ 0x80
 8009882:	011b      	lsls	r3, r3, #4
 8009884:	429a      	cmp	r2, r3
 8009886:	d112      	bne.n	80098ae <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	2280      	movs	r2, #128	@ 0x80
 800988e:	0112      	lsls	r2, r2, #4
 8009890:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	0018      	movs	r0, r3
 8009896:	f000 f81f 	bl	80098d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2290      	movs	r2, #144	@ 0x90
 800989e:	2120      	movs	r1, #32
 80098a0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2284      	movs	r2, #132	@ 0x84
 80098a6:	2100      	movs	r1, #0
 80098a8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80098aa:	2303      	movs	r3, #3
 80098ac:	e00f      	b.n	80098ce <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	69db      	ldr	r3, [r3, #28]
 80098b4:	68ba      	ldr	r2, [r7, #8]
 80098b6:	4013      	ands	r3, r2
 80098b8:	68ba      	ldr	r2, [r7, #8]
 80098ba:	1ad3      	subs	r3, r2, r3
 80098bc:	425a      	negs	r2, r3
 80098be:	4153      	adcs	r3, r2
 80098c0:	b2db      	uxtb	r3, r3
 80098c2:	001a      	movs	r2, r3
 80098c4:	1dfb      	adds	r3, r7, #7
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	429a      	cmp	r2, r3
 80098ca:	d09e      	beq.n	800980a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80098cc:	2300      	movs	r3, #0
}
 80098ce:	0018      	movs	r0, r3
 80098d0:	46bd      	mov	sp, r7
 80098d2:	b004      	add	sp, #16
 80098d4:	bd80      	pop	{r7, pc}
	...

080098d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b08e      	sub	sp, #56	@ 0x38
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098e0:	f3ef 8310 	mrs	r3, PRIMASK
 80098e4:	617b      	str	r3, [r7, #20]
  return(result);
 80098e6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80098e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80098ea:	2301      	movs	r3, #1
 80098ec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098ee:	69bb      	ldr	r3, [r7, #24]
 80098f0:	f383 8810 	msr	PRIMASK, r3
}
 80098f4:	46c0      	nop			@ (mov r8, r8)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	681a      	ldr	r2, [r3, #0]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4926      	ldr	r1, [pc, #152]	@ (800999c <UART_EndRxTransfer+0xc4>)
 8009902:	400a      	ands	r2, r1
 8009904:	601a      	str	r2, [r3, #0]
 8009906:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009908:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800990a:	69fb      	ldr	r3, [r7, #28]
 800990c:	f383 8810 	msr	PRIMASK, r3
}
 8009910:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009912:	f3ef 8310 	mrs	r3, PRIMASK
 8009916:	623b      	str	r3, [r7, #32]
  return(result);
 8009918:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800991a:	633b      	str	r3, [r7, #48]	@ 0x30
 800991c:	2301      	movs	r3, #1
 800991e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009922:	f383 8810 	msr	PRIMASK, r3
}
 8009926:	46c0      	nop			@ (mov r8, r8)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	689a      	ldr	r2, [r3, #8]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	491b      	ldr	r1, [pc, #108]	@ (80099a0 <UART_EndRxTransfer+0xc8>)
 8009934:	400a      	ands	r2, r1
 8009936:	609a      	str	r2, [r3, #8]
 8009938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800993a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800993c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800993e:	f383 8810 	msr	PRIMASK, r3
}
 8009942:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009948:	2b01      	cmp	r3, #1
 800994a:	d118      	bne.n	800997e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800994c:	f3ef 8310 	mrs	r3, PRIMASK
 8009950:	60bb      	str	r3, [r7, #8]
  return(result);
 8009952:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009954:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009956:	2301      	movs	r3, #1
 8009958:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	f383 8810 	msr	PRIMASK, r3
}
 8009960:	46c0      	nop			@ (mov r8, r8)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	681a      	ldr	r2, [r3, #0]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	2110      	movs	r1, #16
 800996e:	438a      	bics	r2, r1
 8009970:	601a      	str	r2, [r3, #0]
 8009972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009974:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	f383 8810 	msr	PRIMASK, r3
}
 800997c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	228c      	movs	r2, #140	@ 0x8c
 8009982:	2120      	movs	r1, #32
 8009984:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2200      	movs	r2, #0
 800998a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2200      	movs	r2, #0
 8009990:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009992:	46c0      	nop			@ (mov r8, r8)
 8009994:	46bd      	mov	sp, r7
 8009996:	b00e      	add	sp, #56	@ 0x38
 8009998:	bd80      	pop	{r7, pc}
 800999a:	46c0      	nop			@ (mov r8, r8)
 800999c:	fffffedf 	.word	0xfffffedf
 80099a0:	effffffe 	.word	0xeffffffe

080099a4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b084      	sub	sp, #16
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2284      	movs	r2, #132	@ 0x84
 80099b0:	5c9b      	ldrb	r3, [r3, r2]
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d101      	bne.n	80099ba <HAL_UARTEx_DisableFifoMode+0x16>
 80099b6:	2302      	movs	r3, #2
 80099b8:	e027      	b.n	8009a0a <HAL_UARTEx_DisableFifoMode+0x66>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2284      	movs	r2, #132	@ 0x84
 80099be:	2101      	movs	r1, #1
 80099c0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2288      	movs	r2, #136	@ 0x88
 80099c6:	2124      	movs	r1, #36	@ 0x24
 80099c8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	681a      	ldr	r2, [r3, #0]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	2101      	movs	r1, #1
 80099de:	438a      	bics	r2, r1
 80099e0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	4a0b      	ldr	r2, [pc, #44]	@ (8009a14 <HAL_UARTEx_DisableFifoMode+0x70>)
 80099e6:	4013      	ands	r3, r2
 80099e8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2200      	movs	r2, #0
 80099ee:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	68fa      	ldr	r2, [r7, #12]
 80099f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2288      	movs	r2, #136	@ 0x88
 80099fc:	2120      	movs	r1, #32
 80099fe:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2284      	movs	r2, #132	@ 0x84
 8009a04:	2100      	movs	r1, #0
 8009a06:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009a08:	2300      	movs	r3, #0
}
 8009a0a:	0018      	movs	r0, r3
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	b004      	add	sp, #16
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	46c0      	nop			@ (mov r8, r8)
 8009a14:	dfffffff 	.word	0xdfffffff

08009a18 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b084      	sub	sp, #16
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2284      	movs	r2, #132	@ 0x84
 8009a26:	5c9b      	ldrb	r3, [r3, r2]
 8009a28:	2b01      	cmp	r3, #1
 8009a2a:	d101      	bne.n	8009a30 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009a2c:	2302      	movs	r3, #2
 8009a2e:	e02e      	b.n	8009a8e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2284      	movs	r2, #132	@ 0x84
 8009a34:	2101      	movs	r1, #1
 8009a36:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2288      	movs	r2, #136	@ 0x88
 8009a3c:	2124      	movs	r1, #36	@ 0x24
 8009a3e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	681a      	ldr	r2, [r3, #0]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	2101      	movs	r1, #1
 8009a54:	438a      	bics	r2, r1
 8009a56:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	689b      	ldr	r3, [r3, #8]
 8009a5e:	00db      	lsls	r3, r3, #3
 8009a60:	08d9      	lsrs	r1, r3, #3
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	683a      	ldr	r2, [r7, #0]
 8009a68:	430a      	orrs	r2, r1
 8009a6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	0018      	movs	r0, r3
 8009a70:	f000 f854 	bl	8009b1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	68fa      	ldr	r2, [r7, #12]
 8009a7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2288      	movs	r2, #136	@ 0x88
 8009a80:	2120      	movs	r1, #32
 8009a82:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2284      	movs	r2, #132	@ 0x84
 8009a88:	2100      	movs	r1, #0
 8009a8a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009a8c:	2300      	movs	r3, #0
}
 8009a8e:	0018      	movs	r0, r3
 8009a90:	46bd      	mov	sp, r7
 8009a92:	b004      	add	sp, #16
 8009a94:	bd80      	pop	{r7, pc}
	...

08009a98 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2284      	movs	r2, #132	@ 0x84
 8009aa6:	5c9b      	ldrb	r3, [r3, r2]
 8009aa8:	2b01      	cmp	r3, #1
 8009aaa:	d101      	bne.n	8009ab0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009aac:	2302      	movs	r3, #2
 8009aae:	e02f      	b.n	8009b10 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2284      	movs	r2, #132	@ 0x84
 8009ab4:	2101      	movs	r1, #1
 8009ab6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2288      	movs	r2, #136	@ 0x88
 8009abc:	2124      	movs	r1, #36	@ 0x24
 8009abe:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	681a      	ldr	r2, [r3, #0]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	2101      	movs	r1, #1
 8009ad4:	438a      	bics	r2, r1
 8009ad6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	689b      	ldr	r3, [r3, #8]
 8009ade:	4a0e      	ldr	r2, [pc, #56]	@ (8009b18 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8009ae0:	4013      	ands	r3, r2
 8009ae2:	0019      	movs	r1, r3
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	683a      	ldr	r2, [r7, #0]
 8009aea:	430a      	orrs	r2, r1
 8009aec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	0018      	movs	r0, r3
 8009af2:	f000 f813 	bl	8009b1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	68fa      	ldr	r2, [r7, #12]
 8009afc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2288      	movs	r2, #136	@ 0x88
 8009b02:	2120      	movs	r1, #32
 8009b04:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2284      	movs	r2, #132	@ 0x84
 8009b0a:	2100      	movs	r1, #0
 8009b0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009b0e:	2300      	movs	r3, #0
}
 8009b10:	0018      	movs	r0, r3
 8009b12:	46bd      	mov	sp, r7
 8009b14:	b004      	add	sp, #16
 8009b16:	bd80      	pop	{r7, pc}
 8009b18:	f1ffffff 	.word	0xf1ffffff

08009b1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b1e:	b085      	sub	sp, #20
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d108      	bne.n	8009b3e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	226a      	movs	r2, #106	@ 0x6a
 8009b30:	2101      	movs	r1, #1
 8009b32:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2268      	movs	r2, #104	@ 0x68
 8009b38:	2101      	movs	r1, #1
 8009b3a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009b3c:	e043      	b.n	8009bc6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009b3e:	260f      	movs	r6, #15
 8009b40:	19bb      	adds	r3, r7, r6
 8009b42:	2208      	movs	r2, #8
 8009b44:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009b46:	200e      	movs	r0, #14
 8009b48:	183b      	adds	r3, r7, r0
 8009b4a:	2208      	movs	r2, #8
 8009b4c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	689b      	ldr	r3, [r3, #8]
 8009b54:	0e5b      	lsrs	r3, r3, #25
 8009b56:	b2da      	uxtb	r2, r3
 8009b58:	240d      	movs	r4, #13
 8009b5a:	193b      	adds	r3, r7, r4
 8009b5c:	2107      	movs	r1, #7
 8009b5e:	400a      	ands	r2, r1
 8009b60:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	689b      	ldr	r3, [r3, #8]
 8009b68:	0f5b      	lsrs	r3, r3, #29
 8009b6a:	b2da      	uxtb	r2, r3
 8009b6c:	250c      	movs	r5, #12
 8009b6e:	197b      	adds	r3, r7, r5
 8009b70:	2107      	movs	r1, #7
 8009b72:	400a      	ands	r2, r1
 8009b74:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b76:	183b      	adds	r3, r7, r0
 8009b78:	781b      	ldrb	r3, [r3, #0]
 8009b7a:	197a      	adds	r2, r7, r5
 8009b7c:	7812      	ldrb	r2, [r2, #0]
 8009b7e:	4914      	ldr	r1, [pc, #80]	@ (8009bd0 <UARTEx_SetNbDataToProcess+0xb4>)
 8009b80:	5c8a      	ldrb	r2, [r1, r2]
 8009b82:	435a      	muls	r2, r3
 8009b84:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8009b86:	197b      	adds	r3, r7, r5
 8009b88:	781b      	ldrb	r3, [r3, #0]
 8009b8a:	4a12      	ldr	r2, [pc, #72]	@ (8009bd4 <UARTEx_SetNbDataToProcess+0xb8>)
 8009b8c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b8e:	0019      	movs	r1, r3
 8009b90:	f7f6 fb5c 	bl	800024c <__divsi3>
 8009b94:	0003      	movs	r3, r0
 8009b96:	b299      	uxth	r1, r3
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	226a      	movs	r2, #106	@ 0x6a
 8009b9c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b9e:	19bb      	adds	r3, r7, r6
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	193a      	adds	r2, r7, r4
 8009ba4:	7812      	ldrb	r2, [r2, #0]
 8009ba6:	490a      	ldr	r1, [pc, #40]	@ (8009bd0 <UARTEx_SetNbDataToProcess+0xb4>)
 8009ba8:	5c8a      	ldrb	r2, [r1, r2]
 8009baa:	435a      	muls	r2, r3
 8009bac:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8009bae:	193b      	adds	r3, r7, r4
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	4a08      	ldr	r2, [pc, #32]	@ (8009bd4 <UARTEx_SetNbDataToProcess+0xb8>)
 8009bb4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009bb6:	0019      	movs	r1, r3
 8009bb8:	f7f6 fb48 	bl	800024c <__divsi3>
 8009bbc:	0003      	movs	r3, r0
 8009bbe:	b299      	uxth	r1, r3
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2268      	movs	r2, #104	@ 0x68
 8009bc4:	5299      	strh	r1, [r3, r2]
}
 8009bc6:	46c0      	nop			@ (mov r8, r8)
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	b005      	add	sp, #20
 8009bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bce:	46c0      	nop			@ (mov r8, r8)
 8009bd0:	08010550 	.word	0x08010550
 8009bd4:	08010558 	.word	0x08010558

08009bd8 <hci_disconnection_complete_event_process>:
 * @param Reason Reason for disconnection. See Error Codes.
 * @retval None
 */

tBleStatus hci_disconnection_complete_event_process(uint8_t *buffer_in)
{
 8009bd8:	b590      	push	{r4, r7, lr}
 8009bda:	b085      	sub	sp, #20
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009be0:	240f      	movs	r4, #15
 8009be2:	193b      	adds	r3, r7, r4
 8009be4:	2200      	movs	r2, #0
 8009be6:	701a      	strb	r2, [r3, #0]
  /* Input params */
  hci_disconnection_complete_event_rp0 *rp0 = (hci_disconnection_complete_event_rp0 *)buffer_in;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	60bb      	str	r3, [r7, #8]
  hci_disconnection_complete_event(rp0->Status,
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	7818      	ldrb	r0, [r3, #0]
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	785a      	ldrb	r2, [r3, #1]
 8009bf4:	789b      	ldrb	r3, [r3, #2]
 8009bf6:	021b      	lsls	r3, r3, #8
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	b299      	uxth	r1, r3
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	78db      	ldrb	r3, [r3, #3]
 8009c00:	001a      	movs	r2, r3
 8009c02:	f7f8 feed 	bl	80029e0 <hci_disconnection_complete_event>
                                   rp0->Connection_Handle,
                                   rp0->Reason);

  return status;
 8009c06:	193b      	adds	r3, r7, r4
 8009c08:	781b      	ldrb	r3, [r3, #0]
}
 8009c0a:	0018      	movs	r0, r3
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	b005      	add	sp, #20
 8009c10:	bd90      	pop	{r4, r7, pc}

08009c12 <hci_encryption_change_event_process>:
 *        - 0x01: Link Level Encryption is ON with AES-CCM
 * @retval None
 */

tBleStatus hci_encryption_change_event_process(uint8_t *buffer_in)
{
 8009c12:	b590      	push	{r4, r7, lr}
 8009c14:	b085      	sub	sp, #20
 8009c16:	af00      	add	r7, sp, #0
 8009c18:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009c1a:	240f      	movs	r4, #15
 8009c1c:	193b      	adds	r3, r7, r4
 8009c1e:	2200      	movs	r2, #0
 8009c20:	701a      	strb	r2, [r3, #0]
  /* Input params */
  hci_encryption_change_event_rp0 *rp0 = (hci_encryption_change_event_rp0 *)buffer_in;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	60bb      	str	r3, [r7, #8]
  hci_encryption_change_event(rp0->Status,
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	7818      	ldrb	r0, [r3, #0]
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	785a      	ldrb	r2, [r3, #1]
 8009c2e:	789b      	ldrb	r3, [r3, #2]
 8009c30:	021b      	lsls	r3, r3, #8
 8009c32:	4313      	orrs	r3, r2
 8009c34:	b299      	uxth	r1, r3
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	78db      	ldrb	r3, [r3, #3]
 8009c3a:	001a      	movs	r2, r3
 8009c3c:	f001 fa0a 	bl	800b054 <hci_encryption_change_event>
                              rp0->Connection_Handle,
                              rp0->Encryption_Enabled);

  return status;
 8009c40:	193b      	adds	r3, r7, r4
 8009c42:	781b      	ldrb	r3, [r3, #0]
}
 8009c44:	0018      	movs	r0, r3
 8009c46:	46bd      	mov	sp, r7
 8009c48:	b005      	add	sp, #20
 8009c4a:	bd90      	pop	{r4, r7, pc}

08009c4c <hci_read_remote_version_information_complete_event_process>:
 * @param Subversion Subversion of the LMP in the remote Controller
 * @retval None
 */

tBleStatus hci_read_remote_version_information_complete_event_process(uint8_t *buffer_in)
{
 8009c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c4e:	b087      	sub	sp, #28
 8009c50:	af02      	add	r7, sp, #8
 8009c52:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009c54:	260f      	movs	r6, #15
 8009c56:	19bb      	adds	r3, r7, r6
 8009c58:	2200      	movs	r2, #0
 8009c5a:	701a      	strb	r2, [r3, #0]
  /* Input params */
  hci_read_remote_version_information_complete_event_rp0 *rp0 = (hci_read_remote_version_information_complete_event_rp0 *)buffer_in;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	60bb      	str	r3, [r7, #8]
  hci_read_remote_version_information_complete_event(rp0->Status,
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	7818      	ldrb	r0, [r3, #0]
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	785a      	ldrb	r2, [r3, #1]
 8009c68:	789b      	ldrb	r3, [r3, #2]
 8009c6a:	021b      	lsls	r3, r3, #8
 8009c6c:	4313      	orrs	r3, r2
 8009c6e:	b299      	uxth	r1, r3
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	78dc      	ldrb	r4, [r3, #3]
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	791a      	ldrb	r2, [r3, #4]
 8009c78:	795b      	ldrb	r3, [r3, #5]
 8009c7a:	021b      	lsls	r3, r3, #8
 8009c7c:	4313      	orrs	r3, r2
 8009c7e:	b29d      	uxth	r5, r3
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	799a      	ldrb	r2, [r3, #6]
 8009c84:	79db      	ldrb	r3, [r3, #7]
 8009c86:	021b      	lsls	r3, r3, #8
 8009c88:	4313      	orrs	r3, r2
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	9300      	str	r3, [sp, #0]
 8009c8e:	002b      	movs	r3, r5
 8009c90:	0022      	movs	r2, r4
 8009c92:	f001 f9f9 	bl	800b088 <hci_read_remote_version_information_complete_event>
                                                     rp0->Connection_Handle,
                                                     rp0->Version,
                                                     rp0->Manufacturer_Name,
                                                     rp0->Subversion);

  return status;
 8009c96:	19bb      	adds	r3, r7, r6
 8009c98:	781b      	ldrb	r3, [r3, #0]
}
 8009c9a:	0018      	movs	r0, r3
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	b005      	add	sp, #20
 8009ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009ca2 <hci_hardware_error_event_process>:
 *        - 0x03: Internal queue overflow error
 * @retval None
 */

tBleStatus hci_hardware_error_event_process(uint8_t *buffer_in)
{
 8009ca2:	b590      	push	{r4, r7, lr}
 8009ca4:	b085      	sub	sp, #20
 8009ca6:	af00      	add	r7, sp, #0
 8009ca8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009caa:	240f      	movs	r4, #15
 8009cac:	193b      	adds	r3, r7, r4
 8009cae:	2200      	movs	r2, #0
 8009cb0:	701a      	strb	r2, [r3, #0]
  /* Input params */
  hci_hardware_error_event_rp0 *rp0 = (hci_hardware_error_event_rp0 *)buffer_in;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	60bb      	str	r3, [r7, #8]
  hci_hardware_error_event(rp0->Hardware_Code);
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	781b      	ldrb	r3, [r3, #0]
 8009cba:	0018      	movs	r0, r3
 8009cbc:	f001 fa02 	bl	800b0c4 <hci_hardware_error_event>

  return status;
 8009cc0:	193b      	adds	r3, r7, r4
 8009cc2:	781b      	ldrb	r3, [r3, #0]
}
 8009cc4:	0018      	movs	r0, r3
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	b005      	add	sp, #20
 8009cca:	bd90      	pop	{r4, r7, pc}

08009ccc <hci_number_of_completed_packets_event_process>:
 * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
 * @retval None
 */

tBleStatus hci_number_of_completed_packets_event_process(uint8_t *buffer_in)
{
 8009ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cce:	b0a7      	sub	sp, #156	@ 0x9c
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009cd4:	238f      	movs	r3, #143	@ 0x8f
 8009cd6:	18fb      	adds	r3, r7, r3
 8009cd8:	2200      	movs	r2, #0
 8009cda:	701a      	strb	r2, [r3, #0]
  /* Input params */
  hci_number_of_completed_packets_event_rp0 *rp0 = (hci_number_of_completed_packets_event_rp0 *)buffer_in;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2288      	movs	r2, #136	@ 0x88
 8009ce0:	18ba      	adds	r2, r7, r2
 8009ce2:	6013      	str	r3, [r2, #0]
  uint8_t size = 1;
 8009ce4:	2397      	movs	r3, #151	@ 0x97
 8009ce6:	18fb      	adds	r3, r7, r3
 8009ce8:	2201      	movs	r2, #1
 8009cea:	701a      	strb	r2, [r3, #0]
  int i;
  Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Packets_Pair_Entry_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8009cec:	2300      	movs	r3, #0
 8009cee:	2290      	movs	r2, #144	@ 0x90
 8009cf0:	18ba      	adds	r2, r7, r2
 8009cf2:	6013      	str	r3, [r2, #0]
 8009cf4:	e037      	b.n	8009d66 <hci_number_of_completed_packets_event_process+0x9a>
    Handle_Packets_Pair_Entry[i].Connection_Handle = rp0->Handle_Packets_Pair_Entry[i].Connection_Handle;
 8009cf6:	2588      	movs	r5, #136	@ 0x88
 8009cf8:	197b      	adds	r3, r7, r5
 8009cfa:	681a      	ldr	r2, [r3, #0]
 8009cfc:	2090      	movs	r0, #144	@ 0x90
 8009cfe:	183b      	adds	r3, r7, r0
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	009b      	lsls	r3, r3, #2
 8009d04:	18d1      	adds	r1, r2, r3
 8009d06:	7849      	ldrb	r1, [r1, #1]
 8009d08:	18d3      	adds	r3, r2, r3
 8009d0a:	789b      	ldrb	r3, [r3, #2]
 8009d0c:	021b      	lsls	r3, r3, #8
 8009d0e:	430b      	orrs	r3, r1
 8009d10:	b299      	uxth	r1, r3
 8009d12:	2608      	movs	r6, #8
 8009d14:	19bb      	adds	r3, r7, r6
 8009d16:	183a      	adds	r2, r7, r0
 8009d18:	6812      	ldr	r2, [r2, #0]
 8009d1a:	0092      	lsls	r2, r2, #2
 8009d1c:	52d1      	strh	r1, [r2, r3]
    size += 2;
 8009d1e:	2497      	movs	r4, #151	@ 0x97
 8009d20:	193b      	adds	r3, r7, r4
 8009d22:	193a      	adds	r2, r7, r4
 8009d24:	7812      	ldrb	r2, [r2, #0]
 8009d26:	3202      	adds	r2, #2
 8009d28:	701a      	strb	r2, [r3, #0]
    Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets = rp0->Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets;
 8009d2a:	197b      	adds	r3, r7, r5
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	183b      	adds	r3, r7, r0
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	009b      	lsls	r3, r3, #2
 8009d34:	18d1      	adds	r1, r2, r3
 8009d36:	78c9      	ldrb	r1, [r1, #3]
 8009d38:	18d3      	adds	r3, r2, r3
 8009d3a:	791b      	ldrb	r3, [r3, #4]
 8009d3c:	021b      	lsls	r3, r3, #8
 8009d3e:	430b      	orrs	r3, r1
 8009d40:	b299      	uxth	r1, r3
 8009d42:	19ba      	adds	r2, r7, r6
 8009d44:	183b      	adds	r3, r7, r0
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	009b      	lsls	r3, r3, #2
 8009d4a:	18d3      	adds	r3, r2, r3
 8009d4c:	3302      	adds	r3, #2
 8009d4e:	1c0a      	adds	r2, r1, #0
 8009d50:	801a      	strh	r2, [r3, #0]
    size += 2;
 8009d52:	193b      	adds	r3, r7, r4
 8009d54:	193a      	adds	r2, r7, r4
 8009d56:	7812      	ldrb	r2, [r2, #0]
 8009d58:	3202      	adds	r2, #2
 8009d5a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8009d5c:	183b      	adds	r3, r7, r0
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	3301      	adds	r3, #1
 8009d62:	183a      	adds	r2, r7, r0
 8009d64:	6013      	str	r3, [r2, #0]
 8009d66:	2188      	movs	r1, #136	@ 0x88
 8009d68:	187b      	adds	r3, r7, r1
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	781b      	ldrb	r3, [r3, #0]
 8009d6e:	001a      	movs	r2, r3
 8009d70:	2390      	movs	r3, #144	@ 0x90
 8009d72:	18fb      	adds	r3, r7, r3
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	4293      	cmp	r3, r2
 8009d78:	dbbd      	blt.n	8009cf6 <hci_number_of_completed_packets_event_process+0x2a>
  }
  hci_number_of_completed_packets_event(rp0->Number_of_Handles,
 8009d7a:	187b      	adds	r3, r7, r1
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	781b      	ldrb	r3, [r3, #0]
 8009d80:	2208      	movs	r2, #8
 8009d82:	18ba      	adds	r2, r7, r2
 8009d84:	0011      	movs	r1, r2
 8009d86:	0018      	movs	r0, r3
 8009d88:	f001 f9ac 	bl	800b0e4 <hci_number_of_completed_packets_event>
                                        Handle_Packets_Pair_Entry);

  return status;
 8009d8c:	238f      	movs	r3, #143	@ 0x8f
 8009d8e:	18fb      	adds	r3, r7, r3
 8009d90:	781b      	ldrb	r3, [r3, #0]
}
 8009d92:	0018      	movs	r0, r3
 8009d94:	46bd      	mov	sp, r7
 8009d96:	b027      	add	sp, #156	@ 0x9c
 8009d98:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009d9a <hci_data_buffer_overflow_event_process>:
 *        - 0x01: ACL Buffer Overflow
 * @retval None
 */

tBleStatus hci_data_buffer_overflow_event_process(uint8_t *buffer_in)
{
 8009d9a:	b590      	push	{r4, r7, lr}
 8009d9c:	b085      	sub	sp, #20
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009da2:	240f      	movs	r4, #15
 8009da4:	193b      	adds	r3, r7, r4
 8009da6:	2200      	movs	r2, #0
 8009da8:	701a      	strb	r2, [r3, #0]
  /* Input params */
  hci_data_buffer_overflow_event_rp0 *rp0 = (hci_data_buffer_overflow_event_rp0 *)buffer_in;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	60bb      	str	r3, [r7, #8]
  hci_data_buffer_overflow_event(rp0->Link_Type);
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	781b      	ldrb	r3, [r3, #0]
 8009db2:	0018      	movs	r0, r3
 8009db4:	f001 f9a8 	bl	800b108 <hci_data_buffer_overflow_event>

  return status;
 8009db8:	193b      	adds	r3, r7, r4
 8009dba:	781b      	ldrb	r3, [r3, #0]
}
 8009dbc:	0018      	movs	r0, r3
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	b005      	add	sp, #20
 8009dc2:	bd90      	pop	{r4, r7, pc}

08009dc4 <hci_encryption_key_refresh_complete_event_process>:
 *        - 0x0000 ... 0x0EFF
 * @retval None
 */

tBleStatus hci_encryption_key_refresh_complete_event_process(uint8_t *buffer_in)
{
 8009dc4:	b590      	push	{r4, r7, lr}
 8009dc6:	b085      	sub	sp, #20
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009dcc:	240f      	movs	r4, #15
 8009dce:	193b      	adds	r3, r7, r4
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	701a      	strb	r2, [r3, #0]
  /* Input params */
  hci_encryption_key_refresh_complete_event_rp0 *rp0 = (hci_encryption_key_refresh_complete_event_rp0 *)buffer_in;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	60bb      	str	r3, [r7, #8]
  hci_encryption_key_refresh_complete_event(rp0->Status,
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	7818      	ldrb	r0, [r3, #0]
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	785a      	ldrb	r2, [r3, #1]
 8009de0:	789b      	ldrb	r3, [r3, #2]
 8009de2:	021b      	lsls	r3, r3, #8
 8009de4:	4313      	orrs	r3, r2
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	0019      	movs	r1, r3
 8009dea:	f001 f99d 	bl	800b128 <hci_encryption_key_refresh_complete_event>
                                            rp0->Connection_Handle);

  return status;
 8009dee:	193b      	adds	r3, r7, r4
 8009df0:	781b      	ldrb	r3, [r3, #0]
}
 8009df2:	0018      	movs	r0, r3
 8009df4:	46bd      	mov	sp, r7
 8009df6:	b005      	add	sp, #20
 8009df8:	bd90      	pop	{r4, r7, pc}

08009dfa <aci_blue_initialized_event_process>:
 *        - 0x09: System reset due to ECC error
 * @retval None
 */

tBleStatus aci_blue_initialized_event_process(uint8_t *buffer_in)
{
 8009dfa:	b590      	push	{r4, r7, lr}
 8009dfc:	b085      	sub	sp, #20
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009e02:	240f      	movs	r4, #15
 8009e04:	193b      	adds	r3, r7, r4
 8009e06:	2200      	movs	r2, #0
 8009e08:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_blue_initialized_event_rp0 *rp0 = (aci_blue_initialized_event_rp0 *)buffer_in;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	60bb      	str	r3, [r7, #8]
  aci_blue_initialized_event(rp0->Reason_Code);
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	781b      	ldrb	r3, [r3, #0]
 8009e12:	0018      	movs	r0, r3
 8009e14:	f001 fce0 	bl	800b7d8 <aci_blue_initialized_event>

  return status;
 8009e18:	193b      	adds	r3, r7, r4
 8009e1a:	781b      	ldrb	r3, [r3, #0]
}
 8009e1c:	0018      	movs	r0, r3
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	b005      	add	sp, #20
 8009e22:	bd90      	pop	{r4, r7, pc}

08009e24 <aci_blue_events_lost_event_process>:
 *        - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
 * @retval None
 */

tBleStatus aci_blue_events_lost_event_process(uint8_t *buffer_in)
{
 8009e24:	b590      	push	{r4, r7, lr}
 8009e26:	b085      	sub	sp, #20
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009e2c:	240f      	movs	r4, #15
 8009e2e:	193b      	adds	r3, r7, r4
 8009e30:	2200      	movs	r2, #0
 8009e32:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_blue_events_lost_event_rp0 *rp0 = (aci_blue_events_lost_event_rp0 *)buffer_in;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	60bb      	str	r3, [r7, #8]
  aci_blue_events_lost_event(rp0->Lost_Events);
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	0018      	movs	r0, r3
 8009e3c:	f001 fce0 	bl	800b800 <aci_blue_events_lost_event>

  return status;
 8009e40:	193b      	adds	r3, r7, r4
 8009e42:	781b      	ldrb	r3, [r3, #0]
}
 8009e44:	0018      	movs	r0, r3
 8009e46:	46bd      	mov	sp, r7
 8009e48:	b005      	add	sp, #20
 8009e4a:	bd90      	pop	{r4, r7, pc}

08009e4c <aci_blue_crash_info_event_process>:
 * @param Debug_Data Debug data
 * @retval None
 */

tBleStatus aci_blue_crash_info_event_process(uint8_t *buffer_in)
{
 8009e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e4e:	46de      	mov	lr, fp
 8009e50:	4657      	mov	r7, sl
 8009e52:	464e      	mov	r6, r9
 8009e54:	4645      	mov	r5, r8
 8009e56:	b5e0      	push	{r5, r6, r7, lr}
 8009e58:	b08d      	sub	sp, #52	@ 0x34
 8009e5a:	af08      	add	r7, sp, #32
 8009e5c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009e5e:	230f      	movs	r3, #15
 8009e60:	18fb      	adds	r3, r7, r3
 8009e62:	2200      	movs	r2, #0
 8009e64:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_blue_crash_info_event_rp0 *rp0 = (aci_blue_crash_info_event_rp0 *)buffer_in;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	60bb      	str	r3, [r7, #8]
  aci_blue_crash_info_event(rp0->Crash_Type,
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	7818      	ldrb	r0, [r3, #0]
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	785a      	ldrb	r2, [r3, #1]
 8009e72:	7899      	ldrb	r1, [r3, #2]
 8009e74:	0209      	lsls	r1, r1, #8
 8009e76:	430a      	orrs	r2, r1
 8009e78:	78d9      	ldrb	r1, [r3, #3]
 8009e7a:	0409      	lsls	r1, r1, #16
 8009e7c:	430a      	orrs	r2, r1
 8009e7e:	791b      	ldrb	r3, [r3, #4]
 8009e80:	061b      	lsls	r3, r3, #24
 8009e82:	4313      	orrs	r3, r2
 8009e84:	4699      	mov	r9, r3
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	795a      	ldrb	r2, [r3, #5]
 8009e8a:	7999      	ldrb	r1, [r3, #6]
 8009e8c:	0209      	lsls	r1, r1, #8
 8009e8e:	430a      	orrs	r2, r1
 8009e90:	79d9      	ldrb	r1, [r3, #7]
 8009e92:	0409      	lsls	r1, r1, #16
 8009e94:	430a      	orrs	r2, r1
 8009e96:	7a1b      	ldrb	r3, [r3, #8]
 8009e98:	061b      	lsls	r3, r3, #24
 8009e9a:	4313      	orrs	r3, r2
 8009e9c:	469a      	mov	sl, r3
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	7a5a      	ldrb	r2, [r3, #9]
 8009ea2:	7a99      	ldrb	r1, [r3, #10]
 8009ea4:	0209      	lsls	r1, r1, #8
 8009ea6:	430a      	orrs	r2, r1
 8009ea8:	7ad9      	ldrb	r1, [r3, #11]
 8009eaa:	0409      	lsls	r1, r1, #16
 8009eac:	430a      	orrs	r2, r1
 8009eae:	7b1b      	ldrb	r3, [r3, #12]
 8009eb0:	061b      	lsls	r3, r3, #24
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	469b      	mov	fp, r3
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	7b5a      	ldrb	r2, [r3, #13]
 8009eba:	7b99      	ldrb	r1, [r3, #14]
 8009ebc:	0209      	lsls	r1, r1, #8
 8009ebe:	430a      	orrs	r2, r1
 8009ec0:	7bd9      	ldrb	r1, [r3, #15]
 8009ec2:	0409      	lsls	r1, r1, #16
 8009ec4:	430a      	orrs	r2, r1
 8009ec6:	7c1b      	ldrb	r3, [r3, #16]
 8009ec8:	061b      	lsls	r3, r3, #24
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	001c      	movs	r4, r3
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	7c5a      	ldrb	r2, [r3, #17]
 8009ed2:	7c99      	ldrb	r1, [r3, #18]
 8009ed4:	0209      	lsls	r1, r1, #8
 8009ed6:	430a      	orrs	r2, r1
 8009ed8:	7cd9      	ldrb	r1, [r3, #19]
 8009eda:	0409      	lsls	r1, r1, #16
 8009edc:	430a      	orrs	r2, r1
 8009ede:	7d1b      	ldrb	r3, [r3, #20]
 8009ee0:	061b      	lsls	r3, r3, #24
 8009ee2:	4313      	orrs	r3, r2
 8009ee4:	001d      	movs	r5, r3
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	7d5a      	ldrb	r2, [r3, #21]
 8009eea:	7d99      	ldrb	r1, [r3, #22]
 8009eec:	0209      	lsls	r1, r1, #8
 8009eee:	430a      	orrs	r2, r1
 8009ef0:	7dd9      	ldrb	r1, [r3, #23]
 8009ef2:	0409      	lsls	r1, r1, #16
 8009ef4:	430a      	orrs	r2, r1
 8009ef6:	7e1b      	ldrb	r3, [r3, #24]
 8009ef8:	061b      	lsls	r3, r3, #24
 8009efa:	4313      	orrs	r3, r2
 8009efc:	001e      	movs	r6, r3
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	7e5a      	ldrb	r2, [r3, #25]
 8009f02:	7e99      	ldrb	r1, [r3, #26]
 8009f04:	0209      	lsls	r1, r1, #8
 8009f06:	430a      	orrs	r2, r1
 8009f08:	7ed9      	ldrb	r1, [r3, #27]
 8009f0a:	0409      	lsls	r1, r1, #16
 8009f0c:	430a      	orrs	r2, r1
 8009f0e:	7f1b      	ldrb	r3, [r3, #28]
 8009f10:	061b      	lsls	r3, r3, #24
 8009f12:	4313      	orrs	r3, r2
 8009f14:	469c      	mov	ip, r3
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	7f5a      	ldrb	r2, [r3, #29]
 8009f1a:	7f99      	ldrb	r1, [r3, #30]
 8009f1c:	0209      	lsls	r1, r1, #8
 8009f1e:	430a      	orrs	r2, r1
 8009f20:	7fd9      	ldrb	r1, [r3, #31]
 8009f22:	0409      	lsls	r1, r1, #16
 8009f24:	430a      	orrs	r2, r1
 8009f26:	2120      	movs	r1, #32
 8009f28:	5c5b      	ldrb	r3, [r3, r1]
 8009f2a:	061b      	lsls	r3, r3, #24
 8009f2c:	4313      	orrs	r3, r2
 8009f2e:	4698      	mov	r8, r3
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	2221      	movs	r2, #33	@ 0x21
 8009f34:	5c9a      	ldrb	r2, [r3, r2]
 8009f36:	2122      	movs	r1, #34	@ 0x22
 8009f38:	5c59      	ldrb	r1, [r3, r1]
 8009f3a:	0209      	lsls	r1, r1, #8
 8009f3c:	430a      	orrs	r2, r1
 8009f3e:	2123      	movs	r1, #35	@ 0x23
 8009f40:	5c59      	ldrb	r1, [r3, r1]
 8009f42:	0409      	lsls	r1, r1, #16
 8009f44:	430a      	orrs	r2, r1
 8009f46:	2124      	movs	r1, #36	@ 0x24
 8009f48:	5c5b      	ldrb	r3, [r3, r1]
 8009f4a:	061b      	lsls	r3, r3, #24
 8009f4c:	4313      	orrs	r3, r2
 8009f4e:	0019      	movs	r1, r3
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	2225      	movs	r2, #37	@ 0x25
 8009f54:	5c9b      	ldrb	r3, [r3, r2]
                            rp0->R12,
                            rp0->LR,
                            rp0->PC,
                            rp0->xPSR,
                            rp0->Debug_Data_Length,
                            rp0->Debug_Data);
 8009f56:	68ba      	ldr	r2, [r7, #8]
 8009f58:	3226      	adds	r2, #38	@ 0x26
  aci_blue_crash_info_event(rp0->Crash_Type,
 8009f5a:	9207      	str	r2, [sp, #28]
 8009f5c:	9306      	str	r3, [sp, #24]
 8009f5e:	9105      	str	r1, [sp, #20]
 8009f60:	4642      	mov	r2, r8
 8009f62:	9204      	str	r2, [sp, #16]
 8009f64:	4662      	mov	r2, ip
 8009f66:	9203      	str	r2, [sp, #12]
 8009f68:	9602      	str	r6, [sp, #8]
 8009f6a:	9501      	str	r5, [sp, #4]
 8009f6c:	9400      	str	r4, [sp, #0]
 8009f6e:	465b      	mov	r3, fp
 8009f70:	4652      	mov	r2, sl
 8009f72:	4649      	mov	r1, r9
 8009f74:	f001 fc52 	bl	800b81c <aci_blue_crash_info_event>

  return status;
 8009f78:	230f      	movs	r3, #15
 8009f7a:	18fb      	adds	r3, r7, r3
 8009f7c:	781b      	ldrb	r3, [r3, #0]
}
 8009f7e:	0018      	movs	r0, r3
 8009f80:	46bd      	mov	sp, r7
 8009f82:	b005      	add	sp, #20
 8009f84:	bcf0      	pop	{r4, r5, r6, r7}
 8009f86:	46bb      	mov	fp, r7
 8009f88:	46b2      	mov	sl, r6
 8009f8a:	46a9      	mov	r9, r5
 8009f8c:	46a0      	mov	r8, r4
 8009f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009f90 <aci_hal_end_of_radio_activity_event_process>:
 *        time units.
 * @retval None
 */

tBleStatus aci_hal_end_of_radio_activity_event_process(uint8_t *buffer_in)
{
 8009f90:	b5b0      	push	{r4, r5, r7, lr}
 8009f92:	b084      	sub	sp, #16
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009f98:	250f      	movs	r5, #15
 8009f9a:	197b      	adds	r3, r7, r5
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_hal_end_of_radio_activity_event_rp0 *rp0 = (aci_hal_end_of_radio_activity_event_rp0 *)buffer_in;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	60bb      	str	r3, [r7, #8]
  aci_hal_end_of_radio_activity_event(rp0->Last_State,
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	7818      	ldrb	r0, [r3, #0]
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	785c      	ldrb	r4, [r3, #1]
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	789a      	ldrb	r2, [r3, #2]
 8009fb0:	78d9      	ldrb	r1, [r3, #3]
 8009fb2:	0209      	lsls	r1, r1, #8
 8009fb4:	430a      	orrs	r2, r1
 8009fb6:	7919      	ldrb	r1, [r3, #4]
 8009fb8:	0409      	lsls	r1, r1, #16
 8009fba:	430a      	orrs	r2, r1
 8009fbc:	795b      	ldrb	r3, [r3, #5]
 8009fbe:	061b      	lsls	r3, r3, #24
 8009fc0:	4313      	orrs	r3, r2
 8009fc2:	001a      	movs	r2, r3
 8009fc4:	0021      	movs	r1, r4
 8009fc6:	f001 fc3d 	bl	800b844 <aci_hal_end_of_radio_activity_event>
                                      rp0->Next_State,
                                      rp0->Next_State_SysTime);

  return status;
 8009fca:	197b      	adds	r3, r7, r5
 8009fcc:	781b      	ldrb	r3, [r3, #0]
}
 8009fce:	0018      	movs	r0, r3
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	b004      	add	sp, #16
 8009fd4:	bdb0      	pop	{r4, r5, r7, pc}

08009fd6 <aci_hal_scan_req_report_event_process>:
 *        peer device
 * @retval None
 */

tBleStatus aci_hal_scan_req_report_event_process(uint8_t *buffer_in)
{
 8009fd6:	b590      	push	{r4, r7, lr}
 8009fd8:	b085      	sub	sp, #20
 8009fda:	af00      	add	r7, sp, #0
 8009fdc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009fde:	240f      	movs	r4, #15
 8009fe0:	193b      	adds	r3, r7, r4
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_hal_scan_req_report_event_rp0 *rp0 = (aci_hal_scan_req_report_event_rp0 *)buffer_in;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	60bb      	str	r3, [r7, #8]
  aci_hal_scan_req_report_event(rp0->RSSI,
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	2000      	movs	r0, #0
 8009fee:	5618      	ldrsb	r0, [r3, r0]
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	7859      	ldrb	r1, [r3, #1]
                                rp0->Peer_Address_Type,
                                rp0->Peer_Address);
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	3302      	adds	r3, #2
  aci_hal_scan_req_report_event(rp0->RSSI,
 8009ff8:	001a      	movs	r2, r3
 8009ffa:	f001 fc37 	bl	800b86c <aci_hal_scan_req_report_event>

  return status;
 8009ffe:	193b      	adds	r3, r7, r4
 800a000:	781b      	ldrb	r3, [r3, #0]
}
 800a002:	0018      	movs	r0, r3
 800a004:	46bd      	mov	sp, r7
 800a006:	b005      	add	sp, #20
 800a008:	bd90      	pop	{r4, r7, pc}

0800a00a <aci_hal_fw_error_event_process>:
 *        the connection handle where the abnormal condition has occurred.
 * @retval None
 */

tBleStatus aci_hal_fw_error_event_process(uint8_t *buffer_in)
{
 800a00a:	b590      	push	{r4, r7, lr}
 800a00c:	b085      	sub	sp, #20
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a012:	240f      	movs	r4, #15
 800a014:	193b      	adds	r3, r7, r4
 800a016:	2200      	movs	r2, #0
 800a018:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_hal_fw_error_event_rp0 *rp0 = (aci_hal_fw_error_event_rp0 *)buffer_in;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	60bb      	str	r3, [r7, #8]
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	7818      	ldrb	r0, [r3, #0]
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	7859      	ldrb	r1, [r3, #1]
                         rp0->Data_Length,
                         rp0->Data);
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	3302      	adds	r3, #2
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 800a02a:	001a      	movs	r2, r3
 800a02c:	f001 fc32 	bl	800b894 <aci_hal_fw_error_event>

  return status;
 800a030:	193b      	adds	r3, r7, r4
 800a032:	781b      	ldrb	r3, [r3, #0]
}
 800a034:	0018      	movs	r0, r3
 800a036:	46bd      	mov	sp, r7
 800a038:	b005      	add	sp, #20
 800a03a:	bd90      	pop	{r4, r7, pc}

0800a03c <aci_gap_limited_discoverable_event_process>:
 *        discoverable mode ends due to timeout. The timeout is 180 seconds.
 * @retval None
 */

tBleStatus aci_gap_limited_discoverable_event_process(uint8_t *buffer_in)
{
 800a03c:	b590      	push	{r4, r7, lr}
 800a03e:	b085      	sub	sp, #20
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a044:	240f      	movs	r4, #15
 800a046:	193b      	adds	r3, r7, r4
 800a048:	2200      	movs	r2, #0
 800a04a:	701a      	strb	r2, [r3, #0]
  aci_gap_limited_discoverable_event();
 800a04c:	f001 f93a 	bl	800b2c4 <aci_gap_limited_discoverable_event>

  return status;
 800a050:	193b      	adds	r3, r7, r4
 800a052:	781b      	ldrb	r3, [r3, #0]
}
 800a054:	0018      	movs	r0, r3
 800a056:	46bd      	mov	sp, r7
 800a058:	b005      	add	sp, #20
 800a05a:	bd90      	pop	{r4, r7, pc}

0800a05c <aci_gap_pairing_complete_event_process>:
 *        - 0x0C: SMP_SC_NUMCOMPARISON_FAILED
 * @retval None
 */

tBleStatus aci_gap_pairing_complete_event_process(uint8_t *buffer_in)
{
 800a05c:	b590      	push	{r4, r7, lr}
 800a05e:	b085      	sub	sp, #20
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a064:	240f      	movs	r4, #15
 800a066:	193b      	adds	r3, r7, r4
 800a068:	2200      	movs	r2, #0
 800a06a:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gap_pairing_complete_event_rp0 *rp0 = (aci_gap_pairing_complete_event_rp0 *)buffer_in;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	60bb      	str	r3, [r7, #8]
  aci_gap_pairing_complete_event(rp0->Connection_Handle,
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	781a      	ldrb	r2, [r3, #0]
 800a074:	785b      	ldrb	r3, [r3, #1]
 800a076:	021b      	lsls	r3, r3, #8
 800a078:	4313      	orrs	r3, r2
 800a07a:	b298      	uxth	r0, r3
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	7899      	ldrb	r1, [r3, #2]
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	78db      	ldrb	r3, [r3, #3]
 800a084:	001a      	movs	r2, r3
 800a086:	f001 f929 	bl	800b2dc <aci_gap_pairing_complete_event>
                                 rp0->Status,
                                 rp0->Reason);

  return status;
 800a08a:	193b      	adds	r3, r7, r4
 800a08c:	781b      	ldrb	r3, [r3, #0]
}
 800a08e:	0018      	movs	r0, r3
 800a090:	46bd      	mov	sp, r7
 800a092:	b005      	add	sp, #20
 800a094:	bd90      	pop	{r4, r7, pc}

0800a096 <aci_gap_pass_key_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_pass_key_req_event_process(uint8_t *buffer_in)
{
 800a096:	b590      	push	{r4, r7, lr}
 800a098:	b085      	sub	sp, #20
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a09e:	240f      	movs	r4, #15
 800a0a0:	193b      	adds	r3, r7, r4
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gap_pass_key_req_event_rp0 *rp0 = (aci_gap_pass_key_req_event_rp0 *)buffer_in;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	60bb      	str	r3, [r7, #8]
  aci_gap_pass_key_req_event(rp0->Connection_Handle);
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	781a      	ldrb	r2, [r3, #0]
 800a0ae:	785b      	ldrb	r3, [r3, #1]
 800a0b0:	021b      	lsls	r3, r3, #8
 800a0b2:	4313      	orrs	r3, r2
 800a0b4:	b29b      	uxth	r3, r3
 800a0b6:	0018      	movs	r0, r3
 800a0b8:	f001 f92a 	bl	800b310 <aci_gap_pass_key_req_event>

  return status;
 800a0bc:	193b      	adds	r3, r7, r4
 800a0be:	781b      	ldrb	r3, [r3, #0]
}
 800a0c0:	0018      	movs	r0, r3
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	b005      	add	sp, #20
 800a0c6:	bd90      	pop	{r4, r7, pc}

0800a0c8 <aci_gap_authorization_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_authorization_req_event_process(uint8_t *buffer_in)
{
 800a0c8:	b590      	push	{r4, r7, lr}
 800a0ca:	b085      	sub	sp, #20
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a0d0:	240f      	movs	r4, #15
 800a0d2:	193b      	adds	r3, r7, r4
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gap_authorization_req_event_rp0 *rp0 = (aci_gap_authorization_req_event_rp0 *)buffer_in;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	60bb      	str	r3, [r7, #8]
  aci_gap_authorization_req_event(rp0->Connection_Handle);
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	781a      	ldrb	r2, [r3, #0]
 800a0e0:	785b      	ldrb	r3, [r3, #1]
 800a0e2:	021b      	lsls	r3, r3, #8
 800a0e4:	4313      	orrs	r3, r2
 800a0e6:	b29b      	uxth	r3, r3
 800a0e8:	0018      	movs	r0, r3
 800a0ea:	f001 f921 	bl	800b330 <aci_gap_authorization_req_event>

  return status;
 800a0ee:	193b      	adds	r3, r7, r4
 800a0f0:	781b      	ldrb	r3, [r3, #0]
}
 800a0f2:	0018      	movs	r0, r3
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	b005      	add	sp, #20
 800a0f8:	bd90      	pop	{r4, r7, pc}

0800a0fa <aci_gap_slave_security_initiated_event_process>:
 *        successfully sent to the master.
 * @retval None
 */

tBleStatus aci_gap_slave_security_initiated_event_process(uint8_t *buffer_in)
{
 800a0fa:	b590      	push	{r4, r7, lr}
 800a0fc:	b085      	sub	sp, #20
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a102:	240f      	movs	r4, #15
 800a104:	193b      	adds	r3, r7, r4
 800a106:	2200      	movs	r2, #0
 800a108:	701a      	strb	r2, [r3, #0]
  aci_gap_slave_security_initiated_event();
 800a10a:	f001 f921 	bl	800b350 <aci_gap_slave_security_initiated_event>

  return status;
 800a10e:	193b      	adds	r3, r7, r4
 800a110:	781b      	ldrb	r3, [r3, #0]
}
 800a112:	0018      	movs	r0, r3
 800a114:	46bd      	mov	sp, r7
 800a116:	b005      	add	sp, #20
 800a118:	bd90      	pop	{r4, r7, pc}

0800a11a <aci_gap_bond_lost_event_process>:
 *        force_rebond set to 1.
 * @retval None
 */

tBleStatus aci_gap_bond_lost_event_process(uint8_t *buffer_in)
{
 800a11a:	b590      	push	{r4, r7, lr}
 800a11c:	b085      	sub	sp, #20
 800a11e:	af00      	add	r7, sp, #0
 800a120:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a122:	240f      	movs	r4, #15
 800a124:	193b      	adds	r3, r7, r4
 800a126:	2200      	movs	r2, #0
 800a128:	701a      	strb	r2, [r3, #0]
  aci_gap_bond_lost_event();
 800a12a:	f001 f91d 	bl	800b368 <aci_gap_bond_lost_event>

  return status;
 800a12e:	193b      	adds	r3, r7, r4
 800a130:	781b      	ldrb	r3, [r3, #0]
}
 800a132:	0018      	movs	r0, r3
 800a134:	46bd      	mov	sp, r7
 800a136:	b005      	add	sp, #20
 800a138:	bd90      	pop	{r4, r7, pc}

0800a13a <aci_gap_proc_complete_event_process>:
 *        of the peer device if the procedure completed successfully.
 * @retval None
 */

tBleStatus aci_gap_proc_complete_event_process(uint8_t *buffer_in)
{
 800a13a:	b590      	push	{r4, r7, lr}
 800a13c:	b085      	sub	sp, #20
 800a13e:	af00      	add	r7, sp, #0
 800a140:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a142:	240f      	movs	r4, #15
 800a144:	193b      	adds	r3, r7, r4
 800a146:	2200      	movs	r2, #0
 800a148:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gap_proc_complete_event_rp0 *rp0 = (aci_gap_proc_complete_event_rp0 *)buffer_in;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	60bb      	str	r3, [r7, #8]
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	7818      	ldrb	r0, [r3, #0]
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	7859      	ldrb	r1, [r3, #1]
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	789a      	ldrb	r2, [r3, #2]
                              rp0->Status,
                              rp0->Data_Length,
                              rp0->Data);
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	3303      	adds	r3, #3
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 800a15e:	f7f8 fb9b 	bl	8002898 <aci_gap_proc_complete_event>

  return status;
 800a162:	193b      	adds	r3, r7, r4
 800a164:	781b      	ldrb	r3, [r3, #0]
}
 800a166:	0018      	movs	r0, r3
 800a168:	46bd      	mov	sp, r7
 800a16a:	b005      	add	sp, #20
 800a16c:	bd90      	pop	{r4, r7, pc}

0800a16e <aci_gap_addr_not_resolved_event_process>:
 *        could not be resolved with any of the stored IRK's.
 * @retval None
 */

tBleStatus aci_gap_addr_not_resolved_event_process(uint8_t *buffer_in)
{
 800a16e:	b590      	push	{r4, r7, lr}
 800a170:	b085      	sub	sp, #20
 800a172:	af00      	add	r7, sp, #0
 800a174:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a176:	240f      	movs	r4, #15
 800a178:	193b      	adds	r3, r7, r4
 800a17a:	2200      	movs	r2, #0
 800a17c:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gap_addr_not_resolved_event_rp0 *rp0 = (aci_gap_addr_not_resolved_event_rp0 *)buffer_in;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	60bb      	str	r3, [r7, #8]
  aci_gap_addr_not_resolved_event(rp0->Connection_Handle);
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	781a      	ldrb	r2, [r3, #0]
 800a186:	785b      	ldrb	r3, [r3, #1]
 800a188:	021b      	lsls	r3, r3, #8
 800a18a:	4313      	orrs	r3, r2
 800a18c:	b29b      	uxth	r3, r3
 800a18e:	0018      	movs	r0, r3
 800a190:	f001 f8f6 	bl	800b380 <aci_gap_addr_not_resolved_event>

  return status;
 800a194:	193b      	adds	r3, r7, r4
 800a196:	781b      	ldrb	r3, [r3, #0]
}
 800a198:	0018      	movs	r0, r3
 800a19a:	46bd      	mov	sp, r7
 800a19c:	b005      	add	sp, #20
 800a19e:	bd90      	pop	{r4, r7, pc}

0800a1a0 <aci_gap_numeric_comparison_value_event_process>:
 * @param Numeric_Value
 * @retval None
 */

tBleStatus aci_gap_numeric_comparison_value_event_process(uint8_t *buffer_in)
{
 800a1a0:	b590      	push	{r4, r7, lr}
 800a1a2:	b085      	sub	sp, #20
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a1a8:	240f      	movs	r4, #15
 800a1aa:	193b      	adds	r3, r7, r4
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gap_numeric_comparison_value_event_rp0 *rp0 = (aci_gap_numeric_comparison_value_event_rp0 *)buffer_in;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	60bb      	str	r3, [r7, #8]
  aci_gap_numeric_comparison_value_event(rp0->Connection_Handle,
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	781a      	ldrb	r2, [r3, #0]
 800a1b8:	785b      	ldrb	r3, [r3, #1]
 800a1ba:	021b      	lsls	r3, r3, #8
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	b298      	uxth	r0, r3
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	789a      	ldrb	r2, [r3, #2]
 800a1c4:	78d9      	ldrb	r1, [r3, #3]
 800a1c6:	0209      	lsls	r1, r1, #8
 800a1c8:	430a      	orrs	r2, r1
 800a1ca:	7919      	ldrb	r1, [r3, #4]
 800a1cc:	0409      	lsls	r1, r1, #16
 800a1ce:	430a      	orrs	r2, r1
 800a1d0:	795b      	ldrb	r3, [r3, #5]
 800a1d2:	061b      	lsls	r3, r3, #24
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	0019      	movs	r1, r3
 800a1d8:	f001 f8e2 	bl	800b3a0 <aci_gap_numeric_comparison_value_event>
                                         rp0->Numeric_Value);

  return status;
 800a1dc:	193b      	adds	r3, r7, r4
 800a1de:	781b      	ldrb	r3, [r3, #0]
}
 800a1e0:	0018      	movs	r0, r3
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	b005      	add	sp, #20
 800a1e6:	bd90      	pop	{r4, r7, pc}

0800a1e8 <aci_gap_keypress_notification_event_process>:
 *        - 0x04: PASSKEY_ENTRY_COMPLETED
 * @retval None
 */

tBleStatus aci_gap_keypress_notification_event_process(uint8_t *buffer_in)
{
 800a1e8:	b590      	push	{r4, r7, lr}
 800a1ea:	b085      	sub	sp, #20
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a1f0:	240f      	movs	r4, #15
 800a1f2:	193b      	adds	r3, r7, r4
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gap_keypress_notification_event_rp0 *rp0 = (aci_gap_keypress_notification_event_rp0 *)buffer_in;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	60bb      	str	r3, [r7, #8]
  aci_gap_keypress_notification_event(rp0->Connection_Handle,
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	781a      	ldrb	r2, [r3, #0]
 800a200:	785b      	ldrb	r3, [r3, #1]
 800a202:	021b      	lsls	r3, r3, #8
 800a204:	4313      	orrs	r3, r2
 800a206:	b29a      	uxth	r2, r3
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	789b      	ldrb	r3, [r3, #2]
 800a20c:	0019      	movs	r1, r3
 800a20e:	0010      	movs	r0, r2
 800a210:	f001 f8d8 	bl	800b3c4 <aci_gap_keypress_notification_event>
                                      rp0->Notification_Type);

  return status;
 800a214:	193b      	adds	r3, r7, r4
 800a216:	781b      	ldrb	r3, [r3, #0]
}
 800a218:	0018      	movs	r0, r3
 800a21a:	46bd      	mov	sp, r7
 800a21c:	b005      	add	sp, #20
 800a21e:	bd90      	pop	{r4, r7, pc}

0800a220 <aci_l2cap_connection_update_resp_event_process>:
 * @param Result
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_resp_event_process(uint8_t *buffer_in)
{
 800a220:	b590      	push	{r4, r7, lr}
 800a222:	b085      	sub	sp, #20
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a228:	240f      	movs	r4, #15
 800a22a:	193b      	adds	r3, r7, r4
 800a22c:	2200      	movs	r2, #0
 800a22e:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_l2cap_connection_update_resp_event_rp0 *rp0 = (aci_l2cap_connection_update_resp_event_rp0 *)buffer_in;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_resp_event(rp0->Connection_Handle,
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	781a      	ldrb	r2, [r3, #0]
 800a238:	785b      	ldrb	r3, [r3, #1]
 800a23a:	021b      	lsls	r3, r3, #8
 800a23c:	4313      	orrs	r3, r2
 800a23e:	b298      	uxth	r0, r3
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	789a      	ldrb	r2, [r3, #2]
 800a244:	78db      	ldrb	r3, [r3, #3]
 800a246:	021b      	lsls	r3, r3, #8
 800a248:	4313      	orrs	r3, r2
 800a24a:	b29b      	uxth	r3, r3
 800a24c:	0019      	movs	r1, r3
 800a24e:	f001 fa5f 	bl	800b710 <aci_l2cap_connection_update_resp_event>
                                         rp0->Result);

  return status;
 800a252:	193b      	adds	r3, r7, r4
 800a254:	781b      	ldrb	r3, [r3, #0]
}
 800a256:	0018      	movs	r0, r3
 800a258:	46bd      	mov	sp, r7
 800a25a:	b005      	add	sp, #20
 800a25c:	bd90      	pop	{r4, r7, pc}

0800a25e <aci_l2cap_proc_timeout_event_process>:
 * @param Data
 * @retval None
 */

tBleStatus aci_l2cap_proc_timeout_event_process(uint8_t *buffer_in)
{
 800a25e:	b590      	push	{r4, r7, lr}
 800a260:	b085      	sub	sp, #20
 800a262:	af00      	add	r7, sp, #0
 800a264:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a266:	240f      	movs	r4, #15
 800a268:	193b      	adds	r3, r7, r4
 800a26a:	2200      	movs	r2, #0
 800a26c:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_l2cap_proc_timeout_event_rp0 *rp0 = (aci_l2cap_proc_timeout_event_rp0 *)buffer_in;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	60bb      	str	r3, [r7, #8]
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	781a      	ldrb	r2, [r3, #0]
 800a276:	785b      	ldrb	r3, [r3, #1]
 800a278:	021b      	lsls	r3, r3, #8
 800a27a:	4313      	orrs	r3, r2
 800a27c:	b298      	uxth	r0, r3
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	7899      	ldrb	r1, [r3, #2]
                               rp0->Data_Length,
                               rp0->Data);
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	3303      	adds	r3, #3
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 800a286:	001a      	movs	r2, r3
 800a288:	f001 fa56 	bl	800b738 <aci_l2cap_proc_timeout_event>

  return status;
 800a28c:	193b      	adds	r3, r7, r4
 800a28e:	781b      	ldrb	r3, [r3, #0]
}
 800a290:	0018      	movs	r0, r3
 800a292:	46bd      	mov	sp, r7
 800a294:	b005      	add	sp, #20
 800a296:	bd90      	pop	{r4, r7, pc}

0800a298 <aci_l2cap_connection_update_req_event_process>:
 *        - 10 (100 ms)  ... 3200 (32000 ms) 
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_req_event_process(uint8_t *buffer_in)
{
 800a298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a29a:	b089      	sub	sp, #36	@ 0x24
 800a29c:	af04      	add	r7, sp, #16
 800a29e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a2a0:	230f      	movs	r3, #15
 800a2a2:	18fb      	adds	r3, r7, r3
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_l2cap_connection_update_req_event_rp0 *rp0 = (aci_l2cap_connection_update_req_event_rp0 *)buffer_in;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_req_event(rp0->Connection_Handle,
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	781a      	ldrb	r2, [r3, #0]
 800a2b0:	785b      	ldrb	r3, [r3, #1]
 800a2b2:	021b      	lsls	r3, r3, #8
 800a2b4:	4313      	orrs	r3, r2
 800a2b6:	b29c      	uxth	r4, r3
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	789d      	ldrb	r5, [r3, #2]
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	78da      	ldrb	r2, [r3, #3]
 800a2c0:	791b      	ldrb	r3, [r3, #4]
 800a2c2:	021b      	lsls	r3, r3, #8
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	b29e      	uxth	r6, r3
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	795a      	ldrb	r2, [r3, #5]
 800a2cc:	799b      	ldrb	r3, [r3, #6]
 800a2ce:	021b      	lsls	r3, r3, #8
 800a2d0:	4313      	orrs	r3, r2
 800a2d2:	b29a      	uxth	r2, r3
 800a2d4:	4694      	mov	ip, r2
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	79da      	ldrb	r2, [r3, #7]
 800a2da:	7a1b      	ldrb	r3, [r3, #8]
 800a2dc:	021b      	lsls	r3, r3, #8
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	b29a      	uxth	r2, r3
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	7a59      	ldrb	r1, [r3, #9]
 800a2e6:	7a9b      	ldrb	r3, [r3, #10]
 800a2e8:	021b      	lsls	r3, r3, #8
 800a2ea:	430b      	orrs	r3, r1
 800a2ec:	b299      	uxth	r1, r3
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	7ad8      	ldrb	r0, [r3, #11]
 800a2f2:	7b1b      	ldrb	r3, [r3, #12]
 800a2f4:	021b      	lsls	r3, r3, #8
 800a2f6:	4303      	orrs	r3, r0
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	9302      	str	r3, [sp, #8]
 800a2fc:	9101      	str	r1, [sp, #4]
 800a2fe:	9200      	str	r2, [sp, #0]
 800a300:	4663      	mov	r3, ip
 800a302:	0032      	movs	r2, r6
 800a304:	0029      	movs	r1, r5
 800a306:	0020      	movs	r0, r4
 800a308:	f001 fa2a 	bl	800b760 <aci_l2cap_connection_update_req_event>
                                        rp0->Interval_Min,
                                        rp0->Interval_Max,
                                        rp0->Slave_Latency,
                                        rp0->Timeout_Multiplier);

  return status;
 800a30c:	230f      	movs	r3, #15
 800a30e:	18fb      	adds	r3, r7, r3
 800a310:	781b      	ldrb	r3, [r3, #0]
}
 800a312:	0018      	movs	r0, r3
 800a314:	46bd      	mov	sp, r7
 800a316:	b005      	add	sp, #20
 800a318:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a31a <aci_l2cap_command_reject_event_process>:
 * @param Data Data field associated with Reason
 * @retval None
 */

tBleStatus aci_l2cap_command_reject_event_process(uint8_t *buffer_in)
{
 800a31a:	b5b0      	push	{r4, r5, r7, lr}
 800a31c:	b086      	sub	sp, #24
 800a31e:	af02      	add	r7, sp, #8
 800a320:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a322:	250f      	movs	r5, #15
 800a324:	197b      	adds	r3, r7, r5
 800a326:	2200      	movs	r2, #0
 800a328:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_l2cap_command_reject_event_rp0 *rp0 = (aci_l2cap_command_reject_event_rp0 *)buffer_in;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	60bb      	str	r3, [r7, #8]
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	781a      	ldrb	r2, [r3, #0]
 800a332:	785b      	ldrb	r3, [r3, #1]
 800a334:	021b      	lsls	r3, r3, #8
 800a336:	4313      	orrs	r3, r2
 800a338:	b298      	uxth	r0, r3
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	7899      	ldrb	r1, [r3, #2]
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	78da      	ldrb	r2, [r3, #3]
 800a342:	791b      	ldrb	r3, [r3, #4]
 800a344:	021b      	lsls	r3, r3, #8
 800a346:	4313      	orrs	r3, r2
 800a348:	b29a      	uxth	r2, r3
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	795c      	ldrb	r4, [r3, #5]
                                 rp0->Identifier,
                                 rp0->Reason,
                                 rp0->Data_Length,
                                 rp0->Data);
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	3306      	adds	r3, #6
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 800a352:	9300      	str	r3, [sp, #0]
 800a354:	0023      	movs	r3, r4
 800a356:	f001 fa21 	bl	800b79c <aci_l2cap_command_reject_event>

  return status;
 800a35a:	197b      	adds	r3, r7, r5
 800a35c:	781b      	ldrb	r3, [r3, #0]
}
 800a35e:	0018      	movs	r0, r3
 800a360:	46bd      	mov	sp, r7
 800a362:	b004      	add	sp, #16
 800a364:	bdb0      	pop	{r4, r5, r7, pc}

0800a366 <aci_gatt_attribute_modified_event_process>:
 * @param Attr_Data The modified value
 * @retval None
 */

tBleStatus aci_gatt_attribute_modified_event_process(uint8_t *buffer_in)
{
 800a366:	b5b0      	push	{r4, r5, r7, lr}
 800a368:	b086      	sub	sp, #24
 800a36a:	af02      	add	r7, sp, #8
 800a36c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a36e:	250f      	movs	r5, #15
 800a370:	197b      	adds	r3, r7, r5
 800a372:	2200      	movs	r2, #0
 800a374:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gatt_attribute_modified_event_rp0 *rp0 = (aci_gatt_attribute_modified_event_rp0 *)buffer_in;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	60bb      	str	r3, [r7, #8]
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	781a      	ldrb	r2, [r3, #0]
 800a37e:	785b      	ldrb	r3, [r3, #1]
 800a380:	021b      	lsls	r3, r3, #8
 800a382:	4313      	orrs	r3, r2
 800a384:	b298      	uxth	r0, r3
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	789a      	ldrb	r2, [r3, #2]
 800a38a:	78db      	ldrb	r3, [r3, #3]
 800a38c:	021b      	lsls	r3, r3, #8
 800a38e:	4313      	orrs	r3, r2
 800a390:	b299      	uxth	r1, r3
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	791a      	ldrb	r2, [r3, #4]
 800a396:	795b      	ldrb	r3, [r3, #5]
 800a398:	021b      	lsls	r3, r3, #8
 800a39a:	4313      	orrs	r3, r2
 800a39c:	b29c      	uxth	r4, r3
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	799a      	ldrb	r2, [r3, #6]
 800a3a2:	79db      	ldrb	r3, [r3, #7]
 800a3a4:	021b      	lsls	r3, r3, #8
 800a3a6:	4313      	orrs	r3, r2
 800a3a8:	b29a      	uxth	r2, r3
                                    rp0->Attr_Handle,
                                    rp0->Offset,
                                    rp0->Attr_Data_Length,
                                    rp0->Attr_Data);
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	3308      	adds	r3, #8
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 800a3ae:	9300      	str	r3, [sp, #0]
 800a3b0:	0013      	movs	r3, r2
 800a3b2:	0022      	movs	r2, r4
 800a3b4:	f7f8 fbce 	bl	8002b54 <aci_gatt_attribute_modified_event>

  return status;
 800a3b8:	197b      	adds	r3, r7, r5
 800a3ba:	781b      	ldrb	r3, [r3, #0]
}
 800a3bc:	0018      	movs	r0, r3
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	b004      	add	sp, #16
 800a3c2:	bdb0      	pop	{r4, r5, r7, pc}

0800a3c4 <aci_gatt_proc_timeout_event_process>:
 *        timed out
 * @retval None
 */

tBleStatus aci_gatt_proc_timeout_event_process(uint8_t *buffer_in)
{
 800a3c4:	b590      	push	{r4, r7, lr}
 800a3c6:	b085      	sub	sp, #20
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a3cc:	240f      	movs	r4, #15
 800a3ce:	193b      	adds	r3, r7, r4
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gatt_proc_timeout_event_rp0 *rp0 = (aci_gatt_proc_timeout_event_rp0 *)buffer_in;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_timeout_event(rp0->Connection_Handle);
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	781a      	ldrb	r2, [r3, #0]
 800a3dc:	785b      	ldrb	r3, [r3, #1]
 800a3de:	021b      	lsls	r3, r3, #8
 800a3e0:	4313      	orrs	r3, r2
 800a3e2:	b29b      	uxth	r3, r3
 800a3e4:	0018      	movs	r0, r3
 800a3e6:	f001 f801 	bl	800b3ec <aci_gatt_proc_timeout_event>

  return status;
 800a3ea:	193b      	adds	r3, r7, r4
 800a3ec:	781b      	ldrb	r3, [r3, #0]
}
 800a3ee:	0018      	movs	r0, r3
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	b005      	add	sp, #20
 800a3f4:	bd90      	pop	{r4, r7, pc}

0800a3f6 <aci_att_exchange_mtu_resp_event_process>:
 * @param Server_RX_MTU ATT_MTU value agreed between server and client
 * @retval None
 */

tBleStatus aci_att_exchange_mtu_resp_event_process(uint8_t *buffer_in)
{
 800a3f6:	b590      	push	{r4, r7, lr}
 800a3f8:	b085      	sub	sp, #20
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a3fe:	240f      	movs	r4, #15
 800a400:	193b      	adds	r3, r7, r4
 800a402:	2200      	movs	r2, #0
 800a404:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_att_exchange_mtu_resp_event_rp0 *rp0 = (aci_att_exchange_mtu_resp_event_rp0 *)buffer_in;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	60bb      	str	r3, [r7, #8]
  aci_att_exchange_mtu_resp_event(rp0->Connection_Handle,
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	781a      	ldrb	r2, [r3, #0]
 800a40e:	785b      	ldrb	r3, [r3, #1]
 800a410:	021b      	lsls	r3, r3, #8
 800a412:	4313      	orrs	r3, r2
 800a414:	b298      	uxth	r0, r3
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	789a      	ldrb	r2, [r3, #2]
 800a41a:	78db      	ldrb	r3, [r3, #3]
 800a41c:	021b      	lsls	r3, r3, #8
 800a41e:	4313      	orrs	r3, r2
 800a420:	b29b      	uxth	r3, r3
 800a422:	0019      	movs	r1, r3
 800a424:	f7f8 fc9e 	bl	8002d64 <aci_att_exchange_mtu_resp_event>
                                  rp0->Server_RX_MTU);

  return status;
 800a428:	193b      	adds	r3, r7, r4
 800a42a:	781b      	ldrb	r3, [r3, #0]
}
 800a42c:	0018      	movs	r0, r3
 800a42e:	46bd      	mov	sp, r7
 800a430:	b005      	add	sp, #20
 800a432:	bd90      	pop	{r4, r7, pc}

0800a434 <aci_att_find_info_resp_event_process>:
 *        pair is:[2 octets for handle, 16 octets for UUIDs]
 * @retval None
 */

tBleStatus aci_att_find_info_resp_event_process(uint8_t *buffer_in)
{
 800a434:	b590      	push	{r4, r7, lr}
 800a436:	b085      	sub	sp, #20
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a43c:	240f      	movs	r4, #15
 800a43e:	193b      	adds	r3, r7, r4
 800a440:	2200      	movs	r2, #0
 800a442:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_att_find_info_resp_event_rp0 *rp0 = (aci_att_find_info_resp_event_rp0 *)buffer_in;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	60bb      	str	r3, [r7, #8]
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	781a      	ldrb	r2, [r3, #0]
 800a44c:	785b      	ldrb	r3, [r3, #1]
 800a44e:	021b      	lsls	r3, r3, #8
 800a450:	4313      	orrs	r3, r2
 800a452:	b298      	uxth	r0, r3
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	7899      	ldrb	r1, [r3, #2]
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	78da      	ldrb	r2, [r3, #3]
                               rp0->Format,
                               rp0->Event_Data_Length,
                               rp0->Handle_UUID_Pair);
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	3304      	adds	r3, #4
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 800a460:	f000 ffd4 	bl	800b40c <aci_att_find_info_resp_event>

  return status;
 800a464:	193b      	adds	r3, r7, r4
 800a466:	781b      	ldrb	r3, [r3, #0]
}
 800a468:	0018      	movs	r0, r3
 800a46a:	46bd      	mov	sp, r7
 800a46c:	b005      	add	sp, #20
 800a46e:	bd90      	pop	{r4, r7, pc}

0800a470 <aci_att_find_by_type_value_resp_event_process>:
 * @param Attribute_Group_Handle_Pair See @ref Attribute_Group_Handle_Pair_t
 * @retval None
 */

tBleStatus aci_att_find_by_type_value_resp_event_process(uint8_t *buffer_in)
{
 800a470:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a472:	b0a7      	sub	sp, #156	@ 0x9c
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a478:	238f      	movs	r3, #143	@ 0x8f
 800a47a:	18fb      	adds	r3, r7, r3
 800a47c:	2200      	movs	r2, #0
 800a47e:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_att_find_by_type_value_resp_event_rp0 *rp0 = (aci_att_find_by_type_value_resp_event_rp0 *)buffer_in;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2288      	movs	r2, #136	@ 0x88
 800a484:	18ba      	adds	r2, r7, r2
 800a486:	6013      	str	r3, [r2, #0]
  uint8_t size = 3;
 800a488:	2397      	movs	r3, #151	@ 0x97
 800a48a:	18fb      	adds	r3, r7, r3
 800a48c:	2203      	movs	r2, #3
 800a48e:	701a      	strb	r2, [r3, #0]
  int i;
  Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[HCI_MAX_PAYLOAD_SIZE/sizeof(Attribute_Group_Handle_Pair_t)];
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 800a490:	2300      	movs	r3, #0
 800a492:	2290      	movs	r2, #144	@ 0x90
 800a494:	18ba      	adds	r2, r7, r2
 800a496:	6013      	str	r3, [r2, #0]
 800a498:	e037      	b.n	800a50a <aci_att_find_by_type_value_resp_event_process+0x9a>
    Attribute_Group_Handle_Pair[i].Found_Attribute_Handle = rp0->Attribute_Group_Handle_Pair[i].Found_Attribute_Handle;
 800a49a:	2588      	movs	r5, #136	@ 0x88
 800a49c:	197b      	adds	r3, r7, r5
 800a49e:	681a      	ldr	r2, [r3, #0]
 800a4a0:	2090      	movs	r0, #144	@ 0x90
 800a4a2:	183b      	adds	r3, r7, r0
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	009b      	lsls	r3, r3, #2
 800a4a8:	18d1      	adds	r1, r2, r3
 800a4aa:	78c9      	ldrb	r1, [r1, #3]
 800a4ac:	18d3      	adds	r3, r2, r3
 800a4ae:	791b      	ldrb	r3, [r3, #4]
 800a4b0:	021b      	lsls	r3, r3, #8
 800a4b2:	430b      	orrs	r3, r1
 800a4b4:	b299      	uxth	r1, r3
 800a4b6:	2608      	movs	r6, #8
 800a4b8:	19bb      	adds	r3, r7, r6
 800a4ba:	183a      	adds	r2, r7, r0
 800a4bc:	6812      	ldr	r2, [r2, #0]
 800a4be:	0092      	lsls	r2, r2, #2
 800a4c0:	52d1      	strh	r1, [r2, r3]
    size += 2;
 800a4c2:	2497      	movs	r4, #151	@ 0x97
 800a4c4:	193b      	adds	r3, r7, r4
 800a4c6:	193a      	adds	r2, r7, r4
 800a4c8:	7812      	ldrb	r2, [r2, #0]
 800a4ca:	3202      	adds	r2, #2
 800a4cc:	701a      	strb	r2, [r3, #0]
    Attribute_Group_Handle_Pair[i].Group_End_Handle = rp0->Attribute_Group_Handle_Pair[i].Group_End_Handle;
 800a4ce:	197b      	adds	r3, r7, r5
 800a4d0:	681a      	ldr	r2, [r3, #0]
 800a4d2:	183b      	adds	r3, r7, r0
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	009b      	lsls	r3, r3, #2
 800a4d8:	18d1      	adds	r1, r2, r3
 800a4da:	7949      	ldrb	r1, [r1, #5]
 800a4dc:	18d3      	adds	r3, r2, r3
 800a4de:	799b      	ldrb	r3, [r3, #6]
 800a4e0:	021b      	lsls	r3, r3, #8
 800a4e2:	430b      	orrs	r3, r1
 800a4e4:	b299      	uxth	r1, r3
 800a4e6:	19ba      	adds	r2, r7, r6
 800a4e8:	183b      	adds	r3, r7, r0
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	009b      	lsls	r3, r3, #2
 800a4ee:	18d3      	adds	r3, r2, r3
 800a4f0:	3302      	adds	r3, #2
 800a4f2:	1c0a      	adds	r2, r1, #0
 800a4f4:	801a      	strh	r2, [r3, #0]
    size += 2;
 800a4f6:	193b      	adds	r3, r7, r4
 800a4f8:	193a      	adds	r2, r7, r4
 800a4fa:	7812      	ldrb	r2, [r2, #0]
 800a4fc:	3202      	adds	r2, #2
 800a4fe:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 800a500:	183b      	adds	r3, r7, r0
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	3301      	adds	r3, #1
 800a506:	183a      	adds	r2, r7, r0
 800a508:	6013      	str	r3, [r2, #0]
 800a50a:	2188      	movs	r1, #136	@ 0x88
 800a50c:	187b      	adds	r3, r7, r1
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	789b      	ldrb	r3, [r3, #2]
 800a512:	001a      	movs	r2, r3
 800a514:	2390      	movs	r3, #144	@ 0x90
 800a516:	18fb      	adds	r3, r7, r3
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4293      	cmp	r3, r2
 800a51c:	dbbd      	blt.n	800a49a <aci_att_find_by_type_value_resp_event_process+0x2a>
  }
  aci_att_find_by_type_value_resp_event(rp0->Connection_Handle,
 800a51e:	187b      	adds	r3, r7, r1
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	781a      	ldrb	r2, [r3, #0]
 800a524:	785b      	ldrb	r3, [r3, #1]
 800a526:	021b      	lsls	r3, r3, #8
 800a528:	4313      	orrs	r3, r2
 800a52a:	b298      	uxth	r0, r3
 800a52c:	187b      	adds	r3, r7, r1
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	789b      	ldrb	r3, [r3, #2]
 800a532:	2208      	movs	r2, #8
 800a534:	18ba      	adds	r2, r7, r2
 800a536:	0019      	movs	r1, r3
 800a538:	f000 ff82 	bl	800b440 <aci_att_find_by_type_value_resp_event>
                                        rp0->Num_of_Handle_Pair,
                                        Attribute_Group_Handle_Pair);

  return status;
 800a53c:	238f      	movs	r3, #143	@ 0x8f
 800a53e:	18fb      	adds	r3, r7, r3
 800a540:	781b      	ldrb	r3, [r3, #0]
}
 800a542:	0018      	movs	r0, r3
 800a544:	46bd      	mov	sp, r7
 800a546:	b027      	add	sp, #156	@ 0x9c
 800a548:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a54a <aci_att_read_by_type_resp_event_process>:
 *        Value]
 * @retval None
 */

tBleStatus aci_att_read_by_type_resp_event_process(uint8_t *buffer_in)
{
 800a54a:	b590      	push	{r4, r7, lr}
 800a54c:	b085      	sub	sp, #20
 800a54e:	af00      	add	r7, sp, #0
 800a550:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a552:	240f      	movs	r4, #15
 800a554:	193b      	adds	r3, r7, r4
 800a556:	2200      	movs	r2, #0
 800a558:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_att_read_by_type_resp_event_rp0 *rp0 = (aci_att_read_by_type_resp_event_rp0 *)buffer_in;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	781a      	ldrb	r2, [r3, #0]
 800a562:	785b      	ldrb	r3, [r3, #1]
 800a564:	021b      	lsls	r3, r3, #8
 800a566:	4313      	orrs	r3, r2
 800a568:	b298      	uxth	r0, r3
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	7899      	ldrb	r1, [r3, #2]
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	78da      	ldrb	r2, [r3, #3]
                                  rp0->Handle_Value_Pair_Length,
                                  rp0->Data_Length,
                                  rp0->Handle_Value_Pair_Data);
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	3304      	adds	r3, #4
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 800a576:	f000 ff77 	bl	800b468 <aci_att_read_by_type_resp_event>

  return status;
 800a57a:	193b      	adds	r3, r7, r4
 800a57c:	781b      	ldrb	r3, [r3, #0]
}
 800a57e:	0018      	movs	r0, r3
 800a580:	46bd      	mov	sp, r7
 800a582:	b005      	add	sp, #20
 800a584:	bd90      	pop	{r4, r7, pc}

0800a586 <aci_att_read_resp_event_process>:
 * @param Attribute_Value The value of the attribute.
 * @retval None
 */

tBleStatus aci_att_read_resp_event_process(uint8_t *buffer_in)
{
 800a586:	b590      	push	{r4, r7, lr}
 800a588:	b085      	sub	sp, #20
 800a58a:	af00      	add	r7, sp, #0
 800a58c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a58e:	240f      	movs	r4, #15
 800a590:	193b      	adds	r3, r7, r4
 800a592:	2200      	movs	r2, #0
 800a594:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_att_read_resp_event_rp0 *rp0 = (aci_att_read_resp_event_rp0 *)buffer_in;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	60bb      	str	r3, [r7, #8]
  aci_att_read_resp_event(rp0->Connection_Handle,
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	781a      	ldrb	r2, [r3, #0]
 800a59e:	785b      	ldrb	r3, [r3, #1]
 800a5a0:	021b      	lsls	r3, r3, #8
 800a5a2:	4313      	orrs	r3, r2
 800a5a4:	b298      	uxth	r0, r3
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	7899      	ldrb	r1, [r3, #2]
                          rp0->Event_Data_Length,
                          rp0->Attribute_Value);
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	3303      	adds	r3, #3
  aci_att_read_resp_event(rp0->Connection_Handle,
 800a5ae:	001a      	movs	r2, r3
 800a5b0:	f000 ff74 	bl	800b49c <aci_att_read_resp_event>

  return status;
 800a5b4:	193b      	adds	r3, r7, r4
 800a5b6:	781b      	ldrb	r3, [r3, #0]
}
 800a5b8:	0018      	movs	r0, r3
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	b005      	add	sp, #20
 800a5be:	bd90      	pop	{r4, r7, pc}

0800a5c0 <aci_att_read_blob_resp_event_process>:
 * @param Attribute_Value Part of the attribute value.
 * @retval None
 */

tBleStatus aci_att_read_blob_resp_event_process(uint8_t *buffer_in)
{
 800a5c0:	b590      	push	{r4, r7, lr}
 800a5c2:	b085      	sub	sp, #20
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a5c8:	240f      	movs	r4, #15
 800a5ca:	193b      	adds	r3, r7, r4
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_att_read_blob_resp_event_rp0 *rp0 = (aci_att_read_blob_resp_event_rp0 *)buffer_in;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	60bb      	str	r3, [r7, #8]
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	781a      	ldrb	r2, [r3, #0]
 800a5d8:	785b      	ldrb	r3, [r3, #1]
 800a5da:	021b      	lsls	r3, r3, #8
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	b298      	uxth	r0, r3
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	7899      	ldrb	r1, [r3, #2]
                               rp0->Event_Data_Length,
                               rp0->Attribute_Value);
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	3303      	adds	r3, #3
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 800a5e8:	001a      	movs	r2, r3
 800a5ea:	f000 ff6b 	bl	800b4c4 <aci_att_read_blob_resp_event>

  return status;
 800a5ee:	193b      	adds	r3, r7, r4
 800a5f0:	781b      	ldrb	r3, [r3, #0]
}
 800a5f2:	0018      	movs	r0, r3
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	b005      	add	sp, #20
 800a5f8:	bd90      	pop	{r4, r7, pc}

0800a5fa <aci_att_read_multiple_resp_event_process>:
 *        the order that they were requested.
 * @retval None
 */

tBleStatus aci_att_read_multiple_resp_event_process(uint8_t *buffer_in)
{
 800a5fa:	b590      	push	{r4, r7, lr}
 800a5fc:	b085      	sub	sp, #20
 800a5fe:	af00      	add	r7, sp, #0
 800a600:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a602:	240f      	movs	r4, #15
 800a604:	193b      	adds	r3, r7, r4
 800a606:	2200      	movs	r2, #0
 800a608:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_att_read_multiple_resp_event_rp0 *rp0 = (aci_att_read_multiple_resp_event_rp0 *)buffer_in;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	60bb      	str	r3, [r7, #8]
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	781a      	ldrb	r2, [r3, #0]
 800a612:	785b      	ldrb	r3, [r3, #1]
 800a614:	021b      	lsls	r3, r3, #8
 800a616:	4313      	orrs	r3, r2
 800a618:	b298      	uxth	r0, r3
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	7899      	ldrb	r1, [r3, #2]
                                   rp0->Event_Data_Length,
                                   rp0->Set_Of_Values);
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	3303      	adds	r3, #3
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 800a622:	001a      	movs	r2, r3
 800a624:	f000 ff62 	bl	800b4ec <aci_att_read_multiple_resp_event>

  return status;
 800a628:	193b      	adds	r3, r7, r4
 800a62a:	781b      	ldrb	r3, [r3, #0]
}
 800a62c:	0018      	movs	r0, r3
 800a62e:	46bd      	mov	sp, r7
 800a630:	b005      	add	sp, #20
 800a632:	bd90      	pop	{r4, r7, pc}

0800a634 <aci_att_read_by_group_type_resp_event_process>:
 *        Handle, (Attribute_Data_Length - 4 octets) for Attribute Value]
 * @retval None
 */

tBleStatus aci_att_read_by_group_type_resp_event_process(uint8_t *buffer_in)
{
 800a634:	b590      	push	{r4, r7, lr}
 800a636:	b085      	sub	sp, #20
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a63c:	240f      	movs	r4, #15
 800a63e:	193b      	adds	r3, r7, r4
 800a640:	2200      	movs	r2, #0
 800a642:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_att_read_by_group_type_resp_event_rp0 *rp0 = (aci_att_read_by_group_type_resp_event_rp0 *)buffer_in;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	781a      	ldrb	r2, [r3, #0]
 800a64c:	785b      	ldrb	r3, [r3, #1]
 800a64e:	021b      	lsls	r3, r3, #8
 800a650:	4313      	orrs	r3, r2
 800a652:	b298      	uxth	r0, r3
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	7899      	ldrb	r1, [r3, #2]
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	78da      	ldrb	r2, [r3, #3]
                                        rp0->Attribute_Data_Length,
                                        rp0->Data_Length,
                                        rp0->Attribute_Data_List);
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	3304      	adds	r3, #4
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 800a660:	f000 ff58 	bl	800b514 <aci_att_read_by_group_type_resp_event>

  return status;
 800a664:	193b      	adds	r3, r7, r4
 800a666:	781b      	ldrb	r3, [r3, #0]
}
 800a668:	0018      	movs	r0, r3
 800a66a:	46bd      	mov	sp, r7
 800a66c:	b005      	add	sp, #20
 800a66e:	bd90      	pop	{r4, r7, pc}

0800a670 <aci_att_prepare_write_resp_event_process>:
 * @param Part_Attribute_Value The value of the attribute to be written
 * @retval None
 */

tBleStatus aci_att_prepare_write_resp_event_process(uint8_t *buffer_in)
{
 800a670:	b5b0      	push	{r4, r5, r7, lr}
 800a672:	b086      	sub	sp, #24
 800a674:	af02      	add	r7, sp, #8
 800a676:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a678:	250f      	movs	r5, #15
 800a67a:	197b      	adds	r3, r7, r5
 800a67c:	2200      	movs	r2, #0
 800a67e:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_att_prepare_write_resp_event_rp0 *rp0 = (aci_att_prepare_write_resp_event_rp0 *)buffer_in;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	60bb      	str	r3, [r7, #8]
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	781a      	ldrb	r2, [r3, #0]
 800a688:	785b      	ldrb	r3, [r3, #1]
 800a68a:	021b      	lsls	r3, r3, #8
 800a68c:	4313      	orrs	r3, r2
 800a68e:	b298      	uxth	r0, r3
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	789a      	ldrb	r2, [r3, #2]
 800a694:	78db      	ldrb	r3, [r3, #3]
 800a696:	021b      	lsls	r3, r3, #8
 800a698:	4313      	orrs	r3, r2
 800a69a:	b299      	uxth	r1, r3
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	791a      	ldrb	r2, [r3, #4]
 800a6a0:	795b      	ldrb	r3, [r3, #5]
 800a6a2:	021b      	lsls	r3, r3, #8
 800a6a4:	4313      	orrs	r3, r2
 800a6a6:	b29a      	uxth	r2, r3
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	799c      	ldrb	r4, [r3, #6]
                                   rp0->Attribute_Handle,
                                   rp0->Offset,
                                   rp0->Part_Attribute_Value_Length,
                                   rp0->Part_Attribute_Value);
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	3307      	adds	r3, #7
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 800a6b0:	9300      	str	r3, [sp, #0]
 800a6b2:	0023      	movs	r3, r4
 800a6b4:	f000 ff48 	bl	800b548 <aci_att_prepare_write_resp_event>

  return status;
 800a6b8:	197b      	adds	r3, r7, r5
 800a6ba:	781b      	ldrb	r3, [r3, #0]
}
 800a6bc:	0018      	movs	r0, r3
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	b004      	add	sp, #16
 800a6c2:	bdb0      	pop	{r4, r5, r7, pc}

0800a6c4 <aci_att_exec_write_resp_event_process>:
 * @param Connection_Handle Connection handle related to the response
 * @retval None
 */

tBleStatus aci_att_exec_write_resp_event_process(uint8_t *buffer_in)
{
 800a6c4:	b590      	push	{r4, r7, lr}
 800a6c6:	b085      	sub	sp, #20
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a6cc:	240f      	movs	r4, #15
 800a6ce:	193b      	adds	r3, r7, r4
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_att_exec_write_resp_event_rp0 *rp0 = (aci_att_exec_write_resp_event_rp0 *)buffer_in;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	60bb      	str	r3, [r7, #8]
  aci_att_exec_write_resp_event(rp0->Connection_Handle);
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	781a      	ldrb	r2, [r3, #0]
 800a6dc:	785b      	ldrb	r3, [r3, #1]
 800a6de:	021b      	lsls	r3, r3, #8
 800a6e0:	4313      	orrs	r3, r2
 800a6e2:	b29b      	uxth	r3, r3
 800a6e4:	0018      	movs	r0, r3
 800a6e6:	f000 ff4d 	bl	800b584 <aci_att_exec_write_resp_event>

  return status;
 800a6ea:	193b      	adds	r3, r7, r4
 800a6ec:	781b      	ldrb	r3, [r3, #0]
}
 800a6ee:	0018      	movs	r0, r3
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	b005      	add	sp, #20
 800a6f4:	bd90      	pop	{r4, r7, pc}

0800a6f6 <aci_gatt_indication_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_indication_event_process(uint8_t *buffer_in)
{
 800a6f6:	b590      	push	{r4, r7, lr}
 800a6f8:	b085      	sub	sp, #20
 800a6fa:	af00      	add	r7, sp, #0
 800a6fc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a6fe:	240f      	movs	r4, #15
 800a700:	193b      	adds	r3, r7, r4
 800a702:	2200      	movs	r2, #0
 800a704:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gatt_indication_event_rp0 *rp0 = (aci_gatt_indication_event_rp0 *)buffer_in;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	60bb      	str	r3, [r7, #8]
  aci_gatt_indication_event(rp0->Connection_Handle,
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	781a      	ldrb	r2, [r3, #0]
 800a70e:	785b      	ldrb	r3, [r3, #1]
 800a710:	021b      	lsls	r3, r3, #8
 800a712:	4313      	orrs	r3, r2
 800a714:	b298      	uxth	r0, r3
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	789a      	ldrb	r2, [r3, #2]
 800a71a:	78db      	ldrb	r3, [r3, #3]
 800a71c:	021b      	lsls	r3, r3, #8
 800a71e:	4313      	orrs	r3, r2
 800a720:	b299      	uxth	r1, r3
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	791a      	ldrb	r2, [r3, #4]
                            rp0->Attribute_Handle,
                            rp0->Attribute_Value_Length,
                            rp0->Attribute_Value);
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	3305      	adds	r3, #5
  aci_gatt_indication_event(rp0->Connection_Handle,
 800a72a:	f000 ff3b 	bl	800b5a4 <aci_gatt_indication_event>

  return status;
 800a72e:	193b      	adds	r3, r7, r4
 800a730:	781b      	ldrb	r3, [r3, #0]
}
 800a732:	0018      	movs	r0, r3
 800a734:	46bd      	mov	sp, r7
 800a736:	b005      	add	sp, #20
 800a738:	bd90      	pop	{r4, r7, pc}

0800a73a <aci_gatt_notification_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_notification_event_process(uint8_t *buffer_in)
{
 800a73a:	b590      	push	{r4, r7, lr}
 800a73c:	b085      	sub	sp, #20
 800a73e:	af00      	add	r7, sp, #0
 800a740:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a742:	240f      	movs	r4, #15
 800a744:	193b      	adds	r3, r7, r4
 800a746:	2200      	movs	r2, #0
 800a748:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gatt_notification_event_rp0 *rp0 = (aci_gatt_notification_event_rp0 *)buffer_in;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	60bb      	str	r3, [r7, #8]
  aci_gatt_notification_event(rp0->Connection_Handle,
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	781a      	ldrb	r2, [r3, #0]
 800a752:	785b      	ldrb	r3, [r3, #1]
 800a754:	021b      	lsls	r3, r3, #8
 800a756:	4313      	orrs	r3, r2
 800a758:	b298      	uxth	r0, r3
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	789a      	ldrb	r2, [r3, #2]
 800a75e:	78db      	ldrb	r3, [r3, #3]
 800a760:	021b      	lsls	r3, r3, #8
 800a762:	4313      	orrs	r3, r2
 800a764:	b299      	uxth	r1, r3
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	791a      	ldrb	r2, [r3, #4]
                              rp0->Attribute_Handle,
                              rp0->Attribute_Value_Length,
                              rp0->Attribute_Value);
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	3305      	adds	r3, #5
  aci_gatt_notification_event(rp0->Connection_Handle,
 800a76e:	f7f8 fa11 	bl	8002b94 <aci_gatt_notification_event>

  return status;
 800a772:	193b      	adds	r3, r7, r4
 800a774:	781b      	ldrb	r3, [r3, #0]
}
 800a776:	0018      	movs	r0, r3
 800a778:	46bd      	mov	sp, r7
 800a77a:	b005      	add	sp, #20
 800a77c:	bd90      	pop	{r4, r7, pc}

0800a77e <aci_gatt_proc_complete_event_process>:
 *        was successful.
 * @retval None
 */

tBleStatus aci_gatt_proc_complete_event_process(uint8_t *buffer_in)
{
 800a77e:	b590      	push	{r4, r7, lr}
 800a780:	b085      	sub	sp, #20
 800a782:	af00      	add	r7, sp, #0
 800a784:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a786:	240f      	movs	r4, #15
 800a788:	193b      	adds	r3, r7, r4
 800a78a:	2200      	movs	r2, #0
 800a78c:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gatt_proc_complete_event_rp0 *rp0 = (aci_gatt_proc_complete_event_rp0 *)buffer_in;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_complete_event(rp0->Connection_Handle,
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	781a      	ldrb	r2, [r3, #0]
 800a796:	785b      	ldrb	r3, [r3, #1]
 800a798:	021b      	lsls	r3, r3, #8
 800a79a:	4313      	orrs	r3, r2
 800a79c:	b29a      	uxth	r2, r3
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	789b      	ldrb	r3, [r3, #2]
 800a7a2:	0019      	movs	r1, r3
 800a7a4:	0010      	movs	r0, r2
 800a7a6:	f7f8 fa8f 	bl	8002cc8 <aci_gatt_proc_complete_event>
                               rp0->Error_Code);

  return status;
 800a7aa:	193b      	adds	r3, r7, r4
 800a7ac:	781b      	ldrb	r3, [r3, #0]
}
 800a7ae:	0018      	movs	r0, r3
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	b005      	add	sp, #20
 800a7b4:	bd90      	pop	{r4, r7, pc}

0800a7b6 <aci_gatt_error_resp_event_process>:
 *        - 0x11: Insufficient resources
 * @retval None
 */

tBleStatus aci_gatt_error_resp_event_process(uint8_t *buffer_in)
{
 800a7b6:	b590      	push	{r4, r7, lr}
 800a7b8:	b085      	sub	sp, #20
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a7be:	240f      	movs	r4, #15
 800a7c0:	193b      	adds	r3, r7, r4
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gatt_error_resp_event_rp0 *rp0 = (aci_gatt_error_resp_event_rp0 *)buffer_in;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	60bb      	str	r3, [r7, #8]
  aci_gatt_error_resp_event(rp0->Connection_Handle,
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	781a      	ldrb	r2, [r3, #0]
 800a7ce:	785b      	ldrb	r3, [r3, #1]
 800a7d0:	021b      	lsls	r3, r3, #8
 800a7d2:	4313      	orrs	r3, r2
 800a7d4:	b298      	uxth	r0, r3
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	7899      	ldrb	r1, [r3, #2]
 800a7da:	68bb      	ldr	r3, [r7, #8]
 800a7dc:	78da      	ldrb	r2, [r3, #3]
 800a7de:	791b      	ldrb	r3, [r3, #4]
 800a7e0:	021b      	lsls	r3, r3, #8
 800a7e2:	4313      	orrs	r3, r2
 800a7e4:	b29a      	uxth	r2, r3
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	795b      	ldrb	r3, [r3, #5]
 800a7ea:	f000 fef9 	bl	800b5e0 <aci_gatt_error_resp_event>
                            rp0->Req_Opcode,
                            rp0->Attribute_Handle,
                            rp0->Error_Code);

  return status;
 800a7ee:	193b      	adds	r3, r7, r4
 800a7f0:	781b      	ldrb	r3, [r3, #0]
}
 800a7f2:	0018      	movs	r0, r3
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	b005      	add	sp, #20
 800a7f8:	bd90      	pop	{r4, r7, pc}

0800a7fa <aci_gatt_disc_read_char_by_uuid_resp_event_process>:
 *        been performed.
 * @retval None
 */

tBleStatus aci_gatt_disc_read_char_by_uuid_resp_event_process(uint8_t *buffer_in)
{
 800a7fa:	b590      	push	{r4, r7, lr}
 800a7fc:	b085      	sub	sp, #20
 800a7fe:	af00      	add	r7, sp, #0
 800a800:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a802:	240f      	movs	r4, #15
 800a804:	193b      	adds	r3, r7, r4
 800a806:	2200      	movs	r2, #0
 800a808:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *rp0 = (aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *)buffer_in;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	60bb      	str	r3, [r7, #8]
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	781a      	ldrb	r2, [r3, #0]
 800a812:	785b      	ldrb	r3, [r3, #1]
 800a814:	021b      	lsls	r3, r3, #8
 800a816:	4313      	orrs	r3, r2
 800a818:	b298      	uxth	r0, r3
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	789a      	ldrb	r2, [r3, #2]
 800a81e:	78db      	ldrb	r3, [r3, #3]
 800a820:	021b      	lsls	r3, r3, #8
 800a822:	4313      	orrs	r3, r2
 800a824:	b299      	uxth	r1, r3
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	791a      	ldrb	r2, [r3, #4]
                                             rp0->Attribute_Handle,
                                             rp0->Attribute_Value_Length,
                                             rp0->Attribute_Value);
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	3305      	adds	r3, #5
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 800a82e:	f7f8 f9d9 	bl	8002be4 <aci_gatt_disc_read_char_by_uuid_resp_event>

  return status;
 800a832:	193b      	adds	r3, r7, r4
 800a834:	781b      	ldrb	r3, [r3, #0]
}
 800a836:	0018      	movs	r0, r3
 800a838:	46bd      	mov	sp, r7
 800a83a:	b005      	add	sp, #20
 800a83c:	bd90      	pop	{r4, r7, pc}

0800a83e <aci_gatt_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_write_permit_req_event_process(uint8_t *buffer_in)
{
 800a83e:	b590      	push	{r4, r7, lr}
 800a840:	b085      	sub	sp, #20
 800a842:	af00      	add	r7, sp, #0
 800a844:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a846:	240f      	movs	r4, #15
 800a848:	193b      	adds	r3, r7, r4
 800a84a:	2200      	movs	r2, #0
 800a84c:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gatt_write_permit_req_event_rp0 *rp0 = (aci_gatt_write_permit_req_event_rp0 *)buffer_in;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	60bb      	str	r3, [r7, #8]
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	781a      	ldrb	r2, [r3, #0]
 800a856:	785b      	ldrb	r3, [r3, #1]
 800a858:	021b      	lsls	r3, r3, #8
 800a85a:	4313      	orrs	r3, r2
 800a85c:	b298      	uxth	r0, r3
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	789a      	ldrb	r2, [r3, #2]
 800a862:	78db      	ldrb	r3, [r3, #3]
 800a864:	021b      	lsls	r3, r3, #8
 800a866:	4313      	orrs	r3, r2
 800a868:	b299      	uxth	r1, r3
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	791a      	ldrb	r2, [r3, #4]
                                  rp0->Attribute_Handle,
                                  rp0->Data_Length,
                                  rp0->Data);
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	3305      	adds	r3, #5
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 800a872:	f000 fed3 	bl	800b61c <aci_gatt_write_permit_req_event>

  return status;
 800a876:	193b      	adds	r3, r7, r4
 800a878:	781b      	ldrb	r3, [r3, #0]
}
 800a87a:	0018      	movs	r0, r3
 800a87c:	46bd      	mov	sp, r7
 800a87e:	b005      	add	sp, #20
 800a880:	bd90      	pop	{r4, r7, pc}

0800a882 <aci_gatt_read_permit_req_event_process>:
 * @param Offset Contains the offset from which the read has been requested
 * @retval None
 */

tBleStatus aci_gatt_read_permit_req_event_process(uint8_t *buffer_in)
{
 800a882:	b590      	push	{r4, r7, lr}
 800a884:	b085      	sub	sp, #20
 800a886:	af00      	add	r7, sp, #0
 800a888:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a88a:	240f      	movs	r4, #15
 800a88c:	193b      	adds	r3, r7, r4
 800a88e:	2200      	movs	r2, #0
 800a890:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gatt_read_permit_req_event_rp0 *rp0 = (aci_gatt_read_permit_req_event_rp0 *)buffer_in;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	60bb      	str	r3, [r7, #8]
  aci_gatt_read_permit_req_event(rp0->Connection_Handle,
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	781a      	ldrb	r2, [r3, #0]
 800a89a:	785b      	ldrb	r3, [r3, #1]
 800a89c:	021b      	lsls	r3, r3, #8
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	b298      	uxth	r0, r3
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	789a      	ldrb	r2, [r3, #2]
 800a8a6:	78db      	ldrb	r3, [r3, #3]
 800a8a8:	021b      	lsls	r3, r3, #8
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	b299      	uxth	r1, r3
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	791a      	ldrb	r2, [r3, #4]
 800a8b2:	795b      	ldrb	r3, [r3, #5]
 800a8b4:	021b      	lsls	r3, r3, #8
 800a8b6:	4313      	orrs	r3, r2
 800a8b8:	b29b      	uxth	r3, r3
 800a8ba:	001a      	movs	r2, r3
 800a8bc:	f000 fecc 	bl	800b658 <aci_gatt_read_permit_req_event>
                                 rp0->Attribute_Handle,
                                 rp0->Offset);

  return status;
 800a8c0:	193b      	adds	r3, r7, r4
 800a8c2:	781b      	ldrb	r3, [r3, #0]
}
 800a8c4:	0018      	movs	r0, r3
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	b005      	add	sp, #20
 800a8ca:	bd90      	pop	{r4, r7, pc}

0800a8cc <aci_gatt_read_multi_permit_req_event_process>:
 * @param Handle_Item See @ref Handle_Item_t
 * @retval None
 */

tBleStatus aci_gatt_read_multi_permit_req_event_process(uint8_t *buffer_in)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b0a6      	sub	sp, #152	@ 0x98
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a8d4:	238f      	movs	r3, #143	@ 0x8f
 800a8d6:	18fb      	adds	r3, r7, r3
 800a8d8:	2200      	movs	r2, #0
 800a8da:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gatt_read_multi_permit_req_event_rp0 *rp0 = (aci_gatt_read_multi_permit_req_event_rp0 *)buffer_in;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2288      	movs	r2, #136	@ 0x88
 800a8e0:	18ba      	adds	r2, r7, r2
 800a8e2:	6013      	str	r3, [r2, #0]
  uint8_t size = 3;
 800a8e4:	2397      	movs	r3, #151	@ 0x97
 800a8e6:	18fb      	adds	r3, r7, r3
 800a8e8:	2203      	movs	r2, #3
 800a8ea:	701a      	strb	r2, [r3, #0]
  int i;
  Handle_Item_t Handle_Item[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Item_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	2290      	movs	r2, #144	@ 0x90
 800a8f0:	18ba      	adds	r2, r7, r2
 800a8f2:	6013      	str	r3, [r2, #0]
 800a8f4:	e01e      	b.n	800a934 <aci_gatt_read_multi_permit_req_event_process+0x68>
    Handle_Item[i].Handle = rp0->Handle_Item[i].Handle;
 800a8f6:	2388      	movs	r3, #136	@ 0x88
 800a8f8:	18fb      	adds	r3, r7, r3
 800a8fa:	681a      	ldr	r2, [r3, #0]
 800a8fc:	2090      	movs	r0, #144	@ 0x90
 800a8fe:	183b      	adds	r3, r7, r0
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	005b      	lsls	r3, r3, #1
 800a904:	18d1      	adds	r1, r2, r3
 800a906:	78c9      	ldrb	r1, [r1, #3]
 800a908:	18d3      	adds	r3, r2, r3
 800a90a:	791b      	ldrb	r3, [r3, #4]
 800a90c:	021b      	lsls	r3, r3, #8
 800a90e:	430b      	orrs	r3, r1
 800a910:	b299      	uxth	r1, r3
 800a912:	2308      	movs	r3, #8
 800a914:	18fb      	adds	r3, r7, r3
 800a916:	183a      	adds	r2, r7, r0
 800a918:	6812      	ldr	r2, [r2, #0]
 800a91a:	0052      	lsls	r2, r2, #1
 800a91c:	52d1      	strh	r1, [r2, r3]
    size += 2;
 800a91e:	2297      	movs	r2, #151	@ 0x97
 800a920:	18bb      	adds	r3, r7, r2
 800a922:	18ba      	adds	r2, r7, r2
 800a924:	7812      	ldrb	r2, [r2, #0]
 800a926:	3202      	adds	r2, #2
 800a928:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800a92a:	183b      	adds	r3, r7, r0
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	3301      	adds	r3, #1
 800a930:	183a      	adds	r2, r7, r0
 800a932:	6013      	str	r3, [r2, #0]
 800a934:	2188      	movs	r1, #136	@ 0x88
 800a936:	187b      	adds	r3, r7, r1
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	789b      	ldrb	r3, [r3, #2]
 800a93c:	001a      	movs	r2, r3
 800a93e:	2390      	movs	r3, #144	@ 0x90
 800a940:	18fb      	adds	r3, r7, r3
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	4293      	cmp	r3, r2
 800a946:	dbd6      	blt.n	800a8f6 <aci_gatt_read_multi_permit_req_event_process+0x2a>
  }
  aci_gatt_read_multi_permit_req_event(rp0->Connection_Handle,
 800a948:	187b      	adds	r3, r7, r1
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	781a      	ldrb	r2, [r3, #0]
 800a94e:	785b      	ldrb	r3, [r3, #1]
 800a950:	021b      	lsls	r3, r3, #8
 800a952:	4313      	orrs	r3, r2
 800a954:	b298      	uxth	r0, r3
 800a956:	187b      	adds	r3, r7, r1
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	789b      	ldrb	r3, [r3, #2]
 800a95c:	2208      	movs	r2, #8
 800a95e:	18ba      	adds	r2, r7, r2
 800a960:	0019      	movs	r1, r3
 800a962:	f000 fe93 	bl	800b68c <aci_gatt_read_multi_permit_req_event>
                                       rp0->Number_of_Handles,
                                       Handle_Item);

  return status;
 800a966:	238f      	movs	r3, #143	@ 0x8f
 800a968:	18fb      	adds	r3, r7, r3
 800a96a:	781b      	ldrb	r3, [r3, #0]
}
 800a96c:	0018      	movs	r0, r3
 800a96e:	46bd      	mov	sp, r7
 800a970:	b026      	add	sp, #152	@ 0x98
 800a972:	bd80      	pop	{r7, pc}

0800a974 <aci_gatt_tx_pool_available_event_process>:
 * @param Available_Buffers Not used.
 * @retval None
 */

tBleStatus aci_gatt_tx_pool_available_event_process(uint8_t *buffer_in)
{
 800a974:	b590      	push	{r4, r7, lr}
 800a976:	b085      	sub	sp, #20
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a97c:	240f      	movs	r4, #15
 800a97e:	193b      	adds	r3, r7, r4
 800a980:	2200      	movs	r2, #0
 800a982:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gatt_tx_pool_available_event_rp0 *rp0 = (aci_gatt_tx_pool_available_event_rp0 *)buffer_in;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	60bb      	str	r3, [r7, #8]
  aci_gatt_tx_pool_available_event(rp0->Connection_Handle,
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	781a      	ldrb	r2, [r3, #0]
 800a98c:	785b      	ldrb	r3, [r3, #1]
 800a98e:	021b      	lsls	r3, r3, #8
 800a990:	4313      	orrs	r3, r2
 800a992:	b298      	uxth	r0, r3
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	789a      	ldrb	r2, [r3, #2]
 800a998:	78db      	ldrb	r3, [r3, #3]
 800a99a:	021b      	lsls	r3, r3, #8
 800a99c:	4313      	orrs	r3, r2
 800a99e:	b29b      	uxth	r3, r3
 800a9a0:	0019      	movs	r1, r3
 800a9a2:	f7f8 f9c7 	bl	8002d34 <aci_gatt_tx_pool_available_event>
                                   rp0->Available_Buffers);

  return status;
 800a9a6:	193b      	adds	r3, r7, r4
 800a9a8:	781b      	ldrb	r3, [r3, #0]
}
 800a9aa:	0018      	movs	r0, r3
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	b005      	add	sp, #20
 800a9b0:	bd90      	pop	{r4, r7, pc}

0800a9b2 <aci_gatt_server_confirmation_event_process>:
 * @param Connection_Handle Connection handle related to the event
 * @retval None
 */

tBleStatus aci_gatt_server_confirmation_event_process(uint8_t *buffer_in)
{
 800a9b2:	b590      	push	{r4, r7, lr}
 800a9b4:	b085      	sub	sp, #20
 800a9b6:	af00      	add	r7, sp, #0
 800a9b8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a9ba:	240f      	movs	r4, #15
 800a9bc:	193b      	adds	r3, r7, r4
 800a9be:	2200      	movs	r2, #0
 800a9c0:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gatt_server_confirmation_event_rp0 *rp0 = (aci_gatt_server_confirmation_event_rp0 *)buffer_in;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	60bb      	str	r3, [r7, #8]
  aci_gatt_server_confirmation_event(rp0->Connection_Handle);
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	781a      	ldrb	r2, [r3, #0]
 800a9ca:	785b      	ldrb	r3, [r3, #1]
 800a9cc:	021b      	lsls	r3, r3, #8
 800a9ce:	4313      	orrs	r3, r2
 800a9d0:	b29b      	uxth	r3, r3
 800a9d2:	0018      	movs	r0, r3
 800a9d4:	f000 fe6e 	bl	800b6b4 <aci_gatt_server_confirmation_event>

  return status;
 800a9d8:	193b      	adds	r3, r7, r4
 800a9da:	781b      	ldrb	r3, [r3, #0]
}
 800a9dc:	0018      	movs	r0, r3
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	b005      	add	sp, #20
 800a9e2:	bd90      	pop	{r4, r7, pc}

0800a9e4 <aci_gatt_prepare_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_prepare_write_permit_req_event_process(uint8_t *buffer_in)
{
 800a9e4:	b5b0      	push	{r4, r5, r7, lr}
 800a9e6:	b086      	sub	sp, #24
 800a9e8:	af02      	add	r7, sp, #8
 800a9ea:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a9ec:	250f      	movs	r5, #15
 800a9ee:	197b      	adds	r3, r7, r5
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	701a      	strb	r2, [r3, #0]
  /* Input params */
  aci_gatt_prepare_write_permit_req_event_rp0 *rp0 = (aci_gatt_prepare_write_permit_req_event_rp0 *)buffer_in;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	60bb      	str	r3, [r7, #8]
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	781a      	ldrb	r2, [r3, #0]
 800a9fc:	785b      	ldrb	r3, [r3, #1]
 800a9fe:	021b      	lsls	r3, r3, #8
 800aa00:	4313      	orrs	r3, r2
 800aa02:	b298      	uxth	r0, r3
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	789a      	ldrb	r2, [r3, #2]
 800aa08:	78db      	ldrb	r3, [r3, #3]
 800aa0a:	021b      	lsls	r3, r3, #8
 800aa0c:	4313      	orrs	r3, r2
 800aa0e:	b299      	uxth	r1, r3
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	791a      	ldrb	r2, [r3, #4]
 800aa14:	795b      	ldrb	r3, [r3, #5]
 800aa16:	021b      	lsls	r3, r3, #8
 800aa18:	4313      	orrs	r3, r2
 800aa1a:	b29a      	uxth	r2, r3
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	799c      	ldrb	r4, [r3, #6]
                                          rp0->Attribute_Handle,
                                          rp0->Offset,
                                          rp0->Data_Length,
                                          rp0->Data);
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	3307      	adds	r3, #7
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 800aa24:	9300      	str	r3, [sp, #0]
 800aa26:	0023      	movs	r3, r4
 800aa28:	f000 fe54 	bl	800b6d4 <aci_gatt_prepare_write_permit_req_event>

  return status;
 800aa2c:	197b      	adds	r3, r7, r5
 800aa2e:	781b      	ldrb	r3, [r3, #0]
}
 800aa30:	0018      	movs	r0, r3
 800aa32:	46bd      	mov	sp, r7
 800aa34:	b004      	add	sp, #16
 800aa36:	bdb0      	pop	{r4, r5, r7, pc}

0800aa38 <hci_le_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_connection_complete_event_process(uint8_t *buffer_in)
{
 800aa38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa3a:	46c6      	mov	lr, r8
 800aa3c:	b500      	push	{lr}
 800aa3e:	b08a      	sub	sp, #40	@ 0x28
 800aa40:	af06      	add	r7, sp, #24
 800aa42:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800aa44:	230f      	movs	r3, #15
 800aa46:	18fb      	adds	r3, r7, r3
 800aa48:	2200      	movs	r2, #0
 800aa4a:	701a      	strb	r2, [r3, #0]
  /* Input params */
  hci_le_connection_complete_event_rp0 *rp0 = (hci_le_connection_complete_event_rp0 *)buffer_in;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	60bb      	str	r3, [r7, #8]
  hci_le_connection_complete_event(rp0->Status,
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	781d      	ldrb	r5, [r3, #0]
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	785a      	ldrb	r2, [r3, #1]
 800aa58:	789b      	ldrb	r3, [r3, #2]
 800aa5a:	021b      	lsls	r3, r3, #8
 800aa5c:	4313      	orrs	r3, r2
 800aa5e:	b29e      	uxth	r6, r3
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	78da      	ldrb	r2, [r3, #3]
 800aa64:	4694      	mov	ip, r2
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	791a      	ldrb	r2, [r3, #4]
 800aa6a:	4690      	mov	r8, r2
                                   rp0->Connection_Handle,
                                   rp0->Role,
                                   rp0->Peer_Address_Type,
                                   rp0->Peer_Address,
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	1d5a      	adds	r2, r3, #5
  hci_le_connection_complete_event(rp0->Status,
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	7ad9      	ldrb	r1, [r3, #11]
 800aa74:	7b1b      	ldrb	r3, [r3, #12]
 800aa76:	021b      	lsls	r3, r3, #8
 800aa78:	430b      	orrs	r3, r1
 800aa7a:	b299      	uxth	r1, r3
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	7b58      	ldrb	r0, [r3, #13]
 800aa80:	7b9b      	ldrb	r3, [r3, #14]
 800aa82:	021b      	lsls	r3, r3, #8
 800aa84:	4303      	orrs	r3, r0
 800aa86:	b298      	uxth	r0, r3
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	7bdc      	ldrb	r4, [r3, #15]
 800aa8c:	7c1b      	ldrb	r3, [r3, #16]
 800aa8e:	021b      	lsls	r3, r3, #8
 800aa90:	4323      	orrs	r3, r4
 800aa92:	b29b      	uxth	r3, r3
 800aa94:	68bc      	ldr	r4, [r7, #8]
 800aa96:	7c64      	ldrb	r4, [r4, #17]
 800aa98:	9404      	str	r4, [sp, #16]
 800aa9a:	9303      	str	r3, [sp, #12]
 800aa9c:	9002      	str	r0, [sp, #8]
 800aa9e:	9101      	str	r1, [sp, #4]
 800aaa0:	9200      	str	r2, [sp, #0]
 800aaa2:	4643      	mov	r3, r8
 800aaa4:	4662      	mov	r2, ip
 800aaa6:	0031      	movs	r1, r6
 800aaa8:	0028      	movs	r0, r5
 800aaaa:	f7f7 ff29 	bl	8002900 <hci_le_connection_complete_event>
                                   rp0->Conn_Interval,
                                   rp0->Conn_Latency,
                                   rp0->Supervision_Timeout,
                                   rp0->Master_Clock_Accuracy);

  return status;
 800aaae:	230f      	movs	r3, #15
 800aab0:	18fb      	adds	r3, r7, r3
 800aab2:	781b      	ldrb	r3, [r3, #0]
}
 800aab4:	0018      	movs	r0, r3
 800aab6:	46bd      	mov	sp, r7
 800aab8:	b004      	add	sp, #16
 800aaba:	bc80      	pop	{r7}
 800aabc:	46b8      	mov	r8, r7
 800aabe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aac0 <hci_le_advertising_report_event_process>:
 * @param Advertising_Report See @ref Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_advertising_report_event_process(uint8_t *buffer_in)
{
 800aac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aac2:	b0a5      	sub	sp, #148	@ 0x94
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800aac8:	2387      	movs	r3, #135	@ 0x87
 800aaca:	18fb      	adds	r3, r7, r3
 800aacc:	2200      	movs	r2, #0
 800aace:	701a      	strb	r2, [r3, #0]
  /* Input params */
  hci_le_advertising_report_event_rp0 *rp0 = (hci_le_advertising_report_event_rp0 *)buffer_in;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2280      	movs	r2, #128	@ 0x80
 800aad4:	18ba      	adds	r2, r7, r2
 800aad6:	6013      	str	r3, [r2, #0]
  uint8_t size = 1;
 800aad8:	238f      	movs	r3, #143	@ 0x8f
 800aada:	18fb      	adds	r3, r7, r3
 800aadc:	2201      	movs	r2, #1
 800aade:	701a      	strb	r2, [r3, #0]
  int i;
  Advertising_Report_t Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 800aae0:	2300      	movs	r3, #0
 800aae2:	2288      	movs	r2, #136	@ 0x88
 800aae4:	18ba      	adds	r2, r7, r2
 800aae6:	6013      	str	r3, [r2, #0]
 800aae8:	e0b9      	b.n	800ac5e <hci_le_advertising_report_event_process+0x19e>
    Advertising_Report[i].Event_Type = rp0->Advertising_Report[i].Event_Type;
 800aaea:	2680      	movs	r6, #128	@ 0x80
 800aaec:	19bb      	adds	r3, r7, r6
 800aaee:	6819      	ldr	r1, [r3, #0]
 800aaf0:	2488      	movs	r4, #136	@ 0x88
 800aaf2:	193b      	adds	r3, r7, r4
 800aaf4:	681a      	ldr	r2, [r3, #0]
 800aaf6:	0013      	movs	r3, r2
 800aaf8:	009b      	lsls	r3, r3, #2
 800aafa:	189b      	adds	r3, r3, r2
 800aafc:	005b      	lsls	r3, r3, #1
 800aafe:	189b      	adds	r3, r3, r2
 800ab00:	18cb      	adds	r3, r1, r3
 800ab02:	3301      	adds	r3, #1
 800ab04:	7818      	ldrb	r0, [r3, #0]
 800ab06:	2308      	movs	r3, #8
 800ab08:	18f9      	adds	r1, r7, r3
 800ab0a:	193a      	adds	r2, r7, r4
 800ab0c:	6812      	ldr	r2, [r2, #0]
 800ab0e:	0013      	movs	r3, r2
 800ab10:	009b      	lsls	r3, r3, #2
 800ab12:	189b      	adds	r3, r3, r2
 800ab14:	009b      	lsls	r3, r3, #2
 800ab16:	1c02      	adds	r2, r0, #0
 800ab18:	545a      	strb	r2, [r3, r1]
    size += 1;
 800ab1a:	258f      	movs	r5, #143	@ 0x8f
 800ab1c:	197b      	adds	r3, r7, r5
 800ab1e:	197a      	adds	r2, r7, r5
 800ab20:	7812      	ldrb	r2, [r2, #0]
 800ab22:	3201      	adds	r2, #1
 800ab24:	701a      	strb	r2, [r3, #0]
    Advertising_Report[i].Address_Type = rp0->Advertising_Report[i].Address_Type;
 800ab26:	19ba      	adds	r2, r7, r6
 800ab28:	6811      	ldr	r1, [r2, #0]
 800ab2a:	193a      	adds	r2, r7, r4
 800ab2c:	6812      	ldr	r2, [r2, #0]
 800ab2e:	0013      	movs	r3, r2
 800ab30:	009b      	lsls	r3, r3, #2
 800ab32:	189b      	adds	r3, r3, r2
 800ab34:	005b      	lsls	r3, r3, #1
 800ab36:	189b      	adds	r3, r3, r2
 800ab38:	18cb      	adds	r3, r1, r3
 800ab3a:	3302      	adds	r3, #2
 800ab3c:	7818      	ldrb	r0, [r3, #0]
 800ab3e:	2308      	movs	r3, #8
 800ab40:	18f9      	adds	r1, r7, r3
 800ab42:	193a      	adds	r2, r7, r4
 800ab44:	6812      	ldr	r2, [r2, #0]
 800ab46:	0013      	movs	r3, r2
 800ab48:	009b      	lsls	r3, r3, #2
 800ab4a:	189b      	adds	r3, r3, r2
 800ab4c:	009b      	lsls	r3, r3, #2
 800ab4e:	18cb      	adds	r3, r1, r3
 800ab50:	3301      	adds	r3, #1
 800ab52:	1c02      	adds	r2, r0, #0
 800ab54:	701a      	strb	r2, [r3, #0]
    size += 1;
 800ab56:	197b      	adds	r3, r7, r5
 800ab58:	197a      	adds	r2, r7, r5
 800ab5a:	7812      	ldrb	r2, [r2, #0]
 800ab5c:	3201      	adds	r2, #1
 800ab5e:	701a      	strb	r2, [r3, #0]
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 800ab60:	2308      	movs	r3, #8
 800ab62:	18f9      	adds	r1, r7, r3
 800ab64:	193a      	adds	r2, r7, r4
 800ab66:	6812      	ldr	r2, [r2, #0]
 800ab68:	0013      	movs	r3, r2
 800ab6a:	009b      	lsls	r3, r3, #2
 800ab6c:	189b      	adds	r3, r3, r2
 800ab6e:	009b      	lsls	r3, r3, #2
 800ab70:	18cb      	adds	r3, r1, r3
 800ab72:	1c98      	adds	r0, r3, #2
 800ab74:	193a      	adds	r2, r7, r4
 800ab76:	6812      	ldr	r2, [r2, #0]
 800ab78:	0013      	movs	r3, r2
 800ab7a:	009b      	lsls	r3, r3, #2
 800ab7c:	189b      	adds	r3, r3, r2
 800ab7e:	005b      	lsls	r3, r3, #1
 800ab80:	189b      	adds	r3, r3, r2
 800ab82:	19ba      	adds	r2, r7, r6
 800ab84:	6812      	ldr	r2, [r2, #0]
 800ab86:	18d3      	adds	r3, r2, r3
 800ab88:	3303      	adds	r3, #3
 800ab8a:	2206      	movs	r2, #6
 800ab8c:	0019      	movs	r1, r3
 800ab8e:	f002 fed1 	bl	800d934 <memcpy>
    size += 6;
 800ab92:	197b      	adds	r3, r7, r5
 800ab94:	197a      	adds	r2, r7, r5
 800ab96:	7812      	ldrb	r2, [r2, #0]
 800ab98:	3206      	adds	r2, #6
 800ab9a:	701a      	strb	r2, [r3, #0]
    Advertising_Report[i].Length_Data = rp0->Advertising_Report[i].Length_Data;
 800ab9c:	19ba      	adds	r2, r7, r6
 800ab9e:	6811      	ldr	r1, [r2, #0]
 800aba0:	193a      	adds	r2, r7, r4
 800aba2:	6812      	ldr	r2, [r2, #0]
 800aba4:	0013      	movs	r3, r2
 800aba6:	009b      	lsls	r3, r3, #2
 800aba8:	189b      	adds	r3, r3, r2
 800abaa:	005b      	lsls	r3, r3, #1
 800abac:	189b      	adds	r3, r3, r2
 800abae:	18cb      	adds	r3, r1, r3
 800abb0:	3309      	adds	r3, #9
 800abb2:	7818      	ldrb	r0, [r3, #0]
 800abb4:	2308      	movs	r3, #8
 800abb6:	18f9      	adds	r1, r7, r3
 800abb8:	193a      	adds	r2, r7, r4
 800abba:	6812      	ldr	r2, [r2, #0]
 800abbc:	0013      	movs	r3, r2
 800abbe:	009b      	lsls	r3, r3, #2
 800abc0:	189b      	adds	r3, r3, r2
 800abc2:	009b      	lsls	r3, r3, #2
 800abc4:	18cb      	adds	r3, r1, r3
 800abc6:	3308      	adds	r3, #8
 800abc8:	1c02      	adds	r2, r0, #0
 800abca:	701a      	strb	r2, [r3, #0]
    size += 1;
 800abcc:	197b      	adds	r3, r7, r5
 800abce:	197a      	adds	r2, r7, r5
 800abd0:	7812      	ldrb	r2, [r2, #0]
 800abd2:	3201      	adds	r2, #1
 800abd4:	701a      	strb	r2, [r3, #0]
    Advertising_Report[i].Data = rp0->Advertising_Report[i].Data;
 800abd6:	193a      	adds	r2, r7, r4
 800abd8:	6812      	ldr	r2, [r2, #0]
 800abda:	0013      	movs	r3, r2
 800abdc:	009b      	lsls	r3, r3, #2
 800abde:	189b      	adds	r3, r3, r2
 800abe0:	005b      	lsls	r3, r3, #1
 800abe2:	189b      	adds	r3, r3, r2
 800abe4:	3308      	adds	r3, #8
 800abe6:	19ba      	adds	r2, r7, r6
 800abe8:	6812      	ldr	r2, [r2, #0]
 800abea:	18d3      	adds	r3, r2, r3
 800abec:	1c99      	adds	r1, r3, #2
 800abee:	2308      	movs	r3, #8
 800abf0:	18f8      	adds	r0, r7, r3
 800abf2:	193a      	adds	r2, r7, r4
 800abf4:	6812      	ldr	r2, [r2, #0]
 800abf6:	0013      	movs	r3, r2
 800abf8:	009b      	lsls	r3, r3, #2
 800abfa:	189b      	adds	r3, r3, r2
 800abfc:	009b      	lsls	r3, r3, #2
 800abfe:	18c3      	adds	r3, r0, r3
 800ac00:	330c      	adds	r3, #12
 800ac02:	6019      	str	r1, [r3, #0]
    size += rp0->Advertising_Report[i].Length_Data;
 800ac04:	19ba      	adds	r2, r7, r6
 800ac06:	6811      	ldr	r1, [r2, #0]
 800ac08:	193a      	adds	r2, r7, r4
 800ac0a:	6812      	ldr	r2, [r2, #0]
 800ac0c:	0013      	movs	r3, r2
 800ac0e:	009b      	lsls	r3, r3, #2
 800ac10:	189b      	adds	r3, r3, r2
 800ac12:	005b      	lsls	r3, r3, #1
 800ac14:	189b      	adds	r3, r3, r2
 800ac16:	18cb      	adds	r3, r1, r3
 800ac18:	3309      	adds	r3, #9
 800ac1a:	7819      	ldrb	r1, [r3, #0]
 800ac1c:	197b      	adds	r3, r7, r5
 800ac1e:	197a      	adds	r2, r7, r5
 800ac20:	7812      	ldrb	r2, [r2, #0]
 800ac22:	188a      	adds	r2, r1, r2
 800ac24:	701a      	strb	r2, [r3, #0]
    Advertising_Report[i].RSSI = (uint8_t)buffer_in[size];
 800ac26:	197b      	adds	r3, r7, r5
 800ac28:	781b      	ldrb	r3, [r3, #0]
 800ac2a:	687a      	ldr	r2, [r7, #4]
 800ac2c:	18d3      	adds	r3, r2, r3
 800ac2e:	781b      	ldrb	r3, [r3, #0]
 800ac30:	b258      	sxtb	r0, r3
 800ac32:	2308      	movs	r3, #8
 800ac34:	18f9      	adds	r1, r7, r3
 800ac36:	193b      	adds	r3, r7, r4
 800ac38:	681a      	ldr	r2, [r3, #0]
 800ac3a:	0013      	movs	r3, r2
 800ac3c:	009b      	lsls	r3, r3, #2
 800ac3e:	189b      	adds	r3, r3, r2
 800ac40:	009b      	lsls	r3, r3, #2
 800ac42:	18cb      	adds	r3, r1, r3
 800ac44:	3310      	adds	r3, #16
 800ac46:	1c02      	adds	r2, r0, #0
 800ac48:	701a      	strb	r2, [r3, #0]
    size += 1;
 800ac4a:	197b      	adds	r3, r7, r5
 800ac4c:	197a      	adds	r2, r7, r5
 800ac4e:	7812      	ldrb	r2, [r2, #0]
 800ac50:	3201      	adds	r2, #1
 800ac52:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < rp0->Num_Reports; i++) {
 800ac54:	193b      	adds	r3, r7, r4
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	3301      	adds	r3, #1
 800ac5a:	193a      	adds	r2, r7, r4
 800ac5c:	6013      	str	r3, [r2, #0]
 800ac5e:	2180      	movs	r1, #128	@ 0x80
 800ac60:	187b      	adds	r3, r7, r1
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	781b      	ldrb	r3, [r3, #0]
 800ac66:	001a      	movs	r2, r3
 800ac68:	2388      	movs	r3, #136	@ 0x88
 800ac6a:	18fb      	adds	r3, r7, r3
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	da00      	bge.n	800ac74 <hci_le_advertising_report_event_process+0x1b4>
 800ac72:	e73a      	b.n	800aaea <hci_le_advertising_report_event_process+0x2a>
  }
  hci_le_advertising_report_event(rp0->Num_Reports,
 800ac74:	187b      	adds	r3, r7, r1
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	781b      	ldrb	r3, [r3, #0]
 800ac7a:	2208      	movs	r2, #8
 800ac7c:	18ba      	adds	r2, r7, r2
 800ac7e:	0011      	movs	r1, r2
 800ac80:	0018      	movs	r0, r3
 800ac82:	f7f7 ff0d 	bl	8002aa0 <hci_le_advertising_report_event>
                                  Advertising_Report);

  return status;
 800ac86:	2387      	movs	r3, #135	@ 0x87
 800ac88:	18fb      	adds	r3, r7, r3
 800ac8a:	781b      	ldrb	r3, [r3, #0]
}
 800ac8c:	0018      	movs	r0, r3
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	b025      	add	sp, #148	@ 0x94
 800ac92:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ac94 <hci_le_connection_update_complete_event_process>:
 *        - 0x000A (100 ms)  ... 0x0C80 (32000 ms) 
 * @retval None
 */

tBleStatus hci_le_connection_update_complete_event_process(uint8_t *buffer_in)
{
 800ac94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac96:	b087      	sub	sp, #28
 800ac98:	af02      	add	r7, sp, #8
 800ac9a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800ac9c:	260f      	movs	r6, #15
 800ac9e:	19bb      	adds	r3, r7, r6
 800aca0:	2200      	movs	r2, #0
 800aca2:	701a      	strb	r2, [r3, #0]
  /* Input params */
  hci_le_connection_update_complete_event_rp0 *rp0 = (hci_le_connection_update_complete_event_rp0 *)buffer_in;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	60bb      	str	r3, [r7, #8]
  hci_le_connection_update_complete_event(rp0->Status,
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	7818      	ldrb	r0, [r3, #0]
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	785a      	ldrb	r2, [r3, #1]
 800acb0:	789b      	ldrb	r3, [r3, #2]
 800acb2:	021b      	lsls	r3, r3, #8
 800acb4:	4313      	orrs	r3, r2
 800acb6:	b299      	uxth	r1, r3
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	78da      	ldrb	r2, [r3, #3]
 800acbc:	791b      	ldrb	r3, [r3, #4]
 800acbe:	021b      	lsls	r3, r3, #8
 800acc0:	4313      	orrs	r3, r2
 800acc2:	b29c      	uxth	r4, r3
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	795a      	ldrb	r2, [r3, #5]
 800acc8:	799b      	ldrb	r3, [r3, #6]
 800acca:	021b      	lsls	r3, r3, #8
 800accc:	4313      	orrs	r3, r2
 800acce:	b29d      	uxth	r5, r3
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	79da      	ldrb	r2, [r3, #7]
 800acd4:	7a1b      	ldrb	r3, [r3, #8]
 800acd6:	021b      	lsls	r3, r3, #8
 800acd8:	4313      	orrs	r3, r2
 800acda:	b29b      	uxth	r3, r3
 800acdc:	9300      	str	r3, [sp, #0]
 800acde:	002b      	movs	r3, r5
 800ace0:	0022      	movs	r2, r4
 800ace2:	f000 fa35 	bl	800b150 <hci_le_connection_update_complete_event>
                                          rp0->Connection_Handle,
                                          rp0->Conn_Interval,
                                          rp0->Conn_Latency,
                                          rp0->Supervision_Timeout);

  return status;
 800ace6:	19bb      	adds	r3, r7, r6
 800ace8:	781b      	ldrb	r3, [r3, #0]
}
 800acea:	0018      	movs	r0, r3
 800acec:	46bd      	mov	sp, r7
 800acee:	b005      	add	sp, #20
 800acf0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800acf2 <hci_le_read_remote_used_features_complete_event_process>:
 *        Layer specification.
 * @retval None
 */

tBleStatus hci_le_read_remote_used_features_complete_event_process(uint8_t *buffer_in)
{
 800acf2:	b590      	push	{r4, r7, lr}
 800acf4:	b085      	sub	sp, #20
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800acfa:	240f      	movs	r4, #15
 800acfc:	193b      	adds	r3, r7, r4
 800acfe:	2200      	movs	r2, #0
 800ad00:	701a      	strb	r2, [r3, #0]
  /* Input params */
  hci_le_read_remote_used_features_complete_event_rp0 *rp0 = (hci_le_read_remote_used_features_complete_event_rp0 *)buffer_in;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	60bb      	str	r3, [r7, #8]
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	7818      	ldrb	r0, [r3, #0]
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	785a      	ldrb	r2, [r3, #1]
 800ad0e:	789b      	ldrb	r3, [r3, #2]
 800ad10:	021b      	lsls	r3, r3, #8
 800ad12:	4313      	orrs	r3, r2
 800ad14:	b299      	uxth	r1, r3
                                                  rp0->Connection_Handle,
                                                  rp0->LE_Features);
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	3303      	adds	r3, #3
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 800ad1a:	001a      	movs	r2, r3
 800ad1c:	f000 fa36 	bl	800b18c <hci_le_read_remote_used_features_complete_event>

  return status;
 800ad20:	193b      	adds	r3, r7, r4
 800ad22:	781b      	ldrb	r3, [r3, #0]
}
 800ad24:	0018      	movs	r0, r3
 800ad26:	46bd      	mov	sp, r7
 800ad28:	b005      	add	sp, #20
 800ad2a:	bd90      	pop	{r4, r7, pc}

0800ad2c <hci_le_long_term_key_request_event_process>:
 * @param Encrypted_Diversifier 16-bit encrypted diversifier
 * @retval None
 */

tBleStatus hci_le_long_term_key_request_event_process(uint8_t *buffer_in)
{
 800ad2c:	b590      	push	{r4, r7, lr}
 800ad2e:	b085      	sub	sp, #20
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800ad34:	240f      	movs	r4, #15
 800ad36:	193b      	adds	r3, r7, r4
 800ad38:	2200      	movs	r2, #0
 800ad3a:	701a      	strb	r2, [r3, #0]
  /* Input params */
  hci_le_long_term_key_request_event_rp0 *rp0 = (hci_le_long_term_key_request_event_rp0 *)buffer_in;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	60bb      	str	r3, [r7, #8]
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	781a      	ldrb	r2, [r3, #0]
 800ad44:	785b      	ldrb	r3, [r3, #1]
 800ad46:	021b      	lsls	r3, r3, #8
 800ad48:	4313      	orrs	r3, r2
 800ad4a:	b298      	uxth	r0, r3
                                     rp0->Random_Number,
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	1c99      	adds	r1, r3, #2
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	7a9a      	ldrb	r2, [r3, #10]
 800ad54:	7adb      	ldrb	r3, [r3, #11]
 800ad56:	021b      	lsls	r3, r3, #8
 800ad58:	4313      	orrs	r3, r2
 800ad5a:	b29b      	uxth	r3, r3
 800ad5c:	001a      	movs	r2, r3
 800ad5e:	f000 fa29 	bl	800b1b4 <hci_le_long_term_key_request_event>
                                     rp0->Encrypted_Diversifier);

  return status;
 800ad62:	193b      	adds	r3, r7, r4
 800ad64:	781b      	ldrb	r3, [r3, #0]
}
 800ad66:	0018      	movs	r0, r3
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	b005      	add	sp, #20
 800ad6c:	bd90      	pop	{r4, r7, pc}

0800ad6e <hci_le_data_length_change_event_process>:
 *        future use)
 * @retval None
 */

tBleStatus hci_le_data_length_change_event_process(uint8_t *buffer_in)
{
 800ad6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad70:	b087      	sub	sp, #28
 800ad72:	af02      	add	r7, sp, #8
 800ad74:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800ad76:	260f      	movs	r6, #15
 800ad78:	19bb      	adds	r3, r7, r6
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	701a      	strb	r2, [r3, #0]
  /* Input params */
  hci_le_data_length_change_event_rp0 *rp0 = (hci_le_data_length_change_event_rp0 *)buffer_in;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	60bb      	str	r3, [r7, #8]
  hci_le_data_length_change_event(rp0->Connection_Handle,
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	781a      	ldrb	r2, [r3, #0]
 800ad86:	785b      	ldrb	r3, [r3, #1]
 800ad88:	021b      	lsls	r3, r3, #8
 800ad8a:	4313      	orrs	r3, r2
 800ad8c:	b298      	uxth	r0, r3
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	789a      	ldrb	r2, [r3, #2]
 800ad92:	78db      	ldrb	r3, [r3, #3]
 800ad94:	021b      	lsls	r3, r3, #8
 800ad96:	4313      	orrs	r3, r2
 800ad98:	b299      	uxth	r1, r3
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	791a      	ldrb	r2, [r3, #4]
 800ad9e:	795b      	ldrb	r3, [r3, #5]
 800ada0:	021b      	lsls	r3, r3, #8
 800ada2:	4313      	orrs	r3, r2
 800ada4:	b29c      	uxth	r4, r3
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	799a      	ldrb	r2, [r3, #6]
 800adaa:	79db      	ldrb	r3, [r3, #7]
 800adac:	021b      	lsls	r3, r3, #8
 800adae:	4313      	orrs	r3, r2
 800adb0:	b29d      	uxth	r5, r3
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	7a1a      	ldrb	r2, [r3, #8]
 800adb6:	7a5b      	ldrb	r3, [r3, #9]
 800adb8:	021b      	lsls	r3, r3, #8
 800adba:	4313      	orrs	r3, r2
 800adbc:	b29b      	uxth	r3, r3
 800adbe:	9300      	str	r3, [sp, #0]
 800adc0:	002b      	movs	r3, r5
 800adc2:	0022      	movs	r2, r4
 800adc4:	f000 fa0c 	bl	800b1e0 <hci_le_data_length_change_event>
                                  rp0->MaxTxOctets,
                                  rp0->MaxTxTime,
                                  rp0->MaxRxOctets,
                                  rp0->MaxRxTime);

  return status;
 800adc8:	19bb      	adds	r3, r7, r6
 800adca:	781b      	ldrb	r3, [r3, #0]
}
 800adcc:	0018      	movs	r0, r3
 800adce:	46bd      	mov	sp, r7
 800add0:	b005      	add	sp, #20
 800add2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800add4 <hci_le_read_local_p256_public_key_complete_event_process>:
 * @param Local_P256_Public_Key Local P-256 public key.
 * @retval None
 */

tBleStatus hci_le_read_local_p256_public_key_complete_event_process(uint8_t *buffer_in)
{
 800add4:	b590      	push	{r4, r7, lr}
 800add6:	b085      	sub	sp, #20
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800addc:	240f      	movs	r4, #15
 800adde:	193b      	adds	r3, r7, r4
 800ade0:	2200      	movs	r2, #0
 800ade2:	701a      	strb	r2, [r3, #0]
  /* Input params */
  hci_le_read_local_p256_public_key_complete_event_rp0 *rp0 = (hci_le_read_local_p256_public_key_complete_event_rp0 *)buffer_in;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	60bb      	str	r3, [r7, #8]
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	781a      	ldrb	r2, [r3, #0]
                                                   rp0->Local_P256_Public_Key);
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	3301      	adds	r3, #1
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 800adf0:	0019      	movs	r1, r3
 800adf2:	0010      	movs	r0, r2
 800adf4:	f000 fa12 	bl	800b21c <hci_le_read_local_p256_public_key_complete_event>

  return status;
 800adf8:	193b      	adds	r3, r7, r4
 800adfa:	781b      	ldrb	r3, [r3, #0]
}
 800adfc:	0018      	movs	r0, r3
 800adfe:	46bd      	mov	sp, r7
 800ae00:	b005      	add	sp, #20
 800ae02:	bd90      	pop	{r4, r7, pc}

0800ae04 <hci_le_generate_dhkey_complete_event_process>:
 * @param DHKey Diffie Hellman Key
 * @retval None
 */

tBleStatus hci_le_generate_dhkey_complete_event_process(uint8_t *buffer_in)
{
 800ae04:	b590      	push	{r4, r7, lr}
 800ae06:	b085      	sub	sp, #20
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800ae0c:	240f      	movs	r4, #15
 800ae0e:	193b      	adds	r3, r7, r4
 800ae10:	2200      	movs	r2, #0
 800ae12:	701a      	strb	r2, [r3, #0]
  /* Input params */
  hci_le_generate_dhkey_complete_event_rp0 *rp0 = (hci_le_generate_dhkey_complete_event_rp0 *)buffer_in;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	60bb      	str	r3, [r7, #8]
  hci_le_generate_dhkey_complete_event(rp0->Status,
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	781a      	ldrb	r2, [r3, #0]
                                       rp0->DHKey);
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	3301      	adds	r3, #1
  hci_le_generate_dhkey_complete_event(rp0->Status,
 800ae20:	0019      	movs	r1, r3
 800ae22:	0010      	movs	r0, r2
 800ae24:	f000 fa0c 	bl	800b240 <hci_le_generate_dhkey_complete_event>

  return status;
 800ae28:	193b      	adds	r3, r7, r4
 800ae2a:	781b      	ldrb	r3, [r3, #0]
}
 800ae2c:	0018      	movs	r0, r3
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	b005      	add	sp, #20
 800ae32:	bd90      	pop	{r4, r7, pc}

0800ae34 <hci_le_enhanced_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_enhanced_connection_complete_event_process(uint8_t *buffer_in)
{
 800ae34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae36:	46d6      	mov	lr, sl
 800ae38:	464f      	mov	r7, r9
 800ae3a:	4646      	mov	r6, r8
 800ae3c:	b5c0      	push	{r6, r7, lr}
 800ae3e:	b08c      	sub	sp, #48	@ 0x30
 800ae40:	af08      	add	r7, sp, #32
 800ae42:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800ae44:	230f      	movs	r3, #15
 800ae46:	18fb      	adds	r3, r7, r3
 800ae48:	2200      	movs	r2, #0
 800ae4a:	701a      	strb	r2, [r3, #0]
  /* Input params */
  hci_le_enhanced_connection_complete_event_rp0 *rp0 = (hci_le_enhanced_connection_complete_event_rp0 *)buffer_in;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	60bb      	str	r3, [r7, #8]
  hci_le_enhanced_connection_complete_event(rp0->Status,
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	781a      	ldrb	r2, [r3, #0]
 800ae54:	4694      	mov	ip, r2
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	785a      	ldrb	r2, [r3, #1]
 800ae5a:	789b      	ldrb	r3, [r3, #2]
 800ae5c:	021b      	lsls	r3, r3, #8
 800ae5e:	4313      	orrs	r3, r2
 800ae60:	b29a      	uxth	r2, r3
 800ae62:	4690      	mov	r8, r2
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	78da      	ldrb	r2, [r3, #3]
 800ae68:	4691      	mov	r9, r2
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	791a      	ldrb	r2, [r3, #4]
 800ae6e:	4692      	mov	sl, r2
                                            rp0->Connection_Handle,
                                            rp0->Role,
                                            rp0->Peer_Address_Type,
                                            rp0->Peer_Address,
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	1d5a      	adds	r2, r3, #5
                                            rp0->Local_Resolvable_Private_Address,
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	0019      	movs	r1, r3
 800ae78:	310b      	adds	r1, #11
                                            rp0->Peer_Resolvable_Private_Address,
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	0018      	movs	r0, r3
 800ae7e:	3011      	adds	r0, #17
  hci_le_enhanced_connection_complete_event(rp0->Status,
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	7ddc      	ldrb	r4, [r3, #23]
 800ae84:	7e1b      	ldrb	r3, [r3, #24]
 800ae86:	021b      	lsls	r3, r3, #8
 800ae88:	4323      	orrs	r3, r4
 800ae8a:	b29c      	uxth	r4, r3
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	7e5d      	ldrb	r5, [r3, #25]
 800ae90:	7e9b      	ldrb	r3, [r3, #26]
 800ae92:	021b      	lsls	r3, r3, #8
 800ae94:	432b      	orrs	r3, r5
 800ae96:	b29d      	uxth	r5, r3
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	7ede      	ldrb	r6, [r3, #27]
 800ae9c:	7f1b      	ldrb	r3, [r3, #28]
 800ae9e:	021b      	lsls	r3, r3, #8
 800aea0:	4333      	orrs	r3, r6
 800aea2:	b29b      	uxth	r3, r3
 800aea4:	68be      	ldr	r6, [r7, #8]
 800aea6:	7f76      	ldrb	r6, [r6, #29]
 800aea8:	9606      	str	r6, [sp, #24]
 800aeaa:	9305      	str	r3, [sp, #20]
 800aeac:	9504      	str	r5, [sp, #16]
 800aeae:	9403      	str	r4, [sp, #12]
 800aeb0:	9002      	str	r0, [sp, #8]
 800aeb2:	9101      	str	r1, [sp, #4]
 800aeb4:	9200      	str	r2, [sp, #0]
 800aeb6:	4653      	mov	r3, sl
 800aeb8:	464a      	mov	r2, r9
 800aeba:	4641      	mov	r1, r8
 800aebc:	4660      	mov	r0, ip
 800aebe:	f000 f9d1 	bl	800b264 <hci_le_enhanced_connection_complete_event>
                                            rp0->Conn_Interval,
                                            rp0->Conn_Latency,
                                            rp0->Supervision_Timeout,
                                            rp0->Master_Clock_Accuracy);

  return status;
 800aec2:	230f      	movs	r3, #15
 800aec4:	18fb      	adds	r3, r7, r3
 800aec6:	781b      	ldrb	r3, [r3, #0]
}
 800aec8:	0018      	movs	r0, r3
 800aeca:	46bd      	mov	sp, r7
 800aecc:	b004      	add	sp, #16
 800aece:	bce0      	pop	{r5, r6, r7}
 800aed0:	46ba      	mov	sl, r7
 800aed2:	46b1      	mov	r9, r6
 800aed4:	46a8      	mov	r8, r5
 800aed6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aed8 <hci_le_direct_advertising_report_event_process>:
 * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_direct_advertising_report_event_process(uint8_t *buffer_in)
{
 800aed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aeda:	b0a7      	sub	sp, #156	@ 0x9c
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800aee0:	238f      	movs	r3, #143	@ 0x8f
 800aee2:	18fb      	adds	r3, r7, r3
 800aee4:	2200      	movs	r2, #0
 800aee6:	701a      	strb	r2, [r3, #0]
  /* Input params */
  hci_le_direct_advertising_report_event_rp0 *rp0 = (hci_le_direct_advertising_report_event_rp0 *)buffer_in;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2288      	movs	r2, #136	@ 0x88
 800aeec:	18ba      	adds	r2, r7, r2
 800aeee:	6013      	str	r3, [r2, #0]
  uint8_t size = 1;
 800aef0:	2397      	movs	r3, #151	@ 0x97
 800aef2:	18fb      	adds	r3, r7, r3
 800aef4:	2201      	movs	r2, #1
 800aef6:	701a      	strb	r2, [r3, #0]
  int i;
  Direct_Advertising_Report_t Direct_Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Direct_Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 800aef8:	2300      	movs	r3, #0
 800aefa:	2290      	movs	r2, #144	@ 0x90
 800aefc:	18ba      	adds	r2, r7, r2
 800aefe:	6013      	str	r3, [r2, #0]
 800af00:	e08d      	b.n	800b01e <hci_le_direct_advertising_report_event_process+0x146>
    Direct_Advertising_Report[i].Event_Type = rp0->Direct_Advertising_Report[i].Event_Type;
 800af02:	2688      	movs	r6, #136	@ 0x88
 800af04:	19bb      	adds	r3, r7, r6
 800af06:	681a      	ldr	r2, [r3, #0]
 800af08:	2490      	movs	r4, #144	@ 0x90
 800af0a:	193b      	adds	r3, r7, r4
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	011b      	lsls	r3, r3, #4
 800af10:	18d3      	adds	r3, r2, r3
 800af12:	3301      	adds	r3, #1
 800af14:	7819      	ldrb	r1, [r3, #0]
 800af16:	2508      	movs	r5, #8
 800af18:	197b      	adds	r3, r7, r5
 800af1a:	193a      	adds	r2, r7, r4
 800af1c:	6812      	ldr	r2, [r2, #0]
 800af1e:	0112      	lsls	r2, r2, #4
 800af20:	54d1      	strb	r1, [r2, r3]
    size += 1;
 800af22:	2097      	movs	r0, #151	@ 0x97
 800af24:	183b      	adds	r3, r7, r0
 800af26:	183a      	adds	r2, r7, r0
 800af28:	7812      	ldrb	r2, [r2, #0]
 800af2a:	3201      	adds	r2, #1
 800af2c:	701a      	strb	r2, [r3, #0]
    Direct_Advertising_Report[i].Address_Type = rp0->Direct_Advertising_Report[i].Address_Type;
 800af2e:	19bb      	adds	r3, r7, r6
 800af30:	681a      	ldr	r2, [r3, #0]
 800af32:	193b      	adds	r3, r7, r4
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	011b      	lsls	r3, r3, #4
 800af38:	18d3      	adds	r3, r2, r3
 800af3a:	3302      	adds	r3, #2
 800af3c:	7819      	ldrb	r1, [r3, #0]
 800af3e:	197a      	adds	r2, r7, r5
 800af40:	193b      	adds	r3, r7, r4
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	011b      	lsls	r3, r3, #4
 800af46:	18d3      	adds	r3, r2, r3
 800af48:	3301      	adds	r3, #1
 800af4a:	1c0a      	adds	r2, r1, #0
 800af4c:	701a      	strb	r2, [r3, #0]
    size += 1;
 800af4e:	0005      	movs	r5, r0
 800af50:	197b      	adds	r3, r7, r5
 800af52:	197a      	adds	r2, r7, r5
 800af54:	7812      	ldrb	r2, [r2, #0]
 800af56:	3201      	adds	r2, #1
 800af58:	701a      	strb	r2, [r3, #0]
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Address, (const void *) rp0->Direct_Advertising_Report[i].Address, 6);
 800af5a:	2008      	movs	r0, #8
 800af5c:	183a      	adds	r2, r7, r0
 800af5e:	193b      	adds	r3, r7, r4
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	011b      	lsls	r3, r3, #4
 800af64:	18d3      	adds	r3, r2, r3
 800af66:	1c98      	adds	r0, r3, #2
 800af68:	193b      	adds	r3, r7, r4
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	011b      	lsls	r3, r3, #4
 800af6e:	19ba      	adds	r2, r7, r6
 800af70:	6812      	ldr	r2, [r2, #0]
 800af72:	18d3      	adds	r3, r2, r3
 800af74:	3303      	adds	r3, #3
 800af76:	2206      	movs	r2, #6
 800af78:	0019      	movs	r1, r3
 800af7a:	f002 fcdb 	bl	800d934 <memcpy>
    size += 6;
 800af7e:	197b      	adds	r3, r7, r5
 800af80:	197a      	adds	r2, r7, r5
 800af82:	7812      	ldrb	r2, [r2, #0]
 800af84:	3206      	adds	r2, #6
 800af86:	701a      	strb	r2, [r3, #0]
    Direct_Advertising_Report[i].Direct_Address_Type = rp0->Direct_Advertising_Report[i].Direct_Address_Type;
 800af88:	19bb      	adds	r3, r7, r6
 800af8a:	681a      	ldr	r2, [r3, #0]
 800af8c:	193b      	adds	r3, r7, r4
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	011b      	lsls	r3, r3, #4
 800af92:	18d3      	adds	r3, r2, r3
 800af94:	3309      	adds	r3, #9
 800af96:	7819      	ldrb	r1, [r3, #0]
 800af98:	2008      	movs	r0, #8
 800af9a:	183a      	adds	r2, r7, r0
 800af9c:	193b      	adds	r3, r7, r4
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	011b      	lsls	r3, r3, #4
 800afa2:	18d3      	adds	r3, r2, r3
 800afa4:	3308      	adds	r3, #8
 800afa6:	1c0a      	adds	r2, r1, #0
 800afa8:	701a      	strb	r2, [r3, #0]
    size += 1;
 800afaa:	197b      	adds	r3, r7, r5
 800afac:	197a      	adds	r2, r7, r5
 800afae:	7812      	ldrb	r2, [r2, #0]
 800afb0:	3201      	adds	r2, #1
 800afb2:	701a      	strb	r2, [r3, #0]
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 800afb4:	183a      	adds	r2, r7, r0
 800afb6:	1939      	adds	r1, r7, r4
 800afb8:	680b      	ldr	r3, [r1, #0]
 800afba:	011b      	lsls	r3, r3, #4
 800afbc:	3308      	adds	r3, #8
 800afbe:	18d3      	adds	r3, r2, r3
 800afc0:	1c58      	adds	r0, r3, #1
 800afc2:	193a      	adds	r2, r7, r4
 800afc4:	6813      	ldr	r3, [r2, #0]
 800afc6:	011b      	lsls	r3, r3, #4
 800afc8:	3308      	adds	r3, #8
 800afca:	19ba      	adds	r2, r7, r6
 800afcc:	6812      	ldr	r2, [r2, #0]
 800afce:	18d3      	adds	r3, r2, r3
 800afd0:	3302      	adds	r3, #2
 800afd2:	2206      	movs	r2, #6
 800afd4:	0019      	movs	r1, r3
 800afd6:	f002 fcad 	bl	800d934 <memcpy>
    size += 6;
 800afda:	0028      	movs	r0, r5
 800afdc:	183b      	adds	r3, r7, r0
 800afde:	183a      	adds	r2, r7, r0
 800afe0:	7812      	ldrb	r2, [r2, #0]
 800afe2:	3206      	adds	r2, #6
 800afe4:	701a      	strb	r2, [r3, #0]
    Direct_Advertising_Report[i].RSSI = rp0->Direct_Advertising_Report[i].RSSI;
 800afe6:	19ba      	adds	r2, r7, r6
 800afe8:	6812      	ldr	r2, [r2, #0]
 800afea:	1939      	adds	r1, r7, r4
 800afec:	680b      	ldr	r3, [r1, #0]
 800afee:	011b      	lsls	r3, r3, #4
 800aff0:	18d3      	adds	r3, r2, r3
 800aff2:	3310      	adds	r3, #16
 800aff4:	2100      	movs	r1, #0
 800aff6:	5659      	ldrsb	r1, [r3, r1]
 800aff8:	2308      	movs	r3, #8
 800affa:	18fa      	adds	r2, r7, r3
 800affc:	193b      	adds	r3, r7, r4
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	011b      	lsls	r3, r3, #4
 800b002:	18d3      	adds	r3, r2, r3
 800b004:	330f      	adds	r3, #15
 800b006:	1c0a      	adds	r2, r1, #0
 800b008:	701a      	strb	r2, [r3, #0]
    size += 1;
 800b00a:	183b      	adds	r3, r7, r0
 800b00c:	183a      	adds	r2, r7, r0
 800b00e:	7812      	ldrb	r2, [r2, #0]
 800b010:	3201      	adds	r2, #1
 800b012:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < rp0->Num_Reports; i++) {
 800b014:	193b      	adds	r3, r7, r4
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	3301      	adds	r3, #1
 800b01a:	193a      	adds	r2, r7, r4
 800b01c:	6013      	str	r3, [r2, #0]
 800b01e:	2188      	movs	r1, #136	@ 0x88
 800b020:	187b      	adds	r3, r7, r1
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	781b      	ldrb	r3, [r3, #0]
 800b026:	001a      	movs	r2, r3
 800b028:	2390      	movs	r3, #144	@ 0x90
 800b02a:	18fb      	adds	r3, r7, r3
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	4293      	cmp	r3, r2
 800b030:	da00      	bge.n	800b034 <hci_le_direct_advertising_report_event_process+0x15c>
 800b032:	e766      	b.n	800af02 <hci_le_direct_advertising_report_event_process+0x2a>
  }
  hci_le_direct_advertising_report_event(rp0->Num_Reports,
 800b034:	187b      	adds	r3, r7, r1
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	781b      	ldrb	r3, [r3, #0]
 800b03a:	2208      	movs	r2, #8
 800b03c:	18ba      	adds	r2, r7, r2
 800b03e:	0011      	movs	r1, r2
 800b040:	0018      	movs	r0, r3
 800b042:	f000 f92d 	bl	800b2a0 <hci_le_direct_advertising_report_event>
                                         Direct_Advertising_Report);

  return status;
 800b046:	238f      	movs	r3, #143	@ 0x8f
 800b048:	18fb      	adds	r3, r7, r3
 800b04a:	781b      	ldrb	r3, [r3, #0]
}
 800b04c:	0018      	movs	r0, r3
 800b04e:	46bd      	mov	sp, r7
 800b050:	b027      	add	sp, #156	@ 0x9c
 800b052:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b054 <hci_encryption_change_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_change_event(uint8_t Status,
                                 uint16_t Connection_Handle,
                                 uint8_t Encryption_Enabled))
{
 800b054:	b590      	push	{r4, r7, lr}
 800b056:	b083      	sub	sp, #12
 800b058:	af00      	add	r7, sp, #0
 800b05a:	0004      	movs	r4, r0
 800b05c:	0008      	movs	r0, r1
 800b05e:	0011      	movs	r1, r2
 800b060:	1dfb      	adds	r3, r7, #7
 800b062:	1c22      	adds	r2, r4, #0
 800b064:	701a      	strb	r2, [r3, #0]
 800b066:	1d3b      	adds	r3, r7, #4
 800b068:	1c02      	adds	r2, r0, #0
 800b06a:	801a      	strh	r2, [r3, #0]
 800b06c:	1dbb      	adds	r3, r7, #6
 800b06e:	1c0a      	adds	r2, r1, #0
 800b070:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_change_event\r\n");
 800b072:	4b04      	ldr	r3, [pc, #16]	@ (800b084 <hci_encryption_change_event+0x30>)
 800b074:	0018      	movs	r0, r3
 800b076:	f002 fac7 	bl	800d608 <puts>
}
 800b07a:	46c0      	nop			@ (mov r8, r8)
 800b07c:	46bd      	mov	sp, r7
 800b07e:	b003      	add	sp, #12
 800b080:	bd90      	pop	{r4, r7, pc}
 800b082:	46c0      	nop			@ (mov r8, r8)
 800b084:	0800fb08 	.word	0x0800fb08

0800b088 <hci_read_remote_version_information_complete_event>:
WEAK_FUNCTION(void hci_read_remote_version_information_complete_event(uint8_t Status,
                                                        uint16_t Connection_Handle,
                                                        uint8_t Version,
                                                        uint16_t Manufacturer_Name,
                                                        uint16_t Subversion))
{
 800b088:	b5b0      	push	{r4, r5, r7, lr}
 800b08a:	b082      	sub	sp, #8
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	0005      	movs	r5, r0
 800b090:	000c      	movs	r4, r1
 800b092:	0010      	movs	r0, r2
 800b094:	0019      	movs	r1, r3
 800b096:	1dfb      	adds	r3, r7, #7
 800b098:	1c2a      	adds	r2, r5, #0
 800b09a:	701a      	strb	r2, [r3, #0]
 800b09c:	1d3b      	adds	r3, r7, #4
 800b09e:	1c22      	adds	r2, r4, #0
 800b0a0:	801a      	strh	r2, [r3, #0]
 800b0a2:	1dbb      	adds	r3, r7, #6
 800b0a4:	1c02      	adds	r2, r0, #0
 800b0a6:	701a      	strb	r2, [r3, #0]
 800b0a8:	1cbb      	adds	r3, r7, #2
 800b0aa:	1c0a      	adds	r2, r1, #0
 800b0ac:	801a      	strh	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_read_remote_version_information_complete_event\r\n");
 800b0ae:	4b04      	ldr	r3, [pc, #16]	@ (800b0c0 <hci_read_remote_version_information_complete_event+0x38>)
 800b0b0:	0018      	movs	r0, r3
 800b0b2:	f002 faa9 	bl	800d608 <puts>
}
 800b0b6:	46c0      	nop			@ (mov r8, r8)
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	b002      	add	sp, #8
 800b0bc:	bdb0      	pop	{r4, r5, r7, pc}
 800b0be:	46c0      	nop			@ (mov r8, r8)
 800b0c0:	0800fb28 	.word	0x0800fb28

0800b0c4 <hci_hardware_error_event>:
  - 0x02: Timer overrun error
  - 0x03: Internal queue overflow error
  * @retval None
*/
WEAK_FUNCTION(void hci_hardware_error_event(uint8_t Hardware_Code))
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b082      	sub	sp, #8
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	0002      	movs	r2, r0
 800b0cc:	1dfb      	adds	r3, r7, #7
 800b0ce:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_hardware_error_event\r\n");
 800b0d0:	4b03      	ldr	r3, [pc, #12]	@ (800b0e0 <hci_hardware_error_event+0x1c>)
 800b0d2:	0018      	movs	r0, r3
 800b0d4:	f002 fa98 	bl	800d608 <puts>
}
 800b0d8:	46c0      	nop			@ (mov r8, r8)
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	b002      	add	sp, #8
 800b0de:	bd80      	pop	{r7, pc}
 800b0e0:	0800fb5c 	.word	0x0800fb5c

0800b0e4 <hci_number_of_completed_packets_event>:
  * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
  * @retval None
*/
WEAK_FUNCTION(void hci_number_of_completed_packets_event(uint8_t Number_of_Handles,
                                           Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[]))
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b082      	sub	sp, #8
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	0002      	movs	r2, r0
 800b0ec:	6039      	str	r1, [r7, #0]
 800b0ee:	1dfb      	adds	r3, r7, #7
 800b0f0:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_number_of_completed_packets_event\r\n");
 800b0f2:	4b04      	ldr	r3, [pc, #16]	@ (800b104 <hci_number_of_completed_packets_event+0x20>)
 800b0f4:	0018      	movs	r0, r3
 800b0f6:	f002 fa87 	bl	800d608 <puts>
}
 800b0fa:	46c0      	nop			@ (mov r8, r8)
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	b002      	add	sp, #8
 800b100:	bd80      	pop	{r7, pc}
 800b102:	46c0      	nop			@ (mov r8, r8)
 800b104:	0800fb78 	.word	0x0800fb78

0800b108 <hci_data_buffer_overflow_event>:
  * Values:
  - 0x01: ACL Buffer Overflow
  * @retval None
*/
WEAK_FUNCTION(void hci_data_buffer_overflow_event(uint8_t Link_Type))
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b082      	sub	sp, #8
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	0002      	movs	r2, r0
 800b110:	1dfb      	adds	r3, r7, #7
 800b112:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_data_buffer_overflow_event\r\n");
 800b114:	4b03      	ldr	r3, [pc, #12]	@ (800b124 <hci_data_buffer_overflow_event+0x1c>)
 800b116:	0018      	movs	r0, r3
 800b118:	f002 fa76 	bl	800d608 <puts>
}
 800b11c:	46c0      	nop			@ (mov r8, r8)
 800b11e:	46bd      	mov	sp, r7
 800b120:	b002      	add	sp, #8
 800b122:	bd80      	pop	{r7, pc}
 800b124:	0800fba0 	.word	0x0800fba0

0800b128 <hci_encryption_key_refresh_complete_event>:
  - 0x0000 ... 0x0EFF
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_key_refresh_complete_event(uint8_t Status,
                                               uint16_t Connection_Handle))
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b082      	sub	sp, #8
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	0002      	movs	r2, r0
 800b130:	1dfb      	adds	r3, r7, #7
 800b132:	701a      	strb	r2, [r3, #0]
 800b134:	1d3b      	adds	r3, r7, #4
 800b136:	1c0a      	adds	r2, r1, #0
 800b138:	801a      	strh	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_key_refresh_complete_event\r\n");
 800b13a:	4b04      	ldr	r3, [pc, #16]	@ (800b14c <hci_encryption_key_refresh_complete_event+0x24>)
 800b13c:	0018      	movs	r0, r3
 800b13e:	f002 fa63 	bl	800d608 <puts>
}
 800b142:	46c0      	nop			@ (mov r8, r8)
 800b144:	46bd      	mov	sp, r7
 800b146:	b002      	add	sp, #8
 800b148:	bd80      	pop	{r7, pc}
 800b14a:	46c0      	nop			@ (mov r8, r8)
 800b14c:	0800fbc0 	.word	0x0800fbc0

0800b150 <hci_le_connection_update_complete_event>:
WEAK_FUNCTION(void hci_le_connection_update_complete_event(uint8_t Status,
                                             uint16_t Connection_Handle,
                                             uint16_t Conn_Interval,
                                             uint16_t Conn_Latency,
                                             uint16_t Supervision_Timeout))
{
 800b150:	b5b0      	push	{r4, r5, r7, lr}
 800b152:	b082      	sub	sp, #8
 800b154:	af00      	add	r7, sp, #0
 800b156:	0005      	movs	r5, r0
 800b158:	000c      	movs	r4, r1
 800b15a:	0010      	movs	r0, r2
 800b15c:	0019      	movs	r1, r3
 800b15e:	1dfb      	adds	r3, r7, #7
 800b160:	1c2a      	adds	r2, r5, #0
 800b162:	701a      	strb	r2, [r3, #0]
 800b164:	1d3b      	adds	r3, r7, #4
 800b166:	1c22      	adds	r2, r4, #0
 800b168:	801a      	strh	r2, [r3, #0]
 800b16a:	1cbb      	adds	r3, r7, #2
 800b16c:	1c02      	adds	r2, r0, #0
 800b16e:	801a      	strh	r2, [r3, #0]
 800b170:	003b      	movs	r3, r7
 800b172:	1c0a      	adds	r2, r1, #0
 800b174:	801a      	strh	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_connection_update_complete_event\r\n");
 800b176:	4b04      	ldr	r3, [pc, #16]	@ (800b188 <hci_le_connection_update_complete_event+0x38>)
 800b178:	0018      	movs	r0, r3
 800b17a:	f002 fa45 	bl	800d608 <puts>
}
 800b17e:	46c0      	nop			@ (mov r8, r8)
 800b180:	46bd      	mov	sp, r7
 800b182:	b002      	add	sp, #8
 800b184:	bdb0      	pop	{r4, r5, r7, pc}
 800b186:	46c0      	nop			@ (mov r8, r8)
 800b188:	0800fc34 	.word	0x0800fc34

0800b18c <hci_le_read_remote_used_features_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_remote_used_features_complete_event(uint8_t Status,
                                                     uint16_t Connection_Handle,
                                                     uint8_t LE_Features[8]))
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b082      	sub	sp, #8
 800b190:	af00      	add	r7, sp, #0
 800b192:	603a      	str	r2, [r7, #0]
 800b194:	1dfb      	adds	r3, r7, #7
 800b196:	1c02      	adds	r2, r0, #0
 800b198:	701a      	strb	r2, [r3, #0]
 800b19a:	1d3b      	adds	r3, r7, #4
 800b19c:	1c0a      	adds	r2, r1, #0
 800b19e:	801a      	strh	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_remote_used_features_complete_event\r\n");
 800b1a0:	4b03      	ldr	r3, [pc, #12]	@ (800b1b0 <hci_le_read_remote_used_features_complete_event+0x24>)
 800b1a2:	0018      	movs	r0, r3
 800b1a4:	f002 fa30 	bl	800d608 <puts>
}
 800b1a8:	46c0      	nop			@ (mov r8, r8)
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	b002      	add	sp, #8
 800b1ae:	bd80      	pop	{r7, pc}
 800b1b0:	0800fc60 	.word	0x0800fc60

0800b1b4 <hci_le_long_term_key_request_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_long_term_key_request_event(uint16_t Connection_Handle,
                                        uint8_t Random_Number[8],
                                        uint16_t Encrypted_Diversifier))
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b082      	sub	sp, #8
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6039      	str	r1, [r7, #0]
 800b1bc:	0011      	movs	r1, r2
 800b1be:	1dbb      	adds	r3, r7, #6
 800b1c0:	1c02      	adds	r2, r0, #0
 800b1c2:	801a      	strh	r2, [r3, #0]
 800b1c4:	1d3b      	adds	r3, r7, #4
 800b1c6:	1c0a      	adds	r2, r1, #0
 800b1c8:	801a      	strh	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_long_term_key_request_event\r\n");
 800b1ca:	4b04      	ldr	r3, [pc, #16]	@ (800b1dc <hci_le_long_term_key_request_event+0x28>)
 800b1cc:	0018      	movs	r0, r3
 800b1ce:	f002 fa1b 	bl	800d608 <puts>
}
 800b1d2:	46c0      	nop			@ (mov r8, r8)
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	b002      	add	sp, #8
 800b1d8:	bd80      	pop	{r7, pc}
 800b1da:	46c0      	nop			@ (mov r8, r8)
 800b1dc:	0800fc94 	.word	0x0800fc94

0800b1e0 <hci_le_data_length_change_event>:
WEAK_FUNCTION(void hci_le_data_length_change_event(uint16_t Connection_Handle,
                                     uint16_t MaxTxOctets,
                                     uint16_t MaxTxTime,
                                     uint16_t MaxRxOctets,
                                     uint16_t MaxRxTime))
{
 800b1e0:	b5b0      	push	{r4, r5, r7, lr}
 800b1e2:	b082      	sub	sp, #8
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	0005      	movs	r5, r0
 800b1e8:	000c      	movs	r4, r1
 800b1ea:	0010      	movs	r0, r2
 800b1ec:	0019      	movs	r1, r3
 800b1ee:	1dbb      	adds	r3, r7, #6
 800b1f0:	1c2a      	adds	r2, r5, #0
 800b1f2:	801a      	strh	r2, [r3, #0]
 800b1f4:	1d3b      	adds	r3, r7, #4
 800b1f6:	1c22      	adds	r2, r4, #0
 800b1f8:	801a      	strh	r2, [r3, #0]
 800b1fa:	1cbb      	adds	r3, r7, #2
 800b1fc:	1c02      	adds	r2, r0, #0
 800b1fe:	801a      	strh	r2, [r3, #0]
 800b200:	003b      	movs	r3, r7
 800b202:	1c0a      	adds	r2, r1, #0
 800b204:	801a      	strh	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_data_length_change_event\r\n");
 800b206:	4b04      	ldr	r3, [pc, #16]	@ (800b218 <hci_le_data_length_change_event+0x38>)
 800b208:	0018      	movs	r0, r3
 800b20a:	f002 f9fd 	bl	800d608 <puts>
}
 800b20e:	46c0      	nop			@ (mov r8, r8)
 800b210:	46bd      	mov	sp, r7
 800b212:	b002      	add	sp, #8
 800b214:	bdb0      	pop	{r4, r5, r7, pc}
 800b216:	46c0      	nop			@ (mov r8, r8)
 800b218:	0800fcb8 	.word	0x0800fcb8

0800b21c <hci_le_read_local_p256_public_key_complete_event>:
  * @param Local_P256_Public_Key Local P-256 public key.
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_local_p256_public_key_complete_event(uint8_t Status,
                                                      uint8_t Local_P256_Public_Key[64]))
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b082      	sub	sp, #8
 800b220:	af00      	add	r7, sp, #0
 800b222:	0002      	movs	r2, r0
 800b224:	6039      	str	r1, [r7, #0]
 800b226:	1dfb      	adds	r3, r7, #7
 800b228:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_local_p256_public_key_complete_event\r\n");
 800b22a:	4b04      	ldr	r3, [pc, #16]	@ (800b23c <hci_le_read_local_p256_public_key_complete_event+0x20>)
 800b22c:	0018      	movs	r0, r3
 800b22e:	f002 f9eb 	bl	800d608 <puts>
}
 800b232:	46c0      	nop			@ (mov r8, r8)
 800b234:	46bd      	mov	sp, r7
 800b236:	b002      	add	sp, #8
 800b238:	bd80      	pop	{r7, pc}
 800b23a:	46c0      	nop			@ (mov r8, r8)
 800b23c:	0800fcdc 	.word	0x0800fcdc

0800b240 <hci_le_generate_dhkey_complete_event>:
  * @param DHKey Diffie Hellman Key
  * @retval None
*/
WEAK_FUNCTION(void hci_le_generate_dhkey_complete_event(uint8_t Status,
                                          uint8_t DHKey[32]))
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b082      	sub	sp, #8
 800b244:	af00      	add	r7, sp, #0
 800b246:	0002      	movs	r2, r0
 800b248:	6039      	str	r1, [r7, #0]
 800b24a:	1dfb      	adds	r3, r7, #7
 800b24c:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_generate_dhkey_complete_event\r\n");
 800b24e:	4b04      	ldr	r3, [pc, #16]	@ (800b260 <hci_le_generate_dhkey_complete_event+0x20>)
 800b250:	0018      	movs	r0, r3
 800b252:	f002 f9d9 	bl	800d608 <puts>
}
 800b256:	46c0      	nop			@ (mov r8, r8)
 800b258:	46bd      	mov	sp, r7
 800b25a:	b002      	add	sp, #8
 800b25c:	bd80      	pop	{r7, pc}
 800b25e:	46c0      	nop			@ (mov r8, r8)
 800b260:	0800fd10 	.word	0x0800fd10

0800b264 <hci_le_enhanced_connection_complete_event>:
                                               uint8_t Peer_Resolvable_Private_Address[6],
                                               uint16_t Conn_Interval,
                                               uint16_t Conn_Latency,
                                               uint16_t Supervision_Timeout,
                                               uint8_t Master_Clock_Accuracy))
{
 800b264:	b5b0      	push	{r4, r5, r7, lr}
 800b266:	b082      	sub	sp, #8
 800b268:	af00      	add	r7, sp, #0
 800b26a:	0005      	movs	r5, r0
 800b26c:	000c      	movs	r4, r1
 800b26e:	0010      	movs	r0, r2
 800b270:	0019      	movs	r1, r3
 800b272:	1dfb      	adds	r3, r7, #7
 800b274:	1c2a      	adds	r2, r5, #0
 800b276:	701a      	strb	r2, [r3, #0]
 800b278:	1d3b      	adds	r3, r7, #4
 800b27a:	1c22      	adds	r2, r4, #0
 800b27c:	801a      	strh	r2, [r3, #0]
 800b27e:	1dbb      	adds	r3, r7, #6
 800b280:	1c02      	adds	r2, r0, #0
 800b282:	701a      	strb	r2, [r3, #0]
 800b284:	1cfb      	adds	r3, r7, #3
 800b286:	1c0a      	adds	r2, r1, #0
 800b288:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_enhanced_connection_complete_event\r\n");
 800b28a:	4b04      	ldr	r3, [pc, #16]	@ (800b29c <hci_le_enhanced_connection_complete_event+0x38>)
 800b28c:	0018      	movs	r0, r3
 800b28e:	f002 f9bb 	bl	800d608 <puts>
}
 800b292:	46c0      	nop			@ (mov r8, r8)
 800b294:	46bd      	mov	sp, r7
 800b296:	b002      	add	sp, #8
 800b298:	bdb0      	pop	{r4, r5, r7, pc}
 800b29a:	46c0      	nop			@ (mov r8, r8)
 800b29c:	0800fd38 	.word	0x0800fd38

0800b2a0 <hci_le_direct_advertising_report_event>:
  * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
  * @retval None
*/
WEAK_FUNCTION(void hci_le_direct_advertising_report_event(uint8_t Num_Reports,
                                            Direct_Advertising_Report_t Direct_Advertising_Report[]))
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b082      	sub	sp, #8
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	0002      	movs	r2, r0
 800b2a8:	6039      	str	r1, [r7, #0]
 800b2aa:	1dfb      	adds	r3, r7, #7
 800b2ac:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_direct_advertising_report_event\r\n");
 800b2ae:	4b04      	ldr	r3, [pc, #16]	@ (800b2c0 <hci_le_direct_advertising_report_event+0x20>)
 800b2b0:	0018      	movs	r0, r3
 800b2b2:	f002 f9a9 	bl	800d608 <puts>
}
 800b2b6:	46c0      	nop			@ (mov r8, r8)
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	b002      	add	sp, #8
 800b2bc:	bd80      	pop	{r7, pc}
 800b2be:	46c0      	nop			@ (mov r8, r8)
 800b2c0:	0800fd64 	.word	0x0800fd64

0800b2c4 <aci_gap_limited_discoverable_event>:
  * @brief This event is generated by the controller when the limited discoverable mode ends due to
timeout. The timeout is 180 seconds.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_limited_discoverable_event(void))
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_limited_discoverable_event\r\n");
 800b2c8:	4b03      	ldr	r3, [pc, #12]	@ (800b2d8 <aci_gap_limited_discoverable_event+0x14>)
 800b2ca:	0018      	movs	r0, r3
 800b2cc:	f002 f99c 	bl	800d608 <puts>
}
 800b2d0:	46c0      	nop			@ (mov r8, r8)
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}
 800b2d6:	46c0      	nop			@ (mov r8, r8)
 800b2d8:	0800fd8c 	.word	0x0800fd8c

0800b2dc <aci_gap_pairing_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_pairing_complete_event(uint16_t Connection_Handle,
                                    uint8_t Status,
                                    uint8_t Reason))
{
 800b2dc:	b590      	push	{r4, r7, lr}
 800b2de:	b083      	sub	sp, #12
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	0004      	movs	r4, r0
 800b2e4:	0008      	movs	r0, r1
 800b2e6:	0011      	movs	r1, r2
 800b2e8:	1dbb      	adds	r3, r7, #6
 800b2ea:	1c22      	adds	r2, r4, #0
 800b2ec:	801a      	strh	r2, [r3, #0]
 800b2ee:	1d7b      	adds	r3, r7, #5
 800b2f0:	1c02      	adds	r2, r0, #0
 800b2f2:	701a      	strb	r2, [r3, #0]
 800b2f4:	1d3b      	adds	r3, r7, #4
 800b2f6:	1c0a      	adds	r2, r1, #0
 800b2f8:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pairing_complete_event\r\n");
 800b2fa:	4b04      	ldr	r3, [pc, #16]	@ (800b30c <aci_gap_pairing_complete_event+0x30>)
 800b2fc:	0018      	movs	r0, r3
 800b2fe:	f002 f983 	bl	800d608 <puts>
}
 800b302:	46c0      	nop			@ (mov r8, r8)
 800b304:	46bd      	mov	sp, r7
 800b306:	b003      	add	sp, #12
 800b308:	bd90      	pop	{r4, r7, pc}
 800b30a:	46c0      	nop			@ (mov r8, r8)
 800b30c:	0800fdb0 	.word	0x0800fdb0

0800b310 <aci_gap_pass_key_req_event>:
@ref aci_gap_pass_key_resp command.
  * @param Connection_Handle Connection handle for which the passkey has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_pass_key_req_event(uint16_t Connection_Handle))
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b082      	sub	sp, #8
 800b314:	af00      	add	r7, sp, #0
 800b316:	0002      	movs	r2, r0
 800b318:	1dbb      	adds	r3, r7, #6
 800b31a:	801a      	strh	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pass_key_req_event\r\n");
 800b31c:	4b03      	ldr	r3, [pc, #12]	@ (800b32c <aci_gap_pass_key_req_event+0x1c>)
 800b31e:	0018      	movs	r0, r3
 800b320:	f002 f972 	bl	800d608 <puts>
}
 800b324:	46c0      	nop			@ (mov r8, r8)
 800b326:	46bd      	mov	sp, r7
 800b328:	b002      	add	sp, #8
 800b32a:	bd80      	pop	{r7, pc}
 800b32c:	0800fdd0 	.word	0x0800fdd0

0800b330 <aci_gap_authorization_req_event>:
@ref aci_gap_authorization_resp command should be used to respond by the application.
  * @param Connection_Handle Connection handle for which authorization has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_authorization_req_event(uint16_t Connection_Handle))
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b082      	sub	sp, #8
 800b334:	af00      	add	r7, sp, #0
 800b336:	0002      	movs	r2, r0
 800b338:	1dbb      	adds	r3, r7, #6
 800b33a:	801a      	strh	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_authorization_req_event\r\n");
 800b33c:	4b03      	ldr	r3, [pc, #12]	@ (800b34c <aci_gap_authorization_req_event+0x1c>)
 800b33e:	0018      	movs	r0, r3
 800b340:	f002 f962 	bl	800d608 <puts>
}
 800b344:	46c0      	nop			@ (mov r8, r8)
 800b346:	46bd      	mov	sp, r7
 800b348:	b002      	add	sp, #8
 800b34a:	bd80      	pop	{r7, pc}
 800b34c:	0800fdec 	.word	0x0800fdec

0800b350 <aci_gap_slave_security_initiated_event>:
/**
  * @brief This event is generated when the slave security request is successfully sent to the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_slave_security_initiated_event(void))
{
 800b350:	b580      	push	{r7, lr}
 800b352:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_slave_security_initiated_event\r\n");
 800b354:	4b03      	ldr	r3, [pc, #12]	@ (800b364 <aci_gap_slave_security_initiated_event+0x14>)
 800b356:	0018      	movs	r0, r3
 800b358:	f002 f956 	bl	800d608 <puts>
}
 800b35c:	46c0      	nop			@ (mov r8, r8)
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}
 800b362:	46c0      	nop			@ (mov r8, r8)
 800b364:	0800fe10 	.word	0x0800fe10

0800b368 <aci_gap_bond_lost_event>:
received, the upper layer has to issue the command @ref aci_gap_allow_rebond in order to
allow the slave to continue the pairing process with the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_bond_lost_event(void))
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_bond_lost_event\r\n");
 800b36c:	4b03      	ldr	r3, [pc, #12]	@ (800b37c <aci_gap_bond_lost_event+0x14>)
 800b36e:	0018      	movs	r0, r3
 800b370:	f002 f94a 	bl	800d608 <puts>
}
 800b374:	46c0      	nop			@ (mov r8, r8)
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}
 800b37a:	46c0      	nop			@ (mov r8, r8)
 800b37c:	0800fe38 	.word	0x0800fe38

0800b380 <aci_gap_addr_not_resolved_event>:
  * @param Connection_Handle Connection handle for which the private address could not be
resolved with any of the stored IRK's.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_addr_not_resolved_event(uint16_t Connection_Handle))
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b082      	sub	sp, #8
 800b384:	af00      	add	r7, sp, #0
 800b386:	0002      	movs	r2, r0
 800b388:	1dbb      	adds	r3, r7, #6
 800b38a:	801a      	strh	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_addr_not_resolved_event\r\n");
 800b38c:	4b03      	ldr	r3, [pc, #12]	@ (800b39c <aci_gap_addr_not_resolved_event+0x1c>)
 800b38e:	0018      	movs	r0, r3
 800b390:	f002 f93a 	bl	800d608 <puts>
}
 800b394:	46c0      	nop			@ (mov r8, r8)
 800b396:	46bd      	mov	sp, r7
 800b398:	b002      	add	sp, #8
 800b39a:	bd80      	pop	{r7, pc}
 800b39c:	0800fe74 	.word	0x0800fe74

0800b3a0 <aci_gap_numeric_comparison_value_event>:
  * @param Numeric_Value 
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_numeric_comparison_value_event(uint16_t Connection_Handle,
                                            uint32_t Numeric_Value))
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b082      	sub	sp, #8
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	0002      	movs	r2, r0
 800b3a8:	6039      	str	r1, [r7, #0]
 800b3aa:	1dbb      	adds	r3, r7, #6
 800b3ac:	801a      	strh	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_numeric_comparison_value_event\r\n");
 800b3ae:	4b04      	ldr	r3, [pc, #16]	@ (800b3c0 <aci_gap_numeric_comparison_value_event+0x20>)
 800b3b0:	0018      	movs	r0, r3
 800b3b2:	f002 f929 	bl	800d608 <puts>
}
 800b3b6:	46c0      	nop			@ (mov r8, r8)
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	b002      	add	sp, #8
 800b3bc:	bd80      	pop	{r7, pc}
 800b3be:	46c0      	nop			@ (mov r8, r8)
 800b3c0:	0800fe98 	.word	0x0800fe98

0800b3c4 <aci_gap_keypress_notification_event>:
  * @param Notification_Type Type of Keypress input notified/signaled by peer device (having Keyboard only I/O capabilities
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_keypress_notification_event(uint16_t Connection_Handle,
                                         uint8_t Notification_Type))
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b082      	sub	sp, #8
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	0002      	movs	r2, r0
 800b3cc:	1dbb      	adds	r3, r7, #6
 800b3ce:	801a      	strh	r2, [r3, #0]
 800b3d0:	1d7b      	adds	r3, r7, #5
 800b3d2:	1c0a      	adds	r2, r1, #0
 800b3d4:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_keypress_notification_event\r\n");
 800b3d6:	4b04      	ldr	r3, [pc, #16]	@ (800b3e8 <aci_gap_keypress_notification_event+0x24>)
 800b3d8:	0018      	movs	r0, r3
 800b3da:	f002 f915 	bl	800d608 <puts>
}
 800b3de:	46c0      	nop			@ (mov r8, r8)
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	b002      	add	sp, #8
 800b3e4:	bd80      	pop	{r7, pc}
 800b3e6:	46c0      	nop			@ (mov r8, r8)
 800b3e8:	0800fec0 	.word	0x0800fec0

0800b3ec <aci_gatt_proc_timeout_event>:
seconds). This is a critical event that should not happen during normal operating conditions. It is an indication of either a major disruption in the communication link or a mistake in the application which does not provide a reply to GATT procedures. After this event, the GATT channel is closed and no more GATT communication can be performed. The applications is exptected to issue an @ref aci_gap_terminate to disconnect from the peer device. It is important to leave an 100 ms blank window before sending the @ref aci_gap_terminate, since immediately after this event, system could save important information in non volatile memory.
  * @param Connection_Handle Connection handle on which the GATT procedure has timed out
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_proc_timeout_event(uint16_t Connection_Handle))
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b082      	sub	sp, #8
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	0002      	movs	r2, r0
 800b3f4:	1dbb      	adds	r3, r7, #6
 800b3f6:	801a      	strh	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_proc_timeout_event\r\n");
 800b3f8:	4b03      	ldr	r3, [pc, #12]	@ (800b408 <aci_gatt_proc_timeout_event+0x1c>)
 800b3fa:	0018      	movs	r0, r3
 800b3fc:	f002 f904 	bl	800d608 <puts>
}
 800b400:	46c0      	nop			@ (mov r8, r8)
 800b402:	46bd      	mov	sp, r7
 800b404:	b002      	add	sp, #8
 800b406:	bd80      	pop	{r7, pc}
 800b408:	0800ff0c 	.word	0x0800ff0c

0800b40c <aci_att_find_info_resp_event>:
*/
WEAK_FUNCTION(void aci_att_find_info_resp_event(uint16_t Connection_Handle,
                                  uint8_t Format,
                                  uint8_t Event_Data_Length,
                                  uint8_t Handle_UUID_Pair[]))
{
 800b40c:	b590      	push	{r4, r7, lr}
 800b40e:	b083      	sub	sp, #12
 800b410:	af00      	add	r7, sp, #0
 800b412:	0004      	movs	r4, r0
 800b414:	0008      	movs	r0, r1
 800b416:	0011      	movs	r1, r2
 800b418:	603b      	str	r3, [r7, #0]
 800b41a:	1dbb      	adds	r3, r7, #6
 800b41c:	1c22      	adds	r2, r4, #0
 800b41e:	801a      	strh	r2, [r3, #0]
 800b420:	1d7b      	adds	r3, r7, #5
 800b422:	1c02      	adds	r2, r0, #0
 800b424:	701a      	strb	r2, [r3, #0]
 800b426:	1d3b      	adds	r3, r7, #4
 800b428:	1c0a      	adds	r2, r1, #0
 800b42a:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_info_resp_event\r\n");
 800b42c:	4b03      	ldr	r3, [pc, #12]	@ (800b43c <aci_att_find_info_resp_event+0x30>)
 800b42e:	0018      	movs	r0, r3
 800b430:	f002 f8ea 	bl	800d608 <puts>
}
 800b434:	46c0      	nop			@ (mov r8, r8)
 800b436:	46bd      	mov	sp, r7
 800b438:	b003      	add	sp, #12
 800b43a:	bd90      	pop	{r4, r7, pc}
 800b43c:	0800ff50 	.word	0x0800ff50

0800b440 <aci_att_find_by_type_value_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_find_by_type_value_resp_event(uint16_t Connection_Handle,
                                           uint8_t Num_of_Handle_Pair,
                                           Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[]))
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b082      	sub	sp, #8
 800b444:	af00      	add	r7, sp, #0
 800b446:	603a      	str	r2, [r7, #0]
 800b448:	1dbb      	adds	r3, r7, #6
 800b44a:	1c02      	adds	r2, r0, #0
 800b44c:	801a      	strh	r2, [r3, #0]
 800b44e:	1d7b      	adds	r3, r7, #5
 800b450:	1c0a      	adds	r2, r1, #0
 800b452:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_by_type_value_resp_event\r\n");
 800b454:	4b03      	ldr	r3, [pc, #12]	@ (800b464 <aci_att_find_by_type_value_resp_event+0x24>)
 800b456:	0018      	movs	r0, r3
 800b458:	f002 f8d6 	bl	800d608 <puts>
}
 800b45c:	46c0      	nop			@ (mov r8, r8)
 800b45e:	46bd      	mov	sp, r7
 800b460:	b002      	add	sp, #8
 800b462:	bd80      	pop	{r7, pc}
 800b464:	0800ff70 	.word	0x0800ff70

0800b468 <aci_att_read_by_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_type_resp_event(uint16_t Connection_Handle,
                                     uint8_t Handle_Value_Pair_Length,
                                     uint8_t Data_Length,
                                     uint8_t Handle_Value_Pair_Data[]))
{
 800b468:	b590      	push	{r4, r7, lr}
 800b46a:	b083      	sub	sp, #12
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	0004      	movs	r4, r0
 800b470:	0008      	movs	r0, r1
 800b472:	0011      	movs	r1, r2
 800b474:	603b      	str	r3, [r7, #0]
 800b476:	1dbb      	adds	r3, r7, #6
 800b478:	1c22      	adds	r2, r4, #0
 800b47a:	801a      	strh	r2, [r3, #0]
 800b47c:	1d7b      	adds	r3, r7, #5
 800b47e:	1c02      	adds	r2, r0, #0
 800b480:	701a      	strb	r2, [r3, #0]
 800b482:	1d3b      	adds	r3, r7, #4
 800b484:	1c0a      	adds	r2, r1, #0
 800b486:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_type_resp_event\r\n");
 800b488:	4b03      	ldr	r3, [pc, #12]	@ (800b498 <aci_att_read_by_type_resp_event+0x30>)
 800b48a:	0018      	movs	r0, r3
 800b48c:	f002 f8bc 	bl	800d608 <puts>
}
 800b490:	46c0      	nop			@ (mov r8, r8)
 800b492:	46bd      	mov	sp, r7
 800b494:	b003      	add	sp, #12
 800b496:	bd90      	pop	{r4, r7, pc}
 800b498:	0800ff98 	.word	0x0800ff98

0800b49c <aci_att_read_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_resp_event(uint16_t Connection_Handle,
                             uint8_t Event_Data_Length,
                             uint8_t Attribute_Value[]))
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b082      	sub	sp, #8
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	603a      	str	r2, [r7, #0]
 800b4a4:	1dbb      	adds	r3, r7, #6
 800b4a6:	1c02      	adds	r2, r0, #0
 800b4a8:	801a      	strh	r2, [r3, #0]
 800b4aa:	1d7b      	adds	r3, r7, #5
 800b4ac:	1c0a      	adds	r2, r1, #0
 800b4ae:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_resp_event\r\n");
 800b4b0:	4b03      	ldr	r3, [pc, #12]	@ (800b4c0 <aci_att_read_resp_event+0x24>)
 800b4b2:	0018      	movs	r0, r3
 800b4b4:	f002 f8a8 	bl	800d608 <puts>
}
 800b4b8:	46c0      	nop			@ (mov r8, r8)
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	b002      	add	sp, #8
 800b4be:	bd80      	pop	{r7, pc}
 800b4c0:	0800ffbc 	.word	0x0800ffbc

0800b4c4 <aci_att_read_blob_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_blob_resp_event(uint16_t Connection_Handle,
                                  uint8_t Event_Data_Length,
                                  uint8_t Attribute_Value[]))
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b082      	sub	sp, #8
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	603a      	str	r2, [r7, #0]
 800b4cc:	1dbb      	adds	r3, r7, #6
 800b4ce:	1c02      	adds	r2, r0, #0
 800b4d0:	801a      	strh	r2, [r3, #0]
 800b4d2:	1d7b      	adds	r3, r7, #5
 800b4d4:	1c0a      	adds	r2, r1, #0
 800b4d6:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_blob_resp_event\r\n");
 800b4d8:	4b03      	ldr	r3, [pc, #12]	@ (800b4e8 <aci_att_read_blob_resp_event+0x24>)
 800b4da:	0018      	movs	r0, r3
 800b4dc:	f002 f894 	bl	800d608 <puts>
}
 800b4e0:	46c0      	nop			@ (mov r8, r8)
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	b002      	add	sp, #8
 800b4e6:	bd80      	pop	{r7, pc}
 800b4e8:	0800ffd8 	.word	0x0800ffd8

0800b4ec <aci_att_read_multiple_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_multiple_resp_event(uint16_t Connection_Handle,
                                      uint8_t Event_Data_Length,
                                      uint8_t Set_Of_Values[]))
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b082      	sub	sp, #8
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	603a      	str	r2, [r7, #0]
 800b4f4:	1dbb      	adds	r3, r7, #6
 800b4f6:	1c02      	adds	r2, r0, #0
 800b4f8:	801a      	strh	r2, [r3, #0]
 800b4fa:	1d7b      	adds	r3, r7, #5
 800b4fc:	1c0a      	adds	r2, r1, #0
 800b4fe:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_multiple_resp_event\r\n");
 800b500:	4b03      	ldr	r3, [pc, #12]	@ (800b510 <aci_att_read_multiple_resp_event+0x24>)
 800b502:	0018      	movs	r0, r3
 800b504:	f002 f880 	bl	800d608 <puts>
}
 800b508:	46c0      	nop			@ (mov r8, r8)
 800b50a:	46bd      	mov	sp, r7
 800b50c:	b002      	add	sp, #8
 800b50e:	bd80      	pop	{r7, pc}
 800b510:	0800fff8 	.word	0x0800fff8

0800b514 <aci_att_read_by_group_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_group_type_resp_event(uint16_t Connection_Handle,
                                           uint8_t Attribute_Data_Length,
                                           uint8_t Data_Length,
                                           uint8_t Attribute_Data_List[]))
{
 800b514:	b590      	push	{r4, r7, lr}
 800b516:	b083      	sub	sp, #12
 800b518:	af00      	add	r7, sp, #0
 800b51a:	0004      	movs	r4, r0
 800b51c:	0008      	movs	r0, r1
 800b51e:	0011      	movs	r1, r2
 800b520:	603b      	str	r3, [r7, #0]
 800b522:	1dbb      	adds	r3, r7, #6
 800b524:	1c22      	adds	r2, r4, #0
 800b526:	801a      	strh	r2, [r3, #0]
 800b528:	1d7b      	adds	r3, r7, #5
 800b52a:	1c02      	adds	r2, r0, #0
 800b52c:	701a      	strb	r2, [r3, #0]
 800b52e:	1d3b      	adds	r3, r7, #4
 800b530:	1c0a      	adds	r2, r1, #0
 800b532:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_group_type_resp_event\r\n");
 800b534:	4b03      	ldr	r3, [pc, #12]	@ (800b544 <aci_att_read_by_group_type_resp_event+0x30>)
 800b536:	0018      	movs	r0, r3
 800b538:	f002 f866 	bl	800d608 <puts>
}
 800b53c:	46c0      	nop			@ (mov r8, r8)
 800b53e:	46bd      	mov	sp, r7
 800b540:	b003      	add	sp, #12
 800b542:	bd90      	pop	{r4, r7, pc}
 800b544:	0801001c 	.word	0x0801001c

0800b548 <aci_att_prepare_write_resp_event>:
WEAK_FUNCTION(void aci_att_prepare_write_resp_event(uint16_t Connection_Handle,
                                      uint16_t Attribute_Handle,
                                      uint16_t Offset,
                                      uint8_t Part_Attribute_Value_Length,
                                      uint8_t Part_Attribute_Value[]))
{
 800b548:	b5b0      	push	{r4, r5, r7, lr}
 800b54a:	b082      	sub	sp, #8
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	0005      	movs	r5, r0
 800b550:	000c      	movs	r4, r1
 800b552:	0010      	movs	r0, r2
 800b554:	0019      	movs	r1, r3
 800b556:	1dbb      	adds	r3, r7, #6
 800b558:	1c2a      	adds	r2, r5, #0
 800b55a:	801a      	strh	r2, [r3, #0]
 800b55c:	1d3b      	adds	r3, r7, #4
 800b55e:	1c22      	adds	r2, r4, #0
 800b560:	801a      	strh	r2, [r3, #0]
 800b562:	1cbb      	adds	r3, r7, #2
 800b564:	1c02      	adds	r2, r0, #0
 800b566:	801a      	strh	r2, [r3, #0]
 800b568:	1c7b      	adds	r3, r7, #1
 800b56a:	1c0a      	adds	r2, r1, #0
 800b56c:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_prepare_write_resp_event\r\n");
 800b56e:	4b04      	ldr	r3, [pc, #16]	@ (800b580 <aci_att_prepare_write_resp_event+0x38>)
 800b570:	0018      	movs	r0, r3
 800b572:	f002 f849 	bl	800d608 <puts>
}
 800b576:	46c0      	nop			@ (mov r8, r8)
 800b578:	46bd      	mov	sp, r7
 800b57a:	b002      	add	sp, #8
 800b57c:	bdb0      	pop	{r4, r5, r7, pc}
 800b57e:	46c0      	nop			@ (mov r8, r8)
 800b580:	08010044 	.word	0x08010044

0800b584 <aci_att_exec_write_resp_event>:
  * @brief This event is generated in response to an Execute Write Request.
  * @param Connection_Handle Connection handle related to the response
  * @retval None
*/
WEAK_FUNCTION(void aci_att_exec_write_resp_event(uint16_t Connection_Handle))
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b082      	sub	sp, #8
 800b588:	af00      	add	r7, sp, #0
 800b58a:	0002      	movs	r2, r0
 800b58c:	1dbb      	adds	r3, r7, #6
 800b58e:	801a      	strh	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exec_write_resp_event\r\n");
 800b590:	4b03      	ldr	r3, [pc, #12]	@ (800b5a0 <aci_att_exec_write_resp_event+0x1c>)
 800b592:	0018      	movs	r0, r3
 800b594:	f002 f838 	bl	800d608 <puts>
}
 800b598:	46c0      	nop			@ (mov r8, r8)
 800b59a:	46bd      	mov	sp, r7
 800b59c:	b002      	add	sp, #8
 800b59e:	bd80      	pop	{r7, pc}
 800b5a0:	08010068 	.word	0x08010068

0800b5a4 <aci_gatt_indication_event>:
*/
WEAK_FUNCTION(void aci_gatt_indication_event(uint16_t Connection_Handle,
                               uint16_t Attribute_Handle,
                               uint8_t Attribute_Value_Length,
                               uint8_t Attribute_Value[]))
{
 800b5a4:	b590      	push	{r4, r7, lr}
 800b5a6:	b085      	sub	sp, #20
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	0004      	movs	r4, r0
 800b5ac:	0008      	movs	r0, r1
 800b5ae:	0011      	movs	r1, r2
 800b5b0:	607b      	str	r3, [r7, #4]
 800b5b2:	230e      	movs	r3, #14
 800b5b4:	18fb      	adds	r3, r7, r3
 800b5b6:	1c22      	adds	r2, r4, #0
 800b5b8:	801a      	strh	r2, [r3, #0]
 800b5ba:	230c      	movs	r3, #12
 800b5bc:	18fb      	adds	r3, r7, r3
 800b5be:	1c02      	adds	r2, r0, #0
 800b5c0:	801a      	strh	r2, [r3, #0]
 800b5c2:	230b      	movs	r3, #11
 800b5c4:	18fb      	adds	r3, r7, r3
 800b5c6:	1c0a      	adds	r2, r1, #0
 800b5c8:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_indication_event\r\n");
 800b5ca:	4b04      	ldr	r3, [pc, #16]	@ (800b5dc <aci_gatt_indication_event+0x38>)
 800b5cc:	0018      	movs	r0, r3
 800b5ce:	f002 f81b 	bl	800d608 <puts>
}
 800b5d2:	46c0      	nop			@ (mov r8, r8)
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	b005      	add	sp, #20
 800b5d8:	bd90      	pop	{r4, r7, pc}
 800b5da:	46c0      	nop			@ (mov r8, r8)
 800b5dc:	08010088 	.word	0x08010088

0800b5e0 <aci_gatt_error_resp_event>:
*/
WEAK_FUNCTION(void aci_gatt_error_resp_event(uint16_t Connection_Handle,
                               uint8_t Req_Opcode,
                               uint16_t Attribute_Handle,
                               uint8_t Error_Code))
{
 800b5e0:	b5b0      	push	{r4, r5, r7, lr}
 800b5e2:	b082      	sub	sp, #8
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	0005      	movs	r5, r0
 800b5e8:	000c      	movs	r4, r1
 800b5ea:	0010      	movs	r0, r2
 800b5ec:	0019      	movs	r1, r3
 800b5ee:	1dbb      	adds	r3, r7, #6
 800b5f0:	1c2a      	adds	r2, r5, #0
 800b5f2:	801a      	strh	r2, [r3, #0]
 800b5f4:	1d7b      	adds	r3, r7, #5
 800b5f6:	1c22      	adds	r2, r4, #0
 800b5f8:	701a      	strb	r2, [r3, #0]
 800b5fa:	1cbb      	adds	r3, r7, #2
 800b5fc:	1c02      	adds	r2, r0, #0
 800b5fe:	801a      	strh	r2, [r3, #0]
 800b600:	1d3b      	adds	r3, r7, #4
 800b602:	1c0a      	adds	r2, r1, #0
 800b604:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_error_resp_event\r\n");
 800b606:	4b04      	ldr	r3, [pc, #16]	@ (800b618 <aci_gatt_error_resp_event+0x38>)
 800b608:	0018      	movs	r0, r3
 800b60a:	f001 fffd 	bl	800d608 <puts>
}
 800b60e:	46c0      	nop			@ (mov r8, r8)
 800b610:	46bd      	mov	sp, r7
 800b612:	b002      	add	sp, #8
 800b614:	bdb0      	pop	{r4, r5, r7, pc}
 800b616:	46c0      	nop			@ (mov r8, r8)
 800b618:	080100e4 	.word	0x080100e4

0800b61c <aci_gatt_write_permit_req_event>:
*/
WEAK_FUNCTION(void aci_gatt_write_permit_req_event(uint16_t Connection_Handle,
                                     uint16_t Attribute_Handle,
                                     uint8_t Data_Length,
                                     uint8_t Data[]))
{
 800b61c:	b590      	push	{r4, r7, lr}
 800b61e:	b085      	sub	sp, #20
 800b620:	af00      	add	r7, sp, #0
 800b622:	0004      	movs	r4, r0
 800b624:	0008      	movs	r0, r1
 800b626:	0011      	movs	r1, r2
 800b628:	607b      	str	r3, [r7, #4]
 800b62a:	230e      	movs	r3, #14
 800b62c:	18fb      	adds	r3, r7, r3
 800b62e:	1c22      	adds	r2, r4, #0
 800b630:	801a      	strh	r2, [r3, #0]
 800b632:	230c      	movs	r3, #12
 800b634:	18fb      	adds	r3, r7, r3
 800b636:	1c02      	adds	r2, r0, #0
 800b638:	801a      	strh	r2, [r3, #0]
 800b63a:	230b      	movs	r3, #11
 800b63c:	18fb      	adds	r3, r7, r3
 800b63e:	1c0a      	adds	r2, r1, #0
 800b640:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_write_permit_req_event\r\n");
 800b642:	4b04      	ldr	r3, [pc, #16]	@ (800b654 <aci_gatt_write_permit_req_event+0x38>)
 800b644:	0018      	movs	r0, r3
 800b646:	f001 ffdf 	bl	800d608 <puts>
}
 800b64a:	46c0      	nop			@ (mov r8, r8)
 800b64c:	46bd      	mov	sp, r7
 800b64e:	b005      	add	sp, #20
 800b650:	bd90      	pop	{r4, r7, pc}
 800b652:	46c0      	nop			@ (mov r8, r8)
 800b654:	0801012c 	.word	0x0801012c

0800b658 <aci_gatt_read_permit_req_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_read_permit_req_event(uint16_t Connection_Handle,
                                    uint16_t Attribute_Handle,
                                    uint16_t Offset))
{
 800b658:	b590      	push	{r4, r7, lr}
 800b65a:	b083      	sub	sp, #12
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	0004      	movs	r4, r0
 800b660:	0008      	movs	r0, r1
 800b662:	0011      	movs	r1, r2
 800b664:	1dbb      	adds	r3, r7, #6
 800b666:	1c22      	adds	r2, r4, #0
 800b668:	801a      	strh	r2, [r3, #0]
 800b66a:	1d3b      	adds	r3, r7, #4
 800b66c:	1c02      	adds	r2, r0, #0
 800b66e:	801a      	strh	r2, [r3, #0]
 800b670:	1cbb      	adds	r3, r7, #2
 800b672:	1c0a      	adds	r2, r1, #0
 800b674:	801a      	strh	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_read_permit_req_event\r\n");
 800b676:	4b04      	ldr	r3, [pc, #16]	@ (800b688 <aci_gatt_read_permit_req_event+0x30>)
 800b678:	0018      	movs	r0, r3
 800b67a:	f001 ffc5 	bl	800d608 <puts>
}
 800b67e:	46c0      	nop			@ (mov r8, r8)
 800b680:	46bd      	mov	sp, r7
 800b682:	b003      	add	sp, #12
 800b684:	bd90      	pop	{r4, r7, pc}
 800b686:	46c0      	nop			@ (mov r8, r8)
 800b688:	08010150 	.word	0x08010150

0800b68c <aci_gatt_read_multi_permit_req_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_read_multi_permit_req_event(uint16_t Connection_Handle,
                                          uint8_t Number_of_Handles,
                                          Handle_Item_t Handle_Item[]))
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b082      	sub	sp, #8
 800b690:	af00      	add	r7, sp, #0
 800b692:	603a      	str	r2, [r7, #0]
 800b694:	1dbb      	adds	r3, r7, #6
 800b696:	1c02      	adds	r2, r0, #0
 800b698:	801a      	strh	r2, [r3, #0]
 800b69a:	1d7b      	adds	r3, r7, #5
 800b69c:	1c0a      	adds	r2, r1, #0
 800b69e:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_read_multi_permit_req_event\r\n");
 800b6a0:	4b03      	ldr	r3, [pc, #12]	@ (800b6b0 <aci_gatt_read_multi_permit_req_event+0x24>)
 800b6a2:	0018      	movs	r0, r3
 800b6a4:	f001 ffb0 	bl	800d608 <puts>
}
 800b6a8:	46c0      	nop			@ (mov r8, r8)
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	b002      	add	sp, #8
 800b6ae:	bd80      	pop	{r7, pc}
 800b6b0:	08010170 	.word	0x08010170

0800b6b4 <aci_gatt_server_confirmation_event>:
  * @brief This event is generated when the client has sent the confirmation to a previously sent indication
  * @param Connection_Handle Connection handle related to the event
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_server_confirmation_event(uint16_t Connection_Handle))
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b082      	sub	sp, #8
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	0002      	movs	r2, r0
 800b6bc:	1dbb      	adds	r3, r7, #6
 800b6be:	801a      	strh	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_server_confirmation_event\r\n");
 800b6c0:	4b03      	ldr	r3, [pc, #12]	@ (800b6d0 <aci_gatt_server_confirmation_event+0x1c>)
 800b6c2:	0018      	movs	r0, r3
 800b6c4:	f001 ffa0 	bl	800d608 <puts>
}
 800b6c8:	46c0      	nop			@ (mov r8, r8)
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	b002      	add	sp, #8
 800b6ce:	bd80      	pop	{r7, pc}
 800b6d0:	080101bc 	.word	0x080101bc

0800b6d4 <aci_gatt_prepare_write_permit_req_event>:
WEAK_FUNCTION(void aci_gatt_prepare_write_permit_req_event(uint16_t Connection_Handle,
                                             uint16_t Attribute_Handle,
                                             uint16_t Offset,
                                             uint8_t Data_Length,
                                             uint8_t Data[]))
{
 800b6d4:	b5b0      	push	{r4, r5, r7, lr}
 800b6d6:	b082      	sub	sp, #8
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	0005      	movs	r5, r0
 800b6dc:	000c      	movs	r4, r1
 800b6de:	0010      	movs	r0, r2
 800b6e0:	0019      	movs	r1, r3
 800b6e2:	1dbb      	adds	r3, r7, #6
 800b6e4:	1c2a      	adds	r2, r5, #0
 800b6e6:	801a      	strh	r2, [r3, #0]
 800b6e8:	1d3b      	adds	r3, r7, #4
 800b6ea:	1c22      	adds	r2, r4, #0
 800b6ec:	801a      	strh	r2, [r3, #0]
 800b6ee:	1cbb      	adds	r3, r7, #2
 800b6f0:	1c02      	adds	r2, r0, #0
 800b6f2:	801a      	strh	r2, [r3, #0]
 800b6f4:	1c7b      	adds	r3, r7, #1
 800b6f6:	1c0a      	adds	r2, r1, #0
 800b6f8:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_prepare_write_permit_req_event\r\n");
 800b6fa:	4b04      	ldr	r3, [pc, #16]	@ (800b70c <aci_gatt_prepare_write_permit_req_event+0x38>)
 800b6fc:	0018      	movs	r0, r3
 800b6fe:	f001 ff83 	bl	800d608 <puts>
}
 800b702:	46c0      	nop			@ (mov r8, r8)
 800b704:	46bd      	mov	sp, r7
 800b706:	b002      	add	sp, #8
 800b708:	bdb0      	pop	{r4, r5, r7, pc}
 800b70a:	46c0      	nop			@ (mov r8, r8)
 800b70c:	080101e0 	.word	0x080101e0

0800b710 <aci_l2cap_connection_update_resp_event>:
  * @param Result 
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_connection_update_resp_event(uint16_t Connection_Handle,
                                            uint16_t Result))
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b082      	sub	sp, #8
 800b714:	af00      	add	r7, sp, #0
 800b716:	0002      	movs	r2, r0
 800b718:	1dbb      	adds	r3, r7, #6
 800b71a:	801a      	strh	r2, [r3, #0]
 800b71c:	1d3b      	adds	r3, r7, #4
 800b71e:	1c0a      	adds	r2, r1, #0
 800b720:	801a      	strh	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_resp_event\r\n");
 800b722:	4b04      	ldr	r3, [pc, #16]	@ (800b734 <aci_l2cap_connection_update_resp_event+0x24>)
 800b724:	0018      	movs	r0, r3
 800b726:	f001 ff6f 	bl	800d608 <puts>
}
 800b72a:	46c0      	nop			@ (mov r8, r8)
 800b72c:	46bd      	mov	sp, r7
 800b72e:	b002      	add	sp, #8
 800b730:	bd80      	pop	{r7, pc}
 800b732:	46c0      	nop			@ (mov r8, r8)
 800b734:	0801020c 	.word	0x0801020c

0800b738 <aci_l2cap_proc_timeout_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_proc_timeout_event(uint16_t Connection_Handle,
                                  uint8_t Data_Length,
                                  uint8_t Data[]))
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b082      	sub	sp, #8
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	603a      	str	r2, [r7, #0]
 800b740:	1dbb      	adds	r3, r7, #6
 800b742:	1c02      	adds	r2, r0, #0
 800b744:	801a      	strh	r2, [r3, #0]
 800b746:	1d7b      	adds	r3, r7, #5
 800b748:	1c0a      	adds	r2, r1, #0
 800b74a:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_proc_timeout_event\r\n");
 800b74c:	4b03      	ldr	r3, [pc, #12]	@ (800b75c <aci_l2cap_proc_timeout_event+0x24>)
 800b74e:	0018      	movs	r0, r3
 800b750:	f001 ff5a 	bl	800d608 <puts>
}
 800b754:	46c0      	nop			@ (mov r8, r8)
 800b756:	46bd      	mov	sp, r7
 800b758:	b002      	add	sp, #8
 800b75a:	bd80      	pop	{r7, pc}
 800b75c:	08010234 	.word	0x08010234

0800b760 <aci_l2cap_connection_update_req_event>:
                                           uint16_t L2CAP_Length,
                                           uint16_t Interval_Min,
                                           uint16_t Interval_Max,
                                           uint16_t Slave_Latency,
                                           uint16_t Timeout_Multiplier))
{
 800b760:	b5b0      	push	{r4, r5, r7, lr}
 800b762:	b082      	sub	sp, #8
 800b764:	af00      	add	r7, sp, #0
 800b766:	0005      	movs	r5, r0
 800b768:	000c      	movs	r4, r1
 800b76a:	0010      	movs	r0, r2
 800b76c:	0019      	movs	r1, r3
 800b76e:	1dbb      	adds	r3, r7, #6
 800b770:	1c2a      	adds	r2, r5, #0
 800b772:	801a      	strh	r2, [r3, #0]
 800b774:	1d7b      	adds	r3, r7, #5
 800b776:	1c22      	adds	r2, r4, #0
 800b778:	701a      	strb	r2, [r3, #0]
 800b77a:	1cbb      	adds	r3, r7, #2
 800b77c:	1c02      	adds	r2, r0, #0
 800b77e:	801a      	strh	r2, [r3, #0]
 800b780:	003b      	movs	r3, r7
 800b782:	1c0a      	adds	r2, r1, #0
 800b784:	801a      	strh	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_req_event\r\n");
 800b786:	4b04      	ldr	r3, [pc, #16]	@ (800b798 <aci_l2cap_connection_update_req_event+0x38>)
 800b788:	0018      	movs	r0, r3
 800b78a:	f001 ff3d 	bl	800d608 <puts>
}
 800b78e:	46c0      	nop			@ (mov r8, r8)
 800b790:	46bd      	mov	sp, r7
 800b792:	b002      	add	sp, #8
 800b794:	bdb0      	pop	{r4, r5, r7, pc}
 800b796:	46c0      	nop			@ (mov r8, r8)
 800b798:	08010254 	.word	0x08010254

0800b79c <aci_l2cap_command_reject_event>:
WEAK_FUNCTION(void aci_l2cap_command_reject_event(uint16_t Connection_Handle,
                                    uint8_t Identifier,
                                    uint16_t Reason,
                                    uint8_t Data_Length,
                                    uint8_t Data[]))
{
 800b79c:	b5b0      	push	{r4, r5, r7, lr}
 800b79e:	b082      	sub	sp, #8
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	0005      	movs	r5, r0
 800b7a4:	000c      	movs	r4, r1
 800b7a6:	0010      	movs	r0, r2
 800b7a8:	0019      	movs	r1, r3
 800b7aa:	1dbb      	adds	r3, r7, #6
 800b7ac:	1c2a      	adds	r2, r5, #0
 800b7ae:	801a      	strh	r2, [r3, #0]
 800b7b0:	1d7b      	adds	r3, r7, #5
 800b7b2:	1c22      	adds	r2, r4, #0
 800b7b4:	701a      	strb	r2, [r3, #0]
 800b7b6:	1cbb      	adds	r3, r7, #2
 800b7b8:	1c02      	adds	r2, r0, #0
 800b7ba:	801a      	strh	r2, [r3, #0]
 800b7bc:	1d3b      	adds	r3, r7, #4
 800b7be:	1c0a      	adds	r2, r1, #0
 800b7c0:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_command_reject_event\r\n");
 800b7c2:	4b04      	ldr	r3, [pc, #16]	@ (800b7d4 <aci_l2cap_command_reject_event+0x38>)
 800b7c4:	0018      	movs	r0, r3
 800b7c6:	f001 ff1f 	bl	800d608 <puts>
}
 800b7ca:	46c0      	nop			@ (mov r8, r8)
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	b002      	add	sp, #8
 800b7d0:	bdb0      	pop	{r4, r5, r7, pc}
 800b7d2:	46c0      	nop			@ (mov r8, r8)
 800b7d4:	0801027c 	.word	0x0801027c

0800b7d8 <aci_blue_initialized_event>:
  - 0x08: System reset due to crash
  - 0x09: System reset due to ECC error
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_initialized_event(uint8_t Reason_Code))
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b082      	sub	sp, #8
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	0002      	movs	r2, r0
 800b7e0:	1dfb      	adds	r3, r7, #7
 800b7e2:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_initialized_event Reason_Code=%x\r\n",Reason_Code);
 800b7e4:	1dfb      	adds	r3, r7, #7
 800b7e6:	781a      	ldrb	r2, [r3, #0]
 800b7e8:	4b04      	ldr	r3, [pc, #16]	@ (800b7fc <aci_blue_initialized_event+0x24>)
 800b7ea:	0011      	movs	r1, r2
 800b7ec:	0018      	movs	r0, r3
 800b7ee:	f001 fe9b 	bl	800d528 <iprintf>
}
 800b7f2:	46c0      	nop			@ (mov r8, r8)
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	b002      	add	sp, #8
 800b7f8:	bd80      	pop	{r7, pc}
 800b7fa:	46c0      	nop			@ (mov r8, r8)
 800b7fc:	0801029c 	.word	0x0801029c

0800b800 <aci_blue_events_lost_event>:
  - 0x0040000000000000: ACI_GAP_NUMERIC_COMPARISON_VALUE_EVENT
  - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_events_lost_event(uint8_t Lost_Events[8]))
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b082      	sub	sp, #8
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_events_lost_event\r\n");
 800b808:	4b03      	ldr	r3, [pc, #12]	@ (800b818 <aci_blue_events_lost_event+0x18>)
 800b80a:	0018      	movs	r0, r3
 800b80c:	f001 fefc 	bl	800d608 <puts>
}
 800b810:	46c0      	nop			@ (mov r8, r8)
 800b812:	46bd      	mov	sp, r7
 800b814:	b002      	add	sp, #8
 800b816:	bd80      	pop	{r7, pc}
 800b818:	080102c8 	.word	0x080102c8

0800b81c <aci_blue_crash_info_event>:
                               uint32_t LR,
                               uint32_t PC,
                               uint32_t xPSR,
                               uint8_t Debug_Data_Length,
                               uint8_t Debug_Data[]))
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b084      	sub	sp, #16
 800b820:	af00      	add	r7, sp, #0
 800b822:	60b9      	str	r1, [r7, #8]
 800b824:	607a      	str	r2, [r7, #4]
 800b826:	603b      	str	r3, [r7, #0]
 800b828:	230f      	movs	r3, #15
 800b82a:	18fb      	adds	r3, r7, r3
 800b82c:	1c02      	adds	r2, r0, #0
 800b82e:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_crash_info_event\r\n");
 800b830:	4b03      	ldr	r3, [pc, #12]	@ (800b840 <aci_blue_crash_info_event+0x24>)
 800b832:	0018      	movs	r0, r3
 800b834:	f001 fee8 	bl	800d608 <puts>
}
 800b838:	46c0      	nop			@ (mov r8, r8)
 800b83a:	46bd      	mov	sp, r7
 800b83c:	b004      	add	sp, #16
 800b83e:	bd80      	pop	{r7, pc}
 800b840:	080102e4 	.word	0x080102e4

0800b844 <aci_hal_end_of_radio_activity_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_end_of_radio_activity_event(uint8_t Last_State,
                                         uint8_t Next_State,
                                         uint32_t Next_State_SysTime))
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b082      	sub	sp, #8
 800b848:	af00      	add	r7, sp, #0
 800b84a:	603a      	str	r2, [r7, #0]
 800b84c:	1dfb      	adds	r3, r7, #7
 800b84e:	1c02      	adds	r2, r0, #0
 800b850:	701a      	strb	r2, [r3, #0]
 800b852:	1dbb      	adds	r3, r7, #6
 800b854:	1c0a      	adds	r2, r1, #0
 800b856:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_end_of_radio_activity_event\r\n");
 800b858:	4b03      	ldr	r3, [pc, #12]	@ (800b868 <aci_hal_end_of_radio_activity_event+0x24>)
 800b85a:	0018      	movs	r0, r3
 800b85c:	f001 fed4 	bl	800d608 <puts>
}
 800b860:	46c0      	nop			@ (mov r8, r8)
 800b862:	46bd      	mov	sp, r7
 800b864:	b002      	add	sp, #8
 800b866:	bd80      	pop	{r7, pc}
 800b868:	08010300 	.word	0x08010300

0800b86c <aci_hal_scan_req_report_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_scan_req_report_event(int8_t RSSI,
                                   uint8_t Peer_Address_Type,
                                   uint8_t Peer_Address[6]))
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b082      	sub	sp, #8
 800b870:	af00      	add	r7, sp, #0
 800b872:	603a      	str	r2, [r7, #0]
 800b874:	1dfb      	adds	r3, r7, #7
 800b876:	1c02      	adds	r2, r0, #0
 800b878:	701a      	strb	r2, [r3, #0]
 800b87a:	1dbb      	adds	r3, r7, #6
 800b87c:	1c0a      	adds	r2, r1, #0
 800b87e:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_scan_req_report_event\r\n");
 800b880:	4b03      	ldr	r3, [pc, #12]	@ (800b890 <aci_hal_scan_req_report_event+0x24>)
 800b882:	0018      	movs	r0, r3
 800b884:	f001 fec0 	bl	800d608 <puts>
}
 800b888:	46c0      	nop			@ (mov r8, r8)
 800b88a:	46bd      	mov	sp, r7
 800b88c:	b002      	add	sp, #8
 800b88e:	bd80      	pop	{r7, pc}
 800b890:	08010328 	.word	0x08010328

0800b894 <aci_hal_fw_error_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_fw_error_event(uint8_t FW_Error_Type,
                            uint8_t Data_Length,
                            uint8_t Data[]))
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b082      	sub	sp, #8
 800b898:	af00      	add	r7, sp, #0
 800b89a:	603a      	str	r2, [r7, #0]
 800b89c:	1dfb      	adds	r3, r7, #7
 800b89e:	1c02      	adds	r2, r0, #0
 800b8a0:	701a      	strb	r2, [r3, #0]
 800b8a2:	1dbb      	adds	r3, r7, #6
 800b8a4:	1c0a      	adds	r2, r1, #0
 800b8a6:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_fw_error_event\r\n");
 800b8a8:	4b03      	ldr	r3, [pc, #12]	@ (800b8b8 <aci_hal_fw_error_event+0x24>)
 800b8aa:	0018      	movs	r0, r3
 800b8ac:	f001 feac 	bl	800d608 <puts>
}
 800b8b0:	46c0      	nop			@ (mov r8, r8)
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	b002      	add	sp, #8
 800b8b6:	bd80      	pop	{r7, pc}
 800b8b8:	08010348 	.word	0x08010348

0800b8bc <hci_reset>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_reset(void)
{
 800b8bc:	b590      	push	{r4, r7, lr}
 800b8be:	b089      	sub	sp, #36	@ 0x24
 800b8c0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800b8c2:	1dfb      	adds	r3, r7, #7
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	701a      	strb	r2, [r3, #0]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800b8c8:	2408      	movs	r4, #8
 800b8ca:	193b      	adds	r3, r7, r4
 800b8cc:	2218      	movs	r2, #24
 800b8ce:	2100      	movs	r1, #0
 800b8d0:	0018      	movs	r0, r3
 800b8d2:	f001 ff9d 	bl	800d810 <memset>
  rq.ogf = 0x03;
 800b8d6:	0021      	movs	r1, r4
 800b8d8:	187b      	adds	r3, r7, r1
 800b8da:	2203      	movs	r2, #3
 800b8dc:	801a      	strh	r2, [r3, #0]
  rq.ocf = 0x003;
 800b8de:	187b      	adds	r3, r7, r1
 800b8e0:	2203      	movs	r2, #3
 800b8e2:	805a      	strh	r2, [r3, #2]
  rq.rparam = &status;
 800b8e4:	187b      	adds	r3, r7, r1
 800b8e6:	1dfa      	adds	r2, r7, #7
 800b8e8:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 800b8ea:	187b      	adds	r3, r7, r1
 800b8ec:	2201      	movs	r2, #1
 800b8ee:	615a      	str	r2, [r3, #20]
  if (hci_send_req(&rq, FALSE) < 0)
 800b8f0:	187b      	adds	r3, r7, r1
 800b8f2:	2100      	movs	r1, #0
 800b8f4:	0018      	movs	r0, r3
 800b8f6:	f000 fd95 	bl	800c424 <hci_send_req>
 800b8fa:	1e03      	subs	r3, r0, #0
 800b8fc:	da01      	bge.n	800b902 <hci_reset+0x46>
    return BLE_STATUS_TIMEOUT;
 800b8fe:	23ff      	movs	r3, #255	@ 0xff
 800b900:	e007      	b.n	800b912 <hci_reset+0x56>
  if (status) {
 800b902:	1dfb      	adds	r3, r7, #7
 800b904:	781b      	ldrb	r3, [r3, #0]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d002      	beq.n	800b910 <hci_reset+0x54>
    return status;
 800b90a:	1dfb      	adds	r3, r7, #7
 800b90c:	781b      	ldrb	r3, [r3, #0]
 800b90e:	e000      	b.n	800b912 <hci_reset+0x56>
  }
  return BLE_STATUS_SUCCESS;
 800b910:	2300      	movs	r3, #0
}
 800b912:	0018      	movs	r0, r3
 800b914:	46bd      	mov	sp, r7
 800b916:	b009      	add	sp, #36	@ 0x24
 800b918:	bd90      	pop	{r4, r7, pc}

0800b91a <hci_le_rand>:
  }
  BLUENRG_memcpy((void *) Encrypted_Data, (const void *) resp.Encrypted_Data, 16);
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_le_rand(uint8_t Random_Number[8])
{
 800b91a:	b5b0      	push	{r4, r5, r7, lr}
 800b91c:	b08c      	sub	sp, #48	@ 0x30
 800b91e:	af00      	add	r7, sp, #0
 800b920:	6078      	str	r0, [r7, #4]
  struct hci_request rq;
  hci_le_rand_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800b922:	250c      	movs	r5, #12
 800b924:	197b      	adds	r3, r7, r5
 800b926:	2209      	movs	r2, #9
 800b928:	2100      	movs	r1, #0
 800b92a:	0018      	movs	r0, r3
 800b92c:	f001 ff70 	bl	800d810 <memset>
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800b930:	2418      	movs	r4, #24
 800b932:	193b      	adds	r3, r7, r4
 800b934:	2218      	movs	r2, #24
 800b936:	2100      	movs	r1, #0
 800b938:	0018      	movs	r0, r3
 800b93a:	f001 ff69 	bl	800d810 <memset>
  rq.ogf = 0x08;
 800b93e:	0021      	movs	r1, r4
 800b940:	187b      	adds	r3, r7, r1
 800b942:	2208      	movs	r2, #8
 800b944:	801a      	strh	r2, [r3, #0]
  rq.ocf = 0x018;
 800b946:	187b      	adds	r3, r7, r1
 800b948:	2218      	movs	r2, #24
 800b94a:	805a      	strh	r2, [r3, #2]
  rq.rparam = &resp;
 800b94c:	187b      	adds	r3, r7, r1
 800b94e:	197a      	adds	r2, r7, r5
 800b950:	611a      	str	r2, [r3, #16]
  rq.rlen = sizeof(resp);
 800b952:	187b      	adds	r3, r7, r1
 800b954:	2209      	movs	r2, #9
 800b956:	615a      	str	r2, [r3, #20]
  if (hci_send_req(&rq, FALSE) < 0)
 800b958:	187b      	adds	r3, r7, r1
 800b95a:	2100      	movs	r1, #0
 800b95c:	0018      	movs	r0, r3
 800b95e:	f000 fd61 	bl	800c424 <hci_send_req>
 800b962:	1e03      	subs	r3, r0, #0
 800b964:	da01      	bge.n	800b96a <hci_le_rand+0x50>
    return BLE_STATUS_TIMEOUT;
 800b966:	23ff      	movs	r3, #255	@ 0xff
 800b968:	e012      	b.n	800b990 <hci_le_rand+0x76>
  if (resp.Status) {
 800b96a:	220c      	movs	r2, #12
 800b96c:	18bb      	adds	r3, r7, r2
 800b96e:	781b      	ldrb	r3, [r3, #0]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d002      	beq.n	800b97a <hci_le_rand+0x60>
    return resp.Status;
 800b974:	18bb      	adds	r3, r7, r2
 800b976:	781b      	ldrb	r3, [r3, #0]
 800b978:	e00a      	b.n	800b990 <hci_le_rand+0x76>
  }
  BLUENRG_memcpy((void *) Random_Number, (const void *) resp.Random_Number, 8);
 800b97a:	6879      	ldr	r1, [r7, #4]
 800b97c:	230c      	movs	r3, #12
 800b97e:	18fb      	adds	r3, r7, r3
 800b980:	2201      	movs	r2, #1
 800b982:	0008      	movs	r0, r1
 800b984:	189b      	adds	r3, r3, r2
 800b986:	2208      	movs	r2, #8
 800b988:	0019      	movs	r1, r3
 800b98a:	f001 ffd3 	bl	800d934 <memcpy>
  return BLE_STATUS_SUCCESS;
 800b98e:	2300      	movs	r3, #0
}
 800b990:	0018      	movs	r0, r3
 800b992:	46bd      	mov	sp, r7
 800b994:	b00c      	add	sp, #48	@ 0x30
 800b996:	bdb0      	pop	{r4, r5, r7, pc}

0800b998 <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 800b998:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b99a:	b0cf      	sub	sp, #316	@ 0x13c
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	0004      	movs	r4, r0
 800b9a0:	0008      	movs	r0, r1
 800b9a2:	0011      	movs	r1, r2
 800b9a4:	603b      	str	r3, [r7, #0]
 800b9a6:	4b54      	ldr	r3, [pc, #336]	@ (800baf8 <aci_gap_init+0x160>)
 800b9a8:	259c      	movs	r5, #156	@ 0x9c
 800b9aa:	006d      	lsls	r5, r5, #1
 800b9ac:	195b      	adds	r3, r3, r5
 800b9ae:	19db      	adds	r3, r3, r7
 800b9b0:	1c22      	adds	r2, r4, #0
 800b9b2:	701a      	strb	r2, [r3, #0]
 800b9b4:	4b51      	ldr	r3, [pc, #324]	@ (800bafc <aci_gap_init+0x164>)
 800b9b6:	195b      	adds	r3, r3, r5
 800b9b8:	19db      	adds	r3, r3, r7
 800b9ba:	1c02      	adds	r2, r0, #0
 800b9bc:	701a      	strb	r2, [r3, #0]
 800b9be:	4b50      	ldr	r3, [pc, #320]	@ (800bb00 <aci_gap_init+0x168>)
 800b9c0:	195b      	adds	r3, r3, r5
 800b9c2:	19db      	adds	r3, r3, r7
 800b9c4:	1c0a      	adds	r2, r1, #0
 800b9c6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800b9c8:	2314      	movs	r3, #20
 800b9ca:	18fb      	adds	r3, r7, r3
 800b9cc:	269a      	movs	r6, #154	@ 0x9a
 800b9ce:	0076      	lsls	r6, r6, #1
 800b9d0:	19b9      	adds	r1, r7, r6
 800b9d2:	600b      	str	r3, [r1, #0]
  aci_gap_init_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800b9d4:	210c      	movs	r1, #12
 800b9d6:	187b      	adds	r3, r7, r1
 800b9d8:	2207      	movs	r2, #7
 800b9da:	2100      	movs	r1, #0
 800b9dc:	0018      	movs	r0, r3
 800b9de:	f001 ff17 	bl	800d810 <memset>
  uint8_t index_input = 0;
 800b9e2:	2434      	movs	r4, #52	@ 0x34
 800b9e4:	34ff      	adds	r4, #255	@ 0xff
 800b9e6:	193b      	adds	r3, r7, r4
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	701a      	strb	r2, [r3, #0]
  cp0->Role = htob(Role, 1);
 800b9ec:	0031      	movs	r1, r6
 800b9ee:	1878      	adds	r0, r7, r1
 800b9f0:	6803      	ldr	r3, [r0, #0]
 800b9f2:	4a41      	ldr	r2, [pc, #260]	@ (800baf8 <aci_gap_init+0x160>)
 800b9f4:	1950      	adds	r0, r2, r5
 800b9f6:	19c2      	adds	r2, r0, r7
 800b9f8:	7812      	ldrb	r2, [r2, #0]
 800b9fa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b9fc:	193b      	adds	r3, r7, r4
 800b9fe:	193a      	adds	r2, r7, r4
 800ba00:	7812      	ldrb	r2, [r2, #0]
 800ba02:	3201      	adds	r2, #1
 800ba04:	701a      	strb	r2, [r3, #0]
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 800ba06:	1878      	adds	r0, r7, r1
 800ba08:	6803      	ldr	r3, [r0, #0]
 800ba0a:	4a3c      	ldr	r2, [pc, #240]	@ (800bafc <aci_gap_init+0x164>)
 800ba0c:	1950      	adds	r0, r2, r5
 800ba0e:	19c2      	adds	r2, r0, r7
 800ba10:	7812      	ldrb	r2, [r2, #0]
 800ba12:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800ba14:	193b      	adds	r3, r7, r4
 800ba16:	193a      	adds	r2, r7, r4
 800ba18:	7812      	ldrb	r2, [r2, #0]
 800ba1a:	3201      	adds	r2, #1
 800ba1c:	701a      	strb	r2, [r3, #0]
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 800ba1e:	1878      	adds	r0, r7, r1
 800ba20:	6803      	ldr	r3, [r0, #0]
 800ba22:	4a37      	ldr	r2, [pc, #220]	@ (800bb00 <aci_gap_init+0x168>)
 800ba24:	1950      	adds	r0, r2, r5
 800ba26:	19c2      	adds	r2, r0, r7
 800ba28:	7812      	ldrb	r2, [r2, #0]
 800ba2a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800ba2c:	193b      	adds	r3, r7, r4
 800ba2e:	193a      	adds	r2, r7, r4
 800ba30:	7812      	ldrb	r2, [r2, #0]
 800ba32:	3201      	adds	r2, #1
 800ba34:	701a      	strb	r2, [r3, #0]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ba36:	258c      	movs	r5, #140	@ 0x8c
 800ba38:	006d      	lsls	r5, r5, #1
 800ba3a:	197b      	adds	r3, r7, r5
 800ba3c:	2218      	movs	r2, #24
 800ba3e:	2100      	movs	r1, #0
 800ba40:	0018      	movs	r0, r3
 800ba42:	f001 fee5 	bl	800d810 <memset>
  rq.ogf = 0x3f;
 800ba46:	0029      	movs	r1, r5
 800ba48:	187b      	adds	r3, r7, r1
 800ba4a:	223f      	movs	r2, #63	@ 0x3f
 800ba4c:	801a      	strh	r2, [r3, #0]
  rq.ocf = 0x08a;
 800ba4e:	187b      	adds	r3, r7, r1
 800ba50:	228a      	movs	r2, #138	@ 0x8a
 800ba52:	805a      	strh	r2, [r3, #2]
  rq.cparam = cmd_buffer;
 800ba54:	187b      	adds	r3, r7, r1
 800ba56:	2214      	movs	r2, #20
 800ba58:	18ba      	adds	r2, r7, r2
 800ba5a:	609a      	str	r2, [r3, #8]
  rq.clen = index_input;
 800ba5c:	193b      	adds	r3, r7, r4
 800ba5e:	781a      	ldrb	r2, [r3, #0]
 800ba60:	187b      	adds	r3, r7, r1
 800ba62:	60da      	str	r2, [r3, #12]
  rq.rparam = &resp;
 800ba64:	187b      	adds	r3, r7, r1
 800ba66:	220c      	movs	r2, #12
 800ba68:	18ba      	adds	r2, r7, r2
 800ba6a:	611a      	str	r2, [r3, #16]
  rq.rlen = sizeof(resp);
 800ba6c:	187b      	adds	r3, r7, r1
 800ba6e:	2207      	movs	r2, #7
 800ba70:	615a      	str	r2, [r3, #20]
  if (hci_send_req(&rq, FALSE) < 0)
 800ba72:	187b      	adds	r3, r7, r1
 800ba74:	2100      	movs	r1, #0
 800ba76:	0018      	movs	r0, r3
 800ba78:	f000 fcd4 	bl	800c424 <hci_send_req>
 800ba7c:	1e03      	subs	r3, r0, #0
 800ba7e:	da01      	bge.n	800ba84 <aci_gap_init+0xec>
    return BLE_STATUS_TIMEOUT;
 800ba80:	23ff      	movs	r3, #255	@ 0xff
 800ba82:	e034      	b.n	800baee <aci_gap_init+0x156>
  if (resp.Status) {
 800ba84:	4b1f      	ldr	r3, [pc, #124]	@ (800bb04 <aci_gap_init+0x16c>)
 800ba86:	229c      	movs	r2, #156	@ 0x9c
 800ba88:	0052      	lsls	r2, r2, #1
 800ba8a:	189b      	adds	r3, r3, r2
 800ba8c:	19db      	adds	r3, r3, r7
 800ba8e:	781b      	ldrb	r3, [r3, #0]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d004      	beq.n	800ba9e <aci_gap_init+0x106>
    return resp.Status;
 800ba94:	4b1b      	ldr	r3, [pc, #108]	@ (800bb04 <aci_gap_init+0x16c>)
 800ba96:	189b      	adds	r3, r3, r2
 800ba98:	19db      	adds	r3, r3, r7
 800ba9a:	781b      	ldrb	r3, [r3, #0]
 800ba9c:	e027      	b.n	800baee <aci_gap_init+0x156>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800ba9e:	4b19      	ldr	r3, [pc, #100]	@ (800bb04 <aci_gap_init+0x16c>)
 800baa0:	219c      	movs	r1, #156	@ 0x9c
 800baa2:	0049      	lsls	r1, r1, #1
 800baa4:	185b      	adds	r3, r3, r1
 800baa6:	19db      	adds	r3, r3, r7
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	021b      	lsls	r3, r3, #8
 800baac:	0c1b      	lsrs	r3, r3, #16
 800baae:	b29a      	uxth	r2, r3
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 800bab4:	4b13      	ldr	r3, [pc, #76]	@ (800bb04 <aci_gap_init+0x16c>)
 800bab6:	185b      	adds	r3, r3, r1
 800bab8:	19db      	adds	r3, r3, r7
 800baba:	78da      	ldrb	r2, [r3, #3]
 800babc:	791b      	ldrb	r3, [r3, #4]
 800babe:	021b      	lsls	r3, r3, #8
 800bac0:	4313      	orrs	r3, r2
 800bac2:	b29a      	uxth	r2, r3
 800bac4:	23a4      	movs	r3, #164	@ 0xa4
 800bac6:	005b      	lsls	r3, r3, #1
 800bac8:	2008      	movs	r0, #8
 800baca:	181b      	adds	r3, r3, r0
 800bacc:	19db      	adds	r3, r3, r7
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 800bad2:	4b0c      	ldr	r3, [pc, #48]	@ (800bb04 <aci_gap_init+0x16c>)
 800bad4:	185b      	adds	r3, r3, r1
 800bad6:	19db      	adds	r3, r3, r7
 800bad8:	685b      	ldr	r3, [r3, #4]
 800bada:	021b      	lsls	r3, r3, #8
 800badc:	0c1b      	lsrs	r3, r3, #16
 800bade:	b29a      	uxth	r2, r3
 800bae0:	23a6      	movs	r3, #166	@ 0xa6
 800bae2:	005b      	lsls	r3, r3, #1
 800bae4:	181b      	adds	r3, r3, r0
 800bae6:	19db      	adds	r3, r3, r7
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800baec:	2300      	movs	r3, #0
}
 800baee:	0018      	movs	r0, r3
 800baf0:	46bd      	mov	sp, r7
 800baf2:	b04f      	add	sp, #316	@ 0x13c
 800baf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800baf6:	46c0      	nop			@ (mov r8, r8)
 800baf8:	fffffecf 	.word	0xfffffecf
 800bafc:	fffffece 	.word	0xfffffece
 800bb00:	fffffecd 	.word	0xfffffecd
 800bb04:	fffffed4 	.word	0xfffffed4

0800bb08 <aci_gatt_init>:
  ******************************************************************************
  */
#include "ble_types.h"
#include "bluenrg1_gatt_aci.h"
tBleStatus aci_gatt_init(void)
{
 800bb08:	b590      	push	{r4, r7, lr}
 800bb0a:	b089      	sub	sp, #36	@ 0x24
 800bb0c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800bb0e:	1dfb      	adds	r3, r7, #7
 800bb10:	2200      	movs	r2, #0
 800bb12:	701a      	strb	r2, [r3, #0]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800bb14:	2408      	movs	r4, #8
 800bb16:	193b      	adds	r3, r7, r4
 800bb18:	2218      	movs	r2, #24
 800bb1a:	2100      	movs	r1, #0
 800bb1c:	0018      	movs	r0, r3
 800bb1e:	f001 fe77 	bl	800d810 <memset>
  rq.ogf = 0x3f;
 800bb22:	0021      	movs	r1, r4
 800bb24:	187b      	adds	r3, r7, r1
 800bb26:	223f      	movs	r2, #63	@ 0x3f
 800bb28:	801a      	strh	r2, [r3, #0]
  rq.ocf = 0x101;
 800bb2a:	187b      	adds	r3, r7, r1
 800bb2c:	2202      	movs	r2, #2
 800bb2e:	32ff      	adds	r2, #255	@ 0xff
 800bb30:	805a      	strh	r2, [r3, #2]
  rq.rparam = &status;
 800bb32:	187b      	adds	r3, r7, r1
 800bb34:	1dfa      	adds	r2, r7, #7
 800bb36:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 800bb38:	187b      	adds	r3, r7, r1
 800bb3a:	2201      	movs	r2, #1
 800bb3c:	615a      	str	r2, [r3, #20]
  if (hci_send_req(&rq, FALSE) < 0)
 800bb3e:	187b      	adds	r3, r7, r1
 800bb40:	2100      	movs	r1, #0
 800bb42:	0018      	movs	r0, r3
 800bb44:	f000 fc6e 	bl	800c424 <hci_send_req>
 800bb48:	1e03      	subs	r3, r0, #0
 800bb4a:	da01      	bge.n	800bb50 <aci_gatt_init+0x48>
    return BLE_STATUS_TIMEOUT;
 800bb4c:	23ff      	movs	r3, #255	@ 0xff
 800bb4e:	e007      	b.n	800bb60 <aci_gatt_init+0x58>
  if (status) {
 800bb50:	1dfb      	adds	r3, r7, #7
 800bb52:	781b      	ldrb	r3, [r3, #0]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d002      	beq.n	800bb5e <aci_gatt_init+0x56>
    return status;
 800bb58:	1dfb      	adds	r3, r7, #7
 800bb5a:	781b      	ldrb	r3, [r3, #0]
 800bb5c:	e000      	b.n	800bb60 <aci_gatt_init+0x58>
  }
  return BLE_STATUS_SUCCESS;
 800bb5e:	2300      	movs	r3, #0
}
 800bb60:	0018      	movs	r0, r3
 800bb62:	46bd      	mov	sp, r7
 800bb64:	b009      	add	sp, #36	@ 0x24
 800bb66:	bd90      	pop	{r4, r7, pc}

0800bb68 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 800bb68:	b5b0      	push	{r4, r5, r7, lr}
 800bb6a:	b0ce      	sub	sp, #312	@ 0x138
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	0004      	movs	r4, r0
 800bb70:	6039      	str	r1, [r7, #0]
 800bb72:	0010      	movs	r0, r2
 800bb74:	0019      	movs	r1, r3
 800bb76:	4b6f      	ldr	r3, [pc, #444]	@ (800bd34 <aci_gatt_add_service+0x1cc>)
 800bb78:	259c      	movs	r5, #156	@ 0x9c
 800bb7a:	006d      	lsls	r5, r5, #1
 800bb7c:	195b      	adds	r3, r3, r5
 800bb7e:	19db      	adds	r3, r3, r7
 800bb80:	1c22      	adds	r2, r4, #0
 800bb82:	701a      	strb	r2, [r3, #0]
 800bb84:	4b6c      	ldr	r3, [pc, #432]	@ (800bd38 <aci_gatt_add_service+0x1d0>)
 800bb86:	002c      	movs	r4, r5
 800bb88:	191b      	adds	r3, r3, r4
 800bb8a:	19db      	adds	r3, r3, r7
 800bb8c:	1c02      	adds	r2, r0, #0
 800bb8e:	701a      	strb	r2, [r3, #0]
 800bb90:	4b6a      	ldr	r3, [pc, #424]	@ (800bd3c <aci_gatt_add_service+0x1d4>)
 800bb92:	0020      	movs	r0, r4
 800bb94:	181b      	adds	r3, r3, r0
 800bb96:	19db      	adds	r3, r3, r7
 800bb98:	1c0a      	adds	r2, r1, #0
 800bb9a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800bb9c:	230c      	movs	r3, #12
 800bb9e:	18fb      	adds	r3, r7, r3
 800bba0:	2298      	movs	r2, #152	@ 0x98
 800bba2:	0052      	lsls	r2, r2, #1
 800bba4:	18ba      	adds	r2, r7, r2
 800bba6:	6013      	str	r3, [r2, #0]
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800bba8:	4b62      	ldr	r3, [pc, #392]	@ (800bd34 <aci_gatt_add_service+0x1cc>)
 800bbaa:	181b      	adds	r3, r3, r0
 800bbac:	19db      	adds	r3, r3, r7
 800bbae:	781b      	ldrb	r3, [r3, #0]
 800bbb0:	2b01      	cmp	r3, #1
 800bbb2:	d009      	beq.n	800bbc8 <aci_gatt_add_service+0x60>
 800bbb4:	4b5f      	ldr	r3, [pc, #380]	@ (800bd34 <aci_gatt_add_service+0x1cc>)
 800bbb6:	181b      	adds	r3, r3, r0
 800bbb8:	19db      	adds	r3, r3, r7
 800bbba:	781b      	ldrb	r3, [r3, #0]
 800bbbc:	2b02      	cmp	r3, #2
 800bbbe:	d101      	bne.n	800bbc4 <aci_gatt_add_service+0x5c>
 800bbc0:	2311      	movs	r3, #17
 800bbc2:	e002      	b.n	800bbca <aci_gatt_add_service+0x62>
 800bbc4:	2301      	movs	r3, #1
 800bbc6:	e000      	b.n	800bbca <aci_gatt_add_service+0x62>
 800bbc8:	2303      	movs	r3, #3
 800bbca:	220c      	movs	r2, #12
 800bbcc:	18ba      	adds	r2, r7, r2
 800bbce:	18d3      	adds	r3, r2, r3
 800bbd0:	2296      	movs	r2, #150	@ 0x96
 800bbd2:	0052      	lsls	r2, r2, #1
 800bbd4:	18ba      	adds	r2, r7, r2
 800bbd6:	6013      	str	r3, [r2, #0]
  aci_gatt_add_service_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800bbd8:	2308      	movs	r3, #8
 800bbda:	18fb      	adds	r3, r7, r3
 800bbdc:	2203      	movs	r2, #3
 800bbde:	2100      	movs	r1, #0
 800bbe0:	0018      	movs	r0, r3
 800bbe2:	f001 fe15 	bl	800d810 <memset>
  uint8_t index_input = 0;
 800bbe6:	212c      	movs	r1, #44	@ 0x2c
 800bbe8:	31ff      	adds	r1, #255	@ 0xff
 800bbea:	187b      	adds	r3, r7, r1
 800bbec:	2200      	movs	r2, #0
 800bbee:	701a      	strb	r2, [r3, #0]
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 800bbf0:	2398      	movs	r3, #152	@ 0x98
 800bbf2:	005b      	lsls	r3, r3, #1
 800bbf4:	18fb      	adds	r3, r7, r3
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	4a4e      	ldr	r2, [pc, #312]	@ (800bd34 <aci_gatt_add_service+0x1cc>)
 800bbfa:	209c      	movs	r0, #156	@ 0x9c
 800bbfc:	0040      	lsls	r0, r0, #1
 800bbfe:	1812      	adds	r2, r2, r0
 800bc00:	19d2      	adds	r2, r2, r7
 800bc02:	7812      	ldrb	r2, [r2, #0]
 800bc04:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800bc06:	187b      	adds	r3, r7, r1
 800bc08:	187a      	adds	r2, r7, r1
 800bc0a:	7812      	ldrb	r2, [r2, #0]
 800bc0c:	3201      	adds	r2, #1
 800bc0e:	701a      	strb	r2, [r3, #0]
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 800bc10:	4b48      	ldr	r3, [pc, #288]	@ (800bd34 <aci_gatt_add_service+0x1cc>)
 800bc12:	181b      	adds	r3, r3, r0
 800bc14:	19db      	adds	r3, r3, r7
 800bc16:	781b      	ldrb	r3, [r3, #0]
 800bc18:	2b01      	cmp	r3, #1
 800bc1a:	d002      	beq.n	800bc22 <aci_gatt_add_service+0xba>
 800bc1c:	2b02      	cmp	r3, #2
 800bc1e:	d006      	beq.n	800bc2e <aci_gatt_add_service+0xc6>
 800bc20:	e00b      	b.n	800bc3a <aci_gatt_add_service+0xd2>
      case 1: size = 2; break;
 800bc22:	2338      	movs	r3, #56	@ 0x38
 800bc24:	33ff      	adds	r3, #255	@ 0xff
 800bc26:	18fb      	adds	r3, r7, r3
 800bc28:	2202      	movs	r2, #2
 800bc2a:	701a      	strb	r2, [r3, #0]
 800bc2c:	e007      	b.n	800bc3e <aci_gatt_add_service+0xd6>
      case 2: size = 16; break;
 800bc2e:	2338      	movs	r3, #56	@ 0x38
 800bc30:	33ff      	adds	r3, #255	@ 0xff
 800bc32:	18fb      	adds	r3, r7, r3
 800bc34:	2210      	movs	r2, #16
 800bc36:	701a      	strb	r2, [r3, #0]
 800bc38:	e001      	b.n	800bc3e <aci_gatt_add_service+0xd6>
      default: return BLE_STATUS_ERROR;
 800bc3a:	2347      	movs	r3, #71	@ 0x47
 800bc3c:	e076      	b.n	800bd2c <aci_gatt_add_service+0x1c4>
    }
    BLUENRG_memcpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 800bc3e:	2398      	movs	r3, #152	@ 0x98
 800bc40:	005b      	lsls	r3, r3, #1
 800bc42:	18fb      	adds	r3, r7, r3
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	1c58      	adds	r0, r3, #1
 800bc48:	2438      	movs	r4, #56	@ 0x38
 800bc4a:	34ff      	adds	r4, #255	@ 0xff
 800bc4c:	193b      	adds	r3, r7, r4
 800bc4e:	781a      	ldrb	r2, [r3, #0]
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	0019      	movs	r1, r3
 800bc54:	f001 fe6e 	bl	800d934 <memcpy>
    index_input += size;
 800bc58:	202c      	movs	r0, #44	@ 0x2c
 800bc5a:	30ff      	adds	r0, #255	@ 0xff
 800bc5c:	183b      	adds	r3, r7, r0
 800bc5e:	1839      	adds	r1, r7, r0
 800bc60:	193a      	adds	r2, r7, r4
 800bc62:	7809      	ldrb	r1, [r1, #0]
 800bc64:	7812      	ldrb	r2, [r2, #0]
 800bc66:	188a      	adds	r2, r1, r2
 800bc68:	701a      	strb	r2, [r3, #0]
    {
      cp1->Service_Type = htob(Service_Type, 1);
 800bc6a:	2196      	movs	r1, #150	@ 0x96
 800bc6c:	0049      	lsls	r1, r1, #1
 800bc6e:	187b      	adds	r3, r7, r1
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	4a31      	ldr	r2, [pc, #196]	@ (800bd38 <aci_gatt_add_service+0x1d0>)
 800bc74:	249c      	movs	r4, #156	@ 0x9c
 800bc76:	0064      	lsls	r4, r4, #1
 800bc78:	1912      	adds	r2, r2, r4
 800bc7a:	19d2      	adds	r2, r2, r7
 800bc7c:	7812      	ldrb	r2, [r2, #0]
 800bc7e:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800bc80:	183b      	adds	r3, r7, r0
 800bc82:	183a      	adds	r2, r7, r0
 800bc84:	7812      	ldrb	r2, [r2, #0]
 800bc86:	3201      	adds	r2, #1
 800bc88:	701a      	strb	r2, [r3, #0]
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 800bc8a:	187b      	adds	r3, r7, r1
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	4a2b      	ldr	r2, [pc, #172]	@ (800bd3c <aci_gatt_add_service+0x1d4>)
 800bc90:	1912      	adds	r2, r2, r4
 800bc92:	19d2      	adds	r2, r2, r7
 800bc94:	7812      	ldrb	r2, [r2, #0]
 800bc96:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800bc98:	183b      	adds	r3, r7, r0
 800bc9a:	0005      	movs	r5, r0
 800bc9c:	183a      	adds	r2, r7, r0
 800bc9e:	7812      	ldrb	r2, [r2, #0]
 800bca0:	3201      	adds	r2, #1
 800bca2:	701a      	strb	r2, [r3, #0]
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800bca4:	2488      	movs	r4, #136	@ 0x88
 800bca6:	0064      	lsls	r4, r4, #1
 800bca8:	193b      	adds	r3, r7, r4
 800bcaa:	2218      	movs	r2, #24
 800bcac:	2100      	movs	r1, #0
 800bcae:	0018      	movs	r0, r3
 800bcb0:	f001 fdae 	bl	800d810 <memset>
  rq.ogf = 0x3f;
 800bcb4:	0021      	movs	r1, r4
 800bcb6:	187b      	adds	r3, r7, r1
 800bcb8:	223f      	movs	r2, #63	@ 0x3f
 800bcba:	801a      	strh	r2, [r3, #0]
  rq.ocf = 0x102;
 800bcbc:	187b      	adds	r3, r7, r1
 800bcbe:	2281      	movs	r2, #129	@ 0x81
 800bcc0:	0052      	lsls	r2, r2, #1
 800bcc2:	805a      	strh	r2, [r3, #2]
  rq.cparam = cmd_buffer;
 800bcc4:	187b      	adds	r3, r7, r1
 800bcc6:	220c      	movs	r2, #12
 800bcc8:	18ba      	adds	r2, r7, r2
 800bcca:	609a      	str	r2, [r3, #8]
  rq.clen = index_input;
 800bccc:	197b      	adds	r3, r7, r5
 800bcce:	781a      	ldrb	r2, [r3, #0]
 800bcd0:	187b      	adds	r3, r7, r1
 800bcd2:	60da      	str	r2, [r3, #12]
  rq.rparam = &resp;
 800bcd4:	187b      	adds	r3, r7, r1
 800bcd6:	2208      	movs	r2, #8
 800bcd8:	18ba      	adds	r2, r7, r2
 800bcda:	611a      	str	r2, [r3, #16]
  rq.rlen = sizeof(resp);
 800bcdc:	187b      	adds	r3, r7, r1
 800bcde:	2203      	movs	r2, #3
 800bce0:	615a      	str	r2, [r3, #20]
  if (hci_send_req(&rq, FALSE) < 0)
 800bce2:	187b      	adds	r3, r7, r1
 800bce4:	2100      	movs	r1, #0
 800bce6:	0018      	movs	r0, r3
 800bce8:	f000 fb9c 	bl	800c424 <hci_send_req>
 800bcec:	1e03      	subs	r3, r0, #0
 800bcee:	da01      	bge.n	800bcf4 <aci_gatt_add_service+0x18c>
    return BLE_STATUS_TIMEOUT;
 800bcf0:	23ff      	movs	r3, #255	@ 0xff
 800bcf2:	e01b      	b.n	800bd2c <aci_gatt_add_service+0x1c4>
  if (resp.Status) {
 800bcf4:	4b12      	ldr	r3, [pc, #72]	@ (800bd40 <aci_gatt_add_service+0x1d8>)
 800bcf6:	229c      	movs	r2, #156	@ 0x9c
 800bcf8:	0052      	lsls	r2, r2, #1
 800bcfa:	189b      	adds	r3, r3, r2
 800bcfc:	19db      	adds	r3, r3, r7
 800bcfe:	781b      	ldrb	r3, [r3, #0]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d004      	beq.n	800bd0e <aci_gatt_add_service+0x1a6>
    return resp.Status;
 800bd04:	4b0e      	ldr	r3, [pc, #56]	@ (800bd40 <aci_gatt_add_service+0x1d8>)
 800bd06:	189b      	adds	r3, r3, r2
 800bd08:	19db      	adds	r3, r3, r7
 800bd0a:	781b      	ldrb	r3, [r3, #0]
 800bd0c:	e00e      	b.n	800bd2c <aci_gatt_add_service+0x1c4>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800bd0e:	4b0c      	ldr	r3, [pc, #48]	@ (800bd40 <aci_gatt_add_service+0x1d8>)
 800bd10:	229c      	movs	r2, #156	@ 0x9c
 800bd12:	0052      	lsls	r2, r2, #1
 800bd14:	189b      	adds	r3, r3, r2
 800bd16:	19db      	adds	r3, r3, r7
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	021b      	lsls	r3, r3, #8
 800bd1c:	0c1b      	lsrs	r3, r3, #16
 800bd1e:	b29a      	uxth	r2, r3
 800bd20:	23a4      	movs	r3, #164	@ 0xa4
 800bd22:	005b      	lsls	r3, r3, #1
 800bd24:	18fb      	adds	r3, r7, r3
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800bd2a:	2300      	movs	r3, #0
}
 800bd2c:	0018      	movs	r0, r3
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	b04e      	add	sp, #312	@ 0x138
 800bd32:	bdb0      	pop	{r4, r5, r7, pc}
 800bd34:	fffffecf 	.word	0xfffffecf
 800bd38:	fffffece 	.word	0xfffffece
 800bd3c:	fffffecd 	.word	0xfffffecd
 800bd40:	fffffed0 	.word	0xfffffed0

0800bd44 <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 800bd44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd46:	b0d1      	sub	sp, #324	@ 0x144
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	0004      	movs	r4, r0
 800bd4c:	0008      	movs	r0, r1
 800bd4e:	60ba      	str	r2, [r7, #8]
 800bd50:	0019      	movs	r1, r3
 800bd52:	4ba1      	ldr	r3, [pc, #644]	@ (800bfd8 <aci_gatt_add_char+0x294>)
 800bd54:	25a0      	movs	r5, #160	@ 0xa0
 800bd56:	006d      	lsls	r5, r5, #1
 800bd58:	195b      	adds	r3, r3, r5
 800bd5a:	19db      	adds	r3, r3, r7
 800bd5c:	1c22      	adds	r2, r4, #0
 800bd5e:	801a      	strh	r2, [r3, #0]
 800bd60:	4b9e      	ldr	r3, [pc, #632]	@ (800bfdc <aci_gatt_add_char+0x298>)
 800bd62:	002c      	movs	r4, r5
 800bd64:	191b      	adds	r3, r3, r4
 800bd66:	19db      	adds	r3, r3, r7
 800bd68:	1c02      	adds	r2, r0, #0
 800bd6a:	701a      	strb	r2, [r3, #0]
 800bd6c:	4b9c      	ldr	r3, [pc, #624]	@ (800bfe0 <aci_gatt_add_char+0x29c>)
 800bd6e:	0020      	movs	r0, r4
 800bd70:	181b      	adds	r3, r3, r0
 800bd72:	19db      	adds	r3, r3, r7
 800bd74:	1c0a      	adds	r2, r1, #0
 800bd76:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800bd78:	2314      	movs	r3, #20
 800bd7a:	18fb      	adds	r3, r7, r3
 800bd7c:	229c      	movs	r2, #156	@ 0x9c
 800bd7e:	0052      	lsls	r2, r2, #1
 800bd80:	18ba      	adds	r2, r7, r2
 800bd82:	6013      	str	r3, [r2, #0]
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800bd84:	4b95      	ldr	r3, [pc, #596]	@ (800bfdc <aci_gatt_add_char+0x298>)
 800bd86:	181b      	adds	r3, r3, r0
 800bd88:	19db      	adds	r3, r3, r7
 800bd8a:	781b      	ldrb	r3, [r3, #0]
 800bd8c:	2b01      	cmp	r3, #1
 800bd8e:	d009      	beq.n	800bda4 <aci_gatt_add_char+0x60>
 800bd90:	4b92      	ldr	r3, [pc, #584]	@ (800bfdc <aci_gatt_add_char+0x298>)
 800bd92:	181b      	adds	r3, r3, r0
 800bd94:	19db      	adds	r3, r3, r7
 800bd96:	781b      	ldrb	r3, [r3, #0]
 800bd98:	2b02      	cmp	r3, #2
 800bd9a:	d101      	bne.n	800bda0 <aci_gatt_add_char+0x5c>
 800bd9c:	2313      	movs	r3, #19
 800bd9e:	e002      	b.n	800bda6 <aci_gatt_add_char+0x62>
 800bda0:	2303      	movs	r3, #3
 800bda2:	e000      	b.n	800bda6 <aci_gatt_add_char+0x62>
 800bda4:	2305      	movs	r3, #5
 800bda6:	2214      	movs	r2, #20
 800bda8:	18ba      	adds	r2, r7, r2
 800bdaa:	18d3      	adds	r3, r2, r3
 800bdac:	229a      	movs	r2, #154	@ 0x9a
 800bdae:	0052      	lsls	r2, r2, #1
 800bdb0:	18ba      	adds	r2, r7, r2
 800bdb2:	6013      	str	r3, [r2, #0]
  aci_gatt_add_char_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800bdb4:	2310      	movs	r3, #16
 800bdb6:	18fb      	adds	r3, r7, r3
 800bdb8:	2203      	movs	r2, #3
 800bdba:	2100      	movs	r1, #0
 800bdbc:	0018      	movs	r0, r3
 800bdbe:	f001 fd27 	bl	800d810 <memset>
  uint8_t index_input = 0;
 800bdc2:	2534      	movs	r5, #52	@ 0x34
 800bdc4:	35ff      	adds	r5, #255	@ 0xff
 800bdc6:	197b      	adds	r3, r7, r5
 800bdc8:	2200      	movs	r2, #0
 800bdca:	701a      	strb	r2, [r3, #0]
  cp0->Service_Handle = htob(Service_Handle, 2);
 800bdcc:	239c      	movs	r3, #156	@ 0x9c
 800bdce:	005b      	lsls	r3, r3, #1
 800bdd0:	18fa      	adds	r2, r7, r3
 800bdd2:	6813      	ldr	r3, [r2, #0]
 800bdd4:	4a80      	ldr	r2, [pc, #512]	@ (800bfd8 <aci_gatt_add_char+0x294>)
 800bdd6:	26a0      	movs	r6, #160	@ 0xa0
 800bdd8:	0076      	lsls	r6, r6, #1
 800bdda:	1992      	adds	r2, r2, r6
 800bddc:	19d2      	adds	r2, r2, r7
 800bdde:	7814      	ldrb	r4, [r2, #0]
 800bde0:	7819      	ldrb	r1, [r3, #0]
 800bde2:	2000      	movs	r0, #0
 800bde4:	4001      	ands	r1, r0
 800bde6:	1c08      	adds	r0, r1, #0
 800bde8:	1c21      	adds	r1, r4, #0
 800bdea:	4301      	orrs	r1, r0
 800bdec:	7019      	strb	r1, [r3, #0]
 800bdee:	7850      	ldrb	r0, [r2, #1]
 800bdf0:	785a      	ldrb	r2, [r3, #1]
 800bdf2:	2100      	movs	r1, #0
 800bdf4:	400a      	ands	r2, r1
 800bdf6:	1c11      	adds	r1, r2, #0
 800bdf8:	1c02      	adds	r2, r0, #0
 800bdfa:	430a      	orrs	r2, r1
 800bdfc:	705a      	strb	r2, [r3, #1]
  index_input += 2;
 800bdfe:	197b      	adds	r3, r7, r5
 800be00:	197a      	adds	r2, r7, r5
 800be02:	7812      	ldrb	r2, [r2, #0]
 800be04:	3202      	adds	r2, #2
 800be06:	701a      	strb	r2, [r3, #0]
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 800be08:	239c      	movs	r3, #156	@ 0x9c
 800be0a:	005b      	lsls	r3, r3, #1
 800be0c:	18fb      	adds	r3, r7, r3
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	4a72      	ldr	r2, [pc, #456]	@ (800bfdc <aci_gatt_add_char+0x298>)
 800be12:	1992      	adds	r2, r2, r6
 800be14:	19d2      	adds	r2, r2, r7
 800be16:	7812      	ldrb	r2, [r2, #0]
 800be18:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800be1a:	197b      	adds	r3, r7, r5
 800be1c:	197a      	adds	r2, r7, r5
 800be1e:	7812      	ldrb	r2, [r2, #0]
 800be20:	3201      	adds	r2, #1
 800be22:	701a      	strb	r2, [r3, #0]
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_UUID_Type) {
 800be24:	4b6d      	ldr	r3, [pc, #436]	@ (800bfdc <aci_gatt_add_char+0x298>)
 800be26:	199b      	adds	r3, r3, r6
 800be28:	19db      	adds	r3, r3, r7
 800be2a:	781b      	ldrb	r3, [r3, #0]
 800be2c:	2b01      	cmp	r3, #1
 800be2e:	d002      	beq.n	800be36 <aci_gatt_add_char+0xf2>
 800be30:	2b02      	cmp	r3, #2
 800be32:	d006      	beq.n	800be42 <aci_gatt_add_char+0xfe>
 800be34:	e00b      	b.n	800be4e <aci_gatt_add_char+0x10a>
      case 1: size = 2; break;
 800be36:	2340      	movs	r3, #64	@ 0x40
 800be38:	33ff      	adds	r3, #255	@ 0xff
 800be3a:	18fb      	adds	r3, r7, r3
 800be3c:	2202      	movs	r2, #2
 800be3e:	701a      	strb	r2, [r3, #0]
 800be40:	e007      	b.n	800be52 <aci_gatt_add_char+0x10e>
      case 2: size = 16; break;
 800be42:	2340      	movs	r3, #64	@ 0x40
 800be44:	33ff      	adds	r3, #255	@ 0xff
 800be46:	18fb      	adds	r3, r7, r3
 800be48:	2210      	movs	r2, #16
 800be4a:	701a      	strb	r2, [r3, #0]
 800be4c:	e001      	b.n	800be52 <aci_gatt_add_char+0x10e>
      default: return BLE_STATUS_ERROR;
 800be4e:	2347      	movs	r3, #71	@ 0x47
 800be50:	e0bd      	b.n	800bfce <aci_gatt_add_char+0x28a>
    }
    BLUENRG_memcpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 800be52:	239c      	movs	r3, #156	@ 0x9c
 800be54:	005b      	lsls	r3, r3, #1
 800be56:	18fb      	adds	r3, r7, r3
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	1cd8      	adds	r0, r3, #3
 800be5c:	2440      	movs	r4, #64	@ 0x40
 800be5e:	34ff      	adds	r4, #255	@ 0xff
 800be60:	193b      	adds	r3, r7, r4
 800be62:	781a      	ldrb	r2, [r3, #0]
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	0019      	movs	r1, r3
 800be68:	f001 fd64 	bl	800d934 <memcpy>
    index_input += size;
 800be6c:	2534      	movs	r5, #52	@ 0x34
 800be6e:	35ff      	adds	r5, #255	@ 0xff
 800be70:	197b      	adds	r3, r7, r5
 800be72:	1979      	adds	r1, r7, r5
 800be74:	193a      	adds	r2, r7, r4
 800be76:	7809      	ldrb	r1, [r1, #0]
 800be78:	7812      	ldrb	r2, [r2, #0]
 800be7a:	188a      	adds	r2, r1, r2
 800be7c:	701a      	strb	r2, [r3, #0]
    {
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 800be7e:	269a      	movs	r6, #154	@ 0x9a
 800be80:	0076      	lsls	r6, r6, #1
 800be82:	19bb      	adds	r3, r7, r6
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	4a56      	ldr	r2, [pc, #344]	@ (800bfe0 <aci_gatt_add_char+0x29c>)
 800be88:	21a0      	movs	r1, #160	@ 0xa0
 800be8a:	0049      	lsls	r1, r1, #1
 800be8c:	1852      	adds	r2, r2, r1
 800be8e:	19d2      	adds	r2, r2, r7
 800be90:	7814      	ldrb	r4, [r2, #0]
 800be92:	7819      	ldrb	r1, [r3, #0]
 800be94:	2000      	movs	r0, #0
 800be96:	4001      	ands	r1, r0
 800be98:	1c08      	adds	r0, r1, #0
 800be9a:	1c21      	adds	r1, r4, #0
 800be9c:	4301      	orrs	r1, r0
 800be9e:	7019      	strb	r1, [r3, #0]
 800bea0:	7850      	ldrb	r0, [r2, #1]
 800bea2:	785a      	ldrb	r2, [r3, #1]
 800bea4:	2100      	movs	r1, #0
 800bea6:	400a      	ands	r2, r1
 800bea8:	1c11      	adds	r1, r2, #0
 800beaa:	1c02      	adds	r2, r0, #0
 800beac:	430a      	orrs	r2, r1
 800beae:	705a      	strb	r2, [r3, #1]
    }
    index_input += 2;
 800beb0:	002c      	movs	r4, r5
 800beb2:	193b      	adds	r3, r7, r4
 800beb4:	193a      	adds	r2, r7, r4
 800beb6:	7812      	ldrb	r2, [r2, #0]
 800beb8:	3202      	adds	r2, #2
 800beba:	701a      	strb	r2, [r3, #0]
    {
      cp1->Char_Properties = htob(Char_Properties, 1);
 800bebc:	0031      	movs	r1, r6
 800bebe:	187b      	adds	r3, r7, r1
 800bec0:	681a      	ldr	r2, [r3, #0]
 800bec2:	23a8      	movs	r3, #168	@ 0xa8
 800bec4:	005b      	lsls	r3, r3, #1
 800bec6:	2008      	movs	r0, #8
 800bec8:	181b      	adds	r3, r3, r0
 800beca:	19db      	adds	r3, r3, r7
 800becc:	781b      	ldrb	r3, [r3, #0]
 800bece:	7093      	strb	r3, [r2, #2]
    }
    index_input += 1;
 800bed0:	193b      	adds	r3, r7, r4
 800bed2:	193a      	adds	r2, r7, r4
 800bed4:	7812      	ldrb	r2, [r2, #0]
 800bed6:	3201      	adds	r2, #1
 800bed8:	701a      	strb	r2, [r3, #0]
    {
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 800beda:	187b      	adds	r3, r7, r1
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	22aa      	movs	r2, #170	@ 0xaa
 800bee0:	0052      	lsls	r2, r2, #1
 800bee2:	1812      	adds	r2, r2, r0
 800bee4:	19d2      	adds	r2, r2, r7
 800bee6:	7812      	ldrb	r2, [r2, #0]
 800bee8:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800beea:	193b      	adds	r3, r7, r4
 800beec:	193a      	adds	r2, r7, r4
 800beee:	7812      	ldrb	r2, [r2, #0]
 800bef0:	3201      	adds	r2, #1
 800bef2:	701a      	strb	r2, [r3, #0]
    {
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 800bef4:	187b      	adds	r3, r7, r1
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	22ac      	movs	r2, #172	@ 0xac
 800befa:	0052      	lsls	r2, r2, #1
 800befc:	1812      	adds	r2, r2, r0
 800befe:	19d2      	adds	r2, r2, r7
 800bf00:	7812      	ldrb	r2, [r2, #0]
 800bf02:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800bf04:	193b      	adds	r3, r7, r4
 800bf06:	193a      	adds	r2, r7, r4
 800bf08:	7812      	ldrb	r2, [r2, #0]
 800bf0a:	3201      	adds	r2, #1
 800bf0c:	701a      	strb	r2, [r3, #0]
    {
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 800bf0e:	187b      	adds	r3, r7, r1
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	22ae      	movs	r2, #174	@ 0xae
 800bf14:	0052      	lsls	r2, r2, #1
 800bf16:	1812      	adds	r2, r2, r0
 800bf18:	19d2      	adds	r2, r2, r7
 800bf1a:	7812      	ldrb	r2, [r2, #0]
 800bf1c:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800bf1e:	193b      	adds	r3, r7, r4
 800bf20:	193a      	adds	r2, r7, r4
 800bf22:	7812      	ldrb	r2, [r2, #0]
 800bf24:	3201      	adds	r2, #1
 800bf26:	701a      	strb	r2, [r3, #0]
    {
      cp1->Is_Variable = htob(Is_Variable, 1);
 800bf28:	187b      	adds	r3, r7, r1
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	22b0      	movs	r2, #176	@ 0xb0
 800bf2e:	0052      	lsls	r2, r2, #1
 800bf30:	1812      	adds	r2, r2, r0
 800bf32:	19d2      	adds	r2, r2, r7
 800bf34:	7812      	ldrb	r2, [r2, #0]
 800bf36:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800bf38:	193b      	adds	r3, r7, r4
 800bf3a:	193a      	adds	r2, r7, r4
 800bf3c:	7812      	ldrb	r2, [r2, #0]
 800bf3e:	3201      	adds	r2, #1
 800bf40:	701a      	strb	r2, [r3, #0]
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800bf42:	258c      	movs	r5, #140	@ 0x8c
 800bf44:	006d      	lsls	r5, r5, #1
 800bf46:	197b      	adds	r3, r7, r5
 800bf48:	2218      	movs	r2, #24
 800bf4a:	2100      	movs	r1, #0
 800bf4c:	0018      	movs	r0, r3
 800bf4e:	f001 fc5f 	bl	800d810 <memset>
  rq.ogf = 0x3f;
 800bf52:	0029      	movs	r1, r5
 800bf54:	187b      	adds	r3, r7, r1
 800bf56:	223f      	movs	r2, #63	@ 0x3f
 800bf58:	801a      	strh	r2, [r3, #0]
  rq.ocf = 0x104;
 800bf5a:	187b      	adds	r3, r7, r1
 800bf5c:	2282      	movs	r2, #130	@ 0x82
 800bf5e:	0052      	lsls	r2, r2, #1
 800bf60:	805a      	strh	r2, [r3, #2]
  rq.cparam = cmd_buffer;
 800bf62:	187b      	adds	r3, r7, r1
 800bf64:	2214      	movs	r2, #20
 800bf66:	18ba      	adds	r2, r7, r2
 800bf68:	609a      	str	r2, [r3, #8]
  rq.clen = index_input;
 800bf6a:	193b      	adds	r3, r7, r4
 800bf6c:	781a      	ldrb	r2, [r3, #0]
 800bf6e:	187b      	adds	r3, r7, r1
 800bf70:	60da      	str	r2, [r3, #12]
  rq.rparam = &resp;
 800bf72:	187b      	adds	r3, r7, r1
 800bf74:	2210      	movs	r2, #16
 800bf76:	18ba      	adds	r2, r7, r2
 800bf78:	611a      	str	r2, [r3, #16]
  rq.rlen = sizeof(resp);
 800bf7a:	187b      	adds	r3, r7, r1
 800bf7c:	2203      	movs	r2, #3
 800bf7e:	615a      	str	r2, [r3, #20]
  if (hci_send_req(&rq, FALSE) < 0)
 800bf80:	187b      	adds	r3, r7, r1
 800bf82:	2100      	movs	r1, #0
 800bf84:	0018      	movs	r0, r3
 800bf86:	f000 fa4d 	bl	800c424 <hci_send_req>
 800bf8a:	1e03      	subs	r3, r0, #0
 800bf8c:	da01      	bge.n	800bf92 <aci_gatt_add_char+0x24e>
    return BLE_STATUS_TIMEOUT;
 800bf8e:	23ff      	movs	r3, #255	@ 0xff
 800bf90:	e01d      	b.n	800bfce <aci_gatt_add_char+0x28a>
  if (resp.Status) {
 800bf92:	4b14      	ldr	r3, [pc, #80]	@ (800bfe4 <aci_gatt_add_char+0x2a0>)
 800bf94:	22a0      	movs	r2, #160	@ 0xa0
 800bf96:	0052      	lsls	r2, r2, #1
 800bf98:	189b      	adds	r3, r3, r2
 800bf9a:	19db      	adds	r3, r3, r7
 800bf9c:	781b      	ldrb	r3, [r3, #0]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d004      	beq.n	800bfac <aci_gatt_add_char+0x268>
    return resp.Status;
 800bfa2:	4b10      	ldr	r3, [pc, #64]	@ (800bfe4 <aci_gatt_add_char+0x2a0>)
 800bfa4:	189b      	adds	r3, r3, r2
 800bfa6:	19db      	adds	r3, r3, r7
 800bfa8:	781b      	ldrb	r3, [r3, #0]
 800bfaa:	e010      	b.n	800bfce <aci_gatt_add_char+0x28a>
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
 800bfac:	4b0d      	ldr	r3, [pc, #52]	@ (800bfe4 <aci_gatt_add_char+0x2a0>)
 800bfae:	22a0      	movs	r2, #160	@ 0xa0
 800bfb0:	0052      	lsls	r2, r2, #1
 800bfb2:	189b      	adds	r3, r3, r2
 800bfb4:	19db      	adds	r3, r3, r7
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	021b      	lsls	r3, r3, #8
 800bfba:	0c1b      	lsrs	r3, r3, #16
 800bfbc:	b29a      	uxth	r2, r3
 800bfbe:	23b2      	movs	r3, #178	@ 0xb2
 800bfc0:	005b      	lsls	r3, r3, #1
 800bfc2:	2108      	movs	r1, #8
 800bfc4:	185b      	adds	r3, r3, r1
 800bfc6:	19db      	adds	r3, r3, r7
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800bfcc:	2300      	movs	r3, #0
}
 800bfce:	0018      	movs	r0, r3
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	b051      	add	sp, #324	@ 0x144
 800bfd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfd6:	46c0      	nop			@ (mov r8, r8)
 800bfd8:	fffffece 	.word	0xfffffece
 800bfdc:	fffffecd 	.word	0xfffffecd
 800bfe0:	fffffec6 	.word	0xfffffec6
 800bfe4:	fffffed0 	.word	0xfffffed0

0800bfe8 <aci_hal_write_config_data>:
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 800bfe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfea:	b0cd      	sub	sp, #308	@ 0x134
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	603a      	str	r2, [r7, #0]
 800bff0:	4b41      	ldr	r3, [pc, #260]	@ (800c0f8 <aci_hal_write_config_data+0x110>)
 800bff2:	2498      	movs	r4, #152	@ 0x98
 800bff4:	0064      	lsls	r4, r4, #1
 800bff6:	191b      	adds	r3, r3, r4
 800bff8:	19db      	adds	r3, r3, r7
 800bffa:	1c02      	adds	r2, r0, #0
 800bffc:	701a      	strb	r2, [r3, #0]
 800bffe:	4b3f      	ldr	r3, [pc, #252]	@ (800c0fc <aci_hal_write_config_data+0x114>)
 800c000:	0020      	movs	r0, r4
 800c002:	181b      	adds	r3, r3, r0
 800c004:	19db      	adds	r3, r3, r7
 800c006:	1c0a      	adds	r2, r1, #0
 800c008:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800c00a:	260c      	movs	r6, #12
 800c00c:	19bb      	adds	r3, r7, r6
 800c00e:	2596      	movs	r5, #150	@ 0x96
 800c010:	006d      	lsls	r5, r5, #1
 800c012:	197a      	adds	r2, r7, r5
 800c014:	6013      	str	r3, [r2, #0]
  tBleStatus status = 0;
 800c016:	4b3a      	ldr	r3, [pc, #232]	@ (800c100 <aci_hal_write_config_data+0x118>)
 800c018:	0001      	movs	r1, r0
 800c01a:	185b      	adds	r3, r3, r1
 800c01c:	19db      	adds	r3, r3, r7
 800c01e:	2200      	movs	r2, #0
 800c020:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800c022:	242c      	movs	r4, #44	@ 0x2c
 800c024:	34ff      	adds	r4, #255	@ 0xff
 800c026:	193b      	adds	r3, r7, r4
 800c028:	2200      	movs	r2, #0
 800c02a:	701a      	strb	r2, [r3, #0]
  cp0->Offset = htob(Offset, 1);
 800c02c:	0028      	movs	r0, r5
 800c02e:	183b      	adds	r3, r7, r0
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	4a31      	ldr	r2, [pc, #196]	@ (800c0f8 <aci_hal_write_config_data+0x110>)
 800c034:	1852      	adds	r2, r2, r1
 800c036:	19d2      	adds	r2, r2, r7
 800c038:	7812      	ldrb	r2, [r2, #0]
 800c03a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c03c:	193b      	adds	r3, r7, r4
 800c03e:	193a      	adds	r2, r7, r4
 800c040:	7812      	ldrb	r2, [r2, #0]
 800c042:	3201      	adds	r2, #1
 800c044:	701a      	strb	r2, [r3, #0]
  cp0->Length = htob(Length, 1);
 800c046:	183b      	adds	r3, r7, r0
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	4a2c      	ldr	r2, [pc, #176]	@ (800c0fc <aci_hal_write_config_data+0x114>)
 800c04c:	1852      	adds	r2, r2, r1
 800c04e:	19d2      	adds	r2, r2, r7
 800c050:	7812      	ldrb	r2, [r2, #0]
 800c052:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800c054:	193b      	adds	r3, r7, r4
 800c056:	193a      	adds	r2, r7, r4
 800c058:	7812      	ldrb	r2, [r2, #0]
 800c05a:	3201      	adds	r2, #1
 800c05c:	701a      	strb	r2, [r3, #0]
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Value, (const void *) Value, Length*sizeof(uint8_t));
 800c05e:	183b      	adds	r3, r7, r0
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	1c98      	adds	r0, r3, #2
 800c064:	4b25      	ldr	r3, [pc, #148]	@ (800c0fc <aci_hal_write_config_data+0x114>)
 800c066:	000d      	movs	r5, r1
 800c068:	185b      	adds	r3, r3, r1
 800c06a:	19db      	adds	r3, r3, r7
 800c06c:	781a      	ldrb	r2, [r3, #0]
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	0019      	movs	r1, r3
 800c072:	f001 fc5f 	bl	800d934 <memcpy>
    index_input += Length*sizeof(uint8_t);
 800c076:	193b      	adds	r3, r7, r4
 800c078:	1939      	adds	r1, r7, r4
 800c07a:	4a20      	ldr	r2, [pc, #128]	@ (800c0fc <aci_hal_write_config_data+0x114>)
 800c07c:	1952      	adds	r2, r2, r5
 800c07e:	19d2      	adds	r2, r2, r7
 800c080:	7809      	ldrb	r1, [r1, #0]
 800c082:	7812      	ldrb	r2, [r2, #0]
 800c084:	188a      	adds	r2, r1, r2
 800c086:	701a      	strb	r2, [r3, #0]
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800c088:	2588      	movs	r5, #136	@ 0x88
 800c08a:	006d      	lsls	r5, r5, #1
 800c08c:	197b      	adds	r3, r7, r5
 800c08e:	2218      	movs	r2, #24
 800c090:	2100      	movs	r1, #0
 800c092:	0018      	movs	r0, r3
 800c094:	f001 fbbc 	bl	800d810 <memset>
  rq.ogf = 0x3f;
 800c098:	0029      	movs	r1, r5
 800c09a:	187b      	adds	r3, r7, r1
 800c09c:	223f      	movs	r2, #63	@ 0x3f
 800c09e:	801a      	strh	r2, [r3, #0]
  rq.ocf = 0x00c;
 800c0a0:	187b      	adds	r3, r7, r1
 800c0a2:	220c      	movs	r2, #12
 800c0a4:	805a      	strh	r2, [r3, #2]
  rq.cparam = cmd_buffer;
 800c0a6:	187b      	adds	r3, r7, r1
 800c0a8:	19ba      	adds	r2, r7, r6
 800c0aa:	609a      	str	r2, [r3, #8]
  rq.clen = index_input;
 800c0ac:	193b      	adds	r3, r7, r4
 800c0ae:	781a      	ldrb	r2, [r3, #0]
 800c0b0:	187b      	adds	r3, r7, r1
 800c0b2:	60da      	str	r2, [r3, #12]
  rq.rparam = &status;
 800c0b4:	187b      	adds	r3, r7, r1
 800c0b6:	220b      	movs	r2, #11
 800c0b8:	18ba      	adds	r2, r7, r2
 800c0ba:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 800c0bc:	187b      	adds	r3, r7, r1
 800c0be:	2201      	movs	r2, #1
 800c0c0:	615a      	str	r2, [r3, #20]
  if (hci_send_req(&rq, FALSE) < 0)
 800c0c2:	187b      	adds	r3, r7, r1
 800c0c4:	2100      	movs	r1, #0
 800c0c6:	0018      	movs	r0, r3
 800c0c8:	f000 f9ac 	bl	800c424 <hci_send_req>
 800c0cc:	1e03      	subs	r3, r0, #0
 800c0ce:	da01      	bge.n	800c0d4 <aci_hal_write_config_data+0xec>
    return BLE_STATUS_TIMEOUT;
 800c0d0:	23ff      	movs	r3, #255	@ 0xff
 800c0d2:	e00d      	b.n	800c0f0 <aci_hal_write_config_data+0x108>
  if (status) {
 800c0d4:	4b0a      	ldr	r3, [pc, #40]	@ (800c100 <aci_hal_write_config_data+0x118>)
 800c0d6:	2298      	movs	r2, #152	@ 0x98
 800c0d8:	0052      	lsls	r2, r2, #1
 800c0da:	189b      	adds	r3, r3, r2
 800c0dc:	19db      	adds	r3, r3, r7
 800c0de:	781b      	ldrb	r3, [r3, #0]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d004      	beq.n	800c0ee <aci_hal_write_config_data+0x106>
    return status;
 800c0e4:	4b06      	ldr	r3, [pc, #24]	@ (800c100 <aci_hal_write_config_data+0x118>)
 800c0e6:	189b      	adds	r3, r3, r2
 800c0e8:	19db      	adds	r3, r3, r7
 800c0ea:	781b      	ldrb	r3, [r3, #0]
 800c0ec:	e000      	b.n	800c0f0 <aci_hal_write_config_data+0x108>
  }
  return BLE_STATUS_SUCCESS;
 800c0ee:	2300      	movs	r3, #0
}
 800c0f0:	0018      	movs	r0, r3
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	b04d      	add	sp, #308	@ 0x134
 800c0f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0f8:	fffffed7 	.word	0xfffffed7
 800c0fc:	fffffed6 	.word	0xfffffed6
 800c100:	fffffedb 	.word	0xfffffedb

0800c104 <aci_hal_set_tx_power_level>:
  BLUENRG_memcpy((void *) Data, (const void *) resp.Data, *Data_Length*sizeof(uint8_t));
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 800c104:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c106:	b0cd      	sub	sp, #308	@ 0x134
 800c108:	af00      	add	r7, sp, #0
 800c10a:	0002      	movs	r2, r0
 800c10c:	4b36      	ldr	r3, [pc, #216]	@ (800c1e8 <aci_hal_set_tx_power_level+0xe4>)
 800c10e:	2098      	movs	r0, #152	@ 0x98
 800c110:	0040      	lsls	r0, r0, #1
 800c112:	181b      	adds	r3, r3, r0
 800c114:	19db      	adds	r3, r3, r7
 800c116:	701a      	strb	r2, [r3, #0]
 800c118:	4b34      	ldr	r3, [pc, #208]	@ (800c1ec <aci_hal_set_tx_power_level+0xe8>)
 800c11a:	181b      	adds	r3, r3, r0
 800c11c:	19db      	adds	r3, r3, r7
 800c11e:	1c0a      	adds	r2, r1, #0
 800c120:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800c122:	260c      	movs	r6, #12
 800c124:	19bb      	adds	r3, r7, r6
 800c126:	2496      	movs	r4, #150	@ 0x96
 800c128:	0064      	lsls	r4, r4, #1
 800c12a:	193a      	adds	r2, r7, r4
 800c12c:	6013      	str	r3, [r2, #0]
  tBleStatus status = 0;
 800c12e:	4b30      	ldr	r3, [pc, #192]	@ (800c1f0 <aci_hal_set_tx_power_level+0xec>)
 800c130:	0001      	movs	r1, r0
 800c132:	185b      	adds	r3, r3, r1
 800c134:	19db      	adds	r3, r3, r7
 800c136:	2200      	movs	r2, #0
 800c138:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800c13a:	252c      	movs	r5, #44	@ 0x2c
 800c13c:	35ff      	adds	r5, #255	@ 0xff
 800c13e:	197b      	adds	r3, r7, r5
 800c140:	2200      	movs	r2, #0
 800c142:	701a      	strb	r2, [r3, #0]
  cp0->En_High_Power = htob(En_High_Power, 1);
 800c144:	0020      	movs	r0, r4
 800c146:	183b      	adds	r3, r7, r0
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	4a27      	ldr	r2, [pc, #156]	@ (800c1e8 <aci_hal_set_tx_power_level+0xe4>)
 800c14c:	1852      	adds	r2, r2, r1
 800c14e:	19d2      	adds	r2, r2, r7
 800c150:	7812      	ldrb	r2, [r2, #0]
 800c152:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c154:	197b      	adds	r3, r7, r5
 800c156:	197a      	adds	r2, r7, r5
 800c158:	7812      	ldrb	r2, [r2, #0]
 800c15a:	3201      	adds	r2, #1
 800c15c:	701a      	strb	r2, [r3, #0]
  cp0->PA_Level = htob(PA_Level, 1);
 800c15e:	183b      	adds	r3, r7, r0
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	4a22      	ldr	r2, [pc, #136]	@ (800c1ec <aci_hal_set_tx_power_level+0xe8>)
 800c164:	1852      	adds	r2, r2, r1
 800c166:	19d2      	adds	r2, r2, r7
 800c168:	7812      	ldrb	r2, [r2, #0]
 800c16a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800c16c:	197b      	adds	r3, r7, r5
 800c16e:	197a      	adds	r2, r7, r5
 800c170:	7812      	ldrb	r2, [r2, #0]
 800c172:	3201      	adds	r2, #1
 800c174:	701a      	strb	r2, [r3, #0]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800c176:	2488      	movs	r4, #136	@ 0x88
 800c178:	0064      	lsls	r4, r4, #1
 800c17a:	193b      	adds	r3, r7, r4
 800c17c:	2218      	movs	r2, #24
 800c17e:	2100      	movs	r1, #0
 800c180:	0018      	movs	r0, r3
 800c182:	f001 fb45 	bl	800d810 <memset>
  rq.ogf = 0x3f;
 800c186:	0021      	movs	r1, r4
 800c188:	187b      	adds	r3, r7, r1
 800c18a:	223f      	movs	r2, #63	@ 0x3f
 800c18c:	801a      	strh	r2, [r3, #0]
  rq.ocf = 0x00f;
 800c18e:	187b      	adds	r3, r7, r1
 800c190:	220f      	movs	r2, #15
 800c192:	805a      	strh	r2, [r3, #2]
  rq.cparam = cmd_buffer;
 800c194:	187b      	adds	r3, r7, r1
 800c196:	19ba      	adds	r2, r7, r6
 800c198:	609a      	str	r2, [r3, #8]
  rq.clen = index_input;
 800c19a:	197b      	adds	r3, r7, r5
 800c19c:	781a      	ldrb	r2, [r3, #0]
 800c19e:	187b      	adds	r3, r7, r1
 800c1a0:	60da      	str	r2, [r3, #12]
  rq.rparam = &status;
 800c1a2:	187b      	adds	r3, r7, r1
 800c1a4:	220b      	movs	r2, #11
 800c1a6:	18ba      	adds	r2, r7, r2
 800c1a8:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 800c1aa:	187b      	adds	r3, r7, r1
 800c1ac:	2201      	movs	r2, #1
 800c1ae:	615a      	str	r2, [r3, #20]
  if (hci_send_req(&rq, FALSE) < 0)
 800c1b0:	187b      	adds	r3, r7, r1
 800c1b2:	2100      	movs	r1, #0
 800c1b4:	0018      	movs	r0, r3
 800c1b6:	f000 f935 	bl	800c424 <hci_send_req>
 800c1ba:	1e03      	subs	r3, r0, #0
 800c1bc:	da01      	bge.n	800c1c2 <aci_hal_set_tx_power_level+0xbe>
    return BLE_STATUS_TIMEOUT;
 800c1be:	23ff      	movs	r3, #255	@ 0xff
 800c1c0:	e00d      	b.n	800c1de <aci_hal_set_tx_power_level+0xda>
  if (status) {
 800c1c2:	4b0b      	ldr	r3, [pc, #44]	@ (800c1f0 <aci_hal_set_tx_power_level+0xec>)
 800c1c4:	2298      	movs	r2, #152	@ 0x98
 800c1c6:	0052      	lsls	r2, r2, #1
 800c1c8:	189b      	adds	r3, r3, r2
 800c1ca:	19db      	adds	r3, r3, r7
 800c1cc:	781b      	ldrb	r3, [r3, #0]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d004      	beq.n	800c1dc <aci_hal_set_tx_power_level+0xd8>
    return status;
 800c1d2:	4b07      	ldr	r3, [pc, #28]	@ (800c1f0 <aci_hal_set_tx_power_level+0xec>)
 800c1d4:	189b      	adds	r3, r3, r2
 800c1d6:	19db      	adds	r3, r3, r7
 800c1d8:	781b      	ldrb	r3, [r3, #0]
 800c1da:	e000      	b.n	800c1de <aci_hal_set_tx_power_level+0xda>
  }
  return BLE_STATUS_SUCCESS;
 800c1dc:	2300      	movs	r3, #0
}
 800c1de:	0018      	movs	r0, r3
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	b04d      	add	sp, #308	@ 0x134
 800c1e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1e6:	46c0      	nop			@ (mov r8, r8)
 800c1e8:	fffffed7 	.word	0xfffffed7
 800c1ec:	fffffed6 	.word	0xfffffed6
 800c1f0:	fffffedb 	.word	0xfffffedb

0800c1f4 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b084      	sub	sp, #16
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	3308      	adds	r3, #8
 800c200:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	781b      	ldrb	r3, [r3, #0]
 800c206:	2b04      	cmp	r3, #4
 800c208:	d001      	beq.n	800c20e <verify_packet+0x1a>
    return 1; /* Incorrect type */
 800c20a:	2301      	movs	r3, #1
 800c20c:	e00c      	b.n	800c228 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	3302      	adds	r3, #2
 800c212:	781b      	ldrb	r3, [r3, #0]
 800c214:	0019      	movs	r1, r3
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2288      	movs	r2, #136	@ 0x88
 800c21a:	5c9b      	ldrb	r3, [r3, r2]
 800c21c:	3b03      	subs	r3, #3
 800c21e:	4299      	cmp	r1, r3
 800c220:	d001      	beq.n	800c226 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 800c222:	2302      	movs	r3, #2
 800c224:	e000      	b.n	800c228 <verify_packet+0x34>
  
  return 0;      
 800c226:	2300      	movs	r3, #0
}
 800c228:	0018      	movs	r0, r3
 800c22a:	46bd      	mov	sp, r7
 800c22c:	b004      	add	sp, #16
 800c22e:	bd80      	pop	{r7, pc}

0800c230 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 800c230:	b5b0      	push	{r4, r5, r7, lr}
 800c232:	b0a6      	sub	sp, #152	@ 0x98
 800c234:	af00      	add	r7, sp, #0
 800c236:	0004      	movs	r4, r0
 800c238:	0008      	movs	r0, r1
 800c23a:	0011      	movs	r1, r2
 800c23c:	607b      	str	r3, [r7, #4]
 800c23e:	250e      	movs	r5, #14
 800c240:	197b      	adds	r3, r7, r5
 800c242:	1c22      	adds	r2, r4, #0
 800c244:	801a      	strh	r2, [r3, #0]
 800c246:	240c      	movs	r4, #12
 800c248:	193b      	adds	r3, r7, r4
 800c24a:	1c02      	adds	r2, r0, #0
 800c24c:	801a      	strh	r2, [r3, #0]
 800c24e:	200b      	movs	r0, #11
 800c250:	183b      	adds	r3, r7, r0
 800c252:	1c0a      	adds	r2, r1, #0
 800c254:	701a      	strb	r2, [r3, #0]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800c256:	193b      	adds	r3, r7, r4
 800c258:	2200      	movs	r2, #0
 800c25a:	5e9b      	ldrsh	r3, [r3, r2]
 800c25c:	059b      	lsls	r3, r3, #22
 800c25e:	0d9b      	lsrs	r3, r3, #22
 800c260:	b21a      	sxth	r2, r3
 800c262:	197b      	adds	r3, r7, r5
 800c264:	2100      	movs	r1, #0
 800c266:	5e5b      	ldrsh	r3, [r3, r1]
 800c268:	029b      	lsls	r3, r3, #10
 800c26a:	b21b      	sxth	r3, r3
 800c26c:	4313      	orrs	r3, r2
 800c26e:	b21b      	sxth	r3, r3
 800c270:	b29a      	uxth	r2, r3
 800c272:	2114      	movs	r1, #20
 800c274:	187b      	adds	r3, r7, r1
 800c276:	801a      	strh	r2, [r3, #0]
  hc.plen = plen;
 800c278:	187b      	adds	r3, r7, r1
 800c27a:	0004      	movs	r4, r0
 800c27c:	183a      	adds	r2, r7, r0
 800c27e:	7812      	ldrb	r2, [r2, #0]
 800c280:	709a      	strb	r2, [r3, #2]

  payload[0] = HCI_COMMAND_PKT;
 800c282:	2518      	movs	r5, #24
 800c284:	197b      	adds	r3, r7, r5
 800c286:	2201      	movs	r2, #1
 800c288:	701a      	strb	r2, [r3, #0]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800c28a:	197b      	adds	r3, r7, r5
 800c28c:	3301      	adds	r3, #1
 800c28e:	187a      	adds	r2, r7, r1
 800c290:	0018      	movs	r0, r3
 800c292:	0011      	movs	r1, r2
 800c294:	2303      	movs	r3, #3
 800c296:	001a      	movs	r2, r3
 800c298:	f001 fb4c 	bl	800d934 <memcpy>
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800c29c:	197b      	adds	r3, r7, r5
 800c29e:	3304      	adds	r3, #4
 800c2a0:	193a      	adds	r2, r7, r4
 800c2a2:	7812      	ldrb	r2, [r2, #0]
 800c2a4:	6879      	ldr	r1, [r7, #4]
 800c2a6:	0018      	movs	r0, r3
 800c2a8:	f001 fb44 	bl	800d934 <memcpy>
  
  if (hciContext.io.Send)
 800c2ac:	4b08      	ldr	r3, [pc, #32]	@ (800c2d0 <send_cmd+0xa0>)
 800c2ae:	691b      	ldr	r3, [r3, #16]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d009      	beq.n	800c2c8 <send_cmd+0x98>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 800c2b4:	4b06      	ldr	r3, [pc, #24]	@ (800c2d0 <send_cmd+0xa0>)
 800c2b6:	691b      	ldr	r3, [r3, #16]
 800c2b8:	193a      	adds	r2, r7, r4
 800c2ba:	7812      	ldrb	r2, [r2, #0]
 800c2bc:	b292      	uxth	r2, r2
 800c2be:	3204      	adds	r2, #4
 800c2c0:	b291      	uxth	r1, r2
 800c2c2:	197a      	adds	r2, r7, r5
 800c2c4:	0010      	movs	r0, r2
 800c2c6:	4798      	blx	r3
  }
}
 800c2c8:	46c0      	nop			@ (mov r8, r8)
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	b026      	add	sp, #152	@ 0x98
 800c2ce:	bdb0      	pop	{r4, r5, r7, pc}
 800c2d0:	20000bd4 	.word	0x20000bd4

0800c2d4 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b084      	sub	sp, #16
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
 800c2dc:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 800c2de:	e00c      	b.n	800c2fa <move_list+0x26>
  {
    list_remove_tail(src_list, &tmp_node);
 800c2e0:	230c      	movs	r3, #12
 800c2e2:	18fa      	adds	r2, r7, r3
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	0011      	movs	r1, r2
 800c2e8:	0018      	movs	r0, r3
 800c2ea:	f000 fae3 	bl	800c8b4 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 800c2ee:	68fa      	ldr	r2, [r7, #12]
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	0011      	movs	r1, r2
 800c2f4:	0018      	movs	r0, r3
 800c2f6:	f000 fa4f 	bl	800c798 <list_insert_head>
  while (!list_is_empty(src_list))
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	0018      	movs	r0, r3
 800c2fe:	f000 fa25 	bl	800c74c <list_is_empty>
 800c302:	1e03      	subs	r3, r0, #0
 800c304:	d0ec      	beq.n	800c2e0 <move_list+0xc>
  }
}
 800c306:	46c0      	nop			@ (mov r8, r8)
 800c308:	46c0      	nop			@ (mov r8, r8)
 800c30a:	46bd      	mov	sp, r7
 800c30c:	b004      	add	sp, #16
 800c30e:	bd80      	pop	{r7, pc}

0800c310 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b082      	sub	sp, #8
 800c314:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800c316:	e00b      	b.n	800c330 <free_event_list+0x20>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800c318:	1d3a      	adds	r2, r7, #4
 800c31a:	4b0b      	ldr	r3, [pc, #44]	@ (800c348 <free_event_list+0x38>)
 800c31c:	0011      	movs	r1, r2
 800c31e:	0018      	movs	r0, r3
 800c320:	f000 faa1 	bl	800c866 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800c324:	687a      	ldr	r2, [r7, #4]
 800c326:	4b09      	ldr	r3, [pc, #36]	@ (800c34c <free_event_list+0x3c>)
 800c328:	0011      	movs	r1, r2
 800c32a:	0018      	movs	r0, r3
 800c32c:	f000 fa58 	bl	800c7e0 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800c330:	4b06      	ldr	r3, [pc, #24]	@ (800c34c <free_event_list+0x3c>)
 800c332:	0018      	movs	r0, r3
 800c334:	f000 fae5 	bl	800c902 <list_get_size>
 800c338:	0003      	movs	r3, r0
 800c33a:	2b04      	cmp	r3, #4
 800c33c:	ddec      	ble.n	800c318 <free_event_list+0x8>
  }
}
 800c33e:	46c0      	nop			@ (mov r8, r8)
 800c340:	46c0      	nop			@ (mov r8, r8)
 800c342:	46bd      	mov	sp, r7
 800c344:	b002      	add	sp, #8
 800c346:	bd80      	pop	{r7, pc}
 800c348:	20000654 	.word	0x20000654
 800c34c:	2000064c 	.word	0x2000064c

0800c350 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800c350:	b590      	push	{r4, r7, lr}
 800c352:	b085      	sub	sp, #20
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
 800c358:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d002      	beq.n	800c366 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 800c360:	4b1d      	ldr	r3, [pc, #116]	@ (800c3d8 <hci_init+0x88>)
 800c362:	687a      	ldr	r2, [r7, #4]
 800c364:	61da      	str	r2, [r3, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800c366:	4b1d      	ldr	r3, [pc, #116]	@ (800c3dc <hci_init+0x8c>)
 800c368:	0018      	movs	r0, r3
 800c36a:	f000 f9e1 	bl	800c730 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800c36e:	4b1c      	ldr	r3, [pc, #112]	@ (800c3e0 <hci_init+0x90>)
 800c370:	0018      	movs	r0, r3
 800c372:	f000 f9dd 	bl	800c730 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800c376:	f7f7 f82f 	bl	80033d8 <hci_tl_lowlevel_init>

  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800c37a:	230f      	movs	r3, #15
 800c37c:	18fb      	adds	r3, r7, r3
 800c37e:	2200      	movs	r2, #0
 800c380:	701a      	strb	r2, [r3, #0]
 800c382:	e010      	b.n	800c3a6 <hci_init+0x56>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800c384:	240f      	movs	r4, #15
 800c386:	193b      	adds	r3, r7, r4
 800c388:	781b      	ldrb	r3, [r3, #0]
 800c38a:	228c      	movs	r2, #140	@ 0x8c
 800c38c:	435a      	muls	r2, r3
 800c38e:	4b15      	ldr	r3, [pc, #84]	@ (800c3e4 <hci_init+0x94>)
 800c390:	18d2      	adds	r2, r2, r3
 800c392:	4b12      	ldr	r3, [pc, #72]	@ (800c3dc <hci_init+0x8c>)
 800c394:	0011      	movs	r1, r2
 800c396:	0018      	movs	r0, r3
 800c398:	f000 fa22 	bl	800c7e0 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800c39c:	193b      	adds	r3, r7, r4
 800c39e:	781a      	ldrb	r2, [r3, #0]
 800c3a0:	193b      	adds	r3, r7, r4
 800c3a2:	3201      	adds	r2, #1
 800c3a4:	701a      	strb	r2, [r3, #0]
 800c3a6:	230f      	movs	r3, #15
 800c3a8:	18fb      	adds	r3, r7, r3
 800c3aa:	781b      	ldrb	r3, [r3, #0]
 800c3ac:	2b09      	cmp	r3, #9
 800c3ae:	d9e9      	bls.n	800c384 <hci_init+0x34>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800c3b0:	4b09      	ldr	r3, [pc, #36]	@ (800c3d8 <hci_init+0x88>)
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d003      	beq.n	800c3c0 <hci_init+0x70>
 800c3b8:	4b07      	ldr	r3, [pc, #28]	@ (800c3d8 <hci_init+0x88>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	2000      	movs	r0, #0
 800c3be:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 800c3c0:	4b05      	ldr	r3, [pc, #20]	@ (800c3d8 <hci_init+0x88>)
 800c3c2:	689b      	ldr	r3, [r3, #8]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d002      	beq.n	800c3ce <hci_init+0x7e>
 800c3c8:	4b03      	ldr	r3, [pc, #12]	@ (800c3d8 <hci_init+0x88>)
 800c3ca:	689b      	ldr	r3, [r3, #8]
 800c3cc:	4798      	blx	r3
}
 800c3ce:	46c0      	nop			@ (mov r8, r8)
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	b005      	add	sp, #20
 800c3d4:	bd90      	pop	{r4, r7, pc}
 800c3d6:	46c0      	nop			@ (mov r8, r8)
 800c3d8:	20000bd4 	.word	0x20000bd4
 800c3dc:	2000064c 	.word	0x2000064c
 800c3e0:	20000654 	.word	0x20000654
 800c3e4:	2000065c 	.word	0x2000065c

0800c3e8 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b082      	sub	sp, #8
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681a      	ldr	r2, [r3, #0]
 800c3f4:	4b0a      	ldr	r3, [pc, #40]	@ (800c420 <hci_register_io_bus+0x38>)
 800c3f6:	601a      	str	r2, [r3, #0]
  hciContext.io.Receive = fops->Receive;  
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	68da      	ldr	r2, [r3, #12]
 800c3fc:	4b08      	ldr	r3, [pc, #32]	@ (800c420 <hci_register_io_bus+0x38>)
 800c3fe:	60da      	str	r2, [r3, #12]
  hciContext.io.Send    = fops->Send;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	691a      	ldr	r2, [r3, #16]
 800c404:	4b06      	ldr	r3, [pc, #24]	@ (800c420 <hci_register_io_bus+0x38>)
 800c406:	611a      	str	r2, [r3, #16]
  hciContext.io.GetTick = fops->GetTick;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	699a      	ldr	r2, [r3, #24]
 800c40c:	4b04      	ldr	r3, [pc, #16]	@ (800c420 <hci_register_io_bus+0x38>)
 800c40e:	619a      	str	r2, [r3, #24]
  hciContext.io.Reset   = fops->Reset;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	689a      	ldr	r2, [r3, #8]
 800c414:	4b02      	ldr	r3, [pc, #8]	@ (800c420 <hci_register_io_bus+0x38>)
 800c416:	609a      	str	r2, [r3, #8]
}
 800c418:	46c0      	nop			@ (mov r8, r8)
 800c41a:	46bd      	mov	sp, r7
 800c41c:	b002      	add	sp, #8
 800c41e:	bd80      	pop	{r7, pc}
 800c420:	20000bd4 	.word	0x20000bd4

0800c424 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b08e      	sub	sp, #56	@ 0x38
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
 800c42c:	000a      	movs	r2, r1
 800c42e:	1cfb      	adds	r3, r7, #3
 800c430:	701a      	strb	r2, [r3, #0]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	885b      	ldrh	r3, [r3, #2]
 800c436:	b21b      	sxth	r3, r3
 800c438:	059b      	lsls	r3, r3, #22
 800c43a:	0d9b      	lsrs	r3, r3, #22
 800c43c:	b21a      	sxth	r2, r3
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	881b      	ldrh	r3, [r3, #0]
 800c442:	b21b      	sxth	r3, r3
 800c444:	029b      	lsls	r3, r3, #10
 800c446:	b21b      	sxth	r3, r3
 800c448:	4313      	orrs	r3, r2
 800c44a:	b21a      	sxth	r2, r3
 800c44c:	2336      	movs	r3, #54	@ 0x36
 800c44e:	18fb      	adds	r3, r7, r3
 800c450:	801a      	strh	r2, [r3, #0]
  hci_event_pckt *event_pckt;
  hci_spi_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800c452:	2300      	movs	r3, #0
 800c454:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800c456:	2308      	movs	r3, #8
 800c458:	18fb      	adds	r3, r7, r3
 800c45a:	0018      	movs	r0, r3
 800c45c:	f000 f968 	bl	800c730 <list_init_head>

  free_event_list();
 800c460:	f7ff ff56 	bl	800c310 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	8818      	ldrh	r0, [r3, #0]
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	8859      	ldrh	r1, [r3, #2]
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	68db      	ldr	r3, [r3, #12]
 800c470:	b2da      	uxtb	r2, r3
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	689b      	ldr	r3, [r3, #8]
 800c476:	f7ff fedb 	bl	800c230 <send_cmd>
  
  if (async)
 800c47a:	1cfb      	adds	r3, r7, #3
 800c47c:	781b      	ldrb	r3, [r3, #0]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d001      	beq.n	800c486 <hci_send_req+0x62>
  {
    return 0;
 800c482:	2300      	movs	r3, #0
 800c484:	e0f5      	b.n	800c672 <hci_send_req+0x24e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 800c486:	f7f8 fdfd 	bl	8005084 <HAL_GetTick>
 800c48a:	0003      	movs	r3, r0
 800c48c:	633b      	str	r3, [r7, #48]	@ 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800c48e:	f7f8 fdf9 	bl	8005084 <HAL_GetTick>
 800c492:	0002      	movs	r2, r0
 800c494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c496:	1ad2      	subs	r2, r2, r3
 800c498:	23fa      	movs	r3, #250	@ 0xfa
 800c49a:	009b      	lsls	r3, r3, #2
 800c49c:	429a      	cmp	r2, r3
 800c49e:	d900      	bls.n	800c4a2 <hci_send_req+0x7e>
 800c4a0:	e0bf      	b.n	800c622 <hci_send_req+0x1fe>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800c4a2:	4b76      	ldr	r3, [pc, #472]	@ (800c67c <hci_send_req+0x258>)
 800c4a4:	0018      	movs	r0, r3
 800c4a6:	f000 f951 	bl	800c74c <list_is_empty>
 800c4aa:	1e03      	subs	r3, r0, #0
 800c4ac:	d000      	beq.n	800c4b0 <hci_send_req+0x8c>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800c4ae:	e7ee      	b.n	800c48e <hci_send_req+0x6a>
      {
        break;
 800c4b0:	46c0      	nop			@ (mov r8, r8)
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800c4b2:	2310      	movs	r3, #16
 800c4b4:	18fa      	adds	r2, r7, r3
 800c4b6:	4b71      	ldr	r3, [pc, #452]	@ (800c67c <hci_send_req+0x258>)
 800c4b8:	0011      	movs	r1, r2
 800c4ba:	0018      	movs	r0, r3
 800c4bc:	f000 f9d3 	bl	800c866 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800c4c0:	693b      	ldr	r3, [r7, #16]
 800c4c2:	3308      	adds	r3, #8
 800c4c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800c4c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4c8:	781b      	ldrb	r3, [r3, #0]
 800c4ca:	2b04      	cmp	r3, #4
 800c4cc:	d000      	beq.n	800c4d0 <hci_send_req+0xac>
 800c4ce:	e089      	b.n	800c5e4 <hci_send_req+0x1c0>
    {
      event_pckt = (void *)(hci_hdr->data);
 800c4d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4d2:	3301      	adds	r3, #1
 800c4d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	3308      	adds	r3, #8
 800c4da:	3303      	adds	r3, #3
 800c4dc:	627b      	str	r3, [r7, #36]	@ 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	2288      	movs	r2, #136	@ 0x88
 800c4e2:	5c9b      	ldrb	r3, [r3, r2]
 800c4e4:	3b03      	subs	r3, #3
 800c4e6:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800c4e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4ea:	781b      	ldrb	r3, [r3, #0]
 800c4ec:	2b3e      	cmp	r3, #62	@ 0x3e
 800c4ee:	d056      	beq.n	800c59e <hci_send_req+0x17a>
 800c4f0:	dd00      	ble.n	800c4f4 <hci_send_req+0xd0>
 800c4f2:	e072      	b.n	800c5da <hci_send_req+0x1b6>
 800c4f4:	2b10      	cmp	r3, #16
 800c4f6:	d100      	bne.n	800c4fa <hci_send_req+0xd6>
 800c4f8:	e095      	b.n	800c626 <hci_send_req+0x202>
 800c4fa:	dd00      	ble.n	800c4fe <hci_send_req+0xda>
 800c4fc:	e06d      	b.n	800c5da <hci_send_req+0x1b6>
 800c4fe:	2b0e      	cmp	r3, #14
 800c500:	d029      	beq.n	800c556 <hci_send_req+0x132>
 800c502:	2b0f      	cmp	r3, #15
 800c504:	d169      	bne.n	800c5da <hci_send_req+0x1b6>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 800c506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c508:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 800c50a:	69bb      	ldr	r3, [r7, #24]
 800c50c:	789a      	ldrb	r2, [r3, #2]
 800c50e:	78db      	ldrb	r3, [r3, #3]
 800c510:	021b      	lsls	r3, r3, #8
 800c512:	4313      	orrs	r3, r2
 800c514:	b29b      	uxth	r3, r3
 800c516:	2236      	movs	r2, #54	@ 0x36
 800c518:	18ba      	adds	r2, r7, r2
 800c51a:	8812      	ldrh	r2, [r2, #0]
 800c51c:	429a      	cmp	r2, r3
 800c51e:	d000      	beq.n	800c522 <hci_send_req+0xfe>
 800c520:	e083      	b.n	800c62a <hci_send_req+0x206>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	685b      	ldr	r3, [r3, #4]
 800c526:	2b0f      	cmp	r3, #15
 800c528:	d004      	beq.n	800c534 <hci_send_req+0x110>
          if (cs->status) {
 800c52a:	69bb      	ldr	r3, [r7, #24]
 800c52c:	781b      	ldrb	r3, [r3, #0]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d055      	beq.n	800c5de <hci_send_req+0x1ba>
            goto failed;
 800c532:	e07d      	b.n	800c630 <hci_send_req+0x20c>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	695a      	ldr	r2, [r3, #20]
 800c538:	6a3b      	ldr	r3, [r7, #32]
 800c53a:	4293      	cmp	r3, r2
 800c53c:	d900      	bls.n	800c540 <hci_send_req+0x11c>
 800c53e:	0013      	movs	r3, r2
 800c540:	687a      	ldr	r2, [r7, #4]
 800c542:	6153      	str	r3, [r2, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	6918      	ldr	r0, [r3, #16]
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	695a      	ldr	r2, [r3, #20]
 800c54c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c54e:	0019      	movs	r1, r3
 800c550:	f001 f9f0 	bl	800d934 <memcpy>
        goto done;
 800c554:	e07f      	b.n	800c656 <hci_send_req+0x232>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 800c556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c558:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 800c55a:	697b      	ldr	r3, [r7, #20]
 800c55c:	785a      	ldrb	r2, [r3, #1]
 800c55e:	789b      	ldrb	r3, [r3, #2]
 800c560:	021b      	lsls	r3, r3, #8
 800c562:	4313      	orrs	r3, r2
 800c564:	b29b      	uxth	r3, r3
 800c566:	2236      	movs	r2, #54	@ 0x36
 800c568:	18ba      	adds	r2, r7, r2
 800c56a:	8812      	ldrh	r2, [r2, #0]
 800c56c:	429a      	cmp	r2, r3
 800c56e:	d15e      	bne.n	800c62e <hci_send_req+0x20a>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 800c570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c572:	3303      	adds	r3, #3
 800c574:	627b      	str	r3, [r7, #36]	@ 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 800c576:	6a3b      	ldr	r3, [r7, #32]
 800c578:	3b03      	subs	r3, #3
 800c57a:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	695a      	ldr	r2, [r3, #20]
 800c580:	6a3b      	ldr	r3, [r7, #32]
 800c582:	4293      	cmp	r3, r2
 800c584:	d900      	bls.n	800c588 <hci_send_req+0x164>
 800c586:	0013      	movs	r3, r2
 800c588:	687a      	ldr	r2, [r7, #4]
 800c58a:	6153      	str	r3, [r2, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	6918      	ldr	r0, [r3, #16]
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	695a      	ldr	r2, [r3, #20]
 800c594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c596:	0019      	movs	r1, r3
 800c598:	f001 f9cc 	bl	800d934 <memcpy>
        goto done;
 800c59c:	e05b      	b.n	800c656 <hci_send_req+0x232>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 800c59e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5a0:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 800c5a2:	69fb      	ldr	r3, [r7, #28]
 800c5a4:	781b      	ldrb	r3, [r3, #0]
 800c5a6:	001a      	movs	r2, r3
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	685b      	ldr	r3, [r3, #4]
 800c5ac:	429a      	cmp	r2, r3
 800c5ae:	d118      	bne.n	800c5e2 <hci_send_req+0x1be>
          break;
      
        len -= 1;
 800c5b0:	6a3b      	ldr	r3, [r7, #32]
 800c5b2:	3b01      	subs	r3, #1
 800c5b4:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	695a      	ldr	r2, [r3, #20]
 800c5ba:	6a3b      	ldr	r3, [r7, #32]
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	d900      	bls.n	800c5c2 <hci_send_req+0x19e>
 800c5c0:	0013      	movs	r3, r2
 800c5c2:	687a      	ldr	r2, [r7, #4]
 800c5c4:	6153      	str	r3, [r2, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	6918      	ldr	r0, [r3, #16]
 800c5ca:	69fb      	ldr	r3, [r7, #28]
 800c5cc:	1c59      	adds	r1, r3, #1
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	695b      	ldr	r3, [r3, #20]
 800c5d2:	001a      	movs	r2, r3
 800c5d4:	f001 f9ae 	bl	800d934 <memcpy>
        goto done;
 800c5d8:	e03d      	b.n	800c656 <hci_send_req+0x232>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 800c5da:	46c0      	nop			@ (mov r8, r8)
 800c5dc:	e002      	b.n	800c5e4 <hci_send_req+0x1c0>
          break;
 800c5de:	46c0      	nop			@ (mov r8, r8)
 800c5e0:	e000      	b.n	800c5e4 <hci_send_req+0x1c0>
          break;
 800c5e2:	46c0      	nop			@ (mov r8, r8)
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800c5e4:	4b26      	ldr	r3, [pc, #152]	@ (800c680 <hci_send_req+0x25c>)
 800c5e6:	0018      	movs	r0, r3
 800c5e8:	f000 f8b0 	bl	800c74c <list_is_empty>
 800c5ec:	1e03      	subs	r3, r0, #0
 800c5ee:	d00e      	beq.n	800c60e <hci_send_req+0x1ea>
 800c5f0:	4b22      	ldr	r3, [pc, #136]	@ (800c67c <hci_send_req+0x258>)
 800c5f2:	0018      	movs	r0, r3
 800c5f4:	f000 f8aa 	bl	800c74c <list_is_empty>
 800c5f8:	1e03      	subs	r3, r0, #0
 800c5fa:	d008      	beq.n	800c60e <hci_send_req+0x1ea>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800c5fc:	693a      	ldr	r2, [r7, #16]
 800c5fe:	4b20      	ldr	r3, [pc, #128]	@ (800c680 <hci_send_req+0x25c>)
 800c600:	0011      	movs	r1, r2
 800c602:	0018      	movs	r0, r3
 800c604:	f000 f8ec 	bl	800c7e0 <list_insert_tail>
      hciReadPacket=NULL;
 800c608:	2300      	movs	r3, #0
 800c60a:	613b      	str	r3, [r7, #16]
 800c60c:	e008      	b.n	800c620 <hci_send_req+0x1fc>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800c60e:	693a      	ldr	r2, [r7, #16]
 800c610:	2308      	movs	r3, #8
 800c612:	18fb      	adds	r3, r7, r3
 800c614:	0011      	movs	r1, r2
 800c616:	0018      	movs	r0, r3
 800c618:	f000 f8e2 	bl	800c7e0 <list_insert_tail>
      hciReadPacket=NULL;
 800c61c:	2300      	movs	r3, #0
 800c61e:	613b      	str	r3, [r7, #16]
  {
 800c620:	e731      	b.n	800c486 <hci_send_req+0x62>
        goto failed;
 800c622:	46c0      	nop			@ (mov r8, r8)
 800c624:	e004      	b.n	800c630 <hci_send_req+0x20c>
        goto failed;
 800c626:	46c0      	nop			@ (mov r8, r8)
 800c628:	e002      	b.n	800c630 <hci_send_req+0x20c>
          goto failed;
 800c62a:	46c0      	nop			@ (mov r8, r8)
 800c62c:	e000      	b.n	800c630 <hci_send_req+0x20c>
          goto failed;
 800c62e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800c630:	693b      	ldr	r3, [r7, #16]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d005      	beq.n	800c642 <hci_send_req+0x21e>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800c636:	693a      	ldr	r2, [r7, #16]
 800c638:	4b11      	ldr	r3, [pc, #68]	@ (800c680 <hci_send_req+0x25c>)
 800c63a:	0011      	movs	r1, r2
 800c63c:	0018      	movs	r0, r3
 800c63e:	f000 f8ab 	bl	800c798 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800c642:	2308      	movs	r3, #8
 800c644:	18fa      	adds	r2, r7, r3
 800c646:	4b0d      	ldr	r3, [pc, #52]	@ (800c67c <hci_send_req+0x258>)
 800c648:	0011      	movs	r1, r2
 800c64a:	0018      	movs	r0, r3
 800c64c:	f7ff fe42 	bl	800c2d4 <move_list>

  return -1;
 800c650:	2301      	movs	r3, #1
 800c652:	425b      	negs	r3, r3
 800c654:	e00d      	b.n	800c672 <hci_send_req+0x24e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800c656:	693a      	ldr	r2, [r7, #16]
 800c658:	4b09      	ldr	r3, [pc, #36]	@ (800c680 <hci_send_req+0x25c>)
 800c65a:	0011      	movs	r1, r2
 800c65c:	0018      	movs	r0, r3
 800c65e:	f000 f89b 	bl	800c798 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800c662:	2308      	movs	r3, #8
 800c664:	18fa      	adds	r2, r7, r3
 800c666:	4b05      	ldr	r3, [pc, #20]	@ (800c67c <hci_send_req+0x258>)
 800c668:	0011      	movs	r1, r2
 800c66a:	0018      	movs	r0, r3
 800c66c:	f7ff fe32 	bl	800c2d4 <move_list>

  return 0;
 800c670:	2300      	movs	r3, #0
}
 800c672:	0018      	movs	r0, r3
 800c674:	46bd      	mov	sp, r7
 800c676:	b00e      	add	sp, #56	@ 0x38
 800c678:	bd80      	pop	{r7, pc}
 800c67a:	46c0      	nop			@ (mov r8, r8)
 800c67c:	20000654 	.word	0x20000654
 800c680:	2000064c 	.word	0x2000064c

0800c684 <hci_notify_asynch_evt>:
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
  }
}

int32_t hci_notify_asynch_evt(void* pdata)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b086      	sub	sp, #24
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 800c68c:	2300      	movs	r3, #0
 800c68e:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 800c690:	2300      	movs	r3, #0
 800c692:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800c694:	4b23      	ldr	r3, [pc, #140]	@ (800c724 <hci_notify_asynch_evt+0xa0>)
 800c696:	0018      	movs	r0, r3
 800c698:	f000 f858 	bl	800c74c <list_is_empty>
 800c69c:	1e03      	subs	r3, r0, #0
 800c69e:	d13a      	bne.n	800c716 <hci_notify_asynch_evt+0x92>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800c6a0:	230c      	movs	r3, #12
 800c6a2:	18fa      	adds	r2, r7, r3
 800c6a4:	4b1f      	ldr	r3, [pc, #124]	@ (800c724 <hci_notify_asynch_evt+0xa0>)
 800c6a6:	0011      	movs	r1, r2
 800c6a8:	0018      	movs	r0, r3
 800c6aa:	f000 f8dc 	bl	800c866 <list_remove_head>
    
    if (hciContext.io.Receive)
 800c6ae:	4b1e      	ldr	r3, [pc, #120]	@ (800c728 <hci_notify_asynch_evt+0xa4>)
 800c6b0:	68db      	ldr	r3, [r3, #12]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d031      	beq.n	800c71a <hci_notify_asynch_evt+0x96>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800c6b6:	4b1c      	ldr	r3, [pc, #112]	@ (800c728 <hci_notify_asynch_evt+0xa4>)
 800c6b8:	68db      	ldr	r3, [r3, #12]
 800c6ba:	68fa      	ldr	r2, [r7, #12]
 800c6bc:	3208      	adds	r2, #8
 800c6be:	2180      	movs	r1, #128	@ 0x80
 800c6c0:	0010      	movs	r0, r2
 800c6c2:	4798      	blx	r3
 800c6c4:	0002      	movs	r2, r0
 800c6c6:	2113      	movs	r1, #19
 800c6c8:	187b      	adds	r3, r7, r1
 800c6ca:	701a      	strb	r2, [r3, #0]
      if (data_len > 0)
 800c6cc:	000a      	movs	r2, r1
 800c6ce:	18bb      	adds	r3, r7, r2
 800c6d0:	781b      	ldrb	r3, [r3, #0]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d018      	beq.n	800c708 <hci_notify_asynch_evt+0x84>
      {                    
        hciReadPacket->data_len = data_len;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	18ba      	adds	r2, r7, r2
 800c6da:	2188      	movs	r1, #136	@ 0x88
 800c6dc:	7812      	ldrb	r2, [r2, #0]
 800c6de:	545a      	strb	r2, [r3, r1]
        if (verify_packet(hciReadPacket) == 0)
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	0018      	movs	r0, r3
 800c6e4:	f7ff fd86 	bl	800c1f4 <verify_packet>
 800c6e8:	1e03      	subs	r3, r0, #0
 800c6ea:	d106      	bne.n	800c6fa <hci_notify_asynch_evt+0x76>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800c6ec:	68fa      	ldr	r2, [r7, #12]
 800c6ee:	4b0f      	ldr	r3, [pc, #60]	@ (800c72c <hci_notify_asynch_evt+0xa8>)
 800c6f0:	0011      	movs	r1, r2
 800c6f2:	0018      	movs	r0, r3
 800c6f4:	f000 f874 	bl	800c7e0 <list_insert_tail>
 800c6f8:	e00f      	b.n	800c71a <hci_notify_asynch_evt+0x96>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800c6fa:	68fa      	ldr	r2, [r7, #12]
 800c6fc:	4b09      	ldr	r3, [pc, #36]	@ (800c724 <hci_notify_asynch_evt+0xa0>)
 800c6fe:	0011      	movs	r1, r2
 800c700:	0018      	movs	r0, r3
 800c702:	f000 f849 	bl	800c798 <list_insert_head>
 800c706:	e008      	b.n	800c71a <hci_notify_asynch_evt+0x96>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800c708:	68fa      	ldr	r2, [r7, #12]
 800c70a:	4b06      	ldr	r3, [pc, #24]	@ (800c724 <hci_notify_asynch_evt+0xa0>)
 800c70c:	0011      	movs	r1, r2
 800c70e:	0018      	movs	r0, r3
 800c710:	f000 f842 	bl	800c798 <list_insert_head>
 800c714:	e001      	b.n	800c71a <hci_notify_asynch_evt+0x96>
      }
    }
  }
  else 
  {
    ret = 1;
 800c716:	2301      	movs	r3, #1
 800c718:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800c71a:	697b      	ldr	r3, [r7, #20]
  
}
 800c71c:	0018      	movs	r0, r3
 800c71e:	46bd      	mov	sp, r7
 800c720:	b006      	add	sp, #24
 800c722:	bd80      	pop	{r7, pc}
 800c724:	2000064c 	.word	0x2000064c
 800c728:	20000bd4 	.word	0x20000bd4
 800c72c:	20000654 	.word	0x20000654

0800c730 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b082      	sub	sp, #8
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	687a      	ldr	r2, [r7, #4]
 800c73c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	687a      	ldr	r2, [r7, #4]
 800c742:	605a      	str	r2, [r3, #4]
}
 800c744:	46c0      	nop			@ (mov r8, r8)
 800c746:	46bd      	mov	sp, r7
 800c748:	b002      	add	sp, #8
 800c74a:	bd80      	pop	{r7, pc}

0800c74c <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b086      	sub	sp, #24
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c754:	f3ef 8310 	mrs	r3, PRIMASK
 800c758:	60fb      	str	r3, [r7, #12]
  return(result);
 800c75a:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c75c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c75e:	b672      	cpsid	i
}
 800c760:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	687a      	ldr	r2, [r7, #4]
 800c768:	429a      	cmp	r2, r3
 800c76a:	d104      	bne.n	800c776 <list_is_empty+0x2a>
  {
    return_value = 1;
 800c76c:	2317      	movs	r3, #23
 800c76e:	18fb      	adds	r3, r7, r3
 800c770:	2201      	movs	r2, #1
 800c772:	701a      	strb	r2, [r3, #0]
 800c774:	e003      	b.n	800c77e <list_is_empty+0x32>
  }
  else
  {
    return_value = 0;
 800c776:	2317      	movs	r3, #23
 800c778:	18fb      	adds	r3, r7, r3
 800c77a:	2200      	movs	r2, #0
 800c77c:	701a      	strb	r2, [r3, #0]
 800c77e:	693b      	ldr	r3, [r7, #16]
 800c780:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c782:	68bb      	ldr	r3, [r7, #8]
 800c784:	f383 8810 	msr	PRIMASK, r3
}
 800c788:	46c0      	nop			@ (mov r8, r8)
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800c78a:	2317      	movs	r3, #23
 800c78c:	18fb      	adds	r3, r7, r3
 800c78e:	781b      	ldrb	r3, [r3, #0]
}
 800c790:	0018      	movs	r0, r3
 800c792:	46bd      	mov	sp, r7
 800c794:	b006      	add	sp, #24
 800c796:	bd80      	pop	{r7, pc}

0800c798 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b086      	sub	sp, #24
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
 800c7a0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c7a2:	f3ef 8310 	mrs	r3, PRIMASK
 800c7a6:	60fb      	str	r3, [r7, #12]
  return(result);
 800c7a8:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c7aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c7ac:	b672      	cpsid	i
}
 800c7ae:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681a      	ldr	r2, [r3, #0]
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	687a      	ldr	r2, [r7, #4]
 800c7bc:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	683a      	ldr	r2, [r7, #0]
 800c7c2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	683a      	ldr	r2, [r7, #0]
 800c7ca:	605a      	str	r2, [r3, #4]
 800c7cc:	697b      	ldr	r3, [r7, #20]
 800c7ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c7d0:	693b      	ldr	r3, [r7, #16]
 800c7d2:	f383 8810 	msr	PRIMASK, r3
}
 800c7d6:	46c0      	nop			@ (mov r8, r8)
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800c7d8:	46c0      	nop			@ (mov r8, r8)
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	b006      	add	sp, #24
 800c7de:	bd80      	pop	{r7, pc}

0800c7e0 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b086      	sub	sp, #24
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
 800c7e8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c7ea:	f3ef 8310 	mrs	r3, PRIMASK
 800c7ee:	60fb      	str	r3, [r7, #12]
  return(result);
 800c7f0:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c7f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c7f4:	b672      	cpsid	i
}
 800c7f6:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	687a      	ldr	r2, [r7, #4]
 800c7fc:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	685a      	ldr	r2, [r3, #4]
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	683a      	ldr	r2, [r7, #0]
 800c80a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	685b      	ldr	r3, [r3, #4]
 800c810:	683a      	ldr	r2, [r7, #0]
 800c812:	601a      	str	r2, [r3, #0]
 800c814:	697b      	ldr	r3, [r7, #20]
 800c816:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	f383 8810 	msr	PRIMASK, r3
}
 800c81e:	46c0      	nop			@ (mov r8, r8)
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800c820:	46c0      	nop			@ (mov r8, r8)
 800c822:	46bd      	mov	sp, r7
 800c824:	b006      	add	sp, #24
 800c826:	bd80      	pop	{r7, pc}

0800c828 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b086      	sub	sp, #24
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c830:	f3ef 8310 	mrs	r3, PRIMASK
 800c834:	60fb      	str	r3, [r7, #12]
  return(result);
 800c836:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c838:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c83a:	b672      	cpsid	i
}
 800c83c:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	685b      	ldr	r3, [r3, #4]
 800c842:	687a      	ldr	r2, [r7, #4]
 800c844:	6812      	ldr	r2, [r2, #0]
 800c846:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	687a      	ldr	r2, [r7, #4]
 800c84e:	6852      	ldr	r2, [r2, #4]
 800c850:	605a      	str	r2, [r3, #4]
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c856:	693b      	ldr	r3, [r7, #16]
 800c858:	f383 8810 	msr	PRIMASK, r3
}
 800c85c:	46c0      	nop			@ (mov r8, r8)
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800c85e:	46c0      	nop			@ (mov r8, r8)
 800c860:	46bd      	mov	sp, r7
 800c862:	b006      	add	sp, #24
 800c864:	bd80      	pop	{r7, pc}

0800c866 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800c866:	b580      	push	{r7, lr}
 800c868:	b086      	sub	sp, #24
 800c86a:	af00      	add	r7, sp, #0
 800c86c:	6078      	str	r0, [r7, #4]
 800c86e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c870:	f3ef 8310 	mrs	r3, PRIMASK
 800c874:	60fb      	str	r3, [r7, #12]
  return(result);
 800c876:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c878:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c87a:	b672      	cpsid	i
}
 800c87c:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681a      	ldr	r2, [r3, #0]
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	0018      	movs	r0, r3
 800c88c:	f7ff ffcc 	bl	800c828 <list_remove_node>
  (*node)->next = NULL;
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	2200      	movs	r2, #0
 800c896:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	2200      	movs	r2, #0
 800c89e:	605a      	str	r2, [r3, #4]
 800c8a0:	697b      	ldr	r3, [r7, #20]
 800c8a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c8a4:	693b      	ldr	r3, [r7, #16]
 800c8a6:	f383 8810 	msr	PRIMASK, r3
}
 800c8aa:	46c0      	nop			@ (mov r8, r8)
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800c8ac:	46c0      	nop			@ (mov r8, r8)
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	b006      	add	sp, #24
 800c8b2:	bd80      	pop	{r7, pc}

0800c8b4 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b086      	sub	sp, #24
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
 800c8bc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c8be:	f3ef 8310 	mrs	r3, PRIMASK
 800c8c2:	60fb      	str	r3, [r7, #12]
  return(result);
 800c8c4:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c8c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c8c8:	b672      	cpsid	i
}
 800c8ca:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	685a      	ldr	r2, [r3, #4]
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	685b      	ldr	r3, [r3, #4]
 800c8d8:	0018      	movs	r0, r3
 800c8da:	f7ff ffa5 	bl	800c828 <list_remove_node>
  (*node)->next = NULL;
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	605a      	str	r2, [r3, #4]
 800c8ee:	697b      	ldr	r3, [r7, #20]
 800c8f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c8f2:	693b      	ldr	r3, [r7, #16]
 800c8f4:	f383 8810 	msr	PRIMASK, r3
}
 800c8f8:	46c0      	nop			@ (mov r8, r8)
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800c8fa:	46c0      	nop			@ (mov r8, r8)
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	b006      	add	sp, #24
 800c900:	bd80      	pop	{r7, pc}

0800c902 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800c902:	b580      	push	{r7, lr}
 800c904:	b088      	sub	sp, #32
 800c906:	af00      	add	r7, sp, #0
 800c908:	6078      	str	r0, [r7, #4]
  int size = 0;
 800c90a:	2300      	movs	r3, #0
 800c90c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c90e:	f3ef 8310 	mrs	r3, PRIMASK
 800c912:	613b      	str	r3, [r7, #16]
  return(result);
 800c914:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c916:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c918:	b672      	cpsid	i
}
 800c91a:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800c922:	e005      	b.n	800c930 <list_get_size+0x2e>
  {
    size++;
 800c924:	69fb      	ldr	r3, [r7, #28]
 800c926:	3301      	adds	r3, #1
 800c928:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800c92a:	69bb      	ldr	r3, [r7, #24]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800c930:	69ba      	ldr	r2, [r7, #24]
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	429a      	cmp	r2, r3
 800c936:	d1f5      	bne.n	800c924 <list_get_size+0x22>
 800c938:	697b      	ldr	r3, [r7, #20]
 800c93a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	f383 8810 	msr	PRIMASK, r3
}
 800c942:	46c0      	nop			@ (mov r8, r8)
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 800c944:	69fb      	ldr	r3, [r7, #28]
}
 800c946:	0018      	movs	r0, r3
 800c948:	46bd      	mov	sp, r7
 800c94a:	b008      	add	sp, #32
 800c94c:	bd80      	pop	{r7, pc}

0800c94e <__cvt>:
 800c94e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c950:	001f      	movs	r7, r3
 800c952:	2300      	movs	r3, #0
 800c954:	0016      	movs	r6, r2
 800c956:	b08b      	sub	sp, #44	@ 0x2c
 800c958:	429f      	cmp	r7, r3
 800c95a:	da04      	bge.n	800c966 <__cvt+0x18>
 800c95c:	2180      	movs	r1, #128	@ 0x80
 800c95e:	0609      	lsls	r1, r1, #24
 800c960:	187b      	adds	r3, r7, r1
 800c962:	001f      	movs	r7, r3
 800c964:	232d      	movs	r3, #45	@ 0x2d
 800c966:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c968:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800c96a:	7013      	strb	r3, [r2, #0]
 800c96c:	2320      	movs	r3, #32
 800c96e:	2203      	movs	r2, #3
 800c970:	439d      	bics	r5, r3
 800c972:	2d46      	cmp	r5, #70	@ 0x46
 800c974:	d007      	beq.n	800c986 <__cvt+0x38>
 800c976:	002b      	movs	r3, r5
 800c978:	3b45      	subs	r3, #69	@ 0x45
 800c97a:	4259      	negs	r1, r3
 800c97c:	414b      	adcs	r3, r1
 800c97e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800c980:	3a01      	subs	r2, #1
 800c982:	18cb      	adds	r3, r1, r3
 800c984:	9310      	str	r3, [sp, #64]	@ 0x40
 800c986:	ab09      	add	r3, sp, #36	@ 0x24
 800c988:	9304      	str	r3, [sp, #16]
 800c98a:	ab08      	add	r3, sp, #32
 800c98c:	9303      	str	r3, [sp, #12]
 800c98e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c990:	9200      	str	r2, [sp, #0]
 800c992:	9302      	str	r3, [sp, #8]
 800c994:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c996:	0032      	movs	r2, r6
 800c998:	9301      	str	r3, [sp, #4]
 800c99a:	003b      	movs	r3, r7
 800c99c:	f001 f858 	bl	800da50 <_dtoa_r>
 800c9a0:	0004      	movs	r4, r0
 800c9a2:	2d47      	cmp	r5, #71	@ 0x47
 800c9a4:	d11b      	bne.n	800c9de <__cvt+0x90>
 800c9a6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c9a8:	07db      	lsls	r3, r3, #31
 800c9aa:	d511      	bpl.n	800c9d0 <__cvt+0x82>
 800c9ac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c9ae:	18c3      	adds	r3, r0, r3
 800c9b0:	9307      	str	r3, [sp, #28]
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	0030      	movs	r0, r6
 800c9b8:	0039      	movs	r1, r7
 800c9ba:	f7f3 fd43 	bl	8000444 <__aeabi_dcmpeq>
 800c9be:	2800      	cmp	r0, #0
 800c9c0:	d001      	beq.n	800c9c6 <__cvt+0x78>
 800c9c2:	9b07      	ldr	r3, [sp, #28]
 800c9c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9c6:	2230      	movs	r2, #48	@ 0x30
 800c9c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9ca:	9907      	ldr	r1, [sp, #28]
 800c9cc:	428b      	cmp	r3, r1
 800c9ce:	d320      	bcc.n	800ca12 <__cvt+0xc4>
 800c9d0:	0020      	movs	r0, r4
 800c9d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9d4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800c9d6:	1b1b      	subs	r3, r3, r4
 800c9d8:	6013      	str	r3, [r2, #0]
 800c9da:	b00b      	add	sp, #44	@ 0x2c
 800c9dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c9e0:	18c3      	adds	r3, r0, r3
 800c9e2:	9307      	str	r3, [sp, #28]
 800c9e4:	2d46      	cmp	r5, #70	@ 0x46
 800c9e6:	d1e4      	bne.n	800c9b2 <__cvt+0x64>
 800c9e8:	7803      	ldrb	r3, [r0, #0]
 800c9ea:	2b30      	cmp	r3, #48	@ 0x30
 800c9ec:	d10c      	bne.n	800ca08 <__cvt+0xba>
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	0030      	movs	r0, r6
 800c9f4:	0039      	movs	r1, r7
 800c9f6:	f7f3 fd25 	bl	8000444 <__aeabi_dcmpeq>
 800c9fa:	2800      	cmp	r0, #0
 800c9fc:	d104      	bne.n	800ca08 <__cvt+0xba>
 800c9fe:	2301      	movs	r3, #1
 800ca00:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800ca02:	1a9b      	subs	r3, r3, r2
 800ca04:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ca06:	6013      	str	r3, [r2, #0]
 800ca08:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ca0a:	9a07      	ldr	r2, [sp, #28]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	18d3      	adds	r3, r2, r3
 800ca10:	e7ce      	b.n	800c9b0 <__cvt+0x62>
 800ca12:	1c59      	adds	r1, r3, #1
 800ca14:	9109      	str	r1, [sp, #36]	@ 0x24
 800ca16:	701a      	strb	r2, [r3, #0]
 800ca18:	e7d6      	b.n	800c9c8 <__cvt+0x7a>

0800ca1a <__exponent>:
 800ca1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca1c:	232b      	movs	r3, #43	@ 0x2b
 800ca1e:	b085      	sub	sp, #20
 800ca20:	0005      	movs	r5, r0
 800ca22:	1e0c      	subs	r4, r1, #0
 800ca24:	7002      	strb	r2, [r0, #0]
 800ca26:	da01      	bge.n	800ca2c <__exponent+0x12>
 800ca28:	424c      	negs	r4, r1
 800ca2a:	3302      	adds	r3, #2
 800ca2c:	706b      	strb	r3, [r5, #1]
 800ca2e:	2c09      	cmp	r4, #9
 800ca30:	dd2c      	ble.n	800ca8c <__exponent+0x72>
 800ca32:	ab02      	add	r3, sp, #8
 800ca34:	1dde      	adds	r6, r3, #7
 800ca36:	0020      	movs	r0, r4
 800ca38:	210a      	movs	r1, #10
 800ca3a:	f7f3 fced 	bl	8000418 <__aeabi_idivmod>
 800ca3e:	0037      	movs	r7, r6
 800ca40:	3130      	adds	r1, #48	@ 0x30
 800ca42:	3e01      	subs	r6, #1
 800ca44:	0020      	movs	r0, r4
 800ca46:	7031      	strb	r1, [r6, #0]
 800ca48:	210a      	movs	r1, #10
 800ca4a:	9401      	str	r4, [sp, #4]
 800ca4c:	f7f3 fbfe 	bl	800024c <__divsi3>
 800ca50:	9b01      	ldr	r3, [sp, #4]
 800ca52:	0004      	movs	r4, r0
 800ca54:	2b63      	cmp	r3, #99	@ 0x63
 800ca56:	dcee      	bgt.n	800ca36 <__exponent+0x1c>
 800ca58:	1eba      	subs	r2, r7, #2
 800ca5a:	1ca8      	adds	r0, r5, #2
 800ca5c:	0001      	movs	r1, r0
 800ca5e:	0013      	movs	r3, r2
 800ca60:	3430      	adds	r4, #48	@ 0x30
 800ca62:	7014      	strb	r4, [r2, #0]
 800ca64:	ac02      	add	r4, sp, #8
 800ca66:	3407      	adds	r4, #7
 800ca68:	429c      	cmp	r4, r3
 800ca6a:	d80a      	bhi.n	800ca82 <__exponent+0x68>
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	4294      	cmp	r4, r2
 800ca70:	d303      	bcc.n	800ca7a <__exponent+0x60>
 800ca72:	3309      	adds	r3, #9
 800ca74:	aa02      	add	r2, sp, #8
 800ca76:	189b      	adds	r3, r3, r2
 800ca78:	1bdb      	subs	r3, r3, r7
 800ca7a:	18c0      	adds	r0, r0, r3
 800ca7c:	1b40      	subs	r0, r0, r5
 800ca7e:	b005      	add	sp, #20
 800ca80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca82:	781c      	ldrb	r4, [r3, #0]
 800ca84:	3301      	adds	r3, #1
 800ca86:	700c      	strb	r4, [r1, #0]
 800ca88:	3101      	adds	r1, #1
 800ca8a:	e7eb      	b.n	800ca64 <__exponent+0x4a>
 800ca8c:	2330      	movs	r3, #48	@ 0x30
 800ca8e:	18e4      	adds	r4, r4, r3
 800ca90:	70ab      	strb	r3, [r5, #2]
 800ca92:	1d28      	adds	r0, r5, #4
 800ca94:	70ec      	strb	r4, [r5, #3]
 800ca96:	e7f1      	b.n	800ca7c <__exponent+0x62>

0800ca98 <_printf_float>:
 800ca98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca9a:	b097      	sub	sp, #92	@ 0x5c
 800ca9c:	000d      	movs	r5, r1
 800ca9e:	920a      	str	r2, [sp, #40]	@ 0x28
 800caa0:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800caa2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800caa4:	9009      	str	r0, [sp, #36]	@ 0x24
 800caa6:	f000 febb 	bl	800d820 <_localeconv_r>
 800caaa:	6803      	ldr	r3, [r0, #0]
 800caac:	0018      	movs	r0, r3
 800caae:	930d      	str	r3, [sp, #52]	@ 0x34
 800cab0:	f7f3 fb26 	bl	8000100 <strlen>
 800cab4:	2300      	movs	r3, #0
 800cab6:	900f      	str	r0, [sp, #60]	@ 0x3c
 800cab8:	9314      	str	r3, [sp, #80]	@ 0x50
 800caba:	7e2b      	ldrb	r3, [r5, #24]
 800cabc:	2207      	movs	r2, #7
 800cabe:	930c      	str	r3, [sp, #48]	@ 0x30
 800cac0:	682b      	ldr	r3, [r5, #0]
 800cac2:	930e      	str	r3, [sp, #56]	@ 0x38
 800cac4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cac6:	6823      	ldr	r3, [r4, #0]
 800cac8:	05c9      	lsls	r1, r1, #23
 800caca:	d545      	bpl.n	800cb58 <_printf_float+0xc0>
 800cacc:	189b      	adds	r3, r3, r2
 800cace:	4393      	bics	r3, r2
 800cad0:	001a      	movs	r2, r3
 800cad2:	3208      	adds	r2, #8
 800cad4:	6022      	str	r2, [r4, #0]
 800cad6:	2201      	movs	r2, #1
 800cad8:	681e      	ldr	r6, [r3, #0]
 800cada:	685f      	ldr	r7, [r3, #4]
 800cadc:	007b      	lsls	r3, r7, #1
 800cade:	085b      	lsrs	r3, r3, #1
 800cae0:	9311      	str	r3, [sp, #68]	@ 0x44
 800cae2:	9610      	str	r6, [sp, #64]	@ 0x40
 800cae4:	64ae      	str	r6, [r5, #72]	@ 0x48
 800cae6:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800cae8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800caea:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800caec:	4ba7      	ldr	r3, [pc, #668]	@ (800cd8c <_printf_float+0x2f4>)
 800caee:	4252      	negs	r2, r2
 800caf0:	f7f5 fbc6 	bl	8002280 <__aeabi_dcmpun>
 800caf4:	2800      	cmp	r0, #0
 800caf6:	d131      	bne.n	800cb5c <_printf_float+0xc4>
 800caf8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800cafa:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800cafc:	2201      	movs	r2, #1
 800cafe:	4ba3      	ldr	r3, [pc, #652]	@ (800cd8c <_printf_float+0x2f4>)
 800cb00:	4252      	negs	r2, r2
 800cb02:	f7f3 fcaf 	bl	8000464 <__aeabi_dcmple>
 800cb06:	2800      	cmp	r0, #0
 800cb08:	d128      	bne.n	800cb5c <_printf_float+0xc4>
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	0030      	movs	r0, r6
 800cb10:	0039      	movs	r1, r7
 800cb12:	f7f3 fc9d 	bl	8000450 <__aeabi_dcmplt>
 800cb16:	2800      	cmp	r0, #0
 800cb18:	d003      	beq.n	800cb22 <_printf_float+0x8a>
 800cb1a:	002b      	movs	r3, r5
 800cb1c:	222d      	movs	r2, #45	@ 0x2d
 800cb1e:	3343      	adds	r3, #67	@ 0x43
 800cb20:	701a      	strb	r2, [r3, #0]
 800cb22:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cb24:	4f9a      	ldr	r7, [pc, #616]	@ (800cd90 <_printf_float+0x2f8>)
 800cb26:	2b47      	cmp	r3, #71	@ 0x47
 800cb28:	d800      	bhi.n	800cb2c <_printf_float+0x94>
 800cb2a:	4f9a      	ldr	r7, [pc, #616]	@ (800cd94 <_printf_float+0x2fc>)
 800cb2c:	2303      	movs	r3, #3
 800cb2e:	2400      	movs	r4, #0
 800cb30:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cb32:	612b      	str	r3, [r5, #16]
 800cb34:	3301      	adds	r3, #1
 800cb36:	439a      	bics	r2, r3
 800cb38:	602a      	str	r2, [r5, #0]
 800cb3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cb3c:	0029      	movs	r1, r5
 800cb3e:	9300      	str	r3, [sp, #0]
 800cb40:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cb42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb44:	aa15      	add	r2, sp, #84	@ 0x54
 800cb46:	f000 f9e5 	bl	800cf14 <_printf_common>
 800cb4a:	3001      	adds	r0, #1
 800cb4c:	d000      	beq.n	800cb50 <_printf_float+0xb8>
 800cb4e:	e09e      	b.n	800cc8e <_printf_float+0x1f6>
 800cb50:	2001      	movs	r0, #1
 800cb52:	4240      	negs	r0, r0
 800cb54:	b017      	add	sp, #92	@ 0x5c
 800cb56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb58:	3307      	adds	r3, #7
 800cb5a:	e7b8      	b.n	800cace <_printf_float+0x36>
 800cb5c:	0032      	movs	r2, r6
 800cb5e:	003b      	movs	r3, r7
 800cb60:	0030      	movs	r0, r6
 800cb62:	0039      	movs	r1, r7
 800cb64:	f7f5 fb8c 	bl	8002280 <__aeabi_dcmpun>
 800cb68:	2800      	cmp	r0, #0
 800cb6a:	d00b      	beq.n	800cb84 <_printf_float+0xec>
 800cb6c:	2f00      	cmp	r7, #0
 800cb6e:	da03      	bge.n	800cb78 <_printf_float+0xe0>
 800cb70:	002b      	movs	r3, r5
 800cb72:	222d      	movs	r2, #45	@ 0x2d
 800cb74:	3343      	adds	r3, #67	@ 0x43
 800cb76:	701a      	strb	r2, [r3, #0]
 800cb78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cb7a:	4f87      	ldr	r7, [pc, #540]	@ (800cd98 <_printf_float+0x300>)
 800cb7c:	2b47      	cmp	r3, #71	@ 0x47
 800cb7e:	d8d5      	bhi.n	800cb2c <_printf_float+0x94>
 800cb80:	4f86      	ldr	r7, [pc, #536]	@ (800cd9c <_printf_float+0x304>)
 800cb82:	e7d3      	b.n	800cb2c <_printf_float+0x94>
 800cb84:	2220      	movs	r2, #32
 800cb86:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800cb88:	686b      	ldr	r3, [r5, #4]
 800cb8a:	4394      	bics	r4, r2
 800cb8c:	1c5a      	adds	r2, r3, #1
 800cb8e:	d146      	bne.n	800cc1e <_printf_float+0x186>
 800cb90:	3307      	adds	r3, #7
 800cb92:	606b      	str	r3, [r5, #4]
 800cb94:	2380      	movs	r3, #128	@ 0x80
 800cb96:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cb98:	00db      	lsls	r3, r3, #3
 800cb9a:	4313      	orrs	r3, r2
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	602b      	str	r3, [r5, #0]
 800cba0:	9206      	str	r2, [sp, #24]
 800cba2:	aa14      	add	r2, sp, #80	@ 0x50
 800cba4:	9205      	str	r2, [sp, #20]
 800cba6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800cba8:	a90a      	add	r1, sp, #40	@ 0x28
 800cbaa:	9204      	str	r2, [sp, #16]
 800cbac:	aa13      	add	r2, sp, #76	@ 0x4c
 800cbae:	9203      	str	r2, [sp, #12]
 800cbb0:	2223      	movs	r2, #35	@ 0x23
 800cbb2:	1852      	adds	r2, r2, r1
 800cbb4:	9202      	str	r2, [sp, #8]
 800cbb6:	9301      	str	r3, [sp, #4]
 800cbb8:	686b      	ldr	r3, [r5, #4]
 800cbba:	0032      	movs	r2, r6
 800cbbc:	9300      	str	r3, [sp, #0]
 800cbbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cbc0:	003b      	movs	r3, r7
 800cbc2:	f7ff fec4 	bl	800c94e <__cvt>
 800cbc6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cbc8:	0007      	movs	r7, r0
 800cbca:	2c47      	cmp	r4, #71	@ 0x47
 800cbcc:	d12d      	bne.n	800cc2a <_printf_float+0x192>
 800cbce:	1cd3      	adds	r3, r2, #3
 800cbd0:	db02      	blt.n	800cbd8 <_printf_float+0x140>
 800cbd2:	686b      	ldr	r3, [r5, #4]
 800cbd4:	429a      	cmp	r2, r3
 800cbd6:	dd47      	ble.n	800cc68 <_printf_float+0x1d0>
 800cbd8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cbda:	3b02      	subs	r3, #2
 800cbdc:	b2db      	uxtb	r3, r3
 800cbde:	930c      	str	r3, [sp, #48]	@ 0x30
 800cbe0:	0028      	movs	r0, r5
 800cbe2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800cbe4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800cbe6:	3901      	subs	r1, #1
 800cbe8:	3050      	adds	r0, #80	@ 0x50
 800cbea:	9113      	str	r1, [sp, #76]	@ 0x4c
 800cbec:	f7ff ff15 	bl	800ca1a <__exponent>
 800cbf0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800cbf2:	0004      	movs	r4, r0
 800cbf4:	1813      	adds	r3, r2, r0
 800cbf6:	612b      	str	r3, [r5, #16]
 800cbf8:	2a01      	cmp	r2, #1
 800cbfa:	dc02      	bgt.n	800cc02 <_printf_float+0x16a>
 800cbfc:	682a      	ldr	r2, [r5, #0]
 800cbfe:	07d2      	lsls	r2, r2, #31
 800cc00:	d501      	bpl.n	800cc06 <_printf_float+0x16e>
 800cc02:	3301      	adds	r3, #1
 800cc04:	612b      	str	r3, [r5, #16]
 800cc06:	2323      	movs	r3, #35	@ 0x23
 800cc08:	aa0a      	add	r2, sp, #40	@ 0x28
 800cc0a:	189b      	adds	r3, r3, r2
 800cc0c:	781b      	ldrb	r3, [r3, #0]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d100      	bne.n	800cc14 <_printf_float+0x17c>
 800cc12:	e792      	b.n	800cb3a <_printf_float+0xa2>
 800cc14:	002b      	movs	r3, r5
 800cc16:	222d      	movs	r2, #45	@ 0x2d
 800cc18:	3343      	adds	r3, #67	@ 0x43
 800cc1a:	701a      	strb	r2, [r3, #0]
 800cc1c:	e78d      	b.n	800cb3a <_printf_float+0xa2>
 800cc1e:	2c47      	cmp	r4, #71	@ 0x47
 800cc20:	d1b8      	bne.n	800cb94 <_printf_float+0xfc>
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d1b6      	bne.n	800cb94 <_printf_float+0xfc>
 800cc26:	3301      	adds	r3, #1
 800cc28:	e7b3      	b.n	800cb92 <_printf_float+0xfa>
 800cc2a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cc2c:	2b65      	cmp	r3, #101	@ 0x65
 800cc2e:	d9d7      	bls.n	800cbe0 <_printf_float+0x148>
 800cc30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cc32:	2b66      	cmp	r3, #102	@ 0x66
 800cc34:	d11a      	bne.n	800cc6c <_printf_float+0x1d4>
 800cc36:	686b      	ldr	r3, [r5, #4]
 800cc38:	2a00      	cmp	r2, #0
 800cc3a:	dd09      	ble.n	800cc50 <_printf_float+0x1b8>
 800cc3c:	612a      	str	r2, [r5, #16]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d102      	bne.n	800cc48 <_printf_float+0x1b0>
 800cc42:	6829      	ldr	r1, [r5, #0]
 800cc44:	07c9      	lsls	r1, r1, #31
 800cc46:	d50b      	bpl.n	800cc60 <_printf_float+0x1c8>
 800cc48:	3301      	adds	r3, #1
 800cc4a:	189b      	adds	r3, r3, r2
 800cc4c:	612b      	str	r3, [r5, #16]
 800cc4e:	e007      	b.n	800cc60 <_printf_float+0x1c8>
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d103      	bne.n	800cc5c <_printf_float+0x1c4>
 800cc54:	2201      	movs	r2, #1
 800cc56:	6829      	ldr	r1, [r5, #0]
 800cc58:	4211      	tst	r1, r2
 800cc5a:	d000      	beq.n	800cc5e <_printf_float+0x1c6>
 800cc5c:	1c9a      	adds	r2, r3, #2
 800cc5e:	612a      	str	r2, [r5, #16]
 800cc60:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cc62:	2400      	movs	r4, #0
 800cc64:	65ab      	str	r3, [r5, #88]	@ 0x58
 800cc66:	e7ce      	b.n	800cc06 <_printf_float+0x16e>
 800cc68:	2367      	movs	r3, #103	@ 0x67
 800cc6a:	930c      	str	r3, [sp, #48]	@ 0x30
 800cc6c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800cc6e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800cc70:	4299      	cmp	r1, r3
 800cc72:	db06      	blt.n	800cc82 <_printf_float+0x1ea>
 800cc74:	682b      	ldr	r3, [r5, #0]
 800cc76:	6129      	str	r1, [r5, #16]
 800cc78:	07db      	lsls	r3, r3, #31
 800cc7a:	d5f1      	bpl.n	800cc60 <_printf_float+0x1c8>
 800cc7c:	3101      	adds	r1, #1
 800cc7e:	6129      	str	r1, [r5, #16]
 800cc80:	e7ee      	b.n	800cc60 <_printf_float+0x1c8>
 800cc82:	2201      	movs	r2, #1
 800cc84:	2900      	cmp	r1, #0
 800cc86:	dce0      	bgt.n	800cc4a <_printf_float+0x1b2>
 800cc88:	1892      	adds	r2, r2, r2
 800cc8a:	1a52      	subs	r2, r2, r1
 800cc8c:	e7dd      	b.n	800cc4a <_printf_float+0x1b2>
 800cc8e:	682a      	ldr	r2, [r5, #0]
 800cc90:	0553      	lsls	r3, r2, #21
 800cc92:	d408      	bmi.n	800cca6 <_printf_float+0x20e>
 800cc94:	692b      	ldr	r3, [r5, #16]
 800cc96:	003a      	movs	r2, r7
 800cc98:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cc9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cc9c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800cc9e:	47a0      	blx	r4
 800cca0:	3001      	adds	r0, #1
 800cca2:	d129      	bne.n	800ccf8 <_printf_float+0x260>
 800cca4:	e754      	b.n	800cb50 <_printf_float+0xb8>
 800cca6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cca8:	2b65      	cmp	r3, #101	@ 0x65
 800ccaa:	d800      	bhi.n	800ccae <_printf_float+0x216>
 800ccac:	e0db      	b.n	800ce66 <_printf_float+0x3ce>
 800ccae:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800ccb0:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	f7f3 fbc5 	bl	8000444 <__aeabi_dcmpeq>
 800ccba:	2800      	cmp	r0, #0
 800ccbc:	d033      	beq.n	800cd26 <_printf_float+0x28e>
 800ccbe:	2301      	movs	r3, #1
 800ccc0:	4a37      	ldr	r2, [pc, #220]	@ (800cda0 <_printf_float+0x308>)
 800ccc2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ccc4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ccc6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800ccc8:	47a0      	blx	r4
 800ccca:	3001      	adds	r0, #1
 800cccc:	d100      	bne.n	800ccd0 <_printf_float+0x238>
 800ccce:	e73f      	b.n	800cb50 <_printf_float+0xb8>
 800ccd0:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800ccd2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ccd4:	42b3      	cmp	r3, r6
 800ccd6:	db02      	blt.n	800ccde <_printf_float+0x246>
 800ccd8:	682b      	ldr	r3, [r5, #0]
 800ccda:	07db      	lsls	r3, r3, #31
 800ccdc:	d50c      	bpl.n	800ccf8 <_printf_float+0x260>
 800ccde:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800cce0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cce2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cce4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cce6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cce8:	47a0      	blx	r4
 800ccea:	2400      	movs	r4, #0
 800ccec:	3001      	adds	r0, #1
 800ccee:	d100      	bne.n	800ccf2 <_printf_float+0x25a>
 800ccf0:	e72e      	b.n	800cb50 <_printf_float+0xb8>
 800ccf2:	1e73      	subs	r3, r6, #1
 800ccf4:	42a3      	cmp	r3, r4
 800ccf6:	dc0a      	bgt.n	800cd0e <_printf_float+0x276>
 800ccf8:	682b      	ldr	r3, [r5, #0]
 800ccfa:	079b      	lsls	r3, r3, #30
 800ccfc:	d500      	bpl.n	800cd00 <_printf_float+0x268>
 800ccfe:	e106      	b.n	800cf0e <_printf_float+0x476>
 800cd00:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800cd02:	68e8      	ldr	r0, [r5, #12]
 800cd04:	4298      	cmp	r0, r3
 800cd06:	db00      	blt.n	800cd0a <_printf_float+0x272>
 800cd08:	e724      	b.n	800cb54 <_printf_float+0xbc>
 800cd0a:	0018      	movs	r0, r3
 800cd0c:	e722      	b.n	800cb54 <_printf_float+0xbc>
 800cd0e:	002a      	movs	r2, r5
 800cd10:	2301      	movs	r3, #1
 800cd12:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cd14:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cd16:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800cd18:	321a      	adds	r2, #26
 800cd1a:	47b8      	blx	r7
 800cd1c:	3001      	adds	r0, #1
 800cd1e:	d100      	bne.n	800cd22 <_printf_float+0x28a>
 800cd20:	e716      	b.n	800cb50 <_printf_float+0xb8>
 800cd22:	3401      	adds	r4, #1
 800cd24:	e7e5      	b.n	800ccf2 <_printf_float+0x25a>
 800cd26:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	dc3b      	bgt.n	800cda4 <_printf_float+0x30c>
 800cd2c:	2301      	movs	r3, #1
 800cd2e:	4a1c      	ldr	r2, [pc, #112]	@ (800cda0 <_printf_float+0x308>)
 800cd30:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cd32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cd34:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800cd36:	47a0      	blx	r4
 800cd38:	3001      	adds	r0, #1
 800cd3a:	d100      	bne.n	800cd3e <_printf_float+0x2a6>
 800cd3c:	e708      	b.n	800cb50 <_printf_float+0xb8>
 800cd3e:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800cd40:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cd42:	4333      	orrs	r3, r6
 800cd44:	d102      	bne.n	800cd4c <_printf_float+0x2b4>
 800cd46:	682b      	ldr	r3, [r5, #0]
 800cd48:	07db      	lsls	r3, r3, #31
 800cd4a:	d5d5      	bpl.n	800ccf8 <_printf_float+0x260>
 800cd4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd4e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cd50:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cd52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cd54:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800cd56:	47a0      	blx	r4
 800cd58:	2300      	movs	r3, #0
 800cd5a:	3001      	adds	r0, #1
 800cd5c:	d100      	bne.n	800cd60 <_printf_float+0x2c8>
 800cd5e:	e6f7      	b.n	800cb50 <_printf_float+0xb8>
 800cd60:	930c      	str	r3, [sp, #48]	@ 0x30
 800cd62:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cd64:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800cd66:	425b      	negs	r3, r3
 800cd68:	4293      	cmp	r3, r2
 800cd6a:	dc01      	bgt.n	800cd70 <_printf_float+0x2d8>
 800cd6c:	0033      	movs	r3, r6
 800cd6e:	e792      	b.n	800cc96 <_printf_float+0x1fe>
 800cd70:	002a      	movs	r2, r5
 800cd72:	2301      	movs	r3, #1
 800cd74:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cd76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cd78:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800cd7a:	321a      	adds	r2, #26
 800cd7c:	47a0      	blx	r4
 800cd7e:	3001      	adds	r0, #1
 800cd80:	d100      	bne.n	800cd84 <_printf_float+0x2ec>
 800cd82:	e6e5      	b.n	800cb50 <_printf_float+0xb8>
 800cd84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cd86:	3301      	adds	r3, #1
 800cd88:	e7ea      	b.n	800cd60 <_printf_float+0x2c8>
 800cd8a:	46c0      	nop			@ (mov r8, r8)
 800cd8c:	7fefffff 	.word	0x7fefffff
 800cd90:	08010744 	.word	0x08010744
 800cd94:	08010740 	.word	0x08010740
 800cd98:	0801074c 	.word	0x0801074c
 800cd9c:	08010748 	.word	0x08010748
 800cda0:	08010750 	.word	0x08010750
 800cda4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800cda6:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800cda8:	930c      	str	r3, [sp, #48]	@ 0x30
 800cdaa:	429e      	cmp	r6, r3
 800cdac:	dd00      	ble.n	800cdb0 <_printf_float+0x318>
 800cdae:	001e      	movs	r6, r3
 800cdb0:	2e00      	cmp	r6, #0
 800cdb2:	dc31      	bgt.n	800ce18 <_printf_float+0x380>
 800cdb4:	43f3      	mvns	r3, r6
 800cdb6:	2400      	movs	r4, #0
 800cdb8:	17db      	asrs	r3, r3, #31
 800cdba:	4033      	ands	r3, r6
 800cdbc:	930e      	str	r3, [sp, #56]	@ 0x38
 800cdbe:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800cdc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cdc2:	1af3      	subs	r3, r6, r3
 800cdc4:	42a3      	cmp	r3, r4
 800cdc6:	dc30      	bgt.n	800ce2a <_printf_float+0x392>
 800cdc8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cdca:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800cdcc:	429a      	cmp	r2, r3
 800cdce:	dc38      	bgt.n	800ce42 <_printf_float+0x3aa>
 800cdd0:	682b      	ldr	r3, [r5, #0]
 800cdd2:	07db      	lsls	r3, r3, #31
 800cdd4:	d435      	bmi.n	800ce42 <_printf_float+0x3aa>
 800cdd6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800cdd8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cdda:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800cddc:	1b9b      	subs	r3, r3, r6
 800cdde:	1b14      	subs	r4, r2, r4
 800cde0:	429c      	cmp	r4, r3
 800cde2:	dd00      	ble.n	800cde6 <_printf_float+0x34e>
 800cde4:	001c      	movs	r4, r3
 800cde6:	2c00      	cmp	r4, #0
 800cde8:	dc34      	bgt.n	800ce54 <_printf_float+0x3bc>
 800cdea:	43e3      	mvns	r3, r4
 800cdec:	2600      	movs	r6, #0
 800cdee:	17db      	asrs	r3, r3, #31
 800cdf0:	401c      	ands	r4, r3
 800cdf2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cdf4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800cdf6:	1ad3      	subs	r3, r2, r3
 800cdf8:	1b1b      	subs	r3, r3, r4
 800cdfa:	42b3      	cmp	r3, r6
 800cdfc:	dc00      	bgt.n	800ce00 <_printf_float+0x368>
 800cdfe:	e77b      	b.n	800ccf8 <_printf_float+0x260>
 800ce00:	002a      	movs	r2, r5
 800ce02:	2301      	movs	r3, #1
 800ce04:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ce06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ce08:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800ce0a:	321a      	adds	r2, #26
 800ce0c:	47b8      	blx	r7
 800ce0e:	3001      	adds	r0, #1
 800ce10:	d100      	bne.n	800ce14 <_printf_float+0x37c>
 800ce12:	e69d      	b.n	800cb50 <_printf_float+0xb8>
 800ce14:	3601      	adds	r6, #1
 800ce16:	e7ec      	b.n	800cdf2 <_printf_float+0x35a>
 800ce18:	0033      	movs	r3, r6
 800ce1a:	003a      	movs	r2, r7
 800ce1c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ce1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ce20:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800ce22:	47a0      	blx	r4
 800ce24:	3001      	adds	r0, #1
 800ce26:	d1c5      	bne.n	800cdb4 <_printf_float+0x31c>
 800ce28:	e692      	b.n	800cb50 <_printf_float+0xb8>
 800ce2a:	002a      	movs	r2, r5
 800ce2c:	2301      	movs	r3, #1
 800ce2e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ce30:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ce32:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800ce34:	321a      	adds	r2, #26
 800ce36:	47b0      	blx	r6
 800ce38:	3001      	adds	r0, #1
 800ce3a:	d100      	bne.n	800ce3e <_printf_float+0x3a6>
 800ce3c:	e688      	b.n	800cb50 <_printf_float+0xb8>
 800ce3e:	3401      	adds	r4, #1
 800ce40:	e7bd      	b.n	800cdbe <_printf_float+0x326>
 800ce42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce44:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ce46:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ce48:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ce4a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800ce4c:	47a0      	blx	r4
 800ce4e:	3001      	adds	r0, #1
 800ce50:	d1c1      	bne.n	800cdd6 <_printf_float+0x33e>
 800ce52:	e67d      	b.n	800cb50 <_printf_float+0xb8>
 800ce54:	19ba      	adds	r2, r7, r6
 800ce56:	0023      	movs	r3, r4
 800ce58:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ce5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ce5c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800ce5e:	47b0      	blx	r6
 800ce60:	3001      	adds	r0, #1
 800ce62:	d1c2      	bne.n	800cdea <_printf_float+0x352>
 800ce64:	e674      	b.n	800cb50 <_printf_float+0xb8>
 800ce66:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ce68:	930c      	str	r3, [sp, #48]	@ 0x30
 800ce6a:	2b01      	cmp	r3, #1
 800ce6c:	dc02      	bgt.n	800ce74 <_printf_float+0x3dc>
 800ce6e:	2301      	movs	r3, #1
 800ce70:	421a      	tst	r2, r3
 800ce72:	d039      	beq.n	800cee8 <_printf_float+0x450>
 800ce74:	2301      	movs	r3, #1
 800ce76:	003a      	movs	r2, r7
 800ce78:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ce7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ce7c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800ce7e:	47b0      	blx	r6
 800ce80:	3001      	adds	r0, #1
 800ce82:	d100      	bne.n	800ce86 <_printf_float+0x3ee>
 800ce84:	e664      	b.n	800cb50 <_printf_float+0xb8>
 800ce86:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce88:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ce8a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ce8c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ce8e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800ce90:	47b0      	blx	r6
 800ce92:	3001      	adds	r0, #1
 800ce94:	d100      	bne.n	800ce98 <_printf_float+0x400>
 800ce96:	e65b      	b.n	800cb50 <_printf_float+0xb8>
 800ce98:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800ce9a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800ce9c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ce9e:	2200      	movs	r2, #0
 800cea0:	3b01      	subs	r3, #1
 800cea2:	930c      	str	r3, [sp, #48]	@ 0x30
 800cea4:	2300      	movs	r3, #0
 800cea6:	f7f3 facd 	bl	8000444 <__aeabi_dcmpeq>
 800ceaa:	2800      	cmp	r0, #0
 800ceac:	d11a      	bne.n	800cee4 <_printf_float+0x44c>
 800ceae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ceb0:	1c7a      	adds	r2, r7, #1
 800ceb2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ceb4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ceb6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800ceb8:	47b0      	blx	r6
 800ceba:	3001      	adds	r0, #1
 800cebc:	d10e      	bne.n	800cedc <_printf_float+0x444>
 800cebe:	e647      	b.n	800cb50 <_printf_float+0xb8>
 800cec0:	002a      	movs	r2, r5
 800cec2:	2301      	movs	r3, #1
 800cec4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cec6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cec8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800ceca:	321a      	adds	r2, #26
 800cecc:	47b8      	blx	r7
 800cece:	3001      	adds	r0, #1
 800ced0:	d100      	bne.n	800ced4 <_printf_float+0x43c>
 800ced2:	e63d      	b.n	800cb50 <_printf_float+0xb8>
 800ced4:	3601      	adds	r6, #1
 800ced6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ced8:	429e      	cmp	r6, r3
 800ceda:	dbf1      	blt.n	800cec0 <_printf_float+0x428>
 800cedc:	002a      	movs	r2, r5
 800cede:	0023      	movs	r3, r4
 800cee0:	3250      	adds	r2, #80	@ 0x50
 800cee2:	e6d9      	b.n	800cc98 <_printf_float+0x200>
 800cee4:	2600      	movs	r6, #0
 800cee6:	e7f6      	b.n	800ced6 <_printf_float+0x43e>
 800cee8:	003a      	movs	r2, r7
 800ceea:	e7e2      	b.n	800ceb2 <_printf_float+0x41a>
 800ceec:	002a      	movs	r2, r5
 800ceee:	2301      	movs	r3, #1
 800cef0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cef2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cef4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800cef6:	3219      	adds	r2, #25
 800cef8:	47b0      	blx	r6
 800cefa:	3001      	adds	r0, #1
 800cefc:	d100      	bne.n	800cf00 <_printf_float+0x468>
 800cefe:	e627      	b.n	800cb50 <_printf_float+0xb8>
 800cf00:	3401      	adds	r4, #1
 800cf02:	68eb      	ldr	r3, [r5, #12]
 800cf04:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800cf06:	1a9b      	subs	r3, r3, r2
 800cf08:	42a3      	cmp	r3, r4
 800cf0a:	dcef      	bgt.n	800ceec <_printf_float+0x454>
 800cf0c:	e6f8      	b.n	800cd00 <_printf_float+0x268>
 800cf0e:	2400      	movs	r4, #0
 800cf10:	e7f7      	b.n	800cf02 <_printf_float+0x46a>
 800cf12:	46c0      	nop			@ (mov r8, r8)

0800cf14 <_printf_common>:
 800cf14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf16:	0016      	movs	r6, r2
 800cf18:	9301      	str	r3, [sp, #4]
 800cf1a:	688a      	ldr	r2, [r1, #8]
 800cf1c:	690b      	ldr	r3, [r1, #16]
 800cf1e:	000c      	movs	r4, r1
 800cf20:	9000      	str	r0, [sp, #0]
 800cf22:	4293      	cmp	r3, r2
 800cf24:	da00      	bge.n	800cf28 <_printf_common+0x14>
 800cf26:	0013      	movs	r3, r2
 800cf28:	0022      	movs	r2, r4
 800cf2a:	6033      	str	r3, [r6, #0]
 800cf2c:	3243      	adds	r2, #67	@ 0x43
 800cf2e:	7812      	ldrb	r2, [r2, #0]
 800cf30:	2a00      	cmp	r2, #0
 800cf32:	d001      	beq.n	800cf38 <_printf_common+0x24>
 800cf34:	3301      	adds	r3, #1
 800cf36:	6033      	str	r3, [r6, #0]
 800cf38:	6823      	ldr	r3, [r4, #0]
 800cf3a:	069b      	lsls	r3, r3, #26
 800cf3c:	d502      	bpl.n	800cf44 <_printf_common+0x30>
 800cf3e:	6833      	ldr	r3, [r6, #0]
 800cf40:	3302      	adds	r3, #2
 800cf42:	6033      	str	r3, [r6, #0]
 800cf44:	6822      	ldr	r2, [r4, #0]
 800cf46:	2306      	movs	r3, #6
 800cf48:	0015      	movs	r5, r2
 800cf4a:	401d      	ands	r5, r3
 800cf4c:	421a      	tst	r2, r3
 800cf4e:	d027      	beq.n	800cfa0 <_printf_common+0x8c>
 800cf50:	0023      	movs	r3, r4
 800cf52:	3343      	adds	r3, #67	@ 0x43
 800cf54:	781b      	ldrb	r3, [r3, #0]
 800cf56:	1e5a      	subs	r2, r3, #1
 800cf58:	4193      	sbcs	r3, r2
 800cf5a:	6822      	ldr	r2, [r4, #0]
 800cf5c:	0692      	lsls	r2, r2, #26
 800cf5e:	d430      	bmi.n	800cfc2 <_printf_common+0xae>
 800cf60:	0022      	movs	r2, r4
 800cf62:	9901      	ldr	r1, [sp, #4]
 800cf64:	9800      	ldr	r0, [sp, #0]
 800cf66:	9d08      	ldr	r5, [sp, #32]
 800cf68:	3243      	adds	r2, #67	@ 0x43
 800cf6a:	47a8      	blx	r5
 800cf6c:	3001      	adds	r0, #1
 800cf6e:	d025      	beq.n	800cfbc <_printf_common+0xa8>
 800cf70:	2206      	movs	r2, #6
 800cf72:	6823      	ldr	r3, [r4, #0]
 800cf74:	2500      	movs	r5, #0
 800cf76:	4013      	ands	r3, r2
 800cf78:	2b04      	cmp	r3, #4
 800cf7a:	d105      	bne.n	800cf88 <_printf_common+0x74>
 800cf7c:	6833      	ldr	r3, [r6, #0]
 800cf7e:	68e5      	ldr	r5, [r4, #12]
 800cf80:	1aed      	subs	r5, r5, r3
 800cf82:	43eb      	mvns	r3, r5
 800cf84:	17db      	asrs	r3, r3, #31
 800cf86:	401d      	ands	r5, r3
 800cf88:	68a3      	ldr	r3, [r4, #8]
 800cf8a:	6922      	ldr	r2, [r4, #16]
 800cf8c:	4293      	cmp	r3, r2
 800cf8e:	dd01      	ble.n	800cf94 <_printf_common+0x80>
 800cf90:	1a9b      	subs	r3, r3, r2
 800cf92:	18ed      	adds	r5, r5, r3
 800cf94:	2600      	movs	r6, #0
 800cf96:	42b5      	cmp	r5, r6
 800cf98:	d120      	bne.n	800cfdc <_printf_common+0xc8>
 800cf9a:	2000      	movs	r0, #0
 800cf9c:	e010      	b.n	800cfc0 <_printf_common+0xac>
 800cf9e:	3501      	adds	r5, #1
 800cfa0:	68e3      	ldr	r3, [r4, #12]
 800cfa2:	6832      	ldr	r2, [r6, #0]
 800cfa4:	1a9b      	subs	r3, r3, r2
 800cfa6:	42ab      	cmp	r3, r5
 800cfa8:	ddd2      	ble.n	800cf50 <_printf_common+0x3c>
 800cfaa:	0022      	movs	r2, r4
 800cfac:	2301      	movs	r3, #1
 800cfae:	9901      	ldr	r1, [sp, #4]
 800cfb0:	9800      	ldr	r0, [sp, #0]
 800cfb2:	9f08      	ldr	r7, [sp, #32]
 800cfb4:	3219      	adds	r2, #25
 800cfb6:	47b8      	blx	r7
 800cfb8:	3001      	adds	r0, #1
 800cfba:	d1f0      	bne.n	800cf9e <_printf_common+0x8a>
 800cfbc:	2001      	movs	r0, #1
 800cfbe:	4240      	negs	r0, r0
 800cfc0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cfc2:	2030      	movs	r0, #48	@ 0x30
 800cfc4:	18e1      	adds	r1, r4, r3
 800cfc6:	3143      	adds	r1, #67	@ 0x43
 800cfc8:	7008      	strb	r0, [r1, #0]
 800cfca:	0021      	movs	r1, r4
 800cfcc:	1c5a      	adds	r2, r3, #1
 800cfce:	3145      	adds	r1, #69	@ 0x45
 800cfd0:	7809      	ldrb	r1, [r1, #0]
 800cfd2:	18a2      	adds	r2, r4, r2
 800cfd4:	3243      	adds	r2, #67	@ 0x43
 800cfd6:	3302      	adds	r3, #2
 800cfd8:	7011      	strb	r1, [r2, #0]
 800cfda:	e7c1      	b.n	800cf60 <_printf_common+0x4c>
 800cfdc:	0022      	movs	r2, r4
 800cfde:	2301      	movs	r3, #1
 800cfe0:	9901      	ldr	r1, [sp, #4]
 800cfe2:	9800      	ldr	r0, [sp, #0]
 800cfe4:	9f08      	ldr	r7, [sp, #32]
 800cfe6:	321a      	adds	r2, #26
 800cfe8:	47b8      	blx	r7
 800cfea:	3001      	adds	r0, #1
 800cfec:	d0e6      	beq.n	800cfbc <_printf_common+0xa8>
 800cfee:	3601      	adds	r6, #1
 800cff0:	e7d1      	b.n	800cf96 <_printf_common+0x82>
	...

0800cff4 <_printf_i>:
 800cff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cff6:	b08b      	sub	sp, #44	@ 0x2c
 800cff8:	9206      	str	r2, [sp, #24]
 800cffa:	000a      	movs	r2, r1
 800cffc:	3243      	adds	r2, #67	@ 0x43
 800cffe:	9307      	str	r3, [sp, #28]
 800d000:	9005      	str	r0, [sp, #20]
 800d002:	9203      	str	r2, [sp, #12]
 800d004:	7e0a      	ldrb	r2, [r1, #24]
 800d006:	000c      	movs	r4, r1
 800d008:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d00a:	2a78      	cmp	r2, #120	@ 0x78
 800d00c:	d809      	bhi.n	800d022 <_printf_i+0x2e>
 800d00e:	2a62      	cmp	r2, #98	@ 0x62
 800d010:	d80b      	bhi.n	800d02a <_printf_i+0x36>
 800d012:	2a00      	cmp	r2, #0
 800d014:	d100      	bne.n	800d018 <_printf_i+0x24>
 800d016:	e0ba      	b.n	800d18e <_printf_i+0x19a>
 800d018:	497a      	ldr	r1, [pc, #488]	@ (800d204 <_printf_i+0x210>)
 800d01a:	9104      	str	r1, [sp, #16]
 800d01c:	2a58      	cmp	r2, #88	@ 0x58
 800d01e:	d100      	bne.n	800d022 <_printf_i+0x2e>
 800d020:	e08e      	b.n	800d140 <_printf_i+0x14c>
 800d022:	0025      	movs	r5, r4
 800d024:	3542      	adds	r5, #66	@ 0x42
 800d026:	702a      	strb	r2, [r5, #0]
 800d028:	e022      	b.n	800d070 <_printf_i+0x7c>
 800d02a:	0010      	movs	r0, r2
 800d02c:	3863      	subs	r0, #99	@ 0x63
 800d02e:	2815      	cmp	r0, #21
 800d030:	d8f7      	bhi.n	800d022 <_printf_i+0x2e>
 800d032:	f7f3 f877 	bl	8000124 <__gnu_thumb1_case_shi>
 800d036:	0016      	.short	0x0016
 800d038:	fff6001f 	.word	0xfff6001f
 800d03c:	fff6fff6 	.word	0xfff6fff6
 800d040:	001ffff6 	.word	0x001ffff6
 800d044:	fff6fff6 	.word	0xfff6fff6
 800d048:	fff6fff6 	.word	0xfff6fff6
 800d04c:	0036009f 	.word	0x0036009f
 800d050:	fff6007e 	.word	0xfff6007e
 800d054:	00b0fff6 	.word	0x00b0fff6
 800d058:	0036fff6 	.word	0x0036fff6
 800d05c:	fff6fff6 	.word	0xfff6fff6
 800d060:	0082      	.short	0x0082
 800d062:	0025      	movs	r5, r4
 800d064:	681a      	ldr	r2, [r3, #0]
 800d066:	3542      	adds	r5, #66	@ 0x42
 800d068:	1d11      	adds	r1, r2, #4
 800d06a:	6019      	str	r1, [r3, #0]
 800d06c:	6813      	ldr	r3, [r2, #0]
 800d06e:	702b      	strb	r3, [r5, #0]
 800d070:	2301      	movs	r3, #1
 800d072:	e09e      	b.n	800d1b2 <_printf_i+0x1be>
 800d074:	6818      	ldr	r0, [r3, #0]
 800d076:	6809      	ldr	r1, [r1, #0]
 800d078:	1d02      	adds	r2, r0, #4
 800d07a:	060d      	lsls	r5, r1, #24
 800d07c:	d50b      	bpl.n	800d096 <_printf_i+0xa2>
 800d07e:	6806      	ldr	r6, [r0, #0]
 800d080:	601a      	str	r2, [r3, #0]
 800d082:	2e00      	cmp	r6, #0
 800d084:	da03      	bge.n	800d08e <_printf_i+0x9a>
 800d086:	232d      	movs	r3, #45	@ 0x2d
 800d088:	9a03      	ldr	r2, [sp, #12]
 800d08a:	4276      	negs	r6, r6
 800d08c:	7013      	strb	r3, [r2, #0]
 800d08e:	4b5d      	ldr	r3, [pc, #372]	@ (800d204 <_printf_i+0x210>)
 800d090:	270a      	movs	r7, #10
 800d092:	9304      	str	r3, [sp, #16]
 800d094:	e018      	b.n	800d0c8 <_printf_i+0xd4>
 800d096:	6806      	ldr	r6, [r0, #0]
 800d098:	601a      	str	r2, [r3, #0]
 800d09a:	0649      	lsls	r1, r1, #25
 800d09c:	d5f1      	bpl.n	800d082 <_printf_i+0x8e>
 800d09e:	b236      	sxth	r6, r6
 800d0a0:	e7ef      	b.n	800d082 <_printf_i+0x8e>
 800d0a2:	6808      	ldr	r0, [r1, #0]
 800d0a4:	6819      	ldr	r1, [r3, #0]
 800d0a6:	c940      	ldmia	r1!, {r6}
 800d0a8:	0605      	lsls	r5, r0, #24
 800d0aa:	d402      	bmi.n	800d0b2 <_printf_i+0xbe>
 800d0ac:	0640      	lsls	r0, r0, #25
 800d0ae:	d500      	bpl.n	800d0b2 <_printf_i+0xbe>
 800d0b0:	b2b6      	uxth	r6, r6
 800d0b2:	6019      	str	r1, [r3, #0]
 800d0b4:	4b53      	ldr	r3, [pc, #332]	@ (800d204 <_printf_i+0x210>)
 800d0b6:	270a      	movs	r7, #10
 800d0b8:	9304      	str	r3, [sp, #16]
 800d0ba:	2a6f      	cmp	r2, #111	@ 0x6f
 800d0bc:	d100      	bne.n	800d0c0 <_printf_i+0xcc>
 800d0be:	3f02      	subs	r7, #2
 800d0c0:	0023      	movs	r3, r4
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	3343      	adds	r3, #67	@ 0x43
 800d0c6:	701a      	strb	r2, [r3, #0]
 800d0c8:	6863      	ldr	r3, [r4, #4]
 800d0ca:	60a3      	str	r3, [r4, #8]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	db06      	blt.n	800d0de <_printf_i+0xea>
 800d0d0:	2104      	movs	r1, #4
 800d0d2:	6822      	ldr	r2, [r4, #0]
 800d0d4:	9d03      	ldr	r5, [sp, #12]
 800d0d6:	438a      	bics	r2, r1
 800d0d8:	6022      	str	r2, [r4, #0]
 800d0da:	4333      	orrs	r3, r6
 800d0dc:	d00c      	beq.n	800d0f8 <_printf_i+0x104>
 800d0de:	9d03      	ldr	r5, [sp, #12]
 800d0e0:	0030      	movs	r0, r6
 800d0e2:	0039      	movs	r1, r7
 800d0e4:	f7f3 f8ae 	bl	8000244 <__aeabi_uidivmod>
 800d0e8:	9b04      	ldr	r3, [sp, #16]
 800d0ea:	3d01      	subs	r5, #1
 800d0ec:	5c5b      	ldrb	r3, [r3, r1]
 800d0ee:	702b      	strb	r3, [r5, #0]
 800d0f0:	0033      	movs	r3, r6
 800d0f2:	0006      	movs	r6, r0
 800d0f4:	429f      	cmp	r7, r3
 800d0f6:	d9f3      	bls.n	800d0e0 <_printf_i+0xec>
 800d0f8:	2f08      	cmp	r7, #8
 800d0fa:	d109      	bne.n	800d110 <_printf_i+0x11c>
 800d0fc:	6823      	ldr	r3, [r4, #0]
 800d0fe:	07db      	lsls	r3, r3, #31
 800d100:	d506      	bpl.n	800d110 <_printf_i+0x11c>
 800d102:	6862      	ldr	r2, [r4, #4]
 800d104:	6923      	ldr	r3, [r4, #16]
 800d106:	429a      	cmp	r2, r3
 800d108:	dc02      	bgt.n	800d110 <_printf_i+0x11c>
 800d10a:	2330      	movs	r3, #48	@ 0x30
 800d10c:	3d01      	subs	r5, #1
 800d10e:	702b      	strb	r3, [r5, #0]
 800d110:	9b03      	ldr	r3, [sp, #12]
 800d112:	1b5b      	subs	r3, r3, r5
 800d114:	6123      	str	r3, [r4, #16]
 800d116:	9b07      	ldr	r3, [sp, #28]
 800d118:	0021      	movs	r1, r4
 800d11a:	9300      	str	r3, [sp, #0]
 800d11c:	9805      	ldr	r0, [sp, #20]
 800d11e:	9b06      	ldr	r3, [sp, #24]
 800d120:	aa09      	add	r2, sp, #36	@ 0x24
 800d122:	f7ff fef7 	bl	800cf14 <_printf_common>
 800d126:	3001      	adds	r0, #1
 800d128:	d148      	bne.n	800d1bc <_printf_i+0x1c8>
 800d12a:	2001      	movs	r0, #1
 800d12c:	4240      	negs	r0, r0
 800d12e:	b00b      	add	sp, #44	@ 0x2c
 800d130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d132:	2220      	movs	r2, #32
 800d134:	6809      	ldr	r1, [r1, #0]
 800d136:	430a      	orrs	r2, r1
 800d138:	6022      	str	r2, [r4, #0]
 800d13a:	2278      	movs	r2, #120	@ 0x78
 800d13c:	4932      	ldr	r1, [pc, #200]	@ (800d208 <_printf_i+0x214>)
 800d13e:	9104      	str	r1, [sp, #16]
 800d140:	0021      	movs	r1, r4
 800d142:	3145      	adds	r1, #69	@ 0x45
 800d144:	700a      	strb	r2, [r1, #0]
 800d146:	6819      	ldr	r1, [r3, #0]
 800d148:	6822      	ldr	r2, [r4, #0]
 800d14a:	c940      	ldmia	r1!, {r6}
 800d14c:	0610      	lsls	r0, r2, #24
 800d14e:	d402      	bmi.n	800d156 <_printf_i+0x162>
 800d150:	0650      	lsls	r0, r2, #25
 800d152:	d500      	bpl.n	800d156 <_printf_i+0x162>
 800d154:	b2b6      	uxth	r6, r6
 800d156:	6019      	str	r1, [r3, #0]
 800d158:	07d3      	lsls	r3, r2, #31
 800d15a:	d502      	bpl.n	800d162 <_printf_i+0x16e>
 800d15c:	2320      	movs	r3, #32
 800d15e:	4313      	orrs	r3, r2
 800d160:	6023      	str	r3, [r4, #0]
 800d162:	2e00      	cmp	r6, #0
 800d164:	d001      	beq.n	800d16a <_printf_i+0x176>
 800d166:	2710      	movs	r7, #16
 800d168:	e7aa      	b.n	800d0c0 <_printf_i+0xcc>
 800d16a:	2220      	movs	r2, #32
 800d16c:	6823      	ldr	r3, [r4, #0]
 800d16e:	4393      	bics	r3, r2
 800d170:	6023      	str	r3, [r4, #0]
 800d172:	e7f8      	b.n	800d166 <_printf_i+0x172>
 800d174:	681a      	ldr	r2, [r3, #0]
 800d176:	680d      	ldr	r5, [r1, #0]
 800d178:	1d10      	adds	r0, r2, #4
 800d17a:	6949      	ldr	r1, [r1, #20]
 800d17c:	6018      	str	r0, [r3, #0]
 800d17e:	6813      	ldr	r3, [r2, #0]
 800d180:	062e      	lsls	r6, r5, #24
 800d182:	d501      	bpl.n	800d188 <_printf_i+0x194>
 800d184:	6019      	str	r1, [r3, #0]
 800d186:	e002      	b.n	800d18e <_printf_i+0x19a>
 800d188:	066d      	lsls	r5, r5, #25
 800d18a:	d5fb      	bpl.n	800d184 <_printf_i+0x190>
 800d18c:	8019      	strh	r1, [r3, #0]
 800d18e:	2300      	movs	r3, #0
 800d190:	9d03      	ldr	r5, [sp, #12]
 800d192:	6123      	str	r3, [r4, #16]
 800d194:	e7bf      	b.n	800d116 <_printf_i+0x122>
 800d196:	681a      	ldr	r2, [r3, #0]
 800d198:	1d11      	adds	r1, r2, #4
 800d19a:	6019      	str	r1, [r3, #0]
 800d19c:	6815      	ldr	r5, [r2, #0]
 800d19e:	2100      	movs	r1, #0
 800d1a0:	0028      	movs	r0, r5
 800d1a2:	6862      	ldr	r2, [r4, #4]
 800d1a4:	f000 fbbb 	bl	800d91e <memchr>
 800d1a8:	2800      	cmp	r0, #0
 800d1aa:	d001      	beq.n	800d1b0 <_printf_i+0x1bc>
 800d1ac:	1b40      	subs	r0, r0, r5
 800d1ae:	6060      	str	r0, [r4, #4]
 800d1b0:	6863      	ldr	r3, [r4, #4]
 800d1b2:	6123      	str	r3, [r4, #16]
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	9a03      	ldr	r2, [sp, #12]
 800d1b8:	7013      	strb	r3, [r2, #0]
 800d1ba:	e7ac      	b.n	800d116 <_printf_i+0x122>
 800d1bc:	002a      	movs	r2, r5
 800d1be:	6923      	ldr	r3, [r4, #16]
 800d1c0:	9906      	ldr	r1, [sp, #24]
 800d1c2:	9805      	ldr	r0, [sp, #20]
 800d1c4:	9d07      	ldr	r5, [sp, #28]
 800d1c6:	47a8      	blx	r5
 800d1c8:	3001      	adds	r0, #1
 800d1ca:	d0ae      	beq.n	800d12a <_printf_i+0x136>
 800d1cc:	6823      	ldr	r3, [r4, #0]
 800d1ce:	079b      	lsls	r3, r3, #30
 800d1d0:	d415      	bmi.n	800d1fe <_printf_i+0x20a>
 800d1d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1d4:	68e0      	ldr	r0, [r4, #12]
 800d1d6:	4298      	cmp	r0, r3
 800d1d8:	daa9      	bge.n	800d12e <_printf_i+0x13a>
 800d1da:	0018      	movs	r0, r3
 800d1dc:	e7a7      	b.n	800d12e <_printf_i+0x13a>
 800d1de:	0022      	movs	r2, r4
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	9906      	ldr	r1, [sp, #24]
 800d1e4:	9805      	ldr	r0, [sp, #20]
 800d1e6:	9e07      	ldr	r6, [sp, #28]
 800d1e8:	3219      	adds	r2, #25
 800d1ea:	47b0      	blx	r6
 800d1ec:	3001      	adds	r0, #1
 800d1ee:	d09c      	beq.n	800d12a <_printf_i+0x136>
 800d1f0:	3501      	adds	r5, #1
 800d1f2:	68e3      	ldr	r3, [r4, #12]
 800d1f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d1f6:	1a9b      	subs	r3, r3, r2
 800d1f8:	42ab      	cmp	r3, r5
 800d1fa:	dcf0      	bgt.n	800d1de <_printf_i+0x1ea>
 800d1fc:	e7e9      	b.n	800d1d2 <_printf_i+0x1de>
 800d1fe:	2500      	movs	r5, #0
 800d200:	e7f7      	b.n	800d1f2 <_printf_i+0x1fe>
 800d202:	46c0      	nop			@ (mov r8, r8)
 800d204:	08010752 	.word	0x08010752
 800d208:	08010763 	.word	0x08010763

0800d20c <__sflush_r>:
 800d20c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d20e:	220c      	movs	r2, #12
 800d210:	5e8b      	ldrsh	r3, [r1, r2]
 800d212:	0005      	movs	r5, r0
 800d214:	000c      	movs	r4, r1
 800d216:	071a      	lsls	r2, r3, #28
 800d218:	d456      	bmi.n	800d2c8 <__sflush_r+0xbc>
 800d21a:	684a      	ldr	r2, [r1, #4]
 800d21c:	2a00      	cmp	r2, #0
 800d21e:	dc02      	bgt.n	800d226 <__sflush_r+0x1a>
 800d220:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800d222:	2a00      	cmp	r2, #0
 800d224:	dd4e      	ble.n	800d2c4 <__sflush_r+0xb8>
 800d226:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800d228:	2f00      	cmp	r7, #0
 800d22a:	d04b      	beq.n	800d2c4 <__sflush_r+0xb8>
 800d22c:	2200      	movs	r2, #0
 800d22e:	2080      	movs	r0, #128	@ 0x80
 800d230:	682e      	ldr	r6, [r5, #0]
 800d232:	602a      	str	r2, [r5, #0]
 800d234:	001a      	movs	r2, r3
 800d236:	0140      	lsls	r0, r0, #5
 800d238:	6a21      	ldr	r1, [r4, #32]
 800d23a:	4002      	ands	r2, r0
 800d23c:	4203      	tst	r3, r0
 800d23e:	d033      	beq.n	800d2a8 <__sflush_r+0x9c>
 800d240:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d242:	89a3      	ldrh	r3, [r4, #12]
 800d244:	075b      	lsls	r3, r3, #29
 800d246:	d506      	bpl.n	800d256 <__sflush_r+0x4a>
 800d248:	6863      	ldr	r3, [r4, #4]
 800d24a:	1ad2      	subs	r2, r2, r3
 800d24c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d001      	beq.n	800d256 <__sflush_r+0x4a>
 800d252:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d254:	1ad2      	subs	r2, r2, r3
 800d256:	2300      	movs	r3, #0
 800d258:	0028      	movs	r0, r5
 800d25a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800d25c:	6a21      	ldr	r1, [r4, #32]
 800d25e:	47b8      	blx	r7
 800d260:	89a2      	ldrh	r2, [r4, #12]
 800d262:	1c43      	adds	r3, r0, #1
 800d264:	d106      	bne.n	800d274 <__sflush_r+0x68>
 800d266:	6829      	ldr	r1, [r5, #0]
 800d268:	291d      	cmp	r1, #29
 800d26a:	d846      	bhi.n	800d2fa <__sflush_r+0xee>
 800d26c:	4b29      	ldr	r3, [pc, #164]	@ (800d314 <__sflush_r+0x108>)
 800d26e:	40cb      	lsrs	r3, r1
 800d270:	07db      	lsls	r3, r3, #31
 800d272:	d542      	bpl.n	800d2fa <__sflush_r+0xee>
 800d274:	2300      	movs	r3, #0
 800d276:	6063      	str	r3, [r4, #4]
 800d278:	6923      	ldr	r3, [r4, #16]
 800d27a:	6023      	str	r3, [r4, #0]
 800d27c:	04d2      	lsls	r2, r2, #19
 800d27e:	d505      	bpl.n	800d28c <__sflush_r+0x80>
 800d280:	1c43      	adds	r3, r0, #1
 800d282:	d102      	bne.n	800d28a <__sflush_r+0x7e>
 800d284:	682b      	ldr	r3, [r5, #0]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d100      	bne.n	800d28c <__sflush_r+0x80>
 800d28a:	6560      	str	r0, [r4, #84]	@ 0x54
 800d28c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d28e:	602e      	str	r6, [r5, #0]
 800d290:	2900      	cmp	r1, #0
 800d292:	d017      	beq.n	800d2c4 <__sflush_r+0xb8>
 800d294:	0023      	movs	r3, r4
 800d296:	3344      	adds	r3, #68	@ 0x44
 800d298:	4299      	cmp	r1, r3
 800d29a:	d002      	beq.n	800d2a2 <__sflush_r+0x96>
 800d29c:	0028      	movs	r0, r5
 800d29e:	f001 f9c7 	bl	800e630 <_free_r>
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	6363      	str	r3, [r4, #52]	@ 0x34
 800d2a6:	e00d      	b.n	800d2c4 <__sflush_r+0xb8>
 800d2a8:	2301      	movs	r3, #1
 800d2aa:	0028      	movs	r0, r5
 800d2ac:	47b8      	blx	r7
 800d2ae:	0002      	movs	r2, r0
 800d2b0:	1c43      	adds	r3, r0, #1
 800d2b2:	d1c6      	bne.n	800d242 <__sflush_r+0x36>
 800d2b4:	682b      	ldr	r3, [r5, #0]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d0c3      	beq.n	800d242 <__sflush_r+0x36>
 800d2ba:	2b1d      	cmp	r3, #29
 800d2bc:	d001      	beq.n	800d2c2 <__sflush_r+0xb6>
 800d2be:	2b16      	cmp	r3, #22
 800d2c0:	d11a      	bne.n	800d2f8 <__sflush_r+0xec>
 800d2c2:	602e      	str	r6, [r5, #0]
 800d2c4:	2000      	movs	r0, #0
 800d2c6:	e01e      	b.n	800d306 <__sflush_r+0xfa>
 800d2c8:	690e      	ldr	r6, [r1, #16]
 800d2ca:	2e00      	cmp	r6, #0
 800d2cc:	d0fa      	beq.n	800d2c4 <__sflush_r+0xb8>
 800d2ce:	680f      	ldr	r7, [r1, #0]
 800d2d0:	600e      	str	r6, [r1, #0]
 800d2d2:	1bba      	subs	r2, r7, r6
 800d2d4:	9201      	str	r2, [sp, #4]
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	079b      	lsls	r3, r3, #30
 800d2da:	d100      	bne.n	800d2de <__sflush_r+0xd2>
 800d2dc:	694a      	ldr	r2, [r1, #20]
 800d2de:	60a2      	str	r2, [r4, #8]
 800d2e0:	9b01      	ldr	r3, [sp, #4]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	ddee      	ble.n	800d2c4 <__sflush_r+0xb8>
 800d2e6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800d2e8:	0032      	movs	r2, r6
 800d2ea:	001f      	movs	r7, r3
 800d2ec:	0028      	movs	r0, r5
 800d2ee:	9b01      	ldr	r3, [sp, #4]
 800d2f0:	6a21      	ldr	r1, [r4, #32]
 800d2f2:	47b8      	blx	r7
 800d2f4:	2800      	cmp	r0, #0
 800d2f6:	dc07      	bgt.n	800d308 <__sflush_r+0xfc>
 800d2f8:	89a2      	ldrh	r2, [r4, #12]
 800d2fa:	2340      	movs	r3, #64	@ 0x40
 800d2fc:	2001      	movs	r0, #1
 800d2fe:	4313      	orrs	r3, r2
 800d300:	b21b      	sxth	r3, r3
 800d302:	81a3      	strh	r3, [r4, #12]
 800d304:	4240      	negs	r0, r0
 800d306:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d308:	9b01      	ldr	r3, [sp, #4]
 800d30a:	1836      	adds	r6, r6, r0
 800d30c:	1a1b      	subs	r3, r3, r0
 800d30e:	9301      	str	r3, [sp, #4]
 800d310:	e7e6      	b.n	800d2e0 <__sflush_r+0xd4>
 800d312:	46c0      	nop			@ (mov r8, r8)
 800d314:	20400001 	.word	0x20400001

0800d318 <_fflush_r>:
 800d318:	690b      	ldr	r3, [r1, #16]
 800d31a:	b570      	push	{r4, r5, r6, lr}
 800d31c:	0005      	movs	r5, r0
 800d31e:	000c      	movs	r4, r1
 800d320:	2b00      	cmp	r3, #0
 800d322:	d102      	bne.n	800d32a <_fflush_r+0x12>
 800d324:	2500      	movs	r5, #0
 800d326:	0028      	movs	r0, r5
 800d328:	bd70      	pop	{r4, r5, r6, pc}
 800d32a:	2800      	cmp	r0, #0
 800d32c:	d004      	beq.n	800d338 <_fflush_r+0x20>
 800d32e:	6a03      	ldr	r3, [r0, #32]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d101      	bne.n	800d338 <_fflush_r+0x20>
 800d334:	f000 f8c4 	bl	800d4c0 <__sinit>
 800d338:	220c      	movs	r2, #12
 800d33a:	5ea3      	ldrsh	r3, [r4, r2]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d0f1      	beq.n	800d324 <_fflush_r+0xc>
 800d340:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d342:	07d2      	lsls	r2, r2, #31
 800d344:	d404      	bmi.n	800d350 <_fflush_r+0x38>
 800d346:	059b      	lsls	r3, r3, #22
 800d348:	d402      	bmi.n	800d350 <_fflush_r+0x38>
 800d34a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d34c:	f000 fae5 	bl	800d91a <__retarget_lock_acquire_recursive>
 800d350:	0028      	movs	r0, r5
 800d352:	0021      	movs	r1, r4
 800d354:	f7ff ff5a 	bl	800d20c <__sflush_r>
 800d358:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d35a:	0005      	movs	r5, r0
 800d35c:	07db      	lsls	r3, r3, #31
 800d35e:	d4e2      	bmi.n	800d326 <_fflush_r+0xe>
 800d360:	89a3      	ldrh	r3, [r4, #12]
 800d362:	059b      	lsls	r3, r3, #22
 800d364:	d4df      	bmi.n	800d326 <_fflush_r+0xe>
 800d366:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d368:	f000 fad8 	bl	800d91c <__retarget_lock_release_recursive>
 800d36c:	e7db      	b.n	800d326 <_fflush_r+0xe>
	...

0800d370 <fflush>:
 800d370:	0001      	movs	r1, r0
 800d372:	b510      	push	{r4, lr}
 800d374:	2800      	cmp	r0, #0
 800d376:	d105      	bne.n	800d384 <fflush+0x14>
 800d378:	4a05      	ldr	r2, [pc, #20]	@ (800d390 <fflush+0x20>)
 800d37a:	4906      	ldr	r1, [pc, #24]	@ (800d394 <fflush+0x24>)
 800d37c:	4806      	ldr	r0, [pc, #24]	@ (800d398 <fflush+0x28>)
 800d37e:	f000 f8b7 	bl	800d4f0 <_fwalk_sglue>
 800d382:	bd10      	pop	{r4, pc}
 800d384:	4b05      	ldr	r3, [pc, #20]	@ (800d39c <fflush+0x2c>)
 800d386:	6818      	ldr	r0, [r3, #0]
 800d388:	f7ff ffc6 	bl	800d318 <_fflush_r>
 800d38c:	e7f9      	b.n	800d382 <fflush+0x12>
 800d38e:	46c0      	nop			@ (mov r8, r8)
 800d390:	2000003c 	.word	0x2000003c
 800d394:	0800d319 	.word	0x0800d319
 800d398:	2000004c 	.word	0x2000004c
 800d39c:	20000048 	.word	0x20000048

0800d3a0 <std>:
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	b510      	push	{r4, lr}
 800d3a4:	0004      	movs	r4, r0
 800d3a6:	6003      	str	r3, [r0, #0]
 800d3a8:	6043      	str	r3, [r0, #4]
 800d3aa:	6083      	str	r3, [r0, #8]
 800d3ac:	8181      	strh	r1, [r0, #12]
 800d3ae:	6643      	str	r3, [r0, #100]	@ 0x64
 800d3b0:	81c2      	strh	r2, [r0, #14]
 800d3b2:	6103      	str	r3, [r0, #16]
 800d3b4:	6143      	str	r3, [r0, #20]
 800d3b6:	6183      	str	r3, [r0, #24]
 800d3b8:	0019      	movs	r1, r3
 800d3ba:	2208      	movs	r2, #8
 800d3bc:	305c      	adds	r0, #92	@ 0x5c
 800d3be:	f000 fa27 	bl	800d810 <memset>
 800d3c2:	4b0b      	ldr	r3, [pc, #44]	@ (800d3f0 <std+0x50>)
 800d3c4:	6224      	str	r4, [r4, #32]
 800d3c6:	6263      	str	r3, [r4, #36]	@ 0x24
 800d3c8:	4b0a      	ldr	r3, [pc, #40]	@ (800d3f4 <std+0x54>)
 800d3ca:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d3cc:	4b0a      	ldr	r3, [pc, #40]	@ (800d3f8 <std+0x58>)
 800d3ce:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d3d0:	4b0a      	ldr	r3, [pc, #40]	@ (800d3fc <std+0x5c>)
 800d3d2:	6323      	str	r3, [r4, #48]	@ 0x30
 800d3d4:	4b0a      	ldr	r3, [pc, #40]	@ (800d400 <std+0x60>)
 800d3d6:	429c      	cmp	r4, r3
 800d3d8:	d005      	beq.n	800d3e6 <std+0x46>
 800d3da:	4b0a      	ldr	r3, [pc, #40]	@ (800d404 <std+0x64>)
 800d3dc:	429c      	cmp	r4, r3
 800d3de:	d002      	beq.n	800d3e6 <std+0x46>
 800d3e0:	4b09      	ldr	r3, [pc, #36]	@ (800d408 <std+0x68>)
 800d3e2:	429c      	cmp	r4, r3
 800d3e4:	d103      	bne.n	800d3ee <std+0x4e>
 800d3e6:	0020      	movs	r0, r4
 800d3e8:	3058      	adds	r0, #88	@ 0x58
 800d3ea:	f000 fa95 	bl	800d918 <__retarget_lock_init_recursive>
 800d3ee:	bd10      	pop	{r4, pc}
 800d3f0:	0800d61d 	.word	0x0800d61d
 800d3f4:	0800d645 	.word	0x0800d645
 800d3f8:	0800d67d 	.word	0x0800d67d
 800d3fc:	0800d6a9 	.word	0x0800d6a9
 800d400:	20000bf4 	.word	0x20000bf4
 800d404:	20000c5c 	.word	0x20000c5c
 800d408:	20000cc4 	.word	0x20000cc4

0800d40c <stdio_exit_handler>:
 800d40c:	b510      	push	{r4, lr}
 800d40e:	4a03      	ldr	r2, [pc, #12]	@ (800d41c <stdio_exit_handler+0x10>)
 800d410:	4903      	ldr	r1, [pc, #12]	@ (800d420 <stdio_exit_handler+0x14>)
 800d412:	4804      	ldr	r0, [pc, #16]	@ (800d424 <stdio_exit_handler+0x18>)
 800d414:	f000 f86c 	bl	800d4f0 <_fwalk_sglue>
 800d418:	bd10      	pop	{r4, pc}
 800d41a:	46c0      	nop			@ (mov r8, r8)
 800d41c:	2000003c 	.word	0x2000003c
 800d420:	0800d319 	.word	0x0800d319
 800d424:	2000004c 	.word	0x2000004c

0800d428 <cleanup_stdio>:
 800d428:	6841      	ldr	r1, [r0, #4]
 800d42a:	4b0b      	ldr	r3, [pc, #44]	@ (800d458 <cleanup_stdio+0x30>)
 800d42c:	b510      	push	{r4, lr}
 800d42e:	0004      	movs	r4, r0
 800d430:	4299      	cmp	r1, r3
 800d432:	d001      	beq.n	800d438 <cleanup_stdio+0x10>
 800d434:	f7ff ff70 	bl	800d318 <_fflush_r>
 800d438:	68a1      	ldr	r1, [r4, #8]
 800d43a:	4b08      	ldr	r3, [pc, #32]	@ (800d45c <cleanup_stdio+0x34>)
 800d43c:	4299      	cmp	r1, r3
 800d43e:	d002      	beq.n	800d446 <cleanup_stdio+0x1e>
 800d440:	0020      	movs	r0, r4
 800d442:	f7ff ff69 	bl	800d318 <_fflush_r>
 800d446:	68e1      	ldr	r1, [r4, #12]
 800d448:	4b05      	ldr	r3, [pc, #20]	@ (800d460 <cleanup_stdio+0x38>)
 800d44a:	4299      	cmp	r1, r3
 800d44c:	d002      	beq.n	800d454 <cleanup_stdio+0x2c>
 800d44e:	0020      	movs	r0, r4
 800d450:	f7ff ff62 	bl	800d318 <_fflush_r>
 800d454:	bd10      	pop	{r4, pc}
 800d456:	46c0      	nop			@ (mov r8, r8)
 800d458:	20000bf4 	.word	0x20000bf4
 800d45c:	20000c5c 	.word	0x20000c5c
 800d460:	20000cc4 	.word	0x20000cc4

0800d464 <global_stdio_init.part.0>:
 800d464:	b510      	push	{r4, lr}
 800d466:	4b09      	ldr	r3, [pc, #36]	@ (800d48c <global_stdio_init.part.0+0x28>)
 800d468:	4a09      	ldr	r2, [pc, #36]	@ (800d490 <global_stdio_init.part.0+0x2c>)
 800d46a:	2104      	movs	r1, #4
 800d46c:	601a      	str	r2, [r3, #0]
 800d46e:	4809      	ldr	r0, [pc, #36]	@ (800d494 <global_stdio_init.part.0+0x30>)
 800d470:	2200      	movs	r2, #0
 800d472:	f7ff ff95 	bl	800d3a0 <std>
 800d476:	2201      	movs	r2, #1
 800d478:	2109      	movs	r1, #9
 800d47a:	4807      	ldr	r0, [pc, #28]	@ (800d498 <global_stdio_init.part.0+0x34>)
 800d47c:	f7ff ff90 	bl	800d3a0 <std>
 800d480:	2202      	movs	r2, #2
 800d482:	2112      	movs	r1, #18
 800d484:	4805      	ldr	r0, [pc, #20]	@ (800d49c <global_stdio_init.part.0+0x38>)
 800d486:	f7ff ff8b 	bl	800d3a0 <std>
 800d48a:	bd10      	pop	{r4, pc}
 800d48c:	20000d2c 	.word	0x20000d2c
 800d490:	0800d40d 	.word	0x0800d40d
 800d494:	20000bf4 	.word	0x20000bf4
 800d498:	20000c5c 	.word	0x20000c5c
 800d49c:	20000cc4 	.word	0x20000cc4

0800d4a0 <__sfp_lock_acquire>:
 800d4a0:	b510      	push	{r4, lr}
 800d4a2:	4802      	ldr	r0, [pc, #8]	@ (800d4ac <__sfp_lock_acquire+0xc>)
 800d4a4:	f000 fa39 	bl	800d91a <__retarget_lock_acquire_recursive>
 800d4a8:	bd10      	pop	{r4, pc}
 800d4aa:	46c0      	nop			@ (mov r8, r8)
 800d4ac:	20000d35 	.word	0x20000d35

0800d4b0 <__sfp_lock_release>:
 800d4b0:	b510      	push	{r4, lr}
 800d4b2:	4802      	ldr	r0, [pc, #8]	@ (800d4bc <__sfp_lock_release+0xc>)
 800d4b4:	f000 fa32 	bl	800d91c <__retarget_lock_release_recursive>
 800d4b8:	bd10      	pop	{r4, pc}
 800d4ba:	46c0      	nop			@ (mov r8, r8)
 800d4bc:	20000d35 	.word	0x20000d35

0800d4c0 <__sinit>:
 800d4c0:	b510      	push	{r4, lr}
 800d4c2:	0004      	movs	r4, r0
 800d4c4:	f7ff ffec 	bl	800d4a0 <__sfp_lock_acquire>
 800d4c8:	6a23      	ldr	r3, [r4, #32]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d002      	beq.n	800d4d4 <__sinit+0x14>
 800d4ce:	f7ff ffef 	bl	800d4b0 <__sfp_lock_release>
 800d4d2:	bd10      	pop	{r4, pc}
 800d4d4:	4b04      	ldr	r3, [pc, #16]	@ (800d4e8 <__sinit+0x28>)
 800d4d6:	6223      	str	r3, [r4, #32]
 800d4d8:	4b04      	ldr	r3, [pc, #16]	@ (800d4ec <__sinit+0x2c>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d1f6      	bne.n	800d4ce <__sinit+0xe>
 800d4e0:	f7ff ffc0 	bl	800d464 <global_stdio_init.part.0>
 800d4e4:	e7f3      	b.n	800d4ce <__sinit+0xe>
 800d4e6:	46c0      	nop			@ (mov r8, r8)
 800d4e8:	0800d429 	.word	0x0800d429
 800d4ec:	20000d2c 	.word	0x20000d2c

0800d4f0 <_fwalk_sglue>:
 800d4f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d4f2:	0014      	movs	r4, r2
 800d4f4:	2600      	movs	r6, #0
 800d4f6:	9000      	str	r0, [sp, #0]
 800d4f8:	9101      	str	r1, [sp, #4]
 800d4fa:	68a5      	ldr	r5, [r4, #8]
 800d4fc:	6867      	ldr	r7, [r4, #4]
 800d4fe:	3f01      	subs	r7, #1
 800d500:	d504      	bpl.n	800d50c <_fwalk_sglue+0x1c>
 800d502:	6824      	ldr	r4, [r4, #0]
 800d504:	2c00      	cmp	r4, #0
 800d506:	d1f8      	bne.n	800d4fa <_fwalk_sglue+0xa>
 800d508:	0030      	movs	r0, r6
 800d50a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d50c:	89ab      	ldrh	r3, [r5, #12]
 800d50e:	2b01      	cmp	r3, #1
 800d510:	d908      	bls.n	800d524 <_fwalk_sglue+0x34>
 800d512:	220e      	movs	r2, #14
 800d514:	5eab      	ldrsh	r3, [r5, r2]
 800d516:	3301      	adds	r3, #1
 800d518:	d004      	beq.n	800d524 <_fwalk_sglue+0x34>
 800d51a:	0029      	movs	r1, r5
 800d51c:	9800      	ldr	r0, [sp, #0]
 800d51e:	9b01      	ldr	r3, [sp, #4]
 800d520:	4798      	blx	r3
 800d522:	4306      	orrs	r6, r0
 800d524:	3568      	adds	r5, #104	@ 0x68
 800d526:	e7ea      	b.n	800d4fe <_fwalk_sglue+0xe>

0800d528 <iprintf>:
 800d528:	b40f      	push	{r0, r1, r2, r3}
 800d52a:	b507      	push	{r0, r1, r2, lr}
 800d52c:	4905      	ldr	r1, [pc, #20]	@ (800d544 <iprintf+0x1c>)
 800d52e:	ab04      	add	r3, sp, #16
 800d530:	6808      	ldr	r0, [r1, #0]
 800d532:	cb04      	ldmia	r3!, {r2}
 800d534:	6881      	ldr	r1, [r0, #8]
 800d536:	9301      	str	r3, [sp, #4]
 800d538:	f001 fd44 	bl	800efc4 <_vfiprintf_r>
 800d53c:	b003      	add	sp, #12
 800d53e:	bc08      	pop	{r3}
 800d540:	b004      	add	sp, #16
 800d542:	4718      	bx	r3
 800d544:	20000048 	.word	0x20000048

0800d548 <putchar>:
 800d548:	b510      	push	{r4, lr}
 800d54a:	4b03      	ldr	r3, [pc, #12]	@ (800d558 <putchar+0x10>)
 800d54c:	0001      	movs	r1, r0
 800d54e:	6818      	ldr	r0, [r3, #0]
 800d550:	6882      	ldr	r2, [r0, #8]
 800d552:	f001 febe 	bl	800f2d2 <_putc_r>
 800d556:	bd10      	pop	{r4, pc}
 800d558:	20000048 	.word	0x20000048

0800d55c <_puts_r>:
 800d55c:	6a03      	ldr	r3, [r0, #32]
 800d55e:	b570      	push	{r4, r5, r6, lr}
 800d560:	0005      	movs	r5, r0
 800d562:	000e      	movs	r6, r1
 800d564:	6884      	ldr	r4, [r0, #8]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d101      	bne.n	800d56e <_puts_r+0x12>
 800d56a:	f7ff ffa9 	bl	800d4c0 <__sinit>
 800d56e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d570:	07db      	lsls	r3, r3, #31
 800d572:	d405      	bmi.n	800d580 <_puts_r+0x24>
 800d574:	89a3      	ldrh	r3, [r4, #12]
 800d576:	059b      	lsls	r3, r3, #22
 800d578:	d402      	bmi.n	800d580 <_puts_r+0x24>
 800d57a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d57c:	f000 f9cd 	bl	800d91a <__retarget_lock_acquire_recursive>
 800d580:	89a3      	ldrh	r3, [r4, #12]
 800d582:	071b      	lsls	r3, r3, #28
 800d584:	d502      	bpl.n	800d58c <_puts_r+0x30>
 800d586:	6923      	ldr	r3, [r4, #16]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d11f      	bne.n	800d5cc <_puts_r+0x70>
 800d58c:	0021      	movs	r1, r4
 800d58e:	0028      	movs	r0, r5
 800d590:	f000 f8d2 	bl	800d738 <__swsetup_r>
 800d594:	2800      	cmp	r0, #0
 800d596:	d019      	beq.n	800d5cc <_puts_r+0x70>
 800d598:	2501      	movs	r5, #1
 800d59a:	426d      	negs	r5, r5
 800d59c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d59e:	07db      	lsls	r3, r3, #31
 800d5a0:	d405      	bmi.n	800d5ae <_puts_r+0x52>
 800d5a2:	89a3      	ldrh	r3, [r4, #12]
 800d5a4:	059b      	lsls	r3, r3, #22
 800d5a6:	d402      	bmi.n	800d5ae <_puts_r+0x52>
 800d5a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d5aa:	f000 f9b7 	bl	800d91c <__retarget_lock_release_recursive>
 800d5ae:	0028      	movs	r0, r5
 800d5b0:	bd70      	pop	{r4, r5, r6, pc}
 800d5b2:	3601      	adds	r6, #1
 800d5b4:	60a3      	str	r3, [r4, #8]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	da04      	bge.n	800d5c4 <_puts_r+0x68>
 800d5ba:	69a2      	ldr	r2, [r4, #24]
 800d5bc:	429a      	cmp	r2, r3
 800d5be:	dc16      	bgt.n	800d5ee <_puts_r+0x92>
 800d5c0:	290a      	cmp	r1, #10
 800d5c2:	d014      	beq.n	800d5ee <_puts_r+0x92>
 800d5c4:	6823      	ldr	r3, [r4, #0]
 800d5c6:	1c5a      	adds	r2, r3, #1
 800d5c8:	6022      	str	r2, [r4, #0]
 800d5ca:	7019      	strb	r1, [r3, #0]
 800d5cc:	68a3      	ldr	r3, [r4, #8]
 800d5ce:	7831      	ldrb	r1, [r6, #0]
 800d5d0:	3b01      	subs	r3, #1
 800d5d2:	2900      	cmp	r1, #0
 800d5d4:	d1ed      	bne.n	800d5b2 <_puts_r+0x56>
 800d5d6:	60a3      	str	r3, [r4, #8]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	da0f      	bge.n	800d5fc <_puts_r+0xa0>
 800d5dc:	0022      	movs	r2, r4
 800d5de:	0028      	movs	r0, r5
 800d5e0:	310a      	adds	r1, #10
 800d5e2:	f000 f867 	bl	800d6b4 <__swbuf_r>
 800d5e6:	3001      	adds	r0, #1
 800d5e8:	d0d6      	beq.n	800d598 <_puts_r+0x3c>
 800d5ea:	250a      	movs	r5, #10
 800d5ec:	e7d6      	b.n	800d59c <_puts_r+0x40>
 800d5ee:	0022      	movs	r2, r4
 800d5f0:	0028      	movs	r0, r5
 800d5f2:	f000 f85f 	bl	800d6b4 <__swbuf_r>
 800d5f6:	3001      	adds	r0, #1
 800d5f8:	d1e8      	bne.n	800d5cc <_puts_r+0x70>
 800d5fa:	e7cd      	b.n	800d598 <_puts_r+0x3c>
 800d5fc:	6823      	ldr	r3, [r4, #0]
 800d5fe:	1c5a      	adds	r2, r3, #1
 800d600:	6022      	str	r2, [r4, #0]
 800d602:	220a      	movs	r2, #10
 800d604:	701a      	strb	r2, [r3, #0]
 800d606:	e7f0      	b.n	800d5ea <_puts_r+0x8e>

0800d608 <puts>:
 800d608:	b510      	push	{r4, lr}
 800d60a:	4b03      	ldr	r3, [pc, #12]	@ (800d618 <puts+0x10>)
 800d60c:	0001      	movs	r1, r0
 800d60e:	6818      	ldr	r0, [r3, #0]
 800d610:	f7ff ffa4 	bl	800d55c <_puts_r>
 800d614:	bd10      	pop	{r4, pc}
 800d616:	46c0      	nop			@ (mov r8, r8)
 800d618:	20000048 	.word	0x20000048

0800d61c <__sread>:
 800d61c:	b570      	push	{r4, r5, r6, lr}
 800d61e:	000c      	movs	r4, r1
 800d620:	250e      	movs	r5, #14
 800d622:	5f49      	ldrsh	r1, [r1, r5]
 800d624:	f000 f926 	bl	800d874 <_read_r>
 800d628:	2800      	cmp	r0, #0
 800d62a:	db03      	blt.n	800d634 <__sread+0x18>
 800d62c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800d62e:	181b      	adds	r3, r3, r0
 800d630:	6563      	str	r3, [r4, #84]	@ 0x54
 800d632:	bd70      	pop	{r4, r5, r6, pc}
 800d634:	89a3      	ldrh	r3, [r4, #12]
 800d636:	4a02      	ldr	r2, [pc, #8]	@ (800d640 <__sread+0x24>)
 800d638:	4013      	ands	r3, r2
 800d63a:	81a3      	strh	r3, [r4, #12]
 800d63c:	e7f9      	b.n	800d632 <__sread+0x16>
 800d63e:	46c0      	nop			@ (mov r8, r8)
 800d640:	ffffefff 	.word	0xffffefff

0800d644 <__swrite>:
 800d644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d646:	001f      	movs	r7, r3
 800d648:	898b      	ldrh	r3, [r1, #12]
 800d64a:	0005      	movs	r5, r0
 800d64c:	000c      	movs	r4, r1
 800d64e:	0016      	movs	r6, r2
 800d650:	05db      	lsls	r3, r3, #23
 800d652:	d505      	bpl.n	800d660 <__swrite+0x1c>
 800d654:	230e      	movs	r3, #14
 800d656:	5ec9      	ldrsh	r1, [r1, r3]
 800d658:	2200      	movs	r2, #0
 800d65a:	2302      	movs	r3, #2
 800d65c:	f000 f8f6 	bl	800d84c <_lseek_r>
 800d660:	89a3      	ldrh	r3, [r4, #12]
 800d662:	4a05      	ldr	r2, [pc, #20]	@ (800d678 <__swrite+0x34>)
 800d664:	0028      	movs	r0, r5
 800d666:	4013      	ands	r3, r2
 800d668:	81a3      	strh	r3, [r4, #12]
 800d66a:	0032      	movs	r2, r6
 800d66c:	230e      	movs	r3, #14
 800d66e:	5ee1      	ldrsh	r1, [r4, r3]
 800d670:	003b      	movs	r3, r7
 800d672:	f000 f913 	bl	800d89c <_write_r>
 800d676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d678:	ffffefff 	.word	0xffffefff

0800d67c <__sseek>:
 800d67c:	b570      	push	{r4, r5, r6, lr}
 800d67e:	000c      	movs	r4, r1
 800d680:	250e      	movs	r5, #14
 800d682:	5f49      	ldrsh	r1, [r1, r5]
 800d684:	f000 f8e2 	bl	800d84c <_lseek_r>
 800d688:	89a3      	ldrh	r3, [r4, #12]
 800d68a:	1c42      	adds	r2, r0, #1
 800d68c:	d103      	bne.n	800d696 <__sseek+0x1a>
 800d68e:	4a05      	ldr	r2, [pc, #20]	@ (800d6a4 <__sseek+0x28>)
 800d690:	4013      	ands	r3, r2
 800d692:	81a3      	strh	r3, [r4, #12]
 800d694:	bd70      	pop	{r4, r5, r6, pc}
 800d696:	2280      	movs	r2, #128	@ 0x80
 800d698:	0152      	lsls	r2, r2, #5
 800d69a:	4313      	orrs	r3, r2
 800d69c:	81a3      	strh	r3, [r4, #12]
 800d69e:	6560      	str	r0, [r4, #84]	@ 0x54
 800d6a0:	e7f8      	b.n	800d694 <__sseek+0x18>
 800d6a2:	46c0      	nop			@ (mov r8, r8)
 800d6a4:	ffffefff 	.word	0xffffefff

0800d6a8 <__sclose>:
 800d6a8:	b510      	push	{r4, lr}
 800d6aa:	230e      	movs	r3, #14
 800d6ac:	5ec9      	ldrsh	r1, [r1, r3]
 800d6ae:	f000 f8bb 	bl	800d828 <_close_r>
 800d6b2:	bd10      	pop	{r4, pc}

0800d6b4 <__swbuf_r>:
 800d6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6b6:	0006      	movs	r6, r0
 800d6b8:	000d      	movs	r5, r1
 800d6ba:	0014      	movs	r4, r2
 800d6bc:	2800      	cmp	r0, #0
 800d6be:	d004      	beq.n	800d6ca <__swbuf_r+0x16>
 800d6c0:	6a03      	ldr	r3, [r0, #32]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d101      	bne.n	800d6ca <__swbuf_r+0x16>
 800d6c6:	f7ff fefb 	bl	800d4c0 <__sinit>
 800d6ca:	69a3      	ldr	r3, [r4, #24]
 800d6cc:	60a3      	str	r3, [r4, #8]
 800d6ce:	89a3      	ldrh	r3, [r4, #12]
 800d6d0:	071b      	lsls	r3, r3, #28
 800d6d2:	d502      	bpl.n	800d6da <__swbuf_r+0x26>
 800d6d4:	6923      	ldr	r3, [r4, #16]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d109      	bne.n	800d6ee <__swbuf_r+0x3a>
 800d6da:	0021      	movs	r1, r4
 800d6dc:	0030      	movs	r0, r6
 800d6de:	f000 f82b 	bl	800d738 <__swsetup_r>
 800d6e2:	2800      	cmp	r0, #0
 800d6e4:	d003      	beq.n	800d6ee <__swbuf_r+0x3a>
 800d6e6:	2501      	movs	r5, #1
 800d6e8:	426d      	negs	r5, r5
 800d6ea:	0028      	movs	r0, r5
 800d6ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6ee:	6923      	ldr	r3, [r4, #16]
 800d6f0:	6820      	ldr	r0, [r4, #0]
 800d6f2:	b2ef      	uxtb	r7, r5
 800d6f4:	1ac0      	subs	r0, r0, r3
 800d6f6:	6963      	ldr	r3, [r4, #20]
 800d6f8:	b2ed      	uxtb	r5, r5
 800d6fa:	4283      	cmp	r3, r0
 800d6fc:	dc05      	bgt.n	800d70a <__swbuf_r+0x56>
 800d6fe:	0021      	movs	r1, r4
 800d700:	0030      	movs	r0, r6
 800d702:	f7ff fe09 	bl	800d318 <_fflush_r>
 800d706:	2800      	cmp	r0, #0
 800d708:	d1ed      	bne.n	800d6e6 <__swbuf_r+0x32>
 800d70a:	68a3      	ldr	r3, [r4, #8]
 800d70c:	3001      	adds	r0, #1
 800d70e:	3b01      	subs	r3, #1
 800d710:	60a3      	str	r3, [r4, #8]
 800d712:	6823      	ldr	r3, [r4, #0]
 800d714:	1c5a      	adds	r2, r3, #1
 800d716:	6022      	str	r2, [r4, #0]
 800d718:	701f      	strb	r7, [r3, #0]
 800d71a:	6963      	ldr	r3, [r4, #20]
 800d71c:	4283      	cmp	r3, r0
 800d71e:	d004      	beq.n	800d72a <__swbuf_r+0x76>
 800d720:	89a3      	ldrh	r3, [r4, #12]
 800d722:	07db      	lsls	r3, r3, #31
 800d724:	d5e1      	bpl.n	800d6ea <__swbuf_r+0x36>
 800d726:	2d0a      	cmp	r5, #10
 800d728:	d1df      	bne.n	800d6ea <__swbuf_r+0x36>
 800d72a:	0021      	movs	r1, r4
 800d72c:	0030      	movs	r0, r6
 800d72e:	f7ff fdf3 	bl	800d318 <_fflush_r>
 800d732:	2800      	cmp	r0, #0
 800d734:	d0d9      	beq.n	800d6ea <__swbuf_r+0x36>
 800d736:	e7d6      	b.n	800d6e6 <__swbuf_r+0x32>

0800d738 <__swsetup_r>:
 800d738:	4b2d      	ldr	r3, [pc, #180]	@ (800d7f0 <__swsetup_r+0xb8>)
 800d73a:	b570      	push	{r4, r5, r6, lr}
 800d73c:	0005      	movs	r5, r0
 800d73e:	6818      	ldr	r0, [r3, #0]
 800d740:	000c      	movs	r4, r1
 800d742:	2800      	cmp	r0, #0
 800d744:	d004      	beq.n	800d750 <__swsetup_r+0x18>
 800d746:	6a03      	ldr	r3, [r0, #32]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d101      	bne.n	800d750 <__swsetup_r+0x18>
 800d74c:	f7ff feb8 	bl	800d4c0 <__sinit>
 800d750:	220c      	movs	r2, #12
 800d752:	5ea3      	ldrsh	r3, [r4, r2]
 800d754:	071a      	lsls	r2, r3, #28
 800d756:	d423      	bmi.n	800d7a0 <__swsetup_r+0x68>
 800d758:	06da      	lsls	r2, r3, #27
 800d75a:	d407      	bmi.n	800d76c <__swsetup_r+0x34>
 800d75c:	2209      	movs	r2, #9
 800d75e:	602a      	str	r2, [r5, #0]
 800d760:	2240      	movs	r2, #64	@ 0x40
 800d762:	2001      	movs	r0, #1
 800d764:	4313      	orrs	r3, r2
 800d766:	81a3      	strh	r3, [r4, #12]
 800d768:	4240      	negs	r0, r0
 800d76a:	e03a      	b.n	800d7e2 <__swsetup_r+0xaa>
 800d76c:	075b      	lsls	r3, r3, #29
 800d76e:	d513      	bpl.n	800d798 <__swsetup_r+0x60>
 800d770:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d772:	2900      	cmp	r1, #0
 800d774:	d008      	beq.n	800d788 <__swsetup_r+0x50>
 800d776:	0023      	movs	r3, r4
 800d778:	3344      	adds	r3, #68	@ 0x44
 800d77a:	4299      	cmp	r1, r3
 800d77c:	d002      	beq.n	800d784 <__swsetup_r+0x4c>
 800d77e:	0028      	movs	r0, r5
 800d780:	f000 ff56 	bl	800e630 <_free_r>
 800d784:	2300      	movs	r3, #0
 800d786:	6363      	str	r3, [r4, #52]	@ 0x34
 800d788:	2224      	movs	r2, #36	@ 0x24
 800d78a:	89a3      	ldrh	r3, [r4, #12]
 800d78c:	4393      	bics	r3, r2
 800d78e:	81a3      	strh	r3, [r4, #12]
 800d790:	2300      	movs	r3, #0
 800d792:	6063      	str	r3, [r4, #4]
 800d794:	6923      	ldr	r3, [r4, #16]
 800d796:	6023      	str	r3, [r4, #0]
 800d798:	2308      	movs	r3, #8
 800d79a:	89a2      	ldrh	r2, [r4, #12]
 800d79c:	4313      	orrs	r3, r2
 800d79e:	81a3      	strh	r3, [r4, #12]
 800d7a0:	6923      	ldr	r3, [r4, #16]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d10b      	bne.n	800d7be <__swsetup_r+0x86>
 800d7a6:	21a0      	movs	r1, #160	@ 0xa0
 800d7a8:	2280      	movs	r2, #128	@ 0x80
 800d7aa:	89a3      	ldrh	r3, [r4, #12]
 800d7ac:	0089      	lsls	r1, r1, #2
 800d7ae:	0092      	lsls	r2, r2, #2
 800d7b0:	400b      	ands	r3, r1
 800d7b2:	4293      	cmp	r3, r2
 800d7b4:	d003      	beq.n	800d7be <__swsetup_r+0x86>
 800d7b6:	0021      	movs	r1, r4
 800d7b8:	0028      	movs	r0, r5
 800d7ba:	f001 fd49 	bl	800f250 <__smakebuf_r>
 800d7be:	220c      	movs	r2, #12
 800d7c0:	5ea3      	ldrsh	r3, [r4, r2]
 800d7c2:	2101      	movs	r1, #1
 800d7c4:	001a      	movs	r2, r3
 800d7c6:	400a      	ands	r2, r1
 800d7c8:	420b      	tst	r3, r1
 800d7ca:	d00b      	beq.n	800d7e4 <__swsetup_r+0xac>
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	60a2      	str	r2, [r4, #8]
 800d7d0:	6962      	ldr	r2, [r4, #20]
 800d7d2:	4252      	negs	r2, r2
 800d7d4:	61a2      	str	r2, [r4, #24]
 800d7d6:	2000      	movs	r0, #0
 800d7d8:	6922      	ldr	r2, [r4, #16]
 800d7da:	4282      	cmp	r2, r0
 800d7dc:	d101      	bne.n	800d7e2 <__swsetup_r+0xaa>
 800d7de:	061a      	lsls	r2, r3, #24
 800d7e0:	d4be      	bmi.n	800d760 <__swsetup_r+0x28>
 800d7e2:	bd70      	pop	{r4, r5, r6, pc}
 800d7e4:	0799      	lsls	r1, r3, #30
 800d7e6:	d400      	bmi.n	800d7ea <__swsetup_r+0xb2>
 800d7e8:	6962      	ldr	r2, [r4, #20]
 800d7ea:	60a2      	str	r2, [r4, #8]
 800d7ec:	e7f3      	b.n	800d7d6 <__swsetup_r+0x9e>
 800d7ee:	46c0      	nop			@ (mov r8, r8)
 800d7f0:	20000048 	.word	0x20000048

0800d7f4 <memcmp>:
 800d7f4:	b530      	push	{r4, r5, lr}
 800d7f6:	2400      	movs	r4, #0
 800d7f8:	3901      	subs	r1, #1
 800d7fa:	42a2      	cmp	r2, r4
 800d7fc:	d101      	bne.n	800d802 <memcmp+0xe>
 800d7fe:	2000      	movs	r0, #0
 800d800:	e005      	b.n	800d80e <memcmp+0x1a>
 800d802:	5d03      	ldrb	r3, [r0, r4]
 800d804:	3401      	adds	r4, #1
 800d806:	5d0d      	ldrb	r5, [r1, r4]
 800d808:	42ab      	cmp	r3, r5
 800d80a:	d0f6      	beq.n	800d7fa <memcmp+0x6>
 800d80c:	1b58      	subs	r0, r3, r5
 800d80e:	bd30      	pop	{r4, r5, pc}

0800d810 <memset>:
 800d810:	0003      	movs	r3, r0
 800d812:	1882      	adds	r2, r0, r2
 800d814:	4293      	cmp	r3, r2
 800d816:	d100      	bne.n	800d81a <memset+0xa>
 800d818:	4770      	bx	lr
 800d81a:	7019      	strb	r1, [r3, #0]
 800d81c:	3301      	adds	r3, #1
 800d81e:	e7f9      	b.n	800d814 <memset+0x4>

0800d820 <_localeconv_r>:
 800d820:	4800      	ldr	r0, [pc, #0]	@ (800d824 <_localeconv_r+0x4>)
 800d822:	4770      	bx	lr
 800d824:	20000188 	.word	0x20000188

0800d828 <_close_r>:
 800d828:	2300      	movs	r3, #0
 800d82a:	b570      	push	{r4, r5, r6, lr}
 800d82c:	4d06      	ldr	r5, [pc, #24]	@ (800d848 <_close_r+0x20>)
 800d82e:	0004      	movs	r4, r0
 800d830:	0008      	movs	r0, r1
 800d832:	602b      	str	r3, [r5, #0]
 800d834:	f7f7 f8e4 	bl	8004a00 <_close>
 800d838:	1c43      	adds	r3, r0, #1
 800d83a:	d103      	bne.n	800d844 <_close_r+0x1c>
 800d83c:	682b      	ldr	r3, [r5, #0]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d000      	beq.n	800d844 <_close_r+0x1c>
 800d842:	6023      	str	r3, [r4, #0]
 800d844:	bd70      	pop	{r4, r5, r6, pc}
 800d846:	46c0      	nop			@ (mov r8, r8)
 800d848:	20000d30 	.word	0x20000d30

0800d84c <_lseek_r>:
 800d84c:	b570      	push	{r4, r5, r6, lr}
 800d84e:	0004      	movs	r4, r0
 800d850:	0008      	movs	r0, r1
 800d852:	0011      	movs	r1, r2
 800d854:	001a      	movs	r2, r3
 800d856:	2300      	movs	r3, #0
 800d858:	4d05      	ldr	r5, [pc, #20]	@ (800d870 <_lseek_r+0x24>)
 800d85a:	602b      	str	r3, [r5, #0]
 800d85c:	f7f7 f8f1 	bl	8004a42 <_lseek>
 800d860:	1c43      	adds	r3, r0, #1
 800d862:	d103      	bne.n	800d86c <_lseek_r+0x20>
 800d864:	682b      	ldr	r3, [r5, #0]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d000      	beq.n	800d86c <_lseek_r+0x20>
 800d86a:	6023      	str	r3, [r4, #0]
 800d86c:	bd70      	pop	{r4, r5, r6, pc}
 800d86e:	46c0      	nop			@ (mov r8, r8)
 800d870:	20000d30 	.word	0x20000d30

0800d874 <_read_r>:
 800d874:	b570      	push	{r4, r5, r6, lr}
 800d876:	0004      	movs	r4, r0
 800d878:	0008      	movs	r0, r1
 800d87a:	0011      	movs	r1, r2
 800d87c:	001a      	movs	r2, r3
 800d87e:	2300      	movs	r3, #0
 800d880:	4d05      	ldr	r5, [pc, #20]	@ (800d898 <_read_r+0x24>)
 800d882:	602b      	str	r3, [r5, #0]
 800d884:	f7f7 f883 	bl	800498e <_read>
 800d888:	1c43      	adds	r3, r0, #1
 800d88a:	d103      	bne.n	800d894 <_read_r+0x20>
 800d88c:	682b      	ldr	r3, [r5, #0]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d000      	beq.n	800d894 <_read_r+0x20>
 800d892:	6023      	str	r3, [r4, #0]
 800d894:	bd70      	pop	{r4, r5, r6, pc}
 800d896:	46c0      	nop			@ (mov r8, r8)
 800d898:	20000d30 	.word	0x20000d30

0800d89c <_write_r>:
 800d89c:	b570      	push	{r4, r5, r6, lr}
 800d89e:	0004      	movs	r4, r0
 800d8a0:	0008      	movs	r0, r1
 800d8a2:	0011      	movs	r1, r2
 800d8a4:	001a      	movs	r2, r3
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	4d05      	ldr	r5, [pc, #20]	@ (800d8c0 <_write_r+0x24>)
 800d8aa:	602b      	str	r3, [r5, #0]
 800d8ac:	f7f7 f88c 	bl	80049c8 <_write>
 800d8b0:	1c43      	adds	r3, r0, #1
 800d8b2:	d103      	bne.n	800d8bc <_write_r+0x20>
 800d8b4:	682b      	ldr	r3, [r5, #0]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d000      	beq.n	800d8bc <_write_r+0x20>
 800d8ba:	6023      	str	r3, [r4, #0]
 800d8bc:	bd70      	pop	{r4, r5, r6, pc}
 800d8be:	46c0      	nop			@ (mov r8, r8)
 800d8c0:	20000d30 	.word	0x20000d30

0800d8c4 <__errno>:
 800d8c4:	4b01      	ldr	r3, [pc, #4]	@ (800d8cc <__errno+0x8>)
 800d8c6:	6818      	ldr	r0, [r3, #0]
 800d8c8:	4770      	bx	lr
 800d8ca:	46c0      	nop			@ (mov r8, r8)
 800d8cc:	20000048 	.word	0x20000048

0800d8d0 <__libc_init_array>:
 800d8d0:	b570      	push	{r4, r5, r6, lr}
 800d8d2:	2600      	movs	r6, #0
 800d8d4:	4c0c      	ldr	r4, [pc, #48]	@ (800d908 <__libc_init_array+0x38>)
 800d8d6:	4d0d      	ldr	r5, [pc, #52]	@ (800d90c <__libc_init_array+0x3c>)
 800d8d8:	1b64      	subs	r4, r4, r5
 800d8da:	10a4      	asrs	r4, r4, #2
 800d8dc:	42a6      	cmp	r6, r4
 800d8de:	d109      	bne.n	800d8f4 <__libc_init_array+0x24>
 800d8e0:	2600      	movs	r6, #0
 800d8e2:	f001 fe2d 	bl	800f540 <_init>
 800d8e6:	4c0a      	ldr	r4, [pc, #40]	@ (800d910 <__libc_init_array+0x40>)
 800d8e8:	4d0a      	ldr	r5, [pc, #40]	@ (800d914 <__libc_init_array+0x44>)
 800d8ea:	1b64      	subs	r4, r4, r5
 800d8ec:	10a4      	asrs	r4, r4, #2
 800d8ee:	42a6      	cmp	r6, r4
 800d8f0:	d105      	bne.n	800d8fe <__libc_init_array+0x2e>
 800d8f2:	bd70      	pop	{r4, r5, r6, pc}
 800d8f4:	00b3      	lsls	r3, r6, #2
 800d8f6:	58eb      	ldr	r3, [r5, r3]
 800d8f8:	4798      	blx	r3
 800d8fa:	3601      	adds	r6, #1
 800d8fc:	e7ee      	b.n	800d8dc <__libc_init_array+0xc>
 800d8fe:	00b3      	lsls	r3, r6, #2
 800d900:	58eb      	ldr	r3, [r5, r3]
 800d902:	4798      	blx	r3
 800d904:	3601      	adds	r6, #1
 800d906:	e7f2      	b.n	800d8ee <__libc_init_array+0x1e>
 800d908:	08010ab4 	.word	0x08010ab4
 800d90c:	08010ab4 	.word	0x08010ab4
 800d910:	08010ab8 	.word	0x08010ab8
 800d914:	08010ab4 	.word	0x08010ab4

0800d918 <__retarget_lock_init_recursive>:
 800d918:	4770      	bx	lr

0800d91a <__retarget_lock_acquire_recursive>:
 800d91a:	4770      	bx	lr

0800d91c <__retarget_lock_release_recursive>:
 800d91c:	4770      	bx	lr

0800d91e <memchr>:
 800d91e:	b2c9      	uxtb	r1, r1
 800d920:	1882      	adds	r2, r0, r2
 800d922:	4290      	cmp	r0, r2
 800d924:	d101      	bne.n	800d92a <memchr+0xc>
 800d926:	2000      	movs	r0, #0
 800d928:	4770      	bx	lr
 800d92a:	7803      	ldrb	r3, [r0, #0]
 800d92c:	428b      	cmp	r3, r1
 800d92e:	d0fb      	beq.n	800d928 <memchr+0xa>
 800d930:	3001      	adds	r0, #1
 800d932:	e7f6      	b.n	800d922 <memchr+0x4>

0800d934 <memcpy>:
 800d934:	2300      	movs	r3, #0
 800d936:	b510      	push	{r4, lr}
 800d938:	429a      	cmp	r2, r3
 800d93a:	d100      	bne.n	800d93e <memcpy+0xa>
 800d93c:	bd10      	pop	{r4, pc}
 800d93e:	5ccc      	ldrb	r4, [r1, r3]
 800d940:	54c4      	strb	r4, [r0, r3]
 800d942:	3301      	adds	r3, #1
 800d944:	e7f8      	b.n	800d938 <memcpy+0x4>

0800d946 <quorem>:
 800d946:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d948:	6903      	ldr	r3, [r0, #16]
 800d94a:	690c      	ldr	r4, [r1, #16]
 800d94c:	b089      	sub	sp, #36	@ 0x24
 800d94e:	9003      	str	r0, [sp, #12]
 800d950:	9106      	str	r1, [sp, #24]
 800d952:	2000      	movs	r0, #0
 800d954:	42a3      	cmp	r3, r4
 800d956:	db63      	blt.n	800da20 <quorem+0xda>
 800d958:	000b      	movs	r3, r1
 800d95a:	3c01      	subs	r4, #1
 800d95c:	3314      	adds	r3, #20
 800d95e:	00a5      	lsls	r5, r4, #2
 800d960:	9304      	str	r3, [sp, #16]
 800d962:	195b      	adds	r3, r3, r5
 800d964:	9305      	str	r3, [sp, #20]
 800d966:	9b03      	ldr	r3, [sp, #12]
 800d968:	3314      	adds	r3, #20
 800d96a:	9301      	str	r3, [sp, #4]
 800d96c:	195d      	adds	r5, r3, r5
 800d96e:	9b05      	ldr	r3, [sp, #20]
 800d970:	682f      	ldr	r7, [r5, #0]
 800d972:	681e      	ldr	r6, [r3, #0]
 800d974:	0038      	movs	r0, r7
 800d976:	3601      	adds	r6, #1
 800d978:	0031      	movs	r1, r6
 800d97a:	f7f2 fbdd 	bl	8000138 <__udivsi3>
 800d97e:	9002      	str	r0, [sp, #8]
 800d980:	42b7      	cmp	r7, r6
 800d982:	d327      	bcc.n	800d9d4 <quorem+0x8e>
 800d984:	9b04      	ldr	r3, [sp, #16]
 800d986:	2700      	movs	r7, #0
 800d988:	469c      	mov	ip, r3
 800d98a:	9e01      	ldr	r6, [sp, #4]
 800d98c:	9707      	str	r7, [sp, #28]
 800d98e:	4662      	mov	r2, ip
 800d990:	ca08      	ldmia	r2!, {r3}
 800d992:	6830      	ldr	r0, [r6, #0]
 800d994:	4694      	mov	ip, r2
 800d996:	9a02      	ldr	r2, [sp, #8]
 800d998:	b299      	uxth	r1, r3
 800d99a:	4351      	muls	r1, r2
 800d99c:	0c1b      	lsrs	r3, r3, #16
 800d99e:	4353      	muls	r3, r2
 800d9a0:	19c9      	adds	r1, r1, r7
 800d9a2:	0c0a      	lsrs	r2, r1, #16
 800d9a4:	189b      	adds	r3, r3, r2
 800d9a6:	b289      	uxth	r1, r1
 800d9a8:	b282      	uxth	r2, r0
 800d9aa:	1a52      	subs	r2, r2, r1
 800d9ac:	9907      	ldr	r1, [sp, #28]
 800d9ae:	0c1f      	lsrs	r7, r3, #16
 800d9b0:	1852      	adds	r2, r2, r1
 800d9b2:	0c00      	lsrs	r0, r0, #16
 800d9b4:	b29b      	uxth	r3, r3
 800d9b6:	1411      	asrs	r1, r2, #16
 800d9b8:	1ac3      	subs	r3, r0, r3
 800d9ba:	185b      	adds	r3, r3, r1
 800d9bc:	1419      	asrs	r1, r3, #16
 800d9be:	b292      	uxth	r2, r2
 800d9c0:	041b      	lsls	r3, r3, #16
 800d9c2:	431a      	orrs	r2, r3
 800d9c4:	9b05      	ldr	r3, [sp, #20]
 800d9c6:	9107      	str	r1, [sp, #28]
 800d9c8:	c604      	stmia	r6!, {r2}
 800d9ca:	4563      	cmp	r3, ip
 800d9cc:	d2df      	bcs.n	800d98e <quorem+0x48>
 800d9ce:	682b      	ldr	r3, [r5, #0]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d02b      	beq.n	800da2c <quorem+0xe6>
 800d9d4:	9906      	ldr	r1, [sp, #24]
 800d9d6:	9803      	ldr	r0, [sp, #12]
 800d9d8:	f001 f9b6 	bl	800ed48 <__mcmp>
 800d9dc:	2800      	cmp	r0, #0
 800d9de:	db1e      	blt.n	800da1e <quorem+0xd8>
 800d9e0:	2600      	movs	r6, #0
 800d9e2:	9d01      	ldr	r5, [sp, #4]
 800d9e4:	9904      	ldr	r1, [sp, #16]
 800d9e6:	c901      	ldmia	r1!, {r0}
 800d9e8:	682b      	ldr	r3, [r5, #0]
 800d9ea:	b287      	uxth	r7, r0
 800d9ec:	b29a      	uxth	r2, r3
 800d9ee:	1bd2      	subs	r2, r2, r7
 800d9f0:	1992      	adds	r2, r2, r6
 800d9f2:	0c00      	lsrs	r0, r0, #16
 800d9f4:	0c1b      	lsrs	r3, r3, #16
 800d9f6:	1a1b      	subs	r3, r3, r0
 800d9f8:	1410      	asrs	r0, r2, #16
 800d9fa:	181b      	adds	r3, r3, r0
 800d9fc:	141e      	asrs	r6, r3, #16
 800d9fe:	b292      	uxth	r2, r2
 800da00:	041b      	lsls	r3, r3, #16
 800da02:	431a      	orrs	r2, r3
 800da04:	9b05      	ldr	r3, [sp, #20]
 800da06:	c504      	stmia	r5!, {r2}
 800da08:	428b      	cmp	r3, r1
 800da0a:	d2ec      	bcs.n	800d9e6 <quorem+0xa0>
 800da0c:	9a01      	ldr	r2, [sp, #4]
 800da0e:	00a3      	lsls	r3, r4, #2
 800da10:	18d3      	adds	r3, r2, r3
 800da12:	681a      	ldr	r2, [r3, #0]
 800da14:	2a00      	cmp	r2, #0
 800da16:	d014      	beq.n	800da42 <quorem+0xfc>
 800da18:	9b02      	ldr	r3, [sp, #8]
 800da1a:	3301      	adds	r3, #1
 800da1c:	9302      	str	r3, [sp, #8]
 800da1e:	9802      	ldr	r0, [sp, #8]
 800da20:	b009      	add	sp, #36	@ 0x24
 800da22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da24:	682b      	ldr	r3, [r5, #0]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d104      	bne.n	800da34 <quorem+0xee>
 800da2a:	3c01      	subs	r4, #1
 800da2c:	9b01      	ldr	r3, [sp, #4]
 800da2e:	3d04      	subs	r5, #4
 800da30:	42ab      	cmp	r3, r5
 800da32:	d3f7      	bcc.n	800da24 <quorem+0xde>
 800da34:	9b03      	ldr	r3, [sp, #12]
 800da36:	611c      	str	r4, [r3, #16]
 800da38:	e7cc      	b.n	800d9d4 <quorem+0x8e>
 800da3a:	681a      	ldr	r2, [r3, #0]
 800da3c:	2a00      	cmp	r2, #0
 800da3e:	d104      	bne.n	800da4a <quorem+0x104>
 800da40:	3c01      	subs	r4, #1
 800da42:	9a01      	ldr	r2, [sp, #4]
 800da44:	3b04      	subs	r3, #4
 800da46:	429a      	cmp	r2, r3
 800da48:	d3f7      	bcc.n	800da3a <quorem+0xf4>
 800da4a:	9b03      	ldr	r3, [sp, #12]
 800da4c:	611c      	str	r4, [r3, #16]
 800da4e:	e7e3      	b.n	800da18 <quorem+0xd2>

0800da50 <_dtoa_r>:
 800da50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da52:	0014      	movs	r4, r2
 800da54:	001d      	movs	r5, r3
 800da56:	69c6      	ldr	r6, [r0, #28]
 800da58:	b09d      	sub	sp, #116	@ 0x74
 800da5a:	940a      	str	r4, [sp, #40]	@ 0x28
 800da5c:	950b      	str	r5, [sp, #44]	@ 0x2c
 800da5e:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800da60:	9003      	str	r0, [sp, #12]
 800da62:	2e00      	cmp	r6, #0
 800da64:	d10f      	bne.n	800da86 <_dtoa_r+0x36>
 800da66:	2010      	movs	r0, #16
 800da68:	f000 fe2c 	bl	800e6c4 <malloc>
 800da6c:	9b03      	ldr	r3, [sp, #12]
 800da6e:	1e02      	subs	r2, r0, #0
 800da70:	61d8      	str	r0, [r3, #28]
 800da72:	d104      	bne.n	800da7e <_dtoa_r+0x2e>
 800da74:	21ef      	movs	r1, #239	@ 0xef
 800da76:	4bc7      	ldr	r3, [pc, #796]	@ (800dd94 <_dtoa_r+0x344>)
 800da78:	48c7      	ldr	r0, [pc, #796]	@ (800dd98 <_dtoa_r+0x348>)
 800da7a:	f001 fc97 	bl	800f3ac <__assert_func>
 800da7e:	6046      	str	r6, [r0, #4]
 800da80:	6086      	str	r6, [r0, #8]
 800da82:	6006      	str	r6, [r0, #0]
 800da84:	60c6      	str	r6, [r0, #12]
 800da86:	9b03      	ldr	r3, [sp, #12]
 800da88:	69db      	ldr	r3, [r3, #28]
 800da8a:	6819      	ldr	r1, [r3, #0]
 800da8c:	2900      	cmp	r1, #0
 800da8e:	d00b      	beq.n	800daa8 <_dtoa_r+0x58>
 800da90:	685a      	ldr	r2, [r3, #4]
 800da92:	2301      	movs	r3, #1
 800da94:	4093      	lsls	r3, r2
 800da96:	604a      	str	r2, [r1, #4]
 800da98:	608b      	str	r3, [r1, #8]
 800da9a:	9803      	ldr	r0, [sp, #12]
 800da9c:	f000 ff12 	bl	800e8c4 <_Bfree>
 800daa0:	2200      	movs	r2, #0
 800daa2:	9b03      	ldr	r3, [sp, #12]
 800daa4:	69db      	ldr	r3, [r3, #28]
 800daa6:	601a      	str	r2, [r3, #0]
 800daa8:	2d00      	cmp	r5, #0
 800daaa:	da1e      	bge.n	800daea <_dtoa_r+0x9a>
 800daac:	2301      	movs	r3, #1
 800daae:	603b      	str	r3, [r7, #0]
 800dab0:	006b      	lsls	r3, r5, #1
 800dab2:	085b      	lsrs	r3, r3, #1
 800dab4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dab6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800dab8:	4bb8      	ldr	r3, [pc, #736]	@ (800dd9c <_dtoa_r+0x34c>)
 800daba:	4ab8      	ldr	r2, [pc, #736]	@ (800dd9c <_dtoa_r+0x34c>)
 800dabc:	403b      	ands	r3, r7
 800dabe:	4293      	cmp	r3, r2
 800dac0:	d116      	bne.n	800daf0 <_dtoa_r+0xa0>
 800dac2:	4bb7      	ldr	r3, [pc, #732]	@ (800dda0 <_dtoa_r+0x350>)
 800dac4:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800dac6:	6013      	str	r3, [r2, #0]
 800dac8:	033b      	lsls	r3, r7, #12
 800daca:	0b1b      	lsrs	r3, r3, #12
 800dacc:	4323      	orrs	r3, r4
 800dace:	d101      	bne.n	800dad4 <_dtoa_r+0x84>
 800dad0:	f000 fd80 	bl	800e5d4 <_dtoa_r+0xb84>
 800dad4:	4bb3      	ldr	r3, [pc, #716]	@ (800dda4 <_dtoa_r+0x354>)
 800dad6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800dad8:	9308      	str	r3, [sp, #32]
 800dada:	2a00      	cmp	r2, #0
 800dadc:	d002      	beq.n	800dae4 <_dtoa_r+0x94>
 800dade:	4bb2      	ldr	r3, [pc, #712]	@ (800dda8 <_dtoa_r+0x358>)
 800dae0:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800dae2:	6013      	str	r3, [r2, #0]
 800dae4:	9808      	ldr	r0, [sp, #32]
 800dae6:	b01d      	add	sp, #116	@ 0x74
 800dae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800daea:	2300      	movs	r3, #0
 800daec:	603b      	str	r3, [r7, #0]
 800daee:	e7e2      	b.n	800dab6 <_dtoa_r+0x66>
 800daf0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800daf2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800daf4:	9212      	str	r2, [sp, #72]	@ 0x48
 800daf6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800daf8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800dafa:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800dafc:	2200      	movs	r2, #0
 800dafe:	2300      	movs	r3, #0
 800db00:	f7f2 fca0 	bl	8000444 <__aeabi_dcmpeq>
 800db04:	1e06      	subs	r6, r0, #0
 800db06:	d00b      	beq.n	800db20 <_dtoa_r+0xd0>
 800db08:	2301      	movs	r3, #1
 800db0a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800db0c:	6013      	str	r3, [r2, #0]
 800db0e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800db10:	2b00      	cmp	r3, #0
 800db12:	d002      	beq.n	800db1a <_dtoa_r+0xca>
 800db14:	4ba5      	ldr	r3, [pc, #660]	@ (800ddac <_dtoa_r+0x35c>)
 800db16:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800db18:	6013      	str	r3, [r2, #0]
 800db1a:	4ba5      	ldr	r3, [pc, #660]	@ (800ddb0 <_dtoa_r+0x360>)
 800db1c:	9308      	str	r3, [sp, #32]
 800db1e:	e7e1      	b.n	800dae4 <_dtoa_r+0x94>
 800db20:	ab1a      	add	r3, sp, #104	@ 0x68
 800db22:	9301      	str	r3, [sp, #4]
 800db24:	ab1b      	add	r3, sp, #108	@ 0x6c
 800db26:	9300      	str	r3, [sp, #0]
 800db28:	9803      	ldr	r0, [sp, #12]
 800db2a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800db2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800db2e:	f001 f9c1 	bl	800eeb4 <__d2b>
 800db32:	007a      	lsls	r2, r7, #1
 800db34:	9005      	str	r0, [sp, #20]
 800db36:	0d52      	lsrs	r2, r2, #21
 800db38:	d100      	bne.n	800db3c <_dtoa_r+0xec>
 800db3a:	e07b      	b.n	800dc34 <_dtoa_r+0x1e4>
 800db3c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800db3e:	9618      	str	r6, [sp, #96]	@ 0x60
 800db40:	0319      	lsls	r1, r3, #12
 800db42:	4b9c      	ldr	r3, [pc, #624]	@ (800ddb4 <_dtoa_r+0x364>)
 800db44:	0b09      	lsrs	r1, r1, #12
 800db46:	430b      	orrs	r3, r1
 800db48:	499b      	ldr	r1, [pc, #620]	@ (800ddb8 <_dtoa_r+0x368>)
 800db4a:	1857      	adds	r7, r2, r1
 800db4c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800db4e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800db50:	0019      	movs	r1, r3
 800db52:	2200      	movs	r2, #0
 800db54:	4b99      	ldr	r3, [pc, #612]	@ (800ddbc <_dtoa_r+0x36c>)
 800db56:	f7f3 ff89 	bl	8001a6c <__aeabi_dsub>
 800db5a:	4a99      	ldr	r2, [pc, #612]	@ (800ddc0 <_dtoa_r+0x370>)
 800db5c:	4b99      	ldr	r3, [pc, #612]	@ (800ddc4 <_dtoa_r+0x374>)
 800db5e:	f7f3 fc9f 	bl	80014a0 <__aeabi_dmul>
 800db62:	4a99      	ldr	r2, [pc, #612]	@ (800ddc8 <_dtoa_r+0x378>)
 800db64:	4b99      	ldr	r3, [pc, #612]	@ (800ddcc <_dtoa_r+0x37c>)
 800db66:	f7f2 fc9b 	bl	80004a0 <__aeabi_dadd>
 800db6a:	0004      	movs	r4, r0
 800db6c:	0038      	movs	r0, r7
 800db6e:	000d      	movs	r5, r1
 800db70:	f7f4 fbe4 	bl	800233c <__aeabi_i2d>
 800db74:	4a96      	ldr	r2, [pc, #600]	@ (800ddd0 <_dtoa_r+0x380>)
 800db76:	4b97      	ldr	r3, [pc, #604]	@ (800ddd4 <_dtoa_r+0x384>)
 800db78:	f7f3 fc92 	bl	80014a0 <__aeabi_dmul>
 800db7c:	0002      	movs	r2, r0
 800db7e:	000b      	movs	r3, r1
 800db80:	0020      	movs	r0, r4
 800db82:	0029      	movs	r1, r5
 800db84:	f7f2 fc8c 	bl	80004a0 <__aeabi_dadd>
 800db88:	0004      	movs	r4, r0
 800db8a:	000d      	movs	r5, r1
 800db8c:	f7f4 fb9a 	bl	80022c4 <__aeabi_d2iz>
 800db90:	2200      	movs	r2, #0
 800db92:	9004      	str	r0, [sp, #16]
 800db94:	2300      	movs	r3, #0
 800db96:	0020      	movs	r0, r4
 800db98:	0029      	movs	r1, r5
 800db9a:	f7f2 fc59 	bl	8000450 <__aeabi_dcmplt>
 800db9e:	2800      	cmp	r0, #0
 800dba0:	d00b      	beq.n	800dbba <_dtoa_r+0x16a>
 800dba2:	9804      	ldr	r0, [sp, #16]
 800dba4:	f7f4 fbca 	bl	800233c <__aeabi_i2d>
 800dba8:	002b      	movs	r3, r5
 800dbaa:	0022      	movs	r2, r4
 800dbac:	f7f2 fc4a 	bl	8000444 <__aeabi_dcmpeq>
 800dbb0:	4243      	negs	r3, r0
 800dbb2:	4158      	adcs	r0, r3
 800dbb4:	9b04      	ldr	r3, [sp, #16]
 800dbb6:	1a1b      	subs	r3, r3, r0
 800dbb8:	9304      	str	r3, [sp, #16]
 800dbba:	2301      	movs	r3, #1
 800dbbc:	9315      	str	r3, [sp, #84]	@ 0x54
 800dbbe:	9b04      	ldr	r3, [sp, #16]
 800dbc0:	2b16      	cmp	r3, #22
 800dbc2:	d810      	bhi.n	800dbe6 <_dtoa_r+0x196>
 800dbc4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800dbc6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800dbc8:	9a04      	ldr	r2, [sp, #16]
 800dbca:	4b83      	ldr	r3, [pc, #524]	@ (800ddd8 <_dtoa_r+0x388>)
 800dbcc:	00d2      	lsls	r2, r2, #3
 800dbce:	189b      	adds	r3, r3, r2
 800dbd0:	681a      	ldr	r2, [r3, #0]
 800dbd2:	685b      	ldr	r3, [r3, #4]
 800dbd4:	f7f2 fc3c 	bl	8000450 <__aeabi_dcmplt>
 800dbd8:	2800      	cmp	r0, #0
 800dbda:	d047      	beq.n	800dc6c <_dtoa_r+0x21c>
 800dbdc:	9b04      	ldr	r3, [sp, #16]
 800dbde:	3b01      	subs	r3, #1
 800dbe0:	9304      	str	r3, [sp, #16]
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	9315      	str	r3, [sp, #84]	@ 0x54
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800dbea:	9206      	str	r2, [sp, #24]
 800dbec:	1bdb      	subs	r3, r3, r7
 800dbee:	1e5a      	subs	r2, r3, #1
 800dbf0:	d53e      	bpl.n	800dc70 <_dtoa_r+0x220>
 800dbf2:	2201      	movs	r2, #1
 800dbf4:	1ad3      	subs	r3, r2, r3
 800dbf6:	9306      	str	r3, [sp, #24]
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	930d      	str	r3, [sp, #52]	@ 0x34
 800dbfc:	9b04      	ldr	r3, [sp, #16]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	db38      	blt.n	800dc74 <_dtoa_r+0x224>
 800dc02:	9a04      	ldr	r2, [sp, #16]
 800dc04:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dc06:	4694      	mov	ip, r2
 800dc08:	4463      	add	r3, ip
 800dc0a:	930d      	str	r3, [sp, #52]	@ 0x34
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	9214      	str	r2, [sp, #80]	@ 0x50
 800dc10:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dc12:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800dc14:	2401      	movs	r4, #1
 800dc16:	2b09      	cmp	r3, #9
 800dc18:	d862      	bhi.n	800dce0 <_dtoa_r+0x290>
 800dc1a:	2b05      	cmp	r3, #5
 800dc1c:	dd02      	ble.n	800dc24 <_dtoa_r+0x1d4>
 800dc1e:	2400      	movs	r4, #0
 800dc20:	3b04      	subs	r3, #4
 800dc22:	9322      	str	r3, [sp, #136]	@ 0x88
 800dc24:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800dc26:	1e98      	subs	r0, r3, #2
 800dc28:	2803      	cmp	r0, #3
 800dc2a:	d863      	bhi.n	800dcf4 <_dtoa_r+0x2a4>
 800dc2c:	f7f2 fa70 	bl	8000110 <__gnu_thumb1_case_uqi>
 800dc30:	2b385654 	.word	0x2b385654
 800dc34:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800dc36:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800dc38:	18f6      	adds	r6, r6, r3
 800dc3a:	4b68      	ldr	r3, [pc, #416]	@ (800dddc <_dtoa_r+0x38c>)
 800dc3c:	18f2      	adds	r2, r6, r3
 800dc3e:	2a20      	cmp	r2, #32
 800dc40:	dd0f      	ble.n	800dc62 <_dtoa_r+0x212>
 800dc42:	2340      	movs	r3, #64	@ 0x40
 800dc44:	1a9b      	subs	r3, r3, r2
 800dc46:	409f      	lsls	r7, r3
 800dc48:	4b65      	ldr	r3, [pc, #404]	@ (800dde0 <_dtoa_r+0x390>)
 800dc4a:	0038      	movs	r0, r7
 800dc4c:	18f3      	adds	r3, r6, r3
 800dc4e:	40dc      	lsrs	r4, r3
 800dc50:	4320      	orrs	r0, r4
 800dc52:	f7f4 fba1 	bl	8002398 <__aeabi_ui2d>
 800dc56:	2201      	movs	r2, #1
 800dc58:	4b62      	ldr	r3, [pc, #392]	@ (800dde4 <_dtoa_r+0x394>)
 800dc5a:	1e77      	subs	r7, r6, #1
 800dc5c:	18cb      	adds	r3, r1, r3
 800dc5e:	9218      	str	r2, [sp, #96]	@ 0x60
 800dc60:	e776      	b.n	800db50 <_dtoa_r+0x100>
 800dc62:	2320      	movs	r3, #32
 800dc64:	0020      	movs	r0, r4
 800dc66:	1a9b      	subs	r3, r3, r2
 800dc68:	4098      	lsls	r0, r3
 800dc6a:	e7f2      	b.n	800dc52 <_dtoa_r+0x202>
 800dc6c:	9015      	str	r0, [sp, #84]	@ 0x54
 800dc6e:	e7ba      	b.n	800dbe6 <_dtoa_r+0x196>
 800dc70:	920d      	str	r2, [sp, #52]	@ 0x34
 800dc72:	e7c3      	b.n	800dbfc <_dtoa_r+0x1ac>
 800dc74:	9b06      	ldr	r3, [sp, #24]
 800dc76:	9a04      	ldr	r2, [sp, #16]
 800dc78:	1a9b      	subs	r3, r3, r2
 800dc7a:	9306      	str	r3, [sp, #24]
 800dc7c:	4253      	negs	r3, r2
 800dc7e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dc80:	2300      	movs	r3, #0
 800dc82:	9314      	str	r3, [sp, #80]	@ 0x50
 800dc84:	e7c5      	b.n	800dc12 <_dtoa_r+0x1c2>
 800dc86:	2301      	movs	r3, #1
 800dc88:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dc8a:	9310      	str	r3, [sp, #64]	@ 0x40
 800dc8c:	4694      	mov	ip, r2
 800dc8e:	9b04      	ldr	r3, [sp, #16]
 800dc90:	4463      	add	r3, ip
 800dc92:	930e      	str	r3, [sp, #56]	@ 0x38
 800dc94:	3301      	adds	r3, #1
 800dc96:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	dc08      	bgt.n	800dcae <_dtoa_r+0x25e>
 800dc9c:	2301      	movs	r3, #1
 800dc9e:	e006      	b.n	800dcae <_dtoa_r+0x25e>
 800dca0:	2301      	movs	r3, #1
 800dca2:	9310      	str	r3, [sp, #64]	@ 0x40
 800dca4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	dd28      	ble.n	800dcfc <_dtoa_r+0x2ac>
 800dcaa:	930e      	str	r3, [sp, #56]	@ 0x38
 800dcac:	9309      	str	r3, [sp, #36]	@ 0x24
 800dcae:	9a03      	ldr	r2, [sp, #12]
 800dcb0:	2100      	movs	r1, #0
 800dcb2:	69d0      	ldr	r0, [r2, #28]
 800dcb4:	2204      	movs	r2, #4
 800dcb6:	0015      	movs	r5, r2
 800dcb8:	3514      	adds	r5, #20
 800dcba:	429d      	cmp	r5, r3
 800dcbc:	d923      	bls.n	800dd06 <_dtoa_r+0x2b6>
 800dcbe:	6041      	str	r1, [r0, #4]
 800dcc0:	9803      	ldr	r0, [sp, #12]
 800dcc2:	f000 fdbb 	bl	800e83c <_Balloc>
 800dcc6:	9008      	str	r0, [sp, #32]
 800dcc8:	2800      	cmp	r0, #0
 800dcca:	d11f      	bne.n	800dd0c <_dtoa_r+0x2bc>
 800dccc:	21b0      	movs	r1, #176	@ 0xb0
 800dcce:	4b46      	ldr	r3, [pc, #280]	@ (800dde8 <_dtoa_r+0x398>)
 800dcd0:	4831      	ldr	r0, [pc, #196]	@ (800dd98 <_dtoa_r+0x348>)
 800dcd2:	9a08      	ldr	r2, [sp, #32]
 800dcd4:	31ff      	adds	r1, #255	@ 0xff
 800dcd6:	e6d0      	b.n	800da7a <_dtoa_r+0x2a>
 800dcd8:	2300      	movs	r3, #0
 800dcda:	e7e2      	b.n	800dca2 <_dtoa_r+0x252>
 800dcdc:	2300      	movs	r3, #0
 800dcde:	e7d3      	b.n	800dc88 <_dtoa_r+0x238>
 800dce0:	2300      	movs	r3, #0
 800dce2:	9410      	str	r4, [sp, #64]	@ 0x40
 800dce4:	9322      	str	r3, [sp, #136]	@ 0x88
 800dce6:	3b01      	subs	r3, #1
 800dce8:	2200      	movs	r2, #0
 800dcea:	930e      	str	r3, [sp, #56]	@ 0x38
 800dcec:	9309      	str	r3, [sp, #36]	@ 0x24
 800dcee:	3313      	adds	r3, #19
 800dcf0:	9223      	str	r2, [sp, #140]	@ 0x8c
 800dcf2:	e7dc      	b.n	800dcae <_dtoa_r+0x25e>
 800dcf4:	2301      	movs	r3, #1
 800dcf6:	9310      	str	r3, [sp, #64]	@ 0x40
 800dcf8:	3b02      	subs	r3, #2
 800dcfa:	e7f5      	b.n	800dce8 <_dtoa_r+0x298>
 800dcfc:	2301      	movs	r3, #1
 800dcfe:	001a      	movs	r2, r3
 800dd00:	930e      	str	r3, [sp, #56]	@ 0x38
 800dd02:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd04:	e7f4      	b.n	800dcf0 <_dtoa_r+0x2a0>
 800dd06:	3101      	adds	r1, #1
 800dd08:	0052      	lsls	r2, r2, #1
 800dd0a:	e7d4      	b.n	800dcb6 <_dtoa_r+0x266>
 800dd0c:	9b03      	ldr	r3, [sp, #12]
 800dd0e:	9a08      	ldr	r2, [sp, #32]
 800dd10:	69db      	ldr	r3, [r3, #28]
 800dd12:	601a      	str	r2, [r3, #0]
 800dd14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd16:	2b0e      	cmp	r3, #14
 800dd18:	d900      	bls.n	800dd1c <_dtoa_r+0x2cc>
 800dd1a:	e0d6      	b.n	800deca <_dtoa_r+0x47a>
 800dd1c:	2c00      	cmp	r4, #0
 800dd1e:	d100      	bne.n	800dd22 <_dtoa_r+0x2d2>
 800dd20:	e0d3      	b.n	800deca <_dtoa_r+0x47a>
 800dd22:	9b04      	ldr	r3, [sp, #16]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	dd63      	ble.n	800ddf0 <_dtoa_r+0x3a0>
 800dd28:	210f      	movs	r1, #15
 800dd2a:	9a04      	ldr	r2, [sp, #16]
 800dd2c:	4b2a      	ldr	r3, [pc, #168]	@ (800ddd8 <_dtoa_r+0x388>)
 800dd2e:	400a      	ands	r2, r1
 800dd30:	00d2      	lsls	r2, r2, #3
 800dd32:	189b      	adds	r3, r3, r2
 800dd34:	681e      	ldr	r6, [r3, #0]
 800dd36:	685f      	ldr	r7, [r3, #4]
 800dd38:	9b04      	ldr	r3, [sp, #16]
 800dd3a:	2402      	movs	r4, #2
 800dd3c:	111d      	asrs	r5, r3, #4
 800dd3e:	05db      	lsls	r3, r3, #23
 800dd40:	d50a      	bpl.n	800dd58 <_dtoa_r+0x308>
 800dd42:	4b2a      	ldr	r3, [pc, #168]	@ (800ddec <_dtoa_r+0x39c>)
 800dd44:	400d      	ands	r5, r1
 800dd46:	6a1a      	ldr	r2, [r3, #32]
 800dd48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd4a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800dd4c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800dd4e:	f7f2 ff6d 	bl	8000c2c <__aeabi_ddiv>
 800dd52:	900a      	str	r0, [sp, #40]	@ 0x28
 800dd54:	910b      	str	r1, [sp, #44]	@ 0x2c
 800dd56:	3401      	adds	r4, #1
 800dd58:	4b24      	ldr	r3, [pc, #144]	@ (800ddec <_dtoa_r+0x39c>)
 800dd5a:	930c      	str	r3, [sp, #48]	@ 0x30
 800dd5c:	2d00      	cmp	r5, #0
 800dd5e:	d108      	bne.n	800dd72 <_dtoa_r+0x322>
 800dd60:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800dd62:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dd64:	0032      	movs	r2, r6
 800dd66:	003b      	movs	r3, r7
 800dd68:	f7f2 ff60 	bl	8000c2c <__aeabi_ddiv>
 800dd6c:	900a      	str	r0, [sp, #40]	@ 0x28
 800dd6e:	910b      	str	r1, [sp, #44]	@ 0x2c
 800dd70:	e059      	b.n	800de26 <_dtoa_r+0x3d6>
 800dd72:	2301      	movs	r3, #1
 800dd74:	421d      	tst	r5, r3
 800dd76:	d009      	beq.n	800dd8c <_dtoa_r+0x33c>
 800dd78:	18e4      	adds	r4, r4, r3
 800dd7a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dd7c:	0030      	movs	r0, r6
 800dd7e:	681a      	ldr	r2, [r3, #0]
 800dd80:	685b      	ldr	r3, [r3, #4]
 800dd82:	0039      	movs	r1, r7
 800dd84:	f7f3 fb8c 	bl	80014a0 <__aeabi_dmul>
 800dd88:	0006      	movs	r6, r0
 800dd8a:	000f      	movs	r7, r1
 800dd8c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dd8e:	106d      	asrs	r5, r5, #1
 800dd90:	3308      	adds	r3, #8
 800dd92:	e7e2      	b.n	800dd5a <_dtoa_r+0x30a>
 800dd94:	08010781 	.word	0x08010781
 800dd98:	08010798 	.word	0x08010798
 800dd9c:	7ff00000 	.word	0x7ff00000
 800dda0:	0000270f 	.word	0x0000270f
 800dda4:	0801077d 	.word	0x0801077d
 800dda8:	08010780 	.word	0x08010780
 800ddac:	08010751 	.word	0x08010751
 800ddb0:	08010750 	.word	0x08010750
 800ddb4:	3ff00000 	.word	0x3ff00000
 800ddb8:	fffffc01 	.word	0xfffffc01
 800ddbc:	3ff80000 	.word	0x3ff80000
 800ddc0:	636f4361 	.word	0x636f4361
 800ddc4:	3fd287a7 	.word	0x3fd287a7
 800ddc8:	8b60c8b3 	.word	0x8b60c8b3
 800ddcc:	3fc68a28 	.word	0x3fc68a28
 800ddd0:	509f79fb 	.word	0x509f79fb
 800ddd4:	3fd34413 	.word	0x3fd34413
 800ddd8:	080108e8 	.word	0x080108e8
 800dddc:	00000432 	.word	0x00000432
 800dde0:	00000412 	.word	0x00000412
 800dde4:	fe100000 	.word	0xfe100000
 800dde8:	080107f0 	.word	0x080107f0
 800ddec:	080108c0 	.word	0x080108c0
 800ddf0:	9b04      	ldr	r3, [sp, #16]
 800ddf2:	2402      	movs	r4, #2
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d016      	beq.n	800de26 <_dtoa_r+0x3d6>
 800ddf8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800ddfa:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800ddfc:	220f      	movs	r2, #15
 800ddfe:	425d      	negs	r5, r3
 800de00:	402a      	ands	r2, r5
 800de02:	4bd5      	ldr	r3, [pc, #852]	@ (800e158 <_dtoa_r+0x708>)
 800de04:	00d2      	lsls	r2, r2, #3
 800de06:	189b      	adds	r3, r3, r2
 800de08:	681a      	ldr	r2, [r3, #0]
 800de0a:	685b      	ldr	r3, [r3, #4]
 800de0c:	f7f3 fb48 	bl	80014a0 <__aeabi_dmul>
 800de10:	2701      	movs	r7, #1
 800de12:	2300      	movs	r3, #0
 800de14:	900a      	str	r0, [sp, #40]	@ 0x28
 800de16:	910b      	str	r1, [sp, #44]	@ 0x2c
 800de18:	4ed0      	ldr	r6, [pc, #832]	@ (800e15c <_dtoa_r+0x70c>)
 800de1a:	112d      	asrs	r5, r5, #4
 800de1c:	2d00      	cmp	r5, #0
 800de1e:	d000      	beq.n	800de22 <_dtoa_r+0x3d2>
 800de20:	e095      	b.n	800df4e <_dtoa_r+0x4fe>
 800de22:	2b00      	cmp	r3, #0
 800de24:	d1a2      	bne.n	800dd6c <_dtoa_r+0x31c>
 800de26:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800de28:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800de2a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d100      	bne.n	800de32 <_dtoa_r+0x3e2>
 800de30:	e098      	b.n	800df64 <_dtoa_r+0x514>
 800de32:	2200      	movs	r2, #0
 800de34:	0030      	movs	r0, r6
 800de36:	0039      	movs	r1, r7
 800de38:	4bc9      	ldr	r3, [pc, #804]	@ (800e160 <_dtoa_r+0x710>)
 800de3a:	f7f2 fb09 	bl	8000450 <__aeabi_dcmplt>
 800de3e:	2800      	cmp	r0, #0
 800de40:	d100      	bne.n	800de44 <_dtoa_r+0x3f4>
 800de42:	e08f      	b.n	800df64 <_dtoa_r+0x514>
 800de44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de46:	2b00      	cmp	r3, #0
 800de48:	d100      	bne.n	800de4c <_dtoa_r+0x3fc>
 800de4a:	e08b      	b.n	800df64 <_dtoa_r+0x514>
 800de4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de4e:	2b00      	cmp	r3, #0
 800de50:	dd37      	ble.n	800dec2 <_dtoa_r+0x472>
 800de52:	9b04      	ldr	r3, [sp, #16]
 800de54:	2200      	movs	r2, #0
 800de56:	3b01      	subs	r3, #1
 800de58:	930c      	str	r3, [sp, #48]	@ 0x30
 800de5a:	0030      	movs	r0, r6
 800de5c:	4bc1      	ldr	r3, [pc, #772]	@ (800e164 <_dtoa_r+0x714>)
 800de5e:	0039      	movs	r1, r7
 800de60:	f7f3 fb1e 	bl	80014a0 <__aeabi_dmul>
 800de64:	900a      	str	r0, [sp, #40]	@ 0x28
 800de66:	910b      	str	r1, [sp, #44]	@ 0x2c
 800de68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de6a:	3401      	adds	r4, #1
 800de6c:	0020      	movs	r0, r4
 800de6e:	9311      	str	r3, [sp, #68]	@ 0x44
 800de70:	f7f4 fa64 	bl	800233c <__aeabi_i2d>
 800de74:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800de76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800de78:	f7f3 fb12 	bl	80014a0 <__aeabi_dmul>
 800de7c:	4bba      	ldr	r3, [pc, #744]	@ (800e168 <_dtoa_r+0x718>)
 800de7e:	2200      	movs	r2, #0
 800de80:	f7f2 fb0e 	bl	80004a0 <__aeabi_dadd>
 800de84:	4bb9      	ldr	r3, [pc, #740]	@ (800e16c <_dtoa_r+0x71c>)
 800de86:	0006      	movs	r6, r0
 800de88:	18cf      	adds	r7, r1, r3
 800de8a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d16d      	bne.n	800df6c <_dtoa_r+0x51c>
 800de90:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800de92:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800de94:	2200      	movs	r2, #0
 800de96:	4bb6      	ldr	r3, [pc, #728]	@ (800e170 <_dtoa_r+0x720>)
 800de98:	f7f3 fde8 	bl	8001a6c <__aeabi_dsub>
 800de9c:	0032      	movs	r2, r6
 800de9e:	003b      	movs	r3, r7
 800dea0:	0004      	movs	r4, r0
 800dea2:	000d      	movs	r5, r1
 800dea4:	f7f2 fae8 	bl	8000478 <__aeabi_dcmpgt>
 800dea8:	2800      	cmp	r0, #0
 800deaa:	d000      	beq.n	800deae <_dtoa_r+0x45e>
 800deac:	e2b6      	b.n	800e41c <_dtoa_r+0x9cc>
 800deae:	2180      	movs	r1, #128	@ 0x80
 800deb0:	0609      	lsls	r1, r1, #24
 800deb2:	187b      	adds	r3, r7, r1
 800deb4:	0032      	movs	r2, r6
 800deb6:	0020      	movs	r0, r4
 800deb8:	0029      	movs	r1, r5
 800deba:	f7f2 fac9 	bl	8000450 <__aeabi_dcmplt>
 800debe:	2800      	cmp	r0, #0
 800dec0:	d128      	bne.n	800df14 <_dtoa_r+0x4c4>
 800dec2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dec4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800dec6:	930a      	str	r3, [sp, #40]	@ 0x28
 800dec8:	940b      	str	r4, [sp, #44]	@ 0x2c
 800deca:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800decc:	2b00      	cmp	r3, #0
 800dece:	da00      	bge.n	800ded2 <_dtoa_r+0x482>
 800ded0:	e174      	b.n	800e1bc <_dtoa_r+0x76c>
 800ded2:	9a04      	ldr	r2, [sp, #16]
 800ded4:	2a0e      	cmp	r2, #14
 800ded6:	dd00      	ble.n	800deda <_dtoa_r+0x48a>
 800ded8:	e170      	b.n	800e1bc <_dtoa_r+0x76c>
 800deda:	4b9f      	ldr	r3, [pc, #636]	@ (800e158 <_dtoa_r+0x708>)
 800dedc:	00d2      	lsls	r2, r2, #3
 800dede:	189b      	adds	r3, r3, r2
 800dee0:	685c      	ldr	r4, [r3, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	9306      	str	r3, [sp, #24]
 800dee6:	9407      	str	r4, [sp, #28]
 800dee8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800deea:	2b00      	cmp	r3, #0
 800deec:	db00      	blt.n	800def0 <_dtoa_r+0x4a0>
 800deee:	e0e7      	b.n	800e0c0 <_dtoa_r+0x670>
 800def0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800def2:	2b00      	cmp	r3, #0
 800def4:	dd00      	ble.n	800def8 <_dtoa_r+0x4a8>
 800def6:	e0e3      	b.n	800e0c0 <_dtoa_r+0x670>
 800def8:	d10c      	bne.n	800df14 <_dtoa_r+0x4c4>
 800defa:	9806      	ldr	r0, [sp, #24]
 800defc:	9907      	ldr	r1, [sp, #28]
 800defe:	2200      	movs	r2, #0
 800df00:	4b9b      	ldr	r3, [pc, #620]	@ (800e170 <_dtoa_r+0x720>)
 800df02:	f7f3 facd 	bl	80014a0 <__aeabi_dmul>
 800df06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800df08:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800df0a:	f7f2 fabf 	bl	800048c <__aeabi_dcmpge>
 800df0e:	2800      	cmp	r0, #0
 800df10:	d100      	bne.n	800df14 <_dtoa_r+0x4c4>
 800df12:	e286      	b.n	800e422 <_dtoa_r+0x9d2>
 800df14:	2600      	movs	r6, #0
 800df16:	0037      	movs	r7, r6
 800df18:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800df1a:	9c08      	ldr	r4, [sp, #32]
 800df1c:	43db      	mvns	r3, r3
 800df1e:	930c      	str	r3, [sp, #48]	@ 0x30
 800df20:	9704      	str	r7, [sp, #16]
 800df22:	2700      	movs	r7, #0
 800df24:	0031      	movs	r1, r6
 800df26:	9803      	ldr	r0, [sp, #12]
 800df28:	f000 fccc 	bl	800e8c4 <_Bfree>
 800df2c:	9b04      	ldr	r3, [sp, #16]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d100      	bne.n	800df34 <_dtoa_r+0x4e4>
 800df32:	e0bb      	b.n	800e0ac <_dtoa_r+0x65c>
 800df34:	2f00      	cmp	r7, #0
 800df36:	d005      	beq.n	800df44 <_dtoa_r+0x4f4>
 800df38:	429f      	cmp	r7, r3
 800df3a:	d003      	beq.n	800df44 <_dtoa_r+0x4f4>
 800df3c:	0039      	movs	r1, r7
 800df3e:	9803      	ldr	r0, [sp, #12]
 800df40:	f000 fcc0 	bl	800e8c4 <_Bfree>
 800df44:	9904      	ldr	r1, [sp, #16]
 800df46:	9803      	ldr	r0, [sp, #12]
 800df48:	f000 fcbc 	bl	800e8c4 <_Bfree>
 800df4c:	e0ae      	b.n	800e0ac <_dtoa_r+0x65c>
 800df4e:	423d      	tst	r5, r7
 800df50:	d005      	beq.n	800df5e <_dtoa_r+0x50e>
 800df52:	6832      	ldr	r2, [r6, #0]
 800df54:	6873      	ldr	r3, [r6, #4]
 800df56:	f7f3 faa3 	bl	80014a0 <__aeabi_dmul>
 800df5a:	003b      	movs	r3, r7
 800df5c:	3401      	adds	r4, #1
 800df5e:	106d      	asrs	r5, r5, #1
 800df60:	3608      	adds	r6, #8
 800df62:	e75b      	b.n	800de1c <_dtoa_r+0x3cc>
 800df64:	9b04      	ldr	r3, [sp, #16]
 800df66:	930c      	str	r3, [sp, #48]	@ 0x30
 800df68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df6a:	e77f      	b.n	800de6c <_dtoa_r+0x41c>
 800df6c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800df6e:	4b7a      	ldr	r3, [pc, #488]	@ (800e158 <_dtoa_r+0x708>)
 800df70:	3a01      	subs	r2, #1
 800df72:	00d2      	lsls	r2, r2, #3
 800df74:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800df76:	189b      	adds	r3, r3, r2
 800df78:	681a      	ldr	r2, [r3, #0]
 800df7a:	685b      	ldr	r3, [r3, #4]
 800df7c:	2900      	cmp	r1, #0
 800df7e:	d04c      	beq.n	800e01a <_dtoa_r+0x5ca>
 800df80:	2000      	movs	r0, #0
 800df82:	497c      	ldr	r1, [pc, #496]	@ (800e174 <_dtoa_r+0x724>)
 800df84:	f7f2 fe52 	bl	8000c2c <__aeabi_ddiv>
 800df88:	0032      	movs	r2, r6
 800df8a:	003b      	movs	r3, r7
 800df8c:	f7f3 fd6e 	bl	8001a6c <__aeabi_dsub>
 800df90:	9a08      	ldr	r2, [sp, #32]
 800df92:	0006      	movs	r6, r0
 800df94:	4694      	mov	ip, r2
 800df96:	000f      	movs	r7, r1
 800df98:	9b08      	ldr	r3, [sp, #32]
 800df9a:	9316      	str	r3, [sp, #88]	@ 0x58
 800df9c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800df9e:	4463      	add	r3, ip
 800dfa0:	9311      	str	r3, [sp, #68]	@ 0x44
 800dfa2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800dfa4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dfa6:	f7f4 f98d 	bl	80022c4 <__aeabi_d2iz>
 800dfaa:	0005      	movs	r5, r0
 800dfac:	f7f4 f9c6 	bl	800233c <__aeabi_i2d>
 800dfb0:	0002      	movs	r2, r0
 800dfb2:	000b      	movs	r3, r1
 800dfb4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800dfb6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dfb8:	f7f3 fd58 	bl	8001a6c <__aeabi_dsub>
 800dfbc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800dfbe:	3530      	adds	r5, #48	@ 0x30
 800dfc0:	1c5c      	adds	r4, r3, #1
 800dfc2:	701d      	strb	r5, [r3, #0]
 800dfc4:	0032      	movs	r2, r6
 800dfc6:	003b      	movs	r3, r7
 800dfc8:	900a      	str	r0, [sp, #40]	@ 0x28
 800dfca:	910b      	str	r1, [sp, #44]	@ 0x2c
 800dfcc:	f7f2 fa40 	bl	8000450 <__aeabi_dcmplt>
 800dfd0:	2800      	cmp	r0, #0
 800dfd2:	d16b      	bne.n	800e0ac <_dtoa_r+0x65c>
 800dfd4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dfd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dfd8:	2000      	movs	r0, #0
 800dfda:	4961      	ldr	r1, [pc, #388]	@ (800e160 <_dtoa_r+0x710>)
 800dfdc:	f7f3 fd46 	bl	8001a6c <__aeabi_dsub>
 800dfe0:	0032      	movs	r2, r6
 800dfe2:	003b      	movs	r3, r7
 800dfe4:	f7f2 fa34 	bl	8000450 <__aeabi_dcmplt>
 800dfe8:	2800      	cmp	r0, #0
 800dfea:	d000      	beq.n	800dfee <_dtoa_r+0x59e>
 800dfec:	e0c6      	b.n	800e17c <_dtoa_r+0x72c>
 800dfee:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dff0:	42a3      	cmp	r3, r4
 800dff2:	d100      	bne.n	800dff6 <_dtoa_r+0x5a6>
 800dff4:	e765      	b.n	800dec2 <_dtoa_r+0x472>
 800dff6:	2200      	movs	r2, #0
 800dff8:	0030      	movs	r0, r6
 800dffa:	0039      	movs	r1, r7
 800dffc:	4b59      	ldr	r3, [pc, #356]	@ (800e164 <_dtoa_r+0x714>)
 800dffe:	f7f3 fa4f 	bl	80014a0 <__aeabi_dmul>
 800e002:	2200      	movs	r2, #0
 800e004:	0006      	movs	r6, r0
 800e006:	000f      	movs	r7, r1
 800e008:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e00a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e00c:	4b55      	ldr	r3, [pc, #340]	@ (800e164 <_dtoa_r+0x714>)
 800e00e:	f7f3 fa47 	bl	80014a0 <__aeabi_dmul>
 800e012:	9416      	str	r4, [sp, #88]	@ 0x58
 800e014:	900a      	str	r0, [sp, #40]	@ 0x28
 800e016:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e018:	e7c3      	b.n	800dfa2 <_dtoa_r+0x552>
 800e01a:	0030      	movs	r0, r6
 800e01c:	0039      	movs	r1, r7
 800e01e:	f7f3 fa3f 	bl	80014a0 <__aeabi_dmul>
 800e022:	9d08      	ldr	r5, [sp, #32]
 800e024:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e026:	002b      	movs	r3, r5
 800e028:	4694      	mov	ip, r2
 800e02a:	9016      	str	r0, [sp, #88]	@ 0x58
 800e02c:	9117      	str	r1, [sp, #92]	@ 0x5c
 800e02e:	4463      	add	r3, ip
 800e030:	9319      	str	r3, [sp, #100]	@ 0x64
 800e032:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e034:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e036:	f7f4 f945 	bl	80022c4 <__aeabi_d2iz>
 800e03a:	0004      	movs	r4, r0
 800e03c:	f7f4 f97e 	bl	800233c <__aeabi_i2d>
 800e040:	000b      	movs	r3, r1
 800e042:	0002      	movs	r2, r0
 800e044:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e046:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e048:	f7f3 fd10 	bl	8001a6c <__aeabi_dsub>
 800e04c:	3430      	adds	r4, #48	@ 0x30
 800e04e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e050:	702c      	strb	r4, [r5, #0]
 800e052:	3501      	adds	r5, #1
 800e054:	0006      	movs	r6, r0
 800e056:	000f      	movs	r7, r1
 800e058:	42ab      	cmp	r3, r5
 800e05a:	d12a      	bne.n	800e0b2 <_dtoa_r+0x662>
 800e05c:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800e05e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800e060:	9b08      	ldr	r3, [sp, #32]
 800e062:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800e064:	469c      	mov	ip, r3
 800e066:	2200      	movs	r2, #0
 800e068:	4b42      	ldr	r3, [pc, #264]	@ (800e174 <_dtoa_r+0x724>)
 800e06a:	4464      	add	r4, ip
 800e06c:	f7f2 fa18 	bl	80004a0 <__aeabi_dadd>
 800e070:	0002      	movs	r2, r0
 800e072:	000b      	movs	r3, r1
 800e074:	0030      	movs	r0, r6
 800e076:	0039      	movs	r1, r7
 800e078:	f7f2 f9fe 	bl	8000478 <__aeabi_dcmpgt>
 800e07c:	2800      	cmp	r0, #0
 800e07e:	d000      	beq.n	800e082 <_dtoa_r+0x632>
 800e080:	e07c      	b.n	800e17c <_dtoa_r+0x72c>
 800e082:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e084:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e086:	2000      	movs	r0, #0
 800e088:	493a      	ldr	r1, [pc, #232]	@ (800e174 <_dtoa_r+0x724>)
 800e08a:	f7f3 fcef 	bl	8001a6c <__aeabi_dsub>
 800e08e:	0002      	movs	r2, r0
 800e090:	000b      	movs	r3, r1
 800e092:	0030      	movs	r0, r6
 800e094:	0039      	movs	r1, r7
 800e096:	f7f2 f9db 	bl	8000450 <__aeabi_dcmplt>
 800e09a:	2800      	cmp	r0, #0
 800e09c:	d100      	bne.n	800e0a0 <_dtoa_r+0x650>
 800e09e:	e710      	b.n	800dec2 <_dtoa_r+0x472>
 800e0a0:	0023      	movs	r3, r4
 800e0a2:	3c01      	subs	r4, #1
 800e0a4:	7822      	ldrb	r2, [r4, #0]
 800e0a6:	2a30      	cmp	r2, #48	@ 0x30
 800e0a8:	d0fa      	beq.n	800e0a0 <_dtoa_r+0x650>
 800e0aa:	001c      	movs	r4, r3
 800e0ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e0ae:	9304      	str	r3, [sp, #16]
 800e0b0:	e042      	b.n	800e138 <_dtoa_r+0x6e8>
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	4b2b      	ldr	r3, [pc, #172]	@ (800e164 <_dtoa_r+0x714>)
 800e0b6:	f7f3 f9f3 	bl	80014a0 <__aeabi_dmul>
 800e0ba:	900a      	str	r0, [sp, #40]	@ 0x28
 800e0bc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e0be:	e7b8      	b.n	800e032 <_dtoa_r+0x5e2>
 800e0c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0c2:	9d08      	ldr	r5, [sp, #32]
 800e0c4:	3b01      	subs	r3, #1
 800e0c6:	195b      	adds	r3, r3, r5
 800e0c8:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800e0ca:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800e0cc:	930a      	str	r3, [sp, #40]	@ 0x28
 800e0ce:	9a06      	ldr	r2, [sp, #24]
 800e0d0:	9b07      	ldr	r3, [sp, #28]
 800e0d2:	0030      	movs	r0, r6
 800e0d4:	0039      	movs	r1, r7
 800e0d6:	f7f2 fda9 	bl	8000c2c <__aeabi_ddiv>
 800e0da:	f7f4 f8f3 	bl	80022c4 <__aeabi_d2iz>
 800e0de:	9009      	str	r0, [sp, #36]	@ 0x24
 800e0e0:	f7f4 f92c 	bl	800233c <__aeabi_i2d>
 800e0e4:	9a06      	ldr	r2, [sp, #24]
 800e0e6:	9b07      	ldr	r3, [sp, #28]
 800e0e8:	f7f3 f9da 	bl	80014a0 <__aeabi_dmul>
 800e0ec:	0002      	movs	r2, r0
 800e0ee:	000b      	movs	r3, r1
 800e0f0:	0030      	movs	r0, r6
 800e0f2:	0039      	movs	r1, r7
 800e0f4:	f7f3 fcba 	bl	8001a6c <__aeabi_dsub>
 800e0f8:	002b      	movs	r3, r5
 800e0fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e0fc:	3501      	adds	r5, #1
 800e0fe:	3230      	adds	r2, #48	@ 0x30
 800e100:	701a      	strb	r2, [r3, #0]
 800e102:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e104:	002c      	movs	r4, r5
 800e106:	429a      	cmp	r2, r3
 800e108:	d14b      	bne.n	800e1a2 <_dtoa_r+0x752>
 800e10a:	0002      	movs	r2, r0
 800e10c:	000b      	movs	r3, r1
 800e10e:	f7f2 f9c7 	bl	80004a0 <__aeabi_dadd>
 800e112:	9a06      	ldr	r2, [sp, #24]
 800e114:	9b07      	ldr	r3, [sp, #28]
 800e116:	0006      	movs	r6, r0
 800e118:	000f      	movs	r7, r1
 800e11a:	f7f2 f9ad 	bl	8000478 <__aeabi_dcmpgt>
 800e11e:	2800      	cmp	r0, #0
 800e120:	d12a      	bne.n	800e178 <_dtoa_r+0x728>
 800e122:	9a06      	ldr	r2, [sp, #24]
 800e124:	9b07      	ldr	r3, [sp, #28]
 800e126:	0030      	movs	r0, r6
 800e128:	0039      	movs	r1, r7
 800e12a:	f7f2 f98b 	bl	8000444 <__aeabi_dcmpeq>
 800e12e:	2800      	cmp	r0, #0
 800e130:	d002      	beq.n	800e138 <_dtoa_r+0x6e8>
 800e132:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e134:	07dd      	lsls	r5, r3, #31
 800e136:	d41f      	bmi.n	800e178 <_dtoa_r+0x728>
 800e138:	9905      	ldr	r1, [sp, #20]
 800e13a:	9803      	ldr	r0, [sp, #12]
 800e13c:	f000 fbc2 	bl	800e8c4 <_Bfree>
 800e140:	2300      	movs	r3, #0
 800e142:	7023      	strb	r3, [r4, #0]
 800e144:	9b04      	ldr	r3, [sp, #16]
 800e146:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800e148:	3301      	adds	r3, #1
 800e14a:	6013      	str	r3, [r2, #0]
 800e14c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d100      	bne.n	800e154 <_dtoa_r+0x704>
 800e152:	e4c7      	b.n	800dae4 <_dtoa_r+0x94>
 800e154:	601c      	str	r4, [r3, #0]
 800e156:	e4c5      	b.n	800dae4 <_dtoa_r+0x94>
 800e158:	080108e8 	.word	0x080108e8
 800e15c:	080108c0 	.word	0x080108c0
 800e160:	3ff00000 	.word	0x3ff00000
 800e164:	40240000 	.word	0x40240000
 800e168:	401c0000 	.word	0x401c0000
 800e16c:	fcc00000 	.word	0xfcc00000
 800e170:	40140000 	.word	0x40140000
 800e174:	3fe00000 	.word	0x3fe00000
 800e178:	9b04      	ldr	r3, [sp, #16]
 800e17a:	930c      	str	r3, [sp, #48]	@ 0x30
 800e17c:	0023      	movs	r3, r4
 800e17e:	001c      	movs	r4, r3
 800e180:	3b01      	subs	r3, #1
 800e182:	781a      	ldrb	r2, [r3, #0]
 800e184:	2a39      	cmp	r2, #57	@ 0x39
 800e186:	d108      	bne.n	800e19a <_dtoa_r+0x74a>
 800e188:	9a08      	ldr	r2, [sp, #32]
 800e18a:	429a      	cmp	r2, r3
 800e18c:	d1f7      	bne.n	800e17e <_dtoa_r+0x72e>
 800e18e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e190:	9908      	ldr	r1, [sp, #32]
 800e192:	3201      	adds	r2, #1
 800e194:	920c      	str	r2, [sp, #48]	@ 0x30
 800e196:	2230      	movs	r2, #48	@ 0x30
 800e198:	700a      	strb	r2, [r1, #0]
 800e19a:	781a      	ldrb	r2, [r3, #0]
 800e19c:	3201      	adds	r2, #1
 800e19e:	701a      	strb	r2, [r3, #0]
 800e1a0:	e784      	b.n	800e0ac <_dtoa_r+0x65c>
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	4bc6      	ldr	r3, [pc, #792]	@ (800e4c0 <_dtoa_r+0xa70>)
 800e1a6:	f7f3 f97b 	bl	80014a0 <__aeabi_dmul>
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	0006      	movs	r6, r0
 800e1b0:	000f      	movs	r7, r1
 800e1b2:	f7f2 f947 	bl	8000444 <__aeabi_dcmpeq>
 800e1b6:	2800      	cmp	r0, #0
 800e1b8:	d089      	beq.n	800e0ce <_dtoa_r+0x67e>
 800e1ba:	e7bd      	b.n	800e138 <_dtoa_r+0x6e8>
 800e1bc:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800e1be:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800e1c0:	9c06      	ldr	r4, [sp, #24]
 800e1c2:	2f00      	cmp	r7, #0
 800e1c4:	d014      	beq.n	800e1f0 <_dtoa_r+0x7a0>
 800e1c6:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800e1c8:	2a01      	cmp	r2, #1
 800e1ca:	dd00      	ble.n	800e1ce <_dtoa_r+0x77e>
 800e1cc:	e0e4      	b.n	800e398 <_dtoa_r+0x948>
 800e1ce:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800e1d0:	2a00      	cmp	r2, #0
 800e1d2:	d100      	bne.n	800e1d6 <_dtoa_r+0x786>
 800e1d4:	e0da      	b.n	800e38c <_dtoa_r+0x93c>
 800e1d6:	4abb      	ldr	r2, [pc, #748]	@ (800e4c4 <_dtoa_r+0xa74>)
 800e1d8:	189b      	adds	r3, r3, r2
 800e1da:	9a06      	ldr	r2, [sp, #24]
 800e1dc:	2101      	movs	r1, #1
 800e1de:	18d2      	adds	r2, r2, r3
 800e1e0:	9206      	str	r2, [sp, #24]
 800e1e2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e1e4:	9803      	ldr	r0, [sp, #12]
 800e1e6:	18d3      	adds	r3, r2, r3
 800e1e8:	930d      	str	r3, [sp, #52]	@ 0x34
 800e1ea:	f000 fc23 	bl	800ea34 <__i2b>
 800e1ee:	0007      	movs	r7, r0
 800e1f0:	2c00      	cmp	r4, #0
 800e1f2:	d00e      	beq.n	800e212 <_dtoa_r+0x7c2>
 800e1f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	dd0b      	ble.n	800e212 <_dtoa_r+0x7c2>
 800e1fa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e1fc:	0023      	movs	r3, r4
 800e1fe:	4294      	cmp	r4, r2
 800e200:	dd00      	ble.n	800e204 <_dtoa_r+0x7b4>
 800e202:	0013      	movs	r3, r2
 800e204:	9a06      	ldr	r2, [sp, #24]
 800e206:	1ae4      	subs	r4, r4, r3
 800e208:	1ad2      	subs	r2, r2, r3
 800e20a:	9206      	str	r2, [sp, #24]
 800e20c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e20e:	1ad3      	subs	r3, r2, r3
 800e210:	930d      	str	r3, [sp, #52]	@ 0x34
 800e212:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e214:	2b00      	cmp	r3, #0
 800e216:	d021      	beq.n	800e25c <_dtoa_r+0x80c>
 800e218:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d100      	bne.n	800e220 <_dtoa_r+0x7d0>
 800e21e:	e0d3      	b.n	800e3c8 <_dtoa_r+0x978>
 800e220:	9e05      	ldr	r6, [sp, #20]
 800e222:	2d00      	cmp	r5, #0
 800e224:	d014      	beq.n	800e250 <_dtoa_r+0x800>
 800e226:	0039      	movs	r1, r7
 800e228:	002a      	movs	r2, r5
 800e22a:	9803      	ldr	r0, [sp, #12]
 800e22c:	f000 fcc4 	bl	800ebb8 <__pow5mult>
 800e230:	9a05      	ldr	r2, [sp, #20]
 800e232:	0001      	movs	r1, r0
 800e234:	0007      	movs	r7, r0
 800e236:	9803      	ldr	r0, [sp, #12]
 800e238:	f000 fc14 	bl	800ea64 <__multiply>
 800e23c:	0006      	movs	r6, r0
 800e23e:	9905      	ldr	r1, [sp, #20]
 800e240:	9803      	ldr	r0, [sp, #12]
 800e242:	f000 fb3f 	bl	800e8c4 <_Bfree>
 800e246:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e248:	9605      	str	r6, [sp, #20]
 800e24a:	1b5b      	subs	r3, r3, r5
 800e24c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e24e:	d005      	beq.n	800e25c <_dtoa_r+0x80c>
 800e250:	0031      	movs	r1, r6
 800e252:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e254:	9803      	ldr	r0, [sp, #12]
 800e256:	f000 fcaf 	bl	800ebb8 <__pow5mult>
 800e25a:	9005      	str	r0, [sp, #20]
 800e25c:	2101      	movs	r1, #1
 800e25e:	9803      	ldr	r0, [sp, #12]
 800e260:	f000 fbe8 	bl	800ea34 <__i2b>
 800e264:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e266:	0006      	movs	r6, r0
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d100      	bne.n	800e26e <_dtoa_r+0x81e>
 800e26c:	e1bc      	b.n	800e5e8 <_dtoa_r+0xb98>
 800e26e:	001a      	movs	r2, r3
 800e270:	0001      	movs	r1, r0
 800e272:	9803      	ldr	r0, [sp, #12]
 800e274:	f000 fca0 	bl	800ebb8 <__pow5mult>
 800e278:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e27a:	0006      	movs	r6, r0
 800e27c:	2500      	movs	r5, #0
 800e27e:	2b01      	cmp	r3, #1
 800e280:	dc16      	bgt.n	800e2b0 <_dtoa_r+0x860>
 800e282:	2500      	movs	r5, #0
 800e284:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e286:	42ab      	cmp	r3, r5
 800e288:	d10e      	bne.n	800e2a8 <_dtoa_r+0x858>
 800e28a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e28c:	031b      	lsls	r3, r3, #12
 800e28e:	42ab      	cmp	r3, r5
 800e290:	d10a      	bne.n	800e2a8 <_dtoa_r+0x858>
 800e292:	4b8d      	ldr	r3, [pc, #564]	@ (800e4c8 <_dtoa_r+0xa78>)
 800e294:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e296:	4213      	tst	r3, r2
 800e298:	d006      	beq.n	800e2a8 <_dtoa_r+0x858>
 800e29a:	9b06      	ldr	r3, [sp, #24]
 800e29c:	3501      	adds	r5, #1
 800e29e:	3301      	adds	r3, #1
 800e2a0:	9306      	str	r3, [sp, #24]
 800e2a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e2a4:	3301      	adds	r3, #1
 800e2a6:	930d      	str	r3, [sp, #52]	@ 0x34
 800e2a8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e2aa:	2001      	movs	r0, #1
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d008      	beq.n	800e2c2 <_dtoa_r+0x872>
 800e2b0:	6933      	ldr	r3, [r6, #16]
 800e2b2:	3303      	adds	r3, #3
 800e2b4:	009b      	lsls	r3, r3, #2
 800e2b6:	18f3      	adds	r3, r6, r3
 800e2b8:	6858      	ldr	r0, [r3, #4]
 800e2ba:	f000 fb6b 	bl	800e994 <__hi0bits>
 800e2be:	2320      	movs	r3, #32
 800e2c0:	1a18      	subs	r0, r3, r0
 800e2c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e2c4:	1818      	adds	r0, r3, r0
 800e2c6:	0002      	movs	r2, r0
 800e2c8:	231f      	movs	r3, #31
 800e2ca:	401a      	ands	r2, r3
 800e2cc:	4218      	tst	r0, r3
 800e2ce:	d100      	bne.n	800e2d2 <_dtoa_r+0x882>
 800e2d0:	e081      	b.n	800e3d6 <_dtoa_r+0x986>
 800e2d2:	3301      	adds	r3, #1
 800e2d4:	1a9b      	subs	r3, r3, r2
 800e2d6:	2b04      	cmp	r3, #4
 800e2d8:	dd79      	ble.n	800e3ce <_dtoa_r+0x97e>
 800e2da:	231c      	movs	r3, #28
 800e2dc:	1a9b      	subs	r3, r3, r2
 800e2de:	9a06      	ldr	r2, [sp, #24]
 800e2e0:	18e4      	adds	r4, r4, r3
 800e2e2:	18d2      	adds	r2, r2, r3
 800e2e4:	9206      	str	r2, [sp, #24]
 800e2e6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e2e8:	18d3      	adds	r3, r2, r3
 800e2ea:	930d      	str	r3, [sp, #52]	@ 0x34
 800e2ec:	9b06      	ldr	r3, [sp, #24]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	dd05      	ble.n	800e2fe <_dtoa_r+0x8ae>
 800e2f2:	001a      	movs	r2, r3
 800e2f4:	9905      	ldr	r1, [sp, #20]
 800e2f6:	9803      	ldr	r0, [sp, #12]
 800e2f8:	f000 fcba 	bl	800ec70 <__lshift>
 800e2fc:	9005      	str	r0, [sp, #20]
 800e2fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e300:	2b00      	cmp	r3, #0
 800e302:	dd05      	ble.n	800e310 <_dtoa_r+0x8c0>
 800e304:	0031      	movs	r1, r6
 800e306:	001a      	movs	r2, r3
 800e308:	9803      	ldr	r0, [sp, #12]
 800e30a:	f000 fcb1 	bl	800ec70 <__lshift>
 800e30e:	0006      	movs	r6, r0
 800e310:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e312:	2b00      	cmp	r3, #0
 800e314:	d061      	beq.n	800e3da <_dtoa_r+0x98a>
 800e316:	0031      	movs	r1, r6
 800e318:	9805      	ldr	r0, [sp, #20]
 800e31a:	f000 fd15 	bl	800ed48 <__mcmp>
 800e31e:	2800      	cmp	r0, #0
 800e320:	da5b      	bge.n	800e3da <_dtoa_r+0x98a>
 800e322:	9b04      	ldr	r3, [sp, #16]
 800e324:	220a      	movs	r2, #10
 800e326:	3b01      	subs	r3, #1
 800e328:	930c      	str	r3, [sp, #48]	@ 0x30
 800e32a:	9905      	ldr	r1, [sp, #20]
 800e32c:	2300      	movs	r3, #0
 800e32e:	9803      	ldr	r0, [sp, #12]
 800e330:	f000 faec 	bl	800e90c <__multadd>
 800e334:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e336:	9005      	str	r0, [sp, #20]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d100      	bne.n	800e33e <_dtoa_r+0x8ee>
 800e33c:	e15b      	b.n	800e5f6 <_dtoa_r+0xba6>
 800e33e:	2300      	movs	r3, #0
 800e340:	0039      	movs	r1, r7
 800e342:	220a      	movs	r2, #10
 800e344:	9803      	ldr	r0, [sp, #12]
 800e346:	f000 fae1 	bl	800e90c <__multadd>
 800e34a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e34c:	0007      	movs	r7, r0
 800e34e:	2b00      	cmp	r3, #0
 800e350:	dc4d      	bgt.n	800e3ee <_dtoa_r+0x99e>
 800e352:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e354:	2b02      	cmp	r3, #2
 800e356:	dd46      	ble.n	800e3e6 <_dtoa_r+0x996>
 800e358:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d000      	beq.n	800e360 <_dtoa_r+0x910>
 800e35e:	e5db      	b.n	800df18 <_dtoa_r+0x4c8>
 800e360:	0031      	movs	r1, r6
 800e362:	2205      	movs	r2, #5
 800e364:	9803      	ldr	r0, [sp, #12]
 800e366:	f000 fad1 	bl	800e90c <__multadd>
 800e36a:	0006      	movs	r6, r0
 800e36c:	0001      	movs	r1, r0
 800e36e:	9805      	ldr	r0, [sp, #20]
 800e370:	f000 fcea 	bl	800ed48 <__mcmp>
 800e374:	2800      	cmp	r0, #0
 800e376:	dc00      	bgt.n	800e37a <_dtoa_r+0x92a>
 800e378:	e5ce      	b.n	800df18 <_dtoa_r+0x4c8>
 800e37a:	9b08      	ldr	r3, [sp, #32]
 800e37c:	9a08      	ldr	r2, [sp, #32]
 800e37e:	1c5c      	adds	r4, r3, #1
 800e380:	2331      	movs	r3, #49	@ 0x31
 800e382:	7013      	strb	r3, [r2, #0]
 800e384:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e386:	3301      	adds	r3, #1
 800e388:	930c      	str	r3, [sp, #48]	@ 0x30
 800e38a:	e5c9      	b.n	800df20 <_dtoa_r+0x4d0>
 800e38c:	2336      	movs	r3, #54	@ 0x36
 800e38e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e390:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800e392:	1a9b      	subs	r3, r3, r2
 800e394:	9c06      	ldr	r4, [sp, #24]
 800e396:	e720      	b.n	800e1da <_dtoa_r+0x78a>
 800e398:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e39a:	1e5d      	subs	r5, r3, #1
 800e39c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e39e:	42ab      	cmp	r3, r5
 800e3a0:	db08      	blt.n	800e3b4 <_dtoa_r+0x964>
 800e3a2:	1b5d      	subs	r5, r3, r5
 800e3a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	daf4      	bge.n	800e394 <_dtoa_r+0x944>
 800e3aa:	9b06      	ldr	r3, [sp, #24]
 800e3ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e3ae:	1a9c      	subs	r4, r3, r2
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	e712      	b.n	800e1da <_dtoa_r+0x78a>
 800e3b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e3b6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e3b8:	1aeb      	subs	r3, r5, r3
 800e3ba:	18d3      	adds	r3, r2, r3
 800e3bc:	9314      	str	r3, [sp, #80]	@ 0x50
 800e3be:	950f      	str	r5, [sp, #60]	@ 0x3c
 800e3c0:	9c06      	ldr	r4, [sp, #24]
 800e3c2:	2500      	movs	r5, #0
 800e3c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3c6:	e708      	b.n	800e1da <_dtoa_r+0x78a>
 800e3c8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e3ca:	9905      	ldr	r1, [sp, #20]
 800e3cc:	e742      	b.n	800e254 <_dtoa_r+0x804>
 800e3ce:	2b04      	cmp	r3, #4
 800e3d0:	d08c      	beq.n	800e2ec <_dtoa_r+0x89c>
 800e3d2:	331c      	adds	r3, #28
 800e3d4:	e783      	b.n	800e2de <_dtoa_r+0x88e>
 800e3d6:	0013      	movs	r3, r2
 800e3d8:	e7fb      	b.n	800e3d2 <_dtoa_r+0x982>
 800e3da:	9b04      	ldr	r3, [sp, #16]
 800e3dc:	930c      	str	r3, [sp, #48]	@ 0x30
 800e3de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3e0:	930e      	str	r3, [sp, #56]	@ 0x38
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	ddb5      	ble.n	800e352 <_dtoa_r+0x902>
 800e3e6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d100      	bne.n	800e3ee <_dtoa_r+0x99e>
 800e3ec:	e107      	b.n	800e5fe <_dtoa_r+0xbae>
 800e3ee:	2c00      	cmp	r4, #0
 800e3f0:	dd05      	ble.n	800e3fe <_dtoa_r+0x9ae>
 800e3f2:	0039      	movs	r1, r7
 800e3f4:	0022      	movs	r2, r4
 800e3f6:	9803      	ldr	r0, [sp, #12]
 800e3f8:	f000 fc3a 	bl	800ec70 <__lshift>
 800e3fc:	0007      	movs	r7, r0
 800e3fe:	9704      	str	r7, [sp, #16]
 800e400:	2d00      	cmp	r5, #0
 800e402:	d020      	beq.n	800e446 <_dtoa_r+0x9f6>
 800e404:	6879      	ldr	r1, [r7, #4]
 800e406:	9803      	ldr	r0, [sp, #12]
 800e408:	f000 fa18 	bl	800e83c <_Balloc>
 800e40c:	1e04      	subs	r4, r0, #0
 800e40e:	d10c      	bne.n	800e42a <_dtoa_r+0x9da>
 800e410:	0022      	movs	r2, r4
 800e412:	4b2e      	ldr	r3, [pc, #184]	@ (800e4cc <_dtoa_r+0xa7c>)
 800e414:	482e      	ldr	r0, [pc, #184]	@ (800e4d0 <_dtoa_r+0xa80>)
 800e416:	492f      	ldr	r1, [pc, #188]	@ (800e4d4 <_dtoa_r+0xa84>)
 800e418:	f7ff fb2f 	bl	800da7a <_dtoa_r+0x2a>
 800e41c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800e41e:	0037      	movs	r7, r6
 800e420:	e7ab      	b.n	800e37a <_dtoa_r+0x92a>
 800e422:	9b04      	ldr	r3, [sp, #16]
 800e424:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800e426:	930c      	str	r3, [sp, #48]	@ 0x30
 800e428:	e7f9      	b.n	800e41e <_dtoa_r+0x9ce>
 800e42a:	0039      	movs	r1, r7
 800e42c:	693a      	ldr	r2, [r7, #16]
 800e42e:	310c      	adds	r1, #12
 800e430:	3202      	adds	r2, #2
 800e432:	0092      	lsls	r2, r2, #2
 800e434:	300c      	adds	r0, #12
 800e436:	f7ff fa7d 	bl	800d934 <memcpy>
 800e43a:	2201      	movs	r2, #1
 800e43c:	0021      	movs	r1, r4
 800e43e:	9803      	ldr	r0, [sp, #12]
 800e440:	f000 fc16 	bl	800ec70 <__lshift>
 800e444:	9004      	str	r0, [sp, #16]
 800e446:	9b08      	ldr	r3, [sp, #32]
 800e448:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e44a:	9306      	str	r3, [sp, #24]
 800e44c:	3b01      	subs	r3, #1
 800e44e:	189b      	adds	r3, r3, r2
 800e450:	2201      	movs	r2, #1
 800e452:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e454:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e456:	4013      	ands	r3, r2
 800e458:	930e      	str	r3, [sp, #56]	@ 0x38
 800e45a:	0031      	movs	r1, r6
 800e45c:	9805      	ldr	r0, [sp, #20]
 800e45e:	f7ff fa72 	bl	800d946 <quorem>
 800e462:	0039      	movs	r1, r7
 800e464:	0005      	movs	r5, r0
 800e466:	900a      	str	r0, [sp, #40]	@ 0x28
 800e468:	9805      	ldr	r0, [sp, #20]
 800e46a:	f000 fc6d 	bl	800ed48 <__mcmp>
 800e46e:	9a04      	ldr	r2, [sp, #16]
 800e470:	900d      	str	r0, [sp, #52]	@ 0x34
 800e472:	0031      	movs	r1, r6
 800e474:	9803      	ldr	r0, [sp, #12]
 800e476:	f000 fc83 	bl	800ed80 <__mdiff>
 800e47a:	2201      	movs	r2, #1
 800e47c:	68c3      	ldr	r3, [r0, #12]
 800e47e:	0004      	movs	r4, r0
 800e480:	3530      	adds	r5, #48	@ 0x30
 800e482:	9209      	str	r2, [sp, #36]	@ 0x24
 800e484:	2b00      	cmp	r3, #0
 800e486:	d104      	bne.n	800e492 <_dtoa_r+0xa42>
 800e488:	0001      	movs	r1, r0
 800e48a:	9805      	ldr	r0, [sp, #20]
 800e48c:	f000 fc5c 	bl	800ed48 <__mcmp>
 800e490:	9009      	str	r0, [sp, #36]	@ 0x24
 800e492:	0021      	movs	r1, r4
 800e494:	9803      	ldr	r0, [sp, #12]
 800e496:	f000 fa15 	bl	800e8c4 <_Bfree>
 800e49a:	9b06      	ldr	r3, [sp, #24]
 800e49c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800e49e:	1c5c      	adds	r4, r3, #1
 800e4a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4a2:	4313      	orrs	r3, r2
 800e4a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e4a6:	4313      	orrs	r3, r2
 800e4a8:	d116      	bne.n	800e4d8 <_dtoa_r+0xa88>
 800e4aa:	2d39      	cmp	r5, #57	@ 0x39
 800e4ac:	d02f      	beq.n	800e50e <_dtoa_r+0xabe>
 800e4ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	dd01      	ble.n	800e4b8 <_dtoa_r+0xa68>
 800e4b4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800e4b6:	3531      	adds	r5, #49	@ 0x31
 800e4b8:	9b06      	ldr	r3, [sp, #24]
 800e4ba:	701d      	strb	r5, [r3, #0]
 800e4bc:	e532      	b.n	800df24 <_dtoa_r+0x4d4>
 800e4be:	46c0      	nop			@ (mov r8, r8)
 800e4c0:	40240000 	.word	0x40240000
 800e4c4:	00000433 	.word	0x00000433
 800e4c8:	7ff00000 	.word	0x7ff00000
 800e4cc:	080107f0 	.word	0x080107f0
 800e4d0:	08010798 	.word	0x08010798
 800e4d4:	000002ef 	.word	0x000002ef
 800e4d8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	db04      	blt.n	800e4e8 <_dtoa_r+0xa98>
 800e4de:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800e4e0:	4313      	orrs	r3, r2
 800e4e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e4e4:	4313      	orrs	r3, r2
 800e4e6:	d11e      	bne.n	800e526 <_dtoa_r+0xad6>
 800e4e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	dde4      	ble.n	800e4b8 <_dtoa_r+0xa68>
 800e4ee:	9905      	ldr	r1, [sp, #20]
 800e4f0:	2201      	movs	r2, #1
 800e4f2:	9803      	ldr	r0, [sp, #12]
 800e4f4:	f000 fbbc 	bl	800ec70 <__lshift>
 800e4f8:	0031      	movs	r1, r6
 800e4fa:	9005      	str	r0, [sp, #20]
 800e4fc:	f000 fc24 	bl	800ed48 <__mcmp>
 800e500:	2800      	cmp	r0, #0
 800e502:	dc02      	bgt.n	800e50a <_dtoa_r+0xaba>
 800e504:	d1d8      	bne.n	800e4b8 <_dtoa_r+0xa68>
 800e506:	07eb      	lsls	r3, r5, #31
 800e508:	d5d6      	bpl.n	800e4b8 <_dtoa_r+0xa68>
 800e50a:	2d39      	cmp	r5, #57	@ 0x39
 800e50c:	d1d2      	bne.n	800e4b4 <_dtoa_r+0xa64>
 800e50e:	2339      	movs	r3, #57	@ 0x39
 800e510:	9a06      	ldr	r2, [sp, #24]
 800e512:	7013      	strb	r3, [r2, #0]
 800e514:	0023      	movs	r3, r4
 800e516:	001c      	movs	r4, r3
 800e518:	3b01      	subs	r3, #1
 800e51a:	781a      	ldrb	r2, [r3, #0]
 800e51c:	2a39      	cmp	r2, #57	@ 0x39
 800e51e:	d050      	beq.n	800e5c2 <_dtoa_r+0xb72>
 800e520:	3201      	adds	r2, #1
 800e522:	701a      	strb	r2, [r3, #0]
 800e524:	e4fe      	b.n	800df24 <_dtoa_r+0x4d4>
 800e526:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e528:	2b00      	cmp	r3, #0
 800e52a:	dd03      	ble.n	800e534 <_dtoa_r+0xae4>
 800e52c:	2d39      	cmp	r5, #57	@ 0x39
 800e52e:	d0ee      	beq.n	800e50e <_dtoa_r+0xabe>
 800e530:	3501      	adds	r5, #1
 800e532:	e7c1      	b.n	800e4b8 <_dtoa_r+0xa68>
 800e534:	9b06      	ldr	r3, [sp, #24]
 800e536:	9a06      	ldr	r2, [sp, #24]
 800e538:	701d      	strb	r5, [r3, #0]
 800e53a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e53c:	4293      	cmp	r3, r2
 800e53e:	d02b      	beq.n	800e598 <_dtoa_r+0xb48>
 800e540:	2300      	movs	r3, #0
 800e542:	220a      	movs	r2, #10
 800e544:	9905      	ldr	r1, [sp, #20]
 800e546:	9803      	ldr	r0, [sp, #12]
 800e548:	f000 f9e0 	bl	800e90c <__multadd>
 800e54c:	9b04      	ldr	r3, [sp, #16]
 800e54e:	9005      	str	r0, [sp, #20]
 800e550:	429f      	cmp	r7, r3
 800e552:	d109      	bne.n	800e568 <_dtoa_r+0xb18>
 800e554:	0039      	movs	r1, r7
 800e556:	2300      	movs	r3, #0
 800e558:	220a      	movs	r2, #10
 800e55a:	9803      	ldr	r0, [sp, #12]
 800e55c:	f000 f9d6 	bl	800e90c <__multadd>
 800e560:	0007      	movs	r7, r0
 800e562:	9004      	str	r0, [sp, #16]
 800e564:	9406      	str	r4, [sp, #24]
 800e566:	e778      	b.n	800e45a <_dtoa_r+0xa0a>
 800e568:	0039      	movs	r1, r7
 800e56a:	2300      	movs	r3, #0
 800e56c:	220a      	movs	r2, #10
 800e56e:	9803      	ldr	r0, [sp, #12]
 800e570:	f000 f9cc 	bl	800e90c <__multadd>
 800e574:	2300      	movs	r3, #0
 800e576:	0007      	movs	r7, r0
 800e578:	220a      	movs	r2, #10
 800e57a:	9904      	ldr	r1, [sp, #16]
 800e57c:	9803      	ldr	r0, [sp, #12]
 800e57e:	f000 f9c5 	bl	800e90c <__multadd>
 800e582:	9004      	str	r0, [sp, #16]
 800e584:	e7ee      	b.n	800e564 <_dtoa_r+0xb14>
 800e586:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e588:	2401      	movs	r4, #1
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	dd00      	ble.n	800e590 <_dtoa_r+0xb40>
 800e58e:	001c      	movs	r4, r3
 800e590:	9704      	str	r7, [sp, #16]
 800e592:	2700      	movs	r7, #0
 800e594:	9b08      	ldr	r3, [sp, #32]
 800e596:	191c      	adds	r4, r3, r4
 800e598:	9905      	ldr	r1, [sp, #20]
 800e59a:	2201      	movs	r2, #1
 800e59c:	9803      	ldr	r0, [sp, #12]
 800e59e:	f000 fb67 	bl	800ec70 <__lshift>
 800e5a2:	0031      	movs	r1, r6
 800e5a4:	9005      	str	r0, [sp, #20]
 800e5a6:	f000 fbcf 	bl	800ed48 <__mcmp>
 800e5aa:	2800      	cmp	r0, #0
 800e5ac:	dcb2      	bgt.n	800e514 <_dtoa_r+0xac4>
 800e5ae:	d101      	bne.n	800e5b4 <_dtoa_r+0xb64>
 800e5b0:	07ed      	lsls	r5, r5, #31
 800e5b2:	d4af      	bmi.n	800e514 <_dtoa_r+0xac4>
 800e5b4:	0023      	movs	r3, r4
 800e5b6:	001c      	movs	r4, r3
 800e5b8:	3b01      	subs	r3, #1
 800e5ba:	781a      	ldrb	r2, [r3, #0]
 800e5bc:	2a30      	cmp	r2, #48	@ 0x30
 800e5be:	d0fa      	beq.n	800e5b6 <_dtoa_r+0xb66>
 800e5c0:	e4b0      	b.n	800df24 <_dtoa_r+0x4d4>
 800e5c2:	9a08      	ldr	r2, [sp, #32]
 800e5c4:	429a      	cmp	r2, r3
 800e5c6:	d1a6      	bne.n	800e516 <_dtoa_r+0xac6>
 800e5c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e5ca:	3301      	adds	r3, #1
 800e5cc:	930c      	str	r3, [sp, #48]	@ 0x30
 800e5ce:	2331      	movs	r3, #49	@ 0x31
 800e5d0:	7013      	strb	r3, [r2, #0]
 800e5d2:	e4a7      	b.n	800df24 <_dtoa_r+0x4d4>
 800e5d4:	4b14      	ldr	r3, [pc, #80]	@ (800e628 <_dtoa_r+0xbd8>)
 800e5d6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800e5d8:	9308      	str	r3, [sp, #32]
 800e5da:	4b14      	ldr	r3, [pc, #80]	@ (800e62c <_dtoa_r+0xbdc>)
 800e5dc:	2a00      	cmp	r2, #0
 800e5de:	d001      	beq.n	800e5e4 <_dtoa_r+0xb94>
 800e5e0:	f7ff fa7e 	bl	800dae0 <_dtoa_r+0x90>
 800e5e4:	f7ff fa7e 	bl	800dae4 <_dtoa_r+0x94>
 800e5e8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e5ea:	2b01      	cmp	r3, #1
 800e5ec:	dc00      	bgt.n	800e5f0 <_dtoa_r+0xba0>
 800e5ee:	e648      	b.n	800e282 <_dtoa_r+0x832>
 800e5f0:	2001      	movs	r0, #1
 800e5f2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800e5f4:	e665      	b.n	800e2c2 <_dtoa_r+0x872>
 800e5f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	dc00      	bgt.n	800e5fe <_dtoa_r+0xbae>
 800e5fc:	e6a9      	b.n	800e352 <_dtoa_r+0x902>
 800e5fe:	2400      	movs	r4, #0
 800e600:	0031      	movs	r1, r6
 800e602:	9805      	ldr	r0, [sp, #20]
 800e604:	f7ff f99f 	bl	800d946 <quorem>
 800e608:	9b08      	ldr	r3, [sp, #32]
 800e60a:	3030      	adds	r0, #48	@ 0x30
 800e60c:	5518      	strb	r0, [r3, r4]
 800e60e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e610:	3401      	adds	r4, #1
 800e612:	0005      	movs	r5, r0
 800e614:	42a3      	cmp	r3, r4
 800e616:	ddb6      	ble.n	800e586 <_dtoa_r+0xb36>
 800e618:	2300      	movs	r3, #0
 800e61a:	220a      	movs	r2, #10
 800e61c:	9905      	ldr	r1, [sp, #20]
 800e61e:	9803      	ldr	r0, [sp, #12]
 800e620:	f000 f974 	bl	800e90c <__multadd>
 800e624:	9005      	str	r0, [sp, #20]
 800e626:	e7eb      	b.n	800e600 <_dtoa_r+0xbb0>
 800e628:	08010774 	.word	0x08010774
 800e62c:	0801077c 	.word	0x0801077c

0800e630 <_free_r>:
 800e630:	b570      	push	{r4, r5, r6, lr}
 800e632:	0005      	movs	r5, r0
 800e634:	1e0c      	subs	r4, r1, #0
 800e636:	d010      	beq.n	800e65a <_free_r+0x2a>
 800e638:	3c04      	subs	r4, #4
 800e63a:	6823      	ldr	r3, [r4, #0]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	da00      	bge.n	800e642 <_free_r+0x12>
 800e640:	18e4      	adds	r4, r4, r3
 800e642:	0028      	movs	r0, r5
 800e644:	f000 f8ea 	bl	800e81c <__malloc_lock>
 800e648:	4a1d      	ldr	r2, [pc, #116]	@ (800e6c0 <_free_r+0x90>)
 800e64a:	6813      	ldr	r3, [r2, #0]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d105      	bne.n	800e65c <_free_r+0x2c>
 800e650:	6063      	str	r3, [r4, #4]
 800e652:	6014      	str	r4, [r2, #0]
 800e654:	0028      	movs	r0, r5
 800e656:	f000 f8e9 	bl	800e82c <__malloc_unlock>
 800e65a:	bd70      	pop	{r4, r5, r6, pc}
 800e65c:	42a3      	cmp	r3, r4
 800e65e:	d908      	bls.n	800e672 <_free_r+0x42>
 800e660:	6820      	ldr	r0, [r4, #0]
 800e662:	1821      	adds	r1, r4, r0
 800e664:	428b      	cmp	r3, r1
 800e666:	d1f3      	bne.n	800e650 <_free_r+0x20>
 800e668:	6819      	ldr	r1, [r3, #0]
 800e66a:	685b      	ldr	r3, [r3, #4]
 800e66c:	1809      	adds	r1, r1, r0
 800e66e:	6021      	str	r1, [r4, #0]
 800e670:	e7ee      	b.n	800e650 <_free_r+0x20>
 800e672:	001a      	movs	r2, r3
 800e674:	685b      	ldr	r3, [r3, #4]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d001      	beq.n	800e67e <_free_r+0x4e>
 800e67a:	42a3      	cmp	r3, r4
 800e67c:	d9f9      	bls.n	800e672 <_free_r+0x42>
 800e67e:	6811      	ldr	r1, [r2, #0]
 800e680:	1850      	adds	r0, r2, r1
 800e682:	42a0      	cmp	r0, r4
 800e684:	d10b      	bne.n	800e69e <_free_r+0x6e>
 800e686:	6820      	ldr	r0, [r4, #0]
 800e688:	1809      	adds	r1, r1, r0
 800e68a:	1850      	adds	r0, r2, r1
 800e68c:	6011      	str	r1, [r2, #0]
 800e68e:	4283      	cmp	r3, r0
 800e690:	d1e0      	bne.n	800e654 <_free_r+0x24>
 800e692:	6818      	ldr	r0, [r3, #0]
 800e694:	685b      	ldr	r3, [r3, #4]
 800e696:	1841      	adds	r1, r0, r1
 800e698:	6011      	str	r1, [r2, #0]
 800e69a:	6053      	str	r3, [r2, #4]
 800e69c:	e7da      	b.n	800e654 <_free_r+0x24>
 800e69e:	42a0      	cmp	r0, r4
 800e6a0:	d902      	bls.n	800e6a8 <_free_r+0x78>
 800e6a2:	230c      	movs	r3, #12
 800e6a4:	602b      	str	r3, [r5, #0]
 800e6a6:	e7d5      	b.n	800e654 <_free_r+0x24>
 800e6a8:	6820      	ldr	r0, [r4, #0]
 800e6aa:	1821      	adds	r1, r4, r0
 800e6ac:	428b      	cmp	r3, r1
 800e6ae:	d103      	bne.n	800e6b8 <_free_r+0x88>
 800e6b0:	6819      	ldr	r1, [r3, #0]
 800e6b2:	685b      	ldr	r3, [r3, #4]
 800e6b4:	1809      	adds	r1, r1, r0
 800e6b6:	6021      	str	r1, [r4, #0]
 800e6b8:	6063      	str	r3, [r4, #4]
 800e6ba:	6054      	str	r4, [r2, #4]
 800e6bc:	e7ca      	b.n	800e654 <_free_r+0x24>
 800e6be:	46c0      	nop			@ (mov r8, r8)
 800e6c0:	20000d3c 	.word	0x20000d3c

0800e6c4 <malloc>:
 800e6c4:	b510      	push	{r4, lr}
 800e6c6:	4b03      	ldr	r3, [pc, #12]	@ (800e6d4 <malloc+0x10>)
 800e6c8:	0001      	movs	r1, r0
 800e6ca:	6818      	ldr	r0, [r3, #0]
 800e6cc:	f000 f826 	bl	800e71c <_malloc_r>
 800e6d0:	bd10      	pop	{r4, pc}
 800e6d2:	46c0      	nop			@ (mov r8, r8)
 800e6d4:	20000048 	.word	0x20000048

0800e6d8 <sbrk_aligned>:
 800e6d8:	b570      	push	{r4, r5, r6, lr}
 800e6da:	4e0f      	ldr	r6, [pc, #60]	@ (800e718 <sbrk_aligned+0x40>)
 800e6dc:	000d      	movs	r5, r1
 800e6de:	6831      	ldr	r1, [r6, #0]
 800e6e0:	0004      	movs	r4, r0
 800e6e2:	2900      	cmp	r1, #0
 800e6e4:	d102      	bne.n	800e6ec <sbrk_aligned+0x14>
 800e6e6:	f000 fe4f 	bl	800f388 <_sbrk_r>
 800e6ea:	6030      	str	r0, [r6, #0]
 800e6ec:	0029      	movs	r1, r5
 800e6ee:	0020      	movs	r0, r4
 800e6f0:	f000 fe4a 	bl	800f388 <_sbrk_r>
 800e6f4:	1c43      	adds	r3, r0, #1
 800e6f6:	d103      	bne.n	800e700 <sbrk_aligned+0x28>
 800e6f8:	2501      	movs	r5, #1
 800e6fa:	426d      	negs	r5, r5
 800e6fc:	0028      	movs	r0, r5
 800e6fe:	bd70      	pop	{r4, r5, r6, pc}
 800e700:	2303      	movs	r3, #3
 800e702:	1cc5      	adds	r5, r0, #3
 800e704:	439d      	bics	r5, r3
 800e706:	42a8      	cmp	r0, r5
 800e708:	d0f8      	beq.n	800e6fc <sbrk_aligned+0x24>
 800e70a:	1a29      	subs	r1, r5, r0
 800e70c:	0020      	movs	r0, r4
 800e70e:	f000 fe3b 	bl	800f388 <_sbrk_r>
 800e712:	3001      	adds	r0, #1
 800e714:	d1f2      	bne.n	800e6fc <sbrk_aligned+0x24>
 800e716:	e7ef      	b.n	800e6f8 <sbrk_aligned+0x20>
 800e718:	20000d38 	.word	0x20000d38

0800e71c <_malloc_r>:
 800e71c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e71e:	2203      	movs	r2, #3
 800e720:	1ccb      	adds	r3, r1, #3
 800e722:	4393      	bics	r3, r2
 800e724:	3308      	adds	r3, #8
 800e726:	0005      	movs	r5, r0
 800e728:	001f      	movs	r7, r3
 800e72a:	2b0c      	cmp	r3, #12
 800e72c:	d234      	bcs.n	800e798 <_malloc_r+0x7c>
 800e72e:	270c      	movs	r7, #12
 800e730:	42b9      	cmp	r1, r7
 800e732:	d833      	bhi.n	800e79c <_malloc_r+0x80>
 800e734:	0028      	movs	r0, r5
 800e736:	f000 f871 	bl	800e81c <__malloc_lock>
 800e73a:	4e37      	ldr	r6, [pc, #220]	@ (800e818 <_malloc_r+0xfc>)
 800e73c:	6833      	ldr	r3, [r6, #0]
 800e73e:	001c      	movs	r4, r3
 800e740:	2c00      	cmp	r4, #0
 800e742:	d12f      	bne.n	800e7a4 <_malloc_r+0x88>
 800e744:	0039      	movs	r1, r7
 800e746:	0028      	movs	r0, r5
 800e748:	f7ff ffc6 	bl	800e6d8 <sbrk_aligned>
 800e74c:	0004      	movs	r4, r0
 800e74e:	1c43      	adds	r3, r0, #1
 800e750:	d15f      	bne.n	800e812 <_malloc_r+0xf6>
 800e752:	6834      	ldr	r4, [r6, #0]
 800e754:	9400      	str	r4, [sp, #0]
 800e756:	9b00      	ldr	r3, [sp, #0]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d14a      	bne.n	800e7f2 <_malloc_r+0xd6>
 800e75c:	2c00      	cmp	r4, #0
 800e75e:	d052      	beq.n	800e806 <_malloc_r+0xea>
 800e760:	6823      	ldr	r3, [r4, #0]
 800e762:	0028      	movs	r0, r5
 800e764:	18e3      	adds	r3, r4, r3
 800e766:	9900      	ldr	r1, [sp, #0]
 800e768:	9301      	str	r3, [sp, #4]
 800e76a:	f000 fe0d 	bl	800f388 <_sbrk_r>
 800e76e:	9b01      	ldr	r3, [sp, #4]
 800e770:	4283      	cmp	r3, r0
 800e772:	d148      	bne.n	800e806 <_malloc_r+0xea>
 800e774:	6823      	ldr	r3, [r4, #0]
 800e776:	0028      	movs	r0, r5
 800e778:	1aff      	subs	r7, r7, r3
 800e77a:	0039      	movs	r1, r7
 800e77c:	f7ff ffac 	bl	800e6d8 <sbrk_aligned>
 800e780:	3001      	adds	r0, #1
 800e782:	d040      	beq.n	800e806 <_malloc_r+0xea>
 800e784:	6823      	ldr	r3, [r4, #0]
 800e786:	19db      	adds	r3, r3, r7
 800e788:	6023      	str	r3, [r4, #0]
 800e78a:	6833      	ldr	r3, [r6, #0]
 800e78c:	685a      	ldr	r2, [r3, #4]
 800e78e:	2a00      	cmp	r2, #0
 800e790:	d133      	bne.n	800e7fa <_malloc_r+0xde>
 800e792:	9b00      	ldr	r3, [sp, #0]
 800e794:	6033      	str	r3, [r6, #0]
 800e796:	e019      	b.n	800e7cc <_malloc_r+0xb0>
 800e798:	2b00      	cmp	r3, #0
 800e79a:	dac9      	bge.n	800e730 <_malloc_r+0x14>
 800e79c:	230c      	movs	r3, #12
 800e79e:	602b      	str	r3, [r5, #0]
 800e7a0:	2000      	movs	r0, #0
 800e7a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e7a4:	6821      	ldr	r1, [r4, #0]
 800e7a6:	1bc9      	subs	r1, r1, r7
 800e7a8:	d420      	bmi.n	800e7ec <_malloc_r+0xd0>
 800e7aa:	290b      	cmp	r1, #11
 800e7ac:	d90a      	bls.n	800e7c4 <_malloc_r+0xa8>
 800e7ae:	19e2      	adds	r2, r4, r7
 800e7b0:	6027      	str	r7, [r4, #0]
 800e7b2:	42a3      	cmp	r3, r4
 800e7b4:	d104      	bne.n	800e7c0 <_malloc_r+0xa4>
 800e7b6:	6032      	str	r2, [r6, #0]
 800e7b8:	6863      	ldr	r3, [r4, #4]
 800e7ba:	6011      	str	r1, [r2, #0]
 800e7bc:	6053      	str	r3, [r2, #4]
 800e7be:	e005      	b.n	800e7cc <_malloc_r+0xb0>
 800e7c0:	605a      	str	r2, [r3, #4]
 800e7c2:	e7f9      	b.n	800e7b8 <_malloc_r+0x9c>
 800e7c4:	6862      	ldr	r2, [r4, #4]
 800e7c6:	42a3      	cmp	r3, r4
 800e7c8:	d10e      	bne.n	800e7e8 <_malloc_r+0xcc>
 800e7ca:	6032      	str	r2, [r6, #0]
 800e7cc:	0028      	movs	r0, r5
 800e7ce:	f000 f82d 	bl	800e82c <__malloc_unlock>
 800e7d2:	0020      	movs	r0, r4
 800e7d4:	2207      	movs	r2, #7
 800e7d6:	300b      	adds	r0, #11
 800e7d8:	1d23      	adds	r3, r4, #4
 800e7da:	4390      	bics	r0, r2
 800e7dc:	1ac2      	subs	r2, r0, r3
 800e7de:	4298      	cmp	r0, r3
 800e7e0:	d0df      	beq.n	800e7a2 <_malloc_r+0x86>
 800e7e2:	1a1b      	subs	r3, r3, r0
 800e7e4:	50a3      	str	r3, [r4, r2]
 800e7e6:	e7dc      	b.n	800e7a2 <_malloc_r+0x86>
 800e7e8:	605a      	str	r2, [r3, #4]
 800e7ea:	e7ef      	b.n	800e7cc <_malloc_r+0xb0>
 800e7ec:	0023      	movs	r3, r4
 800e7ee:	6864      	ldr	r4, [r4, #4]
 800e7f0:	e7a6      	b.n	800e740 <_malloc_r+0x24>
 800e7f2:	9c00      	ldr	r4, [sp, #0]
 800e7f4:	6863      	ldr	r3, [r4, #4]
 800e7f6:	9300      	str	r3, [sp, #0]
 800e7f8:	e7ad      	b.n	800e756 <_malloc_r+0x3a>
 800e7fa:	001a      	movs	r2, r3
 800e7fc:	685b      	ldr	r3, [r3, #4]
 800e7fe:	42a3      	cmp	r3, r4
 800e800:	d1fb      	bne.n	800e7fa <_malloc_r+0xde>
 800e802:	2300      	movs	r3, #0
 800e804:	e7da      	b.n	800e7bc <_malloc_r+0xa0>
 800e806:	230c      	movs	r3, #12
 800e808:	0028      	movs	r0, r5
 800e80a:	602b      	str	r3, [r5, #0]
 800e80c:	f000 f80e 	bl	800e82c <__malloc_unlock>
 800e810:	e7c6      	b.n	800e7a0 <_malloc_r+0x84>
 800e812:	6007      	str	r7, [r0, #0]
 800e814:	e7da      	b.n	800e7cc <_malloc_r+0xb0>
 800e816:	46c0      	nop			@ (mov r8, r8)
 800e818:	20000d3c 	.word	0x20000d3c

0800e81c <__malloc_lock>:
 800e81c:	b510      	push	{r4, lr}
 800e81e:	4802      	ldr	r0, [pc, #8]	@ (800e828 <__malloc_lock+0xc>)
 800e820:	f7ff f87b 	bl	800d91a <__retarget_lock_acquire_recursive>
 800e824:	bd10      	pop	{r4, pc}
 800e826:	46c0      	nop			@ (mov r8, r8)
 800e828:	20000d34 	.word	0x20000d34

0800e82c <__malloc_unlock>:
 800e82c:	b510      	push	{r4, lr}
 800e82e:	4802      	ldr	r0, [pc, #8]	@ (800e838 <__malloc_unlock+0xc>)
 800e830:	f7ff f874 	bl	800d91c <__retarget_lock_release_recursive>
 800e834:	bd10      	pop	{r4, pc}
 800e836:	46c0      	nop			@ (mov r8, r8)
 800e838:	20000d34 	.word	0x20000d34

0800e83c <_Balloc>:
 800e83c:	b570      	push	{r4, r5, r6, lr}
 800e83e:	69c5      	ldr	r5, [r0, #28]
 800e840:	0006      	movs	r6, r0
 800e842:	000c      	movs	r4, r1
 800e844:	2d00      	cmp	r5, #0
 800e846:	d10e      	bne.n	800e866 <_Balloc+0x2a>
 800e848:	2010      	movs	r0, #16
 800e84a:	f7ff ff3b 	bl	800e6c4 <malloc>
 800e84e:	1e02      	subs	r2, r0, #0
 800e850:	61f0      	str	r0, [r6, #28]
 800e852:	d104      	bne.n	800e85e <_Balloc+0x22>
 800e854:	216b      	movs	r1, #107	@ 0x6b
 800e856:	4b19      	ldr	r3, [pc, #100]	@ (800e8bc <_Balloc+0x80>)
 800e858:	4819      	ldr	r0, [pc, #100]	@ (800e8c0 <_Balloc+0x84>)
 800e85a:	f000 fda7 	bl	800f3ac <__assert_func>
 800e85e:	6045      	str	r5, [r0, #4]
 800e860:	6085      	str	r5, [r0, #8]
 800e862:	6005      	str	r5, [r0, #0]
 800e864:	60c5      	str	r5, [r0, #12]
 800e866:	69f5      	ldr	r5, [r6, #28]
 800e868:	68eb      	ldr	r3, [r5, #12]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d013      	beq.n	800e896 <_Balloc+0x5a>
 800e86e:	69f3      	ldr	r3, [r6, #28]
 800e870:	00a2      	lsls	r2, r4, #2
 800e872:	68db      	ldr	r3, [r3, #12]
 800e874:	189b      	adds	r3, r3, r2
 800e876:	6818      	ldr	r0, [r3, #0]
 800e878:	2800      	cmp	r0, #0
 800e87a:	d118      	bne.n	800e8ae <_Balloc+0x72>
 800e87c:	2101      	movs	r1, #1
 800e87e:	000d      	movs	r5, r1
 800e880:	40a5      	lsls	r5, r4
 800e882:	1d6a      	adds	r2, r5, #5
 800e884:	0030      	movs	r0, r6
 800e886:	0092      	lsls	r2, r2, #2
 800e888:	f000 fdae 	bl	800f3e8 <_calloc_r>
 800e88c:	2800      	cmp	r0, #0
 800e88e:	d00c      	beq.n	800e8aa <_Balloc+0x6e>
 800e890:	6044      	str	r4, [r0, #4]
 800e892:	6085      	str	r5, [r0, #8]
 800e894:	e00d      	b.n	800e8b2 <_Balloc+0x76>
 800e896:	2221      	movs	r2, #33	@ 0x21
 800e898:	2104      	movs	r1, #4
 800e89a:	0030      	movs	r0, r6
 800e89c:	f000 fda4 	bl	800f3e8 <_calloc_r>
 800e8a0:	69f3      	ldr	r3, [r6, #28]
 800e8a2:	60e8      	str	r0, [r5, #12]
 800e8a4:	68db      	ldr	r3, [r3, #12]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d1e1      	bne.n	800e86e <_Balloc+0x32>
 800e8aa:	2000      	movs	r0, #0
 800e8ac:	bd70      	pop	{r4, r5, r6, pc}
 800e8ae:	6802      	ldr	r2, [r0, #0]
 800e8b0:	601a      	str	r2, [r3, #0]
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	6103      	str	r3, [r0, #16]
 800e8b6:	60c3      	str	r3, [r0, #12]
 800e8b8:	e7f8      	b.n	800e8ac <_Balloc+0x70>
 800e8ba:	46c0      	nop			@ (mov r8, r8)
 800e8bc:	08010781 	.word	0x08010781
 800e8c0:	08010801 	.word	0x08010801

0800e8c4 <_Bfree>:
 800e8c4:	b570      	push	{r4, r5, r6, lr}
 800e8c6:	69c6      	ldr	r6, [r0, #28]
 800e8c8:	0005      	movs	r5, r0
 800e8ca:	000c      	movs	r4, r1
 800e8cc:	2e00      	cmp	r6, #0
 800e8ce:	d10e      	bne.n	800e8ee <_Bfree+0x2a>
 800e8d0:	2010      	movs	r0, #16
 800e8d2:	f7ff fef7 	bl	800e6c4 <malloc>
 800e8d6:	1e02      	subs	r2, r0, #0
 800e8d8:	61e8      	str	r0, [r5, #28]
 800e8da:	d104      	bne.n	800e8e6 <_Bfree+0x22>
 800e8dc:	218f      	movs	r1, #143	@ 0x8f
 800e8de:	4b09      	ldr	r3, [pc, #36]	@ (800e904 <_Bfree+0x40>)
 800e8e0:	4809      	ldr	r0, [pc, #36]	@ (800e908 <_Bfree+0x44>)
 800e8e2:	f000 fd63 	bl	800f3ac <__assert_func>
 800e8e6:	6046      	str	r6, [r0, #4]
 800e8e8:	6086      	str	r6, [r0, #8]
 800e8ea:	6006      	str	r6, [r0, #0]
 800e8ec:	60c6      	str	r6, [r0, #12]
 800e8ee:	2c00      	cmp	r4, #0
 800e8f0:	d007      	beq.n	800e902 <_Bfree+0x3e>
 800e8f2:	69eb      	ldr	r3, [r5, #28]
 800e8f4:	6862      	ldr	r2, [r4, #4]
 800e8f6:	68db      	ldr	r3, [r3, #12]
 800e8f8:	0092      	lsls	r2, r2, #2
 800e8fa:	189b      	adds	r3, r3, r2
 800e8fc:	681a      	ldr	r2, [r3, #0]
 800e8fe:	6022      	str	r2, [r4, #0]
 800e900:	601c      	str	r4, [r3, #0]
 800e902:	bd70      	pop	{r4, r5, r6, pc}
 800e904:	08010781 	.word	0x08010781
 800e908:	08010801 	.word	0x08010801

0800e90c <__multadd>:
 800e90c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e90e:	000f      	movs	r7, r1
 800e910:	9001      	str	r0, [sp, #4]
 800e912:	000c      	movs	r4, r1
 800e914:	001e      	movs	r6, r3
 800e916:	2000      	movs	r0, #0
 800e918:	690d      	ldr	r5, [r1, #16]
 800e91a:	3714      	adds	r7, #20
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	3001      	adds	r0, #1
 800e920:	b299      	uxth	r1, r3
 800e922:	4351      	muls	r1, r2
 800e924:	0c1b      	lsrs	r3, r3, #16
 800e926:	4353      	muls	r3, r2
 800e928:	1989      	adds	r1, r1, r6
 800e92a:	0c0e      	lsrs	r6, r1, #16
 800e92c:	199b      	adds	r3, r3, r6
 800e92e:	0c1e      	lsrs	r6, r3, #16
 800e930:	b289      	uxth	r1, r1
 800e932:	041b      	lsls	r3, r3, #16
 800e934:	185b      	adds	r3, r3, r1
 800e936:	c708      	stmia	r7!, {r3}
 800e938:	4285      	cmp	r5, r0
 800e93a:	dcef      	bgt.n	800e91c <__multadd+0x10>
 800e93c:	2e00      	cmp	r6, #0
 800e93e:	d022      	beq.n	800e986 <__multadd+0x7a>
 800e940:	68a3      	ldr	r3, [r4, #8]
 800e942:	42ab      	cmp	r3, r5
 800e944:	dc19      	bgt.n	800e97a <__multadd+0x6e>
 800e946:	6861      	ldr	r1, [r4, #4]
 800e948:	9801      	ldr	r0, [sp, #4]
 800e94a:	3101      	adds	r1, #1
 800e94c:	f7ff ff76 	bl	800e83c <_Balloc>
 800e950:	1e07      	subs	r7, r0, #0
 800e952:	d105      	bne.n	800e960 <__multadd+0x54>
 800e954:	003a      	movs	r2, r7
 800e956:	21ba      	movs	r1, #186	@ 0xba
 800e958:	4b0c      	ldr	r3, [pc, #48]	@ (800e98c <__multadd+0x80>)
 800e95a:	480d      	ldr	r0, [pc, #52]	@ (800e990 <__multadd+0x84>)
 800e95c:	f000 fd26 	bl	800f3ac <__assert_func>
 800e960:	0021      	movs	r1, r4
 800e962:	6922      	ldr	r2, [r4, #16]
 800e964:	310c      	adds	r1, #12
 800e966:	3202      	adds	r2, #2
 800e968:	0092      	lsls	r2, r2, #2
 800e96a:	300c      	adds	r0, #12
 800e96c:	f7fe ffe2 	bl	800d934 <memcpy>
 800e970:	0021      	movs	r1, r4
 800e972:	9801      	ldr	r0, [sp, #4]
 800e974:	f7ff ffa6 	bl	800e8c4 <_Bfree>
 800e978:	003c      	movs	r4, r7
 800e97a:	1d2b      	adds	r3, r5, #4
 800e97c:	009b      	lsls	r3, r3, #2
 800e97e:	18e3      	adds	r3, r4, r3
 800e980:	3501      	adds	r5, #1
 800e982:	605e      	str	r6, [r3, #4]
 800e984:	6125      	str	r5, [r4, #16]
 800e986:	0020      	movs	r0, r4
 800e988:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e98a:	46c0      	nop			@ (mov r8, r8)
 800e98c:	080107f0 	.word	0x080107f0
 800e990:	08010801 	.word	0x08010801

0800e994 <__hi0bits>:
 800e994:	2280      	movs	r2, #128	@ 0x80
 800e996:	0003      	movs	r3, r0
 800e998:	0252      	lsls	r2, r2, #9
 800e99a:	2000      	movs	r0, #0
 800e99c:	4293      	cmp	r3, r2
 800e99e:	d201      	bcs.n	800e9a4 <__hi0bits+0x10>
 800e9a0:	041b      	lsls	r3, r3, #16
 800e9a2:	3010      	adds	r0, #16
 800e9a4:	2280      	movs	r2, #128	@ 0x80
 800e9a6:	0452      	lsls	r2, r2, #17
 800e9a8:	4293      	cmp	r3, r2
 800e9aa:	d201      	bcs.n	800e9b0 <__hi0bits+0x1c>
 800e9ac:	3008      	adds	r0, #8
 800e9ae:	021b      	lsls	r3, r3, #8
 800e9b0:	2280      	movs	r2, #128	@ 0x80
 800e9b2:	0552      	lsls	r2, r2, #21
 800e9b4:	4293      	cmp	r3, r2
 800e9b6:	d201      	bcs.n	800e9bc <__hi0bits+0x28>
 800e9b8:	3004      	adds	r0, #4
 800e9ba:	011b      	lsls	r3, r3, #4
 800e9bc:	2280      	movs	r2, #128	@ 0x80
 800e9be:	05d2      	lsls	r2, r2, #23
 800e9c0:	4293      	cmp	r3, r2
 800e9c2:	d201      	bcs.n	800e9c8 <__hi0bits+0x34>
 800e9c4:	3002      	adds	r0, #2
 800e9c6:	009b      	lsls	r3, r3, #2
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	db03      	blt.n	800e9d4 <__hi0bits+0x40>
 800e9cc:	3001      	adds	r0, #1
 800e9ce:	4213      	tst	r3, r2
 800e9d0:	d100      	bne.n	800e9d4 <__hi0bits+0x40>
 800e9d2:	2020      	movs	r0, #32
 800e9d4:	4770      	bx	lr

0800e9d6 <__lo0bits>:
 800e9d6:	6803      	ldr	r3, [r0, #0]
 800e9d8:	0001      	movs	r1, r0
 800e9da:	2207      	movs	r2, #7
 800e9dc:	0018      	movs	r0, r3
 800e9de:	4010      	ands	r0, r2
 800e9e0:	4213      	tst	r3, r2
 800e9e2:	d00d      	beq.n	800ea00 <__lo0bits+0x2a>
 800e9e4:	3a06      	subs	r2, #6
 800e9e6:	2000      	movs	r0, #0
 800e9e8:	4213      	tst	r3, r2
 800e9ea:	d105      	bne.n	800e9f8 <__lo0bits+0x22>
 800e9ec:	3002      	adds	r0, #2
 800e9ee:	4203      	tst	r3, r0
 800e9f0:	d003      	beq.n	800e9fa <__lo0bits+0x24>
 800e9f2:	40d3      	lsrs	r3, r2
 800e9f4:	0010      	movs	r0, r2
 800e9f6:	600b      	str	r3, [r1, #0]
 800e9f8:	4770      	bx	lr
 800e9fa:	089b      	lsrs	r3, r3, #2
 800e9fc:	600b      	str	r3, [r1, #0]
 800e9fe:	e7fb      	b.n	800e9f8 <__lo0bits+0x22>
 800ea00:	b29a      	uxth	r2, r3
 800ea02:	2a00      	cmp	r2, #0
 800ea04:	d101      	bne.n	800ea0a <__lo0bits+0x34>
 800ea06:	2010      	movs	r0, #16
 800ea08:	0c1b      	lsrs	r3, r3, #16
 800ea0a:	b2da      	uxtb	r2, r3
 800ea0c:	2a00      	cmp	r2, #0
 800ea0e:	d101      	bne.n	800ea14 <__lo0bits+0x3e>
 800ea10:	3008      	adds	r0, #8
 800ea12:	0a1b      	lsrs	r3, r3, #8
 800ea14:	071a      	lsls	r2, r3, #28
 800ea16:	d101      	bne.n	800ea1c <__lo0bits+0x46>
 800ea18:	3004      	adds	r0, #4
 800ea1a:	091b      	lsrs	r3, r3, #4
 800ea1c:	079a      	lsls	r2, r3, #30
 800ea1e:	d101      	bne.n	800ea24 <__lo0bits+0x4e>
 800ea20:	3002      	adds	r0, #2
 800ea22:	089b      	lsrs	r3, r3, #2
 800ea24:	07da      	lsls	r2, r3, #31
 800ea26:	d4e9      	bmi.n	800e9fc <__lo0bits+0x26>
 800ea28:	3001      	adds	r0, #1
 800ea2a:	085b      	lsrs	r3, r3, #1
 800ea2c:	d1e6      	bne.n	800e9fc <__lo0bits+0x26>
 800ea2e:	2020      	movs	r0, #32
 800ea30:	e7e2      	b.n	800e9f8 <__lo0bits+0x22>
	...

0800ea34 <__i2b>:
 800ea34:	b510      	push	{r4, lr}
 800ea36:	000c      	movs	r4, r1
 800ea38:	2101      	movs	r1, #1
 800ea3a:	f7ff feff 	bl	800e83c <_Balloc>
 800ea3e:	2800      	cmp	r0, #0
 800ea40:	d107      	bne.n	800ea52 <__i2b+0x1e>
 800ea42:	2146      	movs	r1, #70	@ 0x46
 800ea44:	4c05      	ldr	r4, [pc, #20]	@ (800ea5c <__i2b+0x28>)
 800ea46:	0002      	movs	r2, r0
 800ea48:	4b05      	ldr	r3, [pc, #20]	@ (800ea60 <__i2b+0x2c>)
 800ea4a:	0020      	movs	r0, r4
 800ea4c:	31ff      	adds	r1, #255	@ 0xff
 800ea4e:	f000 fcad 	bl	800f3ac <__assert_func>
 800ea52:	2301      	movs	r3, #1
 800ea54:	6144      	str	r4, [r0, #20]
 800ea56:	6103      	str	r3, [r0, #16]
 800ea58:	bd10      	pop	{r4, pc}
 800ea5a:	46c0      	nop			@ (mov r8, r8)
 800ea5c:	08010801 	.word	0x08010801
 800ea60:	080107f0 	.word	0x080107f0

0800ea64 <__multiply>:
 800ea64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea66:	0014      	movs	r4, r2
 800ea68:	690a      	ldr	r2, [r1, #16]
 800ea6a:	6923      	ldr	r3, [r4, #16]
 800ea6c:	000d      	movs	r5, r1
 800ea6e:	b089      	sub	sp, #36	@ 0x24
 800ea70:	429a      	cmp	r2, r3
 800ea72:	db02      	blt.n	800ea7a <__multiply+0x16>
 800ea74:	0023      	movs	r3, r4
 800ea76:	000c      	movs	r4, r1
 800ea78:	001d      	movs	r5, r3
 800ea7a:	6927      	ldr	r7, [r4, #16]
 800ea7c:	692e      	ldr	r6, [r5, #16]
 800ea7e:	6861      	ldr	r1, [r4, #4]
 800ea80:	19bb      	adds	r3, r7, r6
 800ea82:	9300      	str	r3, [sp, #0]
 800ea84:	68a3      	ldr	r3, [r4, #8]
 800ea86:	19ba      	adds	r2, r7, r6
 800ea88:	4293      	cmp	r3, r2
 800ea8a:	da00      	bge.n	800ea8e <__multiply+0x2a>
 800ea8c:	3101      	adds	r1, #1
 800ea8e:	f7ff fed5 	bl	800e83c <_Balloc>
 800ea92:	4684      	mov	ip, r0
 800ea94:	2800      	cmp	r0, #0
 800ea96:	d106      	bne.n	800eaa6 <__multiply+0x42>
 800ea98:	21b1      	movs	r1, #177	@ 0xb1
 800ea9a:	4662      	mov	r2, ip
 800ea9c:	4b44      	ldr	r3, [pc, #272]	@ (800ebb0 <__multiply+0x14c>)
 800ea9e:	4845      	ldr	r0, [pc, #276]	@ (800ebb4 <__multiply+0x150>)
 800eaa0:	0049      	lsls	r1, r1, #1
 800eaa2:	f000 fc83 	bl	800f3ac <__assert_func>
 800eaa6:	0002      	movs	r2, r0
 800eaa8:	19bb      	adds	r3, r7, r6
 800eaaa:	3214      	adds	r2, #20
 800eaac:	009b      	lsls	r3, r3, #2
 800eaae:	18d3      	adds	r3, r2, r3
 800eab0:	9301      	str	r3, [sp, #4]
 800eab2:	2100      	movs	r1, #0
 800eab4:	0013      	movs	r3, r2
 800eab6:	9801      	ldr	r0, [sp, #4]
 800eab8:	4283      	cmp	r3, r0
 800eaba:	d328      	bcc.n	800eb0e <__multiply+0xaa>
 800eabc:	0023      	movs	r3, r4
 800eabe:	00bf      	lsls	r7, r7, #2
 800eac0:	3314      	adds	r3, #20
 800eac2:	9304      	str	r3, [sp, #16]
 800eac4:	3514      	adds	r5, #20
 800eac6:	19db      	adds	r3, r3, r7
 800eac8:	00b6      	lsls	r6, r6, #2
 800eaca:	9302      	str	r3, [sp, #8]
 800eacc:	19ab      	adds	r3, r5, r6
 800eace:	9307      	str	r3, [sp, #28]
 800ead0:	2304      	movs	r3, #4
 800ead2:	9305      	str	r3, [sp, #20]
 800ead4:	0023      	movs	r3, r4
 800ead6:	9902      	ldr	r1, [sp, #8]
 800ead8:	3315      	adds	r3, #21
 800eada:	4299      	cmp	r1, r3
 800eadc:	d305      	bcc.n	800eaea <__multiply+0x86>
 800eade:	1b0c      	subs	r4, r1, r4
 800eae0:	3c15      	subs	r4, #21
 800eae2:	08a4      	lsrs	r4, r4, #2
 800eae4:	3401      	adds	r4, #1
 800eae6:	00a3      	lsls	r3, r4, #2
 800eae8:	9305      	str	r3, [sp, #20]
 800eaea:	9b07      	ldr	r3, [sp, #28]
 800eaec:	429d      	cmp	r5, r3
 800eaee:	d310      	bcc.n	800eb12 <__multiply+0xae>
 800eaf0:	9b00      	ldr	r3, [sp, #0]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	dd05      	ble.n	800eb02 <__multiply+0x9e>
 800eaf6:	9b01      	ldr	r3, [sp, #4]
 800eaf8:	3b04      	subs	r3, #4
 800eafa:	9301      	str	r3, [sp, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d052      	beq.n	800eba8 <__multiply+0x144>
 800eb02:	4663      	mov	r3, ip
 800eb04:	4660      	mov	r0, ip
 800eb06:	9a00      	ldr	r2, [sp, #0]
 800eb08:	611a      	str	r2, [r3, #16]
 800eb0a:	b009      	add	sp, #36	@ 0x24
 800eb0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb0e:	c302      	stmia	r3!, {r1}
 800eb10:	e7d1      	b.n	800eab6 <__multiply+0x52>
 800eb12:	682c      	ldr	r4, [r5, #0]
 800eb14:	b2a4      	uxth	r4, r4
 800eb16:	2c00      	cmp	r4, #0
 800eb18:	d01f      	beq.n	800eb5a <__multiply+0xf6>
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	0017      	movs	r7, r2
 800eb1e:	9e04      	ldr	r6, [sp, #16]
 800eb20:	9303      	str	r3, [sp, #12]
 800eb22:	ce08      	ldmia	r6!, {r3}
 800eb24:	6839      	ldr	r1, [r7, #0]
 800eb26:	9306      	str	r3, [sp, #24]
 800eb28:	466b      	mov	r3, sp
 800eb2a:	8b1b      	ldrh	r3, [r3, #24]
 800eb2c:	b288      	uxth	r0, r1
 800eb2e:	4363      	muls	r3, r4
 800eb30:	181b      	adds	r3, r3, r0
 800eb32:	9803      	ldr	r0, [sp, #12]
 800eb34:	0c09      	lsrs	r1, r1, #16
 800eb36:	181b      	adds	r3, r3, r0
 800eb38:	9806      	ldr	r0, [sp, #24]
 800eb3a:	0c00      	lsrs	r0, r0, #16
 800eb3c:	4360      	muls	r0, r4
 800eb3e:	1840      	adds	r0, r0, r1
 800eb40:	0c19      	lsrs	r1, r3, #16
 800eb42:	1841      	adds	r1, r0, r1
 800eb44:	0c08      	lsrs	r0, r1, #16
 800eb46:	b29b      	uxth	r3, r3
 800eb48:	0409      	lsls	r1, r1, #16
 800eb4a:	4319      	orrs	r1, r3
 800eb4c:	9b02      	ldr	r3, [sp, #8]
 800eb4e:	9003      	str	r0, [sp, #12]
 800eb50:	c702      	stmia	r7!, {r1}
 800eb52:	42b3      	cmp	r3, r6
 800eb54:	d8e5      	bhi.n	800eb22 <__multiply+0xbe>
 800eb56:	9b05      	ldr	r3, [sp, #20]
 800eb58:	50d0      	str	r0, [r2, r3]
 800eb5a:	682c      	ldr	r4, [r5, #0]
 800eb5c:	0c24      	lsrs	r4, r4, #16
 800eb5e:	d020      	beq.n	800eba2 <__multiply+0x13e>
 800eb60:	2100      	movs	r1, #0
 800eb62:	0010      	movs	r0, r2
 800eb64:	6813      	ldr	r3, [r2, #0]
 800eb66:	9e04      	ldr	r6, [sp, #16]
 800eb68:	9103      	str	r1, [sp, #12]
 800eb6a:	6831      	ldr	r1, [r6, #0]
 800eb6c:	6807      	ldr	r7, [r0, #0]
 800eb6e:	b289      	uxth	r1, r1
 800eb70:	4361      	muls	r1, r4
 800eb72:	0c3f      	lsrs	r7, r7, #16
 800eb74:	19c9      	adds	r1, r1, r7
 800eb76:	9f03      	ldr	r7, [sp, #12]
 800eb78:	b29b      	uxth	r3, r3
 800eb7a:	19c9      	adds	r1, r1, r7
 800eb7c:	040f      	lsls	r7, r1, #16
 800eb7e:	431f      	orrs	r7, r3
 800eb80:	6007      	str	r7, [r0, #0]
 800eb82:	ce80      	ldmia	r6!, {r7}
 800eb84:	6843      	ldr	r3, [r0, #4]
 800eb86:	0c3f      	lsrs	r7, r7, #16
 800eb88:	4367      	muls	r7, r4
 800eb8a:	b29b      	uxth	r3, r3
 800eb8c:	0c09      	lsrs	r1, r1, #16
 800eb8e:	18fb      	adds	r3, r7, r3
 800eb90:	185b      	adds	r3, r3, r1
 800eb92:	0c19      	lsrs	r1, r3, #16
 800eb94:	9103      	str	r1, [sp, #12]
 800eb96:	9902      	ldr	r1, [sp, #8]
 800eb98:	3004      	adds	r0, #4
 800eb9a:	42b1      	cmp	r1, r6
 800eb9c:	d8e5      	bhi.n	800eb6a <__multiply+0x106>
 800eb9e:	9905      	ldr	r1, [sp, #20]
 800eba0:	5053      	str	r3, [r2, r1]
 800eba2:	3504      	adds	r5, #4
 800eba4:	3204      	adds	r2, #4
 800eba6:	e7a0      	b.n	800eaea <__multiply+0x86>
 800eba8:	9b00      	ldr	r3, [sp, #0]
 800ebaa:	3b01      	subs	r3, #1
 800ebac:	9300      	str	r3, [sp, #0]
 800ebae:	e79f      	b.n	800eaf0 <__multiply+0x8c>
 800ebb0:	080107f0 	.word	0x080107f0
 800ebb4:	08010801 	.word	0x08010801

0800ebb8 <__pow5mult>:
 800ebb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ebba:	2303      	movs	r3, #3
 800ebbc:	0015      	movs	r5, r2
 800ebbe:	0007      	movs	r7, r0
 800ebc0:	000e      	movs	r6, r1
 800ebc2:	401a      	ands	r2, r3
 800ebc4:	421d      	tst	r5, r3
 800ebc6:	d008      	beq.n	800ebda <__pow5mult+0x22>
 800ebc8:	4925      	ldr	r1, [pc, #148]	@ (800ec60 <__pow5mult+0xa8>)
 800ebca:	3a01      	subs	r2, #1
 800ebcc:	0092      	lsls	r2, r2, #2
 800ebce:	5852      	ldr	r2, [r2, r1]
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	0031      	movs	r1, r6
 800ebd4:	f7ff fe9a 	bl	800e90c <__multadd>
 800ebd8:	0006      	movs	r6, r0
 800ebda:	10ad      	asrs	r5, r5, #2
 800ebdc:	d03d      	beq.n	800ec5a <__pow5mult+0xa2>
 800ebde:	69fc      	ldr	r4, [r7, #28]
 800ebe0:	2c00      	cmp	r4, #0
 800ebe2:	d10f      	bne.n	800ec04 <__pow5mult+0x4c>
 800ebe4:	2010      	movs	r0, #16
 800ebe6:	f7ff fd6d 	bl	800e6c4 <malloc>
 800ebea:	1e02      	subs	r2, r0, #0
 800ebec:	61f8      	str	r0, [r7, #28]
 800ebee:	d105      	bne.n	800ebfc <__pow5mult+0x44>
 800ebf0:	21b4      	movs	r1, #180	@ 0xb4
 800ebf2:	4b1c      	ldr	r3, [pc, #112]	@ (800ec64 <__pow5mult+0xac>)
 800ebf4:	481c      	ldr	r0, [pc, #112]	@ (800ec68 <__pow5mult+0xb0>)
 800ebf6:	31ff      	adds	r1, #255	@ 0xff
 800ebf8:	f000 fbd8 	bl	800f3ac <__assert_func>
 800ebfc:	6044      	str	r4, [r0, #4]
 800ebfe:	6084      	str	r4, [r0, #8]
 800ec00:	6004      	str	r4, [r0, #0]
 800ec02:	60c4      	str	r4, [r0, #12]
 800ec04:	69fb      	ldr	r3, [r7, #28]
 800ec06:	689c      	ldr	r4, [r3, #8]
 800ec08:	9301      	str	r3, [sp, #4]
 800ec0a:	2c00      	cmp	r4, #0
 800ec0c:	d108      	bne.n	800ec20 <__pow5mult+0x68>
 800ec0e:	0038      	movs	r0, r7
 800ec10:	4916      	ldr	r1, [pc, #88]	@ (800ec6c <__pow5mult+0xb4>)
 800ec12:	f7ff ff0f 	bl	800ea34 <__i2b>
 800ec16:	9b01      	ldr	r3, [sp, #4]
 800ec18:	0004      	movs	r4, r0
 800ec1a:	6098      	str	r0, [r3, #8]
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	6003      	str	r3, [r0, #0]
 800ec20:	2301      	movs	r3, #1
 800ec22:	421d      	tst	r5, r3
 800ec24:	d00a      	beq.n	800ec3c <__pow5mult+0x84>
 800ec26:	0031      	movs	r1, r6
 800ec28:	0022      	movs	r2, r4
 800ec2a:	0038      	movs	r0, r7
 800ec2c:	f7ff ff1a 	bl	800ea64 <__multiply>
 800ec30:	0031      	movs	r1, r6
 800ec32:	9001      	str	r0, [sp, #4]
 800ec34:	0038      	movs	r0, r7
 800ec36:	f7ff fe45 	bl	800e8c4 <_Bfree>
 800ec3a:	9e01      	ldr	r6, [sp, #4]
 800ec3c:	106d      	asrs	r5, r5, #1
 800ec3e:	d00c      	beq.n	800ec5a <__pow5mult+0xa2>
 800ec40:	6820      	ldr	r0, [r4, #0]
 800ec42:	2800      	cmp	r0, #0
 800ec44:	d107      	bne.n	800ec56 <__pow5mult+0x9e>
 800ec46:	0022      	movs	r2, r4
 800ec48:	0021      	movs	r1, r4
 800ec4a:	0038      	movs	r0, r7
 800ec4c:	f7ff ff0a 	bl	800ea64 <__multiply>
 800ec50:	2300      	movs	r3, #0
 800ec52:	6020      	str	r0, [r4, #0]
 800ec54:	6003      	str	r3, [r0, #0]
 800ec56:	0004      	movs	r4, r0
 800ec58:	e7e2      	b.n	800ec20 <__pow5mult+0x68>
 800ec5a:	0030      	movs	r0, r6
 800ec5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ec5e:	46c0      	nop			@ (mov r8, r8)
 800ec60:	080108b4 	.word	0x080108b4
 800ec64:	08010781 	.word	0x08010781
 800ec68:	08010801 	.word	0x08010801
 800ec6c:	00000271 	.word	0x00000271

0800ec70 <__lshift>:
 800ec70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec72:	000c      	movs	r4, r1
 800ec74:	0016      	movs	r6, r2
 800ec76:	6923      	ldr	r3, [r4, #16]
 800ec78:	1157      	asrs	r7, r2, #5
 800ec7a:	b085      	sub	sp, #20
 800ec7c:	18fb      	adds	r3, r7, r3
 800ec7e:	9301      	str	r3, [sp, #4]
 800ec80:	3301      	adds	r3, #1
 800ec82:	9300      	str	r3, [sp, #0]
 800ec84:	6849      	ldr	r1, [r1, #4]
 800ec86:	68a3      	ldr	r3, [r4, #8]
 800ec88:	9002      	str	r0, [sp, #8]
 800ec8a:	9a00      	ldr	r2, [sp, #0]
 800ec8c:	4293      	cmp	r3, r2
 800ec8e:	db10      	blt.n	800ecb2 <__lshift+0x42>
 800ec90:	9802      	ldr	r0, [sp, #8]
 800ec92:	f7ff fdd3 	bl	800e83c <_Balloc>
 800ec96:	2300      	movs	r3, #0
 800ec98:	0001      	movs	r1, r0
 800ec9a:	0005      	movs	r5, r0
 800ec9c:	001a      	movs	r2, r3
 800ec9e:	3114      	adds	r1, #20
 800eca0:	4298      	cmp	r0, r3
 800eca2:	d10c      	bne.n	800ecbe <__lshift+0x4e>
 800eca4:	21ef      	movs	r1, #239	@ 0xef
 800eca6:	002a      	movs	r2, r5
 800eca8:	4b25      	ldr	r3, [pc, #148]	@ (800ed40 <__lshift+0xd0>)
 800ecaa:	4826      	ldr	r0, [pc, #152]	@ (800ed44 <__lshift+0xd4>)
 800ecac:	0049      	lsls	r1, r1, #1
 800ecae:	f000 fb7d 	bl	800f3ac <__assert_func>
 800ecb2:	3101      	adds	r1, #1
 800ecb4:	005b      	lsls	r3, r3, #1
 800ecb6:	e7e8      	b.n	800ec8a <__lshift+0x1a>
 800ecb8:	0098      	lsls	r0, r3, #2
 800ecba:	500a      	str	r2, [r1, r0]
 800ecbc:	3301      	adds	r3, #1
 800ecbe:	42bb      	cmp	r3, r7
 800ecc0:	dbfa      	blt.n	800ecb8 <__lshift+0x48>
 800ecc2:	43fb      	mvns	r3, r7
 800ecc4:	17db      	asrs	r3, r3, #31
 800ecc6:	401f      	ands	r7, r3
 800ecc8:	00bf      	lsls	r7, r7, #2
 800ecca:	0023      	movs	r3, r4
 800eccc:	201f      	movs	r0, #31
 800ecce:	19c9      	adds	r1, r1, r7
 800ecd0:	0037      	movs	r7, r6
 800ecd2:	6922      	ldr	r2, [r4, #16]
 800ecd4:	3314      	adds	r3, #20
 800ecd6:	0092      	lsls	r2, r2, #2
 800ecd8:	189a      	adds	r2, r3, r2
 800ecda:	4007      	ands	r7, r0
 800ecdc:	4206      	tst	r6, r0
 800ecde:	d029      	beq.n	800ed34 <__lshift+0xc4>
 800ece0:	3001      	adds	r0, #1
 800ece2:	1bc0      	subs	r0, r0, r7
 800ece4:	9003      	str	r0, [sp, #12]
 800ece6:	468c      	mov	ip, r1
 800ece8:	2000      	movs	r0, #0
 800ecea:	681e      	ldr	r6, [r3, #0]
 800ecec:	40be      	lsls	r6, r7
 800ecee:	4306      	orrs	r6, r0
 800ecf0:	4660      	mov	r0, ip
 800ecf2:	c040      	stmia	r0!, {r6}
 800ecf4:	4684      	mov	ip, r0
 800ecf6:	9e03      	ldr	r6, [sp, #12]
 800ecf8:	cb01      	ldmia	r3!, {r0}
 800ecfa:	40f0      	lsrs	r0, r6
 800ecfc:	429a      	cmp	r2, r3
 800ecfe:	d8f4      	bhi.n	800ecea <__lshift+0x7a>
 800ed00:	0026      	movs	r6, r4
 800ed02:	3615      	adds	r6, #21
 800ed04:	2304      	movs	r3, #4
 800ed06:	42b2      	cmp	r2, r6
 800ed08:	d304      	bcc.n	800ed14 <__lshift+0xa4>
 800ed0a:	1b13      	subs	r3, r2, r4
 800ed0c:	3b15      	subs	r3, #21
 800ed0e:	089b      	lsrs	r3, r3, #2
 800ed10:	3301      	adds	r3, #1
 800ed12:	009b      	lsls	r3, r3, #2
 800ed14:	50c8      	str	r0, [r1, r3]
 800ed16:	2800      	cmp	r0, #0
 800ed18:	d002      	beq.n	800ed20 <__lshift+0xb0>
 800ed1a:	9b01      	ldr	r3, [sp, #4]
 800ed1c:	3302      	adds	r3, #2
 800ed1e:	9300      	str	r3, [sp, #0]
 800ed20:	9b00      	ldr	r3, [sp, #0]
 800ed22:	9802      	ldr	r0, [sp, #8]
 800ed24:	3b01      	subs	r3, #1
 800ed26:	0021      	movs	r1, r4
 800ed28:	612b      	str	r3, [r5, #16]
 800ed2a:	f7ff fdcb 	bl	800e8c4 <_Bfree>
 800ed2e:	0028      	movs	r0, r5
 800ed30:	b005      	add	sp, #20
 800ed32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed34:	cb01      	ldmia	r3!, {r0}
 800ed36:	c101      	stmia	r1!, {r0}
 800ed38:	429a      	cmp	r2, r3
 800ed3a:	d8fb      	bhi.n	800ed34 <__lshift+0xc4>
 800ed3c:	e7f0      	b.n	800ed20 <__lshift+0xb0>
 800ed3e:	46c0      	nop			@ (mov r8, r8)
 800ed40:	080107f0 	.word	0x080107f0
 800ed44:	08010801 	.word	0x08010801

0800ed48 <__mcmp>:
 800ed48:	b530      	push	{r4, r5, lr}
 800ed4a:	690b      	ldr	r3, [r1, #16]
 800ed4c:	6904      	ldr	r4, [r0, #16]
 800ed4e:	0002      	movs	r2, r0
 800ed50:	1ae0      	subs	r0, r4, r3
 800ed52:	429c      	cmp	r4, r3
 800ed54:	d10f      	bne.n	800ed76 <__mcmp+0x2e>
 800ed56:	3214      	adds	r2, #20
 800ed58:	009b      	lsls	r3, r3, #2
 800ed5a:	3114      	adds	r1, #20
 800ed5c:	0014      	movs	r4, r2
 800ed5e:	18c9      	adds	r1, r1, r3
 800ed60:	18d2      	adds	r2, r2, r3
 800ed62:	3a04      	subs	r2, #4
 800ed64:	3904      	subs	r1, #4
 800ed66:	6815      	ldr	r5, [r2, #0]
 800ed68:	680b      	ldr	r3, [r1, #0]
 800ed6a:	429d      	cmp	r5, r3
 800ed6c:	d004      	beq.n	800ed78 <__mcmp+0x30>
 800ed6e:	2001      	movs	r0, #1
 800ed70:	429d      	cmp	r5, r3
 800ed72:	d200      	bcs.n	800ed76 <__mcmp+0x2e>
 800ed74:	3802      	subs	r0, #2
 800ed76:	bd30      	pop	{r4, r5, pc}
 800ed78:	4294      	cmp	r4, r2
 800ed7a:	d3f2      	bcc.n	800ed62 <__mcmp+0x1a>
 800ed7c:	e7fb      	b.n	800ed76 <__mcmp+0x2e>
	...

0800ed80 <__mdiff>:
 800ed80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed82:	000c      	movs	r4, r1
 800ed84:	b087      	sub	sp, #28
 800ed86:	9000      	str	r0, [sp, #0]
 800ed88:	0011      	movs	r1, r2
 800ed8a:	0020      	movs	r0, r4
 800ed8c:	0017      	movs	r7, r2
 800ed8e:	f7ff ffdb 	bl	800ed48 <__mcmp>
 800ed92:	1e05      	subs	r5, r0, #0
 800ed94:	d110      	bne.n	800edb8 <__mdiff+0x38>
 800ed96:	0001      	movs	r1, r0
 800ed98:	9800      	ldr	r0, [sp, #0]
 800ed9a:	f7ff fd4f 	bl	800e83c <_Balloc>
 800ed9e:	1e02      	subs	r2, r0, #0
 800eda0:	d104      	bne.n	800edac <__mdiff+0x2c>
 800eda2:	4b40      	ldr	r3, [pc, #256]	@ (800eea4 <__mdiff+0x124>)
 800eda4:	4840      	ldr	r0, [pc, #256]	@ (800eea8 <__mdiff+0x128>)
 800eda6:	4941      	ldr	r1, [pc, #260]	@ (800eeac <__mdiff+0x12c>)
 800eda8:	f000 fb00 	bl	800f3ac <__assert_func>
 800edac:	2301      	movs	r3, #1
 800edae:	6145      	str	r5, [r0, #20]
 800edb0:	6103      	str	r3, [r0, #16]
 800edb2:	0010      	movs	r0, r2
 800edb4:	b007      	add	sp, #28
 800edb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edb8:	2600      	movs	r6, #0
 800edba:	42b0      	cmp	r0, r6
 800edbc:	da03      	bge.n	800edc6 <__mdiff+0x46>
 800edbe:	0023      	movs	r3, r4
 800edc0:	003c      	movs	r4, r7
 800edc2:	001f      	movs	r7, r3
 800edc4:	3601      	adds	r6, #1
 800edc6:	6861      	ldr	r1, [r4, #4]
 800edc8:	9800      	ldr	r0, [sp, #0]
 800edca:	f7ff fd37 	bl	800e83c <_Balloc>
 800edce:	1e02      	subs	r2, r0, #0
 800edd0:	d103      	bne.n	800edda <__mdiff+0x5a>
 800edd2:	4b34      	ldr	r3, [pc, #208]	@ (800eea4 <__mdiff+0x124>)
 800edd4:	4834      	ldr	r0, [pc, #208]	@ (800eea8 <__mdiff+0x128>)
 800edd6:	4936      	ldr	r1, [pc, #216]	@ (800eeb0 <__mdiff+0x130>)
 800edd8:	e7e6      	b.n	800eda8 <__mdiff+0x28>
 800edda:	6923      	ldr	r3, [r4, #16]
 800eddc:	3414      	adds	r4, #20
 800edde:	9300      	str	r3, [sp, #0]
 800ede0:	009b      	lsls	r3, r3, #2
 800ede2:	18e3      	adds	r3, r4, r3
 800ede4:	0021      	movs	r1, r4
 800ede6:	9401      	str	r4, [sp, #4]
 800ede8:	003c      	movs	r4, r7
 800edea:	9302      	str	r3, [sp, #8]
 800edec:	693b      	ldr	r3, [r7, #16]
 800edee:	3414      	adds	r4, #20
 800edf0:	009b      	lsls	r3, r3, #2
 800edf2:	18e3      	adds	r3, r4, r3
 800edf4:	9303      	str	r3, [sp, #12]
 800edf6:	0003      	movs	r3, r0
 800edf8:	60c6      	str	r6, [r0, #12]
 800edfa:	468c      	mov	ip, r1
 800edfc:	2000      	movs	r0, #0
 800edfe:	3314      	adds	r3, #20
 800ee00:	9304      	str	r3, [sp, #16]
 800ee02:	9305      	str	r3, [sp, #20]
 800ee04:	4663      	mov	r3, ip
 800ee06:	cb20      	ldmia	r3!, {r5}
 800ee08:	b2a9      	uxth	r1, r5
 800ee0a:	000e      	movs	r6, r1
 800ee0c:	469c      	mov	ip, r3
 800ee0e:	cc08      	ldmia	r4!, {r3}
 800ee10:	0c2d      	lsrs	r5, r5, #16
 800ee12:	b299      	uxth	r1, r3
 800ee14:	1a71      	subs	r1, r6, r1
 800ee16:	1809      	adds	r1, r1, r0
 800ee18:	0c1b      	lsrs	r3, r3, #16
 800ee1a:	1408      	asrs	r0, r1, #16
 800ee1c:	1aeb      	subs	r3, r5, r3
 800ee1e:	181b      	adds	r3, r3, r0
 800ee20:	1418      	asrs	r0, r3, #16
 800ee22:	b289      	uxth	r1, r1
 800ee24:	041b      	lsls	r3, r3, #16
 800ee26:	4319      	orrs	r1, r3
 800ee28:	9b05      	ldr	r3, [sp, #20]
 800ee2a:	c302      	stmia	r3!, {r1}
 800ee2c:	9305      	str	r3, [sp, #20]
 800ee2e:	9b03      	ldr	r3, [sp, #12]
 800ee30:	42a3      	cmp	r3, r4
 800ee32:	d8e7      	bhi.n	800ee04 <__mdiff+0x84>
 800ee34:	0039      	movs	r1, r7
 800ee36:	9c03      	ldr	r4, [sp, #12]
 800ee38:	3115      	adds	r1, #21
 800ee3a:	2304      	movs	r3, #4
 800ee3c:	428c      	cmp	r4, r1
 800ee3e:	d304      	bcc.n	800ee4a <__mdiff+0xca>
 800ee40:	1be3      	subs	r3, r4, r7
 800ee42:	3b15      	subs	r3, #21
 800ee44:	089b      	lsrs	r3, r3, #2
 800ee46:	3301      	adds	r3, #1
 800ee48:	009b      	lsls	r3, r3, #2
 800ee4a:	9901      	ldr	r1, [sp, #4]
 800ee4c:	18cd      	adds	r5, r1, r3
 800ee4e:	9904      	ldr	r1, [sp, #16]
 800ee50:	002e      	movs	r6, r5
 800ee52:	18cb      	adds	r3, r1, r3
 800ee54:	001f      	movs	r7, r3
 800ee56:	9902      	ldr	r1, [sp, #8]
 800ee58:	428e      	cmp	r6, r1
 800ee5a:	d311      	bcc.n	800ee80 <__mdiff+0x100>
 800ee5c:	9c02      	ldr	r4, [sp, #8]
 800ee5e:	1ee9      	subs	r1, r5, #3
 800ee60:	2000      	movs	r0, #0
 800ee62:	428c      	cmp	r4, r1
 800ee64:	d304      	bcc.n	800ee70 <__mdiff+0xf0>
 800ee66:	0021      	movs	r1, r4
 800ee68:	3103      	adds	r1, #3
 800ee6a:	1b49      	subs	r1, r1, r5
 800ee6c:	0889      	lsrs	r1, r1, #2
 800ee6e:	0088      	lsls	r0, r1, #2
 800ee70:	181b      	adds	r3, r3, r0
 800ee72:	3b04      	subs	r3, #4
 800ee74:	6819      	ldr	r1, [r3, #0]
 800ee76:	2900      	cmp	r1, #0
 800ee78:	d010      	beq.n	800ee9c <__mdiff+0x11c>
 800ee7a:	9b00      	ldr	r3, [sp, #0]
 800ee7c:	6113      	str	r3, [r2, #16]
 800ee7e:	e798      	b.n	800edb2 <__mdiff+0x32>
 800ee80:	4684      	mov	ip, r0
 800ee82:	ce02      	ldmia	r6!, {r1}
 800ee84:	b288      	uxth	r0, r1
 800ee86:	4460      	add	r0, ip
 800ee88:	1400      	asrs	r0, r0, #16
 800ee8a:	0c0c      	lsrs	r4, r1, #16
 800ee8c:	1904      	adds	r4, r0, r4
 800ee8e:	4461      	add	r1, ip
 800ee90:	1420      	asrs	r0, r4, #16
 800ee92:	b289      	uxth	r1, r1
 800ee94:	0424      	lsls	r4, r4, #16
 800ee96:	4321      	orrs	r1, r4
 800ee98:	c702      	stmia	r7!, {r1}
 800ee9a:	e7dc      	b.n	800ee56 <__mdiff+0xd6>
 800ee9c:	9900      	ldr	r1, [sp, #0]
 800ee9e:	3901      	subs	r1, #1
 800eea0:	9100      	str	r1, [sp, #0]
 800eea2:	e7e6      	b.n	800ee72 <__mdiff+0xf2>
 800eea4:	080107f0 	.word	0x080107f0
 800eea8:	08010801 	.word	0x08010801
 800eeac:	00000237 	.word	0x00000237
 800eeb0:	00000245 	.word	0x00000245

0800eeb4 <__d2b>:
 800eeb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eeb6:	2101      	movs	r1, #1
 800eeb8:	0016      	movs	r6, r2
 800eeba:	001f      	movs	r7, r3
 800eebc:	f7ff fcbe 	bl	800e83c <_Balloc>
 800eec0:	1e04      	subs	r4, r0, #0
 800eec2:	d105      	bne.n	800eed0 <__d2b+0x1c>
 800eec4:	0022      	movs	r2, r4
 800eec6:	4b25      	ldr	r3, [pc, #148]	@ (800ef5c <__d2b+0xa8>)
 800eec8:	4825      	ldr	r0, [pc, #148]	@ (800ef60 <__d2b+0xac>)
 800eeca:	4926      	ldr	r1, [pc, #152]	@ (800ef64 <__d2b+0xb0>)
 800eecc:	f000 fa6e 	bl	800f3ac <__assert_func>
 800eed0:	033b      	lsls	r3, r7, #12
 800eed2:	007d      	lsls	r5, r7, #1
 800eed4:	0b1b      	lsrs	r3, r3, #12
 800eed6:	0d6d      	lsrs	r5, r5, #21
 800eed8:	d002      	beq.n	800eee0 <__d2b+0x2c>
 800eeda:	2280      	movs	r2, #128	@ 0x80
 800eedc:	0352      	lsls	r2, r2, #13
 800eede:	4313      	orrs	r3, r2
 800eee0:	9301      	str	r3, [sp, #4]
 800eee2:	2e00      	cmp	r6, #0
 800eee4:	d025      	beq.n	800ef32 <__d2b+0x7e>
 800eee6:	4668      	mov	r0, sp
 800eee8:	9600      	str	r6, [sp, #0]
 800eeea:	f7ff fd74 	bl	800e9d6 <__lo0bits>
 800eeee:	9b01      	ldr	r3, [sp, #4]
 800eef0:	9900      	ldr	r1, [sp, #0]
 800eef2:	2800      	cmp	r0, #0
 800eef4:	d01b      	beq.n	800ef2e <__d2b+0x7a>
 800eef6:	2220      	movs	r2, #32
 800eef8:	001e      	movs	r6, r3
 800eefa:	1a12      	subs	r2, r2, r0
 800eefc:	4096      	lsls	r6, r2
 800eefe:	0032      	movs	r2, r6
 800ef00:	40c3      	lsrs	r3, r0
 800ef02:	430a      	orrs	r2, r1
 800ef04:	6162      	str	r2, [r4, #20]
 800ef06:	9301      	str	r3, [sp, #4]
 800ef08:	9e01      	ldr	r6, [sp, #4]
 800ef0a:	61a6      	str	r6, [r4, #24]
 800ef0c:	1e73      	subs	r3, r6, #1
 800ef0e:	419e      	sbcs	r6, r3
 800ef10:	3601      	adds	r6, #1
 800ef12:	6126      	str	r6, [r4, #16]
 800ef14:	2d00      	cmp	r5, #0
 800ef16:	d014      	beq.n	800ef42 <__d2b+0x8e>
 800ef18:	2635      	movs	r6, #53	@ 0x35
 800ef1a:	4b13      	ldr	r3, [pc, #76]	@ (800ef68 <__d2b+0xb4>)
 800ef1c:	18ed      	adds	r5, r5, r3
 800ef1e:	9b08      	ldr	r3, [sp, #32]
 800ef20:	182d      	adds	r5, r5, r0
 800ef22:	601d      	str	r5, [r3, #0]
 800ef24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef26:	1a36      	subs	r6, r6, r0
 800ef28:	601e      	str	r6, [r3, #0]
 800ef2a:	0020      	movs	r0, r4
 800ef2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ef2e:	6161      	str	r1, [r4, #20]
 800ef30:	e7ea      	b.n	800ef08 <__d2b+0x54>
 800ef32:	a801      	add	r0, sp, #4
 800ef34:	f7ff fd4f 	bl	800e9d6 <__lo0bits>
 800ef38:	9b01      	ldr	r3, [sp, #4]
 800ef3a:	2601      	movs	r6, #1
 800ef3c:	6163      	str	r3, [r4, #20]
 800ef3e:	3020      	adds	r0, #32
 800ef40:	e7e7      	b.n	800ef12 <__d2b+0x5e>
 800ef42:	4b0a      	ldr	r3, [pc, #40]	@ (800ef6c <__d2b+0xb8>)
 800ef44:	18c0      	adds	r0, r0, r3
 800ef46:	9b08      	ldr	r3, [sp, #32]
 800ef48:	6018      	str	r0, [r3, #0]
 800ef4a:	4b09      	ldr	r3, [pc, #36]	@ (800ef70 <__d2b+0xbc>)
 800ef4c:	18f3      	adds	r3, r6, r3
 800ef4e:	009b      	lsls	r3, r3, #2
 800ef50:	18e3      	adds	r3, r4, r3
 800ef52:	6958      	ldr	r0, [r3, #20]
 800ef54:	f7ff fd1e 	bl	800e994 <__hi0bits>
 800ef58:	0176      	lsls	r6, r6, #5
 800ef5a:	e7e3      	b.n	800ef24 <__d2b+0x70>
 800ef5c:	080107f0 	.word	0x080107f0
 800ef60:	08010801 	.word	0x08010801
 800ef64:	0000030f 	.word	0x0000030f
 800ef68:	fffffbcd 	.word	0xfffffbcd
 800ef6c:	fffffbce 	.word	0xfffffbce
 800ef70:	3fffffff 	.word	0x3fffffff

0800ef74 <__sfputc_r>:
 800ef74:	6893      	ldr	r3, [r2, #8]
 800ef76:	b510      	push	{r4, lr}
 800ef78:	3b01      	subs	r3, #1
 800ef7a:	6093      	str	r3, [r2, #8]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	da04      	bge.n	800ef8a <__sfputc_r+0x16>
 800ef80:	6994      	ldr	r4, [r2, #24]
 800ef82:	42a3      	cmp	r3, r4
 800ef84:	db07      	blt.n	800ef96 <__sfputc_r+0x22>
 800ef86:	290a      	cmp	r1, #10
 800ef88:	d005      	beq.n	800ef96 <__sfputc_r+0x22>
 800ef8a:	6813      	ldr	r3, [r2, #0]
 800ef8c:	1c58      	adds	r0, r3, #1
 800ef8e:	6010      	str	r0, [r2, #0]
 800ef90:	7019      	strb	r1, [r3, #0]
 800ef92:	0008      	movs	r0, r1
 800ef94:	bd10      	pop	{r4, pc}
 800ef96:	f7fe fb8d 	bl	800d6b4 <__swbuf_r>
 800ef9a:	0001      	movs	r1, r0
 800ef9c:	e7f9      	b.n	800ef92 <__sfputc_r+0x1e>

0800ef9e <__sfputs_r>:
 800ef9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efa0:	0006      	movs	r6, r0
 800efa2:	000f      	movs	r7, r1
 800efa4:	0014      	movs	r4, r2
 800efa6:	18d5      	adds	r5, r2, r3
 800efa8:	42ac      	cmp	r4, r5
 800efaa:	d101      	bne.n	800efb0 <__sfputs_r+0x12>
 800efac:	2000      	movs	r0, #0
 800efae:	e007      	b.n	800efc0 <__sfputs_r+0x22>
 800efb0:	7821      	ldrb	r1, [r4, #0]
 800efb2:	003a      	movs	r2, r7
 800efb4:	0030      	movs	r0, r6
 800efb6:	f7ff ffdd 	bl	800ef74 <__sfputc_r>
 800efba:	3401      	adds	r4, #1
 800efbc:	1c43      	adds	r3, r0, #1
 800efbe:	d1f3      	bne.n	800efa8 <__sfputs_r+0xa>
 800efc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800efc4 <_vfiprintf_r>:
 800efc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efc6:	b0a1      	sub	sp, #132	@ 0x84
 800efc8:	000f      	movs	r7, r1
 800efca:	0015      	movs	r5, r2
 800efcc:	001e      	movs	r6, r3
 800efce:	9003      	str	r0, [sp, #12]
 800efd0:	2800      	cmp	r0, #0
 800efd2:	d004      	beq.n	800efde <_vfiprintf_r+0x1a>
 800efd4:	6a03      	ldr	r3, [r0, #32]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d101      	bne.n	800efde <_vfiprintf_r+0x1a>
 800efda:	f7fe fa71 	bl	800d4c0 <__sinit>
 800efde:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800efe0:	07db      	lsls	r3, r3, #31
 800efe2:	d405      	bmi.n	800eff0 <_vfiprintf_r+0x2c>
 800efe4:	89bb      	ldrh	r3, [r7, #12]
 800efe6:	059b      	lsls	r3, r3, #22
 800efe8:	d402      	bmi.n	800eff0 <_vfiprintf_r+0x2c>
 800efea:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800efec:	f7fe fc95 	bl	800d91a <__retarget_lock_acquire_recursive>
 800eff0:	89bb      	ldrh	r3, [r7, #12]
 800eff2:	071b      	lsls	r3, r3, #28
 800eff4:	d502      	bpl.n	800effc <_vfiprintf_r+0x38>
 800eff6:	693b      	ldr	r3, [r7, #16]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d113      	bne.n	800f024 <_vfiprintf_r+0x60>
 800effc:	0039      	movs	r1, r7
 800effe:	9803      	ldr	r0, [sp, #12]
 800f000:	f7fe fb9a 	bl	800d738 <__swsetup_r>
 800f004:	2800      	cmp	r0, #0
 800f006:	d00d      	beq.n	800f024 <_vfiprintf_r+0x60>
 800f008:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f00a:	07db      	lsls	r3, r3, #31
 800f00c:	d503      	bpl.n	800f016 <_vfiprintf_r+0x52>
 800f00e:	2001      	movs	r0, #1
 800f010:	4240      	negs	r0, r0
 800f012:	b021      	add	sp, #132	@ 0x84
 800f014:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f016:	89bb      	ldrh	r3, [r7, #12]
 800f018:	059b      	lsls	r3, r3, #22
 800f01a:	d4f8      	bmi.n	800f00e <_vfiprintf_r+0x4a>
 800f01c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800f01e:	f7fe fc7d 	bl	800d91c <__retarget_lock_release_recursive>
 800f022:	e7f4      	b.n	800f00e <_vfiprintf_r+0x4a>
 800f024:	2300      	movs	r3, #0
 800f026:	ac08      	add	r4, sp, #32
 800f028:	6163      	str	r3, [r4, #20]
 800f02a:	3320      	adds	r3, #32
 800f02c:	7663      	strb	r3, [r4, #25]
 800f02e:	3310      	adds	r3, #16
 800f030:	76a3      	strb	r3, [r4, #26]
 800f032:	9607      	str	r6, [sp, #28]
 800f034:	002e      	movs	r6, r5
 800f036:	7833      	ldrb	r3, [r6, #0]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d001      	beq.n	800f040 <_vfiprintf_r+0x7c>
 800f03c:	2b25      	cmp	r3, #37	@ 0x25
 800f03e:	d148      	bne.n	800f0d2 <_vfiprintf_r+0x10e>
 800f040:	1b73      	subs	r3, r6, r5
 800f042:	9305      	str	r3, [sp, #20]
 800f044:	42ae      	cmp	r6, r5
 800f046:	d00b      	beq.n	800f060 <_vfiprintf_r+0x9c>
 800f048:	002a      	movs	r2, r5
 800f04a:	0039      	movs	r1, r7
 800f04c:	9803      	ldr	r0, [sp, #12]
 800f04e:	f7ff ffa6 	bl	800ef9e <__sfputs_r>
 800f052:	3001      	adds	r0, #1
 800f054:	d100      	bne.n	800f058 <_vfiprintf_r+0x94>
 800f056:	e0ae      	b.n	800f1b6 <_vfiprintf_r+0x1f2>
 800f058:	6963      	ldr	r3, [r4, #20]
 800f05a:	9a05      	ldr	r2, [sp, #20]
 800f05c:	189b      	adds	r3, r3, r2
 800f05e:	6163      	str	r3, [r4, #20]
 800f060:	7833      	ldrb	r3, [r6, #0]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d100      	bne.n	800f068 <_vfiprintf_r+0xa4>
 800f066:	e0a6      	b.n	800f1b6 <_vfiprintf_r+0x1f2>
 800f068:	2201      	movs	r2, #1
 800f06a:	2300      	movs	r3, #0
 800f06c:	4252      	negs	r2, r2
 800f06e:	6062      	str	r2, [r4, #4]
 800f070:	a904      	add	r1, sp, #16
 800f072:	3254      	adds	r2, #84	@ 0x54
 800f074:	1852      	adds	r2, r2, r1
 800f076:	1c75      	adds	r5, r6, #1
 800f078:	6023      	str	r3, [r4, #0]
 800f07a:	60e3      	str	r3, [r4, #12]
 800f07c:	60a3      	str	r3, [r4, #8]
 800f07e:	7013      	strb	r3, [r2, #0]
 800f080:	65a3      	str	r3, [r4, #88]	@ 0x58
 800f082:	4b59      	ldr	r3, [pc, #356]	@ (800f1e8 <_vfiprintf_r+0x224>)
 800f084:	2205      	movs	r2, #5
 800f086:	0018      	movs	r0, r3
 800f088:	7829      	ldrb	r1, [r5, #0]
 800f08a:	9305      	str	r3, [sp, #20]
 800f08c:	f7fe fc47 	bl	800d91e <memchr>
 800f090:	1c6e      	adds	r6, r5, #1
 800f092:	2800      	cmp	r0, #0
 800f094:	d11f      	bne.n	800f0d6 <_vfiprintf_r+0x112>
 800f096:	6822      	ldr	r2, [r4, #0]
 800f098:	06d3      	lsls	r3, r2, #27
 800f09a:	d504      	bpl.n	800f0a6 <_vfiprintf_r+0xe2>
 800f09c:	2353      	movs	r3, #83	@ 0x53
 800f09e:	a904      	add	r1, sp, #16
 800f0a0:	185b      	adds	r3, r3, r1
 800f0a2:	2120      	movs	r1, #32
 800f0a4:	7019      	strb	r1, [r3, #0]
 800f0a6:	0713      	lsls	r3, r2, #28
 800f0a8:	d504      	bpl.n	800f0b4 <_vfiprintf_r+0xf0>
 800f0aa:	2353      	movs	r3, #83	@ 0x53
 800f0ac:	a904      	add	r1, sp, #16
 800f0ae:	185b      	adds	r3, r3, r1
 800f0b0:	212b      	movs	r1, #43	@ 0x2b
 800f0b2:	7019      	strb	r1, [r3, #0]
 800f0b4:	782b      	ldrb	r3, [r5, #0]
 800f0b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800f0b8:	d016      	beq.n	800f0e8 <_vfiprintf_r+0x124>
 800f0ba:	002e      	movs	r6, r5
 800f0bc:	2100      	movs	r1, #0
 800f0be:	200a      	movs	r0, #10
 800f0c0:	68e3      	ldr	r3, [r4, #12]
 800f0c2:	7832      	ldrb	r2, [r6, #0]
 800f0c4:	1c75      	adds	r5, r6, #1
 800f0c6:	3a30      	subs	r2, #48	@ 0x30
 800f0c8:	2a09      	cmp	r2, #9
 800f0ca:	d950      	bls.n	800f16e <_vfiprintf_r+0x1aa>
 800f0cc:	2900      	cmp	r1, #0
 800f0ce:	d111      	bne.n	800f0f4 <_vfiprintf_r+0x130>
 800f0d0:	e017      	b.n	800f102 <_vfiprintf_r+0x13e>
 800f0d2:	3601      	adds	r6, #1
 800f0d4:	e7af      	b.n	800f036 <_vfiprintf_r+0x72>
 800f0d6:	9b05      	ldr	r3, [sp, #20]
 800f0d8:	6822      	ldr	r2, [r4, #0]
 800f0da:	1ac0      	subs	r0, r0, r3
 800f0dc:	2301      	movs	r3, #1
 800f0de:	4083      	lsls	r3, r0
 800f0e0:	4313      	orrs	r3, r2
 800f0e2:	0035      	movs	r5, r6
 800f0e4:	6023      	str	r3, [r4, #0]
 800f0e6:	e7cc      	b.n	800f082 <_vfiprintf_r+0xbe>
 800f0e8:	9b07      	ldr	r3, [sp, #28]
 800f0ea:	1d19      	adds	r1, r3, #4
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	9107      	str	r1, [sp, #28]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	db01      	blt.n	800f0f8 <_vfiprintf_r+0x134>
 800f0f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f0f6:	e004      	b.n	800f102 <_vfiprintf_r+0x13e>
 800f0f8:	425b      	negs	r3, r3
 800f0fa:	60e3      	str	r3, [r4, #12]
 800f0fc:	2302      	movs	r3, #2
 800f0fe:	4313      	orrs	r3, r2
 800f100:	6023      	str	r3, [r4, #0]
 800f102:	7833      	ldrb	r3, [r6, #0]
 800f104:	2b2e      	cmp	r3, #46	@ 0x2e
 800f106:	d10c      	bne.n	800f122 <_vfiprintf_r+0x15e>
 800f108:	7873      	ldrb	r3, [r6, #1]
 800f10a:	2b2a      	cmp	r3, #42	@ 0x2a
 800f10c:	d134      	bne.n	800f178 <_vfiprintf_r+0x1b4>
 800f10e:	9b07      	ldr	r3, [sp, #28]
 800f110:	3602      	adds	r6, #2
 800f112:	1d1a      	adds	r2, r3, #4
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	9207      	str	r2, [sp, #28]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	da01      	bge.n	800f120 <_vfiprintf_r+0x15c>
 800f11c:	2301      	movs	r3, #1
 800f11e:	425b      	negs	r3, r3
 800f120:	9309      	str	r3, [sp, #36]	@ 0x24
 800f122:	4d32      	ldr	r5, [pc, #200]	@ (800f1ec <_vfiprintf_r+0x228>)
 800f124:	2203      	movs	r2, #3
 800f126:	0028      	movs	r0, r5
 800f128:	7831      	ldrb	r1, [r6, #0]
 800f12a:	f7fe fbf8 	bl	800d91e <memchr>
 800f12e:	2800      	cmp	r0, #0
 800f130:	d006      	beq.n	800f140 <_vfiprintf_r+0x17c>
 800f132:	2340      	movs	r3, #64	@ 0x40
 800f134:	1b40      	subs	r0, r0, r5
 800f136:	4083      	lsls	r3, r0
 800f138:	6822      	ldr	r2, [r4, #0]
 800f13a:	3601      	adds	r6, #1
 800f13c:	4313      	orrs	r3, r2
 800f13e:	6023      	str	r3, [r4, #0]
 800f140:	7831      	ldrb	r1, [r6, #0]
 800f142:	2206      	movs	r2, #6
 800f144:	482a      	ldr	r0, [pc, #168]	@ (800f1f0 <_vfiprintf_r+0x22c>)
 800f146:	1c75      	adds	r5, r6, #1
 800f148:	7621      	strb	r1, [r4, #24]
 800f14a:	f7fe fbe8 	bl	800d91e <memchr>
 800f14e:	2800      	cmp	r0, #0
 800f150:	d040      	beq.n	800f1d4 <_vfiprintf_r+0x210>
 800f152:	4b28      	ldr	r3, [pc, #160]	@ (800f1f4 <_vfiprintf_r+0x230>)
 800f154:	2b00      	cmp	r3, #0
 800f156:	d122      	bne.n	800f19e <_vfiprintf_r+0x1da>
 800f158:	2207      	movs	r2, #7
 800f15a:	9b07      	ldr	r3, [sp, #28]
 800f15c:	3307      	adds	r3, #7
 800f15e:	4393      	bics	r3, r2
 800f160:	3308      	adds	r3, #8
 800f162:	9307      	str	r3, [sp, #28]
 800f164:	6963      	ldr	r3, [r4, #20]
 800f166:	9a04      	ldr	r2, [sp, #16]
 800f168:	189b      	adds	r3, r3, r2
 800f16a:	6163      	str	r3, [r4, #20]
 800f16c:	e762      	b.n	800f034 <_vfiprintf_r+0x70>
 800f16e:	4343      	muls	r3, r0
 800f170:	002e      	movs	r6, r5
 800f172:	2101      	movs	r1, #1
 800f174:	189b      	adds	r3, r3, r2
 800f176:	e7a4      	b.n	800f0c2 <_vfiprintf_r+0xfe>
 800f178:	2300      	movs	r3, #0
 800f17a:	200a      	movs	r0, #10
 800f17c:	0019      	movs	r1, r3
 800f17e:	3601      	adds	r6, #1
 800f180:	6063      	str	r3, [r4, #4]
 800f182:	7832      	ldrb	r2, [r6, #0]
 800f184:	1c75      	adds	r5, r6, #1
 800f186:	3a30      	subs	r2, #48	@ 0x30
 800f188:	2a09      	cmp	r2, #9
 800f18a:	d903      	bls.n	800f194 <_vfiprintf_r+0x1d0>
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d0c8      	beq.n	800f122 <_vfiprintf_r+0x15e>
 800f190:	9109      	str	r1, [sp, #36]	@ 0x24
 800f192:	e7c6      	b.n	800f122 <_vfiprintf_r+0x15e>
 800f194:	4341      	muls	r1, r0
 800f196:	002e      	movs	r6, r5
 800f198:	2301      	movs	r3, #1
 800f19a:	1889      	adds	r1, r1, r2
 800f19c:	e7f1      	b.n	800f182 <_vfiprintf_r+0x1be>
 800f19e:	aa07      	add	r2, sp, #28
 800f1a0:	9200      	str	r2, [sp, #0]
 800f1a2:	0021      	movs	r1, r4
 800f1a4:	003a      	movs	r2, r7
 800f1a6:	4b14      	ldr	r3, [pc, #80]	@ (800f1f8 <_vfiprintf_r+0x234>)
 800f1a8:	9803      	ldr	r0, [sp, #12]
 800f1aa:	f7fd fc75 	bl	800ca98 <_printf_float>
 800f1ae:	9004      	str	r0, [sp, #16]
 800f1b0:	9b04      	ldr	r3, [sp, #16]
 800f1b2:	3301      	adds	r3, #1
 800f1b4:	d1d6      	bne.n	800f164 <_vfiprintf_r+0x1a0>
 800f1b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f1b8:	07db      	lsls	r3, r3, #31
 800f1ba:	d405      	bmi.n	800f1c8 <_vfiprintf_r+0x204>
 800f1bc:	89bb      	ldrh	r3, [r7, #12]
 800f1be:	059b      	lsls	r3, r3, #22
 800f1c0:	d402      	bmi.n	800f1c8 <_vfiprintf_r+0x204>
 800f1c2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800f1c4:	f7fe fbaa 	bl	800d91c <__retarget_lock_release_recursive>
 800f1c8:	89bb      	ldrh	r3, [r7, #12]
 800f1ca:	065b      	lsls	r3, r3, #25
 800f1cc:	d500      	bpl.n	800f1d0 <_vfiprintf_r+0x20c>
 800f1ce:	e71e      	b.n	800f00e <_vfiprintf_r+0x4a>
 800f1d0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800f1d2:	e71e      	b.n	800f012 <_vfiprintf_r+0x4e>
 800f1d4:	aa07      	add	r2, sp, #28
 800f1d6:	9200      	str	r2, [sp, #0]
 800f1d8:	0021      	movs	r1, r4
 800f1da:	003a      	movs	r2, r7
 800f1dc:	4b06      	ldr	r3, [pc, #24]	@ (800f1f8 <_vfiprintf_r+0x234>)
 800f1de:	9803      	ldr	r0, [sp, #12]
 800f1e0:	f7fd ff08 	bl	800cff4 <_printf_i>
 800f1e4:	e7e3      	b.n	800f1ae <_vfiprintf_r+0x1ea>
 800f1e6:	46c0      	nop			@ (mov r8, r8)
 800f1e8:	0801085a 	.word	0x0801085a
 800f1ec:	08010860 	.word	0x08010860
 800f1f0:	08010864 	.word	0x08010864
 800f1f4:	0800ca99 	.word	0x0800ca99
 800f1f8:	0800ef9f 	.word	0x0800ef9f

0800f1fc <__swhatbuf_r>:
 800f1fc:	b570      	push	{r4, r5, r6, lr}
 800f1fe:	000e      	movs	r6, r1
 800f200:	001d      	movs	r5, r3
 800f202:	230e      	movs	r3, #14
 800f204:	5ec9      	ldrsh	r1, [r1, r3]
 800f206:	0014      	movs	r4, r2
 800f208:	b096      	sub	sp, #88	@ 0x58
 800f20a:	2900      	cmp	r1, #0
 800f20c:	da0c      	bge.n	800f228 <__swhatbuf_r+0x2c>
 800f20e:	89b2      	ldrh	r2, [r6, #12]
 800f210:	2380      	movs	r3, #128	@ 0x80
 800f212:	0011      	movs	r1, r2
 800f214:	4019      	ands	r1, r3
 800f216:	421a      	tst	r2, r3
 800f218:	d114      	bne.n	800f244 <__swhatbuf_r+0x48>
 800f21a:	2380      	movs	r3, #128	@ 0x80
 800f21c:	00db      	lsls	r3, r3, #3
 800f21e:	2000      	movs	r0, #0
 800f220:	6029      	str	r1, [r5, #0]
 800f222:	6023      	str	r3, [r4, #0]
 800f224:	b016      	add	sp, #88	@ 0x58
 800f226:	bd70      	pop	{r4, r5, r6, pc}
 800f228:	466a      	mov	r2, sp
 800f22a:	f000 f889 	bl	800f340 <_fstat_r>
 800f22e:	2800      	cmp	r0, #0
 800f230:	dbed      	blt.n	800f20e <__swhatbuf_r+0x12>
 800f232:	23f0      	movs	r3, #240	@ 0xf0
 800f234:	9901      	ldr	r1, [sp, #4]
 800f236:	021b      	lsls	r3, r3, #8
 800f238:	4019      	ands	r1, r3
 800f23a:	4b04      	ldr	r3, [pc, #16]	@ (800f24c <__swhatbuf_r+0x50>)
 800f23c:	18c9      	adds	r1, r1, r3
 800f23e:	424b      	negs	r3, r1
 800f240:	4159      	adcs	r1, r3
 800f242:	e7ea      	b.n	800f21a <__swhatbuf_r+0x1e>
 800f244:	2100      	movs	r1, #0
 800f246:	2340      	movs	r3, #64	@ 0x40
 800f248:	e7e9      	b.n	800f21e <__swhatbuf_r+0x22>
 800f24a:	46c0      	nop			@ (mov r8, r8)
 800f24c:	ffffe000 	.word	0xffffe000

0800f250 <__smakebuf_r>:
 800f250:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f252:	2602      	movs	r6, #2
 800f254:	898b      	ldrh	r3, [r1, #12]
 800f256:	0005      	movs	r5, r0
 800f258:	000c      	movs	r4, r1
 800f25a:	b085      	sub	sp, #20
 800f25c:	4233      	tst	r3, r6
 800f25e:	d007      	beq.n	800f270 <__smakebuf_r+0x20>
 800f260:	0023      	movs	r3, r4
 800f262:	3347      	adds	r3, #71	@ 0x47
 800f264:	6023      	str	r3, [r4, #0]
 800f266:	6123      	str	r3, [r4, #16]
 800f268:	2301      	movs	r3, #1
 800f26a:	6163      	str	r3, [r4, #20]
 800f26c:	b005      	add	sp, #20
 800f26e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f270:	ab03      	add	r3, sp, #12
 800f272:	aa02      	add	r2, sp, #8
 800f274:	f7ff ffc2 	bl	800f1fc <__swhatbuf_r>
 800f278:	9f02      	ldr	r7, [sp, #8]
 800f27a:	9001      	str	r0, [sp, #4]
 800f27c:	0039      	movs	r1, r7
 800f27e:	0028      	movs	r0, r5
 800f280:	f7ff fa4c 	bl	800e71c <_malloc_r>
 800f284:	2800      	cmp	r0, #0
 800f286:	d108      	bne.n	800f29a <__smakebuf_r+0x4a>
 800f288:	220c      	movs	r2, #12
 800f28a:	5ea3      	ldrsh	r3, [r4, r2]
 800f28c:	059a      	lsls	r2, r3, #22
 800f28e:	d4ed      	bmi.n	800f26c <__smakebuf_r+0x1c>
 800f290:	2203      	movs	r2, #3
 800f292:	4393      	bics	r3, r2
 800f294:	431e      	orrs	r6, r3
 800f296:	81a6      	strh	r6, [r4, #12]
 800f298:	e7e2      	b.n	800f260 <__smakebuf_r+0x10>
 800f29a:	2380      	movs	r3, #128	@ 0x80
 800f29c:	89a2      	ldrh	r2, [r4, #12]
 800f29e:	6020      	str	r0, [r4, #0]
 800f2a0:	4313      	orrs	r3, r2
 800f2a2:	81a3      	strh	r3, [r4, #12]
 800f2a4:	9b03      	ldr	r3, [sp, #12]
 800f2a6:	6120      	str	r0, [r4, #16]
 800f2a8:	6167      	str	r7, [r4, #20]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d00c      	beq.n	800f2c8 <__smakebuf_r+0x78>
 800f2ae:	0028      	movs	r0, r5
 800f2b0:	230e      	movs	r3, #14
 800f2b2:	5ee1      	ldrsh	r1, [r4, r3]
 800f2b4:	f000 f856 	bl	800f364 <_isatty_r>
 800f2b8:	2800      	cmp	r0, #0
 800f2ba:	d005      	beq.n	800f2c8 <__smakebuf_r+0x78>
 800f2bc:	2303      	movs	r3, #3
 800f2be:	89a2      	ldrh	r2, [r4, #12]
 800f2c0:	439a      	bics	r2, r3
 800f2c2:	3b02      	subs	r3, #2
 800f2c4:	4313      	orrs	r3, r2
 800f2c6:	81a3      	strh	r3, [r4, #12]
 800f2c8:	89a3      	ldrh	r3, [r4, #12]
 800f2ca:	9a01      	ldr	r2, [sp, #4]
 800f2cc:	4313      	orrs	r3, r2
 800f2ce:	81a3      	strh	r3, [r4, #12]
 800f2d0:	e7cc      	b.n	800f26c <__smakebuf_r+0x1c>

0800f2d2 <_putc_r>:
 800f2d2:	b570      	push	{r4, r5, r6, lr}
 800f2d4:	0006      	movs	r6, r0
 800f2d6:	000d      	movs	r5, r1
 800f2d8:	0014      	movs	r4, r2
 800f2da:	2800      	cmp	r0, #0
 800f2dc:	d004      	beq.n	800f2e8 <_putc_r+0x16>
 800f2de:	6a03      	ldr	r3, [r0, #32]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d101      	bne.n	800f2e8 <_putc_r+0x16>
 800f2e4:	f7fe f8ec 	bl	800d4c0 <__sinit>
 800f2e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f2ea:	07db      	lsls	r3, r3, #31
 800f2ec:	d405      	bmi.n	800f2fa <_putc_r+0x28>
 800f2ee:	89a3      	ldrh	r3, [r4, #12]
 800f2f0:	059b      	lsls	r3, r3, #22
 800f2f2:	d402      	bmi.n	800f2fa <_putc_r+0x28>
 800f2f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f2f6:	f7fe fb10 	bl	800d91a <__retarget_lock_acquire_recursive>
 800f2fa:	68a3      	ldr	r3, [r4, #8]
 800f2fc:	3b01      	subs	r3, #1
 800f2fe:	60a3      	str	r3, [r4, #8]
 800f300:	2b00      	cmp	r3, #0
 800f302:	da05      	bge.n	800f310 <_putc_r+0x3e>
 800f304:	69a2      	ldr	r2, [r4, #24]
 800f306:	4293      	cmp	r3, r2
 800f308:	db12      	blt.n	800f330 <_putc_r+0x5e>
 800f30a:	b2eb      	uxtb	r3, r5
 800f30c:	2b0a      	cmp	r3, #10
 800f30e:	d00f      	beq.n	800f330 <_putc_r+0x5e>
 800f310:	6823      	ldr	r3, [r4, #0]
 800f312:	1c5a      	adds	r2, r3, #1
 800f314:	6022      	str	r2, [r4, #0]
 800f316:	701d      	strb	r5, [r3, #0]
 800f318:	b2ed      	uxtb	r5, r5
 800f31a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f31c:	07db      	lsls	r3, r3, #31
 800f31e:	d405      	bmi.n	800f32c <_putc_r+0x5a>
 800f320:	89a3      	ldrh	r3, [r4, #12]
 800f322:	059b      	lsls	r3, r3, #22
 800f324:	d402      	bmi.n	800f32c <_putc_r+0x5a>
 800f326:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f328:	f7fe faf8 	bl	800d91c <__retarget_lock_release_recursive>
 800f32c:	0028      	movs	r0, r5
 800f32e:	bd70      	pop	{r4, r5, r6, pc}
 800f330:	0029      	movs	r1, r5
 800f332:	0022      	movs	r2, r4
 800f334:	0030      	movs	r0, r6
 800f336:	f7fe f9bd 	bl	800d6b4 <__swbuf_r>
 800f33a:	0005      	movs	r5, r0
 800f33c:	e7ed      	b.n	800f31a <_putc_r+0x48>
	...

0800f340 <_fstat_r>:
 800f340:	2300      	movs	r3, #0
 800f342:	b570      	push	{r4, r5, r6, lr}
 800f344:	4d06      	ldr	r5, [pc, #24]	@ (800f360 <_fstat_r+0x20>)
 800f346:	0004      	movs	r4, r0
 800f348:	0008      	movs	r0, r1
 800f34a:	0011      	movs	r1, r2
 800f34c:	602b      	str	r3, [r5, #0]
 800f34e:	f7f5 fb61 	bl	8004a14 <_fstat>
 800f352:	1c43      	adds	r3, r0, #1
 800f354:	d103      	bne.n	800f35e <_fstat_r+0x1e>
 800f356:	682b      	ldr	r3, [r5, #0]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d000      	beq.n	800f35e <_fstat_r+0x1e>
 800f35c:	6023      	str	r3, [r4, #0]
 800f35e:	bd70      	pop	{r4, r5, r6, pc}
 800f360:	20000d30 	.word	0x20000d30

0800f364 <_isatty_r>:
 800f364:	2300      	movs	r3, #0
 800f366:	b570      	push	{r4, r5, r6, lr}
 800f368:	4d06      	ldr	r5, [pc, #24]	@ (800f384 <_isatty_r+0x20>)
 800f36a:	0004      	movs	r4, r0
 800f36c:	0008      	movs	r0, r1
 800f36e:	602b      	str	r3, [r5, #0]
 800f370:	f7f5 fb5e 	bl	8004a30 <_isatty>
 800f374:	1c43      	adds	r3, r0, #1
 800f376:	d103      	bne.n	800f380 <_isatty_r+0x1c>
 800f378:	682b      	ldr	r3, [r5, #0]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d000      	beq.n	800f380 <_isatty_r+0x1c>
 800f37e:	6023      	str	r3, [r4, #0]
 800f380:	bd70      	pop	{r4, r5, r6, pc}
 800f382:	46c0      	nop			@ (mov r8, r8)
 800f384:	20000d30 	.word	0x20000d30

0800f388 <_sbrk_r>:
 800f388:	2300      	movs	r3, #0
 800f38a:	b570      	push	{r4, r5, r6, lr}
 800f38c:	4d06      	ldr	r5, [pc, #24]	@ (800f3a8 <_sbrk_r+0x20>)
 800f38e:	0004      	movs	r4, r0
 800f390:	0008      	movs	r0, r1
 800f392:	602b      	str	r3, [r5, #0]
 800f394:	f7f5 fb60 	bl	8004a58 <_sbrk>
 800f398:	1c43      	adds	r3, r0, #1
 800f39a:	d103      	bne.n	800f3a4 <_sbrk_r+0x1c>
 800f39c:	682b      	ldr	r3, [r5, #0]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d000      	beq.n	800f3a4 <_sbrk_r+0x1c>
 800f3a2:	6023      	str	r3, [r4, #0]
 800f3a4:	bd70      	pop	{r4, r5, r6, pc}
 800f3a6:	46c0      	nop			@ (mov r8, r8)
 800f3a8:	20000d30 	.word	0x20000d30

0800f3ac <__assert_func>:
 800f3ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f3ae:	0014      	movs	r4, r2
 800f3b0:	001a      	movs	r2, r3
 800f3b2:	4b09      	ldr	r3, [pc, #36]	@ (800f3d8 <__assert_func+0x2c>)
 800f3b4:	0005      	movs	r5, r0
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	000e      	movs	r6, r1
 800f3ba:	68d8      	ldr	r0, [r3, #12]
 800f3bc:	4b07      	ldr	r3, [pc, #28]	@ (800f3dc <__assert_func+0x30>)
 800f3be:	2c00      	cmp	r4, #0
 800f3c0:	d101      	bne.n	800f3c6 <__assert_func+0x1a>
 800f3c2:	4b07      	ldr	r3, [pc, #28]	@ (800f3e0 <__assert_func+0x34>)
 800f3c4:	001c      	movs	r4, r3
 800f3c6:	4907      	ldr	r1, [pc, #28]	@ (800f3e4 <__assert_func+0x38>)
 800f3c8:	9301      	str	r3, [sp, #4]
 800f3ca:	9402      	str	r4, [sp, #8]
 800f3cc:	002b      	movs	r3, r5
 800f3ce:	9600      	str	r6, [sp, #0]
 800f3d0:	f000 f856 	bl	800f480 <fiprintf>
 800f3d4:	f000 f864 	bl	800f4a0 <abort>
 800f3d8:	20000048 	.word	0x20000048
 800f3dc:	08010875 	.word	0x08010875
 800f3e0:	080108b0 	.word	0x080108b0
 800f3e4:	08010882 	.word	0x08010882

0800f3e8 <_calloc_r>:
 800f3e8:	b570      	push	{r4, r5, r6, lr}
 800f3ea:	0c0b      	lsrs	r3, r1, #16
 800f3ec:	0c15      	lsrs	r5, r2, #16
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d11e      	bne.n	800f430 <_calloc_r+0x48>
 800f3f2:	2d00      	cmp	r5, #0
 800f3f4:	d10c      	bne.n	800f410 <_calloc_r+0x28>
 800f3f6:	b289      	uxth	r1, r1
 800f3f8:	b294      	uxth	r4, r2
 800f3fa:	434c      	muls	r4, r1
 800f3fc:	0021      	movs	r1, r4
 800f3fe:	f7ff f98d 	bl	800e71c <_malloc_r>
 800f402:	1e05      	subs	r5, r0, #0
 800f404:	d01b      	beq.n	800f43e <_calloc_r+0x56>
 800f406:	0022      	movs	r2, r4
 800f408:	2100      	movs	r1, #0
 800f40a:	f7fe fa01 	bl	800d810 <memset>
 800f40e:	e016      	b.n	800f43e <_calloc_r+0x56>
 800f410:	1c2b      	adds	r3, r5, #0
 800f412:	1c0c      	adds	r4, r1, #0
 800f414:	b289      	uxth	r1, r1
 800f416:	b292      	uxth	r2, r2
 800f418:	434a      	muls	r2, r1
 800f41a:	b29b      	uxth	r3, r3
 800f41c:	b2a1      	uxth	r1, r4
 800f41e:	4359      	muls	r1, r3
 800f420:	0c14      	lsrs	r4, r2, #16
 800f422:	190c      	adds	r4, r1, r4
 800f424:	0c23      	lsrs	r3, r4, #16
 800f426:	d107      	bne.n	800f438 <_calloc_r+0x50>
 800f428:	0424      	lsls	r4, r4, #16
 800f42a:	b292      	uxth	r2, r2
 800f42c:	4314      	orrs	r4, r2
 800f42e:	e7e5      	b.n	800f3fc <_calloc_r+0x14>
 800f430:	2d00      	cmp	r5, #0
 800f432:	d101      	bne.n	800f438 <_calloc_r+0x50>
 800f434:	1c14      	adds	r4, r2, #0
 800f436:	e7ed      	b.n	800f414 <_calloc_r+0x2c>
 800f438:	230c      	movs	r3, #12
 800f43a:	2500      	movs	r5, #0
 800f43c:	6003      	str	r3, [r0, #0]
 800f43e:	0028      	movs	r0, r5
 800f440:	bd70      	pop	{r4, r5, r6, pc}

0800f442 <__ascii_mbtowc>:
 800f442:	b082      	sub	sp, #8
 800f444:	2900      	cmp	r1, #0
 800f446:	d100      	bne.n	800f44a <__ascii_mbtowc+0x8>
 800f448:	a901      	add	r1, sp, #4
 800f44a:	1e10      	subs	r0, r2, #0
 800f44c:	d006      	beq.n	800f45c <__ascii_mbtowc+0x1a>
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d006      	beq.n	800f460 <__ascii_mbtowc+0x1e>
 800f452:	7813      	ldrb	r3, [r2, #0]
 800f454:	600b      	str	r3, [r1, #0]
 800f456:	7810      	ldrb	r0, [r2, #0]
 800f458:	1e43      	subs	r3, r0, #1
 800f45a:	4198      	sbcs	r0, r3
 800f45c:	b002      	add	sp, #8
 800f45e:	4770      	bx	lr
 800f460:	2002      	movs	r0, #2
 800f462:	4240      	negs	r0, r0
 800f464:	e7fa      	b.n	800f45c <__ascii_mbtowc+0x1a>

0800f466 <__ascii_wctomb>:
 800f466:	0003      	movs	r3, r0
 800f468:	1e08      	subs	r0, r1, #0
 800f46a:	d005      	beq.n	800f478 <__ascii_wctomb+0x12>
 800f46c:	2aff      	cmp	r2, #255	@ 0xff
 800f46e:	d904      	bls.n	800f47a <__ascii_wctomb+0x14>
 800f470:	228a      	movs	r2, #138	@ 0x8a
 800f472:	2001      	movs	r0, #1
 800f474:	601a      	str	r2, [r3, #0]
 800f476:	4240      	negs	r0, r0
 800f478:	4770      	bx	lr
 800f47a:	2001      	movs	r0, #1
 800f47c:	700a      	strb	r2, [r1, #0]
 800f47e:	e7fb      	b.n	800f478 <__ascii_wctomb+0x12>

0800f480 <fiprintf>:
 800f480:	b40e      	push	{r1, r2, r3}
 800f482:	b517      	push	{r0, r1, r2, r4, lr}
 800f484:	4c05      	ldr	r4, [pc, #20]	@ (800f49c <fiprintf+0x1c>)
 800f486:	ab05      	add	r3, sp, #20
 800f488:	cb04      	ldmia	r3!, {r2}
 800f48a:	0001      	movs	r1, r0
 800f48c:	6820      	ldr	r0, [r4, #0]
 800f48e:	9301      	str	r3, [sp, #4]
 800f490:	f7ff fd98 	bl	800efc4 <_vfiprintf_r>
 800f494:	bc1e      	pop	{r1, r2, r3, r4}
 800f496:	bc08      	pop	{r3}
 800f498:	b003      	add	sp, #12
 800f49a:	4718      	bx	r3
 800f49c:	20000048 	.word	0x20000048

0800f4a0 <abort>:
 800f4a0:	2006      	movs	r0, #6
 800f4a2:	b510      	push	{r4, lr}
 800f4a4:	f000 f82c 	bl	800f500 <raise>
 800f4a8:	2001      	movs	r0, #1
 800f4aa:	f7f5 fa63 	bl	8004974 <_exit>

0800f4ae <_raise_r>:
 800f4ae:	b570      	push	{r4, r5, r6, lr}
 800f4b0:	0004      	movs	r4, r0
 800f4b2:	000d      	movs	r5, r1
 800f4b4:	291f      	cmp	r1, #31
 800f4b6:	d904      	bls.n	800f4c2 <_raise_r+0x14>
 800f4b8:	2316      	movs	r3, #22
 800f4ba:	6003      	str	r3, [r0, #0]
 800f4bc:	2001      	movs	r0, #1
 800f4be:	4240      	negs	r0, r0
 800f4c0:	bd70      	pop	{r4, r5, r6, pc}
 800f4c2:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d004      	beq.n	800f4d2 <_raise_r+0x24>
 800f4c8:	008a      	lsls	r2, r1, #2
 800f4ca:	189b      	adds	r3, r3, r2
 800f4cc:	681a      	ldr	r2, [r3, #0]
 800f4ce:	2a00      	cmp	r2, #0
 800f4d0:	d108      	bne.n	800f4e4 <_raise_r+0x36>
 800f4d2:	0020      	movs	r0, r4
 800f4d4:	f000 f830 	bl	800f538 <_getpid_r>
 800f4d8:	002a      	movs	r2, r5
 800f4da:	0001      	movs	r1, r0
 800f4dc:	0020      	movs	r0, r4
 800f4de:	f000 f819 	bl	800f514 <_kill_r>
 800f4e2:	e7ed      	b.n	800f4c0 <_raise_r+0x12>
 800f4e4:	2a01      	cmp	r2, #1
 800f4e6:	d009      	beq.n	800f4fc <_raise_r+0x4e>
 800f4e8:	1c51      	adds	r1, r2, #1
 800f4ea:	d103      	bne.n	800f4f4 <_raise_r+0x46>
 800f4ec:	2316      	movs	r3, #22
 800f4ee:	6003      	str	r3, [r0, #0]
 800f4f0:	2001      	movs	r0, #1
 800f4f2:	e7e5      	b.n	800f4c0 <_raise_r+0x12>
 800f4f4:	2100      	movs	r1, #0
 800f4f6:	0028      	movs	r0, r5
 800f4f8:	6019      	str	r1, [r3, #0]
 800f4fa:	4790      	blx	r2
 800f4fc:	2000      	movs	r0, #0
 800f4fe:	e7df      	b.n	800f4c0 <_raise_r+0x12>

0800f500 <raise>:
 800f500:	b510      	push	{r4, lr}
 800f502:	4b03      	ldr	r3, [pc, #12]	@ (800f510 <raise+0x10>)
 800f504:	0001      	movs	r1, r0
 800f506:	6818      	ldr	r0, [r3, #0]
 800f508:	f7ff ffd1 	bl	800f4ae <_raise_r>
 800f50c:	bd10      	pop	{r4, pc}
 800f50e:	46c0      	nop			@ (mov r8, r8)
 800f510:	20000048 	.word	0x20000048

0800f514 <_kill_r>:
 800f514:	2300      	movs	r3, #0
 800f516:	b570      	push	{r4, r5, r6, lr}
 800f518:	4d06      	ldr	r5, [pc, #24]	@ (800f534 <_kill_r+0x20>)
 800f51a:	0004      	movs	r4, r0
 800f51c:	0008      	movs	r0, r1
 800f51e:	0011      	movs	r1, r2
 800f520:	602b      	str	r3, [r5, #0]
 800f522:	f7f5 fa17 	bl	8004954 <_kill>
 800f526:	1c43      	adds	r3, r0, #1
 800f528:	d103      	bne.n	800f532 <_kill_r+0x1e>
 800f52a:	682b      	ldr	r3, [r5, #0]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d000      	beq.n	800f532 <_kill_r+0x1e>
 800f530:	6023      	str	r3, [r4, #0]
 800f532:	bd70      	pop	{r4, r5, r6, pc}
 800f534:	20000d30 	.word	0x20000d30

0800f538 <_getpid_r>:
 800f538:	b510      	push	{r4, lr}
 800f53a:	f7f5 fa05 	bl	8004948 <_getpid>
 800f53e:	bd10      	pop	{r4, pc}

0800f540 <_init>:
 800f540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f542:	46c0      	nop			@ (mov r8, r8)
 800f544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f546:	bc08      	pop	{r3}
 800f548:	469e      	mov	lr, r3
 800f54a:	4770      	bx	lr

0800f54c <_fini>:
 800f54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f54e:	46c0      	nop			@ (mov r8, r8)
 800f550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f552:	bc08      	pop	{r3}
 800f554:	469e      	mov	lr, r3
 800f556:	4770      	bx	lr
